============================MODULE26=======================================
|                                                                         |
|  The program examples' source codes have been arranged in the same      |
|  order that appeared in the Tutorial. This is unedited and unverified   |
|  compilation. Published as is basis for educational, reacretional and   |
|  brain teaser purposes. All trademarks, copyrights and IPs, wherever    |
|  exist, are the sole property of their respective owner and/or          |
|  holder. Any damage or loss by using the materials presented in this    |
|  tutorial is USER responsibility. Part or full distribution,            |
|  reproduction and modification is granted to any body.                  |
|     Copyright 2003-2005 © Tenouk, Inc. All rights reserved.		  |
|          Distributed through http://www.tenouk.com			        |
|        		                                                        |
|									                    |
===========================================================================
Originally programs compiled using Borland C++. Example compiled using
g++ are given at the end of every Module. For example if you want to compile
C++ codes using VC++/VC++ .Net, change
the header file accordingly.  Just need some modification for the header
files...:

-------------------------------------------------
#include <iostream.h>
//for system()
#include <stdlib.h>

...
{
C++ codes...
}
-------------------------------------------------
should be changed to:
-------------------------------------------------
#include <iostream>
//use C++ wrapper to call C functions from C++ programs...
#include <cstdlib>
using namespace std;

...
{
C++ codes...
}
-------------------------------------------------
In VC++/VC++ .Net the iostream.h (header with .h) is not valid anymore.
It should be C++ header, <iostream> so that it comply to the standard.
In older Borland C++ compiler this still works, but not proper any more...
and for standard C/C++ the portability should be no problem or better
you read Module23 at http://www.tenouk.com/Module23.html to get
the big picture...For C codes, they still C codes :o)
=========================================================================
============================HERE, ALL C++ codes==========================

//find_last_not_of() part I
#include <string>
#include <iostream>
using namespace std;

int main() 
{
  //searching for a single character in a string
   string str1("daddy donkey is dead");
   cout<<"str1 string is: "<<str1<<endl;
   basic_string <char>::size_type index1, index2;
   static const basic_string <char>::size_type npos = -1;

   index1 = str1.find_last_not_of('d', 2);
   cout<<"Operation: str1.find_last_not_of('d', 2)"<<endl;
   if(index1 != npos)
      cout<<"The index of the last non 'd'\nfound before the "
           <<"2nd position in str1 is: "<<unsigned int(index1)<< endl;
   else
      cout<<"The non 'd' character was not found."<<endl;

   index2 = str1.find_last_not_of('d');
   cout<<"\nOperation: str1.find_last_not_of('d')"<<endl;
   if(index2 != npos)
      cout<<"The index of the non 'd' found in str1 is: " 
           <<unsigned int(index2)<<endl;
   else
      cout<<"The Character 'non d' was not found in str1."<<endl;
cout<<endl;
   
//----------------------------------------------------------
//searching a string for a substring as specified by a C-string
   string str2("Testing Testing Testing");
   cout<<"str2 string is: "<<str2<<"\n";
   basic_string <char>::size_type index3, index4;

   const char *cstr = "ei";
   index3 = str2.find_last_not_of(cstr, 12);
   cout<<"Operation: str2.find_last_not_of(cstr, 12)"<<endl;
   if(index3 != npos)
      cout<<"The index of the last occurrence of a "
           <<"element not\nof 'ei' in str2 before the 12th "
           <<"position is: "<<unsigned int(index3)<<endl;
   else
      cout<<"Elements not of the substring 'ei' were not "
          <<"\n found in str2 before the 12th position."<<endl;

   const char *cstr1 = "g t";
   index4 = str2.find_last_not_of(cstr1);
   cout<<"\nOperation: str2.find_last_not_of(cstr1)"<<endl;
   if(index4 != npos) 
      cout<<"The index of the last element not "
          <<"in 'g t'\nis: "<<unsigned int(index4)<<endl;
   else
      cout<<"The elements of the substring 'g t' were "
          <<"not found in str2"<<endl;
   return 0;
}

---------------------------------------------------------------------------------------------------------

//find_last_not_of() part II
#include <string>
#include <iostream>
using namespace std;

int main() 
{
//searching a string for a substring as specified by a C-string
   string str3("Playing Testing Boring");
   cout<<"str3 string is: "<<str3<<"\n";
   basic_string <char>::size_type index5, index6;
   static const basic_string <char>::size_type npos = -1;

   const char *cstr2 = "PTB";
   index5 = str3.find_last_not_of(cstr2);
   cout<<"Operation: str3.find_last_not_of(cstr2)"<<endl;
   if(index5 != npos)
      cout<<"The index of the last occurrence of an "
          <<"element in str3\nother than one of the "
          <<"characters in 'PTB' is: "<<unsigned int(index5)<<endl;
   else
      cout<<"Elements in str3 contain only characters in the string 'PTB'"<<endl;

   const char *cstr3 = "gTB";
   index6 = str3.find_last_not_of(cstr3, 6, index5-1);
   cout<<"\nOperation: str3.find_last_not_of(cstr3, 6, index5-1)"<<endl;
   if(index6 != npos)
      cout<<"The index of the occurrence of an "
          <<"element\nnot in 'gTB' in str3 is: "
          <<unsigned int(index6)<<endl;
   else
      cout<<"Elements in str3 contains only characters "
          <<"in the string 'gTB'."<<endl;
cout<<endl;

//-----------------------------------------------------------
//searching a string for a substring as specified by a string
   string str4("Testing 123 Testing 123");
   cout<<"str4 string is: "<<str4<<"\n";
   basic_string <char>::size_type index7, index8;

   string str5("3 1");
   index7 = str4.find_last_not_of(str5, 18);
   cout<<"Operation: str4.find_last_not_of(str5, 18)"<<endl;
   if(index7 != npos)
      cout<<"The index of the last occurrence of an "
           <<"element not\nin '3 1' in str4 before the 18th "
           <<"position is: "<<unsigned int(index7)<<endl;
   else
      cout<<"Elements other than those in the substring"
           <<" '3 1' were not found in the string str4"<<endl;

   string str6("Testing");
   index8 = str4.find_last_not_of(str6);
   cout<<"\nOperation: str4.find_last_not_of(str6)"<<endl;
   if(index8 != npos)
      cout<<"The index of the last occurrence of an "
          <<"element not in\n'Testing' in str4 before the end "
          <<"position is: "<<unsigned int(index8)<<endl;
   else
      cout<<"Elements other than those in the substring\n"
          <<"'Testing' were not found in the string str4"<<endl;
   return 0;
}


----------------------------------------------------------------------------------------------------------------

//find_last_of() part I
#include <string>
#include <iostream>
using namespace std;

int main() 
{
   //searching for a single character in a string
   string str1("Testing 1234 Testing 1234");
   cout<<"str1 string is: "<<str1<<endl;
   basic_string <char>::size_type index1, index2;
   static const basic_string <char>::size_type npos = -1;

   index1 = str1.find_last_of('g', 24);
   cout<<"Operation: str1.find_last_of('g', 24)"<<endl;
   if(index1 != npos)
      cout<<"The index of the last 'g' found before\nthe 24th"
          <<" position in str1 is: "<<unsigned int(index1)<<endl;
   else
      cout<<"The character 'g' was not found in str1"<<endl;

   index2 = str1.find_first_of('z');
   cout<<"\nOperation: index2 = str1.find_first_of('z')"<<endl;
   if(index2 != npos)
      cout<<"The index of the 'z' found in str1 is: " 
          <<unsigned int(index2)<<endl;
   else
      cout<<"The character 'z' was not found in str1"<<endl;
   cout<<endl;

   //--------------------------------------------------
   //searching a string for a substring as specified by a C-string
   string str2("Testing 1234 Testing 1234");
   cout<<"str2 string is: "<<str2<<endl;
   basic_string <char>::size_type index3, index4;

   const char *cstr = "t1";
   index3 = str2.find_last_of(cstr, 25);
   cout<<"Operation: str2.find_last_of(cstr, 25)"<<endl;
   if(index3 != npos)
      cout<<"The index of the last occurrence of an "
          <<"element\nof 't1' in str2 before the 25th "
          <<"position is: "<<unsigned int(index3)<<endl;
   else
      cout<<"Elements of the substring 't1' were not\n"
          <<"found in str2 before the 25th position."<<endl;

   const char *cstr1 = "g3";
   index4 = str2.find_last_of(cstr1);
   cout<<"\nOperation: str2.find_last_of(cstr1)"<<endl;
   if(index4 != npos)
      cout<<"The index of the last element of 'g3'\n"
           <<"after the 0th position in str2 is: "
           <<unsigned int(index4)<<endl;
   else
      cout<<"The substring 'g3' was not found in str2."<<endl;
   return 0;
}

----------------------------------------------------------------------------------------------------------

//find_last_of() part II
#include <string>
#include <iostream>
using namespace std;

int main() 
{
   //searching a string for a substring as specified by a C-string
   string str3("Testing 1234 Testing 1234");
   cout<<"str3 string is: "<<str3<<endl;
   basic_string <char>::size_type index5;
   static const basic_string <char>::size_type npos = -1;

   const char *cstr2 = "s1";
   index5 = str3.find_last_of(cstr2, 20, 20);
   cout<<"Operation: str3.find_last_of(cstr2, 20, 20)"<<endl;
   if(index5 != npos)
      cout<<"The index of the last occurrence of an "
          <<"element\nof 's1' in str3 before the 20th "
          <<"position is: "<<unsigned int(index5)<<endl;
   else
      cout<<"Elements of the substring 's1' were not\n"
          <<"found in str3 before the 20th position."<<endl;
   cout<<endl;

//-------------------------------------------------------
   //searching a string for a substring as specified by a string
   string str4("Testing 1234 Testing 1234");
   cout<<"str4 string is: "<<str4<<endl;
   basic_string <char>::size_type index6, index7;

   string str5("416");
   index6 = str4.find_last_of(str5, 25);
   cout<<"Operation: str4.find_last_of(str5, 25)"<<endl;
   if(index6 != npos)
      cout<<"The index of the last occurrence of an "
          <<"element\nof '416' in str4 before the 25th "
          <<"position is: "<<unsigned int(index6)<<endl;
   else
      cout<<"Elements of the substring '416' were not\n"
          <<"found in str4 after the 0th position"<<endl;

   string str6("1g");
   index7 = str4.find_last_of(str6);
   cout<<"\nOperation: str4.find_last_of(str6)"<<endl;
   if(index7 != npos)
      cout<<"The index of the last occurrence of an "
          <<"element\nof '1g' in str4 before the 0th "
          <<"position is: "<<unsigned int(index7)<<endl;
   else
      cout<<"Elements of the substring '1g' were not\n"
           <<"found in str4 after the 0th position"<< endl;
   return 0;
}

---------------------------------------------------------------------------------------------------------------

//get_allocator()
#include <string>
#include <iostream>
using namespace std;

int main() 
{
   //using the default allocator.
   string str1;
   basic_string <char> str2;
   basic_string <char, char_traits<char>, allocator<char> > str3;

   //str4 will use the same allocator class as str1
   basic_string <char> str4(str1.get_allocator());

   basic_string <char>::allocator_type xchar = str1.get_allocator();
   //You can now call functions on the allocator class xchar used by str1
  string str5(xchar);
  return 0;
}

----------------------------------------------------------------------------------------------------------------

//insert() part I
#include <string>
#include <iostream>
using namespace std;

int main()
{
//inserting a C-string at a given position
basic_string <char> str1("e insert() testing");
const char *cstr1 = "Th";

cout<<"str1 = "<<str1<<endl;
cout<<"cstr1 = "<<cstr1<<endl;
str1.insert(0, cstr1);
cout<<"Operation: str1.insert(0, cstr1)"<<endl;
cout<<"Inserting a C-string at position 0 is:\n"<<str1<<endl;
cout<<endl;

//inserting a C-string at a given position for a specified number of elements
basic_string <char> str2("Test");
const char *cstr2 = "ing an insert()";

cout<<"str2 = "<<str2<<endl;
cout<<"cstr2 = "<<cstr2<<endl;
str2.insert(4, cstr2, 15);
cout<<"Operation: str2.insert(4, cstr2, 15)"<<endl;
cout<<"Inserting a C-string at the end is:\n"<<str2<<endl;
cout<<endl;

//inserting a string at a given position
basic_string <char> str3(" the insert()");
string str4("Testing");

cout<<"str3 = "<<str3<<endl;
cout<<"str4 = "<<str4<<endl;
str3.insert(0, str4);
cout<<"Operation: str3.insert(0, str4)"<<endl;
cout<<"Inserting string at position 0 is:\n"<<str3<<endl;
cout<<endl;

//inserting part of a string at a given position
basic_string <char> str5("Testing ");
string str6(" the insert()");

cout<<"str5 = "<<str5<<endl;
cout<<"str6 = "<<str6<<endl;
str5.insert(7, str6, 4, 9);
cout<<"Operation: str5.insert(7, str6, 4, 9)"<<endl;
cout<<"Inserting part of a string at position 9 is:\n"<<str5<<endl;
return 0;
}

--------------------------------------------------------------------------------------------------------------

//insert() part II
#include <string>
#include <iostream>
using namespace std;

int main()
{
//inserting a number of characters at a specified position in the string
string str7("Testing the insert()?");
cout<<"str7 = "<<str7<<endl;
str7.insert(20, 4, '!');
cout<<"Operation: str7.insert(20, 4, '!')"<<endl;
cout<<"Inserting characters: \n"<<str7<<endl;
cout<<endl;

//inserting a character at a specified position in the string
string str8("Tesing the insert()");
cout<<"str8 = "<<str8<<endl;
basic_string <char>::iterator StrIter = (str8.begin() + 3);
str8.insert(StrIter, 't');
cout<<"Operation: str8.insert(StrIter, 't')"<<endl;
cout<<"Inserting missing character: \n"<<str8<<endl;
cout<<endl;

//inserts a range at a specified position in the string
string str9("First part");
string str10("Second partition");
cout<<"str9 = "<<str9<<endl;
cout<<"str10 = "<<str10<<endl;
basic_string <char>::iterator Str9Iter = (str9.begin() + 5);
str9.insert(Str9Iter, str10.begin()+6, str10.end()-4);
cout<<"Operation: str9.insert(Str9Iter, str10.begin()+6,\nstr10.end()-4)"<<endl;
cout<<"Inserting a range of character: \n"<<str9<<endl;
cout<<endl;

//inserting a number of characters at a specified position in the string
string str11("Final insert() test");
cout<<"str11 = "<<str11<<endl;
basic_string <char>::iterator Str11Iter = (str11.begin() + 15);
str11.insert(Str11Iter, 5, 'a');
cout<<"Operation: str11.insert(Str11Iter, 5, 'a')"<<endl;
cout<<"A range of character inserted in the string: \n"<<str11<<endl;
return 0;
}

---------------------------------------------------------------------------------------------------------------

//push_back()
#include <string>
#include <iostream>
using namespace std;

int main() 
{
   string str1("Testing the push_back()");
   basic_string <char>::iterator StrIter, Str1Iter;

   cout<<"str1 string is: ";
   for(StrIter = str1.begin(); StrIter != str1.end(); StrIter++)
      cout<<*StrIter;
   cout<<endl;
   cout<<"Move the pointer to the end of string..."<<endl;
   Str1Iter = str1.end();
   cout<<"Then add an element to the end of the string..."<<endl;
   str1.push_back('T');
   cout<<"\nOperation: str1.end() then str1.push_back('T')"<<endl;  
   cout<<"The last character of str1 string is: "
        <<*Str1Iter;
   cout<<endl;

   cout<<"\nMove the pointer from the beginning to the end..."<<endl;
   cout<<"Now, str1 string is: ";
   for(StrIter = str1.begin(); StrIter != str1.end(); StrIter++)
      cout<<*StrIter;
   cout<<endl;
   return 0;
}

-------------------------------------------------------------------------------------------------------------

//rbegin() and rend()
#include <string>
#include <iostream>
using namespace std;

int main()
{
   string str1("The reverse begin, rbegin()"), str2;
   basic_string <char>::reverse_iterator StrIter, Str1Iter;
   basic_string <char>::const_reverse_iterator str1_rcIter;

   //well, no need to minus the null character huh?
   cout<<"Operation: str1.rbegin()"<<endl;
   Str1Iter = str1.rbegin();
   cout<<"The first character of the reversed str1 string is: "
        <<*Str1Iter<<endl;
   cout<<"The full reversed str1 string is:\n";
   //rbegin() should be with rend()
   for(StrIter = str1.rbegin(); StrIter != str1.rend(); StrIter++)
      cout<<*StrIter;
   cout<<"\n\n";

   //The dereferenced iterator can be used to modify a character
   cout<<"Operation: *Str1Iter = 'Z'"<<endl; 
   *Str1Iter = 'Z';
   cout<<"The first character of the new str1 is: "
        <<*Str1Iter<<endl;
   cout<<"The full new reversed str1 is:\n";
   for(StrIter = str1.rbegin(); StrIter != str1.rend(); StrIter++)
      cout<<*StrIter;
   cout<<"\n\n";

   //The following line will generate error because iterator is const
   //*str1_rcIter = 'T';

   //For an empty string, rbegin() is equivalent to rend()
   cout<<"Operation: str2.rbegin() == str2.rend()"<<endl;
   if(str2.rbegin() == str2.rend())
      cout<<"The string str2 is empty."<<endl;
   else
      cout<<"The stringstr2 is not empty."<<endl;
   return 0;
}

-------------------------------------------------------------------------------------------------------------

//replace() part I
#include <string>
#include <iostream>
using namespace std;

int main() 
{

   //replacing part of the string with
   //characters of a string or C-string
   //remember that index start from 0!
   string str1, str2;
   string str3("TESTING");
   string str4("ABC");
   const char* cstr = "DEF";
   cout<<"str3 string is: "<<str3<<endl;
   cout<<"str4 string is: "<<str4<<endl;
   cout<<"cstr C-string is: "<<cstr<<endl;
   
   str1 = str3.replace(1, 3, str4);
   cout<<"Operation: str3.replace(1, 3, str4)"<<endl;
   cout<<"The new string is: "<<str1<<endl;
   cout<<"\nOperation: str3.replace(5, 3, cstr)"<<endl;
   str2 = str3.replace(5, 3, cstr);
   cout<<"The new string is: "<<str2<<"\n\n";
   
   //replacing part of the string with characters
   //form part of a string or C-string
   string str5, str6;
   string str7 ("TESTING");
   string str8 ("123");
   const char* cstr1 = "456";
  
   cout<<"str7 string is: "<<str7<<endl;
   cout<<"str8 string is: "<<str8<<endl;
   cout<<"cstr1 C-string is: "<<cstr1<<endl;
   cout<<"Operation: str7.replace(1, 3, str8, 1, 2)"<<endl;
   str5 = str7.replace(1, 3, str8, 1, 2);
   cout<<"The new string is: "<<str5<<endl;
   cout<<"\nOperation: str7.replace(4, 3, cstr1, 1)"<<endl;
   str6 = str7.replace(4, 3, cstr1, 1);
   cout<<"The new string is: "<<str6<<"\n\n";

   //replacing part of the string with characters
   string str9;
   string str10 ("TESTING");
   char cstr2 = 'R';
   cout<<"str10 string is: "<<str10<<endl;
   cout<<"cstr2 character is: "<<cstr2<<endl;
   cout<<"Operation: str10.replace(2, 4, 5, cstr2)"<<endl;
   str9 = str10.replace(2, 4, 5, cstr2);
   cout<<"The new string is: "<<str9<<endl;
   return 0;
}

--------------------------------------------------------------------------------------------------------------

//replace() part II
#include <string>
#include <iostream>
using namespace std;

int main() 
{

//replacing part of the string, delineated with iterators,
//with a string or C-string
   string str11, str12;
   string str13("TESTING1");
   string str14("123");
   const char* cstr3 = "AAA";
   
   cout<<"str13 string is: "<<str13<<endl;
   cout<<"str14 string is: "<<str14<<endl;
   cout<<"cstr3 C-string is: "<<cstr3<<endl;
   basic_string<char>::iterator Iter1, Iter2;
   
   cout<<"Operation: str13.begin()"<<endl;
   cout<<"Operation: str13.begin() + 3"<<endl;
   cout<<"Operation: str13.replace(Iter1, Iter2, str14)"<<endl;

   Iter1 = str13.begin();
   Iter2 = str13.begin() + 3;
   str11 = str13.replace(Iter1, Iter2, str14);
   cout<<"The new string is: "<<str11<<endl;
   cout<<"Operation: str13.replace(Iter1, Iter2, cstr3)"<<endl;
   str12 = str13.replace(Iter1, Iter2, cstr3);
   cout<<"The new string is: "<<str12<<"\n\n";

   //replacing part of the string delineated with iterators
   //with a number of C-string characters 
   string str15;
   string str16("TESTING2");
   const char* cstr4 = "1234AA";
   cout<<"str16 string is: "<<str16<<endl;
   cout<<"cstr4 C-string is: "<<cstr4<<endl;
   basic_string<char>::iterator Iter3, Iter4;

   cout<<"Operation: str16.begin()"<<endl;
   cout<<"Operation: str16.begin() + 4"<<endl;
   cout<<"Operation: str16.replace(Iter3, Iter4, cstr4, 4)"<<endl;
   Iter3 = str16.begin();
   Iter4 = str16.begin() + 4;
   str15 = str16.replace(Iter3, Iter4, cstr4, 4);
   cout<<"The new string is: "<<str15<<"\n\n";

   //replacing part of the string delineated with iterators
   //with specified characters
   string str17;
   string str18("TESTING3");
   char cstr5 = 'u';
   
   cout<<"str18 string is: "<<str18<<endl;
   cout<<"cstr5 character is: "<<cstr5<<endl;
   basic_string<char>::iterator Iter5, Iter6;
   Iter5 = str18.begin();
   Iter6 = str18.begin() + 3;
  
   str17 = str18.replace(Iter5, Iter6, 4, cstr5);
   cout<<"The new string is: "<<str17<<"\n\n";

   //replacing part of the operand string delineated with iterators
   //with part of a parameter string delineated with iterators
   string str19;
   string str20("TESTING4"); //operand
   string str21("1234");  //parameter
   cout<<"str20 string is: "<<str20<<endl;
   cout<<"str21 string is: "<<str21<<endl;
   basic_string<char>::iterator Iter7, Iter8, Iter9, Iter10;
   
   cout<<"Operation: str20.begin() + 1"<<endl;
   cout<<"Operation: str20.begin() + 3"<<endl;
   cout<<"Operation: str21.begin()"<<endl;
   cout<<"Operation: str21.begin() + 2"<<endl;

   Iter7 = str20.begin() + 1;
   Iter8 = str20.begin() + 3;
   Iter9 = str21.begin();
   Iter10 = str21.begin() + 2;
   cout<<"Operation: str20.replace(Iter7, Iter8, Iter9, Iter10)"<<endl;
   str19 = str20.replace(Iter7, Iter8, Iter9, Iter10);
   cout<<"The new string is: "<<str19<<endl;
   return 0;
}

--------------------------------------------------------------------------------------------------------------

//reserve()
#include <string>
#include <iostream>
using namespace std;

int main() 
{
   string str1("Testing the reserve()");
   cout<<"str1 string is: "<<str1<<endl;

   basic_string <char>::size_type SizeStr1, Size1Str1;
   SizeStr1 = str1.size();
   basic_string <char>::size_type CapaStr1, Capa1Str1;
   CapaStr1 = str1.capacity();

   //Compare size & capacity of the original string
   cout<<"The size of str1 string is: "<<SizeStr1<<endl;
   cout<<"The capacity of str1 string is: "<<CapaStr1<<"\n\n";

   //Compare size & capacity of the string
   //with added capacity
   cout<<"Operation: str1.reserve(20)"<<endl;
   str1.reserve(20);
   Size1Str1 = str1.size();
   Capa1Str1 = str1.capacity();

   cout<<"str1 with increased capacity is: "<<str1<<endl;
   cout<<"The size of str1 string is: "<<Size1Str1<<endl;
   cout<<"The increased capacity of str1 string is: "<<Capa1Str1<<"\n\n";

   //Compare size & capacity of the string
   //with downsized capacity. Without any parameter,
   //it should shrink to fit the number of the characters
   //currently in the string
   cout<<"Operation: str1.reserve()"<<endl;
   str1.reserve();
   basic_string <char>::size_type Size2Str1;
   basic_string <char>::size_type Capa2Str1;
   Size2Str1 = str1.size();
   Capa2Str1 = str1.capacity();

   cout<<"str1 with downsized capacity is: "<<str1<<endl;
   cout<<"The size of str1 string is: "<<Size2Str1<<endl;
   cout<<"The reduced capacity of str1 string is: "<<Capa2Str1<<endl;
   return 0;
}

----------------------------------------------------------------------------------------------------

//resize() and size()
#include <string>
#include <iostream>
using namespace std;

int main() 
{
   string  str1("Testing the resize()");
   cout<<"str1 string is: "<<str1<<endl;

   basic_string <char>::size_type SizeStr1;
   SizeStr1 = str1.size();
   basic_string <char>::size_type CapaStr1;
   CapaStr1 = str1.capacity();

   //Compare size & capacity of the original string
   cout<<"The size of str1 string is: "<<SizeStr1<<endl;
   cout<<"The capacity of str1 string is: "<<CapaStr1<<endl;

   //Use resize() to increase size by 3 elements 
   //of the question mark
   cout<<"\nOperation: str1.resize(str1.size() + 3, '?')"<<endl;
   str1.resize(str1.size() + 3, '?');
   cout<<"The resized str1 string is: "<<str1<<endl;

   SizeStr1 = str1.size();
   CapaStr1 = str1.capacity();

   //Compare size & capacity of a string after resizing
   cout<<"The size of resized str1 string is: "<<SizeStr1<<endl;
   cout<<"The capacity of resized str1 string is: "<<CapaStr1<<endl;

   //Use resize() to increase size by 10 elements:
   cout<<"\nOperation: str1.resize(str1.size() + 10)"<<endl;
   str1.resize(str1.size() + 10);
   cout<<"The resized str1 string is: "<<str1<<endl;

   SizeStr1 = str1.size();
   CapaStr1 = str1.capacity();

   //Compare size & capacity of a string after resizing
   //note capacity increases automatically as required
   cout<<"The increased size of str1 string is: "<<SizeStr1<<endl;
   cout<<"The increased capacity of str1 string is: "<<CapaStr1<<endl;

   //Use resize() to downsize by 20 elements:
   cout<<"\nOperation: str1.resize(str1.size() - 20)"<<endl;
   str1.resize(str1.size() - 20);
   cout<<"The downsized str1 string is: "<<str1<<endl;

   SizeStr1 = str1.size();
   CapaStr1 = str1.capacity();

   //Compare size & capacity of a string after downsizing
   cout<<"The size of downsized str1 string is: "<<SizeStr1<<endl;
   cout<<"The capacity of downsized str1 string is: "<<CapaStr1<<endl;
   return 0;
}

----------------------------------------------------------------------------------------------------

//reversed find, rfind() part I
#include <string>
#include <iostream>
using namespace std;

int main()
{
   //searching for a single character in a string
   string str1("Testing the rfind() 1..2..3");
   cout<<"str1 string is: "<<str1<<endl;
   basic_string <char>::size_type index1, index2;
   static const basic_string <char>::size_type npos = -1;

   cout<<"Operation: str1.rfind('i', 18)"<<endl;
   index1 = str1.rfind('i', 18);
   if(index1 != npos)
      cout<<"The index of the 1st 'i' found before\nthe 18th"
          <<" position in str1 is: "<<index1<<endl;
   else
      cout<<"The character 'i' was not found in str1."<<endl;

   cout<<"\nOperation: str1.rfind('z')"<<endl;
   index2 = str1.rfind('z');
   if(index2 != npos)
      cout<<"The index of the 'z' found in str1 is: "<<index2<<endl;
   else
      cout<<"The character 'z' was not found in str1."<<endl;
   cout<<endl;
   
   //----------------------------------------------------------------
   //searching a string for a substring as specified by a C-string
   string str2("Testing the rfind() 123");
   cout<<"The str2 string is: "<<str2<<endl;
   basic_string <char>::size_type index3, index4;

   const char *cstr1 = "find";
   cout<<"Operation: str2.rfind(cstr1, 25)"<<endl;
   index3 = str2.rfind(cstr1, 25);
   if(index3 != npos)
      cout<<"The index of the 1st element of 'find' "
          <<"before\nthe 25th position in str2 is: "<<index3<<endl;
   else
      cout<<"The substring 'find' was not found in str2."<<endl;

   const char *cstr2 = "nofind()";
   cout<<"\nOperation: str2.rfind(cstr2, 25)"<<endl;
   index4 = str2.rfind(cstr2, 25);
   if(index4 != npos)
      cout<<"The index of the 1st element of 'nofind()' "
		  <<"before\n the 25th position in str3 is: "<<index4<<endl;
   else
      cout<<"The substring 'nofind()' was not found in str2."<<endl;
   return 0;
}

----------------------------------------------------------------------------------------------------

//reversed find, rfind() part II
#include <string>
#include <iostream>
using namespace std;

int main()
{
   //searching a string for a substring as specified by a C-string
   string str3("Another test. Testing the rfind() the 123");
   cout<<"The str3 string is: "<<str3<<endl;
   static const basic_string <char>::size_type npos = -1;
   basic_string <char>::size_type index5, index6;

   const char *cstr3 = "test";
   cout<<"Operation: str3.rfind(cstr3)"<<endl;
   index5 = str3.rfind(cstr3);
   if(index5 != npos)
      cout<<"The index of the 1st element of 'test' "
          <<"in str3 is: "<<index5<<endl;
   else
      cout<<"The substring 'test' was not found in str3."<<endl;

   const char *cstr4 = "the";
   cout<<"\nOperation: str3.rfind(cstr4, index5 + 20, 2)"<<endl;
   index6 = str3.rfind(cstr4, index5 + 20, 2);
   if(index6 != npos)
      cout<<"The index of the next occurrence of 'the' in str3 begins at: " 											<<index6<<endl;
   else
      cout<<"There is no next occurrence of 'the' in str3"<<endl;
   cout<<endl;
   
   //----------------------------------------------------------
   //searching string for a substring as specified by a string
   string str4("Final rfind() testing 1...2...3");
   cout<<"The str4 string is: "<<str4<<endl;
   basic_string <char>::size_type index7, index8;

   string str5("2...3");
   cout<<"Operation: str4.rfind(str5, 30)"<<endl;
   index7 = str4.rfind(str5, 30);
   if(index7 != npos)
      cout<<"The index of the 1st element of '1...2' "
          <<"before\nthe 30th position in str4 is: "<<index7<<endl;
   else
      cout<<"The substring '1...2' was not found in str4\n"
          <<"before the 30th position."<<endl;

   string str6("...3");
   cout<<"\nOperation: str4.rfind(str6)"<<endl;
   index8 = str4.rfind(str6);
   if(index8 != npos)
      cout<<"The index of the 1st element of '...3' in str4 is: "<<index8<<endl;
   else
      cout<<"The substring '...3' was not found in str4."<<endl;
   return 0;
}

----------------------------------------------------------------------------------------------------

//substr()
#include <string>
#include <iostream>
using namespace std;

int main() 
{
   
   string  str1("Testing the substr()");
   cout<<"str1 string is: "<<str1<<endl;

   cout<<"\nOperation: str1.substr(4, 7)"<<endl;
   basic_string <char> str2 = str1.substr(4, 7);
   cout<<"The substring str1 copied is: "<<str2<<endl;
   
   cout<<"\nOperation: str1.substr()"<<endl;
   basic_string <char> str3 = str1.substr();
   cout<<"The default str3 substring is: "<<str3
        <<"\nwhich is the original string."<<endl;
   return 0;
}

----------------------------------------------------------------------------------------------------

//char_traits, assign()
#include <string>
#include <iostream>
using namespace std;

int main() 
{
   //assigning a character value to another character
   char chr1 = 'P';
   const char chr2 = 'Q';
   
   cout<<"The initial characters (chr1, chr2) are: ("<<chr1<<","<<chr2<<")"<<endl;
   cout<<"Operation: assign(chr1, chr2)"<<endl;
   char_traits<char>::assign(chr1, chr2);
   cout<<"The new characters (chr1, chr2) are: ("<<chr1<< ", "<<chr2<<")"<<endl;


   //assigning character values to initial part of a string
   char_traits<char>::char_type* str1 = "Testing assign()";
   char_traits<char>::char_type* result;
   
   cout<<"\nThe target string str1 is: "<<str1<<endl;
   cout<<"Operation: assign(str1, 5, \'#\')"<<endl;
   result = char_traits<char>::assign(str1, 5, '#');
   cout<<"The result = "<<result<<endl;
   return 0;
}

----------------------------------------------------------------------------------------------------

//char_traits, compare()
#include <string>
#include <iostream>
using namespace std;

int main() 
{
   char_traits<char>::char_type* str1 = "TEST";
   char_traits<char>::char_type* str2 = "RETEST";
   char_traits<char>::char_type* str3 = "RETEST";
   char_traits<char>::char_type* str4 = "TESTING";
   
   cout<<"str1 string is: "<<str1<<endl;
   cout<<"str2 string is: "<<str2<<endl;
   cout<<"str3 string is: "<<str3<<endl;
   cout<<"str4 string is: "<<str4<<endl;

   cout<<"\nOperation: Comparison..."<<endl;
   int comp1, comp2, comp3, comp4;
   comp1 = char_traits<char>::compare(str1, str2, 2);
   comp2 = char_traits<char>::compare(str2, str3, 3);
   comp3 = char_traits<char>::compare(str3, str4, 4);
   comp4 = char_traits<char>::compare(str4, str3, 4);
   cout<<"compare(str1, str2, 2) = "<<comp1<<endl;
   cout<<"compare(str2, str3, 3) = "<<comp2<<endl;
   cout<<"compare(str3, str4, 4) = "<<comp3<<endl;
   cout<<"compare(str4, str3, 4) = "<<comp4<<endl;
   return 0;
}

----------------------------------------------------------------------------------------------------

//char_traits, copy()
#include <string>
#include <iostream>
using namespace std;

int main() 
{
   char_traits<char>::char_type* str1 = "Testing the copy()";
   char_traits<char>::char_type* str2 = "Fucking";
   char_traits<char>::char_type* result;
   
   cout<<"The str1, source string is: "<<str1<<endl;
   cout<<"The str2, destination string is: "<<str2<<endl;
   cout<<"\nOperation: copy(str1, str2, 7)"<<endl;
   result = char_traits<char>::copy(str1, str2, 7);
   cout<<"The result is: "<<result<<endl;
   return 0;
}

----------------------------------------------------------------------------------------------------

//char_traits, eof()
#include <string>
#include <iostream>
using namespace std;

int main( ) 
{
   char_traits <char>::int_type int0 = char_traits<char>::eof();
   cout<<"The eof return is: "<<int0<<endl;

   char_traits<char>::char_type chs = 'R';
   char_traits<char>::int_type int1;
   int1 =char_traits<char>::to_int_type(chs);
   cout<<"char_type chs "<<chs<<" = to int_type "<<int1<<endl;

   char_traits <char>::int_type int2 = char_traits<char>::eof();
   cout<<"The eof return is: "<<int2<<endl;
   return 0;
}

----------------------------------------------------------------------------------------------------

//char_traits, eq()
#include <string>
#include <iostream>
using namespace std;

int main() 
{
   char_traits<char>::char_type chr1 = 'P';
   char_traits<char>::char_type chr2 = 'Q';
   char_traits<char>::char_type chr3 = 'P';

   //Testing for equality
   bool Var1 = char_traits<char>::eq(chr1, chr2);
   cout<<"Operation: eq(chr1, chr2)"<<endl;
   if(Var1)
      cout<<"The character chr1 and chr2 is equal."<<endl;
   else
      cout<<"The character chr1 and chr2 is not equal."<<endl;

   //alternatively...
   cout<<"\nOperation: using \'==\' operator, chr1==chr3"<<endl;
   if(chr1 == chr3)
      cout<<"The character chr1 and chr3 is equal."<<endl;
   else
      cout<<"The character chr1 and chr3 is not equal."<<endl;
   return 0;
}

----------------------------------------------------------------------------------------------------

//char_traits, eq_int_type()
//and to_int_type()
#include <string>
#include <iostream>
using namespace std;

int main()
{
   char_traits<char>::char_type chr1 = 'P';
   char_traits<char>::char_type chr2 = 'Q';
   char_traits<char>::char_type chr3 = 'P';
   char_traits<char>::char_type chr4 = 'r';

   //char_type to int_type conversion
   char_traits<char>::int_type int1, int2, int3, int4;
   int1 = char_traits<char>::to_int_type(chr1);
   int2 = char_traits<char>::to_int_type(chr2);
   int3 = char_traits<char>::to_int_type(chr3);
   int4 = char_traits<char>::to_int_type(chr4);

   cout<<"Operation:  to_int_type(character)"<<endl;
   cout<<"The char_types and corresponding int_types are:\n";
   cout<<chr1<<" = "<<int1<<endl;
   cout<<chr2<<" = "<<int2<<endl;
   cout<<chr4<<" = "<<int4<<endl;
  
   //equality of int_type representations test
   cout<<"\nOperation:  eq_int_type(int1, int2)"<<endl;
   bool var1 = char_traits<char>::eq_int_type(int1, int2);
   if(var1)
      cout<<"The int_type representation of characters chr1\n"
          <<"and chr2 is equal."<<endl;
   else
     cout<<"The int_type representation of characters chr1\n"
          <<"and chr2 is not equal."<<endl;

   //alternatively...
   cout<<"\nOperation:  int1 == int3"<<endl;
   if(int1 == int3)
      cout<<"The int_type representation of characters chr1\n"
          <<"and chr3 is equal."<<endl;
   else
      cout<<"The int_type representation of characters chr1\n"
          <<"and chr3 is not equal."<<endl;
   return 0;
}

----------------------------------------------------------------------------------------------------

//char_traits, find()
#include <string>
#include <iostream>
using namespace std;

int main( ) 
{
   const char* str = "Testing the char_traits, find()";
   const char* result1;
   cout<<"The string to be searched is:\n"<<str<<endl;

   //Searching for a 'a' in the first 20 positions of string str
   cout<<"\nOperation: find(str, 20, 'a')"<<endl;
   result1 = char_traits<char>::find(str, 20, 'a');
   cout<<"Searching character \'"<<*result1<<"\'."<<endl;
   cout<<"The string beginning with the first occurrence\n"
        <<"of the character 'a' is: "<<result1<<endl;

   //When no match is found the NULL value is returned
   const char* result2;
   result2 = char_traits<char>::find(str, 20, 'z');
   cout<<"\nOperation: find(str, 20, 'z')"<<endl;
   if(result2 == NULL)
      cout<<"The character 'z' was not found."<<endl;
   else
      cout<<"The result of the search is: "<<result2<<endl;
   return 0;
}

----------------------------------------------------------------------------------------------------

//char_traits, length()
#include <string>
#include <iostream>
using namespace std;

int main() 
{
   const char* str1= "Testing 1...2...3";
   cout<<"str1 C-string is: "<<str1<<endl;
 
   size_t LenStr1;
   cout<<"\nOperation: length(str1)"<<endl;
   LenStr1 = char_traits<char>::length(str1);
   cout<<"The length of str1 is: "<<unsigned int(LenStr1)<<endl;
   return 0;
}

----------------------------------------------------------------------------------------------------

//char_traits, lt()
#include <string>
#include <iostream>
using namespace std;

int main() 
{
   char_traits<char>::char_type chr1 = '1';
   char_traits<char>::char_type chr2 = 'q';
   char_traits<char>::char_type chr3 = 'R';
   
   char_traits<char>::int_type int1, int2, int3;
   int1 = char_traits<char>::to_int_type(chr1);
   int2 = char_traits<char>::to_int_type(chr2);
   int3 = char_traits<char>::to_int_type(chr3);
   
   //char_type to int_type conversion, for testing
   cout<<"chr1 = "<<chr1<<", chr2 = "<<chr2<<", chr3 = "<<chr3<<endl;
   cout<<"chr1 = "<<int1<<", chr2 = "<<int2<<", chr3 = "<<int3<<endl;
   
   //Testing for less than
   cout<<"\nOperation: lt(chr1, chr2)"<<endl;
   bool var1 = char_traits<char>::lt(chr1, chr2);
   if(var1)
      cout<<"The chr1 is less than "
          <<"the chr2."<<endl;
   else
      cout<<"The chr1 is not less "
          <<"than the chr2."<<endl;
   //alternatively...
   cout<<"\nOperation: chr2 < chr3"<<endl;
   if(chr2 < chr3)
      cout<<"The chr2 is less than "
          <<"the chr3."<<endl;
   else
      cout<<"The chr2 is not less "
          <<"than the chr3."<<endl;
   return 0;
}

----------------------------------------------------------------------------------------------------

//char_traits, move(), find()
#include <string>
#include <iostream>
using namespace std;

int main() 
{
   char_traits<char>::char_type str1[25] = "The Hell Boy";
   char_traits<char>::char_type str2[25] = "Something To ponder";
   char_traits<char>::char_type *result1;
   
   cout<<"The source str1 string is: "<<str1<<endl;
   cout<<"The destination str2 string is: "<<str2<<endl;
   result1 = char_traits<char>::move(str2, str1, 10);
   cout<<"\nOperation: move(str2, str1, 10)"<<endl;
   cout<<"The result1 = "<<result1<<endl;

   //When source and destination overlap
   char_traits<char>::char_type str3[30] = "Testing the move()";
   char_traits<char>::char_type *result2;
   cout << "The source/destination str3 string is: "<<str3<<endl;
   
   cout<<"\nOperation: str4 = find(str3, 12, 'h')"<<endl;
   const char *str4 = char_traits<char>::find(str3, 12, 'h');
   cout<<"Operation: move(str3, str4, 9)"<<endl;
   result2 = char_traits<char>::move(str3, str4, 9);
   cout<<"The result2 = "<<result2<<endl;
   return 0;
}

----------------------------------------------------------------------------------------------------

//char_traits, not_eof()
#include <string>
#include <iostream>
using namespace std;

int main() 
{
   char_traits<char>::char_type chr1 = 'w';
   char_traits<char>::int_type int1;
   int1 = char_traits<char>::to_int_type(chr1);
   cout<<"Operation: to_int_type(chr1)"<<endl;
   cout<<"The char_type "<<chr1<<" = int_type "<<int1<<endl;
   
   //EOF
   char_traits <char>::int_type int2 = char_traits<char>::eof();
   cout<<"\nOperation: char_traits<char>::eof()"<<endl;
   cout<<"The eof return is: "<<int2<<endl;

   //Testing for EOF
   char_traits <char>::int_type eofTest1, eofTest2;
   eofTest1 = char_traits<char>::not_eof(int1);
   cout<<"\nOperation: not_eof(int1)"<<endl;
   if(!eofTest1)
      cout<<"The eofTest1 indicates "<<chr1<<" is an EOF character."<<endl;
   else
      cout<<"The eofTest1 returns: "<<eofTest1
		  <<", which is the character: " 
          <<char_traits<char>::to_char_type(eofTest1)<<endl;

   
   eofTest2 = char_traits<char>::not_eof(int2);
   cout<<"\nOperation: not_eof(int2)"<<endl;
   if(!eofTest2)
      cout<<"The eofTest2 indicates "<<chr1<<" is an EOF character."<<endl;
   else
      cout<<"The eofTest1 returns: "<<eofTest2 
           <<", which is the character " 
           <<char_traits<char>::to_char_type(eofTest2)<<endl;
   return 0;
}

----------------------------------------------------------------------------------------------------

//char_traits, to_char_type(),
//to_int_type and eq()
#include <string>
#include <iostream>
using namespace std;

int main() 
{
   char_traits<char>::char_type chr1 = '3';
   char_traits<char>::char_type chr2 = 'C';
   char_traits<char>::char_type chr3 = '#';
 
   cout<<"chr1 = "<<chr1<<", chr2 = "<<chr2<<", chr3 = "<<chr3<<endl;
   //Converting from char_type to int_type
   char_traits<char>::int_type int1, int2, int3;
   int1 =char_traits<char>::to_int_type(chr1);
   int2 =char_traits<char>::to_int_type(chr2);
   int3 =char_traits<char>::to_int_type(chr3);
   
   cout<<"Operation: to_int_type(character)"<<endl;
   cout<<"The char_types and corresponding int_types are:\n";
   cout<<chr1<<" ==> "<<int1<<endl;
   cout<<chr2<<" ==> "<<int2<<endl;
   cout<<chr3<<" ==> "<<int3<<endl;
     
   //int_type to char_type re conversion
   char_traits<char>::char_type rev_chr1;
   rev_chr1 = char_traits<char>::to_char_type(int1);
   char_traits<char>::char_type rev_chr2;
   rev_chr2 = char_traits<char>::to_char_type(int2);

   cout<<"\nOperation: to_char_type(integer)"<<endl;
   cout<<"The inverse conversion are:\n";  
   cout<<int1<<" ==> "<<rev_chr1<<endl;
   cout<<int2<<" ==> "<<rev_chr2<<endl;

   //test for conversions, they are just inverse operations
   cout<<"\nOperation: eq(rev_chr1, chr1)"<<endl;
   bool var1 = char_traits<char>::eq(rev_chr1, chr1);
   if(var1)
      cout<<"The rev_chr1 is equal to the original chr1."<<endl;
   else
     cout<<"The rev_chr1 is not equal to the original chr1."<<endl;

   //alternatively...
   if(rev_chr2 == chr2)
     cout<<"The rev_chr2 is equal to the original chr2."<<endl; 
   else
     cout<<"The rev_chr2 is not equal to the original chr2."<<endl; 
   return 0;
}

----------------------------------------------------------------------------------------------------

//strtok()
//using the C++ wrappers
#include <cstdio>
#include <string>
using namespace std;

int main()
{
	char string[] = "Is this sentence has 6 tokens?";
	char *tokenPtr;

	printf("	Using strtok()\n");
	printf("	--------------\n");

	printf("The string to be tokenized is:\n%s\n", string);
	printf("\nThe tokens are: \n\n");
	
	tokenPtr = strtok(string, " ");
	while (tokenPtr != NULL)
		{
			printf("%s\n", tokenPtr);
			tokenPtr  =  strtok(NULL, " ");
		}
	return   0;
}

----------------------------------------------------------------------------------------------------

//Using strspn()
#include <cstdio>
#include <string>
using namespace std;

int main()
{
	char *string1 = "The initial value is 3.14159";
	char *string2 = "aehilsTuv";


	printf("	Using strspn()\n");
	printf("	---------------\n");

	printf("string1 = %s\n", string1);
   	printf("string2 = %s\n", string2);
	printf("\nThe length of the initial segment of string1\n");
	printf("containing only characters from string2 is = %u\n", strspn(string1, string2));
	return 0;
}

------------------------------------------G++----------------------------------------------------------

//**********string2.cpp************
//insert() part I
#include <string>
#include <iostream>
using namespace std;

int main()
{
//inserting a C-string at a given position
basic_string <char> str1("e insert() testing");
const char *cstr1 = "Th";

cout<<"str1 = "<<str1<<endl;
cout<<"cstr1 = "<<cstr1<<endl;
str1.insert(0, cstr1);
cout<<"Operation: str1.insert(0, cstr1)"<<endl;
cout<<"Inserting a C-string at position 0 is:\n"<<str1<<endl;
cout<<endl;

//inserting a C-string at a given position for a specified number of elements
basic_string <char> str2("Test");
const char *cstr2 = "ing an insert()";

cout<<"str2 = "<<str2<<endl;
cout<<"cstr2 = "<<cstr2<<endl;
str2.insert(4, cstr2, 15);
cout<<"Operation: str2.insert(4, cstr2, 15)"<<endl;
cout<<"Inserting a C-string at the end is:\n"<<str2<<endl;
cout<<endl;

//inserting a string at a given position
basic_string <char> str3(" the insert()");
string str4("Testing");

cout<<"str3 = "<<str3<<endl;
cout<<"str4 = "<<str4<<endl;
str3.insert(0, str4);
cout<<"Operation: str3.insert(0, str4)"<<endl;
cout<<"Inserting string at position 0 is:\n"<<str3<<endl;
cout<<endl;

//inserting part of a string at a given position
basic_string <char> str5("Testing ");
string str6(" the insert()");

cout<<"str5 = "<<str5<<endl;
cout<<"str6 = "<<str6<<endl;
str5.insert(7, str6, 4, 9);
cout<<"Operation: str5.insert(7, str6, 4, 9)"<<endl;
cout<<"Inserting part of a string at position 9 is:\n"<<str5<<endl;
return 0;
}

====================================================================================================