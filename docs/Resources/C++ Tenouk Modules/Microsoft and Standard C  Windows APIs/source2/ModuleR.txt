============================MODULER========================================
|                                                                         |
|  The program examples' source codes have been arranged in the same      |
|  order that appeared in the Tutorial. This is unedited and unverified   |
|  compilation. Published as is basis for educational, reacretional and   |
|  brain teaser purposes. All trademarks, copyrights and IPs, wherever    |
|  exist, are the sole property of their respective owner and/or          |
|  holder. Any damage or loss by using the materials presented in this    |
|  tutorial is USER responsibility. Part or full distribution,            |
|  reproduction and modification is granted to any body.                  |
|     Copyright 2003-2005 © Tenouk, Inc. All rights reserved.		  |
|          Distributed through http://www.tenouk.com			        |
|        		                                                        |
|									                    |
===========================================================================
If you want to compile C++ codes using VC++/VC++ .Net, change
the header file accordingly.  Just need some modification for the header
files...:

-------------------------------------------------
#include <iostream.h>
//for system()
#include <stdlib.h>

...
{
C++ codes...
}
-------------------------------------------------
should be changed to:
-------------------------------------------------
#include <iostream>
//use C++ wrapper to call C functions from C++ programs...
#include <cstdlib>
using namespace std;

...
{
C++ codes...
}
-------------------------------------------------
In VC++/VC++ .Net the iostream.h (It is C++ header with .h) is not valid anymore.
It should be C++ header, <iostream> so that it comply to the standard.
In older Borland C++ compiler this still works, but not proper any more...
and for standard C/C++ the portability should be no problem or better
you read Module 23 at http://www.tenouk.com/Module23.html to get
the big picture...For C codes, they still C codes, let the compiler
decide... :o)
==================================================================================
=======================Just Microsoft & Standard C Codes HERE=================================

// File name: crtprocesssrc.cpp Project name: crtprocess, generating crtprocess.exe
/* Illustrates the following variables used for accessing
 * command-line arguments and environment variables:
 * argc  argv  envp
 * This program will be executed by crtexecprog.exe which follows. */

#include <stdio.h>

int main(int argc, /* Number of strings in array argv */
 char *argv[],     /* Array of command-line argument strings */
 char **envp)      /* Array of environment variable strings */
{
    int count;

    /* Display each command-line argument. */
    printf("\nCommand-line arguments:\n");
    for (count = 0; count < argc; count++)
        printf("  argv[%d]   %s.\n", count, argv[count]);

    /* Display each environment variable. */
    printf("\nEnvironment variables:\n");
    while (*envp != NULL)
        printf("  %s.\n", *(envp++));

       return 0;
}

-------------------------------------------------------------------------------------------------

// Project name: crtexecprog, file name: crtexecsrc.cpp generating crtexecprog.exe
// Run the following program at command prompt to exec crtprocess.exe.
/* Illustrates the different versions of exec, including
 *      _execl          _execle          _execlp          _execlpe
 *      _execv          _execve          _execvp          _execvpe
 *
 * Although crtexecsrc.cpp can exec any program, you can verify how 
 * the different versions handle arguments and environment by 
 * compiling and specifying the sample program crtprocess.cpp. See 
 * "_spawn, _wspawn Functions" for examples of the similar spawn 
 * functions. */

#include <windows.h>
#include <stdio.h>
#include <stdlib.h>
#include <process.h>

/* Environment for exec?e */
char *my_env[] =
{
   // NAME=value
   "THIS=environment will be",
   "PASSED=to new process by",
   "the EXEC=functions",
   NULL
};

int main(int ac, char* av[])
{
   // An array pointers to strings...
   char *args[4];
   // If command line arguments not properly supplied...
   if (ac != 3)
   {
      fprintf(stderr, "Usage: %s <program_name> <number (1-8)>\n", av[0]);
      return 0;
   }
   // otherwise...
   /* Arguments for _execv? */
   args[0] = av[1];
   args[1] = "exec??";
   args[2] = "two";
   args[3] = NULL;

   switch(atoi(av[2]))
   {
   case 1:
      _execl(av[1], av[1], "_execl", "two", NULL);
      break;
   case 2:
      _execle(av[1], av[1], "_execle", "two", NULL, my_env);
      break;
   case 3:
      _execlp(av[1], av[1], "_execlp", "two", NULL);
      break;
   case 4:
      _execlpe(av[1], av[1], "_execlpe", "two", NULL, my_env);
      break;
   // ==========================================================
   case 5:
      _execv(av[1], args);
      break;
   case 6:
      _execve(av[1], args, my_env);
      break;
   case 7:
      _execvp(av[1], args);
      break;
   case 8:
      _execvpe(av[1], args, my_env);
      break;
   default:
      break;
   }

   /* This point is reached only if exec fails. */
   printf("\nProcess was not execed, error if any: %d.", GetLastError());
   // exit peacefully...
   exit(0);
}

---------------------------------------------------------------------------------------------

#include <windows.h>
#include <stdio.h>
#include <process.h>

/* Environment for exec?e */
char *my_env[] =
{
       // Just as an example here: NAME=value
       "ComSpec=C:\\WINDOWS\\system32\\cmd.exe",
       "Path=C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS",
       NULL
};

int main(int ac, char* av[])
{
   int ret;

   // If command line arguments not properly supplied...
   if (ac != 2)
   {
      fprintf(stderr, "Usage: %s <program_name>.\n", av[0]);
      return 0;
   }

   // We are going to run "ping 127.0.0.1 -t" command....
  if ((ret = _execl(av[1], av[1], "127.0.0.1", "-t", NULL, my_env)) == -1)
       perror("perror says _execl() failed");
}

---------------------------------------------------------------------------------------------

#include <windows.h>
#include <stdio.h>
#include <process.h>

/* Environment for exec?e */
char *my_env[] =
{
       // Just as an example here: NAME=value
       "ComSpec=C:\\WINDOWS\\system32\\cmd.exe",
       "Path=C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS",
       NULL
};

int main(int ac, char* av[])
{
   int ret;
   // An array pointers...
   char *args[3];

   /* Arguments for _execv? */
   args[0] = av[1];
   args[1] = "/D";
   args[2] = NULL;

   // If command line arguments not properly supplied...
   if (ac != 2)
   {
      fprintf(stderr, "Usage: %s <program_name>.\n", av[0]);
      return 0;
   }

   // We are going to run "mem /D" command....
  if ((ret =  _execve(av[1], args, my_env)) == -1)
       perror("perror says _execve() failed");
  return 0;
}

-----------------------------------------------------------------------------------------

// Project name: myspawnpro, File name: myspawnsrc.cpp
/* This program accepts a number in the range
 * 1-8 from the command line. Based on the number it receives,
 * it executes one of the eight different procedures that
 * spawn the process named child. For some of these procedures,
 * the child.exe file must be in the same directory; for
 * others, it only has to be in the same path. */

#include <stdio.h>
#include <process.h>

char *my_env[] =
{
   "This=environment will be",
   "passed=to child.exe by the",
   "_spawnle()=and",
   "_spawnlpe()=and",
   "_spawnve()=and",
   "_spawnvpe()=functions",
   NULL
};

int main(int argc, char *argv[])
{
   /* Array storage for argument strings... */
   char *args[4];

   /* Set up parameters to be sent: */
   args[0] = "child";
   args[1] = "spawn??";
   args[2] = "two";
   args[3] = NULL;

   if (argc <= 2)
   {
      /*             argv[0] argv[1]           argv[2] */
      printf("Usage: %s  <child_program_name> <1-8>.\n", argv[0]);
      exit(1);
   }
   /* Based on first letter of argument */
   switch (argv[2][0])
   {
   case '1':
       _spawnl(_P_WAIT, argv[1], argv[1], "_spawnl", "two", NULL);
      break;
   case '2':
      _spawnle(_P_WAIT, argv[1], argv[1], "_spawnle", "two", NULL, my_env);
      break;
   case '3':
      _spawnlp(_P_NOWAIT, argv[1], argv[1], "_spawnlp", "two", NULL);
      break;
   case '4':
      _spawnlpe(_P_NOWAIT, argv[1], argv[1], "_spawnlpe", "two", NULL, my_env);
      break;
   case '5':
      _spawnv(_P_OVERLAY, argv[1], args);
      break;
   case '6':
      _spawnve(_P_OVERLAY, argv[1], args, my_env);
      break;
   case '7':
      _spawnvp(_P_OVERLAY, argv[1], args);
      break;
   case '8':
      _spawnvpe(_P_OVERLAY, argv[1], args, my_env);
      break;
   default:
          printf("");
          printf("Usage: %s <child_program_name> <number [1-8]>.\n", argv[0]);
      exit (1);
   }
   return 0;
}

==========================================================================================