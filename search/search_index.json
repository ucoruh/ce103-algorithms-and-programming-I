{"config":{"indexing":"full","lang":["en","tr"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"license/","text":"License \u00b6 MIT License Copyright \u00a9 2019-2021 U\u011fur CORUH Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"license/#license","text":"MIT License Copyright \u00a9 2019-2021 U\u011fur CORUH Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"changelog/","text":"Changelog \u00b6 Material for Software Developers \u00b6 1.0.0 _ October 20, 2020 \u00b6 Initial release","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#material-for-software-developers","text":"","title":"Material for Software Developers"},{"location":"changelog/#1.0.0","text":"Initial release","title":"1.0.0 _ October 20, 2020"},{"location":"resume/","text":"Resume \u00b6 Download Resume-English Resume-Turkish English Turkish","title":"Resume"},{"location":"resume/#resume","text":"Download Resume-English Resume-Turkish English Turkish","title":"Resume"},{"location":"syllabus/syllabus/","text":"Recep Tayyip Erdogan University \u00b6 Faculty of Engineering and Architecture \u00b6 Computer Engineering \u00b6 CE103 Algorithms and Programming-I \u00b6 Syllabus \u00b6 Fall Semester, 2021-2022 \u00b6 Download DOC , SLIDE , PPTX Download WORD , PDF Instructor Asst. Prof. Dr. U\u011fur CORUH Contact Information ugur.coruh@erdogan.edu.tr Office No F-301 Google Classroom Code 3ipdtws Lecture Hours and Days Monday 13:00 - 15:30 (Theory) / Wednesday 13:00 - 14:30 (Lab) Lecture Classroom \u0130BBF 402 Level-4 Office Hours Meetings will be scheduled over Google Meet with your university account and email and performed via demand emails. Please send emails with the subject starting with [CE103] tag for the fast response and write formal, clear, and short emails Lecture and Communication Language English Theory/Laboratory Course Hour Per Week 3/2 Hours Credit 4 Prerequisite TBD Corequisite TBD Requirement TBD *TBD: To Be Defined. A. Course Description \u00b6 This course goal is to develop algorithm and programming expertise from scratch in a powerful way to provide a high-quality career path for students. The lecture will be based on expertise sharing and guiding students to find learning methods and practice for algorithm and programming topics. By making programming applications and projects in the courses, the learning process will be strengthened by practicing rather than theory. This course provides functional programming for C, C++, C#, and Java with up-to-date development environments. B. Course Learning Outcomes \u00b6 After completing this course satisfactorily, a student will be able to: Understand a software developer's road map and qualifications. Use different types of development environments to build applications. Understand the relation between real-life problems and their programming practices. Use language features in C, C++, C#, and Java for functional programming and evaluate their relative benefits. Understand application generation flows and outputs in detail, such as binaries and executables. Use the source code, version management systems, and portals based on GIT Work on the remote systems with remote connection tools. Use common developer tools that help application developers Create application libraries such as static, shared libraries for code reusability and functional packaging. Create unit tests for their applications to automate tests for their algorithms. Create console and GUI-based applications for their solutions. Create documentation for their applications. C. Course Topics \u00b6 Developer Road Map Algorithm Design and Basics Basic Operating System Information for Development Requirement Basic Remote Connection and Working Know-How Source Code Version Management Systems (GIT) Integrated Development Environments Application Test Automation Application Debugging and Bugfixing Functional Programming (C,C++, C#, Java) Continues Integration and Continues Development Processes Software Development Principles Application Documentation Automation Shared and Static Library Development and Test in Cross-Environment D. Textbooks and Required Hardware or Equipment \u00b6 This course does not require a coursebook. If necessary, you can use the following books and open-source online resources. Paul Deitel and Harvey Deitel. 2012. C How to Program (7 th . ed.). Prentice Hall Press, USA. Intro to Java Programming, Comprehensive Version (10 th Edition) 10 th Edition by Y. Daniel Liang Introduction to Algorithms, Third Edition By Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, and Clifford Stein Problem Solving and Program Design in C, J.R. Hanly, and E.B. Koffman, 6 th Edition. Robert Sedgewick and Kevin Wayne. 2011. Algorithms (4 th . ed.). Addison-Wesley Professional. Harvey M. Deitel and Paul J. Deitel. 2001. Java How to Program (4 th . ed.). Prentice Hall PTR, USA. Paul Deitel and Harvey Deitel. 2016. Visual C# How to Program (6 th . ed.). Pearson. Additional Books TBD During this course, you should have a laptop for programming practices. You will have your development environment, and you will use this for examination and assignments also classroom practices. E. Grading System \u00b6 Midterm and Final grades will be calculated with the weighted average of the project or homework-based examinations. Midterm grades will be calculated between term beginning to the midterm week, and Final grades will be calculated between Midterm and Final week homeworks or projects as follow \\[ a_n=\\text{Homework or Project Weight} \\] \\[ HW_n=\\text{Homework or Project Points} \\] \\[ n=\\text{Number of Homework or Project} \\] \\[ Grade=(a_1HW_1+a_2HW_2+...+a_nHW_n)/n \\] Homework Weight Midterm %40 Final %60 \\[ \\text{Passing Grade}=(40*Midterm_{Grade}+60*Final_{Grade})/100 \\] F. Instructional Strategies and Methods \u00b6 The basic teaching method of this course will be planned to be face-to-face in the classroom, and support resources, homeworks, and announcements will be shared over google classroom. Students are expected to be in the university. This responsibility is very important to complete this course with success. If pandemic situation changes and distance education is required during this course, this course will be done using synchronous and asynchronous distance education methods. In this scenario, students are expected to be in the online platform, zoom, or meet at the time specified in the course schedule. Attendance will be taken. G. Late Homework \u00b6 Throughout the semester, assignments must be submitted as specified by the announced deadline. Your grade will be reduced by 10% of the full points for each calendar day for overdue assignments. Overdue assignments will not be accepted after three (3) days. Unexpected situations must be reported to the instructor for late homeworks by students. H. Course Platform and Communication \u00b6 Google Classroom will be used as a course learning management system. All electronic resources and announcements about the course will be shared on this platform. It is very important to check the course page daily, access the necessary resources and announcements, and communicate with the instructor as you needed to complete the course with success I. Academic Integrity, Plagiarism & Cheating \u00b6 Academic Integrity is one of the most important principles of RTE\u00dc University. Anyone who breaches the principles of academic honesty is severely punished. It is natural to interact with classmates and others to \"study together\". It may also be the case where a student asks to help from someone else, paid or unpaid, better understand a difficult topic or a whole course. However, what is the borderline between \"studying together\" or \"taking private lessons\" and \"academic dishonesty\"? When is it plagiarism, when is it cheating? It is obvious that looking at another student's paper or any source other than what is allowed during the exam is cheating and will be punished. However, it is known that many students come to university with very little experience concerning what is acceptable and what counts as \"copying\", especially for assignments. The following are attempted as guidelines for the Faculty of Engineering and Architecture students to highlight the philosophy of academic honesty for assignments for which the student will be graded. Should a situation arise which is not described below, the student is advised to ask the instructor or assistant of the course whether what they intend to do would remain within the framework of academic honesty or not. a. What is acceptable when preparing an assignment? \u00b6 Communicating with classmates about the assignment to understand it better Putting ideas, quotes, paragraphs, small pieces of code (snippets) that you find online or elsewhere into your assignment, provided that these are not themselves the whole solution to the assignment, you cite the origins of these Asking sources for help in guiding you for the English language content of your assignment. Sharing small pieces of your assignment in the classroom to create a class discussion on some controversial topics. Turning to the web or elsewhere for instructions, references, and solutions to technical difficulties, but not for direct answers to the assignment Discuss solutions to assignments with others using diagrams or summarized statements but not actual text or code. Working with (and even paying) a tutor to help you with the course, provided the tutor does not do your assignment for you. b. What is not acceptable? \u00b6 Ask a classmate to see their solution to a problem before submitting your own. Failing to cite the origins of any text (or code for programming courses) that you discover outside of the course's lessons and integrate into your work Giving or showing a classmate your solution to a problem when the classmate is struggling to solve it. J. Expectations \u00b6 You are expected to attend classes on time by completing weekly course requirements (readings and assignments) during the semester. The main communication channel between the instructor and the students will be emailed. Please send your questions to the instructor's email address about the course via the email address provided to you by the university. Ensure that you include the course name in the subject field of your message and your name in the text field . In addition, the instructor will contact you via email if necessary. For this reason, it is very important to check your email address every day for healthy communication. K. Lecture Content and Syllabus Updates \u00b6 If deemed necessary, changes in the lecture content or course schedule can be made. If any changes are made in the scope of this document, the instructor will inform you about this. Course Schedule Overview \u00b6 Weeks Dates Subjects Other Tasks Week 1 04.10.2021 06.10.2021 Course Plan and Communication,Grading System, Assignments, and Exams,Computer Engineering Job Qualifications and Road Map,Google Search Basics,Programming Introduction (Operating System Basics, Computer Network Basics, Numerical System Basics, Character Sets) TBD Week 2 11.10.2021 13.10.2021 Algorithm Basics, Flowgorithm, Pseudocode, Programming Environment Setup and Configuration for C, C++, Java, and C#, Common Developer Tools, Online Programming Envoriments TBD Week 3 18.10.2021 20.10.2021 Source Code Sharing and Version Management. TBD Week 4 25.10.2021 27.10.2021 Shared Library Development and Application Test Automation for C, C++, C# and Java, TDD (Test Driven Development) TBD Week 5 01.11.2021 03.11.2021 C Functional Console Programming Week-6 08.11.2021 10.11.2021 C++ Functional Console Programming TBD Week-7 15.11.2021 17.11.2021 C# Functional Console Programming TBD Week-8 20.11.2021 28.11.2021 Midterm TBD Week-9 29.11.2021 01.12.2021 Java Functional Console Programming-I TBD Week-10 06.12.2021 08.12.2021 Java Functional Console Programming-II TBD Week-11 13.12.2021 16.12.2021 Java Functional Console Programming-III TBD Week-12 20.12.2021 22.12.2021 C / C++ Graphical User Interface (GUI) Programming TBD Week-13 27.12.2021 29.12.2021 C# Graphical User Interface (GUI) Programming-I TBD Week-14 03.01.2022 05.01.2022 C# Graphical User Interface (GUI) Programming-II TBD Week-15 10.01.2022 12.01.2022 Java Graphical User Interface Programming TBD Week-16 17.01.2022 30.01.2022 Final . TBD Bologna Information \u00b6 \\(End-Of-CE103-Syllabus\\)","title":"Syllabus"},{"location":"syllabus/syllabus/#recep-tayyip-erdogan-university","text":"","title":"Recep Tayyip Erdogan University"},{"location":"syllabus/syllabus/#faculty-of-engineering-and-architecture","text":"","title":"Faculty of Engineering and Architecture"},{"location":"syllabus/syllabus/#computer-engineering","text":"","title":"Computer Engineering"},{"location":"syllabus/syllabus/#ce103-algorithms-and-programming-i","text":"","title":"CE103 Algorithms and Programming-I"},{"location":"syllabus/syllabus/#syllabus","text":"","title":"Syllabus"},{"location":"syllabus/syllabus/#fall-semester-2021-2022","text":"Download DOC , SLIDE , PPTX Download WORD , PDF Instructor Asst. Prof. Dr. U\u011fur CORUH Contact Information ugur.coruh@erdogan.edu.tr Office No F-301 Google Classroom Code 3ipdtws Lecture Hours and Days Monday 13:00 - 15:30 (Theory) / Wednesday 13:00 - 14:30 (Lab) Lecture Classroom \u0130BBF 402 Level-4 Office Hours Meetings will be scheduled over Google Meet with your university account and email and performed via demand emails. Please send emails with the subject starting with [CE103] tag for the fast response and write formal, clear, and short emails Lecture and Communication Language English Theory/Laboratory Course Hour Per Week 3/2 Hours Credit 4 Prerequisite TBD Corequisite TBD Requirement TBD *TBD: To Be Defined.","title":"Fall Semester, 2021-2022"},{"location":"syllabus/syllabus/#a-course-description","text":"This course goal is to develop algorithm and programming expertise from scratch in a powerful way to provide a high-quality career path for students. The lecture will be based on expertise sharing and guiding students to find learning methods and practice for algorithm and programming topics. By making programming applications and projects in the courses, the learning process will be strengthened by practicing rather than theory. This course provides functional programming for C, C++, C#, and Java with up-to-date development environments.","title":"A.    Course Description"},{"location":"syllabus/syllabus/#b-course-learning-outcomes","text":"After completing this course satisfactorily, a student will be able to: Understand a software developer's road map and qualifications. Use different types of development environments to build applications. Understand the relation between real-life problems and their programming practices. Use language features in C, C++, C#, and Java for functional programming and evaluate their relative benefits. Understand application generation flows and outputs in detail, such as binaries and executables. Use the source code, version management systems, and portals based on GIT Work on the remote systems with remote connection tools. Use common developer tools that help application developers Create application libraries such as static, shared libraries for code reusability and functional packaging. Create unit tests for their applications to automate tests for their algorithms. Create console and GUI-based applications for their solutions. Create documentation for their applications.","title":"B.    Course Learning Outcomes"},{"location":"syllabus/syllabus/#c-course-topics","text":"Developer Road Map Algorithm Design and Basics Basic Operating System Information for Development Requirement Basic Remote Connection and Working Know-How Source Code Version Management Systems (GIT) Integrated Development Environments Application Test Automation Application Debugging and Bugfixing Functional Programming (C,C++, C#, Java) Continues Integration and Continues Development Processes Software Development Principles Application Documentation Automation Shared and Static Library Development and Test in Cross-Environment","title":"C.    Course Topics"},{"location":"syllabus/syllabus/#d-textbooks-and-required-hardware-or-equipment","text":"This course does not require a coursebook. If necessary, you can use the following books and open-source online resources. Paul Deitel and Harvey Deitel. 2012. C How to Program (7 th . ed.). Prentice Hall Press, USA. Intro to Java Programming, Comprehensive Version (10 th Edition) 10 th Edition by Y. Daniel Liang Introduction to Algorithms, Third Edition By Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, and Clifford Stein Problem Solving and Program Design in C, J.R. Hanly, and E.B. Koffman, 6 th Edition. Robert Sedgewick and Kevin Wayne. 2011. Algorithms (4 th . ed.). Addison-Wesley Professional. Harvey M. Deitel and Paul J. Deitel. 2001. Java How to Program (4 th . ed.). Prentice Hall PTR, USA. Paul Deitel and Harvey Deitel. 2016. Visual C# How to Program (6 th . ed.). Pearson. Additional Books TBD During this course, you should have a laptop for programming practices. You will have your development environment, and you will use this for examination and assignments also classroom practices.","title":"D.    Textbooks and Required Hardware or Equipment"},{"location":"syllabus/syllabus/#e-grading-system","text":"Midterm and Final grades will be calculated with the weighted average of the project or homework-based examinations. Midterm grades will be calculated between term beginning to the midterm week, and Final grades will be calculated between Midterm and Final week homeworks or projects as follow \\[ a_n=\\text{Homework or Project Weight} \\] \\[ HW_n=\\text{Homework or Project Points} \\] \\[ n=\\text{Number of Homework or Project} \\] \\[ Grade=(a_1HW_1+a_2HW_2+...+a_nHW_n)/n \\] Homework Weight Midterm %40 Final %60 \\[ \\text{Passing Grade}=(40*Midterm_{Grade}+60*Final_{Grade})/100 \\]","title":"E.    Grading System"},{"location":"syllabus/syllabus/#f-instructional-strategies-and-methods","text":"The basic teaching method of this course will be planned to be face-to-face in the classroom, and support resources, homeworks, and announcements will be shared over google classroom. Students are expected to be in the university. This responsibility is very important to complete this course with success. If pandemic situation changes and distance education is required during this course, this course will be done using synchronous and asynchronous distance education methods. In this scenario, students are expected to be in the online platform, zoom, or meet at the time specified in the course schedule. Attendance will be taken.","title":"F. Instructional Strategies and Methods"},{"location":"syllabus/syllabus/#g-late-homework","text":"Throughout the semester, assignments must be submitted as specified by the announced deadline. Your grade will be reduced by 10% of the full points for each calendar day for overdue assignments. Overdue assignments will not be accepted after three (3) days. Unexpected situations must be reported to the instructor for late homeworks by students.","title":"G. Late Homework"},{"location":"syllabus/syllabus/#h-course-platform-and-communication","text":"Google Classroom will be used as a course learning management system. All electronic resources and announcements about the course will be shared on this platform. It is very important to check the course page daily, access the necessary resources and announcements, and communicate with the instructor as you needed to complete the course with success","title":"H. Course Platform and Communication"},{"location":"syllabus/syllabus/#i-academic-integrity-plagiarism-cheating","text":"Academic Integrity is one of the most important principles of RTE\u00dc University. Anyone who breaches the principles of academic honesty is severely punished. It is natural to interact with classmates and others to \"study together\". It may also be the case where a student asks to help from someone else, paid or unpaid, better understand a difficult topic or a whole course. However, what is the borderline between \"studying together\" or \"taking private lessons\" and \"academic dishonesty\"? When is it plagiarism, when is it cheating? It is obvious that looking at another student's paper or any source other than what is allowed during the exam is cheating and will be punished. However, it is known that many students come to university with very little experience concerning what is acceptable and what counts as \"copying\", especially for assignments. The following are attempted as guidelines for the Faculty of Engineering and Architecture students to highlight the philosophy of academic honesty for assignments for which the student will be graded. Should a situation arise which is not described below, the student is advised to ask the instructor or assistant of the course whether what they intend to do would remain within the framework of academic honesty or not.","title":"I. Academic Integrity, Plagiarism &amp; Cheating"},{"location":"syllabus/syllabus/#a-what-is-acceptable-when-preparing-an-assignment","text":"Communicating with classmates about the assignment to understand it better Putting ideas, quotes, paragraphs, small pieces of code (snippets) that you find online or elsewhere into your assignment, provided that these are not themselves the whole solution to the assignment, you cite the origins of these Asking sources for help in guiding you for the English language content of your assignment. Sharing small pieces of your assignment in the classroom to create a class discussion on some controversial topics. Turning to the web or elsewhere for instructions, references, and solutions to technical difficulties, but not for direct answers to the assignment Discuss solutions to assignments with others using diagrams or summarized statements but not actual text or code. Working with (and even paying) a tutor to help you with the course, provided the tutor does not do your assignment for you.","title":"a. What is acceptable when preparing an assignment?"},{"location":"syllabus/syllabus/#b-what-is-not-acceptable","text":"Ask a classmate to see their solution to a problem before submitting your own. Failing to cite the origins of any text (or code for programming courses) that you discover outside of the course's lessons and integrate into your work Giving or showing a classmate your solution to a problem when the classmate is struggling to solve it.","title":"b. What is not acceptable?"},{"location":"syllabus/syllabus/#j-expectations","text":"You are expected to attend classes on time by completing weekly course requirements (readings and assignments) during the semester. The main communication channel between the instructor and the students will be emailed. Please send your questions to the instructor's email address about the course via the email address provided to you by the university. Ensure that you include the course name in the subject field of your message and your name in the text field . In addition, the instructor will contact you via email if necessary. For this reason, it is very important to check your email address every day for healthy communication.","title":"J. Expectations"},{"location":"syllabus/syllabus/#k-lecture-content-and-syllabus-updates","text":"If deemed necessary, changes in the lecture content or course schedule can be made. If any changes are made in the scope of this document, the instructor will inform you about this.","title":"K. Lecture Content and Syllabus Updates"},{"location":"syllabus/syllabus/#course-schedule-overview","text":"Weeks Dates Subjects Other Tasks Week 1 04.10.2021 06.10.2021 Course Plan and Communication,Grading System, Assignments, and Exams,Computer Engineering Job Qualifications and Road Map,Google Search Basics,Programming Introduction (Operating System Basics, Computer Network Basics, Numerical System Basics, Character Sets) TBD Week 2 11.10.2021 13.10.2021 Algorithm Basics, Flowgorithm, Pseudocode, Programming Environment Setup and Configuration for C, C++, Java, and C#, Common Developer Tools, Online Programming Envoriments TBD Week 3 18.10.2021 20.10.2021 Source Code Sharing and Version Management. TBD Week 4 25.10.2021 27.10.2021 Shared Library Development and Application Test Automation for C, C++, C# and Java, TDD (Test Driven Development) TBD Week 5 01.11.2021 03.11.2021 C Functional Console Programming Week-6 08.11.2021 10.11.2021 C++ Functional Console Programming TBD Week-7 15.11.2021 17.11.2021 C# Functional Console Programming TBD Week-8 20.11.2021 28.11.2021 Midterm TBD Week-9 29.11.2021 01.12.2021 Java Functional Console Programming-I TBD Week-10 06.12.2021 08.12.2021 Java Functional Console Programming-II TBD Week-11 13.12.2021 16.12.2021 Java Functional Console Programming-III TBD Week-12 20.12.2021 22.12.2021 C / C++ Graphical User Interface (GUI) Programming TBD Week-13 27.12.2021 29.12.2021 C# Graphical User Interface (GUI) Programming-I TBD Week-14 03.01.2022 05.01.2022 C# Graphical User Interface (GUI) Programming-II TBD Week-15 10.01.2022 12.01.2022 Java Graphical User Interface Programming TBD Week-16 17.01.2022 30.01.2022 Final . TBD","title":"Course Schedule Overview"},{"location":"syllabus/syllabus/#bologna-information","text":"\\(End-Of-CE103-Syllabus\\)","title":"Bologna Information"},{"location":"week-1-intro/ce103-week-1-intro/","text":"CE103 Algorithms and Programming I \u00b6 Week-1 \u00b6 Introduction and Developer Roadmap \u00b6 Download DOC , SLIDE , PPTX Outline \u00b6 Computer Engineering Roles Developer Roadmaps Building a Social Profile and Resume Job Qualifications Using Google Operating Systems Introduction to Internet (IP, Port etc.) Windows Helper Utilities Shortcuts Command-Line Interface and Usefull Commands Brief Description of Course and Rules \u00b6 We will first talk about, Course Plan and Communication Grading System, Homework,s and Exams please read the syllabus carefully. Computer Engineering Roles \u00b6 Software Development Hardware Development Network Organization and Management Database Organization and Management Hardware and Software Testing Audit (Cyber Security, Policy etc.) Etc. Computer Engineering Areas \u00b6 Computer Vision Social Analytics Mobility IoT Security Web-Scale IT Cloud Smart Machines Pervasive Fintech Etc. Our focus is Software Development \u00b6 for this reason, we will focus on software-based road-maps we can use common developer road maps from https://roadmap.sh/ What will you see in the roadmap? \u00b6 Frontend Developer Roadmap: Learn to become a modern frontend developer Backend Developer Roadmap: Learn to become a modern backend developer DevOps Roadmap: Learn to become a DevOps Engineer or SRE DBA Roadmap: Learn to become a database administrator with PostgreSQL and more Open a formal e-mail account \u00b6 name.surname@gmail.com n.surname@gmail.com surname.name@gmail.com namesurname@gmail.com etc. do not have numbers in your e-mail adress Social Media and Job Search Profiles \u00b6 Open the following accounts Linkedin Gitlab Bitbucket Docker Github ORCID ARB\u0130S Hackerrank Publons Social Media and Job Search Profiles \u00b6 Open the following accounts https://www.kariyer.net/ https://www.yenibiris.com/ https://www.secretcv.com/ and more... Also, you need soft skills \u00b6 Excellent written and oral communication skills, including public speaking and presenting Decisiveness under pressure and strong critical thinking skills Willingness to work off-core-hours, when necessary, to deploy software or upgrade hardware If you need more information about your profession \u00b6 Visit Job Search Web Portals and Look at Requirements to Understand What is Real Life Need https://www.kariyer.net/ https://www.yenibiris.com/ https://www.secretcv.com/ https://www.linkedin.com/ Etc. Using Google \u00b6 Google Scholar Google Patents Google Images Operating System List \u00b6 Operating System Architecture \u00b6 reference Operating Systems Key Comparing Factor \u00b6 reference Operating System Comparisons \u00b6 reference Operating System Comparisons \u00b6 Operating System Comparisons \u00b6 Operating System Comparisons \u00b6 Operating System Comparisons \u00b6 Operating System Comparisons \u00b6 Intro to the Internet \u00b6 What is IP Address? \u00b6 What is IP Address? \u00b6 What is IP Address? \u00b6 What is Port? \u00b6 In computer networking , a port is a communication endpoint. At the software level, within an operating system , a port is a logical construct that identifies a specific process or a type of network service . A port is identified for each transport protocol and address combination by a 16-bit unsigned number , known as the port number. The most common transport protocols that use port numbers are the Transmission Control Protocol (TCP) and the User Datagram Protocol (UDP). reference What is Port? \u00b6 What is Port Forwarding and NAT \u00b6 What is Port Forwarding and NAT \u00b6 https://www.networkantics.com/sonicwall-port-forwarding/ https://en.wikipedia.org/wiki/Network_address_translation What is Internet Packet (IP) \u00b6 What is Domain Name Server (DNS)? \u00b6 The Submarine Cable Map \u00b6 https://www.submarinecablemap.com/ Shortcuts \u00b6 \\[ \\text{Before starting to do anything, if there are shortcuts, try to learn them.} \\] Microsoft Helper Toolkits \u00b6 Install Power Toys Utility https://learn.microsoft.com/en-us/windows/powertoys/ Download Sysinternals Suite (Toolkit) https://learn.microsoft.com/en-us/sysinternals/downloads/sysinternals-suite Windows Shortcuts \u00b6 Copy : Ctrl+C Cut : Ctrl+X Paste : Ctrl+V Windows Shortcuts \u00b6 Snipping Tool : Win+Shift+S Depending on your hardware take a screenshot Win+PrtScn Fn+Win+Space . Windows Shortcuts (Power Toys) \u00b6 Power Toys Run : Alt+Space Always-on-Top : Win+Ctrl+T Color Picker : Win+Shift+C Screen Ruler : Win+Shift+T Video Conf. Mute : Win+Shift+Q Windows Shortcuts \u00b6 Maximize Window : F11 or Win+UpArrow Open Task View : Win+Tab Display and hide the desktop : Win+D Switch between open apps : Alt+Tab Open the Quick Link menu : Win+X Lock your PC : Win+L Introduction to the command line interface \u00b6 Reference Books Bash Notes For Professionals Linux Notes For Professionals PowerShell Notes For Professionals What is the command line? \u00b6 The window, which is usually called the command line or command-line interface , is a text-based application for viewing, handling, and manipulating files on your computer. It's much like Windows Explorer or Finder on the Mac, but without the graphical interface. Other names for the command line are: cmd, CLI, prompt, console or terminal While there are many commands you can use with CLI, they all fall into two categories : The commands that handle the processes The commands that handle the files reference Why Would You Use CLI over GUI? \u00b6 Less Resource It is not a secret that the text-based program needs very little resources of your computer. This means that with CLI you can do similar tasks with minimum resources. Why Would You Use CLI over GUI? \u00b6 High Precision You can use a specific command to target specific destinations with ease. As long as you don\u2019t type the wrong command, it will work like a charm. Once you learn the basics, writing syntax is not as hard as you might think. Why Would You Use CLI over GUI? \u00b6 Repetitive Tasks Friendly GUI has developed well over the years. But, the operating system may not give you all the menus and buttons to perform all tasks. One of the reasons is safety. This leaves you overwhelmed if you have to do repetitive tasks. For example, when you have to handle hundreds of files within a folder, CLI enables you to use a single command to do automate the repetition easily. Why Would You Use CLI over GUI? \u00b6 Powerful Most operating systems today prevent you from messing up the system\u2019s core process. Windows has system protection and MacOS has SIP (System Integrity Protection). You won\u2019t be able to perform certain tasks which are system protected. However, with CLI, you will have full control over your system. Open the command-line interface (Windows) \u00b6 Go to the Start menu or screen, and enter Command Prompt in the search field. Go to Start menu \u2192 Windows System \u2192 Command Prompt . Go to Start Menu \u2192 All Programs \u2192 Accessories \u2192 Command Prompt . Go to the Start screen, hover your mouse in the lower-left corner of the screen, and click the down arrow that appears (on a touch screen, instead flick up from the bottom of the screen). The Apps page should open. Click on Command Prompt in the Windows System section. Hold the special Windows key on your keyboard and press the \"X\" key. Choose \"Command Prompt\" from the pop-up menu. Hold the Windows key and press the \"R\" key to get a \"Run\" window. Type \"cmd\" in the box, and click the OK key. Open the command-line interface (Windows) \u00b6 Open the command-line interface (Windows) \u00b6 Open the command-line interface (Windows) \u00b6 Open the command-line interface (Windows) \u00b6 Open the command-line interface (Windows) \u00b6 Open the command-line interface (Linux) \u00b6 It's probably under Applications \u2192 Accessories \u2192 Terminal, or Applications \u2192 System \u2192 Terminal, but that may depend on your system. If it's not there, you can try to Google it. :) Open the command-line interface (Linux) \u00b6 Open the command-line interface (MacOS) \u00b6 Go to Applications \u2192 Utilities \u2192 Terminal Command Basics \u00b6 Command Basics (Computer Name,Current Directory Path) \u00b6 > whoami (hit enter) - Result: laptop-rqnns9ig\\ugur.coruh - Computer will print username Command Basics (Computer Name,Current Directory Path) \u00b6 > pwd - Result: /Users/ugur.coruh - Current Working Directory for Linux and OS X Command Basics (Computer Name,Current Directory Path) \u00b6 >cd - Result: C:\\Users\\ugur.coruh - Current Working Directory for Windows Learn Command Details in Linux and OS X \u00b6 >man <command_name> Sample >man pwd - OS X and Linux have a man command,which gives you help on commands Use the space bar to move to the next page, and q to quit looking at the help Learn Command Details in Window \u00b6 Adding a /? suffix to most commands will print the help page Sample >cd /? List files and directories in Linux and OS X \u00b6 >ls Applications Desktop Downloads Music ... List files and directories in Linux and OS X \u00b6 >ls -R - will list all the files in the sub-directories as well List files and directories in Linux and OS X \u00b6 >ls -a - will show the hidden files List files and directories in Linux and OS X \u00b6 >ls -al - will list the files and directories with detailed information like the permissions, size,owner, etc. List files and directories in Windows \u00b6 >dir Result: Volume in drive C is Windows Volume Serial Number is 8C3C-8F8C Directory of C:\\Users\\ugur.coruh 10/14/2020 09:57 AM <DIR> . 10/14/2020 09:57 AM <DIR> .. 08/15/2020 11:00 PM <DIR> .android 06/28/2020 03:02 AM <DIR> AndroidStudio4.0 List files and directories in Linux, OS X \u00b6 you should install with brew install tree List files and directories in Windows \u00b6 > tree Result: C:\\Users\\ugur.coruh\\Desktop\\Samples>tree Folder PATH listing for volume Windows Volume serial number is 8C3C-8F8C C:. \u251c\u2500\u2500\u2500C \u2502 \u2514\u2500\u2500\u2500HelloWorld \u2502 \u2514\u2500\u2500\u2500.vscode \u251c\u2500\u2500\u2500Cpp \u251c\u2500\u2500\u2500Csharp \u2514\u2500\u2500\u2500Java Change Current Directory in Windows / Linux and OS X \u00b6 >cd <path> cd Desktop Change Current Directory in Windows / Linux and OS X \u00b6 print case-sensitive prefix of targer folder and use tab to complete or find correct folder > cd .. This command moves current working directory to parent directory. You can use cd ..\\..\\.. to go 3 level up. Change Current Directory in Windows / Linux and OS X \u00b6 Also you can change relative path such as cd ..\\..\\target\\child go 2 level up and then go to target and child folders. To directly go to folder write full path of file cd C:\\temp\\build\\target\\child Change Current Directory in Windows / Linux and OS X \u00b6 >cd- (with a hyphen) to move to your previous directory We will use this feature with CMAKE! Create Directory in Windows, Linux, OS X \u00b6 > mkdir folder_name - To generate a new directory inside another directory, use this Linux basic command mkdir Music/Newfile Create Directory in Windows, Linux, OS X \u00b6 use the p (parents) option to create a directory in between two existing directories. For example, mkdir -p Music/2020/Newfile will create the new \u201c2020\u201d file. Create Directory in Windows, Linux, OS X \u00b6 Check folder creation is succeed with list commands Linux,OS X -> ls Windows -> dir or tree > dir - Use cd folder_name from current directory for going to created folder > cd folder_name Remove Directory in Windows Powershell, OS X and Linux \u00b6 > rm \u2013r folder_path >rmdir -r is used for recursive deletion of folders. However, rmdir only allows you to delete empty directories Remove Directory in Windows Powershell \u00b6 > rmdir /S folder_path folder_path, Are you sure <Y/N>? Y - Check deletion with folder listing commands. Command Basics (Delete File) in Windows \u00b6 >DEL /F untitled.txt* - If you want to add the options like force deletion, you can add it before the file name Copy Files in Linux \u00b6 Use the cp command to copy files from the current directory to a different directory. For instance, the command cp scenery.jpg /home/username/Pictures would create a copy of scenery.jpg (from your current directory) into the Pictures directory. Copy Files in Windows \u00b6 cd- (with a hyphen) to move to your previous directoryCopy a file in the current folder >COPY source_file.doc newfile.doc - Copy from a different folder/directory: >COPY \"C:\\my work\\some file.doc\" \"D:\\New docs\\newfile.doc\" \u00b6 Copy Files in Windows \u00b6 Specify the source only, with a wildcard will copy all the files into the current directory:* >COPY \"C:\\my work\\*.doc\" - Specify the source with a wildcard and the destination as a single file, this is generally only useful with plain text files. >COPY \"C:\\my work\\*.txt\" \"D:\\New docs\\combined.txt\" Copy Files in Windows \u00b6 Quiet copy (no feedback on screen)* COPY source_file.doc newfile.doc >nul - Copy a file, but do not overwrite if the destination file already exists, this technique only works for a single file, no wildcards: Echo n|COPY /-y c:\\demo\\source_file.txt c:\\dir\\dest.txt \u00b6 Renaming File in Windows \u00b6 >REN d:untitled.txt untitled1.txt* - To rename a file within a specific folder, use REN [drive:][path] [source] [target] - If you mention the location, that means the renamed file will be saved in the same folder >REN d:untitled.txt ..\\..\\folder\\untitled1.txt* >REN d:untitled.txt C:\\folder\\untitled1.txt Renaming File in Linux and OS X \u00b6 >mv [OPTIONS] source destination* >mv file1.txt file2.txt* Optional sudo apt install rename Move Files in Windows \u00b6 In the current folder >MOVE oldfile.wp newfile.doc - Full path specified >MOVE g:\\department\\oldfile.wp \"c:\\Files to Convert\\newfile.doc\" - Specify the drive and filename (assumes the current folder on both drives is correct) >MOVE a:oldfile.wp c:newfile.doc \u00b6 Move Files in Windows \u00b6 Specify source only (will copy the file to current folder, keeping the same filename) >MOVE g:\\department\\oldfile.wp - Quiet move (no feedback on screen) >MOVE oldfile.wp newfile.doc >nul - Move a file, but do not overwrite if the destination file already exists, this technique only works for a single file, no wildcards - ( /-y is required): >Echo n|MOVE /-y c:\\file1.txt c:\\dir\\file1.txt Move Files in Linux and OS X \u00b6 Check mv command For example: mv file.txt /home/username/Documents Command Basics (Renaming a Volume Disk) in Windows \u00b6 D:\\ > LABEL d:MyData Measure Processing Time in Windows Powershell \u00b6 > Measure-Command {echo hi} Days : 0 Hours : 0 Minutes : 0 Seconds : 0 Milliseconds : 0 Ticks : 1318 TotalDays : 1.52546296296296E-09 TotalHours : 3.66111111111111E-08 TotalMinutes : 2.19666666666667E-06 TotalSeconds : 0.0001318 TotalMilliseconds : 0.1318 Measure Processing Time in Windows Command Prompt \u00b6 > powershell -Command \"Measure-Command {echo hi}\" \u00b6 Command Basics (Measure Processing Time) \u00b6 timecmd.bat @echo off @setlocal set start=%time% :: Runs your command cmd /c %* set end=%time% set options=\"tokens=1-4 delims=:.,\" for /f %options% %%a in (\"%start%\") do set start_h=%%a&set /a start_m=100%%b %% 100&set /a start_s=100%%c %% 100&set /a start_ms=100%%d %% 100 for /f %options% %%a in (\"%end%\") do set end_h=%%a&set /a end_m=100%%b %% 100&set /a end_s=100%%c %% 100&set /a end_ms=100%%d %% 100 set /a hours=%end_h%-%start_h% set /a mins=%end_m%-%start_m% set /a secs=%end_s%-%start_s% set /a ms=%end_ms%-%start_ms% if %ms% lss 0 set /a secs = %secs% - 1 & set /a ms = 100%ms% if %secs% lss 0 set /a mins = %mins% - 1 & set /a secs = 60%secs% if %mins% lss 0 set /a hours = %hours% - 1 & set /a mins = 60%mins% if %hours% lss 0 set /a hours = 24%hours% if 1%ms% lss 100 set ms=0%ms% :: Mission accomplished set /a totalsecs = %hours%*3600 + %mins%*60 + %secs% echo command took %hours%:%mins%:%secs%.%ms% (%totalsecs%.%ms%s total) \u00b6 Command Basics (Measure Processing Time) \u00b6 Usage If you put timecmd.bat in a directory in your path, you can call it from anywhere like this: >timecmd [your command] - E.g. C:\\>timecmd pause Press any key to continue . . . command took 0:0:1.18 Command Basics (Measure Processing Time) \u00b6 If you want to do output redirection, you can quote the command like this: timecmd \"dir c:\\windows /s > nul\" This should handle commands that run from before- to after-midnight, but the output will be wrong if your command runs for 24 hours or more. Useful Linux Commands \u00b6 Use Online Sandbox to Try Commands Yourself https://ubunlog.com/en/gnulinux-online-terminals-browser/ https://bellard.org/jslinux/vm.html?url=alpine-x86.cfg&mem=192 cat command \u00b6 cat (short for concatenate) is one of the most frequently used commands in Linux. It is used to list the contents of a file on the standard output (sdout). To run this command, type cat followed by the file\u2019s name and its extension. For instance: cat file.txt . Here are other ways to use the cat command: cat > filename creates a new file cat filename1 filename2>filename3 joins two files (1 and 2) and stores the output of them in a new file (3) to convert a file to upper or lower case use, cat filename | tr a-z A-Z >output.txt touch command \u00b6 The touch command allows you to create a blank new file through the Linux command line. As an example, enter touch /home/username Documents/Web.html to create an HTML file entitled Web under the Documents directory. locate command \u00b6 You can use this command to locate a file, just like the search command in Windows. What\u2019s more, using the -i argument along with this command will make it case-insensitive, so you can search for a file even if you don\u2019t remember its exact name. To search for a file that contains two or more words, use an asterisk ( * ). For example, locate -i school*note* command will search for any file that contains the word \u201c school \u201d and \u201c note \u201d, whether it is uppercase or lowercase. find command \u00b6 Similar to the locate command, using find also searches for files and directories. The difference is, you use the find command to locate files within a given directory. As an example, find /home/ -name notes.txt command will search for a file called notes.txt within the home directory and its subdirectories. Other variations when using the find are: To find files in the current directory use, find -name notes.txt To look for directories use, / -type d -name notes. txt grep command \u00b6 Another basic Linux command that is undoubtedly helpful for everyday use is grep . It lets you search through all the text in a given file. To illustrate, grep blue notepad.txt will search for the word blue in the notepad file. Lines that contain the searched word will be displayed fully. sudo command \u00b6 Short for \" SuperUser Do \", this command enables you to perform tasks that require administrative or root permissions. However, it is not advisable to use this command for daily use because it might be easy for an error to occur if you did something wrong. df command \u00b6 Use df command to get a report on the system\u2019s disk space usage, shown in percentage and KBs. If you want to see the report in megabytes, type df -m . du command \u00b6 If you want to check how much space a file or a directory takes, the du (Disk Usage) command is the answer. However, the disk usage summary will show disk block numbers instead of the usual size format. If you want to see it in bytes, kilobytes, and megabytes, add the -h argument to the command line. head command \u00b6 \u2022 The head command is used to view the first lines of any text file. By default, it will show the first ten lines, but you can change this number to your liking. For example, if you only want to show the first five lines, type head -n 5 filename.ext . tail command \u00b6 This one has a similar function to the head command, but instead of showing the first lines, the tail command will display the last ten lines of a text file. For example, tail -n filename.ext. diff command \u00b6 Short for difference, the diff command compares the contents of two files line by line. After analyzing the files, it will output the lines that do not match. Programmers often use this command when they need to make program alterations instead of rewriting the entire source code. The simplest form of this command is diff file1.ext file2.ext tar command \u00b6 The tar command is the most used command to archive multiple files into a tarball \u2014 a common Linux file format that is similar to zip format, with compression being optional. https://www.linuxtechi.com/17-tar-command-examples-in-linux/ chmod command \u00b6 chmod is another Linux command, used to change the read, write, and execute permissions of files and directories. https://www.computerhope.com/unix/uchmod.htm chown command \u00b6 In Linux, all files are owned by a specific user. The chown command enables you to change or transfer the ownership of a file to the specified username. For instance, chown linuxuser2 file.ext will make linuxuser2 as the owner of the file.ext . jobs command \u00b6 jobs command will display all current jobs along with their statuses. A job is basically a process that is started by the shell. The jobs command displays the status of jobs started in the current terminal window. Jobs are numbered starting from 1 for each session. The job ID numbers are used by some programs instead of PIDs (for example, by fg and bg commands). kill command \u00b6 If you have an unresponsive program, you can terminate it manually by using the kill command. It will send a certain signal to the misbehaving app and instructs the app to terminate itself. There is a total of sixty-four-signals that you can use, but people usually only use two signals: kill command \u00b6 SIGTERM (15) : requests a program to stop running and gives it some time to save all of its progress. If you don\u2019t specify the signal when entering the kill command, this signal will be used. kill command \u00b6 SIGKILL (9) : forces programs to stop immediately. Unsaved progress will be lost. Besides knowing the signals, you also need to know the process identification number (PID) of the program you want to kill . If you don\u2019t know the PID, simply run the command ps ux . After knowing what signal you want to use and the PID of the program, enter the following syntax: kill [signal option] PID . https://linoxide.com/linux-how-to/linux-signals-part-1/ ping command \u00b6 Use the ping command to check your connectivity status to a server. For example, by simply entering ping google.com , the command will check whether you\u2019re able to connect to Google and also measure the response time. wget command \u00b6 The Linux command line is super useful \u2014 you can even download files from the internet with the help of the wget command. To do so, simply type wget followed by the download link. uname command \u00b6 The uname command, short for Unix Name, will print detailed information about your Linux system like the machine name, operating system, kernel, and so on. top command \u00b6 As a terminal equivalent to Task Manager in Windows, the top command will display a list of running processes and how much CPU each process uses. It\u2019s very useful to monitor system resource usage, especially knowing which process needs to be terminated because it consumes too many resources. history command \u00b6 When you\u2019ve been using Linux for a certain period of time, you\u2019ll quickly notice that you can run hundreds of commands every day. As such, running history command is particularly useful if you want to review the commands you\u2019ve entered before. echo command \u00b6 This command is used to move some data into a file. For example, if you want to add the text, \u201c Hello, my name is John \u201d into a file called name.txt , you would type echo Hello, my name is John >> name.txt zip, unzip command \u00b6 Use the zip command to compress your files into a zip archive, and use the unzip command to extract the zipped files from a zip archive. hostname command \u00b6 If you want to know the name of your host/network simply type hostname . Adding a -I to the end will display the IP address of your network. Hostnamectl https://www.cyberciti.biz/faq/find-my-linux-machine-name/ host command \u00b6 host command is a simple utility for performing DNS lookups. It is normally used to convert names to IP addresses and vice versa. When no arguments or options are given, host command displays a short summary of its command line arguments and options. The syntax is as follows: host example.com host -t TYPE example.com host -t a example.com https://www.cyberciti.biz/faq/unix-linux-dns-lookup-command/ host command \u00b6 Installation of host command if not found root@user:~# apt-get update root@user:~# apt-get install dnsutils \u2013y https://www.crybit.com/install-dig-nslookup-host-commands/ useradd, userdel command \u00b6 Since Linux is a multi-user system, this means more than one person can interact with the same system at the same time. useradd is used to create a new user, while passwd is adding a password to that user\u2019s account. To add a new person named John type, useradd John and then to add his password type, passwd 123456789 . To remove a user is very similar to adding a new user. To delete the users account type, userdel UserName Tips and Tricks for Linux CLI \u00b6 Try the TAB button to autofill what you are typing For example, if you need to type Documents, begin to type a command (let\u2019s go with cd Docu then hit the TAB key) and the terminal will fill in the rest, showing you cd Documents Ctrl+C and Ctrl+Z are used to stop any command that is currently working. Ctrl+C will stop and terminate the command, while Ctrl+Z will simply pause the command. Tips and Tricks for Linux CLI \u00b6 If you accidental freeze your terminal by using Ctrl+S , simply undo this with the unfreeze Ctrl+Q . Ctrl+A moves you to the beginning of the line while Ctrl+E moves you to the end You can run multiple commands in one single command by using the ; to separate them. For example Command1; Command2; Command3 Or use && if you only want the next command to run when the first one is successful. Useful Windows Commands \u00b6 ASSOC: Fix File Associations \u00b6 One of the most powerful tools in the CMD command library is the ASSOC command. Your computer associates certain file extensions with certain programs. This is how your computer knows to open Adobe when you double click a PDF file, or Microsoft Word when you double click a DOC file. You can view all the file associations your computer knows about by typing ASSOC in the command window. You\u2019ll see the file extension and the program it\u2019s associated with. You can set the association by typing something like assoc .doc=Word.Document.8 . FC: File Compare \u00b6 Sometimes when files are changed over time, it\u2019s hard to remember what the differences were between versions. You may not know that a CMD command offers the ability to compare files and see all differences, but it\u2019s true. The FC command performs either an ascii or a binary file comparison and will list all of the differences that it finds. Fc /a File1.txt File2.txt will compare two ascii files. Fc /b Picture1.jpg Picture2.jpg will do a binary compare on two images. IPCONFIG \u00b6 Network troubleshooting is never simple, but one command that makes it much easier is IPCONFIG . Using this command in the CMD command prompt returns detailed information about your current network adapter connection including: Current IP Address Subnet Mask Default Gateway IP Current domain This information can help you troubleshoot router issues and other connection issues you could be having with your network adapter. IPCONFIG \u00b6 Examples: > ipconfig ... Show information > ipconfig /all ... Show detailed information > ipconfig /renew ... renew all adapters > ipconfig /renew EL* ... renew any connection that has its name starting with EL > ipconfig /release *Con* ... release all matching connections, eg. IPCONFIG \u00b6 \"Wired Ethernet Connection 1\" or \"Wired Ethernet Connection 2\" > ipconfig /all compartments ... Show information about all compartments > ipconfig /all compartments /all ... Show detailed information about all compartments /? Display this help message /all Display full configuration information. /release Release the IPv4 address for the specified adapter. /release6 Release the IPv6 address for the specified adapter. IPCONFIG \u00b6 /renew Renew the IPv4 address for the specified adapter. /renew6 Renew the IPv6 address for the specified adapter. /flushdns Purges the DNS Resolver cache. /registerdns Refreshes all DHCP leases and re-registers DNS names /displaydns Display the contents of the DNS Resolver Cache. /showclassid Displays all the dhcp class IDs allowed for adapter. /setclassid Modifies the dhcp class id. /showclassid6 Displays all the IPv6 DHCP class IDs allowed for adapter. /setclassid6 Modifies the IPv6 DHCP class id. NETSTAT: Network Statistics \u00b6 Concerned that you could have malware running on your computer that\u2019s connecting to internet locations without you knowing about it? If you run a NETSTAT command in the command prompt, you can get a list of all active TCP connections from your computer. PING: Send Test Packets \u00b6 An IT Analyst\u2019s best friend is the PING command. Running this command sends test packets over the network to the target system. You can use the PING command to test whether your computer can access another computer, a server, or even a website. It can help with revealing network disconnections. It also provides transit time for the packets in milliseconds, so it also reveals a bad network connection as well. PING: Send Test Packets \u00b6 https://ipstack.com/ ipstack offers one of the leading TRACERT: Trace Route IP to geolocation \u00b6 APIs and global IP database services worldwide. POWERCFG: Power Configuration \u00b6 Are you frustrated with how quickly your laptop seems to run out of power? It could be that your power settings are configured as efficiently as possible. There\u2019s a windows CMD command called POWERCFG (power configuration) that can help. POWERCFG: Power Configuration \u00b6 Run the command prompt as an administrator and type powercfg \u2013 energy to get a full power efficiency report. The process can take up to about a minute, but when it\u2019s done, you\u2019ll see whether there are any warnings or errors that might help you improve the power efficiency of your system. SHUTDOWN: Turn Off Computer \u00b6 The SHUTDOWN command is a pretty versatile command that lets you shutdown the computer but control the behavior of that shutdown. It\u2019s commonly used as a scheduled task or part of an IT batch job after patches have been applied to a computer system. Typing shutdown /i from the command prompt will initiate a shutdown, but it\u2019ll upon a GUI to give the user an option on whether to restart or do a full shutdown. If you don\u2019t want to have any GUI pop up, you can just issue a shutdown /s command. There is a long list of other parameters you can use to do a log off, hibernate, restart, and more. Just type shutdown without any arguments to see them all. SYSTEMINFO: System Information \u00b6 If you need to know what brand of network card you have, processor details, or the exact version of your Windows OS, the SYSTEMINFO command can help. This command polls your system and pulls the most important information about your system. It lists the information in a clean format that\u2019s easy to read. SFC: System File Checker \u00b6 If you\u2019re ever concerned that a virus or some other software might have corrupted your core system files, there\u2019s a Windows command that can scan those files and ensure their integrity. You need to launch CMD as administrator (right click and choose Run as Administrator ). Typing SFC /SCANNOW will check the integrity of all protected system files. If a problem is found, the files will be repaired with backed-up system files. SFC: System File Checker \u00b6 The SFC command also lets you: /VERIFYONLY : Check the integrity but don\u2019t repair the files. /SCANFILE : Scan the integrity of specific files and fix if corrupted. /VERIFYFILE : Verify the integrity of specific files but don\u2019t repair them. /OFFBOOTDIR : Use this to do repairs on an offline boot directory. /OFFWINDIR : Use this to do repairs on an offline Windows directory. /OFFLOGFILE : Specify a path to save a log file with scan results. The scan can take up to 10 or 15 minutes, so give it time. NET USE: Map drives \u00b6 If you want to map a new drive, you could always open File Explorer, right click on This PC, and go through the Map Network Drive wizard. However, using the NET USE command, you can do the same thing with one command string. For example, if you have a share folder on a computer on your network called \\\\OTHER-COMPUTER\\SHARE\\ , you can map this as your own Z: drive by typing the command: NET USE Z: \u201c\\\\OTHER-COMPUTER\\SHARE\u201d /persistent:yes The persistent switch tells your computer that you want this drive remapped every time you log back into your computer. CHKDSK: Check Disk \u00b6 While the SFC command only checks the integrity of core system files, you can use the CHKDSK command to scan an entire drive. The command to check the C: drive and repair any problems, launch the command window as an administrator and type CHKDSK /f C: . This command checks for things like: File fragmentation Disk errors Bad sectors The command can fix any disk errors (if possible). When the command is finished, you\u2019ll see a status of the scan and what actions were taken. SCHTASKS: Schedule Tasks \u00b6 Windows comes with a wizard for creating scheduled tasks. For example, maybe you have a BAT file stored on C:\\temp that you want to run every day at noon. You\u2019d have to click through the Scheduled Task wizard to configure this. Or you can type a single SCHTASKS command to set it up. SCHTASKS /Create /SC HOURLY /MO 12 /TR Example /TN c:\\temp\\File1.bat The scheduled switch accepts arguments like minute, hourly, daily, and monthly. Then you specify the frequency with the /MO command. If you typed the command correctly, you\u2019ll see the response, SUCCESS: The scheduled task \u201cExample\u201d has successfully been created . ATTRIB: Change File Attributes \u00b6 In Windows, you can change file attributes by right clicking on a file and finding the right property to change. However, instead of hunting around for the file attribute, you can use the ATTRIB command to set the file attributes. For example, if you type: ATTRIB +R +H C:\\temp\\File1.bat , it\u2019ll set File1.bat as a hidden, read-only file. There is no response when it\u2019s successful, so unless you see an error message, the command worked. Other Windows CMD Commands \u00b6 BITSADMIN : Initiate upload or download jobs over the network or internet and monitor the current state of those file transfers. COLOR : Change the background color of the command prompt window. COMP : Compare the contents of any two files to see the differences. FIND/FINDSTR : Search for strings inside of any ASCII files. PROMPT : Change the command prompt from C:> to something else. TITLE : Change the title of the command prompt window. REGEDIT : Edit keys in the Windows registry (use with caution). ROBOCOPY : A powerful file copy utility built right into Windows. References \u00b6 GitHub - kamranahmedse/developer-roadmap: Roadmap to becoming a web developer in 2021 GitHub - jwasham/coding-interview-university: A complete computer science study plan to become a software engineer. GitHub - sindresorhus/awesome: \ud83d\ude0e Awesome lists about all kinds of interesting topics References \u00b6 https://www.hostinger.com/tutorials/what-is-cli https://www.hostinger.com/tutorials/linux-commands https://tutorial.djangogirls.org/en/intro_to_command_line/ https://stackoverflow.com/questions/673523/how-do-i-measure-execution-time-of-a-command-on-the-windows-command-line References \u00b6 https://helpdeskgeek.com/help-desk/21-cmd-commands-all-windows-users-should-know/ Introduction to CMake by Example | derekmolloy.ie CMake - Cross Platform Make Windows commands | Microsoft Learn","title":"Week-1 (Intro and Developer Roadmap)"},{"location":"week-1-intro/ce103-week-1-intro/#ce103-algorithms-and-programming-i","text":"","title":"CE103 Algorithms and Programming I"},{"location":"week-1-intro/ce103-week-1-intro/#week-1","text":"","title":"Week-1"},{"location":"week-1-intro/ce103-week-1-intro/#introduction-and-developer-roadmap","text":"Download DOC , SLIDE , PPTX","title":"Introduction and Developer Roadmap"},{"location":"week-1-intro/ce103-week-1-intro/#outline","text":"Computer Engineering Roles Developer Roadmaps Building a Social Profile and Resume Job Qualifications Using Google Operating Systems Introduction to Internet (IP, Port etc.) Windows Helper Utilities Shortcuts Command-Line Interface and Usefull Commands","title":"Outline"},{"location":"week-1-intro/ce103-week-1-intro/#brief-description-of-course-and-rules","text":"We will first talk about, Course Plan and Communication Grading System, Homework,s and Exams please read the syllabus carefully.","title":"Brief Description of Course and Rules"},{"location":"week-1-intro/ce103-week-1-intro/#computer-engineering-roles","text":"Software Development Hardware Development Network Organization and Management Database Organization and Management Hardware and Software Testing Audit (Cyber Security, Policy etc.) Etc.","title":"Computer Engineering Roles"},{"location":"week-1-intro/ce103-week-1-intro/#computer-engineering-areas","text":"Computer Vision Social Analytics Mobility IoT Security Web-Scale IT Cloud Smart Machines Pervasive Fintech Etc.","title":"Computer Engineering Areas"},{"location":"week-1-intro/ce103-week-1-intro/#our-focus-is-software-development","text":"for this reason, we will focus on software-based road-maps we can use common developer road maps from https://roadmap.sh/","title":"Our focus is Software Development"},{"location":"week-1-intro/ce103-week-1-intro/#what-will-you-see-in-the-roadmap","text":"Frontend Developer Roadmap: Learn to become a modern frontend developer Backend Developer Roadmap: Learn to become a modern backend developer DevOps Roadmap: Learn to become a DevOps Engineer or SRE DBA Roadmap: Learn to become a database administrator with PostgreSQL and more","title":"What will you see in the roadmap?"},{"location":"week-1-intro/ce103-week-1-intro/#open-a-formal-e-mail-account","text":"name.surname@gmail.com n.surname@gmail.com surname.name@gmail.com namesurname@gmail.com etc. do not have numbers in your e-mail adress","title":"Open a formal e-mail account"},{"location":"week-1-intro/ce103-week-1-intro/#social-media-and-job-search-profiles","text":"Open the following accounts Linkedin Gitlab Bitbucket Docker Github ORCID ARB\u0130S Hackerrank Publons","title":"Social Media and Job Search Profiles"},{"location":"week-1-intro/ce103-week-1-intro/#social-media-and-job-search-profiles_1","text":"Open the following accounts https://www.kariyer.net/ https://www.yenibiris.com/ https://www.secretcv.com/ and more...","title":"Social Media and Job Search Profiles"},{"location":"week-1-intro/ce103-week-1-intro/#also-you-need-soft-skills","text":"Excellent written and oral communication skills, including public speaking and presenting Decisiveness under pressure and strong critical thinking skills Willingness to work off-core-hours, when necessary, to deploy software or upgrade hardware","title":"Also, you need soft skills"},{"location":"week-1-intro/ce103-week-1-intro/#if-you-need-more-information-about-your-profession","text":"Visit Job Search Web Portals and Look at Requirements to Understand What is Real Life Need https://www.kariyer.net/ https://www.yenibiris.com/ https://www.secretcv.com/ https://www.linkedin.com/ Etc.","title":"If you need more information about your profession"},{"location":"week-1-intro/ce103-week-1-intro/#using-google","text":"Google Scholar Google Patents Google Images","title":"Using Google"},{"location":"week-1-intro/ce103-week-1-intro/#operating-system-list","text":"","title":"Operating System List"},{"location":"week-1-intro/ce103-week-1-intro/#operating-system-architecture","text":"reference","title":"Operating System Architecture"},{"location":"week-1-intro/ce103-week-1-intro/#operating-systems-key-comparing-factor","text":"reference","title":"Operating Systems Key Comparing Factor"},{"location":"week-1-intro/ce103-week-1-intro/#operating-system-comparisons","text":"reference","title":"Operating System Comparisons"},{"location":"week-1-intro/ce103-week-1-intro/#operating-system-comparisons_1","text":"","title":"Operating System Comparisons"},{"location":"week-1-intro/ce103-week-1-intro/#operating-system-comparisons_2","text":"","title":"Operating System Comparisons"},{"location":"week-1-intro/ce103-week-1-intro/#operating-system-comparisons_3","text":"","title":"Operating System Comparisons"},{"location":"week-1-intro/ce103-week-1-intro/#operating-system-comparisons_4","text":"","title":"Operating System Comparisons"},{"location":"week-1-intro/ce103-week-1-intro/#operating-system-comparisons_5","text":"","title":"Operating System Comparisons"},{"location":"week-1-intro/ce103-week-1-intro/#intro-to-the-internet","text":"","title":"Intro to the Internet"},{"location":"week-1-intro/ce103-week-1-intro/#what-is-ip-address","text":"","title":"What is IP Address?"},{"location":"week-1-intro/ce103-week-1-intro/#what-is-ip-address_1","text":"","title":"What is IP Address?"},{"location":"week-1-intro/ce103-week-1-intro/#what-is-ip-address_2","text":"","title":"What is IP Address?"},{"location":"week-1-intro/ce103-week-1-intro/#what-is-port","text":"In computer networking , a port is a communication endpoint. At the software level, within an operating system , a port is a logical construct that identifies a specific process or a type of network service . A port is identified for each transport protocol and address combination by a 16-bit unsigned number , known as the port number. The most common transport protocols that use port numbers are the Transmission Control Protocol (TCP) and the User Datagram Protocol (UDP). reference","title":"What is Port?"},{"location":"week-1-intro/ce103-week-1-intro/#what-is-port_1","text":"","title":"What is Port?"},{"location":"week-1-intro/ce103-week-1-intro/#what-is-port-forwarding-and-nat","text":"","title":"What is Port Forwarding and NAT"},{"location":"week-1-intro/ce103-week-1-intro/#what-is-port-forwarding-and-nat_1","text":"https://www.networkantics.com/sonicwall-port-forwarding/ https://en.wikipedia.org/wiki/Network_address_translation","title":"What is Port Forwarding and NAT"},{"location":"week-1-intro/ce103-week-1-intro/#what-is-internet-packet-ip","text":"","title":"What is Internet Packet (IP)"},{"location":"week-1-intro/ce103-week-1-intro/#what-is-domain-name-server-dns","text":"","title":"What is Domain Name Server (DNS)?"},{"location":"week-1-intro/ce103-week-1-intro/#the-submarine-cable-map","text":"https://www.submarinecablemap.com/","title":"The Submarine Cable Map"},{"location":"week-1-intro/ce103-week-1-intro/#shortcuts","text":"\\[ \\text{Before starting to do anything, if there are shortcuts, try to learn them.} \\]","title":"Shortcuts"},{"location":"week-1-intro/ce103-week-1-intro/#microsoft-helper-toolkits","text":"Install Power Toys Utility https://learn.microsoft.com/en-us/windows/powertoys/ Download Sysinternals Suite (Toolkit) https://learn.microsoft.com/en-us/sysinternals/downloads/sysinternals-suite","title":"Microsoft Helper Toolkits"},{"location":"week-1-intro/ce103-week-1-intro/#windows-shortcuts","text":"Copy : Ctrl+C Cut : Ctrl+X Paste : Ctrl+V","title":"Windows Shortcuts"},{"location":"week-1-intro/ce103-week-1-intro/#windows-shortcuts_1","text":"Snipping Tool : Win+Shift+S Depending on your hardware take a screenshot Win+PrtScn Fn+Win+Space .","title":"Windows Shortcuts"},{"location":"week-1-intro/ce103-week-1-intro/#windows-shortcuts-power-toys","text":"Power Toys Run : Alt+Space Always-on-Top : Win+Ctrl+T Color Picker : Win+Shift+C Screen Ruler : Win+Shift+T Video Conf. Mute : Win+Shift+Q","title":"Windows Shortcuts (Power Toys)"},{"location":"week-1-intro/ce103-week-1-intro/#windows-shortcuts_2","text":"Maximize Window : F11 or Win+UpArrow Open Task View : Win+Tab Display and hide the desktop : Win+D Switch between open apps : Alt+Tab Open the Quick Link menu : Win+X Lock your PC : Win+L","title":"Windows Shortcuts"},{"location":"week-1-intro/ce103-week-1-intro/#introduction-to-the-command-line-interface","text":"Reference Books Bash Notes For Professionals Linux Notes For Professionals PowerShell Notes For Professionals","title":"Introduction to the command line interface"},{"location":"week-1-intro/ce103-week-1-intro/#what-is-the-command-line","text":"The window, which is usually called the command line or command-line interface , is a text-based application for viewing, handling, and manipulating files on your computer. It's much like Windows Explorer or Finder on the Mac, but without the graphical interface. Other names for the command line are: cmd, CLI, prompt, console or terminal While there are many commands you can use with CLI, they all fall into two categories : The commands that handle the processes The commands that handle the files reference","title":"What is the command line?"},{"location":"week-1-intro/ce103-week-1-intro/#why-would-you-use-cli-over-gui","text":"Less Resource It is not a secret that the text-based program needs very little resources of your computer. This means that with CLI you can do similar tasks with minimum resources.","title":"Why Would You Use CLI over GUI?"},{"location":"week-1-intro/ce103-week-1-intro/#why-would-you-use-cli-over-gui_1","text":"High Precision You can use a specific command to target specific destinations with ease. As long as you don\u2019t type the wrong command, it will work like a charm. Once you learn the basics, writing syntax is not as hard as you might think.","title":"Why Would You Use CLI over GUI?"},{"location":"week-1-intro/ce103-week-1-intro/#why-would-you-use-cli-over-gui_2","text":"Repetitive Tasks Friendly GUI has developed well over the years. But, the operating system may not give you all the menus and buttons to perform all tasks. One of the reasons is safety. This leaves you overwhelmed if you have to do repetitive tasks. For example, when you have to handle hundreds of files within a folder, CLI enables you to use a single command to do automate the repetition easily.","title":"Why Would You Use CLI over GUI?"},{"location":"week-1-intro/ce103-week-1-intro/#why-would-you-use-cli-over-gui_3","text":"Powerful Most operating systems today prevent you from messing up the system\u2019s core process. Windows has system protection and MacOS has SIP (System Integrity Protection). You won\u2019t be able to perform certain tasks which are system protected. However, with CLI, you will have full control over your system.","title":"Why Would You Use CLI over GUI?"},{"location":"week-1-intro/ce103-week-1-intro/#open-the-command-line-interface-windows","text":"Go to the Start menu or screen, and enter Command Prompt in the search field. Go to Start menu \u2192 Windows System \u2192 Command Prompt . Go to Start Menu \u2192 All Programs \u2192 Accessories \u2192 Command Prompt . Go to the Start screen, hover your mouse in the lower-left corner of the screen, and click the down arrow that appears (on a touch screen, instead flick up from the bottom of the screen). The Apps page should open. Click on Command Prompt in the Windows System section. Hold the special Windows key on your keyboard and press the \"X\" key. Choose \"Command Prompt\" from the pop-up menu. Hold the Windows key and press the \"R\" key to get a \"Run\" window. Type \"cmd\" in the box, and click the OK key.","title":"Open the command-line interface (Windows)"},{"location":"week-1-intro/ce103-week-1-intro/#open-the-command-line-interface-windows_1","text":"","title":"Open the command-line interface (Windows)"},{"location":"week-1-intro/ce103-week-1-intro/#open-the-command-line-interface-windows_2","text":"","title":"Open the command-line interface (Windows)"},{"location":"week-1-intro/ce103-week-1-intro/#open-the-command-line-interface-windows_3","text":"","title":"Open the command-line interface (Windows)"},{"location":"week-1-intro/ce103-week-1-intro/#open-the-command-line-interface-windows_4","text":"","title":"Open the command-line interface (Windows)"},{"location":"week-1-intro/ce103-week-1-intro/#open-the-command-line-interface-windows_5","text":"","title":"Open the command-line interface (Windows)"},{"location":"week-1-intro/ce103-week-1-intro/#open-the-command-line-interface-linux","text":"It's probably under Applications \u2192 Accessories \u2192 Terminal, or Applications \u2192 System \u2192 Terminal, but that may depend on your system. If it's not there, you can try to Google it. :)","title":"Open the command-line interface (Linux)"},{"location":"week-1-intro/ce103-week-1-intro/#open-the-command-line-interface-linux_1","text":"","title":"Open the command-line interface (Linux)"},{"location":"week-1-intro/ce103-week-1-intro/#open-the-command-line-interface-macos","text":"Go to Applications \u2192 Utilities \u2192 Terminal","title":"Open the command-line interface (MacOS)"},{"location":"week-1-intro/ce103-week-1-intro/#command-basics","text":"","title":"Command Basics"},{"location":"week-1-intro/ce103-week-1-intro/#command-basics-computer-namecurrent-directory-path","text":"> whoami (hit enter) - Result: laptop-rqnns9ig\\ugur.coruh - Computer will print username","title":"Command Basics (Computer Name,Current Directory Path)"},{"location":"week-1-intro/ce103-week-1-intro/#command-basics-computer-namecurrent-directory-path_1","text":"> pwd - Result: /Users/ugur.coruh - Current Working Directory for Linux and OS X","title":"Command Basics (Computer Name,Current Directory Path)"},{"location":"week-1-intro/ce103-week-1-intro/#command-basics-computer-namecurrent-directory-path_2","text":">cd - Result: C:\\Users\\ugur.coruh - Current Working Directory for Windows","title":"Command Basics (Computer Name,Current Directory Path)"},{"location":"week-1-intro/ce103-week-1-intro/#learn-command-details-in-linux-and-os-x","text":">man <command_name> Sample >man pwd - OS X and Linux have a man command,which gives you help on commands Use the space bar to move to the next page, and q to quit looking at the help","title":"Learn Command Details in Linux and OS X"},{"location":"week-1-intro/ce103-week-1-intro/#learn-command-details-in-window","text":"Adding a /? suffix to most commands will print the help page Sample >cd /?","title":"Learn Command Details in Window"},{"location":"week-1-intro/ce103-week-1-intro/#list-files-and-directories-in-linux-and-os-x","text":">ls Applications Desktop Downloads Music ...","title":"List files and directories in Linux and OS X"},{"location":"week-1-intro/ce103-week-1-intro/#list-files-and-directories-in-linux-and-os-x_1","text":">ls -R - will list all the files in the sub-directories as well","title":"List files and directories in Linux and OS X"},{"location":"week-1-intro/ce103-week-1-intro/#list-files-and-directories-in-linux-and-os-x_2","text":">ls -a - will show the hidden files","title":"List files and directories in Linux and OS X"},{"location":"week-1-intro/ce103-week-1-intro/#list-files-and-directories-in-linux-and-os-x_3","text":">ls -al - will list the files and directories with detailed information like the permissions, size,owner, etc.","title":"List files and directories in Linux and OS X"},{"location":"week-1-intro/ce103-week-1-intro/#list-files-and-directories-in-windows","text":">dir Result: Volume in drive C is Windows Volume Serial Number is 8C3C-8F8C Directory of C:\\Users\\ugur.coruh 10/14/2020 09:57 AM <DIR> . 10/14/2020 09:57 AM <DIR> .. 08/15/2020 11:00 PM <DIR> .android 06/28/2020 03:02 AM <DIR> AndroidStudio4.0","title":"List files and directories in Windows"},{"location":"week-1-intro/ce103-week-1-intro/#list-files-and-directories-in-linux-os-x","text":"you should install with brew install tree","title":"List files and directories in Linux, OS X"},{"location":"week-1-intro/ce103-week-1-intro/#list-files-and-directories-in-windows_1","text":"> tree Result: C:\\Users\\ugur.coruh\\Desktop\\Samples>tree Folder PATH listing for volume Windows Volume serial number is 8C3C-8F8C C:. \u251c\u2500\u2500\u2500C \u2502 \u2514\u2500\u2500\u2500HelloWorld \u2502 \u2514\u2500\u2500\u2500.vscode \u251c\u2500\u2500\u2500Cpp \u251c\u2500\u2500\u2500Csharp \u2514\u2500\u2500\u2500Java","title":"List files and directories in Windows"},{"location":"week-1-intro/ce103-week-1-intro/#change-current-directory-in-windows-linux-and-os-x","text":">cd <path> cd Desktop","title":"Change Current Directory in Windows / Linux and OS X"},{"location":"week-1-intro/ce103-week-1-intro/#change-current-directory-in-windows-linux-and-os-x_1","text":"print case-sensitive prefix of targer folder and use tab to complete or find correct folder > cd .. This command moves current working directory to parent directory. You can use cd ..\\..\\.. to go 3 level up.","title":"Change Current Directory in Windows / Linux and OS X"},{"location":"week-1-intro/ce103-week-1-intro/#change-current-directory-in-windows-linux-and-os-x_2","text":"Also you can change relative path such as cd ..\\..\\target\\child go 2 level up and then go to target and child folders. To directly go to folder write full path of file cd C:\\temp\\build\\target\\child","title":"Change Current Directory in Windows / Linux and OS X"},{"location":"week-1-intro/ce103-week-1-intro/#change-current-directory-in-windows-linux-and-os-x_3","text":">cd- (with a hyphen) to move to your previous directory We will use this feature with CMAKE!","title":"Change Current Directory in Windows / Linux and OS X"},{"location":"week-1-intro/ce103-week-1-intro/#create-directory-in-windows-linux-os-x","text":"> mkdir folder_name - To generate a new directory inside another directory, use this Linux basic command mkdir Music/Newfile","title":"Create Directory in Windows, Linux, OS X"},{"location":"week-1-intro/ce103-week-1-intro/#create-directory-in-windows-linux-os-x_1","text":"use the p (parents) option to create a directory in between two existing directories. For example, mkdir -p Music/2020/Newfile will create the new \u201c2020\u201d file.","title":"Create Directory in Windows, Linux, OS X"},{"location":"week-1-intro/ce103-week-1-intro/#create-directory-in-windows-linux-os-x_2","text":"Check folder creation is succeed with list commands Linux,OS X -> ls Windows -> dir or tree > dir - Use cd folder_name from current directory for going to created folder > cd folder_name","title":"Create Directory in Windows, Linux, OS X"},{"location":"week-1-intro/ce103-week-1-intro/#remove-directory-in-windows-powershell-os-x-and-linux","text":"> rm \u2013r folder_path >rmdir -r is used for recursive deletion of folders. However, rmdir only allows you to delete empty directories","title":"Remove Directory in Windows Powershell, OS X and Linux"},{"location":"week-1-intro/ce103-week-1-intro/#remove-directory-in-windows-powershell","text":"> rmdir /S folder_path folder_path, Are you sure <Y/N>? Y - Check deletion with folder listing commands.","title":"Remove Directory in Windows Powershell"},{"location":"week-1-intro/ce103-week-1-intro/#command-basics-delete-file-in-windows","text":">DEL /F untitled.txt* - If you want to add the options like force deletion, you can add it before the file name","title":"Command Basics (Delete File) in Windows"},{"location":"week-1-intro/ce103-week-1-intro/#copy-files-in-linux","text":"Use the cp command to copy files from the current directory to a different directory. For instance, the command cp scenery.jpg /home/username/Pictures would create a copy of scenery.jpg (from your current directory) into the Pictures directory.","title":"Copy Files in Linux"},{"location":"week-1-intro/ce103-week-1-intro/#copy-files-in-windows","text":"cd- (with a hyphen) to move to your previous directoryCopy a file in the current folder >COPY source_file.doc newfile.doc - Copy from a different folder/directory:","title":"Copy Files in Windows"},{"location":"week-1-intro/ce103-week-1-intro/#copy-cmy-worksome-filedoc-dnew-docsnewfiledoc","text":"","title":"&gt;COPY &quot;C:\\my work\\some file.doc&quot; &quot;D:\\New docs\\newfile.doc&quot;\n"},{"location":"week-1-intro/ce103-week-1-intro/#copy-files-in-windows_1","text":"Specify the source only, with a wildcard will copy all the files into the current directory:* >COPY \"C:\\my work\\*.doc\" - Specify the source with a wildcard and the destination as a single file, this is generally only useful with plain text files. >COPY \"C:\\my work\\*.txt\" \"D:\\New docs\\combined.txt\"","title":"Copy Files in Windows"},{"location":"week-1-intro/ce103-week-1-intro/#copy-files-in-windows_2","text":"Quiet copy (no feedback on screen)* COPY source_file.doc newfile.doc >nul - Copy a file, but do not overwrite if the destination file already exists, this technique only works for a single file, no wildcards:","title":"Copy Files in Windows"},{"location":"week-1-intro/ce103-week-1-intro/#echo-ncopy-y-cdemosource_filetxt-cdirdesttxt","text":"","title":"Echo n|COPY /-y c:\\demo\\source_file.txt c:\\dir\\dest.txt\n"},{"location":"week-1-intro/ce103-week-1-intro/#renaming-file-in-windows","text":">REN d:untitled.txt untitled1.txt* - To rename a file within a specific folder, use REN [drive:][path] [source] [target] - If you mention the location, that means the renamed file will be saved in the same folder >REN d:untitled.txt ..\\..\\folder\\untitled1.txt* >REN d:untitled.txt C:\\folder\\untitled1.txt","title":"Renaming File in Windows"},{"location":"week-1-intro/ce103-week-1-intro/#renaming-file-in-linux-and-os-x","text":">mv [OPTIONS] source destination* >mv file1.txt file2.txt* Optional sudo apt install rename","title":"Renaming File in  Linux and OS X"},{"location":"week-1-intro/ce103-week-1-intro/#move-files-in-windows","text":"In the current folder >MOVE oldfile.wp newfile.doc - Full path specified >MOVE g:\\department\\oldfile.wp \"c:\\Files to Convert\\newfile.doc\" - Specify the drive and filename (assumes the current folder on both drives is correct)","title":"Move Files in Windows"},{"location":"week-1-intro/ce103-week-1-intro/#move-aoldfilewp-cnewfiledoc","text":"","title":"&gt;MOVE a:oldfile.wp c:newfile.doc\n"},{"location":"week-1-intro/ce103-week-1-intro/#move-files-in-windows_1","text":"Specify source only (will copy the file to current folder, keeping the same filename) >MOVE g:\\department\\oldfile.wp - Quiet move (no feedback on screen) >MOVE oldfile.wp newfile.doc >nul - Move a file, but do not overwrite if the destination file already exists, this technique only works for a single file, no wildcards - ( /-y is required): >Echo n|MOVE /-y c:\\file1.txt c:\\dir\\file1.txt","title":"Move Files in Windows"},{"location":"week-1-intro/ce103-week-1-intro/#move-files-in-linux-and-os-x","text":"Check mv command For example: mv file.txt /home/username/Documents","title":"Move Files in Linux and OS X"},{"location":"week-1-intro/ce103-week-1-intro/#command-basics-renaming-a-volume-disk-in-windows","text":"D:\\ > LABEL d:MyData","title":"Command Basics (Renaming a Volume Disk) in Windows"},{"location":"week-1-intro/ce103-week-1-intro/#measure-processing-time-in-windows-powershell","text":"> Measure-Command {echo hi} Days : 0 Hours : 0 Minutes : 0 Seconds : 0 Milliseconds : 0 Ticks : 1318 TotalDays : 1.52546296296296E-09 TotalHours : 3.66111111111111E-08 TotalMinutes : 2.19666666666667E-06 TotalSeconds : 0.0001318 TotalMilliseconds : 0.1318","title":"Measure Processing Time in Windows Powershell"},{"location":"week-1-intro/ce103-week-1-intro/#measure-processing-time-in-windows-command-prompt","text":"","title":"Measure Processing Time in Windows Command Prompt"},{"location":"week-1-intro/ce103-week-1-intro/#powershell-command-measure-command-echo-hi","text":"","title":"&gt; powershell -Command &quot;Measure-Command {echo hi}&quot;\n"},{"location":"week-1-intro/ce103-week-1-intro/#command-basics-measure-processing-time","text":"timecmd.bat","title":"Command Basics (Measure Processing Time)"},{"location":"week-1-intro/ce103-week-1-intro/#echo-off-setlocal-set-starttime-runs-your-command-cmd-c-set-endtime-set-optionstokens1-4-delims-for-f-options-a-in-start-do-set-start_haset-a-start_m100b-100set-a-start_s100c-100set-a-start_ms100d-100-for-f-options-a-in-end-do-set-end_haset-a-end_m100b-100set-a-end_s100c-100set-a-end_ms100d-100-set-a-hoursend_h-start_h-set-a-minsend_m-start_m-set-a-secsend_s-start_s-set-a-msend_ms-start_ms-if-ms-lss-0-set-a-secs-secs-1-set-a-ms-100ms-if-secs-lss-0-set-a-mins-mins-1-set-a-secs-60secs-if-mins-lss-0-set-a-hours-hours-1-set-a-mins-60mins-if-hours-lss-0-set-a-hours-24hours-if-1ms-lss-100-set-ms0ms-mission-accomplished-set-a-totalsecs-hours3600-mins60-secs-echo-command-took-hoursminssecsms-totalsecsmss-total","text":"","title":"@echo off\n@setlocal\nset start=%time%\n:: Runs your command\ncmd /c %*\nset end=%time%\nset options=&quot;tokens=1-4 delims=:.,&quot;\nfor /f %options% %%a in (&quot;%start%&quot;) do set start_h=%%a&amp;set /a start_m=100%%b %% 100&amp;set /a start_s=100%%c %% 100&amp;set /a start_ms=100%%d %% 100\nfor /f %options% %%a in (&quot;%end%&quot;) do set end_h=%%a&amp;set /a end_m=100%%b %% 100&amp;set /a end_s=100%%c %% 100&amp;set /a end_ms=100%%d %% 100\nset /a hours=%end_h%-%start_h%\nset /a mins=%end_m%-%start_m%\nset /a secs=%end_s%-%start_s%\nset /a ms=%end_ms%-%start_ms%\nif %ms% lss 0 set /a secs = %secs% - 1 &amp; set /a ms = 100%ms%\nif %secs% lss 0 set /a mins = %mins% - 1 &amp; set /a secs = 60%secs%\nif %mins% lss 0 set /a hours = %hours% - 1 &amp; set /a mins = 60%mins%\nif %hours% lss 0 set /a hours = 24%hours%\nif 1%ms% lss 100 set ms=0%ms%\n:: Mission accomplished\nset /a totalsecs = %hours%*3600 + %mins%*60 + %secs%\necho command took %hours%:%mins%:%secs%.%ms% (%totalsecs%.%ms%s total)\n"},{"location":"week-1-intro/ce103-week-1-intro/#command-basics-measure-processing-time_1","text":"Usage If you put timecmd.bat in a directory in your path, you can call it from anywhere like this: >timecmd [your command] - E.g. C:\\>timecmd pause Press any key to continue . . . command took 0:0:1.18","title":"Command Basics (Measure Processing Time)"},{"location":"week-1-intro/ce103-week-1-intro/#command-basics-measure-processing-time_2","text":"If you want to do output redirection, you can quote the command like this: timecmd \"dir c:\\windows /s > nul\" This should handle commands that run from before- to after-midnight, but the output will be wrong if your command runs for 24 hours or more.","title":"Command Basics (Measure Processing Time)"},{"location":"week-1-intro/ce103-week-1-intro/#useful-linux-commands","text":"Use Online Sandbox to Try Commands Yourself https://ubunlog.com/en/gnulinux-online-terminals-browser/ https://bellard.org/jslinux/vm.html?url=alpine-x86.cfg&mem=192","title":"Useful Linux Commands"},{"location":"week-1-intro/ce103-week-1-intro/#cat-command","text":"cat (short for concatenate) is one of the most frequently used commands in Linux. It is used to list the contents of a file on the standard output (sdout). To run this command, type cat followed by the file\u2019s name and its extension. For instance: cat file.txt . Here are other ways to use the cat command: cat > filename creates a new file cat filename1 filename2>filename3 joins two files (1 and 2) and stores the output of them in a new file (3) to convert a file to upper or lower case use, cat filename | tr a-z A-Z >output.txt","title":"cat command"},{"location":"week-1-intro/ce103-week-1-intro/#touch-command","text":"The touch command allows you to create a blank new file through the Linux command line. As an example, enter touch /home/username Documents/Web.html to create an HTML file entitled Web under the Documents directory.","title":"touch command"},{"location":"week-1-intro/ce103-week-1-intro/#locate-command","text":"You can use this command to locate a file, just like the search command in Windows. What\u2019s more, using the -i argument along with this command will make it case-insensitive, so you can search for a file even if you don\u2019t remember its exact name. To search for a file that contains two or more words, use an asterisk ( * ). For example, locate -i school*note* command will search for any file that contains the word \u201c school \u201d and \u201c note \u201d, whether it is uppercase or lowercase.","title":"locate command"},{"location":"week-1-intro/ce103-week-1-intro/#find-command","text":"Similar to the locate command, using find also searches for files and directories. The difference is, you use the find command to locate files within a given directory. As an example, find /home/ -name notes.txt command will search for a file called notes.txt within the home directory and its subdirectories. Other variations when using the find are: To find files in the current directory use, find -name notes.txt To look for directories use, / -type d -name notes. txt","title":"find command"},{"location":"week-1-intro/ce103-week-1-intro/#grep-command","text":"Another basic Linux command that is undoubtedly helpful for everyday use is grep . It lets you search through all the text in a given file. To illustrate, grep blue notepad.txt will search for the word blue in the notepad file. Lines that contain the searched word will be displayed fully.","title":"grep command"},{"location":"week-1-intro/ce103-week-1-intro/#sudo-command","text":"Short for \" SuperUser Do \", this command enables you to perform tasks that require administrative or root permissions. However, it is not advisable to use this command for daily use because it might be easy for an error to occur if you did something wrong.","title":"sudo command"},{"location":"week-1-intro/ce103-week-1-intro/#df-command","text":"Use df command to get a report on the system\u2019s disk space usage, shown in percentage and KBs. If you want to see the report in megabytes, type df -m .","title":"df command"},{"location":"week-1-intro/ce103-week-1-intro/#du-command","text":"If you want to check how much space a file or a directory takes, the du (Disk Usage) command is the answer. However, the disk usage summary will show disk block numbers instead of the usual size format. If you want to see it in bytes, kilobytes, and megabytes, add the -h argument to the command line.","title":"du command"},{"location":"week-1-intro/ce103-week-1-intro/#head-command","text":"\u2022 The head command is used to view the first lines of any text file. By default, it will show the first ten lines, but you can change this number to your liking. For example, if you only want to show the first five lines, type head -n 5 filename.ext .","title":"head command"},{"location":"week-1-intro/ce103-week-1-intro/#tail-command","text":"This one has a similar function to the head command, but instead of showing the first lines, the tail command will display the last ten lines of a text file. For example, tail -n filename.ext.","title":"tail command"},{"location":"week-1-intro/ce103-week-1-intro/#diff-command","text":"Short for difference, the diff command compares the contents of two files line by line. After analyzing the files, it will output the lines that do not match. Programmers often use this command when they need to make program alterations instead of rewriting the entire source code. The simplest form of this command is diff file1.ext file2.ext","title":"diff command"},{"location":"week-1-intro/ce103-week-1-intro/#tar-command","text":"The tar command is the most used command to archive multiple files into a tarball \u2014 a common Linux file format that is similar to zip format, with compression being optional. https://www.linuxtechi.com/17-tar-command-examples-in-linux/","title":"tar command"},{"location":"week-1-intro/ce103-week-1-intro/#chmod-command","text":"chmod is another Linux command, used to change the read, write, and execute permissions of files and directories. https://www.computerhope.com/unix/uchmod.htm","title":"chmod command"},{"location":"week-1-intro/ce103-week-1-intro/#chown-command","text":"In Linux, all files are owned by a specific user. The chown command enables you to change or transfer the ownership of a file to the specified username. For instance, chown linuxuser2 file.ext will make linuxuser2 as the owner of the file.ext .","title":"chown command"},{"location":"week-1-intro/ce103-week-1-intro/#jobs-command","text":"jobs command will display all current jobs along with their statuses. A job is basically a process that is started by the shell. The jobs command displays the status of jobs started in the current terminal window. Jobs are numbered starting from 1 for each session. The job ID numbers are used by some programs instead of PIDs (for example, by fg and bg commands).","title":"jobs command"},{"location":"week-1-intro/ce103-week-1-intro/#kill-command","text":"If you have an unresponsive program, you can terminate it manually by using the kill command. It will send a certain signal to the misbehaving app and instructs the app to terminate itself. There is a total of sixty-four-signals that you can use, but people usually only use two signals:","title":"kill command"},{"location":"week-1-intro/ce103-week-1-intro/#kill-command_1","text":"SIGTERM (15) : requests a program to stop running and gives it some time to save all of its progress. If you don\u2019t specify the signal when entering the kill command, this signal will be used.","title":"kill command"},{"location":"week-1-intro/ce103-week-1-intro/#kill-command_2","text":"SIGKILL (9) : forces programs to stop immediately. Unsaved progress will be lost. Besides knowing the signals, you also need to know the process identification number (PID) of the program you want to kill . If you don\u2019t know the PID, simply run the command ps ux . After knowing what signal you want to use and the PID of the program, enter the following syntax: kill [signal option] PID . https://linoxide.com/linux-how-to/linux-signals-part-1/","title":"kill command"},{"location":"week-1-intro/ce103-week-1-intro/#ping-command","text":"Use the ping command to check your connectivity status to a server. For example, by simply entering ping google.com , the command will check whether you\u2019re able to connect to Google and also measure the response time.","title":"ping command"},{"location":"week-1-intro/ce103-week-1-intro/#wget-command","text":"The Linux command line is super useful \u2014 you can even download files from the internet with the help of the wget command. To do so, simply type wget followed by the download link.","title":"wget command"},{"location":"week-1-intro/ce103-week-1-intro/#uname-command","text":"The uname command, short for Unix Name, will print detailed information about your Linux system like the machine name, operating system, kernel, and so on.","title":"uname command"},{"location":"week-1-intro/ce103-week-1-intro/#top-command","text":"As a terminal equivalent to Task Manager in Windows, the top command will display a list of running processes and how much CPU each process uses. It\u2019s very useful to monitor system resource usage, especially knowing which process needs to be terminated because it consumes too many resources.","title":"top command"},{"location":"week-1-intro/ce103-week-1-intro/#history-command","text":"When you\u2019ve been using Linux for a certain period of time, you\u2019ll quickly notice that you can run hundreds of commands every day. As such, running history command is particularly useful if you want to review the commands you\u2019ve entered before.","title":"history command"},{"location":"week-1-intro/ce103-week-1-intro/#echo-command","text":"This command is used to move some data into a file. For example, if you want to add the text, \u201c Hello, my name is John \u201d into a file called name.txt , you would type echo Hello, my name is John >> name.txt","title":"echo command"},{"location":"week-1-intro/ce103-week-1-intro/#zip-unzip-command","text":"Use the zip command to compress your files into a zip archive, and use the unzip command to extract the zipped files from a zip archive.","title":"zip, unzip command"},{"location":"week-1-intro/ce103-week-1-intro/#hostname-command","text":"If you want to know the name of your host/network simply type hostname . Adding a -I to the end will display the IP address of your network. Hostnamectl https://www.cyberciti.biz/faq/find-my-linux-machine-name/","title":"hostname command"},{"location":"week-1-intro/ce103-week-1-intro/#host-command","text":"host command is a simple utility for performing DNS lookups. It is normally used to convert names to IP addresses and vice versa. When no arguments or options are given, host command displays a short summary of its command line arguments and options. The syntax is as follows: host example.com host -t TYPE example.com host -t a example.com https://www.cyberciti.biz/faq/unix-linux-dns-lookup-command/","title":"host command"},{"location":"week-1-intro/ce103-week-1-intro/#host-command_1","text":"Installation of host command if not found root@user:~# apt-get update root@user:~# apt-get install dnsutils \u2013y https://www.crybit.com/install-dig-nslookup-host-commands/","title":"host command"},{"location":"week-1-intro/ce103-week-1-intro/#useradd-userdel-command","text":"Since Linux is a multi-user system, this means more than one person can interact with the same system at the same time. useradd is used to create a new user, while passwd is adding a password to that user\u2019s account. To add a new person named John type, useradd John and then to add his password type, passwd 123456789 . To remove a user is very similar to adding a new user. To delete the users account type, userdel UserName","title":"useradd, userdel command"},{"location":"week-1-intro/ce103-week-1-intro/#tips-and-tricks-for-linux-cli","text":"Try the TAB button to autofill what you are typing For example, if you need to type Documents, begin to type a command (let\u2019s go with cd Docu then hit the TAB key) and the terminal will fill in the rest, showing you cd Documents Ctrl+C and Ctrl+Z are used to stop any command that is currently working. Ctrl+C will stop and terminate the command, while Ctrl+Z will simply pause the command.","title":"Tips and Tricks for Linux CLI"},{"location":"week-1-intro/ce103-week-1-intro/#tips-and-tricks-for-linux-cli_1","text":"If you accidental freeze your terminal by using Ctrl+S , simply undo this with the unfreeze Ctrl+Q . Ctrl+A moves you to the beginning of the line while Ctrl+E moves you to the end You can run multiple commands in one single command by using the ; to separate them. For example Command1; Command2; Command3 Or use && if you only want the next command to run when the first one is successful.","title":"Tips and Tricks for Linux CLI"},{"location":"week-1-intro/ce103-week-1-intro/#useful-windows-commands","text":"","title":"Useful Windows Commands"},{"location":"week-1-intro/ce103-week-1-intro/#assoc-fix-file-associations","text":"One of the most powerful tools in the CMD command library is the ASSOC command. Your computer associates certain file extensions with certain programs. This is how your computer knows to open Adobe when you double click a PDF file, or Microsoft Word when you double click a DOC file. You can view all the file associations your computer knows about by typing ASSOC in the command window. You\u2019ll see the file extension and the program it\u2019s associated with. You can set the association by typing something like assoc .doc=Word.Document.8 .","title":"ASSOC: Fix File Associations"},{"location":"week-1-intro/ce103-week-1-intro/#fc-file-compare","text":"Sometimes when files are changed over time, it\u2019s hard to remember what the differences were between versions. You may not know that a CMD command offers the ability to compare files and see all differences, but it\u2019s true. The FC command performs either an ascii or a binary file comparison and will list all of the differences that it finds. Fc /a File1.txt File2.txt will compare two ascii files. Fc /b Picture1.jpg Picture2.jpg will do a binary compare on two images.","title":"FC: File Compare"},{"location":"week-1-intro/ce103-week-1-intro/#ipconfig","text":"Network troubleshooting is never simple, but one command that makes it much easier is IPCONFIG . Using this command in the CMD command prompt returns detailed information about your current network adapter connection including: Current IP Address Subnet Mask Default Gateway IP Current domain This information can help you troubleshoot router issues and other connection issues you could be having with your network adapter.","title":"IPCONFIG"},{"location":"week-1-intro/ce103-week-1-intro/#ipconfig_1","text":"Examples: > ipconfig ... Show information > ipconfig /all ... Show detailed information > ipconfig /renew ... renew all adapters > ipconfig /renew EL* ... renew any connection that has its name starting with EL > ipconfig /release *Con* ... release all matching connections, eg.","title":"IPCONFIG"},{"location":"week-1-intro/ce103-week-1-intro/#ipconfig_2","text":"\"Wired Ethernet Connection 1\" or \"Wired Ethernet Connection 2\" > ipconfig /all compartments ... Show information about all compartments > ipconfig /all compartments /all ... Show detailed information about all compartments /? Display this help message /all Display full configuration information. /release Release the IPv4 address for the specified adapter. /release6 Release the IPv6 address for the specified adapter.","title":"IPCONFIG"},{"location":"week-1-intro/ce103-week-1-intro/#ipconfig_3","text":"/renew Renew the IPv4 address for the specified adapter. /renew6 Renew the IPv6 address for the specified adapter. /flushdns Purges the DNS Resolver cache. /registerdns Refreshes all DHCP leases and re-registers DNS names /displaydns Display the contents of the DNS Resolver Cache. /showclassid Displays all the dhcp class IDs allowed for adapter. /setclassid Modifies the dhcp class id. /showclassid6 Displays all the IPv6 DHCP class IDs allowed for adapter. /setclassid6 Modifies the IPv6 DHCP class id.","title":"IPCONFIG"},{"location":"week-1-intro/ce103-week-1-intro/#netstat-network-statistics","text":"Concerned that you could have malware running on your computer that\u2019s connecting to internet locations without you knowing about it? If you run a NETSTAT command in the command prompt, you can get a list of all active TCP connections from your computer.","title":"NETSTAT: Network Statistics"},{"location":"week-1-intro/ce103-week-1-intro/#ping-send-test-packets","text":"An IT Analyst\u2019s best friend is the PING command. Running this command sends test packets over the network to the target system. You can use the PING command to test whether your computer can access another computer, a server, or even a website. It can help with revealing network disconnections. It also provides transit time for the packets in milliseconds, so it also reveals a bad network connection as well.","title":"PING: Send Test Packets"},{"location":"week-1-intro/ce103-week-1-intro/#ping-send-test-packets_1","text":"https://ipstack.com/ ipstack offers one of the leading","title":"PING: Send Test Packets"},{"location":"week-1-intro/ce103-week-1-intro/#tracert-trace-route-ip-to-geolocation","text":"APIs and global IP database services worldwide.","title":"TRACERT: Trace Route IP to geolocation"},{"location":"week-1-intro/ce103-week-1-intro/#powercfg-power-configuration","text":"Are you frustrated with how quickly your laptop seems to run out of power? It could be that your power settings are configured as efficiently as possible. There\u2019s a windows CMD command called POWERCFG (power configuration) that can help.","title":"POWERCFG: Power Configuration"},{"location":"week-1-intro/ce103-week-1-intro/#powercfg-power-configuration_1","text":"Run the command prompt as an administrator and type powercfg \u2013 energy to get a full power efficiency report. The process can take up to about a minute, but when it\u2019s done, you\u2019ll see whether there are any warnings or errors that might help you improve the power efficiency of your system.","title":"POWERCFG: Power Configuration"},{"location":"week-1-intro/ce103-week-1-intro/#shutdown-turn-off-computer","text":"The SHUTDOWN command is a pretty versatile command that lets you shutdown the computer but control the behavior of that shutdown. It\u2019s commonly used as a scheduled task or part of an IT batch job after patches have been applied to a computer system. Typing shutdown /i from the command prompt will initiate a shutdown, but it\u2019ll upon a GUI to give the user an option on whether to restart or do a full shutdown. If you don\u2019t want to have any GUI pop up, you can just issue a shutdown /s command. There is a long list of other parameters you can use to do a log off, hibernate, restart, and more. Just type shutdown without any arguments to see them all.","title":"SHUTDOWN: Turn Off Computer"},{"location":"week-1-intro/ce103-week-1-intro/#systeminfo-system-information","text":"If you need to know what brand of network card you have, processor details, or the exact version of your Windows OS, the SYSTEMINFO command can help. This command polls your system and pulls the most important information about your system. It lists the information in a clean format that\u2019s easy to read.","title":"SYSTEMINFO: System Information"},{"location":"week-1-intro/ce103-week-1-intro/#sfc-system-file-checker","text":"If you\u2019re ever concerned that a virus or some other software might have corrupted your core system files, there\u2019s a Windows command that can scan those files and ensure their integrity. You need to launch CMD as administrator (right click and choose Run as Administrator ). Typing SFC /SCANNOW will check the integrity of all protected system files. If a problem is found, the files will be repaired with backed-up system files.","title":"SFC: System File Checker"},{"location":"week-1-intro/ce103-week-1-intro/#sfc-system-file-checker_1","text":"The SFC command also lets you: /VERIFYONLY : Check the integrity but don\u2019t repair the files. /SCANFILE : Scan the integrity of specific files and fix if corrupted. /VERIFYFILE : Verify the integrity of specific files but don\u2019t repair them. /OFFBOOTDIR : Use this to do repairs on an offline boot directory. /OFFWINDIR : Use this to do repairs on an offline Windows directory. /OFFLOGFILE : Specify a path to save a log file with scan results. The scan can take up to 10 or 15 minutes, so give it time.","title":"SFC: System File Checker"},{"location":"week-1-intro/ce103-week-1-intro/#net-use-map-drives","text":"If you want to map a new drive, you could always open File Explorer, right click on This PC, and go through the Map Network Drive wizard. However, using the NET USE command, you can do the same thing with one command string. For example, if you have a share folder on a computer on your network called \\\\OTHER-COMPUTER\\SHARE\\ , you can map this as your own Z: drive by typing the command: NET USE Z: \u201c\\\\OTHER-COMPUTER\\SHARE\u201d /persistent:yes The persistent switch tells your computer that you want this drive remapped every time you log back into your computer.","title":"NET USE: Map drives"},{"location":"week-1-intro/ce103-week-1-intro/#chkdsk-check-disk","text":"While the SFC command only checks the integrity of core system files, you can use the CHKDSK command to scan an entire drive. The command to check the C: drive and repair any problems, launch the command window as an administrator and type CHKDSK /f C: . This command checks for things like: File fragmentation Disk errors Bad sectors The command can fix any disk errors (if possible). When the command is finished, you\u2019ll see a status of the scan and what actions were taken.","title":"CHKDSK: Check Disk"},{"location":"week-1-intro/ce103-week-1-intro/#schtasks-schedule-tasks","text":"Windows comes with a wizard for creating scheduled tasks. For example, maybe you have a BAT file stored on C:\\temp that you want to run every day at noon. You\u2019d have to click through the Scheduled Task wizard to configure this. Or you can type a single SCHTASKS command to set it up. SCHTASKS /Create /SC HOURLY /MO 12 /TR Example /TN c:\\temp\\File1.bat The scheduled switch accepts arguments like minute, hourly, daily, and monthly. Then you specify the frequency with the /MO command. If you typed the command correctly, you\u2019ll see the response, SUCCESS: The scheduled task \u201cExample\u201d has successfully been created .","title":"SCHTASKS: Schedule Tasks"},{"location":"week-1-intro/ce103-week-1-intro/#attrib-change-file-attributes","text":"In Windows, you can change file attributes by right clicking on a file and finding the right property to change. However, instead of hunting around for the file attribute, you can use the ATTRIB command to set the file attributes. For example, if you type: ATTRIB +R +H C:\\temp\\File1.bat , it\u2019ll set File1.bat as a hidden, read-only file. There is no response when it\u2019s successful, so unless you see an error message, the command worked.","title":"ATTRIB: Change File Attributes"},{"location":"week-1-intro/ce103-week-1-intro/#other-windows-cmd-commands","text":"BITSADMIN : Initiate upload or download jobs over the network or internet and monitor the current state of those file transfers. COLOR : Change the background color of the command prompt window. COMP : Compare the contents of any two files to see the differences. FIND/FINDSTR : Search for strings inside of any ASCII files. PROMPT : Change the command prompt from C:> to something else. TITLE : Change the title of the command prompt window. REGEDIT : Edit keys in the Windows registry (use with caution). ROBOCOPY : A powerful file copy utility built right into Windows.","title":"Other Windows CMD Commands"},{"location":"week-1-intro/ce103-week-1-intro/#references","text":"GitHub - kamranahmedse/developer-roadmap: Roadmap to becoming a web developer in 2021 GitHub - jwasham/coding-interview-university: A complete computer science study plan to become a software engineer. GitHub - sindresorhus/awesome: \ud83d\ude0e Awesome lists about all kinds of interesting topics","title":"References"},{"location":"week-1-intro/ce103-week-1-intro/#references_1","text":"https://www.hostinger.com/tutorials/what-is-cli https://www.hostinger.com/tutorials/linux-commands https://tutorial.djangogirls.org/en/intro_to_command_line/ https://stackoverflow.com/questions/673523/how-do-i-measure-execution-time-of-a-command-on-the-windows-command-line","title":"References"},{"location":"week-1-intro/ce103-week-1-intro/#references_2","text":"https://helpdeskgeek.com/help-desk/21-cmd-commands-all-windows-users-should-know/ Introduction to CMake by Example | derekmolloy.ie CMake - Cross Platform Make Windows commands | Microsoft Learn","title":"References"},{"location":"week-10-java-II/ce103-week-10-java-II/","text":"CE103 Algorithms and Programming I \u00b6 Week-10 (Java Functional Console Programming-II) \u00b6 Fall Semester, 2021-2022 \u00b6 Download DOC , SLIDE , PPTX Java Functional Console Programming-II \u00b6 a. Java Exception Handling i. Java Exceptions ii. Java Exception Handling iii. Java try..catch iv. Java throw and throws v. Java catch Multiple Exceptions vi. Java try-with-resources vii. Java Annotations viii. Java Annotation Types ix. Java Logging x. Java Assertions b. Java List i. Java Collection Framework ii. Java Collection Interface iii. Java List Interface iv. Java ArrayList v. Java Vector vi. Java Stack c. Java Queue i. Java Queue Interface ii. Java PriorityQueue Interface iii. Java Deque Interface iv. Java LinkedList v. Java ArrayDeque vi. Java BlockingQueue Interface vii. Java ArrayBlockingQueue viii. Java LinkedBlocking Queue d. Java Map i. Java Map Interface ii. Java HashMap iii. Java LinkedHashMap iv. Java WeakHashMap v. Java EnumMap vi. Java SortedMap Interface vii. Java NavigableMap Interface viii. Java TreeMap ix. Java ConcurrentMap Interface x. Java ConcurrentHashMap e. Java Set i. Java Set Interface ii. Java HashSet iii. Java EnumSet iv. Java LinkedHashSet v. Java SortedSet Interface vi. Java NavigableSet Interface vii. Java TreeSet viii. Java Algorithms ix. Java Iterator Java ListIterator Out of Scope \u00b6 a. Java OOP-I i. Java Class and Objects ii. Java Methods iii. Java Constructor iv. Java Strings v. Java Access Modifiers vi. Java this keyword vii. Java final keyword viii. Java recursion ix. Java instanceof operator b. Java OOP-II i. Java Inheritance ii. Java Method Overriding iii. Java super keyword iv. Abstract Class & Method v. Java Interfaces vi. Java Polymorphism vii. Java Encapsulation c. Java OOP-III i. Nested & Inner Class ii. Java Static Class iii. Java Anonymous Class iv. Java Singleton v. Java enum class vi. Java enum constructor vii. Java enum string Java reflection","title":"Week-10 (Java Console Programming-II)"},{"location":"week-10-java-II/ce103-week-10-java-II/#ce103-algorithms-and-programming-i","text":"","title":"CE103 Algorithms and Programming I"},{"location":"week-10-java-II/ce103-week-10-java-II/#week-10-java-functional-console-programming-ii","text":"","title":"Week-10 (Java Functional Console Programming-II)"},{"location":"week-10-java-II/ce103-week-10-java-II/#fall-semester-2021-2022","text":"Download DOC , SLIDE , PPTX","title":"Fall Semester, 2021-2022"},{"location":"week-10-java-II/ce103-week-10-java-II/#java-functional-console-programming-ii","text":"a. Java Exception Handling i. Java Exceptions ii. Java Exception Handling iii. Java try..catch iv. Java throw and throws v. Java catch Multiple Exceptions vi. Java try-with-resources vii. Java Annotations viii. Java Annotation Types ix. Java Logging x. Java Assertions b. Java List i. Java Collection Framework ii. Java Collection Interface iii. Java List Interface iv. Java ArrayList v. Java Vector vi. Java Stack c. Java Queue i. Java Queue Interface ii. Java PriorityQueue Interface iii. Java Deque Interface iv. Java LinkedList v. Java ArrayDeque vi. Java BlockingQueue Interface vii. Java ArrayBlockingQueue viii. Java LinkedBlocking Queue d. Java Map i. Java Map Interface ii. Java HashMap iii. Java LinkedHashMap iv. Java WeakHashMap v. Java EnumMap vi. Java SortedMap Interface vii. Java NavigableMap Interface viii. Java TreeMap ix. Java ConcurrentMap Interface x. Java ConcurrentHashMap e. Java Set i. Java Set Interface ii. Java HashSet iii. Java EnumSet iv. Java LinkedHashSet v. Java SortedSet Interface vi. Java NavigableSet Interface vii. Java TreeSet viii. Java Algorithms ix. Java Iterator Java ListIterator","title":"Java Functional Console Programming-II"},{"location":"week-10-java-II/ce103-week-10-java-II/#out-of-scope","text":"a. Java OOP-I i. Java Class and Objects ii. Java Methods iii. Java Constructor iv. Java Strings v. Java Access Modifiers vi. Java this keyword vii. Java final keyword viii. Java recursion ix. Java instanceof operator b. Java OOP-II i. Java Inheritance ii. Java Method Overriding iii. Java super keyword iv. Abstract Class & Method v. Java Interfaces vi. Java Polymorphism vii. Java Encapsulation c. Java OOP-III i. Nested & Inner Class ii. Java Static Class iii. Java Anonymous Class iv. Java Singleton v. Java enum class vi. Java enum constructor vii. Java enum string Java reflection","title":"Out of Scope"},{"location":"week-11-java-III/ce103-week-11-java-III/","text":"CE103 Algorithms and Programming I \u00b6 Week-11 (Java Functional Console Programming-III) \u00b6 Fall Semester, 2021-2022 \u00b6 Download DOC , SLIDE , PPTX Java Functional Console Programming-III \u00b6 i. Java I/O Streams i. Java I/O Streams ii. Java InputStream iii. Java OutputStream iv. Java FileInputStream v. Java FileOutputStream vi. Java ByteArrayInputStream vii. Java ByteArrayOutputStream viii. Java ObjectInputStream ix. Java ObjectOutputStream x. Java BufferedInputStream xi. Java BufferedOutputStream xii. Java PrintStream j. Java Reader/Writer i. Java Reader ii. Java Writer iii. Java InputStreamReader iv. Java OutputStreamWriter v. Java FileReader vi. Java FileWriter vii. Java BufferedReader viii. Java BufferedWriter ix. Java StringReader x. Java StringWriter xi. Java PrintWriter k. Additional Topics i. Java Scanner Class ii. Java Type Casting iii. Java autoboxing and unboxing iv. Java Lambda Expression v. Java Generics vi. Java File Class vii. Java Wrapper Class viii. Java Command Line Arguments ix. JNLP (Java Network Launch Protocol) JNI Sample JNI/C++ HelloWorld \u00b7 GitHub Set up JNI development in Gradle project | IntelliJ IDEA","title":"Week-11 (Java Console Programming-III)"},{"location":"week-11-java-III/ce103-week-11-java-III/#ce103-algorithms-and-programming-i","text":"","title":"CE103 Algorithms and Programming I"},{"location":"week-11-java-III/ce103-week-11-java-III/#week-11-java-functional-console-programming-iii","text":"","title":"Week-11 (Java Functional Console Programming-III)"},{"location":"week-11-java-III/ce103-week-11-java-III/#fall-semester-2021-2022","text":"Download DOC , SLIDE , PPTX","title":"Fall Semester, 2021-2022"},{"location":"week-11-java-III/ce103-week-11-java-III/#java-functional-console-programming-iii","text":"i. Java I/O Streams i. Java I/O Streams ii. Java InputStream iii. Java OutputStream iv. Java FileInputStream v. Java FileOutputStream vi. Java ByteArrayInputStream vii. Java ByteArrayOutputStream viii. Java ObjectInputStream ix. Java ObjectOutputStream x. Java BufferedInputStream xi. Java BufferedOutputStream xii. Java PrintStream j. Java Reader/Writer i. Java Reader ii. Java Writer iii. Java InputStreamReader iv. Java OutputStreamWriter v. Java FileReader vi. Java FileWriter vii. Java BufferedReader viii. Java BufferedWriter ix. Java StringReader x. Java StringWriter xi. Java PrintWriter k. Additional Topics i. Java Scanner Class ii. Java Type Casting iii. Java autoboxing and unboxing iv. Java Lambda Expression v. Java Generics vi. Java File Class vii. Java Wrapper Class viii. Java Command Line Arguments ix. JNLP (Java Network Launch Protocol) JNI Sample JNI/C++ HelloWorld \u00b7 GitHub Set up JNI development in Gradle project | IntelliJ IDEA","title":"Java Functional Console Programming-III"},{"location":"week-12-c-cpp-gui/ce103-week-12-c-cpp-gui/","text":"CE103 Algorithms and Programming I \u00b6 Week-12 (C/Cpp GUI Programming) \u00b6 Fall Semester, 2021-2022 \u00b6 Download DOC , SLIDE , PPTX C/Cpp GUI Programming \u00b6 The Microsoft Foundation Class MFC Tutorial Visual C++ / MFC Calculator 3 - YouTube MFC C++ : My videos source code download available now to members - YouTube The Windows GUI interface programming using Microsoft Foundation Classes (MFC) with Visual C++ and .Net hands-on approach tutorials Module 1: Using Visual C++ 6.0, .Net and Windows MFC Graphic User Interface (GUI) programming hands-on tutorial-Module1 GTK 4 https://www.msys2.org/ https://www.msys2.org/ Programming with gtkmm 4 Build and run GTK 4 applications with Visual Studio https://www.gtk.org/ The Meson Build system The GTK Project - A free and open-source cross-platform widget toolkit // Include gtk #include <gtk/gtk.h> static void on_activate ( GtkApplication * app ) { // Create a new window GtkWidget * window = gtk_application_window_new ( app ); // Create a new button GtkWidget * button = gtk_button_new_with_label ( \"Hello, World!\" ); // When the button is clicked, close the window passed as an argument g_signal_connect_swapped ( button , \"clicked\" , G_CALLBACK ( gtk_window_close ), window ); gtk_window_set_child ( GTK_WINDOW ( window ), button ); gtk_window_present ( GTK_WINDOW ( window )); } int main ( int argc , char * argv []) { // Create a new application GtkApplication * app = gtk_application_new ( \"com.example.GtkApplication\" , G_APPLICATION_FLAGS_NONE ); g_signal_connect ( app , \"activate\" , G_CALLBACK ( on_activate ), NULL ); return g_application_run ( G_APPLICATION ( app ), argc , argv ); } eBooks by Tags | RIP Tutorial","title":"Week-12 (C/C++ GUI Programming)"},{"location":"week-12-c-cpp-gui/ce103-week-12-c-cpp-gui/#ce103-algorithms-and-programming-i","text":"","title":"CE103 Algorithms and Programming I"},{"location":"week-12-c-cpp-gui/ce103-week-12-c-cpp-gui/#week-12-ccpp-gui-programming","text":"","title":"Week-12 (C/Cpp GUI Programming)"},{"location":"week-12-c-cpp-gui/ce103-week-12-c-cpp-gui/#fall-semester-2021-2022","text":"Download DOC , SLIDE , PPTX","title":"Fall Semester, 2021-2022"},{"location":"week-12-c-cpp-gui/ce103-week-12-c-cpp-gui/#ccpp-gui-programming","text":"The Microsoft Foundation Class MFC Tutorial Visual C++ / MFC Calculator 3 - YouTube MFC C++ : My videos source code download available now to members - YouTube The Windows GUI interface programming using Microsoft Foundation Classes (MFC) with Visual C++ and .Net hands-on approach tutorials Module 1: Using Visual C++ 6.0, .Net and Windows MFC Graphic User Interface (GUI) programming hands-on tutorial-Module1 GTK 4 https://www.msys2.org/ https://www.msys2.org/ Programming with gtkmm 4 Build and run GTK 4 applications with Visual Studio https://www.gtk.org/ The Meson Build system The GTK Project - A free and open-source cross-platform widget toolkit // Include gtk #include <gtk/gtk.h> static void on_activate ( GtkApplication * app ) { // Create a new window GtkWidget * window = gtk_application_window_new ( app ); // Create a new button GtkWidget * button = gtk_button_new_with_label ( \"Hello, World!\" ); // When the button is clicked, close the window passed as an argument g_signal_connect_swapped ( button , \"clicked\" , G_CALLBACK ( gtk_window_close ), window ); gtk_window_set_child ( GTK_WINDOW ( window ), button ); gtk_window_present ( GTK_WINDOW ( window )); } int main ( int argc , char * argv []) { // Create a new application GtkApplication * app = gtk_application_new ( \"com.example.GtkApplication\" , G_APPLICATION_FLAGS_NONE ); g_signal_connect ( app , \"activate\" , G_CALLBACK ( on_activate ), NULL ); return g_application_run ( G_APPLICATION ( app ), argc , argv ); } eBooks by Tags | RIP Tutorial","title":"C/Cpp GUI Programming"},{"location":"week-13-csharp-gui-I/ce103-week-13-csharp-gui-I/","text":"CE103 Algorithms and Programming I \u00b6 Week-13 (C# GUI Programming-I) \u00b6 Fall Semester, 2021-2022 \u00b6 Download DOC , SLIDE , PPTX C# GUI Programming-I \u00b6","title":"Week-13 (C# GUI Programming-I)"},{"location":"week-13-csharp-gui-I/ce103-week-13-csharp-gui-I/#ce103-algorithms-and-programming-i","text":"","title":"CE103 Algorithms and Programming I"},{"location":"week-13-csharp-gui-I/ce103-week-13-csharp-gui-I/#week-13-c-gui-programming-i","text":"","title":"Week-13 (C# GUI Programming-I)"},{"location":"week-13-csharp-gui-I/ce103-week-13-csharp-gui-I/#fall-semester-2021-2022","text":"Download DOC , SLIDE , PPTX","title":"Fall Semester, 2021-2022"},{"location":"week-13-csharp-gui-I/ce103-week-13-csharp-gui-I/#c-gui-programming-i","text":"","title":"C# GUI Programming-I"},{"location":"week-14-csharp-gui-II/ce103-week-14-csharp-gui-II/","text":"CE103 Algorithms and Programming I \u00b6 Week-14 (C# GUI Programming-II) \u00b6 Fall Semester, 2021-2022 \u00b6 Download DOC , SLIDE , PPTX C# GUI Programming-II \u00b6","title":"Week-14 (C# GUI Programming-II)"},{"location":"week-14-csharp-gui-II/ce103-week-14-csharp-gui-II/#ce103-algorithms-and-programming-i","text":"","title":"CE103 Algorithms and Programming I"},{"location":"week-14-csharp-gui-II/ce103-week-14-csharp-gui-II/#week-14-c-gui-programming-ii","text":"","title":"Week-14 (C# GUI Programming-II)"},{"location":"week-14-csharp-gui-II/ce103-week-14-csharp-gui-II/#fall-semester-2021-2022","text":"Download DOC , SLIDE , PPTX","title":"Fall Semester, 2021-2022"},{"location":"week-14-csharp-gui-II/ce103-week-14-csharp-gui-II/#c-gui-programming-ii","text":"","title":"C# GUI Programming-II"},{"location":"week-15-java-gui/ce103-week-15-java-gui/","text":"CE103 Algorithms and Programming I \u00b6 Week-15 (Java GUI Programming) \u00b6 Fall Semester, 2021-2022 \u00b6 Download DOC , SLIDE , PPTX Java GUI Programming \u00b6 JavaFX GUI Programming \u00b6 1-Install Gluon Scene Builder \u00b6 Download and Install Gluon Scene Builder from URL Scene Builder - Gluon We will use gluon scene builder as an external designer for NetBeans, Eclipse, and IntelliJ idea tools. you can save this design as an FXML file from File->Save As 2-Install Apache Netbeans \u00b6 Download and install apache Netbeans https://netbeans.apache.org/ 3- Configure JavaFX Scene Builder for Apache Netbeans \u00b6 Open Tools->Options->Java->JavaFX Select builder home you can find old integration documentation here Using JavaFX Scene Builder with Java IDEs: Using Scene Builder with NetBeans IDE | JavaFX 2 Tutorials and Documentation 4-Create First Application \u00b6 Select File->New Project Select Java With Maven Types FXML JavaFX Maven Archetype (Gluon) Set project properties Open Project Resources and Click FXML files to run Scene Builder In designer properties tab will show control properties, code tab will show action bindings Then you can run applications from Netbeans. for introduction level information please check the following examples JavaFX Simple Calculator - Design and Code - YouTube JavaFX Library Management System Development #0: Introduction - YouTube for more information about JavaFX please check the following JavaFX Tutorial - javatpoint Java Swing GUI Programming \u00b6 Select File->New Project -> Java with Maven -> Java Application Configure Project Open project and select package then select right-click -> New -> JFrame Form Give a name to your frame Swing GUI Builder is integrated with Netbeans Drag-and-drop controls to panel from the palette And from the events tab, add custom actions. you can configure control properties from the properties screen We can add simple events such as when the moclickscked to button write text on the text field \"Hello World\" When you run application, you will see the following screen References \u00b6 ... ..","title":"Week-15 (Java GUI Programming-II)"},{"location":"week-15-java-gui/ce103-week-15-java-gui/#ce103-algorithms-and-programming-i","text":"","title":"CE103 Algorithms and Programming I"},{"location":"week-15-java-gui/ce103-week-15-java-gui/#week-15-java-gui-programming","text":"","title":"Week-15 (Java GUI Programming)"},{"location":"week-15-java-gui/ce103-week-15-java-gui/#fall-semester-2021-2022","text":"Download DOC , SLIDE , PPTX","title":"Fall Semester, 2021-2022"},{"location":"week-15-java-gui/ce103-week-15-java-gui/#java-gui-programming","text":"","title":"Java GUI Programming"},{"location":"week-15-java-gui/ce103-week-15-java-gui/#javafx-gui-programming","text":"","title":"JavaFX GUI Programming"},{"location":"week-15-java-gui/ce103-week-15-java-gui/#1-install-gluon-scene-builder","text":"Download and Install Gluon Scene Builder from URL Scene Builder - Gluon We will use gluon scene builder as an external designer for NetBeans, Eclipse, and IntelliJ idea tools. you can save this design as an FXML file from File->Save As","title":"1-Install Gluon Scene Builder"},{"location":"week-15-java-gui/ce103-week-15-java-gui/#2-install-apache-netbeans","text":"Download and install apache Netbeans https://netbeans.apache.org/","title":"2-Install Apache Netbeans"},{"location":"week-15-java-gui/ce103-week-15-java-gui/#3-configure-javafx-scene-builder-for-apache-netbeans","text":"Open Tools->Options->Java->JavaFX Select builder home you can find old integration documentation here Using JavaFX Scene Builder with Java IDEs: Using Scene Builder with NetBeans IDE | JavaFX 2 Tutorials and Documentation","title":"3- Configure JavaFX Scene Builder for Apache Netbeans"},{"location":"week-15-java-gui/ce103-week-15-java-gui/#4-create-first-application","text":"Select File->New Project Select Java With Maven Types FXML JavaFX Maven Archetype (Gluon) Set project properties Open Project Resources and Click FXML files to run Scene Builder In designer properties tab will show control properties, code tab will show action bindings Then you can run applications from Netbeans. for introduction level information please check the following examples JavaFX Simple Calculator - Design and Code - YouTube JavaFX Library Management System Development #0: Introduction - YouTube for more information about JavaFX please check the following JavaFX Tutorial - javatpoint","title":"4-Create First Application"},{"location":"week-15-java-gui/ce103-week-15-java-gui/#java-swing-gui-programming","text":"Select File->New Project -> Java with Maven -> Java Application Configure Project Open project and select package then select right-click -> New -> JFrame Form Give a name to your frame Swing GUI Builder is integrated with Netbeans Drag-and-drop controls to panel from the palette And from the events tab, add custom actions. you can configure control properties from the properties screen We can add simple events such as when the moclickscked to button write text on the text field \"Hello World\" When you run application, you will see the following screen","title":"Java Swing GUI Programming"},{"location":"week-15-java-gui/ce103-week-15-java-gui/#references","text":"... ..","title":"References"},{"location":"week-16-final/ce103-week-16-final/","text":"CE103 Algorithms and Programming I \u00b6 Week-16 (Final) \u00b6 Fall Semester, 2021-2022 \u00b6 Download DOC , SLIDE , PPTX Final \u00b6","title":"Week-16 (Final)"},{"location":"week-16-final/ce103-week-16-final/#ce103-algorithms-and-programming-i","text":"","title":"CE103 Algorithms and Programming I"},{"location":"week-16-final/ce103-week-16-final/#week-16-final","text":"","title":"Week-16 (Final)"},{"location":"week-16-final/ce103-week-16-final/#fall-semester-2021-2022","text":"Download DOC , SLIDE , PPTX","title":"Fall Semester, 2021-2022"},{"location":"week-16-final/ce103-week-16-final/#final","text":"","title":"Final"},{"location":"week-2-setup/ce103-week-2-setup/","text":"CE103 Algorithms and Programming I \u00b6 Week-2 \u00b6 Software Development Environments \u00b6 Download DOC , SLIDE , PPTX Outline \u00b6 Flowgorithm Introduction to Analysis of Algorithms Programming Environment Setup and Configuration C/C++ (DevCpp,Code Blocks,MinGW,LLVM,VsCode,VisualStudio,Notepad++,Vi/Vim,Eclipse,Netbeans,Cmake/Make) Java (VsCode,Notepad++,Eclipse,Netbeans,Cmake) C# (VsCode,Notepad++,VsCode,VisualStudio,Cmake) Outline \u00b6 Common Tools and Platforms Fatih Kalem, Notepad++,HxD, MarktextApp,Cygwin,Dependency Walker,Doxygen,Sonarlint, Codepen.io, Codebeautify.org, Codeshare.io,AsciiFlow.com, Freemind, Mockflow, Wireflow, PlantUML,Drawio,Putty, MobaXterm,Teamviewer,AnyDesk,Paletton.com,Colorhunt.co,Understand,JD Project,Cutter,IDA Pro / Freeware,pythontutor,godbolt,scrcpy,Travis-CI,AppVeyor,Jenkins,Vagrant,Docker / Docker Compose / Kubernetes,Nuget,SCV Cryptomanager,Addario CryptoBench,Raymond's MD5 & SHA Checksum Utility,SlavaSoft HashCalc,Portable PGP, and more ... Algorithm Basics \u00b6 Flowgorithm (1) \u00b6 http://www.flowgorithm.org/ Flowgorithm - Documentation https://github.com/timoteoponce/flowgorithm-examples section{ font-size: 25px; } Flowgorithm (2) \u00b6 Main Window section{ font-size: 25px; } Flowgorithm (3) \u00b6 Console Window The classic method to interact with the computer is to use the \"Console\". Flowgorithm attempts to make it look like a typical instant messenger window. The \"chat bubbles\" are color coded to match the Input and Output shapes used in the flowchart. If you don't want to use the chat bubbles, you can also toggle between them and the classical plain text. section{ font-size: 25px; } Flowgorithm (4) \u00b6 Console Window section{ font-size: 25px; } Flowgorithm (5) \u00b6 Source Code Viewer Window The Source Code Viewer can convert your flowchart to several major programming languages. So, if you planning to learn a high-level language, then this feature should help you along the way. section{ font-size: 25px; } Flowgorithm (6) \u00b6 Source Code Viewer Window section{ font-size: 25px; } Flowgorithm (7) \u00b6 Variable Watch Window The variable watch window is used to keep track of how your variables are changing as your program executes. Each variable is color-coded based on its data type. At a glance, you can tell exactly what type of data is being stored - and catch where you may want to use a different data type. section{ font-size: 25px; } Flowgorithm (8) \u00b6 Variable Watch Window section{ font-size: 25px; } Flowgorithm (8) \u00b6 More Resources for Flowgorithm Flowgorithm Tutorial - TestingDocs.com section{ font-size: 25px; } Pseudocode (1) \u00b6 Algorithm design language Pseudocode - Wikipedia Pseudocode Examples How to write a Pseudo Code? - GeeksforGeeks section{ font-size: 25px; } Introduction to Analysis of Algorithms \u00b6 In this course, we will learn how to code with several development environments and next term we will see an analysis of algorithms in detail. This topic is covered in the following link: CE100 Introduction to Analysis of Algorithms section{ font-size: 25px; } Programming Environment Setup and Configuration \u00b6 Programming life is not about only learning how to code. Mostly you need to use several code development environments and you need to learn how to use them efficiently. section{ font-size: 25px; } C / C++ Environment and Development \u00b6 section{ font-size: 25px; } DevCpp (Install / Compile / Run / Debug) (1) \u00b6 Download DevC++ IDE from the following link https://www.bloodshed.net/ section{ font-size: 25px; } DevCpp (Install / Compile / Run / Debug) (2) \u00b6 Open DevC++ IDE for C Project Generation Open File->New->Project section{ font-size: 25px; } DevCpp (Install / Compile / Run / Debug) (3) \u00b6 Select Console Application from Basic tab and with C Project Option and write a project name such as \" Hello \" then press OK Select a folder and save Hello.dev project file. section{ font-size: 25px; } DevCpp (Install / Compile / Run / Debug) (4) \u00b6 You will see a sample main with an empty body section{ font-size: 25px; } DevCpp (Install / Compile / Run / Debug) (5) \u00b6 #include <stdio.h> #include <stdlib.h> /* run this program using the console pauser or add your own getch, s,ystem(\"pause\") or input loop */ int main ( int argc , char * argv []) { retAdd 0 ; } section{ font-size: 25px; } DevCpp (Install / Compile / Run / Debug) (6) \u00b6 Add the following line in the main function. This will write \"Hello, World!\" on the screen and then wait for a keypress to exit from the application #include <stdio.h> #include <stdlib.h> /* run this program using the console pauser or add your own getch, system(\"pause\") or input loop */ int main ( int argc , char * argv []) { printf ( \"Hello, World!\" ); getchar (); return 0 ; } section{ font-size: 25px; } DevCpp (Install / Compile / Run / Debug) (7) \u00b6 Then save the file section{ font-size: 25px; } DevCpp (Install / Compile / Run / Debug) (8) \u00b6 Use from menu Execute->Compile F5 to generate Hello.exe section{ font-size: 25px; } DevCpp (Install / Compile / Run / Debug) (9) \u00b6 You can find the generated Hello.exe path from Compile.log as follow. Check the Output Filename Compiling project changes... -------- - Project Filename: E:\\UgurCoruh\\RTEU\\Lectures\\2021-2022 G\u00fcz CE103 - Algorithms and Programming I\\Lectures\\ce103-algorithms-and-programming-I\\Week-2\\devcpp-hello-world-apps\\Hello.dev - Compiler Name: TDM-GCC 4.9.2 64-bit Release Building makefile... -------- - Filename: E:\\UgurCoruh\\RTEU\\Lectures\\2021-2022 G\u00fcz CE103 - Algorithms and Programming I\\Lectures\\ce103-algorithms-and-programming-I\\Week-2\\devcpp-hello-world-apps\\Makefile.win Processing makefile... -------- - Makefile Processor: C:\\Program Files (x86)\\Dev-Cpp\\MinGW64\\bin\\mingw32-make.exe - Command: mingw32-make.exe -f \"E:\\UgurCoruh\\RTEU\\Lectures\\2021-2022 G\u00fcz CE103 - Algorithms and Programming I\\Lectures\\ce103-algorithms-and-programming-I\\Week-2\\devcpp-hello-world-apps\\Makefile.win\" all gcc.exe -c main.c -o main.o -I \"C:/Program Files (x86)/Dev-Cpp/MinGW64/include\" -I \"C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include\" -I \"C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include\" gcc.exe main.o -o Hello.exe -L \"C:/Program Files (x86)/Dev-Cpp/MinGW64/lib\" -L \"C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/lib\" -static-libgcc Compilation results... -------- - Errors: 0 - Warnings: 0 - Output Filename: E:\\UgurCoruh\\RTEU\\Lectures\\2021-2022 G\u00fcz CE103 - Algorithms and Programming I\\Lectures\\ce103-algorithms-and-programming-I\\Week-2\\devcpp-hello-world-apps\\Hello.exe - Output Size: 128,103515625 KiB - Compilation Time: 2,13s section{ font-size: 25px; } DevCpp (Install / Compile / Run / Debug) (10) \u00b6 Then you can run with Execute->Run F10 or Directly Compile&Run F11 DevCpp (Install / Compile / Run / Debug) (11) \u00b6 for debugging operations, just change the code and add more statements as follow #include <stdio.h> #include <stdlib.h> /* run this program using the console pauser or add your getch, system(\",pause\") or input loop */ int main ( int argc , char * argv []) { printf ( \"Hello, World! Step-1 \\n \" ); printf ( \"Hello, World! Step-2 \\n \" ); printf ( \"Hello, World! Step-3 \\n \" ); printf ( \"Hello, World! Step-4 \\n \" ); printf ( \"Hello, World! Step-5 \\n \" ); printf ( \"Hello, World! Step-6 \\n \" ); getchar (); return 0 ; } section{ font-size: 25px; } DevCpp (Install / Compile / Run / Debug) (12) \u00b6 Click on line numbers and add breakpoints for the debugger. This red point will be debugger stop points section{ font-size: 25px; } DevCpp (Install / Compile / Run / Debug) (13) \u00b6 In the menu section, select the compiler with debug option section{ font-size: 25px; } DevCpp (Install / Compile / Run / Debug) (14) \u00b6 Compile application with debugging setting and in Execute Section use Debug F5 to start debugging section{ font-size: 25px; } DevCpp (Install / Compile / Run / Debug) (15) \u00b6 The debugger will stop at the breakpoint at the debug point (blue line) section{ font-size: 25px; } DevCpp (Install / Compile / Run / Debug) (16) \u00b6 Moving to the next statement can be done via control buttons or shortcuts section{ font-size: 25px; } DevCpp (Install / Compile / Run / Debug) (17) \u00b6 -Press F8 to step-by-step continue Then go to Project Options -> Compiler -> Linker and set Generate debugging information to \"yes\", and make sure you are not using any optimization options (they're not good for debug mode). Also, check the Parameters tab, and make sure you don't have any optimization options (like -O2 or -O3 , but -O0 is ok because it means no optimization) or strip option ( -s ). section{ font-size: 25px; } DevCpp (Install / Compile / Run / Debug) (18) \u00b6 After that, do a full rebuild ( Ctrl-F11 ), then set a breakpoint(s) where you want the debugger to stop (otherwise it will just run the program). To set a breakpoint on a line, just click on the gutter (the gray band on the left), or press Ctrl-F5 . section{ font-size: 25px; } DevCpp (Install / Compile / Run / Debug) (19) \u00b6 Now you are ready to launch the debugger, by pressing F8 or clicking the debug button. If everything goes well, the program will start, and then stop at the first breakpoint. Then you can step through the code, entering function calls, by pressing Shift-F7 or the \"step into\" button, or stepping over the function calls, by pressing F7 or the \"next step\" button. You can press Ctrl-F7 or the \" continue \" button to continue execution till the next breakpoint. At any time, you can add or remove breakpoints. section{ font-size: 25px; } DevCpp (Install / Compile / Run / Debug) (20) \u00b6 When the program stopped at a breakpoint and you are stepping through the code, you can display the values of various variables in your program by putting your mouse over them, or you can display variables and expressions by pressing F4 or the \"add watch\" button and typing the expression. section{ font-size: 25px; } DevCpp (Install / Compile / Run / Debug) (21) \u00b6 How do I debug using Dev-C++ section{ font-size: 25px; } Code Blocks (Install / Compile / Run / Debug) (1) \u00b6 Download Code Blocks from the following link Binary releases - Code::Blocks section{ font-size: 25px; } Code Blocks (Install / Compile / Run / Debug) (2) \u00b6 Open Code Blocks and Select File->New->Project section{ font-size: 25px; } Code Blocks (Install / Compile / Run / Debug) (3) \u00b6 Select Console Application Click Next from Opening Window section{ font-size: 25px; } Code Blocks (Install / Compile / Run / Debug) (4) \u00b6 Select C for Sample Project section{ font-size: 25px; } Code Blocks (Install / Compile / Run / Debug) (5) \u00b6 Write a project name and title also set a project folder section{ font-size: 25px; } Code Blocks (Install / Compile / Run / Debug) (6) \u00b6 Select a compiler for this project we selected GCC but you can select C compilers from the list. Set Debug and Release executable output folders. section{ font-size: 25px; } Code Blocks (Install / Compile / Run / Debug) (7) \u00b6 After this wizard, you will have the following code #include <stdio.h> #include <stdlib.h> int main () { printf ( \"Hello world! \\n \" ); return 0 ; } section{ font-size: 25px; } Code Blocks (Install / Compile / Run / Debug) (8) \u00b6 Select Debug Build from the menu section{ font-size: 25px; } Code Blocks (Install / Compile / Run / Debug) (9) \u00b6 Run with Build and Run F9 section{ font-size: 25px; } Code Blocks (Install / Compile / Run / Debug) (10) \u00b6 You should see the following output section{ font-size: 25px; } Code Blocks (Install / Compile / Run / Debug) (11) \u00b6 Add the following lines to your source code for debugging #include <stdio.h> #include <stdlib.h> int main () { printf ( \"Hello world! Step-1 \\n \" ); printf ( \"Hello world! Step-2 \\n \" ); printf ( \"Hello world! Step-3 \\n \" ); printf ( \"Hello world! Step-4 \\n \" ); printf ( \"Hello world! Step-5 \\n \" ); printf ( \"Hello world! Step-6 \\n \" ); return 0 ; } section{ font-size: 25px; } Code Blocks (Install / Compile / Run / Debug) (12) \u00b6 and add breakpoints with F5 or mouse click section{ font-size: 25px; } Code Blocks (Install / Compile / Run / Debug) (13) \u00b6 select Debug->Start/Continue to start debugger section{ font-size: 25px; } Code Blocks (Install / Compile / Run / Debug) (14) \u00b6 If you see the following error this is related to long or turkish characters including the path. Just move the project to a shorter path and try again Setting breakpoints Debugger name and version: GNU gdb (GDB) 8.1 Starting the debuggee failed: No executable specified, use `target exec'. Debugger finished with status 0 section{ font-size: 25px; } Code Blocks (Install / Compile / Run / Debug) (15) \u00b6 You will see the following yellow pointer for the debugger section{ font-size: 25px; } Code Blocks (Install / Compile / Run / Debug) (16) \u00b6 You can use the following menu or shortcuts for step-by-step debugging. section{ font-size: 25px; } GCC/G++ Complier (MinGW) / Clang-cl (LLVM) (1) \u00b6 Download and install MinGW or LLVM compiler (if you downloaded then skip this step) MinGW installer (clang) Download MinGW-w64 - for 32 and 64-bit Windows from SourceForge.net If you have a problem try `Github`` builds https://github.com/niXman/mingw-builds-binaries/releases https://github.com/niXman/mingw-builds-binaries/releases/download/12.2.0-rt_v10-rev0/x86_64-12.2.0-release-win32-seh-rt_v10-rev0.7z LLVM installer (gcc/g++) Download LLVM releases Also use the following notes https://llvm.org/devmtg/2014-04/PDFs/Talks/clang-cl.pdf section{ font-size: 25px; } GCC/G++ Complier (MinGW) / Clang-cl (LLVM) (2) \u00b6 Open a console with \" cmd \" and test the following commands if commands are not recognized then set the system environment variable to add gcc and g++ executable paths to the path variable (add to both system and user path variable) gcc --version g++ --version C : \\Users\\ugur.coruh >gcc --version gcc (x86_64-win32-seh-rev0, Built by MinGW-W64 project) 8.1.0 Copyright (C) 2018 Free Software Foundation, Inc. This is free software; see the source for copying conditions. There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. clang --version section{ font-size: 25px; } GCC/G++ Complier (MinGW) / Clang-cl (LLVM) (3) \u00b6 for gcc.exe , g++.exe and gdb.exe C: \\P rogram Files \\m ingw-w64 \\x 86_64-8.1.0-win32-seh-rt_v6-rev0 \\m ingw64 \\b in for clang.exe , lldb.exe C : \\Program Files\\LLVM\\bin This folder path changes according to your setup section{ font-size: 25px; } VSCode (Install / Compile / Run / Debug) (1) \u00b6 Download Visual Studio Code from the following link Download Visual Studio Code - Mac, Linux, Windows section{ font-size: 25px; } VSCode (Install / Compile / Run / Debug) (2) \u00b6 In this sample, you will find MinGW and LLVM compiler combinations for C and C++ Create a folder and enter this folder then open this folder with vscode by right click section{ font-size: 25px; } VSCode (Install / Compile / Run / Debug) (3) \u00b6 or enter the folder via console write code . section{ font-size: 25px; } VSCode (Install / Compile / Run / Debug) (4) \u00b6 This will open vscode for the current folder, (.) dot present current folder. You will see an empty folder in the right window section{ font-size: 25px; } VSCode (Install / Compile / Run / Debug) (5) \u00b6 section{ font-size: 25px; } VSCode (Install / Compile / Run / Debug) (6) \u00b6 Create a hello.c file and write the following content #include <stdio.h> int main () { // printf() displays the string inside quotation printf ( \"Hello, World!\" ); return 0 ; } section{ font-size: 25px; } VSCode (Install / Compile / Run / Debug) (7) \u00b6 use CTRL+SHIFT+B (you should be on the source code section) to build a file section{ font-size: 25px; } VSCode (Install / Compile / Run / Debug) (8) \u00b6 Select GCC or CLANG for this sample we can use GCC You will see the output generated `Hello.exe`` section{ font-size: 25px; } VSCode (Install / Compile / Run / Debug) (9) \u00b6 for debugging just put a breakpoint and build again section{ font-size: 25px; } VSCode (Install / Compile / Run / Debug) (10) \u00b6 after building for debug press CTRL+SHIFT+D (you should be in the source code section)and in the right window select create launch.json section{ font-size: 25px; } VSCode (Install / Compile / Run / Debug) (11) \u00b6 from opening, window select C++ GDB/LLDB section{ font-size: 25px; } VSCode (Install / Compile / Run / Debug) (12) \u00b6 from the next opening, menu select mingw-w64 gcc.exe section{ font-size: 25px; } VSCode (Install / Compile / Run / Debug) (13) \u00b6 this will run the debugger and you will see debug points activated section{ font-size: 25px; } VSCode (Install / Compile / Run / Debug) (14) \u00b6 then you can step-by-step debug your code. the following task.json and launch.json automatically generated with your selections section{ font-size: 25px; } VSCode (Install / Compile / Run / Debug) (15) \u00b6 launch.json { // Olas\u0131 \u00f6znitelikler hakk\u0131nda bilgi edinmek i\u00e7in IntelliSense kullan\u0131n. // Mevcut \u00f6zniteliklerin a\u00e7\u0131klamalar\u0131n\u0131 g\u00f6r\u00fcnt\u00fclemek i\u00e7in \u00fczerine gelin. // Daha fazla bilgi i\u00e7in \u015fu adresi ziyaret edin: https://go.microsoft.com/fwlink/?linkid=830387 \"version\" : \"0.2.0\" , \"configurations\" : [ { \"name\" : \"gcc.exe - Etkin dosyay\u0131 derle ve dosyada hata ay\u0131kla\" , \"type\" : \"cppdbg\" , \"request\" : \"launch\" , \"program\" : \"${fileDirname}\\\\${fileBasenameNoExtension}.exe\" , \"args\" : [], \"stopAtEntry\" : false , \"cwd\" : \"${fileDirname}\" , \"environment\" : [], \"externalConsole\" : false , \"MIMode\" : \"gdb\" , \"miDebuggerPath\" : \"C:\\\\Program Files\\\\mingw-w64\\\\x86_64-8.1.0-win32-seh-rt_v6-rev0\\\\mingw64\\\\bin\\\\gdb.exe\" , \"setupCommands\" : [ { \"description\" : \"gdb i\u00e7in d\u00fczg\u00fcn yazd\u0131rmay\u0131 etkinle\u015ftir\" , \"text\" : \"-enable-pretty-printing\" , \"ignoreFailures\" : true } ], \"preLaunchTask\" : \"C/C++: gcc.exe etkin dosyay\u0131 derle\" } ] } section{ font-size: 20px; } VSCode (Install / Compile / Run / Debug) (16) \u00b6 task.json { \"tasks\" : [ { \"type\" : \"cppbuild\" , \"label\" : \"C/C++: gcc.exe etkin dosyay\u0131 derle\" , \"command\" : \"C:\\\\Program Files\\\\mingw-w64\\\\x86_64-8.1.0-win32-seh-rt_v6-rev0\\\\mingw64\\\\bin\\\\gcc.exe\" , \"args\" : [ \"-fdiagnostics-color=always\" , \"-g\" , \"${file}\" , \"-o\" , \"${fileDirname}\\\\${fileBasenameNoExtension}.exe\" ], \"options\" : { \"cwd\" : \"${fileDirname}\" }, \"problemMatcher\" : [ \"$gcc\" ], \"group\" : { \"kind\" : \"build\" , \"isDefault\" : true }, \"detail\" : \"Hata Ay\u0131klay\u0131c\u0131s\u0131 taraf\u0131ndan olu\u015fturulan g\u00f6rev.\" } ], \"version\" : \"2.0.0\" } section{ font-size: 20px; } VSCode (Install / Compile / Run / Debug) (17) \u00b6 You can do the same thing for other compilers and C++ source codes. LLVM does not support debugging on vscode now. for C++ VsCode you can check the following links for Windows https://code.visualstudio.com/docs/cpp/config-mingw for Linux https://code.visualstudio.com/docs/cpp/config-linux for WSL https://code.visualstudio.com/docs/cpp/config-wsl section{ font-size: 25px; } VSCode (Install / Compile / Run / Debug) (18) \u00b6 in the launch file if you start debugging with F5 (you can select debugger with CTRL+SHIFT+P and then write Debug and Selecting Configure Debugger Option) section{ font-size: 25px; } VSCode (Install / Compile / Run / Debug) (19) \u00b6 the following line will be your debugging application path if you start debugging with F5 in Hello.c file this will set <Hello.c base path>/Hello.exe section{ font-size: 25px; } VSCode (Install / Compile / Run / Debug) (20) \u00b6 You should set this correct for both LLVM and GCC configuration in launch.json \"program\" : \" ${ fileDirname } \\\\ ${ fileBasenameNoExtension } .exe\" , Also you should set your installed debugger paths for GCC \"miDebuggerPath\" : \"C:\\\\Program Files\\\\mingw-w64\\\\x86_64-8.1.0-win32-seh-rt_v6-rev0\\\\mingw64\\\\bin\\\\gdb.exe\" , for LLVM \"miDebuggerPath\" : \"C:\\\\Program Files\\\\LLVM\\\\bin\\\\lldb.exe\" , for more details please check the sample source codes. section{ font-size: 25px; } Visual Studio Code Extension List (1) \u00b6 My Extension List Listing Installed Extensions PS C: \\U sers \\u gur.coruh \\D esktop> code --list-extensions | % { \"code --install-extension $_ \" } Following topic can help you How can you export the Visual Studio Code extension list? - Stack Overflow section{ font-size: 25px; } Visual Studio Code Extension List (2) \u00b6 code --install-extension 2gua.rainbow-brackets code --install-extension aaron-bond.better-comments code --install-extension abusaidm.html-snippets code --install-extension ACharLuk.easy-cpp-projects code --install-extension chris-noring.node-snippets code --install-extension cschlosser.doxdocgen code --install-extension csholmq.excel-to-markdown-table code --install-extension DaChuiOpenSource.FreeMind code --install-extension dannysteenman.cloudformation-yaml-snippets code --install-extension Dart-Code.dart-code code --install-extension Dart-Code.flutter code --install-extension digized.umple code --install-extension DotJoshJohnson.xml code --install-extension DougFinke.vscode-pandoc code --install-extension dzhavat.bracket-pair-toggler code --install-extension esbenp.prettier-vscode code --install-extension formulahendry.dotnet code --install-extension franneck94.c-cpp-runner code --install-extension gcc. section{ font-size: 25px; } Visual Studio Code Extension List (3) \u00b6 vscode-plugin-billionbottle code --install-extension geeklearningio.graphviz-markdown-preview code --install-extension geyao.html-snippets code --install-extension GitHub.copilot-nightly code --install-extension GrapeCity.gc-excelviewer code --install-extension Ionide.Ionide-fsharp code --install-extension ionut-botizan.vscode-cypher-ql code --install-extension ipedrazas.kubernetes-snippets code --install-extension JakeWilson.vscode-picture code --install-extension James-Yu.latex-workshop code --install-extension JasonMejane.base64viewer code --install-extension jasonnutter.search-node-modules code --install-extension jebbs.plantuml code --install-extension jeff-hykin.better-cpp-syntax code --install-extension Katacoda.vscode code --install-extension KenDomino.Antlrvsix-vscode code --install-extension l7ssha.tag-inserter code --install-extension lolkush.quickstart code --install-extension marp-team.marp-vscode code --install-extension mindaro-dev.file-downloader code --install-extension mindaro.mindaro code --install-extension ms-azuretools.vscode-docker code --install-extension MS-CEINTL.vscode-language-pack-tr section{ font-size: 25px; } Visual Studio Code Extension List (4) \u00b6 code --install-extension ms-dotnettools.csharp code --install-extension ms-dotnettools.dotnet-interactive-vscode code --install-extension ms-dotnettools.vscode-dotnet-pack code --install-extension ms-dotnettools.vscode-dotnet-runtime code --install-extension ms-kubernetes-tools.vscode-aks-tools code --install-extension ms-kubernetes-tools.vscode-kubernetes-tools code --install-extension ms-python.python code --install-extension ms-python.vscode-pylance code --install-extension ms-toolsai.jupyter code --install-extension ms-toolsai.jupyter-keymap code --install-extension ms-toolsai.jupyter-renderers code --install-extension ms-vscode-remote.remote-containers code --install-extension ms-vscode-remote.remote-ssh code --install-extension ms-vscode-remote.remote-ssh-edit code --install-extension ms-vscode-remote.remote-wsl section{ font-size: 25px; } Visual Studio Code Extension List (5) \u00b6 code --install-extension ms-vscode.azure-account code --install-extension ms-vscode.brackets-keybindings code --install-extension ms-vscode.brackets-pack code --install-extension ms-vscode.cmake-tools code --install-extension ms-vscode.cpptools code --install-extension ms-vscode.cpptools-extension-pack code --install-extension ms-vscode.cpptools-themes code --install-extension ms-vscode.live-server code --install-extension ms-vsliveshare.vsliveshare code --install-extension oleg-shilo.cs-script code --install-extension PascalReitermann93.vscode-yaml-sort section{ font-size: 25px; } Visual Studio Code Extension List (6) \u00b6 code --install-extension Pivotal.vscode-boot-dev-pack code --install-extension Pivotal.vscode-concourse code --install-extension Pivotal.vscode-manifest-yaml code --install-extension Pivotal.vscode-spring-boot code --install-extension PKief.material-icon-theme code --install-extension platformio.platformio-ide code --install-extension pranaygp.vscode-css-peek code --install-extension redhat.fabric8-analytics code --install-extension redhat.java code --install-extension redhat.vscode-commons code --install-extension redhat.vscode-xml code --install-extension redhat.vscode-yaml code --install-extension ritwickdey.LiveServer code --install-extension sidthesloth.html5-boilerplate code --install-extension TaodongWu.ejs-snippets code --install-extension tht13.python code --install-extension tomoki1207.pdf code --install-extension twxs.cmake code --install-extension vadimcn.vscode-lldb section{ font-size: 25px; } Visual Studio Code Extension List (7) \u00b6 code --install-extension VisualStudioExptTeam.intellicode-api-usage-examples code --install-extension VisualStudioExptTeam.vscodeintellicode code --install-extension vscjava.vscode-java-debug code --install-extension vscjava.vscode-java-dependency code --install-extension vscjava.vscode-java-pack code --install-extension vscjava.vscode-java-test code --install-extension vscjava.vscode-maven code --install-extension vscjava.vscode-spring-boot-dashboard code --install-extension vscjava.vscode-spring-initializr code --install-extension walkme.HTML5-extension-pack code --install-extension webfreak.debug code --install-extension well-ar.plantuml code --install-extension wildboar.asn1 code --install-extension Zignd.html-css-class-completion section{ font-size: 25px; } Visual Studio Community Edition (Install / Compile / Run / Debug) (1) \u00b6 Download and install Visual Studio Community Edition Select All Development Environments from Installer. \u00dccretsiz Geli\u015ftirici Yaz\u0131l\u0131mlar\u0131 ve Hizmetleri - Visual Studio section{ font-size: 25px; } Visual Studio Community Edition (Install / Compile / Run / Debug) (2) \u00b6 After installation open Visual Studio 2022` from the menu. section{ font-size: 25px; } Visual Studio Community Edition (Install / Compile / Run / Debug) (3) \u00b6 The application will start... section{ font-size: 25px; } Visual Studio Community Edition (Install / Compile / Run / Debug) (4) \u00b6 From Opening Window Select Create a new project section{ font-size: 25px; } Visual Studio Community Edition (Install / Compile / Run / Debug) (5) \u00b6 There will be several options, you can review them. Select Windows , C++ , Console Application from Combobox. Select Console Application section{ font-size: 25px; } Visual Studio Community Edition (Install / Compile / Run / Debug) (6) \u00b6 Give a solution and project name. Select save location section{ font-size: 25px; } Visual Studio Community Edition (Install / Compile / Run / Debug) (7) \u00b6 You will have C++ basic Hello World application. section{ font-size: 25px; } Visual Studio Community Edition (Install / Compile / Run / Debug) (8) \u00b6 You will have C++ basic Hello World application. // ConsoleApplication1.cpp : This file contains the 'main' function. Program execution begins and ends there. // #include <iostream> int main () { std :: cout << \"Hello World! \\n \" ; } // Run program: Ctrl + F5 or Debug > Start Without Debugging menu // Debug program: F5 or Debug > Start Debugging menu // Tips for Getting Started: // 1. Use the Solution Explorer window to add/manage files // 2. Use the Team Explorer window to connect to source control // 3. Use the Output window to see build output and other messages // 4. Use the Error List window to view errors // 5. Go to Project > Add New Item to create new code files, or Project > Add Existing Item to add existing code files to the project // 6. In the future, to open this project again, go to File > Open > Project and select the .sln file section{ font-size: 25px; } Visual Studio Community Edition (Install / Compile / Run / Debug) (9) \u00b6 We need to rename the file extension to c from cpp section{ font-size: 25px; } Visual Studio Community Edition (Install / Compile / Run / Debug) (10) \u00b6 If you compile the source C compiler will be used. section{ font-size: 25px; } Visual Studio Community Edition (Install / Compile / Run / Debug) (11) \u00b6 We need to update our source for C as follows // ConsoleApplication1.c : This file contains the 'main' function. Program execution begins and ends there. // #include <stdio.h> int main (){ printf ( \"Hello World! \\n \" ); } section{ font-size: 25px; } Visual Studio Community Edition (Install / Compile / Run / Debug) (12) \u00b6 We need to update our source for C as follows section{ font-size: 25px; } Visual Studio Community Edition (Install / Compile / Run / Debug) (13) \u00b6 Put a breakpoint by clicking the following location. Breakpoints will be stop points for our debugging operations. section{ font-size: 25px; } Visual Studio Community Edition (Install / Compile / Run / Debug) (14) \u00b6 Then select Debug configuration and according to your operating system select x64 or x86 configuration and click Local Windows Debugger section{ font-size: 25px; } Visual Studio Community Edition (Install / Compile / Run / Debug) (15) \u00b6 Update your source code as follow // ConsoleApplication1.c : This file contains the 'main' function. Program execution begins and ends there. // #include <stdio.h> int sum ( int input1 , int input2 ); int main (){ int number = 5 ; printf ( \"Before Increment : %d \\n \" , number ); number = sum ( number , 5 ); printf ( \"After Increment : %d \\n \" , number ); } int sum ( int input1 , int input2 ){ return input1 + input2 ; } section{ font-size: 25px; } Visual Studio Community Edition (Install / Compile / Run / Debug) (16) \u00b6 Put the following breakpoints and run the debugger. On number, the variable pins the variable to see its value in real-time. section{ font-size: 25px; } Visual Studio Community Edition (Install / Compile / Run / Debug) (17) \u00b6 Open Debug->Windows->Memory->Memory1 to see value in memory section{ font-size: 25px; } Visual Studio Community Edition (Install / Compile / Run / Debug) (18) \u00b6 In the memory window copy variable name (number) with address operator (&) and then (&number) press enter. section{ font-size: 25px; } Visual Studio Community Edition (Install / Compile / Run / Debug) (19) \u00b6 You can see its value in memory with hexadecimal form ( 05 00 00 00 ) section{ font-size: 25px; } Visual Studio Community Edition (Install / Compile / Run / Debug) (20) \u00b6 If you change value with pinned control your memory value and your current value will be updated. 20 in hexadecimal 0x14 (integer is 4 bytes length for this reason memory shows 14 00 00 00 ) section{ font-size: 25px; } Visual Studio Community Edition (Install / Compile / Run / Debug) (21) \u00b6 If you close some windows such as solution explorer, and properties windows you can open them from the View menu. section{ font-size: 25px; } Visual Studio Community Edition (Install / Compile / Run / Debug) (22) \u00b6 Solution and Projects have several configurations for each setup such as Release - x86, Release-x64, Debug- x86, and Debug-x64 you need to configure all of them for your requirements. You can access configurations by right-clicking to project and then selecting properties. section{ font-size: 25px; } Visual Studio Community Edition (Install / Compile / Run / Debug) (23) \u00b6 Project properties has several settings section{ font-size: 25px; } Notepad++ (Install / Compile ) (1) \u00b6 Please download Notepad++ from the following link Downloads | Notepad++ section{ font-size: 25px; } Notepad++ (Install / Compile ) (2) \u00b6 Download and install MinGW or LLVM compiler (if you downloded then skip this step) MinGW installer (gcc / g++) A complete runtime environment for gcc https://sourceforge.net/projects/mingw-w64/ https://sourceforge.net/projects/mingw-w64/files/latest/download w64devkit is a portable C and C++ development kit for x64 (and x86) Windows. https://www.mingw-w64.org/downloads/#w64devkit Also, see the following notes https://www.hanshq.net/building-gcc.html section{ font-size: 25px; } Notepad++ (Install / Compile ) (3) \u00b6 LLVM installer (clang) Download https://releases.llvm.org/ Also, use the following notes https://llvm.org/devmtg/2014-04/PDFs/Talks/clang-cl.pdf https://www.hanshq.net/clang-plugin-example.html section{ font-size: 25px; } Notepad++ (Install / Compile ) (4) \u00b6 Open a console with \" cmd \" and test the following commands if commands are not recognized then set the system environment variable to add gcc and g++ executable paths to the path variable (add to both system and user path variable) gcc --version g++ --version C : \\Users\\ugur.coruh >gcc --version gcc (x86_64-win32-seh-rev0, Built by MinGW-W64 project) 8.1.0 Copyright (C) 2018 Free Software Foundation, Inc. This is free software; see the source for copying conditions. There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. section{ font-size: 25px; } Notepad++ (Install / Compile ) (5) \u00b6 Open system environments to update path variable for gcc/g++ and clang section{ font-size: 25px; } Notepad++ (Install / Compile ) (6) \u00b6 Open \"Environment Variables\" section{ font-size: 25px; } Notepad++ (Install / Compile ) (7) \u00b6 Select path variable from user section. section{ font-size: 25px; } Notepad++ (Install / Compile ) (8) \u00b6 Select path variable from system section. section{ font-size: 25px; } Notepad++ (Install / Compile ) (9) \u00b6 Update variables add MinGW and LLVM to path gcc.exe g++.exe clang.exe will be in bin folders. Then we can run this commands from command line. section{ font-size: 25px; } Notepad++ (Install / Compile ) (9) \u00b6 Update variables add MinGW and LLVM to path gcc.exe g++.exe clang.exe will be in bin folders. Then we can run this commands from command line. section{ font-size: 25px; } Notepad++ (Install / Compile ) (10) \u00b6 for gcc.exe , g++.exe and gdb.exe C: \\P rogram Files \\m ingw-w64 \\x 86_64-8.1.0-win32-seh-rt_v6-rev0 \\m ingw64 \\b in section{ font-size: 25px; } Notepad++ (Install / Compile ) (11) \u00b6 for clang.exe , lldb.exe we will use the following path C : \\Program Files\\LLVM\\bin section{ font-size: 25px; } Notepad++ (Install / Compile ) (12) \u00b6 This folder paths changes according to your setup Open NppExec extension (install from extension manager if not exist) section{ font-size: 25px; } Notepad++ (Install / Compile ) (13) \u00b6 Write the following commands in the box NPP_SAVE // save current file cd $(CURRENT_DIRECTORY) // go to directory of the current file gcc -Wall -Wextra -Wpedantic -std=c++11 -o \"$(NAME_PART)\" \"$(FILE_NAME)\" section{ font-size: 25px; } Notepad++ (Install / Compile ) (14) \u00b6 Save the script as gcc-build and for more information check the following link You can modify or add multiple scripts for another task. section{ font-size: 25px; } MSYS2 \u00b6 Software Distribution and Building Platform for Windows https://www.msys2.org/ section{ font-size: 25px; } Vi/Vim (C/C++) for Windows (1) \u00b6 Vim is a command-line editor for programming Use the following links to download Vim for Windows https://github.com/vim/vim-win32-installer/releases download : vim online section{ font-size: 25px; } Vi/Vim (C/C++) for Windows (2) \u00b6 Run setup to install the application on your computer. section{ font-size: 25px; } Vi/Vim (C/C++) for Windows (3) \u00b6 section{ font-size: 25px; } Vi/Vim (C/C++) for Windows (4) \u00b6 Installation steps. section{ font-size: 25px; } Vi/Vim (C/C++) for Windows (5) \u00b6 Installation steps. section{ font-size: 25px; } Vi/Vim (C/C++) for Windows (6) \u00b6 Installation steps. section{ font-size: 25px; } Vi/Vim (C/C++) for Windows (7) \u00b6 Installation steps. section{ font-size: 25px; } Vi/Vim (C/C++) for Windows (8) \u00b6 Installation steps. section{ font-size: 25px; } Vi/Vim (C/C++) for Windows (9) \u00b6 Installation steps. section{ font-size: 25px; } Vi/Vim (C/C++) for Windows (10) \u00b6 Generated shortcuts on your desktop section{ font-size: 25px; } Vi/Vim (C/C++) for Windows (11) \u00b6 Run vim hello.c on your command-line to open a c file with vim editor. section{ font-size: 25px; } Vi/Vim (C/C++) for Windows (12) \u00b6 You will have the following editor. Use INSERT to change edit options. section{ font-size: 25px; } Vi/Vim (C/C++) for Windows (13) \u00b6 Sample source code #include <stdio.h> int main () { char name [ 20 ]; printf ( \"Enter Name:\" ); scanf ( \"%s\" , name ); printf ( \"Your name is %s\" , name ); return 0 ; } section{ font-size: 25px; } Vi/Vim (C/C++) for Windows (14) \u00b6 Write source code Press the Esc button to enter command mode Then type :wq . It will save the file and exit from Vim w: write q: quit section{ font-size: 25px; } Vi/Vim (C/C++) for Windows (15) \u00b6 compile source code with gcc link the objects and run executable section{ font-size: 25px; } Vi/Vim (C/C++) for Windows (17) \u00b6 In the folder, you can find your executable. hello.exe section{ font-size: 25px; } Vi/Vim (C/C++) for Windows (16) \u00b6 compile, link and execute flow will be as follow; section{ font-size: 25px; } Eclipse (C/C++) - Compile Only / Debugging Has Problem (1) \u00b6 Download and install Eclipse IDE from the following link Eclipse IDE for C/C++ Developers | Eclipse Packages Run Installer Select Eclipse IDE for C/C++ Developers section{ font-size: 25px; } Eclipse (C/C++) - Compile Only / Debugging Has Problem (2) \u00b6 Select Java Version and Installation Path section{ font-size: 25px; } Eclipse (C/C++) - Compile Only / Debugging Has Problem (3) \u00b6 After installation you can LAUNCH eclipse IDE section{ font-size: 25px; } Eclipse (C/C++) - Compile Only / Debugging Has Problem (4) \u00b6 section{ font-size: 25px; } Eclipse (C/C++) - Compile Only / Debugging Has Problem (5) \u00b6 Select a workspace that your project will be saved section{ font-size: 25px; } Eclipse (C/C++) - Compile Only / Debugging Has Problem (6) \u00b6 You can find your installation under your user folder section{ font-size: 25px; } Eclipse (C/C++) - Compile Only / Debugging Has Problem (7) \u00b6 You can create shortcut to desktop for your working eclipse version. section{ font-size: 25px; } Eclipse (C/C++) - Compile Only / Debugging Has Problem (8) \u00b6 File -> New -> Project section{ font-size: 25px; } Eclipse (C/C++) - Compile Only / Debugging Has Problem (9) \u00b6 Select C/C++ Project section{ font-size: 25px; } Eclipse (C/C++) - Compile Only / Debugging Has Problem (10) \u00b6 Select C Managed Build, Eclipse CDT will do job for us. section{ font-size: 25px; } Eclipse (C/C++) - Compile Only / Debugging Has Problem (11) \u00b6 Give project name and select a basic template executable with MinGW GCC. section{ font-size: 25px; } Eclipse (C/C++) - Compile Only / Debugging Has Problem (12) \u00b6 Configura Basic Settings section{ font-size: 25px; } Eclipse (C/C++) - Compile Only / Debugging Has Problem (13) \u00b6 There are default Debug and Release configurations you can add your customized configurations from Advanced Settings. section{ font-size: 25px; } Eclipse (C/C++) - Compile Only / Debugging Has Problem (14) \u00b6 Project settings will be C Select Debug/Release configuration and then Build Application Project->Build All (Ctrl+B) HelloWorldC.exe will be generated gcc -O0 -g3 -Wall -c -fmessage-length = 0 -o \"src\\\\HelloWorldC.o\" \"..\\\\src\\\\HelloWorldC.c\" gcc -o HelloWorldC.exe \"src\\\\HelloWorldC.o\" section{ font-size: 25px; } Eclipse (C/C++) - Compile Only / Debugging Has Problem (15) \u00b6 Before build if you want to debug application select debug configuration, put your breakpoints and then Build application again. Right click the generated executable Debug As -> Local C/C++ Application section{ font-size: 25px; } Eclipse (C/C++) - Compile Only / Debugging Has Problem (16) \u00b6 Debugger will start and stop at breakpoint as follow. section{ font-size: 25px; } Eclipse (C/C++) - Compile Only / Debugging Has Problem (16) \u00b6 Check debug control shortcuts and use them section{ font-size: 25px; } Eclipse (C/C++) - Compile Only / Debugging Has Problem (17) \u00b6 To watch variables use Expressions and Variables section{ font-size: 25px; } Eclipse (C/C++) - Compile Only / Debugging Has Problem (18) \u00b6 section{ font-size: 25px; } Eclipse (C/C++) - Compile Only / Debugging Has Problem (19) \u00b6 for more visit eclipse webpage Effective Techniques for Debugging C & C++ | The Eclipse Foundation Help - Eclipse IDE section{ font-size: 25px; } Eclipse (C/C++) - Compile Only / Debugging Has Problem (20) \u00b6 Generate CMAKE project from new Project and Select CMake Project Template section{ font-size: 25px; } Eclipse (C/C++) - Compile Only / Debugging Has Problem (21) \u00b6 Give project name section{ font-size: 25px; } Eclipse (C/C++) - Compile Only / Debugging Has Problem (22) \u00b6 This will generate default C++ Hello World project section{ font-size: 25px; } Eclipse (C/C++) - Compile Only / Debugging Has Problem (23) \u00b6 Build Project section{ font-size: 25px; } Eclipse (C/C++) - Compile Only / Debugging Has Problem (24) \u00b6 It will give following errors, for missing configurations. This errors are generated by CMAKE Then clean and rebuild again. Errors occurred during the build. Errors running builder 'CDT Core Builder' on project 'HelloWorldCmakeC'. Resource '/HelloWorldCmakeC/build/cmake.debug.win32.x86 _ 64/compile _ commands.json' does not exist. Resource '/HelloWorldCmakeC/build/cmake.debug.win32.x86 _ 64/compile _ commands.json' does not exist. Resource '/HelloWorldCmakeC/build/cmake.debug.win32.x86 _ 64/compile _ commands.json' does not exist. Resource '/HelloWorldCmakeC/build/cmake.debug.win32.x86 _ 64/compile _ commands.json' does not exist. section{ font-size: 25px; } Eclipse (C/C++) - Compile Only / Debugging Has Problem (25) \u00b6 section{ font-size: 25px; } Eclipse (C/C++) - Compile Only / Debugging Has Problem (26) \u00b6 After this operation first Clean project from Project menu and then Build All again section{ font-size: 25px; } Eclipse (C/C++) - Compile Only / Debugging Has Problem (27) \u00b6 Eclipse with CMake project on windows JV - Science and stuff. section{ font-size: 25px; } Eclipse (C/C++) - Compile Only / Debugging Has Problem (28) \u00b6 section{ font-size: 25px; } Eclipse (C/C++) - Compile Only / Debugging Has Problem (29) \u00b6 section{ font-size: 25px; } Netbeans (C/C++) - Manuel Build/Clean/Run Command Setting Not Good Option for C/C++ Development (1) \u00b6 https://netbeans.apache.org/ C and C++ Tutorials section{ font-size: 25px; } Netbeans (C/C++) - Manuel Build/Clean/Run Command Setting Not Good Option for C/C++ Development (2) \u00b6 section{ font-size: 25px; } Netbeans (C/C++) - Manuel Build/Clean/Run Command Setting Not Good Option for C/C++ Development (3) \u00b6 section{ font-size: 25px; } Netbeans (C/C++) - Manuel Build/Clean/Run Command Setting Not Good Option for C/C++ Development (4) \u00b6 section{ font-size: 25px; } Netbeans (C/C++) - Manuel Build/Clean/Run Command Setting Not Good Option for C/C++ Development (5) \u00b6 section{ font-size: 25px; } Netbeans (C/C++) - Manuel Build/Clean/Run Command Setting Not Good Option for C/C++ Development (6) \u00b6 section{ font-size: 25px; } Netbeans (C/C++) - Manuel Build/Clean/Run Command Setting Not Good Option for C/C++ Development (7) \u00b6 section{ font-size: 25px; } Netbeans (C/C++) - Manuel Build/Clean/Run Command Setting Not Good Option for C/C++ Development (8) \u00b6 section{ font-size: 25px; } Turbo C/C++ (1) \u00b6 Download Turbo.C.3.2.zip Download Turbo C++ for Windows 7, 8, 8.1, 10 and Windows 11 (32-64 bit) with full/window screen mode and many more extra features Turbo C++ Shortcuts - C Programming Language Tutorials section{ font-size: 25px; } Turbo C/C++ (2) \u00b6 section{ font-size: 25px; } Cmake (C++/C) (1) \u00b6 CMake ( http://www.cmake.org/ ) is a program which generates the Makefiles used by Make . section{ font-size: 25px; } Cmake (C++/C) (2) \u00b6 Why use CMake ? Eases Make use but the same way of thinking generate the Makefile Separate the compilation from the sources Multi-platfoms Very flexible section{ font-size: 25px; } Cmake (C++/C) (3) \u00b6 Check if the libraries/programs are available on your system File generator ( configure_file ) Calling programs or scripts ( doxygen ) One of the new standards section{ font-size: 25px; } Cmake (C++/C) (4) (Download and Install) \u00b6 use the following link for download Download | CMake section{ font-size: 25px; } Cmake (C++/C) (5) (WSL and Linux Environment) \u00b6 Hello world with CMake section{ font-size: 25px; } Cmake (C++/C) (6) (Windows Environment) \u00b6 main.c #include <stdio.h> int main () { char name [ 20 ]; printf ( \"Enter name: \" ); scanf ( \"%s\" , name ); printf ( \"Your name is %s.\" , name ); return 0 ; } CMakeLists.txt cmake_minimum_required ( VERSION 3.7.2 ) project ( scanf-sample ) add_executable ( scanf-sample main.c ) section{ font-size: 25px; } Cmake (C++/C) (7) (Windows Environment) \u00b6 put main.c and CMakeLists.txt file in sample-scanf folder and from command line run the following cmake command with dot (.) to create solution file for c project C : \\Users\\ugur.coruh\\Desktop\\sample-scanf >cmake . section{ font-size: 25px; } Cmake (C++/C) (8) (Windows Environment) \u00b6 I have Visual Studio 2022 Community Edition Installed on My Computer, for these reason build tools are selected for visual studio environment and the following outputs are generated C : \\Users\\ugur.coruh\\Desktop\\sample-scanf >cmake . -- Building for: Visual Studio 17 2022 -- Selecting Windows SDK version 10.0.22000.0 to target Windows 10.0.19043. -- The C compiler identification is MSVC 19.30.30704.0 -- The CXX compiler identification is MSVC 19.30.30704.0 -- Detecting C compiler ABI info -- Detecting C compiler ABI info - done -- Check for working C compiler: C:/Program Files/Microsoft Visual Studio/2022/Community/VC/Tools/MSVC/14.30.30704/bin/Hostx64/x64/cl.exe - skipped -- Detecting C compile features -- Detecting C compile features - done -- Detecting CXX compiler ABI info -- Detecting CXX compiler ABI info - done -- Check for working CXX compiler: C:/Program Files/Microsoft Visual Studio/2022/Community/VC/Tools/MSVC/14.30.30704/bin/Hostx64/x64/cl.exe - skipped -- Detecting CXX compile features -- Detecting CXX compile features - done -- Configuring done -- Generating done -- Build files have been written to: C:/Users/ugur.coruh/Desktop/sample-scanf C : \\Users\\ugur.coruh\\Desktop\\sample-scanf > section{ font-size: 25px; } Cmake (C++/C) (9) (Windows Environment) \u00b6 also following files are generated section{ font-size: 25px; } Cmake (C++/C) (10) (Windows Environment) \u00b6 if we open scanf-sample.sln file we will have automated generated project files section{ font-size: 25px; } Cmake (C++/C) (11) (Windows Environment) \u00b6 you can make scanf-sample with startup project with right click and then run on visual studio. if you want to configure for another build tool you can use Cmake-GUI installed with setup on your computer section{ font-size: 25px; } Cmake (C++/C) (12) (Windows Environment) \u00b6 Open GUI and Select File-> Delete Cache section{ font-size: 25px; } Cmake (C++/C) (13) (Windows Environment) \u00b6 then you can click \"Configure\" to select build tool section{ font-size: 25px; } Cmake (C++/C) (14) (Windows Environment) \u00b6 section{ font-size: 25px; } Cmake (C++/C) (15) (Windows Environment) \u00b6 if you click \"Configure\" twice it will generate the visual studio solution in build folder for more detailed examples that include also docker and travis-ci sample you can check the following repo GitHub - ttroy50/cmake-examples: Useful CMake Examples section{ font-size: 25px; } Make (1) \u00b6 Sample hello.c #include <stdio.h> int main ( void ) { printf ( \"hello, world \\n \" ); } section{ font-size: 25px; } Make (2) \u00b6 Makefile # This is the default target, which will be built when # you invoke make .PHONY : all all : hello # This rule tells make how to build hello from hello.cpp hello : hello . c g++ -o hello hello.c # This rule tells make to copy hello to the binaries subdirectory, # creating it if necessary .PHONY : install install : mkdir -p binaries cp -p hello binaries # This rule tells make to delete hello and hello.o .PHONY : clean clean : rm -f hello section{ font-size: 25px; } Make (3) \u00b6 compile.bat make all . will create hello.exe check hello-make sample section{ font-size: 25px; } Make (4) \u00b6 section{ font-size: 25px; } JAVA Environment and Development \u00b6 JDK and JRE Setup (1) \u00b6 section{ font-size: 25px; } JDK and JRE Setup (2) \u00b6 JDK (Java Development Kit) is a Kit that provides the environment to develop and execute(run) the Java program. JDK is a kit(or package) that includes two things Development Tools(to provide an environment to develop your java programs) JRE (to execute your java program). JRE (Java Runtime Environment) is an installation package that provides an environment to only run(not develop) the java program(or application)onto your machine. JRE is only used by those who only want to run Java programs that are end-users of your system. JVM ( Java Virtual Machine) is a very important part of both JDK and JRE because it is contained or inbuilt in both. Whatever Java program you run using JRE or JDK goes into JVM and JVM is responsible for executing the java program line by line, hence it is also known as an **i*****nterpreter*** . Difference between JDK, JRE, JVM - TutorialAndExample section{ font-size: 25px; } System Environments and Paths for Java (1) \u00b6 System Environments and Paths for Java (2) \u00b6 Select path variable (JDK should be set there) System Environments and Paths for Java (3) \u00b6 JAVA_HOME also should be set section{ font-size: 25px; } Netbeans (Java) (1) \u00b6 Open New Project -> Java Project section{ font-size: 25px; } Netbeans (Java) (2) \u00b6 section{ font-size: 25px; } Netbeans (Java) (3) \u00b6 section{ font-size: 25px; } Netbeans (Java) (4) \u00b6 section{ font-size: 25px; } Netbeans (Java) (5) \u00b6 section{ font-size: 25px; } Netbeans (Java) (6) \u00b6 Update code and run /* * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template */ package com.ucoruh.mavenproject1 ; /** * * @author ugur.coruh */ public class NewClass { static //static block { System . out . println ( \"Static block\" ); } public static void main ( String args [] ) //static method { System . out . println ( \"Static method\" ); } } section{ font-size: 25px; } Netbeans (Java) (7) \u00b6 section{ font-size: 25px; } Netbeans (Java) (8) \u00b6 section{ font-size: 25px; } Netbeans (Java) (9) \u00b6 section{ font-size: 25px; } Netbeans (Java) (10) \u00b6 section{ font-size: 25px; } Eclipse (Java) (1) \u00b6 Select File -> New Project section{ font-size: 25px; } Eclipse (Java) (2) \u00b6 section{ font-size: 25px; } Eclipse (Java) (3) \u00b6 section{ font-size: 25px; } Eclipse (Java) (4) \u00b6 section{ font-size: 25px; } Eclipse (Java) (5) \u00b6 section{ font-size: 25px; } Eclipse (Java) (6) \u00b6 Update source package ucoruh ; public class HelloClass { static { System . out . println ( \"Static Block\" ); } public static void main ( String [] args ) { // TODO Auto-generated method stub System . out . println ( \"Static Method\" ); } } section{ font-size: 25px; } Eclipse (Java) (7) \u00b6 section{ font-size: 25px; } Eclipse (Java) (8) \u00b6 section{ font-size: 25px; } Intellij Idea (Jet Brains) (Java) \u00b6 Download IntelliJ IDEA: The Capable & Ergonomic Java IDE by JetBrains Select Community Version or Student Ultimate Version section{ font-size: 25px; } VSCode (Java) \u00b6 Java Extension Run&Debug Java Files section{ font-size: 25px; } Notepad++ (Java) \u00b6 How to Compile and Run Java Programs Using Notepad++ section{ font-size: 25px; } Cmake (Java) \u00b6 UseJava \u2014 CMake 3.24.2 Documentation GitHub - ptitpoulpe/cmake-swig-java-example: An example of combining cmake, swig and java section{ font-size: 25px; } C# Environment and Development \u00b6 section{ font-size: 25px; } Visual Studio Community Edition (C#) \u00b6 //TODO// section{ font-size: 25px; } Notepad++ (C#) \u00b6 This use command-line utilities for csharp, nppexec should be configured for this utility. Compiling/Executing a C# Source File in Command Prompt - Stack Overflow c: \\w indows \\M icrosoft.NET \\F ramework \\v 3 .5 \\ c: \\w indows \\M icrosoft.NET \\F ramework \\v 3 .5 \\b in \\c sc.exe /t:exe /out:MyApplication.exe MyApplication.cs ... section{ font-size: 25px; } Cmake (C#) \u00b6 GitHub - crud89/DotNetWithCMake: Your swiss army knife for creating .NET assemblies with CMake and integrating unmanaged code. section{ font-size: 25px; } Common Tools and Platforms \u00b6 section{ font-size: 25px; } Fatih Kalem \u00b6 https://cdnvideo.eba.gov.tr/fatihkalem/fatihkalem_portable.zip https://cdnvideo.eba.gov.tr/fatihkalem/fatihkalem_setup.exe section{ font-size: 25px; } Notepad++ (Notepad for Source Code) \u00b6 Downloads | Notepad++ section{ font-size: 25px; } HxD (Hex Editor) \u00b6 HxD - Freeware Hex Editor and Disk Editor | mh-nexus section{ font-size: 25px; } MarktextApp (Markdown Syntax Editor) \u00b6 https://marktext.app/ https://github.com/marktext/marktext/releases Download latest version https://github.com/marktext/marktext/releases/tag/v0.17.1 section{ font-size: 25px; } Cygwin (Linux environment for Windows) \u00b6 https://www.cygwin.com/ section{ font-size: 25px; } Dependency Walker (32-bit or 64-bit Windows module dependency checker) \u00b6 https://www.dependencywalker.com/ section{ font-size: 25px; } Doxygen (Code Documentation) \u00b6 Doxygen: Doxygen section{ font-size: 25px; } Sonarlint (Code Quality and Code Security Extension) \u00b6 https://www.sonarlint.org/ section{ font-size: 25px; } Codepen.io (online code sharing) \u00b6 https://codepen.io/ CodePen is a social development environment. At its heart, it allows you to write code in the browser, and see the results of it as you build. A useful and liberating online code editor for developers of any skill, and particularly empowering for people learning to code. We focus primarily on front-end languages like HTML, CSS, JavaScript, and preprocessing syntaxes that turn into those things section{ font-size: 25px; } Codepen.io (online code sharing) \u00b6 Credit Card Sample on Codepen https://codepen.io/quinlo/pen/YONMEa Checkout trends https://codepen.io/trending section{ font-size: 25px; } Codeshare.io (real-time code sharing) \u00b6 https://codeshare.io/ Share Code in Real-time with Developers, An online code editor for interviews, troubleshooting, teaching & more\u2026 section{ font-size: 25px; } Codebeautify.org (online data conversion tools) \u00b6 Has several tools for developers (Code Formatter, JSON Beautifier, XML Viewer, Hex Converters and more...) https://codebeautify.org/ section{ font-size: 25px; } AsciiFlow.com (ASCII drawing tool) \u00b6 Asciflow provides ascii based drawings that you can copy directly to textfiles and source codes. Visit the following link https://asciiflow.com/ section{ font-size: 25px; } Freemind (opensource mindmap application) \u00b6 Freemind is open source java based desktop mindmap application. Can export files to several formats Main Page - FreeMind section{ font-size: 25px; } Mockup Designers \u00b6 Mockflow Signup - MockFlow Wireflow https://wireflow.co/ section{ font-size: 25px; } PlantUML (software designer) \u00b6 Text based designer for software engineers https://plantuml.com/ Also visit course notes that related to plantuml CE204 Object-Oriented Programming - RTEU C204 Object Oriented Programming Course Notes section{ font-size: 25px; } Drawio (drawing tool) \u00b6 Online and Offline Drawing Tool https://app.diagrams.net/ Offline Installer Releases \u00b7 jgraph/drawio-desktop \u00b7 GitHub section{ font-size: 25px; } Putty (Remote Connection) \u00b6 Commonly use for SSH connection We can run a SSH server with MobaXterm and can connect to same computer with Putty. Download file over SSH Protocol \u00b6 How to Download and Upload Files over SSH \u2013 TecAdmin Here are some useful examples for downloading files from the remote system over SSH protocol. This will connect to example.com server with user \u201c username \u201d and copy the /backup/file.zip file to local system directory /local/dir . To use theis command replace the values as per your environment. scp username@example.com:/backup/file.zip /local/dir If the SSH is running on a non-standard port, You can specify the port using -P option with SCP command. scp -P 2222 username@example.com:/backup/file.zip /local/dir If your remote server required a private key to connect server, You can use -i followed by a private key file path to connect your server using the SCP command. This can be helpful for AWS servers. scp -i private_key.pem username@example.com:/backup/file.zip /local/dir Upload file using SSH \u00b6 You can also upload files to the remote server using SSH protocol using the SCP command. Use the following example command for uploading files to the SSH server. scp file.zip username@example.com:/remote/dir Similarity you can use -P switch to define port of the SSH server and -i to define private key for the user authentication. Also you can use SSH tunnels for remote code development Developing on Remote Machines using SSH and Visual Studio Code Visual Studio Code Server section{ font-size: 25px; } MobaXterm (Remote Connection) \u00b6 Multip Purpose Remote Connection Toolkit section{ font-size: 25px; } Teamviewer (Remote Connection) \u00b6 Remote connection tool TeamViewer \u2013 Uzaktan Destek, Uzaktan Eri\u015fim, Hizmet Masas\u0131, \u00c7evrimi\u00e7i \u0130\u015fbirli\u011fi ve Toplant\u0131lar AnyDesk \u00b6 Remote connection tool The Fast Remote Desktop Application \u2013 AnyDesk section{ font-size: 25px; } Paletton.com and Colorhunt.co (Color Chooser) \u00b6 Generates color pallettes and sample usages Paletton - The Color Scheme Designer https://colorhunt.co/ Also check Colors Tutorial section{ font-size: 25px; } Understand (Static Code Analysis) \u00b6 https://emenda.com/scitools-understand/ section{ font-size: 25px; } JD Project (Java Decompiler) \u00b6 Java Decompiler for Jar and Class Files, If code is not obfuscated it recover source code from compiled files. Just drag and drop files to GUI http://java-decompiler.github.io/ You can use it standalone app or with eclipse section{ font-size: 25px; } Cutter (Multi-Platform Reverse Engineering Tool) \u00b6 Cutter's goal is to be an advanced FREE and open-source reverse-engineering platform while keeping the user experience at mind. Cutter is created by reverse engineers for reverse engineers. https://cutter.re/ section{ font-size: 25px; } IDA Pro / Freeware (Native Reverse Engineering Tool) \u00b6 IDA Pro as a disassembler is capable of creating maps of their execution to show the binary instructions that are actually executed by the processor in a symbolic representation (assembly language). Advanced techniques have been implemented into IDA Pro so that it can generate assembly language source code from machine-executable code and make this complex code more human-readable. section{ font-size: 25px; } IDA Pro / Freeware (Native Reverse Engineering Tool) \u00b6 Hex Rays - State-of-the-art binary code analysis solutions section{ font-size: 25px; } IDA Pro / Freeware (Native Reverse Engineering Tool) \u00b6 section{ font-size: 25px; } Code Visualization (Python, C , C++ , Java) \u00b6 This coding tutor tool helps you learn Python, JavaScript, C, C++, and Java by visualizing code execution. https://pythontutor.com/ section{ font-size: 25px; } Assembly of C Code \u00b6 Multilanguage supported. Convert source code to assembly codes https://godbolt.org/ section{ font-size: 25px; } Mobile Device Screen Sharing for Demo \u00b6 Show USB or Wifi connected Mobile Device Screen on PC and Provide Controls GitHub - Genymobile/scrcpy: Display and control your Android device Run scrcpy for single mobile phone. Open Source Project - Scrcpy now works wirelessly section{ font-size: 25px; } Travis-CI \u00b6 Travis-CI is a continues integration platform Travis-CI free option removed for this reason, its not in our scope. It uses Travis.yml files for actions. section{ font-size: 25px; } AppVeyor \u00b6 Another CI platform it has free option for public builds. https://www.appveyor.com GitHub - Kimserey/hello-world-nuget hello-world-nuget/appveyor.yml at master \u00b7 Kimserey/hello-world-nuget \u00b7 GitHub section{ font-size: 25px; } Jenkins \u00b6 Self-hosted solution for CI operations, Has integration with Github and several platforms. https://www.jenkins.io/ https://www.jenkins.io/doc/pipeline/tour/hello-world/ section{ font-size: 25px; } Jenkins \u00b6 section{ font-size: 25px; } Jenkins \u00b6 https://www.jenkins.io/solutions/github/ section{ font-size: 25px; } Vagrant \u00b6 Vagrant is a tool for building and managing virtual machine environments in a single workflow. With an easy-to-use workflow and focus on automation, Vagrant lowers development environment setup time, increases production parity, and makes the \"works on my machine\" excuse a relic of the past. https://www.vagrantup.com/ Setup Development Environment with Vagrant Setting Up Development Environment Using Vagrant - Edureka development-environment/Vagrantfile at master \u00b7 gantsign/development-environment \u00b7 GitHub section{ font-size: 25px; } Docker / Docker Compose / Kubernetes (1) \u00b6 Docker takes away repetitive, mundane configuration tasks and is used throughout the development lifecycle for fast, easy and portable application development \u2013 desktop and cloud. https://www.youtube.com/watch?v=nBwJm0onzeo&ab_channel=GaryExplains Dockerfile https://devopedia.org/docker DockerHub Docker Compose Yaml Dockerrun.aws.json (AWS) section{ font-size: 25px; } Docker / Docker Compose / Kubernetes (2) \u00b6 section{ font-size: 25px; } Docker / Docker Compose / Kubernetes (3) \u00b6 section{ font-size: 25px; } Docker / Docker Compose / Kubernetes (4) \u00b6 section{ font-size: 25px; } Docker / Docker Compose / Kubernetes (5) \u00b6 section{ font-size: 25px; } Docker / Docker Compose / Kubernetes (6) \u00b6 section{ font-size: 25px; } Nuget Packages (1) \u00b6 https://www.nuget.org/packages What is NuGet and what does it do? | Microsoft Learn section{ font-size: 25px; } NuGet Tools (2) \u00b6 section{ font-size: 25px; } Managing dependencies (3) \u00b6 section{ font-size: 25px; } Tracking references and restoring packages (4) \u00b6 section{ font-size: 25px; } SCV Cryptomanager \u00b6 SCV Crypto Manager has several tools for cryptographic operations. https://cryptomanager.com/download.php section{ font-size: 25px; } Addario CryptoBench \u00b6 CryptoBench can be used for hash and symmetric asymmetric encryption-decryption operations. CryptoBench Download Page http://www.addario.org/files/CryptoBench%20v1.0.1.zip section{ font-size: 25px; } Raymond's MD5 & SHA Checksum Utility \u00b6 Hash Calculation Utility MD5 & SHA Checksum Utility | Raymond's WordPress section{ font-size: 25px; } SlavaSoft HashCalc \u00b6 SlavaSoft HashCalc - Hash, CRC, and HMAC Calculator section{ font-size: 25px; } Portable PGP \u00b6 Portable PGP uses for the generation of PGP keys to transfer files securely via e-mail or other channels. You can encrypt or sign your documents with this tool then the receiver can open or verify your e-mail. https://ppgp.sourceforge.net/ section{ font-size: 25px; } Online Programming Envoriments \u00b6 Hackerrank https://www.hackerrank.com/ CS50 Sandbox https://sandbox.cs50.io/ Programiz C Online Complier Online C Compiler \\[ End-Of-Week-2 \\]","title":"Week-2 (Development Environments)"},{"location":"week-2-setup/ce103-week-2-setup/#ce103-algorithms-and-programming-i","text":"","title":"CE103 Algorithms and Programming I"},{"location":"week-2-setup/ce103-week-2-setup/#week-2","text":"","title":"Week-2"},{"location":"week-2-setup/ce103-week-2-setup/#software-development-environments","text":"Download DOC , SLIDE , PPTX","title":"Software Development Environments"},{"location":"week-2-setup/ce103-week-2-setup/#outline","text":"Flowgorithm Introduction to Analysis of Algorithms Programming Environment Setup and Configuration C/C++ (DevCpp,Code Blocks,MinGW,LLVM,VsCode,VisualStudio,Notepad++,Vi/Vim,Eclipse,Netbeans,Cmake/Make) Java (VsCode,Notepad++,Eclipse,Netbeans,Cmake) C# (VsCode,Notepad++,VsCode,VisualStudio,Cmake)","title":"Outline"},{"location":"week-2-setup/ce103-week-2-setup/#outline_1","text":"Common Tools and Platforms Fatih Kalem, Notepad++,HxD, MarktextApp,Cygwin,Dependency Walker,Doxygen,Sonarlint, Codepen.io, Codebeautify.org, Codeshare.io,AsciiFlow.com, Freemind, Mockflow, Wireflow, PlantUML,Drawio,Putty, MobaXterm,Teamviewer,AnyDesk,Paletton.com,Colorhunt.co,Understand,JD Project,Cutter,IDA Pro / Freeware,pythontutor,godbolt,scrcpy,Travis-CI,AppVeyor,Jenkins,Vagrant,Docker / Docker Compose / Kubernetes,Nuget,SCV Cryptomanager,Addario CryptoBench,Raymond's MD5 & SHA Checksum Utility,SlavaSoft HashCalc,Portable PGP, and more ...","title":"Outline"},{"location":"week-2-setup/ce103-week-2-setup/#algorithm-basics","text":"","title":"Algorithm Basics"},{"location":"week-2-setup/ce103-week-2-setup/#flowgorithm-1","text":"http://www.flowgorithm.org/ Flowgorithm - Documentation https://github.com/timoteoponce/flowgorithm-examples section{ font-size: 25px; }","title":"Flowgorithm (1)"},{"location":"week-2-setup/ce103-week-2-setup/#flowgorithm-2","text":"Main Window section{ font-size: 25px; }","title":"Flowgorithm (2)"},{"location":"week-2-setup/ce103-week-2-setup/#flowgorithm-3","text":"Console Window The classic method to interact with the computer is to use the \"Console\". Flowgorithm attempts to make it look like a typical instant messenger window. The \"chat bubbles\" are color coded to match the Input and Output shapes used in the flowchart. If you don't want to use the chat bubbles, you can also toggle between them and the classical plain text. section{ font-size: 25px; }","title":"Flowgorithm (3)"},{"location":"week-2-setup/ce103-week-2-setup/#flowgorithm-4","text":"Console Window section{ font-size: 25px; }","title":"Flowgorithm (4)"},{"location":"week-2-setup/ce103-week-2-setup/#flowgorithm-5","text":"Source Code Viewer Window The Source Code Viewer can convert your flowchart to several major programming languages. So, if you planning to learn a high-level language, then this feature should help you along the way. section{ font-size: 25px; }","title":"Flowgorithm (5)"},{"location":"week-2-setup/ce103-week-2-setup/#flowgorithm-6","text":"Source Code Viewer Window section{ font-size: 25px; }","title":"Flowgorithm (6)"},{"location":"week-2-setup/ce103-week-2-setup/#flowgorithm-7","text":"Variable Watch Window The variable watch window is used to keep track of how your variables are changing as your program executes. Each variable is color-coded based on its data type. At a glance, you can tell exactly what type of data is being stored - and catch where you may want to use a different data type. section{ font-size: 25px; }","title":"Flowgorithm (7)"},{"location":"week-2-setup/ce103-week-2-setup/#flowgorithm-8","text":"Variable Watch Window section{ font-size: 25px; }","title":"Flowgorithm (8)"},{"location":"week-2-setup/ce103-week-2-setup/#flowgorithm-8_1","text":"More Resources for Flowgorithm Flowgorithm Tutorial - TestingDocs.com section{ font-size: 25px; }","title":"Flowgorithm (8)"},{"location":"week-2-setup/ce103-week-2-setup/#pseudocode-1","text":"Algorithm design language Pseudocode - Wikipedia Pseudocode Examples How to write a Pseudo Code? - GeeksforGeeks section{ font-size: 25px; }","title":"Pseudocode (1)"},{"location":"week-2-setup/ce103-week-2-setup/#introduction-to-analysis-of-algorithms","text":"In this course, we will learn how to code with several development environments and next term we will see an analysis of algorithms in detail. This topic is covered in the following link: CE100 Introduction to Analysis of Algorithms section{ font-size: 25px; }","title":"Introduction to Analysis of Algorithms"},{"location":"week-2-setup/ce103-week-2-setup/#programming-environment-setup-and-configuration","text":"Programming life is not about only learning how to code. Mostly you need to use several code development environments and you need to learn how to use them efficiently. section{ font-size: 25px; }","title":"Programming Environment Setup and Configuration"},{"location":"week-2-setup/ce103-week-2-setup/#c-c-environment-and-development","text":"section{ font-size: 25px; }","title":"C / C++ Environment and Development"},{"location":"week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-1","text":"Download DevC++ IDE from the following link https://www.bloodshed.net/ section{ font-size: 25px; }","title":"DevCpp (Install / Compile / Run / Debug) (1)"},{"location":"week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-2","text":"Open DevC++ IDE for C Project Generation Open File->New->Project section{ font-size: 25px; }","title":"DevCpp (Install / Compile / Run / Debug) (2)"},{"location":"week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-3","text":"Select Console Application from Basic tab and with C Project Option and write a project name such as \" Hello \" then press OK Select a folder and save Hello.dev project file. section{ font-size: 25px; }","title":"DevCpp (Install / Compile / Run / Debug) (3)"},{"location":"week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-4","text":"You will see a sample main with an empty body section{ font-size: 25px; }","title":"DevCpp (Install / Compile / Run / Debug) (4)"},{"location":"week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-5","text":"#include <stdio.h> #include <stdlib.h> /* run this program using the console pauser or add your own getch, s,ystem(\"pause\") or input loop */ int main ( int argc , char * argv []) { retAdd 0 ; } section{ font-size: 25px; }","title":"DevCpp (Install / Compile / Run / Debug) (5)"},{"location":"week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-6","text":"Add the following line in the main function. This will write \"Hello, World!\" on the screen and then wait for a keypress to exit from the application #include <stdio.h> #include <stdlib.h> /* run this program using the console pauser or add your own getch, system(\"pause\") or input loop */ int main ( int argc , char * argv []) { printf ( \"Hello, World!\" ); getchar (); return 0 ; } section{ font-size: 25px; }","title":"DevCpp (Install / Compile / Run / Debug) (6)"},{"location":"week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-7","text":"Then save the file section{ font-size: 25px; }","title":"DevCpp (Install / Compile / Run / Debug) (7)"},{"location":"week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-8","text":"Use from menu Execute->Compile F5 to generate Hello.exe section{ font-size: 25px; }","title":"DevCpp (Install / Compile / Run / Debug) (8)"},{"location":"week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-9","text":"You can find the generated Hello.exe path from Compile.log as follow. Check the Output Filename Compiling project changes... -------- - Project Filename: E:\\UgurCoruh\\RTEU\\Lectures\\2021-2022 G\u00fcz CE103 - Algorithms and Programming I\\Lectures\\ce103-algorithms-and-programming-I\\Week-2\\devcpp-hello-world-apps\\Hello.dev - Compiler Name: TDM-GCC 4.9.2 64-bit Release Building makefile... -------- - Filename: E:\\UgurCoruh\\RTEU\\Lectures\\2021-2022 G\u00fcz CE103 - Algorithms and Programming I\\Lectures\\ce103-algorithms-and-programming-I\\Week-2\\devcpp-hello-world-apps\\Makefile.win Processing makefile... -------- - Makefile Processor: C:\\Program Files (x86)\\Dev-Cpp\\MinGW64\\bin\\mingw32-make.exe - Command: mingw32-make.exe -f \"E:\\UgurCoruh\\RTEU\\Lectures\\2021-2022 G\u00fcz CE103 - Algorithms and Programming I\\Lectures\\ce103-algorithms-and-programming-I\\Week-2\\devcpp-hello-world-apps\\Makefile.win\" all gcc.exe -c main.c -o main.o -I \"C:/Program Files (x86)/Dev-Cpp/MinGW64/include\" -I \"C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include\" -I \"C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include\" gcc.exe main.o -o Hello.exe -L \"C:/Program Files (x86)/Dev-Cpp/MinGW64/lib\" -L \"C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/lib\" -static-libgcc Compilation results... -------- - Errors: 0 - Warnings: 0 - Output Filename: E:\\UgurCoruh\\RTEU\\Lectures\\2021-2022 G\u00fcz CE103 - Algorithms and Programming I\\Lectures\\ce103-algorithms-and-programming-I\\Week-2\\devcpp-hello-world-apps\\Hello.exe - Output Size: 128,103515625 KiB - Compilation Time: 2,13s section{ font-size: 25px; }","title":"DevCpp (Install / Compile / Run / Debug) (9)"},{"location":"week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-10","text":"Then you can run with Execute->Run F10 or Directly Compile&Run F11","title":"DevCpp (Install / Compile / Run / Debug) (10)"},{"location":"week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-11","text":"for debugging operations, just change the code and add more statements as follow #include <stdio.h> #include <stdlib.h> /* run this program using the console pauser or add your getch, system(\",pause\") or input loop */ int main ( int argc , char * argv []) { printf ( \"Hello, World! Step-1 \\n \" ); printf ( \"Hello, World! Step-2 \\n \" ); printf ( \"Hello, World! Step-3 \\n \" ); printf ( \"Hello, World! Step-4 \\n \" ); printf ( \"Hello, World! Step-5 \\n \" ); printf ( \"Hello, World! Step-6 \\n \" ); getchar (); return 0 ; } section{ font-size: 25px; }","title":"DevCpp (Install / Compile / Run / Debug) (11)"},{"location":"week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-12","text":"Click on line numbers and add breakpoints for the debugger. This red point will be debugger stop points section{ font-size: 25px; }","title":"DevCpp (Install / Compile / Run / Debug) (12)"},{"location":"week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-13","text":"In the menu section, select the compiler with debug option section{ font-size: 25px; }","title":"DevCpp (Install / Compile / Run / Debug) (13)"},{"location":"week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-14","text":"Compile application with debugging setting and in Execute Section use Debug F5 to start debugging section{ font-size: 25px; }","title":"DevCpp (Install / Compile / Run / Debug) (14)"},{"location":"week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-15","text":"The debugger will stop at the breakpoint at the debug point (blue line) section{ font-size: 25px; }","title":"DevCpp (Install / Compile / Run / Debug) (15)"},{"location":"week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-16","text":"Moving to the next statement can be done via control buttons or shortcuts section{ font-size: 25px; }","title":"DevCpp (Install / Compile / Run / Debug) (16)"},{"location":"week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-17","text":"-Press F8 to step-by-step continue Then go to Project Options -> Compiler -> Linker and set Generate debugging information to \"yes\", and make sure you are not using any optimization options (they're not good for debug mode). Also, check the Parameters tab, and make sure you don't have any optimization options (like -O2 or -O3 , but -O0 is ok because it means no optimization) or strip option ( -s ). section{ font-size: 25px; }","title":"DevCpp (Install / Compile / Run / Debug) (17)"},{"location":"week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-18","text":"After that, do a full rebuild ( Ctrl-F11 ), then set a breakpoint(s) where you want the debugger to stop (otherwise it will just run the program). To set a breakpoint on a line, just click on the gutter (the gray band on the left), or press Ctrl-F5 . section{ font-size: 25px; }","title":"DevCpp (Install / Compile / Run / Debug) (18)"},{"location":"week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-19","text":"Now you are ready to launch the debugger, by pressing F8 or clicking the debug button. If everything goes well, the program will start, and then stop at the first breakpoint. Then you can step through the code, entering function calls, by pressing Shift-F7 or the \"step into\" button, or stepping over the function calls, by pressing F7 or the \"next step\" button. You can press Ctrl-F7 or the \" continue \" button to continue execution till the next breakpoint. At any time, you can add or remove breakpoints. section{ font-size: 25px; }","title":"DevCpp (Install / Compile / Run / Debug) (19)"},{"location":"week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-20","text":"When the program stopped at a breakpoint and you are stepping through the code, you can display the values of various variables in your program by putting your mouse over them, or you can display variables and expressions by pressing F4 or the \"add watch\" button and typing the expression. section{ font-size: 25px; }","title":"DevCpp (Install / Compile / Run / Debug) (20)"},{"location":"week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-21","text":"How do I debug using Dev-C++ section{ font-size: 25px; }","title":"DevCpp (Install / Compile / Run / Debug) (21)"},{"location":"week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-1","text":"Download Code Blocks from the following link Binary releases - Code::Blocks section{ font-size: 25px; }","title":"Code Blocks (Install / Compile / Run / Debug) (1)"},{"location":"week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-2","text":"Open Code Blocks and Select File->New->Project section{ font-size: 25px; }","title":"Code Blocks (Install / Compile / Run / Debug) (2)"},{"location":"week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-3","text":"Select Console Application Click Next from Opening Window section{ font-size: 25px; }","title":"Code Blocks (Install / Compile / Run / Debug) (3)"},{"location":"week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-4","text":"Select C for Sample Project section{ font-size: 25px; }","title":"Code Blocks (Install / Compile / Run / Debug) (4)"},{"location":"week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-5","text":"Write a project name and title also set a project folder section{ font-size: 25px; }","title":"Code Blocks (Install / Compile / Run / Debug) (5)"},{"location":"week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-6","text":"Select a compiler for this project we selected GCC but you can select C compilers from the list. Set Debug and Release executable output folders. section{ font-size: 25px; }","title":"Code Blocks (Install / Compile / Run / Debug) (6)"},{"location":"week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-7","text":"After this wizard, you will have the following code #include <stdio.h> #include <stdlib.h> int main () { printf ( \"Hello world! \\n \" ); return 0 ; } section{ font-size: 25px; }","title":"Code Blocks (Install / Compile / Run / Debug) (7)"},{"location":"week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-8","text":"Select Debug Build from the menu section{ font-size: 25px; }","title":"Code Blocks (Install / Compile / Run / Debug) (8)"},{"location":"week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-9","text":"Run with Build and Run F9 section{ font-size: 25px; }","title":"Code Blocks (Install / Compile / Run / Debug) (9)"},{"location":"week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-10","text":"You should see the following output section{ font-size: 25px; }","title":"Code Blocks (Install / Compile / Run / Debug) (10)"},{"location":"week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-11","text":"Add the following lines to your source code for debugging #include <stdio.h> #include <stdlib.h> int main () { printf ( \"Hello world! Step-1 \\n \" ); printf ( \"Hello world! Step-2 \\n \" ); printf ( \"Hello world! Step-3 \\n \" ); printf ( \"Hello world! Step-4 \\n \" ); printf ( \"Hello world! Step-5 \\n \" ); printf ( \"Hello world! Step-6 \\n \" ); return 0 ; } section{ font-size: 25px; }","title":"Code Blocks (Install / Compile / Run / Debug) (11)"},{"location":"week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-12","text":"and add breakpoints with F5 or mouse click section{ font-size: 25px; }","title":"Code Blocks (Install / Compile / Run / Debug) (12)"},{"location":"week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-13","text":"select Debug->Start/Continue to start debugger section{ font-size: 25px; }","title":"Code Blocks (Install / Compile / Run / Debug) (13)"},{"location":"week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-14","text":"If you see the following error this is related to long or turkish characters including the path. Just move the project to a shorter path and try again Setting breakpoints Debugger name and version: GNU gdb (GDB) 8.1 Starting the debuggee failed: No executable specified, use `target exec'. Debugger finished with status 0 section{ font-size: 25px; }","title":"Code Blocks (Install / Compile / Run / Debug) (14)"},{"location":"week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-15","text":"You will see the following yellow pointer for the debugger section{ font-size: 25px; }","title":"Code Blocks (Install / Compile / Run / Debug) (15)"},{"location":"week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-16","text":"You can use the following menu or shortcuts for step-by-step debugging. section{ font-size: 25px; }","title":"Code Blocks (Install / Compile / Run / Debug) (16)"},{"location":"week-2-setup/ce103-week-2-setup/#gccg-complier-mingw-clang-cl-llvm-1","text":"Download and install MinGW or LLVM compiler (if you downloaded then skip this step) MinGW installer (clang) Download MinGW-w64 - for 32 and 64-bit Windows from SourceForge.net If you have a problem try `Github`` builds https://github.com/niXman/mingw-builds-binaries/releases https://github.com/niXman/mingw-builds-binaries/releases/download/12.2.0-rt_v10-rev0/x86_64-12.2.0-release-win32-seh-rt_v10-rev0.7z LLVM installer (gcc/g++) Download LLVM releases Also use the following notes https://llvm.org/devmtg/2014-04/PDFs/Talks/clang-cl.pdf section{ font-size: 25px; }","title":"GCC/G++ Complier (MinGW) / Clang-cl (LLVM) (1)"},{"location":"week-2-setup/ce103-week-2-setup/#gccg-complier-mingw-clang-cl-llvm-2","text":"Open a console with \" cmd \" and test the following commands if commands are not recognized then set the system environment variable to add gcc and g++ executable paths to the path variable (add to both system and user path variable) gcc --version g++ --version C : \\Users\\ugur.coruh >gcc --version gcc (x86_64-win32-seh-rev0, Built by MinGW-W64 project) 8.1.0 Copyright (C) 2018 Free Software Foundation, Inc. This is free software; see the source for copying conditions. There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. clang --version section{ font-size: 25px; }","title":"GCC/G++ Complier (MinGW) / Clang-cl (LLVM) (2)"},{"location":"week-2-setup/ce103-week-2-setup/#gccg-complier-mingw-clang-cl-llvm-3","text":"for gcc.exe , g++.exe and gdb.exe C: \\P rogram Files \\m ingw-w64 \\x 86_64-8.1.0-win32-seh-rt_v6-rev0 \\m ingw64 \\b in for clang.exe , lldb.exe C : \\Program Files\\LLVM\\bin This folder path changes according to your setup section{ font-size: 25px; }","title":"GCC/G++ Complier (MinGW) / Clang-cl (LLVM) (3)"},{"location":"week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-1","text":"Download Visual Studio Code from the following link Download Visual Studio Code - Mac, Linux, Windows section{ font-size: 25px; }","title":"VSCode (Install / Compile / Run / Debug) (1)"},{"location":"week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-2","text":"In this sample, you will find MinGW and LLVM compiler combinations for C and C++ Create a folder and enter this folder then open this folder with vscode by right click section{ font-size: 25px; }","title":"VSCode (Install / Compile / Run / Debug) (2)"},{"location":"week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-3","text":"or enter the folder via console write code . section{ font-size: 25px; }","title":"VSCode (Install / Compile / Run / Debug) (3)"},{"location":"week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-4","text":"This will open vscode for the current folder, (.) dot present current folder. You will see an empty folder in the right window section{ font-size: 25px; }","title":"VSCode (Install / Compile / Run / Debug) (4)"},{"location":"week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-5","text":"section{ font-size: 25px; }","title":"VSCode (Install / Compile / Run / Debug) (5)"},{"location":"week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-6","text":"Create a hello.c file and write the following content #include <stdio.h> int main () { // printf() displays the string inside quotation printf ( \"Hello, World!\" ); return 0 ; } section{ font-size: 25px; }","title":"VSCode (Install / Compile / Run / Debug) (6)"},{"location":"week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-7","text":"use CTRL+SHIFT+B (you should be on the source code section) to build a file section{ font-size: 25px; }","title":"VSCode (Install / Compile / Run / Debug) (7)"},{"location":"week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-8","text":"Select GCC or CLANG for this sample we can use GCC You will see the output generated `Hello.exe`` section{ font-size: 25px; }","title":"VSCode (Install / Compile / Run / Debug) (8)"},{"location":"week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-9","text":"for debugging just put a breakpoint and build again section{ font-size: 25px; }","title":"VSCode (Install / Compile / Run / Debug) (9)"},{"location":"week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-10","text":"after building for debug press CTRL+SHIFT+D (you should be in the source code section)and in the right window select create launch.json section{ font-size: 25px; }","title":"VSCode (Install / Compile / Run / Debug) (10)"},{"location":"week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-11","text":"from opening, window select C++ GDB/LLDB section{ font-size: 25px; }","title":"VSCode (Install / Compile / Run / Debug) (11)"},{"location":"week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-12","text":"from the next opening, menu select mingw-w64 gcc.exe section{ font-size: 25px; }","title":"VSCode (Install / Compile / Run / Debug) (12)"},{"location":"week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-13","text":"this will run the debugger and you will see debug points activated section{ font-size: 25px; }","title":"VSCode (Install / Compile / Run / Debug) (13)"},{"location":"week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-14","text":"then you can step-by-step debug your code. the following task.json and launch.json automatically generated with your selections section{ font-size: 25px; }","title":"VSCode (Install / Compile / Run / Debug) (14)"},{"location":"week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-15","text":"launch.json { // Olas\u0131 \u00f6znitelikler hakk\u0131nda bilgi edinmek i\u00e7in IntelliSense kullan\u0131n. // Mevcut \u00f6zniteliklerin a\u00e7\u0131klamalar\u0131n\u0131 g\u00f6r\u00fcnt\u00fclemek i\u00e7in \u00fczerine gelin. // Daha fazla bilgi i\u00e7in \u015fu adresi ziyaret edin: https://go.microsoft.com/fwlink/?linkid=830387 \"version\" : \"0.2.0\" , \"configurations\" : [ { \"name\" : \"gcc.exe - Etkin dosyay\u0131 derle ve dosyada hata ay\u0131kla\" , \"type\" : \"cppdbg\" , \"request\" : \"launch\" , \"program\" : \"${fileDirname}\\\\${fileBasenameNoExtension}.exe\" , \"args\" : [], \"stopAtEntry\" : false , \"cwd\" : \"${fileDirname}\" , \"environment\" : [], \"externalConsole\" : false , \"MIMode\" : \"gdb\" , \"miDebuggerPath\" : \"C:\\\\Program Files\\\\mingw-w64\\\\x86_64-8.1.0-win32-seh-rt_v6-rev0\\\\mingw64\\\\bin\\\\gdb.exe\" , \"setupCommands\" : [ { \"description\" : \"gdb i\u00e7in d\u00fczg\u00fcn yazd\u0131rmay\u0131 etkinle\u015ftir\" , \"text\" : \"-enable-pretty-printing\" , \"ignoreFailures\" : true } ], \"preLaunchTask\" : \"C/C++: gcc.exe etkin dosyay\u0131 derle\" } ] } section{ font-size: 20px; }","title":"VSCode (Install / Compile / Run / Debug) (15)"},{"location":"week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-16","text":"task.json { \"tasks\" : [ { \"type\" : \"cppbuild\" , \"label\" : \"C/C++: gcc.exe etkin dosyay\u0131 derle\" , \"command\" : \"C:\\\\Program Files\\\\mingw-w64\\\\x86_64-8.1.0-win32-seh-rt_v6-rev0\\\\mingw64\\\\bin\\\\gcc.exe\" , \"args\" : [ \"-fdiagnostics-color=always\" , \"-g\" , \"${file}\" , \"-o\" , \"${fileDirname}\\\\${fileBasenameNoExtension}.exe\" ], \"options\" : { \"cwd\" : \"${fileDirname}\" }, \"problemMatcher\" : [ \"$gcc\" ], \"group\" : { \"kind\" : \"build\" , \"isDefault\" : true }, \"detail\" : \"Hata Ay\u0131klay\u0131c\u0131s\u0131 taraf\u0131ndan olu\u015fturulan g\u00f6rev.\" } ], \"version\" : \"2.0.0\" } section{ font-size: 20px; }","title":"VSCode (Install / Compile / Run / Debug) (16)"},{"location":"week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-17","text":"You can do the same thing for other compilers and C++ source codes. LLVM does not support debugging on vscode now. for C++ VsCode you can check the following links for Windows https://code.visualstudio.com/docs/cpp/config-mingw for Linux https://code.visualstudio.com/docs/cpp/config-linux for WSL https://code.visualstudio.com/docs/cpp/config-wsl section{ font-size: 25px; }","title":"VSCode (Install / Compile / Run / Debug) (17)"},{"location":"week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-18","text":"in the launch file if you start debugging with F5 (you can select debugger with CTRL+SHIFT+P and then write Debug and Selecting Configure Debugger Option) section{ font-size: 25px; }","title":"VSCode (Install / Compile / Run / Debug) (18)"},{"location":"week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-19","text":"the following line will be your debugging application path if you start debugging with F5 in Hello.c file this will set <Hello.c base path>/Hello.exe section{ font-size: 25px; }","title":"VSCode (Install / Compile / Run / Debug) (19)"},{"location":"week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-20","text":"You should set this correct for both LLVM and GCC configuration in launch.json \"program\" : \" ${ fileDirname } \\\\ ${ fileBasenameNoExtension } .exe\" , Also you should set your installed debugger paths for GCC \"miDebuggerPath\" : \"C:\\\\Program Files\\\\mingw-w64\\\\x86_64-8.1.0-win32-seh-rt_v6-rev0\\\\mingw64\\\\bin\\\\gdb.exe\" , for LLVM \"miDebuggerPath\" : \"C:\\\\Program Files\\\\LLVM\\\\bin\\\\lldb.exe\" , for more details please check the sample source codes. section{ font-size: 25px; }","title":"VSCode (Install / Compile / Run / Debug) (20)"},{"location":"week-2-setup/ce103-week-2-setup/#visual-studio-code-extension-list-1","text":"My Extension List Listing Installed Extensions PS C: \\U sers \\u gur.coruh \\D esktop> code --list-extensions | % { \"code --install-extension $_ \" } Following topic can help you How can you export the Visual Studio Code extension list? - Stack Overflow section{ font-size: 25px; }","title":"Visual Studio Code Extension List (1)"},{"location":"week-2-setup/ce103-week-2-setup/#visual-studio-code-extension-list-2","text":"code --install-extension 2gua.rainbow-brackets code --install-extension aaron-bond.better-comments code --install-extension abusaidm.html-snippets code --install-extension ACharLuk.easy-cpp-projects code --install-extension chris-noring.node-snippets code --install-extension cschlosser.doxdocgen code --install-extension csholmq.excel-to-markdown-table code --install-extension DaChuiOpenSource.FreeMind code --install-extension dannysteenman.cloudformation-yaml-snippets code --install-extension Dart-Code.dart-code code --install-extension Dart-Code.flutter code --install-extension digized.umple code --install-extension DotJoshJohnson.xml code --install-extension DougFinke.vscode-pandoc code --install-extension dzhavat.bracket-pair-toggler code --install-extension esbenp.prettier-vscode code --install-extension formulahendry.dotnet code --install-extension franneck94.c-cpp-runner code --install-extension gcc. section{ font-size: 25px; }","title":"Visual Studio Code Extension List (2)"},{"location":"week-2-setup/ce103-week-2-setup/#visual-studio-code-extension-list-3","text":"vscode-plugin-billionbottle code --install-extension geeklearningio.graphviz-markdown-preview code --install-extension geyao.html-snippets code --install-extension GitHub.copilot-nightly code --install-extension GrapeCity.gc-excelviewer code --install-extension Ionide.Ionide-fsharp code --install-extension ionut-botizan.vscode-cypher-ql code --install-extension ipedrazas.kubernetes-snippets code --install-extension JakeWilson.vscode-picture code --install-extension James-Yu.latex-workshop code --install-extension JasonMejane.base64viewer code --install-extension jasonnutter.search-node-modules code --install-extension jebbs.plantuml code --install-extension jeff-hykin.better-cpp-syntax code --install-extension Katacoda.vscode code --install-extension KenDomino.Antlrvsix-vscode code --install-extension l7ssha.tag-inserter code --install-extension lolkush.quickstart code --install-extension marp-team.marp-vscode code --install-extension mindaro-dev.file-downloader code --install-extension mindaro.mindaro code --install-extension ms-azuretools.vscode-docker code --install-extension MS-CEINTL.vscode-language-pack-tr section{ font-size: 25px; }","title":"Visual Studio Code Extension List (3)"},{"location":"week-2-setup/ce103-week-2-setup/#visual-studio-code-extension-list-4","text":"code --install-extension ms-dotnettools.csharp code --install-extension ms-dotnettools.dotnet-interactive-vscode code --install-extension ms-dotnettools.vscode-dotnet-pack code --install-extension ms-dotnettools.vscode-dotnet-runtime code --install-extension ms-kubernetes-tools.vscode-aks-tools code --install-extension ms-kubernetes-tools.vscode-kubernetes-tools code --install-extension ms-python.python code --install-extension ms-python.vscode-pylance code --install-extension ms-toolsai.jupyter code --install-extension ms-toolsai.jupyter-keymap code --install-extension ms-toolsai.jupyter-renderers code --install-extension ms-vscode-remote.remote-containers code --install-extension ms-vscode-remote.remote-ssh code --install-extension ms-vscode-remote.remote-ssh-edit code --install-extension ms-vscode-remote.remote-wsl section{ font-size: 25px; }","title":"Visual Studio Code Extension List (4)"},{"location":"week-2-setup/ce103-week-2-setup/#visual-studio-code-extension-list-5","text":"code --install-extension ms-vscode.azure-account code --install-extension ms-vscode.brackets-keybindings code --install-extension ms-vscode.brackets-pack code --install-extension ms-vscode.cmake-tools code --install-extension ms-vscode.cpptools code --install-extension ms-vscode.cpptools-extension-pack code --install-extension ms-vscode.cpptools-themes code --install-extension ms-vscode.live-server code --install-extension ms-vsliveshare.vsliveshare code --install-extension oleg-shilo.cs-script code --install-extension PascalReitermann93.vscode-yaml-sort section{ font-size: 25px; }","title":"Visual Studio Code Extension List (5)"},{"location":"week-2-setup/ce103-week-2-setup/#visual-studio-code-extension-list-6","text":"code --install-extension Pivotal.vscode-boot-dev-pack code --install-extension Pivotal.vscode-concourse code --install-extension Pivotal.vscode-manifest-yaml code --install-extension Pivotal.vscode-spring-boot code --install-extension PKief.material-icon-theme code --install-extension platformio.platformio-ide code --install-extension pranaygp.vscode-css-peek code --install-extension redhat.fabric8-analytics code --install-extension redhat.java code --install-extension redhat.vscode-commons code --install-extension redhat.vscode-xml code --install-extension redhat.vscode-yaml code --install-extension ritwickdey.LiveServer code --install-extension sidthesloth.html5-boilerplate code --install-extension TaodongWu.ejs-snippets code --install-extension tht13.python code --install-extension tomoki1207.pdf code --install-extension twxs.cmake code --install-extension vadimcn.vscode-lldb section{ font-size: 25px; }","title":"Visual Studio Code Extension List (6)"},{"location":"week-2-setup/ce103-week-2-setup/#visual-studio-code-extension-list-7","text":"code --install-extension VisualStudioExptTeam.intellicode-api-usage-examples code --install-extension VisualStudioExptTeam.vscodeintellicode code --install-extension vscjava.vscode-java-debug code --install-extension vscjava.vscode-java-dependency code --install-extension vscjava.vscode-java-pack code --install-extension vscjava.vscode-java-test code --install-extension vscjava.vscode-maven code --install-extension vscjava.vscode-spring-boot-dashboard code --install-extension vscjava.vscode-spring-initializr code --install-extension walkme.HTML5-extension-pack code --install-extension webfreak.debug code --install-extension well-ar.plantuml code --install-extension wildboar.asn1 code --install-extension Zignd.html-css-class-completion section{ font-size: 25px; }","title":"Visual Studio Code Extension List (7)"},{"location":"week-2-setup/ce103-week-2-setup/#visual-studio-community-edition-install-compile-run-debug-1","text":"Download and install Visual Studio Community Edition Select All Development Environments from Installer. \u00dccretsiz Geli\u015ftirici Yaz\u0131l\u0131mlar\u0131 ve Hizmetleri - Visual Studio section{ font-size: 25px; }","title":"Visual Studio Community Edition (Install / Compile / Run / Debug) (1)"},{"location":"week-2-setup/ce103-week-2-setup/#visual-studio-community-edition-install-compile-run-debug-2","text":"After installation open Visual Studio 2022` from the menu. section{ font-size: 25px; }","title":"Visual Studio Community Edition (Install / Compile / Run / Debug) (2)"},{"location":"week-2-setup/ce103-week-2-setup/#visual-studio-community-edition-install-compile-run-debug-3","text":"The application will start... section{ font-size: 25px; }","title":"Visual Studio Community Edition (Install / Compile / Run / Debug) (3)"},{"location":"week-2-setup/ce103-week-2-setup/#visual-studio-community-edition-install-compile-run-debug-4","text":"From Opening Window Select Create a new project section{ font-size: 25px; }","title":"Visual Studio Community Edition (Install / Compile / Run / Debug) (4)"},{"location":"week-2-setup/ce103-week-2-setup/#visual-studio-community-edition-install-compile-run-debug-5","text":"There will be several options, you can review them. Select Windows , C++ , Console Application from Combobox. Select Console Application section{ font-size: 25px; }","title":"Visual Studio Community Edition (Install / Compile / Run / Debug) (5)"},{"location":"week-2-setup/ce103-week-2-setup/#visual-studio-community-edition-install-compile-run-debug-6","text":"Give a solution and project name. Select save location section{ font-size: 25px; }","title":"Visual Studio Community Edition (Install / Compile / Run / Debug) (6)"},{"location":"week-2-setup/ce103-week-2-setup/#visual-studio-community-edition-install-compile-run-debug-7","text":"You will have C++ basic Hello World application. section{ font-size: 25px; }","title":"Visual Studio Community Edition (Install / Compile / Run / Debug) (7)"},{"location":"week-2-setup/ce103-week-2-setup/#visual-studio-community-edition-install-compile-run-debug-8","text":"You will have C++ basic Hello World application. // ConsoleApplication1.cpp : This file contains the 'main' function. Program execution begins and ends there. // #include <iostream> int main () { std :: cout << \"Hello World! \\n \" ; } // Run program: Ctrl + F5 or Debug > Start Without Debugging menu // Debug program: F5 or Debug > Start Debugging menu // Tips for Getting Started: // 1. Use the Solution Explorer window to add/manage files // 2. Use the Team Explorer window to connect to source control // 3. Use the Output window to see build output and other messages // 4. Use the Error List window to view errors // 5. Go to Project > Add New Item to create new code files, or Project > Add Existing Item to add existing code files to the project // 6. In the future, to open this project again, go to File > Open > Project and select the .sln file section{ font-size: 25px; }","title":"Visual Studio Community Edition (Install / Compile / Run / Debug) (8)"},{"location":"week-2-setup/ce103-week-2-setup/#visual-studio-community-edition-install-compile-run-debug-9","text":"We need to rename the file extension to c from cpp section{ font-size: 25px; }","title":"Visual Studio Community Edition (Install / Compile / Run / Debug) (9)"},{"location":"week-2-setup/ce103-week-2-setup/#visual-studio-community-edition-install-compile-run-debug-10","text":"If you compile the source C compiler will be used. section{ font-size: 25px; }","title":"Visual Studio Community Edition (Install / Compile / Run / Debug) (10)"},{"location":"week-2-setup/ce103-week-2-setup/#visual-studio-community-edition-install-compile-run-debug-11","text":"We need to update our source for C as follows // ConsoleApplication1.c : This file contains the 'main' function. Program execution begins and ends there. // #include <stdio.h> int main (){ printf ( \"Hello World! \\n \" ); } section{ font-size: 25px; }","title":"Visual Studio Community Edition (Install / Compile / Run / Debug) (11)"},{"location":"week-2-setup/ce103-week-2-setup/#visual-studio-community-edition-install-compile-run-debug-12","text":"We need to update our source for C as follows section{ font-size: 25px; }","title":"Visual Studio Community Edition (Install / Compile / Run / Debug) (12)"},{"location":"week-2-setup/ce103-week-2-setup/#visual-studio-community-edition-install-compile-run-debug-13","text":"Put a breakpoint by clicking the following location. Breakpoints will be stop points for our debugging operations. section{ font-size: 25px; }","title":"Visual Studio Community Edition (Install / Compile / Run / Debug) (13)"},{"location":"week-2-setup/ce103-week-2-setup/#visual-studio-community-edition-install-compile-run-debug-14","text":"Then select Debug configuration and according to your operating system select x64 or x86 configuration and click Local Windows Debugger section{ font-size: 25px; }","title":"Visual Studio Community Edition (Install / Compile / Run / Debug) (14)"},{"location":"week-2-setup/ce103-week-2-setup/#visual-studio-community-edition-install-compile-run-debug-15","text":"Update your source code as follow // ConsoleApplication1.c : This file contains the 'main' function. Program execution begins and ends there. // #include <stdio.h> int sum ( int input1 , int input2 ); int main (){ int number = 5 ; printf ( \"Before Increment : %d \\n \" , number ); number = sum ( number , 5 ); printf ( \"After Increment : %d \\n \" , number ); } int sum ( int input1 , int input2 ){ return input1 + input2 ; } section{ font-size: 25px; }","title":"Visual Studio Community Edition (Install / Compile / Run / Debug) (15)"},{"location":"week-2-setup/ce103-week-2-setup/#visual-studio-community-edition-install-compile-run-debug-16","text":"Put the following breakpoints and run the debugger. On number, the variable pins the variable to see its value in real-time. section{ font-size: 25px; }","title":"Visual Studio Community Edition (Install / Compile / Run / Debug) (16)"},{"location":"week-2-setup/ce103-week-2-setup/#visual-studio-community-edition-install-compile-run-debug-17","text":"Open Debug->Windows->Memory->Memory1 to see value in memory section{ font-size: 25px; }","title":"Visual Studio Community Edition (Install / Compile / Run / Debug) (17)"},{"location":"week-2-setup/ce103-week-2-setup/#visual-studio-community-edition-install-compile-run-debug-18","text":"In the memory window copy variable name (number) with address operator (&) and then (&number) press enter. section{ font-size: 25px; }","title":"Visual Studio Community Edition (Install / Compile / Run / Debug) (18)"},{"location":"week-2-setup/ce103-week-2-setup/#visual-studio-community-edition-install-compile-run-debug-19","text":"You can see its value in memory with hexadecimal form ( 05 00 00 00 ) section{ font-size: 25px; }","title":"Visual Studio Community Edition (Install / Compile / Run / Debug) (19)"},{"location":"week-2-setup/ce103-week-2-setup/#visual-studio-community-edition-install-compile-run-debug-20","text":"If you change value with pinned control your memory value and your current value will be updated. 20 in hexadecimal 0x14 (integer is 4 bytes length for this reason memory shows 14 00 00 00 ) section{ font-size: 25px; }","title":"Visual Studio Community Edition (Install / Compile / Run / Debug) (20)"},{"location":"week-2-setup/ce103-week-2-setup/#visual-studio-community-edition-install-compile-run-debug-21","text":"If you close some windows such as solution explorer, and properties windows you can open them from the View menu. section{ font-size: 25px; }","title":"Visual Studio Community Edition (Install / Compile / Run / Debug) (21)"},{"location":"week-2-setup/ce103-week-2-setup/#visual-studio-community-edition-install-compile-run-debug-22","text":"Solution and Projects have several configurations for each setup such as Release - x86, Release-x64, Debug- x86, and Debug-x64 you need to configure all of them for your requirements. You can access configurations by right-clicking to project and then selecting properties. section{ font-size: 25px; }","title":"Visual Studio Community Edition (Install / Compile / Run / Debug) (22)"},{"location":"week-2-setup/ce103-week-2-setup/#visual-studio-community-edition-install-compile-run-debug-23","text":"Project properties has several settings section{ font-size: 25px; }","title":"Visual Studio Community Edition (Install / Compile / Run / Debug) (23)"},{"location":"week-2-setup/ce103-week-2-setup/#notepad-install-compile-1","text":"Please download Notepad++ from the following link Downloads | Notepad++ section{ font-size: 25px; }","title":"Notepad++ (Install / Compile ) (1)"},{"location":"week-2-setup/ce103-week-2-setup/#notepad-install-compile-2","text":"Download and install MinGW or LLVM compiler (if you downloded then skip this step) MinGW installer (gcc / g++) A complete runtime environment for gcc https://sourceforge.net/projects/mingw-w64/ https://sourceforge.net/projects/mingw-w64/files/latest/download w64devkit is a portable C and C++ development kit for x64 (and x86) Windows. https://www.mingw-w64.org/downloads/#w64devkit Also, see the following notes https://www.hanshq.net/building-gcc.html section{ font-size: 25px; }","title":"Notepad++ (Install / Compile ) (2)"},{"location":"week-2-setup/ce103-week-2-setup/#notepad-install-compile-3","text":"LLVM installer (clang) Download https://releases.llvm.org/ Also, use the following notes https://llvm.org/devmtg/2014-04/PDFs/Talks/clang-cl.pdf https://www.hanshq.net/clang-plugin-example.html section{ font-size: 25px; }","title":"Notepad++ (Install / Compile ) (3)"},{"location":"week-2-setup/ce103-week-2-setup/#notepad-install-compile-4","text":"Open a console with \" cmd \" and test the following commands if commands are not recognized then set the system environment variable to add gcc and g++ executable paths to the path variable (add to both system and user path variable) gcc --version g++ --version C : \\Users\\ugur.coruh >gcc --version gcc (x86_64-win32-seh-rev0, Built by MinGW-W64 project) 8.1.0 Copyright (C) 2018 Free Software Foundation, Inc. This is free software; see the source for copying conditions. There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. section{ font-size: 25px; }","title":"Notepad++ (Install / Compile ) (4)"},{"location":"week-2-setup/ce103-week-2-setup/#notepad-install-compile-5","text":"Open system environments to update path variable for gcc/g++ and clang section{ font-size: 25px; }","title":"Notepad++ (Install / Compile ) (5)"},{"location":"week-2-setup/ce103-week-2-setup/#notepad-install-compile-6","text":"Open \"Environment Variables\" section{ font-size: 25px; }","title":"Notepad++ (Install / Compile ) (6)"},{"location":"week-2-setup/ce103-week-2-setup/#notepad-install-compile-7","text":"Select path variable from user section. section{ font-size: 25px; }","title":"Notepad++ (Install / Compile ) (7)"},{"location":"week-2-setup/ce103-week-2-setup/#notepad-install-compile-8","text":"Select path variable from system section. section{ font-size: 25px; }","title":"Notepad++ (Install / Compile ) (8)"},{"location":"week-2-setup/ce103-week-2-setup/#notepad-install-compile-9","text":"Update variables add MinGW and LLVM to path gcc.exe g++.exe clang.exe will be in bin folders. Then we can run this commands from command line. section{ font-size: 25px; }","title":"Notepad++ (Install / Compile ) (9)"},{"location":"week-2-setup/ce103-week-2-setup/#notepad-install-compile-9_1","text":"Update variables add MinGW and LLVM to path gcc.exe g++.exe clang.exe will be in bin folders. Then we can run this commands from command line. section{ font-size: 25px; }","title":"Notepad++ (Install / Compile ) (9)"},{"location":"week-2-setup/ce103-week-2-setup/#notepad-install-compile-10","text":"for gcc.exe , g++.exe and gdb.exe C: \\P rogram Files \\m ingw-w64 \\x 86_64-8.1.0-win32-seh-rt_v6-rev0 \\m ingw64 \\b in section{ font-size: 25px; }","title":"Notepad++ (Install / Compile ) (10)"},{"location":"week-2-setup/ce103-week-2-setup/#notepad-install-compile-11","text":"for clang.exe , lldb.exe we will use the following path C : \\Program Files\\LLVM\\bin section{ font-size: 25px; }","title":"Notepad++ (Install / Compile ) (11)"},{"location":"week-2-setup/ce103-week-2-setup/#notepad-install-compile-12","text":"This folder paths changes according to your setup Open NppExec extension (install from extension manager if not exist) section{ font-size: 25px; }","title":"Notepad++ (Install / Compile ) (12)"},{"location":"week-2-setup/ce103-week-2-setup/#notepad-install-compile-13","text":"Write the following commands in the box NPP_SAVE // save current file cd $(CURRENT_DIRECTORY) // go to directory of the current file gcc -Wall -Wextra -Wpedantic -std=c++11 -o \"$(NAME_PART)\" \"$(FILE_NAME)\" section{ font-size: 25px; }","title":"Notepad++ (Install / Compile ) (13)"},{"location":"week-2-setup/ce103-week-2-setup/#notepad-install-compile-14","text":"Save the script as gcc-build and for more information check the following link You can modify or add multiple scripts for another task. section{ font-size: 25px; }","title":"Notepad++ (Install / Compile ) (14)"},{"location":"week-2-setup/ce103-week-2-setup/#msys2","text":"Software Distribution and Building Platform for Windows https://www.msys2.org/ section{ font-size: 25px; }","title":"MSYS2"},{"location":"week-2-setup/ce103-week-2-setup/#vivim-cc-for-windows-1","text":"Vim is a command-line editor for programming Use the following links to download Vim for Windows https://github.com/vim/vim-win32-installer/releases download : vim online section{ font-size: 25px; }","title":"Vi/Vim (C/C++) for Windows (1)"},{"location":"week-2-setup/ce103-week-2-setup/#vivim-cc-for-windows-2","text":"Run setup to install the application on your computer. section{ font-size: 25px; }","title":"Vi/Vim (C/C++) for Windows (2)"},{"location":"week-2-setup/ce103-week-2-setup/#vivim-cc-for-windows-3","text":"section{ font-size: 25px; }","title":"Vi/Vim (C/C++) for Windows (3)"},{"location":"week-2-setup/ce103-week-2-setup/#vivim-cc-for-windows-4","text":"Installation steps. section{ font-size: 25px; }","title":"Vi/Vim (C/C++) for Windows (4)"},{"location":"week-2-setup/ce103-week-2-setup/#vivim-cc-for-windows-5","text":"Installation steps. section{ font-size: 25px; }","title":"Vi/Vim (C/C++) for Windows (5)"},{"location":"week-2-setup/ce103-week-2-setup/#vivim-cc-for-windows-6","text":"Installation steps. section{ font-size: 25px; }","title":"Vi/Vim (C/C++) for Windows (6)"},{"location":"week-2-setup/ce103-week-2-setup/#vivim-cc-for-windows-7","text":"Installation steps. section{ font-size: 25px; }","title":"Vi/Vim (C/C++) for Windows (7)"},{"location":"week-2-setup/ce103-week-2-setup/#vivim-cc-for-windows-8","text":"Installation steps. section{ font-size: 25px; }","title":"Vi/Vim (C/C++) for Windows (8)"},{"location":"week-2-setup/ce103-week-2-setup/#vivim-cc-for-windows-9","text":"Installation steps. section{ font-size: 25px; }","title":"Vi/Vim (C/C++) for Windows (9)"},{"location":"week-2-setup/ce103-week-2-setup/#vivim-cc-for-windows-10","text":"Generated shortcuts on your desktop section{ font-size: 25px; }","title":"Vi/Vim (C/C++) for Windows (10)"},{"location":"week-2-setup/ce103-week-2-setup/#vivim-cc-for-windows-11","text":"Run vim hello.c on your command-line to open a c file with vim editor. section{ font-size: 25px; }","title":"Vi/Vim (C/C++) for Windows (11)"},{"location":"week-2-setup/ce103-week-2-setup/#vivim-cc-for-windows-12","text":"You will have the following editor. Use INSERT to change edit options. section{ font-size: 25px; }","title":"Vi/Vim (C/C++) for Windows (12)"},{"location":"week-2-setup/ce103-week-2-setup/#vivim-cc-for-windows-13","text":"Sample source code #include <stdio.h> int main () { char name [ 20 ]; printf ( \"Enter Name:\" ); scanf ( \"%s\" , name ); printf ( \"Your name is %s\" , name ); return 0 ; } section{ font-size: 25px; }","title":"Vi/Vim (C/C++) for Windows (13)"},{"location":"week-2-setup/ce103-week-2-setup/#vivim-cc-for-windows-14","text":"Write source code Press the Esc button to enter command mode Then type :wq . It will save the file and exit from Vim w: write q: quit section{ font-size: 25px; }","title":"Vi/Vim (C/C++) for Windows (14)"},{"location":"week-2-setup/ce103-week-2-setup/#vivim-cc-for-windows-15","text":"compile source code with gcc link the objects and run executable section{ font-size: 25px; }","title":"Vi/Vim (C/C++) for Windows (15)"},{"location":"week-2-setup/ce103-week-2-setup/#vivim-cc-for-windows-17","text":"In the folder, you can find your executable. hello.exe section{ font-size: 25px; }","title":"Vi/Vim (C/C++) for Windows (17)"},{"location":"week-2-setup/ce103-week-2-setup/#vivim-cc-for-windows-16","text":"compile, link and execute flow will be as follow; section{ font-size: 25px; }","title":"Vi/Vim (C/C++) for Windows (16)"},{"location":"week-2-setup/ce103-week-2-setup/#eclipse-cc-compile-only-debugging-has-problem-1","text":"Download and install Eclipse IDE from the following link Eclipse IDE for C/C++ Developers | Eclipse Packages Run Installer Select Eclipse IDE for C/C++ Developers section{ font-size: 25px; }","title":"Eclipse (C/C++) - Compile Only / Debugging Has Problem (1)"},{"location":"week-2-setup/ce103-week-2-setup/#eclipse-cc-compile-only-debugging-has-problem-2","text":"Select Java Version and Installation Path section{ font-size: 25px; }","title":"Eclipse (C/C++) - Compile Only / Debugging Has Problem (2)"},{"location":"week-2-setup/ce103-week-2-setup/#eclipse-cc-compile-only-debugging-has-problem-3","text":"After installation you can LAUNCH eclipse IDE section{ font-size: 25px; }","title":"Eclipse (C/C++) - Compile Only / Debugging Has Problem (3)"},{"location":"week-2-setup/ce103-week-2-setup/#eclipse-cc-compile-only-debugging-has-problem-4","text":"section{ font-size: 25px; }","title":"Eclipse (C/C++) - Compile Only / Debugging Has Problem (4)"},{"location":"week-2-setup/ce103-week-2-setup/#eclipse-cc-compile-only-debugging-has-problem-5","text":"Select a workspace that your project will be saved section{ font-size: 25px; }","title":"Eclipse (C/C++) - Compile Only / Debugging Has Problem (5)"},{"location":"week-2-setup/ce103-week-2-setup/#eclipse-cc-compile-only-debugging-has-problem-6","text":"You can find your installation under your user folder section{ font-size: 25px; }","title":"Eclipse (C/C++) - Compile Only / Debugging Has Problem (6)"},{"location":"week-2-setup/ce103-week-2-setup/#eclipse-cc-compile-only-debugging-has-problem-7","text":"You can create shortcut to desktop for your working eclipse version. section{ font-size: 25px; }","title":"Eclipse (C/C++) - Compile Only / Debugging Has Problem (7)"},{"location":"week-2-setup/ce103-week-2-setup/#eclipse-cc-compile-only-debugging-has-problem-8","text":"File -> New -> Project section{ font-size: 25px; }","title":"Eclipse (C/C++) - Compile Only / Debugging Has Problem (8)"},{"location":"week-2-setup/ce103-week-2-setup/#eclipse-cc-compile-only-debugging-has-problem-9","text":"Select C/C++ Project section{ font-size: 25px; }","title":"Eclipse (C/C++) - Compile Only / Debugging Has Problem (9)"},{"location":"week-2-setup/ce103-week-2-setup/#eclipse-cc-compile-only-debugging-has-problem-10","text":"Select C Managed Build, Eclipse CDT will do job for us. section{ font-size: 25px; }","title":"Eclipse (C/C++) - Compile Only / Debugging Has Problem (10)"},{"location":"week-2-setup/ce103-week-2-setup/#eclipse-cc-compile-only-debugging-has-problem-11","text":"Give project name and select a basic template executable with MinGW GCC. section{ font-size: 25px; }","title":"Eclipse (C/C++) - Compile Only / Debugging Has Problem (11)"},{"location":"week-2-setup/ce103-week-2-setup/#eclipse-cc-compile-only-debugging-has-problem-12","text":"Configura Basic Settings section{ font-size: 25px; }","title":"Eclipse (C/C++) - Compile Only / Debugging Has Problem (12)"},{"location":"week-2-setup/ce103-week-2-setup/#eclipse-cc-compile-only-debugging-has-problem-13","text":"There are default Debug and Release configurations you can add your customized configurations from Advanced Settings. section{ font-size: 25px; }","title":"Eclipse (C/C++) - Compile Only / Debugging Has Problem (13)"},{"location":"week-2-setup/ce103-week-2-setup/#eclipse-cc-compile-only-debugging-has-problem-14","text":"Project settings will be C Select Debug/Release configuration and then Build Application Project->Build All (Ctrl+B) HelloWorldC.exe will be generated gcc -O0 -g3 -Wall -c -fmessage-length = 0 -o \"src\\\\HelloWorldC.o\" \"..\\\\src\\\\HelloWorldC.c\" gcc -o HelloWorldC.exe \"src\\\\HelloWorldC.o\" section{ font-size: 25px; }","title":"Eclipse (C/C++) - Compile Only / Debugging Has Problem (14)"},{"location":"week-2-setup/ce103-week-2-setup/#eclipse-cc-compile-only-debugging-has-problem-15","text":"Before build if you want to debug application select debug configuration, put your breakpoints and then Build application again. Right click the generated executable Debug As -> Local C/C++ Application section{ font-size: 25px; }","title":"Eclipse (C/C++) - Compile Only / Debugging Has Problem (15)"},{"location":"week-2-setup/ce103-week-2-setup/#eclipse-cc-compile-only-debugging-has-problem-16","text":"Debugger will start and stop at breakpoint as follow. section{ font-size: 25px; }","title":"Eclipse (C/C++) - Compile Only / Debugging Has Problem (16)"},{"location":"week-2-setup/ce103-week-2-setup/#eclipse-cc-compile-only-debugging-has-problem-16_1","text":"Check debug control shortcuts and use them section{ font-size: 25px; }","title":"Eclipse (C/C++) - Compile Only / Debugging Has Problem (16)"},{"location":"week-2-setup/ce103-week-2-setup/#eclipse-cc-compile-only-debugging-has-problem-17","text":"To watch variables use Expressions and Variables section{ font-size: 25px; }","title":"Eclipse (C/C++) - Compile Only / Debugging Has Problem (17)"},{"location":"week-2-setup/ce103-week-2-setup/#eclipse-cc-compile-only-debugging-has-problem-18","text":"section{ font-size: 25px; }","title":"Eclipse (C/C++) - Compile Only / Debugging Has Problem (18)"},{"location":"week-2-setup/ce103-week-2-setup/#eclipse-cc-compile-only-debugging-has-problem-19","text":"for more visit eclipse webpage Effective Techniques for Debugging C & C++ | The Eclipse Foundation Help - Eclipse IDE section{ font-size: 25px; }","title":"Eclipse (C/C++) - Compile Only / Debugging Has Problem (19)"},{"location":"week-2-setup/ce103-week-2-setup/#eclipse-cc-compile-only-debugging-has-problem-20","text":"Generate CMAKE project from new Project and Select CMake Project Template section{ font-size: 25px; }","title":"Eclipse (C/C++) - Compile Only / Debugging Has Problem (20)"},{"location":"week-2-setup/ce103-week-2-setup/#eclipse-cc-compile-only-debugging-has-problem-21","text":"Give project name section{ font-size: 25px; }","title":"Eclipse (C/C++) - Compile Only / Debugging Has Problem (21)"},{"location":"week-2-setup/ce103-week-2-setup/#eclipse-cc-compile-only-debugging-has-problem-22","text":"This will generate default C++ Hello World project section{ font-size: 25px; }","title":"Eclipse (C/C++) - Compile Only / Debugging Has Problem (22)"},{"location":"week-2-setup/ce103-week-2-setup/#eclipse-cc-compile-only-debugging-has-problem-23","text":"Build Project section{ font-size: 25px; }","title":"Eclipse (C/C++) - Compile Only / Debugging Has Problem (23)"},{"location":"week-2-setup/ce103-week-2-setup/#eclipse-cc-compile-only-debugging-has-problem-24","text":"It will give following errors, for missing configurations. This errors are generated by CMAKE Then clean and rebuild again. Errors occurred during the build. Errors running builder 'CDT Core Builder' on project 'HelloWorldCmakeC'. Resource '/HelloWorldCmakeC/build/cmake.debug.win32.x86 _ 64/compile _ commands.json' does not exist. Resource '/HelloWorldCmakeC/build/cmake.debug.win32.x86 _ 64/compile _ commands.json' does not exist. Resource '/HelloWorldCmakeC/build/cmake.debug.win32.x86 _ 64/compile _ commands.json' does not exist. Resource '/HelloWorldCmakeC/build/cmake.debug.win32.x86 _ 64/compile _ commands.json' does not exist. section{ font-size: 25px; }","title":"Eclipse (C/C++) - Compile Only / Debugging Has Problem (24)"},{"location":"week-2-setup/ce103-week-2-setup/#eclipse-cc-compile-only-debugging-has-problem-25","text":"section{ font-size: 25px; }","title":"Eclipse (C/C++) - Compile Only / Debugging Has Problem (25)"},{"location":"week-2-setup/ce103-week-2-setup/#eclipse-cc-compile-only-debugging-has-problem-26","text":"After this operation first Clean project from Project menu and then Build All again section{ font-size: 25px; }","title":"Eclipse (C/C++) - Compile Only / Debugging Has Problem (26)"},{"location":"week-2-setup/ce103-week-2-setup/#eclipse-cc-compile-only-debugging-has-problem-27","text":"Eclipse with CMake project on windows JV - Science and stuff. section{ font-size: 25px; }","title":"Eclipse (C/C++) - Compile Only / Debugging Has Problem (27)"},{"location":"week-2-setup/ce103-week-2-setup/#eclipse-cc-compile-only-debugging-has-problem-28","text":"section{ font-size: 25px; }","title":"Eclipse (C/C++) - Compile Only / Debugging Has Problem (28)"},{"location":"week-2-setup/ce103-week-2-setup/#eclipse-cc-compile-only-debugging-has-problem-29","text":"section{ font-size: 25px; }","title":"Eclipse (C/C++) - Compile Only / Debugging Has Problem (29)"},{"location":"week-2-setup/ce103-week-2-setup/#netbeans-cc-manuel-buildcleanrun-command-setting-not-good-option-for-cc-development-1","text":"https://netbeans.apache.org/ C and C++ Tutorials section{ font-size: 25px; }","title":"Netbeans (C/C++) - Manuel Build/Clean/Run Command Setting Not Good Option for C/C++ Development (1)"},{"location":"week-2-setup/ce103-week-2-setup/#netbeans-cc-manuel-buildcleanrun-command-setting-not-good-option-for-cc-development-2","text":"section{ font-size: 25px; }","title":"Netbeans (C/C++) - Manuel Build/Clean/Run Command Setting Not Good Option for C/C++ Development (2)"},{"location":"week-2-setup/ce103-week-2-setup/#netbeans-cc-manuel-buildcleanrun-command-setting-not-good-option-for-cc-development-3","text":"section{ font-size: 25px; }","title":"Netbeans (C/C++) - Manuel Build/Clean/Run Command Setting Not Good Option for C/C++ Development (3)"},{"location":"week-2-setup/ce103-week-2-setup/#netbeans-cc-manuel-buildcleanrun-command-setting-not-good-option-for-cc-development-4","text":"section{ font-size: 25px; }","title":"Netbeans (C/C++) - Manuel Build/Clean/Run Command Setting Not Good Option for C/C++ Development (4)"},{"location":"week-2-setup/ce103-week-2-setup/#netbeans-cc-manuel-buildcleanrun-command-setting-not-good-option-for-cc-development-5","text":"section{ font-size: 25px; }","title":"Netbeans (C/C++) - Manuel Build/Clean/Run Command Setting Not Good Option for C/C++ Development (5)"},{"location":"week-2-setup/ce103-week-2-setup/#netbeans-cc-manuel-buildcleanrun-command-setting-not-good-option-for-cc-development-6","text":"section{ font-size: 25px; }","title":"Netbeans (C/C++) - Manuel Build/Clean/Run Command Setting Not Good Option for C/C++ Development (6)"},{"location":"week-2-setup/ce103-week-2-setup/#netbeans-cc-manuel-buildcleanrun-command-setting-not-good-option-for-cc-development-7","text":"section{ font-size: 25px; }","title":"Netbeans (C/C++) - Manuel Build/Clean/Run Command Setting Not Good Option for C/C++ Development (7)"},{"location":"week-2-setup/ce103-week-2-setup/#netbeans-cc-manuel-buildcleanrun-command-setting-not-good-option-for-cc-development-8","text":"section{ font-size: 25px; }","title":"Netbeans (C/C++) - Manuel Build/Clean/Run Command Setting Not Good Option for C/C++ Development (8)"},{"location":"week-2-setup/ce103-week-2-setup/#turbo-cc-1","text":"Download Turbo.C.3.2.zip Download Turbo C++ for Windows 7, 8, 8.1, 10 and Windows 11 (32-64 bit) with full/window screen mode and many more extra features Turbo C++ Shortcuts - C Programming Language Tutorials section{ font-size: 25px; }","title":"Turbo C/C++ (1)"},{"location":"week-2-setup/ce103-week-2-setup/#turbo-cc-2","text":"section{ font-size: 25px; }","title":"Turbo C/C++ (2)"},{"location":"week-2-setup/ce103-week-2-setup/#cmake-cc-1","text":"CMake ( http://www.cmake.org/ ) is a program which generates the Makefiles used by Make . section{ font-size: 25px; }","title":"Cmake (C++/C) (1)"},{"location":"week-2-setup/ce103-week-2-setup/#cmake-cc-2","text":"Why use CMake ? Eases Make use but the same way of thinking generate the Makefile Separate the compilation from the sources Multi-platfoms Very flexible section{ font-size: 25px; }","title":"Cmake (C++/C) (2)"},{"location":"week-2-setup/ce103-week-2-setup/#cmake-cc-3","text":"Check if the libraries/programs are available on your system File generator ( configure_file ) Calling programs or scripts ( doxygen ) One of the new standards section{ font-size: 25px; }","title":"Cmake (C++/C) (3)"},{"location":"week-2-setup/ce103-week-2-setup/#cmake-cc-4-download-and-install","text":"use the following link for download Download | CMake section{ font-size: 25px; }","title":"Cmake (C++/C) (4) (Download and Install)"},{"location":"week-2-setup/ce103-week-2-setup/#cmake-cc-5-wsl-and-linux-environment","text":"Hello world with CMake section{ font-size: 25px; }","title":"Cmake (C++/C) (5) (WSL and Linux Environment)"},{"location":"week-2-setup/ce103-week-2-setup/#cmake-cc-6-windows-environment","text":"main.c #include <stdio.h> int main () { char name [ 20 ]; printf ( \"Enter name: \" ); scanf ( \"%s\" , name ); printf ( \"Your name is %s.\" , name ); return 0 ; } CMakeLists.txt cmake_minimum_required ( VERSION 3.7.2 ) project ( scanf-sample ) add_executable ( scanf-sample main.c ) section{ font-size: 25px; }","title":"Cmake (C++/C) (6) (Windows Environment)"},{"location":"week-2-setup/ce103-week-2-setup/#cmake-cc-7-windows-environment","text":"put main.c and CMakeLists.txt file in sample-scanf folder and from command line run the following cmake command with dot (.) to create solution file for c project C : \\Users\\ugur.coruh\\Desktop\\sample-scanf >cmake . section{ font-size: 25px; }","title":"Cmake (C++/C) (7) (Windows Environment)"},{"location":"week-2-setup/ce103-week-2-setup/#cmake-cc-8-windows-environment","text":"I have Visual Studio 2022 Community Edition Installed on My Computer, for these reason build tools are selected for visual studio environment and the following outputs are generated C : \\Users\\ugur.coruh\\Desktop\\sample-scanf >cmake . -- Building for: Visual Studio 17 2022 -- Selecting Windows SDK version 10.0.22000.0 to target Windows 10.0.19043. -- The C compiler identification is MSVC 19.30.30704.0 -- The CXX compiler identification is MSVC 19.30.30704.0 -- Detecting C compiler ABI info -- Detecting C compiler ABI info - done -- Check for working C compiler: C:/Program Files/Microsoft Visual Studio/2022/Community/VC/Tools/MSVC/14.30.30704/bin/Hostx64/x64/cl.exe - skipped -- Detecting C compile features -- Detecting C compile features - done -- Detecting CXX compiler ABI info -- Detecting CXX compiler ABI info - done -- Check for working CXX compiler: C:/Program Files/Microsoft Visual Studio/2022/Community/VC/Tools/MSVC/14.30.30704/bin/Hostx64/x64/cl.exe - skipped -- Detecting CXX compile features -- Detecting CXX compile features - done -- Configuring done -- Generating done -- Build files have been written to: C:/Users/ugur.coruh/Desktop/sample-scanf C : \\Users\\ugur.coruh\\Desktop\\sample-scanf > section{ font-size: 25px; }","title":"Cmake (C++/C) (8) (Windows Environment)"},{"location":"week-2-setup/ce103-week-2-setup/#cmake-cc-9-windows-environment","text":"also following files are generated section{ font-size: 25px; }","title":"Cmake (C++/C) (9) (Windows Environment)"},{"location":"week-2-setup/ce103-week-2-setup/#cmake-cc-10-windows-environment","text":"if we open scanf-sample.sln file we will have automated generated project files section{ font-size: 25px; }","title":"Cmake (C++/C) (10) (Windows Environment)"},{"location":"week-2-setup/ce103-week-2-setup/#cmake-cc-11-windows-environment","text":"you can make scanf-sample with startup project with right click and then run on visual studio. if you want to configure for another build tool you can use Cmake-GUI installed with setup on your computer section{ font-size: 25px; }","title":"Cmake (C++/C) (11) (Windows Environment)"},{"location":"week-2-setup/ce103-week-2-setup/#cmake-cc-12-windows-environment","text":"Open GUI and Select File-> Delete Cache section{ font-size: 25px; }","title":"Cmake (C++/C) (12) (Windows Environment)"},{"location":"week-2-setup/ce103-week-2-setup/#cmake-cc-13-windows-environment","text":"then you can click \"Configure\" to select build tool section{ font-size: 25px; }","title":"Cmake (C++/C) (13) (Windows Environment)"},{"location":"week-2-setup/ce103-week-2-setup/#cmake-cc-14-windows-environment","text":"section{ font-size: 25px; }","title":"Cmake (C++/C) (14) (Windows Environment)"},{"location":"week-2-setup/ce103-week-2-setup/#cmake-cc-15-windows-environment","text":"if you click \"Configure\" twice it will generate the visual studio solution in build folder for more detailed examples that include also docker and travis-ci sample you can check the following repo GitHub - ttroy50/cmake-examples: Useful CMake Examples section{ font-size: 25px; }","title":"Cmake (C++/C) (15) (Windows Environment)"},{"location":"week-2-setup/ce103-week-2-setup/#make-1","text":"Sample hello.c #include <stdio.h> int main ( void ) { printf ( \"hello, world \\n \" ); } section{ font-size: 25px; }","title":"Make (1)"},{"location":"week-2-setup/ce103-week-2-setup/#make-2","text":"Makefile # This is the default target, which will be built when # you invoke make .PHONY : all all : hello # This rule tells make how to build hello from hello.cpp hello : hello . c g++ -o hello hello.c # This rule tells make to copy hello to the binaries subdirectory, # creating it if necessary .PHONY : install install : mkdir -p binaries cp -p hello binaries # This rule tells make to delete hello and hello.o .PHONY : clean clean : rm -f hello section{ font-size: 25px; }","title":"Make (2)"},{"location":"week-2-setup/ce103-week-2-setup/#make-3","text":"compile.bat make all . will create hello.exe check hello-make sample section{ font-size: 25px; }","title":"Make (3)"},{"location":"week-2-setup/ce103-week-2-setup/#make-4","text":"section{ font-size: 25px; }","title":"Make (4)"},{"location":"week-2-setup/ce103-week-2-setup/#java-environment-and-development","text":"","title":"JAVA Environment and Development"},{"location":"week-2-setup/ce103-week-2-setup/#jdk-and-jre-setup-1","text":"section{ font-size: 25px; }","title":"JDK and JRE Setup (1)"},{"location":"week-2-setup/ce103-week-2-setup/#jdk-and-jre-setup-2","text":"JDK (Java Development Kit) is a Kit that provides the environment to develop and execute(run) the Java program. JDK is a kit(or package) that includes two things Development Tools(to provide an environment to develop your java programs) JRE (to execute your java program). JRE (Java Runtime Environment) is an installation package that provides an environment to only run(not develop) the java program(or application)onto your machine. JRE is only used by those who only want to run Java programs that are end-users of your system. JVM ( Java Virtual Machine) is a very important part of both JDK and JRE because it is contained or inbuilt in both. Whatever Java program you run using JRE or JDK goes into JVM and JVM is responsible for executing the java program line by line, hence it is also known as an **i*****nterpreter*** . Difference between JDK, JRE, JVM - TutorialAndExample section{ font-size: 25px; }","title":"JDK and JRE Setup (2)"},{"location":"week-2-setup/ce103-week-2-setup/#system-environments-and-paths-for-java-1","text":"","title":"System Environments and Paths for Java (1)"},{"location":"week-2-setup/ce103-week-2-setup/#system-environments-and-paths-for-java-2","text":"Select path variable (JDK should be set there)","title":"System Environments and Paths for Java (2)"},{"location":"week-2-setup/ce103-week-2-setup/#system-environments-and-paths-for-java-3","text":"JAVA_HOME also should be set section{ font-size: 25px; }","title":"System Environments and Paths for Java (3)"},{"location":"week-2-setup/ce103-week-2-setup/#netbeans-java-1","text":"Open New Project -> Java Project section{ font-size: 25px; }","title":"Netbeans (Java) (1)"},{"location":"week-2-setup/ce103-week-2-setup/#netbeans-java-2","text":"section{ font-size: 25px; }","title":"Netbeans (Java) (2)"},{"location":"week-2-setup/ce103-week-2-setup/#netbeans-java-3","text":"section{ font-size: 25px; }","title":"Netbeans (Java) (3)"},{"location":"week-2-setup/ce103-week-2-setup/#netbeans-java-4","text":"section{ font-size: 25px; }","title":"Netbeans (Java) (4)"},{"location":"week-2-setup/ce103-week-2-setup/#netbeans-java-5","text":"section{ font-size: 25px; }","title":"Netbeans (Java) (5)"},{"location":"week-2-setup/ce103-week-2-setup/#netbeans-java-6","text":"Update code and run /* * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template */ package com.ucoruh.mavenproject1 ; /** * * @author ugur.coruh */ public class NewClass { static //static block { System . out . println ( \"Static block\" ); } public static void main ( String args [] ) //static method { System . out . println ( \"Static method\" ); } } section{ font-size: 25px; }","title":"Netbeans (Java) (6)"},{"location":"week-2-setup/ce103-week-2-setup/#netbeans-java-7","text":"section{ font-size: 25px; }","title":"Netbeans (Java) (7)"},{"location":"week-2-setup/ce103-week-2-setup/#netbeans-java-8","text":"section{ font-size: 25px; }","title":"Netbeans (Java) (8)"},{"location":"week-2-setup/ce103-week-2-setup/#netbeans-java-9","text":"section{ font-size: 25px; }","title":"Netbeans (Java) (9)"},{"location":"week-2-setup/ce103-week-2-setup/#netbeans-java-10","text":"section{ font-size: 25px; }","title":"Netbeans (Java) (10)"},{"location":"week-2-setup/ce103-week-2-setup/#eclipse-java-1","text":"Select File -> New Project section{ font-size: 25px; }","title":"Eclipse (Java) (1)"},{"location":"week-2-setup/ce103-week-2-setup/#eclipse-java-2","text":"section{ font-size: 25px; }","title":"Eclipse (Java) (2)"},{"location":"week-2-setup/ce103-week-2-setup/#eclipse-java-3","text":"section{ font-size: 25px; }","title":"Eclipse (Java) (3)"},{"location":"week-2-setup/ce103-week-2-setup/#eclipse-java-4","text":"section{ font-size: 25px; }","title":"Eclipse (Java) (4)"},{"location":"week-2-setup/ce103-week-2-setup/#eclipse-java-5","text":"section{ font-size: 25px; }","title":"Eclipse (Java) (5)"},{"location":"week-2-setup/ce103-week-2-setup/#eclipse-java-6","text":"Update source package ucoruh ; public class HelloClass { static { System . out . println ( \"Static Block\" ); } public static void main ( String [] args ) { // TODO Auto-generated method stub System . out . println ( \"Static Method\" ); } } section{ font-size: 25px; }","title":"Eclipse (Java) (6)"},{"location":"week-2-setup/ce103-week-2-setup/#eclipse-java-7","text":"section{ font-size: 25px; }","title":"Eclipse (Java) (7)"},{"location":"week-2-setup/ce103-week-2-setup/#eclipse-java-8","text":"section{ font-size: 25px; }","title":"Eclipse (Java) (8)"},{"location":"week-2-setup/ce103-week-2-setup/#intellij-idea-jet-brains-java","text":"Download IntelliJ IDEA: The Capable & Ergonomic Java IDE by JetBrains Select Community Version or Student Ultimate Version section{ font-size: 25px; }","title":"Intellij Idea (Jet Brains) (Java)"},{"location":"week-2-setup/ce103-week-2-setup/#vscode-java","text":"Java Extension Run&Debug Java Files section{ font-size: 25px; }","title":"VSCode (Java)"},{"location":"week-2-setup/ce103-week-2-setup/#notepad-java","text":"How to Compile and Run Java Programs Using Notepad++ section{ font-size: 25px; }","title":"Notepad++ (Java)"},{"location":"week-2-setup/ce103-week-2-setup/#cmake-java","text":"UseJava \u2014 CMake 3.24.2 Documentation GitHub - ptitpoulpe/cmake-swig-java-example: An example of combining cmake, swig and java section{ font-size: 25px; }","title":"Cmake (Java)"},{"location":"week-2-setup/ce103-week-2-setup/#c-environment-and-development","text":"section{ font-size: 25px; }","title":"C# Environment and Development"},{"location":"week-2-setup/ce103-week-2-setup/#visual-studio-community-edition-c","text":"//TODO// section{ font-size: 25px; }","title":"Visual Studio Community Edition (C#)"},{"location":"week-2-setup/ce103-week-2-setup/#notepad-c","text":"This use command-line utilities for csharp, nppexec should be configured for this utility. Compiling/Executing a C# Source File in Command Prompt - Stack Overflow c: \\w indows \\M icrosoft.NET \\F ramework \\v 3 .5 \\ c: \\w indows \\M icrosoft.NET \\F ramework \\v 3 .5 \\b in \\c sc.exe /t:exe /out:MyApplication.exe MyApplication.cs ... section{ font-size: 25px; }","title":"Notepad++ (C#)"},{"location":"week-2-setup/ce103-week-2-setup/#cmake-c","text":"GitHub - crud89/DotNetWithCMake: Your swiss army knife for creating .NET assemblies with CMake and integrating unmanaged code. section{ font-size: 25px; }","title":"Cmake (C#)"},{"location":"week-2-setup/ce103-week-2-setup/#common-tools-and-platforms","text":"section{ font-size: 25px; }","title":"Common Tools and Platforms"},{"location":"week-2-setup/ce103-week-2-setup/#fatih-kalem","text":"https://cdnvideo.eba.gov.tr/fatihkalem/fatihkalem_portable.zip https://cdnvideo.eba.gov.tr/fatihkalem/fatihkalem_setup.exe section{ font-size: 25px; }","title":"Fatih Kalem"},{"location":"week-2-setup/ce103-week-2-setup/#notepad-notepad-for-source-code","text":"Downloads | Notepad++ section{ font-size: 25px; }","title":"Notepad++ (Notepad for Source Code)"},{"location":"week-2-setup/ce103-week-2-setup/#hxd-hex-editor","text":"HxD - Freeware Hex Editor and Disk Editor | mh-nexus section{ font-size: 25px; }","title":"HxD (Hex Editor)"},{"location":"week-2-setup/ce103-week-2-setup/#marktextapp-markdown-syntax-editor","text":"https://marktext.app/ https://github.com/marktext/marktext/releases Download latest version https://github.com/marktext/marktext/releases/tag/v0.17.1 section{ font-size: 25px; }","title":"MarktextApp (Markdown Syntax Editor)"},{"location":"week-2-setup/ce103-week-2-setup/#cygwin-linux-environment-for-windows","text":"https://www.cygwin.com/ section{ font-size: 25px; }","title":"Cygwin (Linux environment for Windows)"},{"location":"week-2-setup/ce103-week-2-setup/#dependency-walker-32-bit-or-64-bit-windows-module-dependency-checker","text":"https://www.dependencywalker.com/ section{ font-size: 25px; }","title":"Dependency Walker (32-bit or 64-bit Windows module dependency checker)"},{"location":"week-2-setup/ce103-week-2-setup/#doxygen-code-documentation","text":"Doxygen: Doxygen section{ font-size: 25px; }","title":"Doxygen (Code Documentation)"},{"location":"week-2-setup/ce103-week-2-setup/#sonarlint-code-quality-and-code-security-extension","text":"https://www.sonarlint.org/ section{ font-size: 25px; }","title":"Sonarlint (Code Quality and Code Security Extension)"},{"location":"week-2-setup/ce103-week-2-setup/#codepenio-online-code-sharing","text":"https://codepen.io/ CodePen is a social development environment. At its heart, it allows you to write code in the browser, and see the results of it as you build. A useful and liberating online code editor for developers of any skill, and particularly empowering for people learning to code. We focus primarily on front-end languages like HTML, CSS, JavaScript, and preprocessing syntaxes that turn into those things section{ font-size: 25px; }","title":"Codepen.io (online code sharing)"},{"location":"week-2-setup/ce103-week-2-setup/#codepenio-online-code-sharing_1","text":"Credit Card Sample on Codepen https://codepen.io/quinlo/pen/YONMEa Checkout trends https://codepen.io/trending section{ font-size: 25px; }","title":"Codepen.io (online code sharing)"},{"location":"week-2-setup/ce103-week-2-setup/#codeshareio-real-time-code-sharing","text":"https://codeshare.io/ Share Code in Real-time with Developers, An online code editor for interviews, troubleshooting, teaching & more\u2026 section{ font-size: 25px; }","title":"Codeshare.io (real-time code sharing)"},{"location":"week-2-setup/ce103-week-2-setup/#codebeautifyorg-online-data-conversion-tools","text":"Has several tools for developers (Code Formatter, JSON Beautifier, XML Viewer, Hex Converters and more...) https://codebeautify.org/ section{ font-size: 25px; }","title":"Codebeautify.org (online data conversion tools)"},{"location":"week-2-setup/ce103-week-2-setup/#asciiflowcom-ascii-drawing-tool","text":"Asciflow provides ascii based drawings that you can copy directly to textfiles and source codes. Visit the following link https://asciiflow.com/ section{ font-size: 25px; }","title":"AsciiFlow.com (ASCII drawing tool)"},{"location":"week-2-setup/ce103-week-2-setup/#freemind-opensource-mindmap-application","text":"Freemind is open source java based desktop mindmap application. Can export files to several formats Main Page - FreeMind section{ font-size: 25px; }","title":"Freemind (opensource mindmap application)"},{"location":"week-2-setup/ce103-week-2-setup/#mockup-designers","text":"Mockflow Signup - MockFlow Wireflow https://wireflow.co/ section{ font-size: 25px; }","title":"Mockup Designers"},{"location":"week-2-setup/ce103-week-2-setup/#plantuml-software-designer","text":"Text based designer for software engineers https://plantuml.com/ Also visit course notes that related to plantuml CE204 Object-Oriented Programming - RTEU C204 Object Oriented Programming Course Notes section{ font-size: 25px; }","title":"PlantUML (software designer)"},{"location":"week-2-setup/ce103-week-2-setup/#drawio-drawing-tool","text":"Online and Offline Drawing Tool https://app.diagrams.net/ Offline Installer Releases \u00b7 jgraph/drawio-desktop \u00b7 GitHub section{ font-size: 25px; }","title":"Drawio (drawing tool)"},{"location":"week-2-setup/ce103-week-2-setup/#putty-remote-connection","text":"Commonly use for SSH connection We can run a SSH server with MobaXterm and can connect to same computer with Putty.","title":"Putty (Remote Connection)"},{"location":"week-2-setup/ce103-week-2-setup/#download-file-over-ssh-protocol","text":"How to Download and Upload Files over SSH \u2013 TecAdmin Here are some useful examples for downloading files from the remote system over SSH protocol. This will connect to example.com server with user \u201c username \u201d and copy the /backup/file.zip file to local system directory /local/dir . To use theis command replace the values as per your environment. scp username@example.com:/backup/file.zip /local/dir If the SSH is running on a non-standard port, You can specify the port using -P option with SCP command. scp -P 2222 username@example.com:/backup/file.zip /local/dir If your remote server required a private key to connect server, You can use -i followed by a private key file path to connect your server using the SCP command. This can be helpful for AWS servers. scp -i private_key.pem username@example.com:/backup/file.zip /local/dir","title":"Download file over SSH Protocol"},{"location":"week-2-setup/ce103-week-2-setup/#upload-file-using-ssh","text":"You can also upload files to the remote server using SSH protocol using the SCP command. Use the following example command for uploading files to the SSH server. scp file.zip username@example.com:/remote/dir Similarity you can use -P switch to define port of the SSH server and -i to define private key for the user authentication. Also you can use SSH tunnels for remote code development Developing on Remote Machines using SSH and Visual Studio Code Visual Studio Code Server section{ font-size: 25px; }","title":"Upload file using SSH"},{"location":"week-2-setup/ce103-week-2-setup/#mobaxterm-remote-connection","text":"Multip Purpose Remote Connection Toolkit section{ font-size: 25px; }","title":"MobaXterm (Remote Connection)"},{"location":"week-2-setup/ce103-week-2-setup/#teamviewer-remote-connection","text":"Remote connection tool TeamViewer \u2013 Uzaktan Destek, Uzaktan Eri\u015fim, Hizmet Masas\u0131, \u00c7evrimi\u00e7i \u0130\u015fbirli\u011fi ve Toplant\u0131lar","title":"Teamviewer (Remote Connection)"},{"location":"week-2-setup/ce103-week-2-setup/#anydesk","text":"Remote connection tool The Fast Remote Desktop Application \u2013 AnyDesk section{ font-size: 25px; }","title":"AnyDesk"},{"location":"week-2-setup/ce103-week-2-setup/#palettoncom-and-colorhuntco-color-chooser","text":"Generates color pallettes and sample usages Paletton - The Color Scheme Designer https://colorhunt.co/ Also check Colors Tutorial section{ font-size: 25px; }","title":"Paletton.com and Colorhunt.co (Color Chooser)"},{"location":"week-2-setup/ce103-week-2-setup/#understand-static-code-analysis","text":"https://emenda.com/scitools-understand/ section{ font-size: 25px; }","title":"Understand (Static Code Analysis)"},{"location":"week-2-setup/ce103-week-2-setup/#jd-project-java-decompiler","text":"Java Decompiler for Jar and Class Files, If code is not obfuscated it recover source code from compiled files. Just drag and drop files to GUI http://java-decompiler.github.io/ You can use it standalone app or with eclipse section{ font-size: 25px; }","title":"JD Project (Java Decompiler)"},{"location":"week-2-setup/ce103-week-2-setup/#cutter-multi-platform-reverse-engineering-tool","text":"Cutter's goal is to be an advanced FREE and open-source reverse-engineering platform while keeping the user experience at mind. Cutter is created by reverse engineers for reverse engineers. https://cutter.re/ section{ font-size: 25px; }","title":"Cutter (Multi-Platform Reverse Engineering Tool)"},{"location":"week-2-setup/ce103-week-2-setup/#ida-pro-freeware-native-reverse-engineering-tool","text":"IDA Pro as a disassembler is capable of creating maps of their execution to show the binary instructions that are actually executed by the processor in a symbolic representation (assembly language). Advanced techniques have been implemented into IDA Pro so that it can generate assembly language source code from machine-executable code and make this complex code more human-readable. section{ font-size: 25px; }","title":"IDA Pro / Freeware (Native Reverse Engineering Tool)"},{"location":"week-2-setup/ce103-week-2-setup/#ida-pro-freeware-native-reverse-engineering-tool_1","text":"Hex Rays - State-of-the-art binary code analysis solutions section{ font-size: 25px; }","title":"IDA Pro / Freeware (Native Reverse Engineering Tool)"},{"location":"week-2-setup/ce103-week-2-setup/#ida-pro-freeware-native-reverse-engineering-tool_2","text":"section{ font-size: 25px; }","title":"IDA Pro / Freeware (Native Reverse Engineering Tool)"},{"location":"week-2-setup/ce103-week-2-setup/#code-visualization-python-c-c-java","text":"This coding tutor tool helps you learn Python, JavaScript, C, C++, and Java by visualizing code execution. https://pythontutor.com/ section{ font-size: 25px; }","title":"Code Visualization (Python, C , C++ , Java)"},{"location":"week-2-setup/ce103-week-2-setup/#assembly-of-c-code","text":"Multilanguage supported. Convert source code to assembly codes https://godbolt.org/ section{ font-size: 25px; }","title":"Assembly of C Code"},{"location":"week-2-setup/ce103-week-2-setup/#mobile-device-screen-sharing-for-demo","text":"Show USB or Wifi connected Mobile Device Screen on PC and Provide Controls GitHub - Genymobile/scrcpy: Display and control your Android device Run scrcpy for single mobile phone. Open Source Project - Scrcpy now works wirelessly section{ font-size: 25px; }","title":"Mobile Device Screen Sharing for Demo"},{"location":"week-2-setup/ce103-week-2-setup/#travis-ci","text":"Travis-CI is a continues integration platform Travis-CI free option removed for this reason, its not in our scope. It uses Travis.yml files for actions. section{ font-size: 25px; }","title":"Travis-CI"},{"location":"week-2-setup/ce103-week-2-setup/#appveyor","text":"Another CI platform it has free option for public builds. https://www.appveyor.com GitHub - Kimserey/hello-world-nuget hello-world-nuget/appveyor.yml at master \u00b7 Kimserey/hello-world-nuget \u00b7 GitHub section{ font-size: 25px; }","title":"AppVeyor"},{"location":"week-2-setup/ce103-week-2-setup/#jenkins","text":"Self-hosted solution for CI operations, Has integration with Github and several platforms. https://www.jenkins.io/ https://www.jenkins.io/doc/pipeline/tour/hello-world/ section{ font-size: 25px; }","title":"Jenkins"},{"location":"week-2-setup/ce103-week-2-setup/#jenkins_1","text":"section{ font-size: 25px; }","title":"Jenkins"},{"location":"week-2-setup/ce103-week-2-setup/#jenkins_2","text":"https://www.jenkins.io/solutions/github/ section{ font-size: 25px; }","title":"Jenkins"},{"location":"week-2-setup/ce103-week-2-setup/#vagrant","text":"Vagrant is a tool for building and managing virtual machine environments in a single workflow. With an easy-to-use workflow and focus on automation, Vagrant lowers development environment setup time, increases production parity, and makes the \"works on my machine\" excuse a relic of the past. https://www.vagrantup.com/ Setup Development Environment with Vagrant Setting Up Development Environment Using Vagrant - Edureka development-environment/Vagrantfile at master \u00b7 gantsign/development-environment \u00b7 GitHub section{ font-size: 25px; }","title":"Vagrant"},{"location":"week-2-setup/ce103-week-2-setup/#docker-docker-compose-kubernetes-1","text":"Docker takes away repetitive, mundane configuration tasks and is used throughout the development lifecycle for fast, easy and portable application development \u2013 desktop and cloud. https://www.youtube.com/watch?v=nBwJm0onzeo&ab_channel=GaryExplains Dockerfile https://devopedia.org/docker DockerHub Docker Compose Yaml Dockerrun.aws.json (AWS) section{ font-size: 25px; }","title":"Docker / Docker Compose / Kubernetes (1)"},{"location":"week-2-setup/ce103-week-2-setup/#docker-docker-compose-kubernetes-2","text":"section{ font-size: 25px; }","title":"Docker / Docker Compose / Kubernetes (2)"},{"location":"week-2-setup/ce103-week-2-setup/#docker-docker-compose-kubernetes-3","text":"section{ font-size: 25px; }","title":"Docker / Docker Compose / Kubernetes (3)"},{"location":"week-2-setup/ce103-week-2-setup/#docker-docker-compose-kubernetes-4","text":"section{ font-size: 25px; }","title":"Docker / Docker Compose / Kubernetes (4)"},{"location":"week-2-setup/ce103-week-2-setup/#docker-docker-compose-kubernetes-5","text":"section{ font-size: 25px; }","title":"Docker / Docker Compose / Kubernetes (5)"},{"location":"week-2-setup/ce103-week-2-setup/#docker-docker-compose-kubernetes-6","text":"section{ font-size: 25px; }","title":"Docker / Docker Compose / Kubernetes (6)"},{"location":"week-2-setup/ce103-week-2-setup/#nuget-packages-1","text":"https://www.nuget.org/packages What is NuGet and what does it do? | Microsoft Learn section{ font-size: 25px; }","title":"Nuget Packages (1)"},{"location":"week-2-setup/ce103-week-2-setup/#nuget-tools-2","text":"section{ font-size: 25px; }","title":"NuGet Tools (2)"},{"location":"week-2-setup/ce103-week-2-setup/#managing-dependencies-3","text":"section{ font-size: 25px; }","title":"Managing dependencies (3)"},{"location":"week-2-setup/ce103-week-2-setup/#tracking-references-and-restoring-packages-4","text":"section{ font-size: 25px; }","title":"Tracking references and restoring packages (4)"},{"location":"week-2-setup/ce103-week-2-setup/#scv-cryptomanager","text":"SCV Crypto Manager has several tools for cryptographic operations. https://cryptomanager.com/download.php section{ font-size: 25px; }","title":"SCV Cryptomanager"},{"location":"week-2-setup/ce103-week-2-setup/#addario-cryptobench","text":"CryptoBench can be used for hash and symmetric asymmetric encryption-decryption operations. CryptoBench Download Page http://www.addario.org/files/CryptoBench%20v1.0.1.zip section{ font-size: 25px; }","title":"Addario CryptoBench"},{"location":"week-2-setup/ce103-week-2-setup/#raymonds-md5-sha-checksum-utility","text":"Hash Calculation Utility MD5 & SHA Checksum Utility | Raymond's WordPress section{ font-size: 25px; }","title":"Raymond's MD5 &amp; SHA Checksum Utility"},{"location":"week-2-setup/ce103-week-2-setup/#slavasoft-hashcalc","text":"SlavaSoft HashCalc - Hash, CRC, and HMAC Calculator section{ font-size: 25px; }","title":"SlavaSoft HashCalc"},{"location":"week-2-setup/ce103-week-2-setup/#portable-pgp","text":"Portable PGP uses for the generation of PGP keys to transfer files securely via e-mail or other channels. You can encrypt or sign your documents with this tool then the receiver can open or verify your e-mail. https://ppgp.sourceforge.net/ section{ font-size: 25px; }","title":"Portable PGP"},{"location":"week-2-setup/ce103-week-2-setup/#online-programming-envoriments","text":"Hackerrank https://www.hackerrank.com/ CS50 Sandbox https://sandbox.cs50.io/ Programiz C Online Complier Online C Compiler \\[ End-Of-Week-2 \\]","title":"Online Programming Envoriments"},{"location":"week-2-setup/sources/llvm-clang-hello-world-apps/","text":"String Literals, Character Encodings, and Multiplatform C++ | PSPDFKit","title":"Index"},{"location":"week-2-setup/sources/mingw-gcc-hello-world-apps/","text":"MinGW-w64 - for 32 and 64 bit Windows / Wiki2 / Unicode apps","title":"Index"},{"location":"week-2-setup/sources/npp-gcc-hello-world-apps/","text":"How To Setup Notepad for Writing C++ Programs","title":"Index"},{"location":"week-3-git/ce103-week-3-git/","text":"CE103 Algorithms and Programming I \u00b6 Week-3 \u00b6 Introduction to Source Code Version Management Systems \u00b6 Download DOC , SLIDE , PPTX section{ font-size: 25px; } Outline \u00b6 Introduction to Source Code Version Management Systems Features of Source Code Management Systems Why Do We Need Source Code Management Systems Centralized/Distrubuted Version Control Systems Introduction to Git Git Installation and Configuration section{ font-size: 25px; } Outline \u00b6 Git Init Repository Git Add Files Git Commit Changes Git Pull/Fetch Changes from Remote Repo Git Push Local Changes to Remote Repo Git Branching Git Merging and Conflict Solving Git Rebasing Git Reset Git Logs and Monitoring Git Decision Tree Git Visualize Logs Introduction to Source Code Version Management Systems \u00b6 Git, Github, Gitlab, Bitbucket, Maven, SVN, TFS \u00b6 Source code management (SCM) is used to track modifications to a source code repository. SCM tracks a running history of changes to a code base and helps resolve conflicts when merging updates from multiple contributors. SCM is also synonymous with Version control. As software projects grow in lines of code and contributor head count, the costs of communication overhead and management complexity also grow. SCM is a critical tool to alleviate the organizational strain of growing development costs. section{ font-size: 25px; } Features of Source Code Management Systems \u00b6 Authenticated access for commits Revision history on files Atomic commits of multiple files Versioning/Tagging section{ font-size: 25px; } Why Do We Need Source Code Management Systems? (1) \u00b6 We can save the file with a different name if it\u2019s our school project or one-time papers but for a well-equipped software development? Not a chance. section{ font-size: 25px; } Why Do We Need Source Code Management Systems? (2) \u00b6 Big projects need a version control system to track the changes and avoid misunderstanding. A good SCM does the following: Backup and Restore Synchronization Short-Term Undo Long-Term Undo Track Changes Ownership Branching and Merging section{ font-size: 25px; } Why Do We Need Source Code Management Systems? (3) \u00b6 Backup and Restore \u2013 Files can be saved at any moment and can be restored from the last saved. section{ font-size: 25px; } Why Do We Need Source Code Management Systems? (4) \u00b6 Synchronization \u2013 Programmers can get the latest code and fetch the up-to-date codes from the repository. section{ font-size: 25px; } Why Do We Need Source Code Management Systems? (5) \u00b6 Short-Term Undo \u2013 Working with a file and messed it up. We can do a short-term undo to the last known version. section{ font-size: 25px; } Why Do We Need Source Code Management Systems? (6) \u00b6 Long-Term Undo \u2013 It helps when we have to make a release version rollback. Something like going to the last version which was created a year section{ font-size: 25px; } Why Do We Need Source Code Management Systems? (7) \u00b6 Track Changes \u2013 We can track the changes as when anyone is making any change, he can leave a commit message as for why the change was done. section{ font-size: 25px; } Why Do We Need Source Code Management Systems? (8) \u00b6 Ownership \u2013 With every commit made to the master branch, it will ask the owner permission to merge it. section{ font-size: 25px; } Why Do We Need Source Code Management Systems? (9) \u00b6 Branching and Merging \u2013 You can create a branch of your source code and create the changes. Once the changes are approved, you can merge it with the master branch. section{ font-size: 25px; } Why Do We Need Source Code Management Systems? (10) \u00b6 Types of Version Control Systems \u00b6 Centralized Version Control (TFS, Subversion) Distributed Version Control (Git and Mercurial) section{ font-size: 25px; } Centralized Version Control (TFS, Subversion) (1) \u00b6 The main concept of Centralized Version Control is that it works in a client and server relationship. The repository is located in one place and allows access to multiple clients. section{ font-size: 25px; } Centralized Version Control (TFS, Subversion) (2) \u00b6 section{ font-size: 25px; } Centralized Version Control (TFS, Subversion) (3) \u00b6 section{ font-size: 25px; } Centralized Version Control (TFS, Subversion) (4) \u00b6 It\u2019s very similar to FTP where you have FTP clients which connect to FTP server. Here all the user changes and commits have to pass through the central server. For Ex: Subversion. section{ font-size: 25px; } Centralized Version Control (TFS, Subversion) (5) \u00b6 The benefits of centralized version control are: It\u2019s easy to understand. There are more GUI and IDE clients. You have more control over the users and access. section{ font-size: 25px; } Centralized Version Control (TFS, Subversion) (6) \u00b6 We do have drawbacks also: It is dependent on the access to the server. It can be slower because every command from the client has to pass the server. Branching and merging strategies are difficult to use. section{ font-size: 25px; } Distributed Version Control (Git and Mercurial) (1) \u00b6 These systems are newer to use. In Distributed Version Control, each user has their own copy of the entire repository as well as the files and history. For Ex: Git and Mercurial section{ font-size: 25px; } Distributed Version Control (Git and Mercurial) (2) \u00b6 section{ font-size: 25px; } Distributed Version Control (Git and Mercurial) (3) \u00b6 section{ font-size: 25px; } Distributed Version Control (Git and Mercurial) (4) \u00b6 The benefits of distributed version control are: More powerful and easy change tracking. No need of a centralized server. Most of the functionalities work in offline mode also apart from sharing the repositories. Branching and Merging strategies are more easy and reliable. It\u2019s faster than the other one. section{ font-size: 25px; } List of Source Code Version Management Tools (1) \u00b6 section{ font-size: 25px; } List of Source Code Version Management Tools (2) \u00b6 Github GitLab BitBucket SourceForge Beanstalk section{ font-size: 25px; } List of Source Code Version Management Tools (3) \u00b6 Apache Allura AWS CodeCommit Launchpad Phabricator GitBucket section{ font-size: 25px; } GIT (Distributed Source Code Management) (1) \u00b6 section{ font-size: 25px; } GIT (Distributed Source Code Management) (2) \u00b6 section{ font-size: 25px; } GIT (Distributed Source Code Management) (3) \u00b6 section{ font-size: 25px; } GIT (Distributed Source Code Management) (4) \u00b6 section{ font-size: 25px; } GIT (Distributed Source Code Management) (5) \u00b6 A Basic Overview of How Git Works (1) \u00b6 Create a \"repository\" (project) with a git hosting tool (like Bitbucket) Copy (or clone) the repository to your local machine Add a file to your local repo and \u201ccommit\u201d (save) the changes \u201cPush\u201d your changes to your master branch section{ font-size: 25px; } GIT (Distributed Source Code Management) (6) \u00b6 A Basic Overview of How Git Works (2) \u00b6 Make a change to your file with a git hosting tool and commit \u201cPull\u201d the changes to your local machine Create a \u201cbranch\u201d (version), make a change, commit the change Open a \u201cpull request\u201d. \u201cMerge\u201d your branch to the master branch section{ font-size: 25px; } GIT (Distributed Source Code Management) (7) \u00b6 Some of The Basic Operations in GIT are \u00b6 Initialize Add Commit Pull Push section{ font-size: 25px; } GIT (Distributed Source Code Management) (8) \u00b6 Some of The Basic Operations in GIT are \u00b6 section{ font-size: 25px; } GIT (Distributed Source Code Management) (9) \u00b6 Some of The Basic Operations in GIT are \u00b6 Branching Merging Rebasing section{ font-size: 25px; } GIT (Distributed Source Code Management) (10) \u00b6 Some of The Basic Operations in GIT are \u00b6 section{ font-size: 25px; } GIT (Distributed Source Code Management) (8) \u00b6 A brief idea about how these operations work with the Git repositories (1) \u00b6 section{ font-size: 25px; } GIT (Distributed Source Code Management) (9) \u00b6 A brief idea about how these operations work with the Git repositories (2) \u00b6 section{ font-size: 25px; } GIT (Distributed Source Code Management) (10) \u00b6 A brief idea about how these operations work with the Git repositories (3) \u00b6 For more detailed cheetsheat please check the following interactive map NDP Software :: Git Cheatsheet section{ font-size: 25px; } Installation of GIT (1) \u00b6 Check Installation Already Completed git --version section{ font-size: 25px; } Installation of GIT (2) \u00b6 If your console gives error about git command follow the steps in the link Install Git | Atlassian Git Tutorial In this link you will should download following setup according to your operating system section{ font-size: 25px; } Installation of GIT (3) \u00b6 GIT Setup Files \u00b6 Download git for OSX Download git for Windows Download git for Linux section{ font-size: 25px; } Installation of GIT (4) \u00b6 Download and install GIT from the following links (both have same github release path) Git - Downloads section{ font-size: 25px; } Installation of GIT (5) \u00b6 After running setup follow the steps below section{ font-size: 25px; } Installation of GIT (6) \u00b6 Select the following configurations section{ font-size: 25px; } Installation of GIT (7) \u00b6 You can select to use git from Git Bash Only, Also you can use it from command-line by selecting second option. Third option override some Windows executable so your operating system can be affected from this selection. section{ font-size: 25px; } Installation of GIT (8) \u00b6 Git Credential Manager will be use to configure your remote connection. section{ font-size: 25px; } Installation of GIT (9) \u00b6 section{ font-size: 25px; } Installation of GIT (10) \u00b6 MSYS2 MinTTY provide better visual and colorful console outputs section{ font-size: 25px; } Installation of GIT Extension (Windows) (1) \u00b6 Git user interface can be installed by the following applications You can install Git GUI from https://git-scm.com/downloads/guis I prefer to use git extension https://gitextensions.github.io/ and https://tortoisegit.org/ together Also Download KDiff3 KDiff3 - Browse Files at SourceForge.net These extensions provide GUI for git operations to make process easier. Enter GIT Extension Configurations \u00b6 section{ font-size: 25px; } Right click to any where on right click menu you will see git extension settings as follow section{ font-size: 25px; } Configuration of GIT Extension (Windows) (1) \u00b6 Git extension provides you missing setups or wrong configurations. If everyting is green that mean everything should work perfectly. section{ font-size: 25px; } Configuration of GIT Extension (Windows) (2) \u00b6 If you install git everything should be green and this configuration is stored on .gitconfig on your home C:/Windows/Users/<user>/.gitconfig section{ font-size: 25px; } Configuration of GIT Extension (Windows) (3) \u00b6 You can use the following template and fix your settings. Git GUI edit this settings. But you can also edit them manually. section{ font-size: 25px; } Configuration of GIT Extension (Windows) (3) \u00b6 C:/Windows/Users/ /.gitconfig [ core ] editor = \\\" C:/Program Files ( x86 ) /GitExtensions/GitExtensions.exe \\\" fileeditor autocrlf = true quotePath = false commitGraph = true longpaths = true [ user ] email = xxxxxxx@gmail.com name = xxxx xxxxxx [ filter \"lfs\" ] clean = git-lfs clean -- %f smudge = git-lfs smudge -- %f process = git-lfs filter-process required = true [ pull ] rebase = false [ fetch ] prune = false [ rebase ] autoStash = false [ credential ] helper = manager [ diff ] guitool = kdiff3 [ difftool \"kdiff3\" ] path = C:/Program Files/KDiff3/kdiff3.exe cmd = \\\" C:/Program Files/KDiff3/kdiff3.exe \\\" \\\" $LOCAL \\\" \\\" $REMOTE \\\" [ merge ] guitool = tortoisemerge [ mergetool \"tortoisemerge\" ] path = C:/Program Files/TortoiseGit/bin/TortoiseGitMerge.exe cmd = \\\" C:/Program Files/TortoiseGit/bin/TortoiseGitMerge.exe \\\" -base: \\\" $BASE \\\" -mine: \\\" $LOCAL \\\" -theirs: \\\" $REMOTE \\\" -merged: \\\" $MERGED \\\" [ receive ] advertisePushOptions = true [ gc ] writeCommitGraph = true section{ font-size: 25px; } Configuration of GIT Extension (Windows) (4) \u00b6 Also in extension you can see similar settings section{ font-size: 25px; } Configuration of GIT Extension (Windows) (5) \u00b6 Samples MergeTool tortoisemerge Path to mergetool C:/Program Files/TortoiseGit/bin/TortoiseGitMerge.exe Mergetool command \"C:/Program Files/TortoiseGit/bin/TortoiseGitMerge.exe\" -base:\"$BASE\" -mine:\"$LOCAL\" -theirs:\"$REMOTE\" -merged:\"$MERGED\" section{ font-size: 25px; } Configuration of GIT Extension (Windows) (6) \u00b6 Difftool kdiff3 Path to difftool C:/Program Files/KDiff3/kdiff3.exe Difftool command \"C:/Program Files/KDiff3/kdiff3.exe\" \"$LOCAL\" \"$REMOTE\" section{ font-size: 25px; } Configuration of GIT Extension (Windows) (7) \u00b6 If you see something as merge and diff tool is not configured, follow the similar settings above on your computer. If you installed kdiff3, tortoisegit and extension you will have same diff and merge tools This topic also help you Git: How can I configure KDiff3 as a merge tool and diff tool? - Stack Overflow section{ font-size: 25px; } Configuration of GIT Extension (Windows) (8) \u00b6 Merge, Diff and Shell Tool Configuration Missing. section{ font-size: 25px; } Configuration of GIT Extension (Windows) (9) \u00b6 Open Git->Config, in your settings you will see path to mergetool and difftool will be empty fill settings like that below find executables in your computer and copy paths to here. section{ font-size: 25px; } Configuration of GIT Extension (Windows) (10) \u00b6 section{ font-size: 25px; } Configuration of GIT Extension (Windows) (11) \u00b6 Also if we want to change and use different diff and merge tool then we can do this with gitbash console as below C: \\P rogram Files \\T ortoiseGit \\b in Find TortoiseGitIDiff.exe and TortoiseGitMerge.exe section{ font-size: 25px; } Configuration of GIT Extension (Windows) (12) \u00b6 Copy path of this applications C: \\P rogram Files \\T ortoiseGit \\b in \\T ortoiseGitMerge.exe C: \\P rogram Files \\T ortoiseGit \\b in \\T ortoiseGitIDiff.exe section{ font-size: 25px; } Configuration of GIT Extension (Windows) (13) \u00b6 Open a gitbash console and run following commands git config --global merge.tool TortoiseGitMerge git config --global mergetool.TortoiseGitMerge.path \"C:/Program Files/TortoiseGit/bin/TortoiseGitMerge.exe\" git config --global mergetool.TortoiseGitMerge.trustExitCode false git config --global diff.guitool TortoiseGitIDiff git config --global difftool.TortoiseGitIDiff.path \"C:/Program Files/TortoiseGit/bin/TortoiseGitIDiff.exe\" git config --global difftool.TortoiseGitIDiff.trustExitCode false This updates will be stored on .gitconfig section{ font-size: 25px; } Using the GIT Extension (1) \u00b6 right click in the git folder and use Git Extension menu for operations. for sample commit click \"Commit\" section{ font-size: 25px; } Using the GIT Extension (1) \u00b6 from opening window first stage related files and then write a good commit message finally click commit to local. You can also commit&push it to remote repository. section{ font-size: 25px; } GIT Installation Completed.. \u00b6 section{ font-size: 25px; } Installation of gig (git ignore creator) (1) \u00b6 Requirements Python >= 3.6 Internet connection https://github.com/sloria/gig pip install -U gig section{ font-size: 25px; } Installation of gig (git ignore creator) (2) \u00b6 section{ font-size: 25px; } Installation of gig (git ignore creator) (3) \u00b6 gig --version section{ font-size: 25px; } Usage of gig (1) \u00b6 List all gitignore templates gig list gig list -global section{ font-size: 25px; } Usage of gig (2) \u00b6 Sample gitignore for C Java and Visual Studio gig C Java VisualStudio > .gitignore section{ font-size: 25px; } Usage of gig (3) \u00b6 There is a portal for this also by Toptal \u2022 gitignore.io - Create Useful .gitignore Files For Your Project section{ font-size: 25px; } Usage of gig (4) \u00b6 for samples you can check the following links. https://github.com/github/gitignore https://dev.to/shihanng/gig-a-gitignore-generator-opc section{ font-size: 25px; } Configuration of GIT (1) \u00b6 It is important to configure your Git because any commits that you make are associated with your configuration details. configuring Git with your username and email. In order to do that, type the following commands in your Git Bash: git config - - global user.name \"<your name>\" git config - - global user.email \"<your email>\" section{ font-size: 25px; } Configuration of GIT (2) \u00b6 section{ font-size: 25px; } Configuration of GIT (3) \u00b6 git configuration files are located on the user folder section{ font-size: 25px; } Configuration of GIT (4) \u00b6 If you want to view all your configuration details, use the command below git config --list section{ font-size: 25px; } Using .gitignore files with git-extension (1) \u00b6 with gitignore file section{ font-size: 25px; } Using .gitignore files with git-extension (2) \u00b6 without gitignore file (just move to another location) section{ font-size: 25px; } Github Create Repo \u00b6 section{ font-size: 25px; } Initilization of Repo (not existing in github) \u00b6 git init \u00b6 In order to do that, we use the command git init . git init creates an empty Git repository or re-initializes an existing one. It basically creates a .git directory with sub directories and template files. Running a git init in an existing repository will not overwrite things that are already there. It rather picks up the newly added templates. git init section{ font-size: 25px; } git init \u00b6 section{ font-size: 25px; } Adding Initiated Repo Remote Upstream Repo (Link with Github Repo) (1) \u00b6 If you enter following command in the git folder you will see nothing git remote -v That mean this repository do not have a remote upstream repository such as a github or bitbucket repo. section{ font-size: 25px; } Adding Initiated Repo Remote Upstream Repo (Link with Github Repo) (2) \u00b6 Open the github and bitbucket repository and copy project path from section{ font-size: 25px; } Adding Initiated Repo Remote Upstream Repo (Link with Github Repo) (3) \u00b6 you will see the following sample from github code button https://github.com/ucoruh/ce103-sample-text.git section{ font-size: 25px; } Adding Initiated Repo Remote Upstream Repo (Link with Github Repo) (4) \u00b6 Copy link and use with following command git remote add origin https://github.com/ucoruh/ce103-sample-text.git Then verify that you correctly updated remote repository setting with the following command git remote -v - You should see similar outputs origin https://github.com/ucoruh/ce103-sample-text.git ( fetch ) origin https://github.com/ucoruh/ce103-sample-text.git ( push ) You can check the following sample How to Add a New Remote to your Git Repo | Assembla Help Center section{ font-size: 25px; } Now you can push your local changes to remote repository \u00b6 If you see a repository on Github then you can download with following operation \u00b6 section{ font-size: 25px; } Checkout a Repository (1) \u00b6 create a working copy of a local repository by running the command git clone /path/to/repository section{ font-size: 25px; } Checkout a Repository (2) \u00b6 Sample clone command git clone https://github.com/ucoruh/ce103-sample-text.git section{ font-size: 25px; } Checkout a Repository (3) \u00b6 when using a remote server, your command will be git clone username@host:/path/to/repository Checking Repository Status (1) \u00b6 git status \u00b6 The git status command lists all the modified files which are ready to be added to the local repository. git status section{ font-size: 25px; } Checking Repository Status (2) \u00b6 git status \u00b6 section{ font-size: 25px; } Adding Files to Index (1) \u00b6 git add \u00b6 This command updates the index using the current content found in the working tree and then prepares the content in the staging area for the next commit. git add <directory> git add <file> git add * section{ font-size: 25px; } Adding Files to Index (1) \u00b6 git add \u00b6 Created two more files edureka3.txt and edureka4.txt. Let us add the files using the command git add -A. This command will add all the files to the index which are in the directory but not updated in the index yet. section{ font-size: 25px; } Commit Changes (1) \u00b6 git commit \u00b6 It refers to recording snapshots of the repository at a given time. Committed snapshots will never change unless done explicitly. section{ font-size: 25px; } Commit Changes (2) \u00b6 git commit \u00b6 Let me explain how commit works with the diagram below Here, C1 is the initial commit, i.e. the snapshot of the first change from which another snapshot is created with changes named C2. Note that the master points to the latest commit. Now, when I commit again, another snapshot C3 is created and now the master points to C3 instead of C2. section{ font-size: 25px; } Commit Changes (3) \u00b6 git commit \u00b6 Commands: git commit -m \"<message>\" Now, if you want to commit a snapshot of all the changes in the working directory at once, you can use the command below section{ font-size: 25px; } Commit Changes (4) \u00b6 git commit \u00b6 Please check writing good commit messages article below How to write a good commit message - DEV Community section{ font-size: 25px; } Writing Good Commit Messages (1) \u00b6 type: subject body (optional) footer (optional) section{ font-size: 25px; } Writing Good Commit Messages (2) \u00b6 1. Type \u00b6 feat - a new feature fix - a bug fix docs - changes in documentation style - everything related to styling refactor - code changes that neither fixes a bug or adds a feature test - everything related to testing chore - updating build tasks, package manager configs, etc section{ font-size: 25px; } Writing Good Commit Messages (3) \u00b6 2. Subject \u00b6 This contains a short description of the changes made. It shouldn't be greater than 50 characters, should begin with a capital letter and written in the imperative eg. Add instead of Added or Adds. section{ font-size: 25px; } Writing Good Commit Messages (4) \u00b6 3. Body \u00b6 The body is used to explain what changes you made and why you made them. Not all commits are complex enough that they need a body, especially if you are working on a personal project alone, and as such writing a body is optional. A blank line between the body and the subject is required and each line should have no more than 72 characters. section{ font-size: 25px; } Writing Good Commit Messages (5) \u00b6 4.Footer \u00b6 The footer is also optional and mainly used when you are using an issue tracker to reference the issue ID. section{ font-size: 20px; } Writing Good Commit Messages (6) \u00b6 Example Commit Message \u00b6 feat: Summarize changes in around 50 characters or less More detailed explanatory text, if necessary. Wrap it to about 72 characters or so. In some contexts, the first line is treated as the subject of the commit and the rest of the text as the body. The blank line separating the summary from the body is critical (unless you omit the body entirely); various tools like `log`, `shortlog` and `rebase` can get confused if you run the two together. Explain the problem that this commit is solving. Focus on why you are making this change as opposed to how (the code explains that). Are there side effects or other unintuitive consequences of this change? Here's the place to explain them. Further paragraphs come after blank lines. - Bullet points are okay, too - Typically a hyphen or asterisk is used for the bullet, preceded by a single space, with blank lines in between, but conventions vary here If you use an issue tracker, put references to them at the bottom, like this: Resolves: #123 See also: #456, #789 section{ font-size: 25px; } Writing Good Commit Messages (7) \u00b6 You can edit last commit with the following command git commit -a -m \"New commit message\" git commit --amend -m \"New commit message\" section{ font-size: 25px; } Writing Good Commit Messages (7) \u00b6 Edit last commit output section{ font-size: 25px; } section{ font-size: 25px; } Add Files to Index (1) \u00b6 I have created two more text files in my working directory viz. edureka5.txt and edureka6.txt but they are not added to the index yet. I am adding edureka5.txt using the command git add edureka5.txt section{ font-size: 25px; } Add Files to Index (2) \u00b6 section{ font-size: 25px; } Add Files to Index (3) \u00b6 I have added edureka5.txt to the index explicitly but not edureka6.txt and made changes in the previous files. I want to commit all changes in the directory at once. section{ font-size: 25px; } Add Files to Index (4) \u00b6 This command will commit a snapshot of all changes in the working directory but only includes modifications to tracked files i.e. the files that have been added with git add at some point in their history. Hence, edureka6.txt was not committed because it was not added to the index yet. But changes in all previous files present in the repository were committed, i.e. edureka1.txt, edureka2.txt, edureka3.txt, edureka4.txt and edureka5.txt. Now I have made my desired commits in my local repository section{ font-size: 25px; } Add Files to Index (5) \u00b6 your local repository consists of three \"trees\" maintained by git. the first one is your Working Directory which holds the actual files. the second one is the Index which acts as a staging area and finally the HEAD which points to the last commit you've made section{ font-size: 25px; } Add Files to Index (6) \u00b6 section{ font-size: 25px; } Update local repo before sending (1) \u00b6 Fetching \u00b6 If we have a remote Git branch, for example a branch on Github, it can happen that the remote branch has commits that the current branch doesn't have! Maybe another branch got merged, your colleague pushed a quick fix, and so on. section{ font-size: 25px; } Update local repo before sending (2) \u00b6 Fetching \u00b6 We can get these changes locally, by performing a git fetch on the remote branch! It doesn't affect your local branch in any way: a fetch simply downloads new data. section{ font-size: 25px; } Update local repo before sending (3) \u00b6 Fetching \u00b6 section{ font-size: 25px; } Update local repo before sending (4) \u00b6 Fetching \u00b6 We can now see all the changes that have been made since we last pushed! We can decide what we want to do with the new data now that we have it locally. section{ font-size: 25px; } Update local repo before sending (5) \u00b6 Pulling \u00b6 Although a git fetch is very useful in order to get the remote information of a branch, we can also perform a git pull . A git pull is actually two commands in one: a git fetch , and a git merge . When we're pulling changes from the origin, we're first fetching all the data like we did with a git fetch , after which the latest changes are automatically merged into the local branch section{ font-size: 25px; } Update local repo before sending (6) \u00b6 Pulling \u00b6 section{ font-size: 25px; } Update local repo before sending (7) \u00b6 Pulling \u00b6 Awesome, we're now perfectly in sync with the remote branch and have all the latest changes! section{ font-size: 25px; } Update local repo before sending (8) \u00b6 Pulling \u00b6 git pull \u00b6 Note that before you affect changes to the central repository you should always pull changes from the central repository to your local repository to get updated with the work of all the collaborators that have been contributing in the central repository. For that we will use the pull command. section{ font-size: 25px; } Update local repo before sending (9) \u00b6 Pulling \u00b6 git pull \u00b6 But first, you need to set your central repository as origin using the command git remote add origin <link of your central repository> section{ font-size: 25px; } Update local repo before sending (10) \u00b6 Pulling / git pull \u00b6 Now that my origin is set section{ font-size: 25px; } Update local repo before sending (11) \u00b6 Pulling / git pull \u00b6 let us extract files from the origin using pull. For that use the command git pull origin master section{ font-size: 25px; } Update local repo before sending (12) \u00b6 Pulling / git pull \u00b6 This command will copy all the files from the master branch of remote repository to your local repository. section{ font-size: 25px; } Update local repo before sending (13) \u00b6 Pulling / git pull \u00b6 Since my local repository was already updated with files from master branch, hence the message is Already up-to-date. Refer to the screen shot above section{ font-size: 25px; } Update local repo before sending (14) \u00b6 Pulling / git pull \u00b6 One can also try pulling files from a different branch using the following command: git pull origin <branch-name> section{ font-size: 25px; } Update local repo before sending (15) \u00b6 Pulling / git pull \u00b6 Your local Git repository is now updated with all the recent changes. It is time you make changes in the central repository by using the push command. section{ font-size: 25px; } Send Changes to Remote Repo (1) \u00b6 git push \u00b6 This command transfers commits from your local repository to your remote repository. It is the opposite of pull operation. section{ font-size: 25px; } Send Changes to Remote Repo (2) \u00b6 git push \u00b6 Pulling imports commits to local repositories whereas pushing exports commits to the remote repositories section{ font-size: 25px; } Send Changes to Remote Repo (3) \u00b6 git push \u00b6 The use of git push is to publish your local changes to a central repository. After you\u2019ve accumulated several local commits and are ready to share them with the rest of the team, section{ font-size: 25px; } Send Changes to Remote Repo (4) \u00b6 git push \u00b6 you can then push them to the central repository by using the following command git push <remote> section{ font-size: 25px; } Send Changes to Remote Repo (5) \u00b6 git push \u00b6 This remote refers to the remote repository which had been set before using the pull command. section{ font-size: 25px; } Send Changes to Remote Repo (6) \u00b6 git push \u00b6 This pushes the changes from the local repository to the remote repository along with all the necessary commits and internal objects. This creates a local branch in the destination repository section{ font-size: 25px; } Send Changes to Remote Repo (7) \u00b6 git push \u00b6 The below files are the files which we have already committed previously in the commit section and they are all \u201cpush-ready\u201c. section{ font-size: 25px; } Send Changes to Remote Repo (8) \u00b6 git push \u00b6 I will use the command git push origin master to reflect these files in the master branch of my central repository. section{ font-size: 25px; } Send Changes to Remote Repo (9) \u00b6 git push \u00b6 section{ font-size: 25px; } Send Changes to Remote Repo (10) \u00b6 git push \u00b6 section{ font-size: 25px; } Send Changes to Remote Repo (11) \u00b6 git push \u00b6 section{ font-size: 25px; } Send Changes to Remote Repo (12) \u00b6 git push \u00b6 To prevent overwriting, Git does not allow push when it results in a non-fast forward merge in the destination repository. section{ font-size: 25px; } Send Changes to Remote Repo (13) \u00b6 git push \u00b6 A non-fast forward merge means an upstream merge i.e. merging with ancestor or parent branches from a child branch To enable such merge, use the command below git push <remote> -force The above command forces the push operation even if it results in a non-fast forward merge section{ font-size: 25px; } Branching (1) \u00b6 git branch \u00b6 Branches in Git are nothing but pointers to a specific commit. Git generally prefers to keep its branches as lightweight as possible. section{ font-size: 25px; } Branching (2) \u00b6 git branch \u00b6 There are basically two types of branches viz. local branches remote tracking branches. section{ font-size: 25px; } Branching (3) \u00b6 git branch \u00b6 A local branch is just another path of your working tree. On the other hand, remote tracking branches have special purposes. Some of them are: They link your work from the local repository to the work on central repository. section{ font-size: 25px; } Branching (4) \u00b6 git branch \u00b6 They automatically detect which remote branches to get changes from, when you use git pull. section{ font-size: 25px; } Branching (5) \u00b6 Learn current branch \u00b6 You can check what your current branch is by using the command git branch The one mantra that you should always be chanting while branching is \u201cbranch early, and branch often\u201d section{ font-size: 25px; } Branching (6) \u00b6 List Local Branches \u00b6 git branch -l section{ font-size: 25px; } Branching (7) \u00b6 List Remote Branches \u00b6 git branch -r section{ font-size: 25px; } Branching (8) \u00b6 List All Local and Remote Branches \u00b6 git branch -a section{ font-size: 25px; } Branching (9) \u00b6 Removing merged git branches (after pull-request action in github) If you merged your branch to base branch in github and delete it on github your local branch list will not be updated by it self. You have to use the following command to update local and remote branch lists. Use the following command to syncronize your repository with remote upstream repo. git remote update --prune section{ font-size: 25px; } Branching (10) \u00b6 Create Branch \u00b6 To create a new branch we use the following command git branch <branch-name> The diagram below shows the workflow when a new branch is created. When we create a new branch it originates from the master branch itself. section{ font-size: 25px; } Branching (11) \u00b6 Create Branch \u00b6 section{ font-size: 25px; } Branching (12) \u00b6 Create Branch \u00b6 Since there is no storage/memory overhead with making many branches, it is easier to logically divide up your work rather than have big chunky branches You can create and change branch with following command, create a new branch named \"feature_x\" and switch to it using git checkout -b feature_x section{ font-size: 25px; } Branching (13) \u00b6 Change Branch \u00b6 git checkout <branch-name> Example: git checkout master section{ font-size: 25px; } Branching (14) \u00b6 Change Branch \u00b6 Branching includes the work of a particular commit along with all parent commits. As you can see in the diagram above, the newBranch has detached itself from the master and hence will create a different path section{ font-size: 25px; } Branching (15) \u00b6 Delete Local Branch \u00b6 and delete the branch again, before doing this switch to main or master branches. git branch -d feature_x section{ font-size: 25px; } Branching (16) \u00b6 Delete Remote Branch \u00b6 and delete the branch again, before doing this switch to main or master branches. git push origin --delete feature_x How to delete remote branches in Git section{ font-size: 25px; } Branching (17) \u00b6 Push Specific Branch to Remote \u00b6 A branch is not available to others unless you push the branch to your remote repository git push origin <branch> section{ font-size: 25px; } Branching (18) \u00b6 Update & Merge (Conflicts) \u00b6 to update your local repository to the newest commit, execute git pull in your working directory to fetch and merge remote changes. to merge another branch into your active branch (e.g. master), use git merge <branch> section{ font-size: 25px; } Branching (19) \u00b6 Update & Merge (Conflicts) \u00b6 in both cases git tries to auto-merge changes. Unfortunately, this is not always possible and results in conflicts. You are responsible to merge those conflicts manually by editing the files shown by git. After changing, you need to mark them as merged with git add <filename> before merging changes, you can also preview them by using git diff <source_branch> <target_branch> Git merge conflicts | Atlassian Git Tutorial section{ font-size: 25px; } Branching (20) \u00b6 Update & Merge (Conflicts) \u00b6 There are two types of merges Git can perform: a fast-forward , or a no-fast-forward section{ font-size: 25px; } Branching (21) \u00b6 Update & Merge (Conflicts) \u00b6 Fast-forward ( --ff ) \u00b6 A fast-forward merge can happen when the current branch has no extra commits compared to the branch we\u2019re merging. Git is... lazy and will first try to perform the easiest option: the fast-forward! This type of merge doesn\u2019t create a new commit, but rather merges the commit(s) on the branch we\u2019re merging right in the current branch section{ font-size: 25px; } Branching (22) \u00b6 Update & Merge (Conflicts) \u00b6 Fast-forward ( --ff ) \u00b6 section{ font-size: 25px; } Branching (23) \u00b6 Update & Merge (Conflicts) \u00b6 Perfect! We now have all the changes that were made on the dev branch available on the master branch. So, what's the no-fast-forward all about? section{ font-size: 25px; } Branching (24) \u00b6 Update & Merge (Conflicts) \u00b6 No-fast-foward ( --no-ff ) \u00b6 It's great if your current branch doesn't have any extra commits compared to the branch that you want to merge, but unfortunately that's rarely the case! If we committed changes on the current branch that the branch we want to merge doesn't have, git will perform a no-fast-forward merge. section{ font-size: 25px; } Branching (25) \u00b6 Update & Merge (Conflicts) \u00b6 No-fast-foward ( --no-ff ) \u00b6 With a no-fast-forward merge, Git creates a new merging commit on the active branch. The commit's parent commits point to both the active branch and the branch that we want to merge! section{ font-size: 25px; } Branching (26) \u00b6 Update & Merge (Conflicts) \u00b6 No-fast-foward ( --no-ff ) \u00b6 section{ font-size: 25px; } Branching (27) \u00b6 Update & Merge (Conflicts) \u00b6 No-fast-foward ( --no-ff ) \u00b6 No big deal, a perfect merge! The master branch now contains all the changes that we've made on the dev branch. section{ font-size: 25px; } Branching (28) \u00b6 Merge Conflicts \u00b6 Although Git is good at deciding how to merge branches and add changes to files, it cannot always make this decision all by itself This can happen when the two branches we're trying to merge have changes on the same line in the same file, or if one branch deleted a file that another branch modified, and so on. section{ font-size: 25px; } Branching (29) \u00b6 Merge Conflicts \u00b6 In that case, Git will ask you to help decide which of the two options we want to keep! Let's say that on both branches, we edited the first line in the README.md . section{ font-size: 25px; } Branching (30) \u00b6 Merge Conflicts \u00b6 If we want to merge dev into master , this will end up in a merge conflict: would you like the title to be Hello! or Hey! ? section{ font-size: 25px; } Branching (31) \u00b6 Merge Conflicts \u00b6 When trying to merge the branches, Git will show you where the conflict happens. We can manually remove the changes we don't want to keep, save the changes, add the changed file again, and commit the changes section{ font-size: 25px; } Branching (32) \u00b6 Merge Conflicts \u00b6 Although merge conflicts are often quite annoying, it makes total sense: Git shouldn't just assume which change we want to keep section{ font-size: 25px; } Branching (33) \u00b6 Sample Conflict -1 \u00b6 participants.txt ( I added a hyphen before each name ) Finance team Charles Lisa John Stacy Alexander git init git add . git commit \u2013m 'Initial list for finance team' section{ font-size: 25px; } Branching (34) \u00b6 Sample Conflict -1 \u00b6 Create a new branch called marketing using the following syntax git checkout \u2013b marketing section{ font-size: 25px; } Branching (35) \u00b6 Sample Conflict -1 \u00b6 Now open the participants.txt file and start entering the names for the marketing department below the finance team list, as follows: ( I added a hyphen before each name ) Marketing team Collins Linda Patricia Morgan git add . git commit \u2013m 'Unfinished list of marketing team' git checkout master section{ font-size: 25px; } Branching (36) \u00b6 Sample Conflict -1 \u00b6 Open the file and delete the names Alexander and Stacy , save, close, add the changes, and commit with the commit message Final list from Finance team git add . git commit \u2013m \"Final list from Finance team\" git checkout marketing section{ font-size: 25px; } Branching (37) \u00b6 Sample Conflict -1 \u00b6 Open the file and add the fifth name, Amanda , for the marketing team, save, add, and commit git add . git commit \u2013m \"Initial list of marketing team\" names entered for marketing have been confirmed; now we need to merge these two lists, which can be done by the following command git merge master section{ font-size: 25px; } Branching (38) \u00b6 Sample Conflict -1 \u00b6 Auto-merging participants.txt CONFLICT ( content ) : Merge conflict in participants.txt Automatic merge failed ; fix conflicts and then commit the result. section{ font-size: 25px; } Branching (39) \u00b6 Sample Conflict -1 \u00b6 Finance team -Charles -Lisa -John <<<<<< < HEAD -Stacy -Alexander Marketing team - Collins - Linda - Patricia - Morgan - Amanda ======= >>>>>>> master section{ font-size: 25px; } Branching (40) \u00b6 Sample Conflict -1 \u00b6 <<<<<< < Changes made on the branch that is being merged into. In most cases, this is the branch that I have currently checked out ( i.e. HEAD ) . |||||| | The common ancestor version. ======= Changes made on the branch that is being merged in . This is often a feature/topic branch. >>>>>>> section{ font-size: 25px; } Branching (41) \u00b6 Sample Conflict -1 \u00b6 remove them keep the lines you want to see in the final version of the file add and commit section{ font-size: 25px; } Branching (42) \u00b6 Sample Conflict -1 \u00b6 If we want to save all to our version git checkout --ours . # checkout our local version of all files git add -u # mark all conflicted files as merged git commit # commit the merge section{ font-size: 25px; } Branching (43) \u00b6 Sample Conflict -1 \u00b6 If we want to discard all our revision git checkout --theirs . # checkout remote version of all files git add -u # mark all conflicted files as merged git commit # commit the merge section{ font-size: 25px; } Branching (44) \u00b6 Sample Conflict -2 \u00b6 You're going to pull some changes, but oops, you're not up to date: git fetch origin git pull origin master Output From ssh://gitosis@example.com:22/projectname * branch master -> FETCH_HEAD Updating a030c3a..ee25213 error: Entry 'filename.c' not uptodate. Cannot merge. section{ font-size: 25px; } Branching (45) \u00b6 Sample Conflict -2 \u00b6 So you get up-to-date and try again, but have a conflict: git add filename.c git commit -m \"made some wild and crazy changes\" git pull origin master Output From ssh://gitosis@example.com:22/projectname * branch master -> FETCH_HEAD Auto-merging filename.c CONFLICT ( content ) : Merge conflict in filename.c Automatic merge failed ; fix conflicts and then commit the result. section{ font-size: 25px; } Branching (46) \u00b6 Sample Conflict -2 \u00b6 So you decide to take a look at the changes: git mergetool Oh my, oh my, upstream changed some things, but just to use my changes...no...their changes... git checkout --ours filename.c git checkout --theirs filename.c git add filename.c git commit -m \"using theirs\" section{ font-size: 25px; } Branching (47) \u00b6 Sample Conflict -2 \u00b6 And then we try a final time git pull origin master Output From ssh://gitosis@example.com:22/projectname * branch master -> FETCH_HEAD Already up-to-date. section{ font-size: 25px; } Tagging \u00b6 it's recommended to create tags for software releases. this is a known concept, which also exists in SVN. You can create a new tag named 1.0.0 by executing git tag 1 .0.0 1b2e1d63ff the 1b2e1d63ff stands for the first 10 characters of the commit id you want to reference with your tag. You can get the commit id by looking at the... section{ font-size: 25px; } Log (1) \u00b6 in its simplest form, you can study repository history using.. git log You can add a lot of parameters to make the log look like what you want. To see only the commits of a certain author: git log --author = bob section{ font-size: 25px; } Log (2) \u00b6 To see a very compressed log where each commit is one line: git log --pretty = oneline section{ font-size: 25px; } Log (3) \u00b6 Or maybe you want to see an ASCII art tree of all the branches, decorated with the names of tags and branches: git log --graph --oneline --decorate --all section{ font-size: 25px; } Log (4) \u00b6 See only which files have changed: git log --name-status Log (5) \u00b6 git log --pretty = format: \"%h%x09%an%x09%ad%x09%s\" section{ font-size: 25px; } Log (6) \u00b6 These are just a few of the possible parameters you can use. For more, see git log --help section{ font-size: 25px; } Replace Local Changes (1) \u00b6 In case you did something wrong, which for sure never happens ;), you can replace local changes using the command git checkout -- <filename> this replaces the changes in your working tree with the last content in HEAD. Changes already added to the index, as well as new files, will be kept. section{ font-size: 25px; } Replace Local Changes (2) \u00b6 if you use dot (.) then all local changes will be rollbacked. git checkout -- . section{ font-size: 25px; } Replace Local Changes (3) \u00b6 If you instead want to drop all your local changes and commits, fetch the latest history from the server and point your local master branch at it like this git fetch origin git reset --hard origin/master section{ font-size: 25px; } Reflog (1) \u00b6 Everyone makes mistakes, and that's totally okay! Sometimes it may feel like you've corrupt your git repo so badly that you just want to delete it entirely. section{ font-size: 25px; } Reflog (2) \u00b6 git reflog is a very useful command in order to show a log of all the actions that have been taken! This includes merges, resets, reverts: basically any alteration to your branch. section{ font-size: 25px; } Reflog (3) \u00b6 section{ font-size: 25px; } Reflog (4) \u00b6 If you made a mistake, you can easily redo this by resetting HEAD based on the information that reflog gives us! Say that we actually didn't want to merge the origin branch. When we execute the git reflog command, we see that the state of the repo before the merge is at HEAD@{1} . Let's perform a git reset to point HEAD back to where it was on HEAD@{1} ! section{ font-size: 25px; } Reflog (5) \u00b6 We can see that the latest action has been pushed to the reflog section{ font-size: 25px; } Resetting (1) \u00b6 It can happen that we committed changes that we didn't want later on. Maybe it's a WIP commit, or maybe a commit that introduced bugs! In that case, we can perform a git reset . section{ font-size: 25px; } Resetting (2) \u00b6 A git reset gets rid of all the current staged files and gives us control over where HEAD should point to. section{ font-size: 25px; } Soft Reset (1) \u00b6 A soft reset moves HEAD to the specified commit (or the index of the commit compared to HEAD ), without getting rid of the changes that were introduced on the commits afterward! section{ font-size: 25px; } Soft Reset (2) \u00b6 Let's say that we don't want to keep the commit 9e78i which added a style.css file, and we also don't want to keep the commit 035cc which added an index.js file. However, we do want to keep the newly added style.css and index.js file! A perfect use case for a soft reset. section{ font-size: 25px; } Soft Reset (3) \u00b6 section{ font-size: 25px; } section{ font-size: 25px; } Soft Reset (2) \u00b6 When typing git status , you'll see that we still have access to all the changes that were made on the previous commits. This is great, as this means that we can fix the contents of these files and commit them again later on! section{ font-size: 25px; } Hard reset (1) \u00b6 Sometimes, we don't want to keep the changes that were introduced by certain commits. Unlike a soft reset, we shouldn't need to have access to them any more. Git should simply reset its state back to where it was on the specified commit: this even includes the changes in your working directory and staged files! section{ font-size: 25px; } Hard reset (2) \u00b6 Git has discarded the changes that were introduced on 9e78i and 035cc , and reset its state to where it was on commit ec5be . section{ font-size: 25px; } Reverting (1) \u00b6 Another way of undoing changes is by performing a git revert . By reverting a certain commit, we create a new commit that contains the reverted changes! section{ font-size: 25px; } Reverting (2) \u00b6 Let's say that ec5be added an index.js file. Later on, we actually realize we didn't want this change introduced by this commit anymore! Let's revert the ec5be commit. Perfect! Commit 9e78i reverted the changes that were introduced by the ec5be commit. section{ font-size: 25px; } Reverting (3) \u00b6 Performing a git revert is very useful in order to undo a certain commit, without modifying the history of the branch. section{ font-size: 25px; } Cherry-picking (1) \u00b6 When a certain branch contains a commit that introduced changes we need on our active branch, we can cherry-pick that command! By cherry-pick ing a commit, we create a new commit on our active branch that contains the changes that were introduced by the cherry-pick ed commit. section{ font-size: 25px; } Cherry-picking (1) \u00b6 Say that commit 76d12 on the dev branch added a change to the index.js file that we want in our master branch. We don't want the entire we just care about this one single commit! Cool, the master branch now contains the changes that 76d12 introduced section{ font-size: 25px; } Rebasing (1) \u00b6 We just saw how we could apply changes from one branch to another by performing a git merge . Another way of adding changes from one branch to another is by performing a git rebase . section{ font-size: 25px; } Rebasing (2) \u00b6 A git rebase copies the commits from the current branch, and puts these copied commits on top of the specified branch. Perfect, we now have all the changes that were made on the master branch available on the dev branch! section{ font-size: 25px; } Rebasing (3) \u00b6 A big difference compared to merging, is that Git won't try to find out which files to keep and not keep. The branch that we're rebasing always has the latest changes that we want to keep! You won't run into any merging conflicts this way, and keeps a nice linear Git history. section{ font-size: 25px; } Rebasing (4) \u00b6 This example shows rebasing on the master branch. In bigger projects, however, you usually don't want to do that. A git rebase changes the history of the project as new hashes are created for the copied commits! section{ font-size: 25px; } Rebasing (5) \u00b6 Rebasing is great whenever you're working on a feature branch, and the master branch has been updated. You can get all the updates on your branch, which would prevent future merging conflicts! section{ font-size: 25px; } Interactive Rebase (1) \u00b6 Before rebasing the commits, we can modify them! We can do so with an interactive rebase . An interactive rebase can also be useful on the branch you're currently working on, and want to modify some commits. section{ font-size: 25px; } Interactive Rebase (2) \u00b6 There are 6 actions we can perform on the commits we're rebasing: reword : Change the commit message edit : Amend this commit squash : Meld commit into the previous commit fixup : Meld commit into the previous commit, without keeping the commit's log message exec : Run a command on each commit we want to rebase drop : Remove the commit section{ font-size: 25px; } Interactive Rebase (3) \u00b6 Awesome! This way, we can have full control over our commits. If we want to remove a commit, we can just drop it. section{ font-size: 25px; } Interactive Rebase (4) \u00b6 Or if we want to squash multiple commits together to get a cleaner history, no problem! Interactive rebasing gives you a lot of control over the commits you're trying to rebase, even on the current active branch section{ font-size: 25px; } Useful Hints (1) \u00b6 built-in git GUI gitk section{ font-size: 25px; } Useful Hints (2) \u00b6 use colorful git output git config color.ui true section{ font-size: 25px; } Useful Hints (3) \u00b6 show log on just one line per commit git config format.pretty oneline section{ font-size: 25px; } Useful Hints (4) \u00b6 use interactive adding git add -i HEAD~2 // previous two commits fro head HEAD~~ // previous two commits from head HEAD@ { 2 } // reflog order 18fe5 // previous commit hash section{ font-size: 25px; } GIT Flow \u00b6 A successful Git branching model \u00bb nvie.com section{ font-size: 25px; } Hotfix \u00b6 Reference: - OneFlow \u2013 a Git branching model and workflow | End of Line Blog - a simple git branching model \u00b7 GitHub section{ font-size: 25px; } GIT Decision Tree \u00b6 reference url section{ font-size: 25px; } GIT in action (1) \u00b6 section{ font-size: 25px; } GIT in action (2) \u00b6 section{ font-size: 25px; } GIT in action (3) \u00b6 section{ font-size: 25px; } GIT in action (4) \u00b6 section{ font-size: 25px; } GIT in action (5) \u00b6 section{ font-size: 25px; } GIT in action (6) \u00b6 section{ font-size: 25px; } GIT in action (7) \u00b6 section{ font-size: 25px; } Gource \u00b6 https://gource.io/ Review GIT with GitMagic Standford Notes \u00b6 Visit : https://crypto.stanford.edu/~blynn/gitmagic/book.html section{ font-size: 25px; } Basic Tricks \u00b6 Rather than diving into a sea of Git commands, use these elementary examples to get your feet wet. Despite their simplicity, each of them are useful. Indeed, in my first months with Git I never ventured beyond the material in this chapter. section{ font-size: 25px; } section{ font-size: 25px; } Saving State \u00b6 About to attempt something drastic? Before you do, take a snapshot of all files in the current directory with: git init git add . git commit -m \"My first backup\" section{ font-size: 25px; } Now if your new edits go awry, restore the pristine version: git reset --hard section{ font-size: 25px; } To save the state again: git commit -a -m \"Another backup\" section{ font-size: 25px; } Add, Delete, Rename \u00b6 The above only keeps track of the files that were present when you first ran git add . If you add new files or subdirectories, you\u2019ll have to tell Git: git add readme.txt Documentation section{ font-size: 25px; } Similarly, if you want Git to forget about certain files: git rm kludge.h obsolete.c git rm -r incriminating/evidence/ Git deletes these files for you if you haven\u2019t already. section{ font-size: 25px; } Renaming a file is the same as removing the old name and adding the new name. There\u2019s also the shortcut git mv which has the same syntax as the mv command. For example: git mv bug.c feature.c section{ font-size: 25px; } Advanced Undo/Redo \u00b6 Sometimes you just want to go back and forget about every change past a certain point because they\u2019re all wrong. Then: git log shows you a list of recent commits, and their SHA1 hashes: commit 766f9881690d240ba334153047649b8b8f11c664 Author: Bob <bob@example.com> Date: Tue Mar 14 01 :59:26 2000 -0800 Replace printf () with write () . commit 82f5ea346a2e651544956a8653c0f58dc151275c Author: Alice <alice@example.com> Date: Thu Jan 1 00 :00:00 1970 +0000 Initial commit. The first few characters of the hash are enough to specify the commit; alternatively, copy and paste the entire hash. Type: git reset --hard 766f to restore the state to a given commit and erase all newer commits from the record permanently. section{ font-size: 25px; } Other times you want to hop to an old state briefly. In this case, type: git checkout 82f5 This takes you back in time, while preserving newer commits. However, like time travel in a science-fiction movie, if you now edit and commit, you will be in an alternate reality, because your actions are different to what they were the first time around. section{ font-size: 25px; } This alternate reality is called a branch , For now, just remember that git checkout master will take you back to the present. Also, to stop Git complaining, always commit or reset your changes before running checkout. section{ font-size: 25px; } To take the computer game analogy again: git reset --hard : load an old save and delete all saved games newer than the one just loaded. git checkout : load an old game, but if you play on, the game state will deviate from the newer saves you made the first time around. Any saved games you make now will end up in a separate branch representing the alternate reality you have entered. section{ font-size: 25px; } You can choose only to restore particular files and subdirectories by appending them after the command: git checkout 82f5 some.file another.file Take care, as this form of checkout can silently overwrite files. To prevent accidents, commit before running any checkout command, especially when first learning Git. section{ font-size: 25px; } In general, whenever you feel unsure about any operation, Git command or not, first run git commit -a . Don\u2019t like cutting and pasting hashes? Then use: git checkout :/ \"My first b\" to jump to the commit that starts with a given message. You can also ask for the 5 th -last saved state: git checkout master~5 section{ font-size: 25px; } Reverting \u00b6 In a court of law, events can be stricken from the record. Likewise, you can pick specific commits to undo. git commit -a git revert 1b6d will undo just the commit with the given hash. The revert is recorded as a new commit, which you can confirm by running git log . section{ font-size: 25px; } Changelog Generation \u00b6 Some projects require a changelog . Generate one by typing: git log > ChangeLog section{ font-size: 25px; } Downloading Files \u00b6 Get a copy of a project managed with Git by typing: git clone git://server/path/to/files For example, to get all the files I used to create this site: git clone git://git.or.cz/gitmagic.git We\u2019ll have much to say about the clone command soon. section{ font-size: 25px; } The Bleeding Edge \u00b6 If you\u2019ve already downloaded a copy of a project using git clone , you can upgrade to the latest version with: git pull section{ font-size: 25px; } Instant Publishing \u00b6 Suppose you\u2019ve written a script you\u2019d like to share with others. You could just tell them to download from your computer, but if they do so while you\u2019re improving the script or making experimental changes, they could wind up in trouble. Of course, this is why release cycles exist. Developers may work on a project frequently, but they only make the code available when they feel it is presentable. section{ font-size: 25px; } To do this with Git, in the directory where your script resides: git init git add . git commit -m \"First release\" section{ font-size: 25px; } Then tell your users to run: git clone your.computer:/path/to/script to download your script. This assumes they have ssh access. If not, run git daemon and tell your users to instead run: git clone git://your.computer/path/to/script section{ font-size: 25px; } From now on, every time your script is ready for release, execute: git commit -a -m \"Next release\" and your users can upgrade their version by changing to the directory containing your script and typing: git pull Your users will never end up with a version of your script you don\u2019t want them to see. section{ font-size: 25px; } What Have I Done? \u00b6 Find out what changes you\u2019ve made since the last commit with: git diff section{ font-size: 25px; } Or since yesterday: git diff \"@{yesterday}\" section{ font-size: 25px; } Or between a particular version and 2 versions ago: git diff 1b6d \"master~2\" section{ font-size: 25px; } In each case the output is a patch that can be applied with git apply . Try also: git whatchanged --since = \"2 weeks ago\" section{ font-size: 25px; } Often I\u2019ll browse history with qgit instead, due to its slick photogenic interface, or tig , a text-mode interface that works well over slow connections. Alternatively, install a web server, run git instaweb and fire up any web browser. section{ font-size: 25px; } Exercise \u00b6 Let A, B, C, D be four successive commits where B is the same as A except some files have been removed. We want to add the files back at D. How can we do this? There are at least three solutions. Assuming we are at D: The difference between A and B are the removed files. We can create a patch representing this difference and apply it: git diff B A | git apply Since we saved the files back at A, we can retrieve them: git checkout A foo.c bar.h We can view going from A to B as a change we want to undo: git revert B Which choice is best? Whichever you prefer most. It is easy to get what you want with Git, and often there are many ways to get it. section{ font-size: 25px; } Cloning Around \u00b6 In older version control systems, checkout is the standard operation to get files. You retrieve a bunch of files in a particular saved state. In Git and other distributed version control systems, cloning is the standard operation. To get files, you create a clone of the entire repository. In other words, you practically mirror the central server. Anything the main repository can do, you can do. section{ font-size: 25px; } Sync Computers \u00b6 I can tolerate making tarballs or using rsync for backups and basic syncing. But sometimes I edit on my laptop, other times on my desktop, and the two may not have talked to each other in between. Initialize a Git repository and commit your files on one machine. Then on the other: git clone other.computer:/path/to/files to create a second copy of the files and Git repository. From now on, git commit -a git pull other.computer:/path/to/files HEAD will pull in the state of the files on the other computer into the one you\u2019re working on. If you\u2019ve recently made conflicting edits in the same file, Git will let you know and you should commit again after resolving them. section{ font-size: 25px; } Classic Source Control \u00b6 Initialize a Git repository for your files: git init git add . git commit -m \"Initial commit\" section{ font-size: 25px; } On the central server, initialize a bare repository in some directory: mkdir proj.git cd proj.git git --bare init touch proj.git/git-daemon-export-ok section{ font-size: 25px; } Start the Git daemon if necessary: git daemon --detach # it may already be running section{ font-size: 25px; } For Git hosting services, follow the instructions to setup the initially empty Git repository. Typically one fills in a form on a webpage. Push your project to the central server with: git push central.server/path/to/proj.git HEAD section{ font-size: 25px; } To check out the source, a developer types: git clone central.server/path/to/proj.git section{ font-size: 25px; } After making changes, the developer saves changes locally: git commit -a section{ font-size: 25px; } To update to the latest version: git pull section{ font-size: 25px; } Any merge conflicts should be resolved then committed: git commit -a section{ font-size: 25px; } To check in local changes into the central repository: git push section{ font-size: 25px; } If the main server has new changes due to activity by other developers, the push fails, and the developer should pull the latest version, resolve any merge conflicts, then try again. section{ font-size: 25px; } Developers must have SSH access for the above pull and push commands. However, anyone can see the source by typing: git clone git://central.server/path/to/proj.git The native git protocol is like HTTP: there is no authentication, so anyone can retrieve the project. Accordingly, by default, pushing is forbidden via the git protocol. section{ font-size: 25px; } Secret Source \u00b6 For a closed-source project, omit the touch command, and ensure you never create a file named git-daemon-export-ok . The repository can no longer be retrieved via the git protocol; only those with SSH access can see it. If all your repos are closed, running the git daemon is unnecessary because all communication occurs via SSH. section{ font-size: 25px; } Bare repositories \u00b6 A bare repository is so named because it has no working directory; it only contains files that are normally hidden away in the .git subdirectory. In other words, it maintains the history of a project, and never holds a snapshot of any given version. section{ font-size: 25px; } A bare repository plays a role similar to that of the main server in a centralized version control system: the home of your project. Developers clone your project from it, and push the latest official changes to it. Typically it resides on a server that does little else but disseminate data. Development occurs in the clones, so the home repository can do without a working directory. section{ font-size: 25px; } Many Git commands fail on bare repositories unless the GIT_DIR environment variable is set to the repository path, or the --bare option is supplied. section{ font-size: 25px; } Push versus Pull \u00b6 Why did we introduce the push command, rather than rely on the familiar pull command? Firstly, pulling fails on bare repositories: instead you must fetch , a command we later discuss. section{ font-size: 25px; } But even if we kept a normal repository on the central server, pulling into it would still be cumbersome. We would have to login to the server first, and give the pull command the network address of the machine we\u2019re pulling from. Firewalls may interfere, and what if we have no shell access to the server in the first place? section{ font-size: 25px; } However, apart from this case, we discourage pushing into a repository, because confusion can ensue when the destination has a working directory. In short, while learning Git, only push when the target is a bare repository; otherwise pull. section{ font-size: 25px; } Forking a Project \u00b6 Sick of the way a project is being run? Think you could do a better job? Then on your server: git clone git://main.server/path/to/files section{ font-size: 25px; } Next, tell everyone about your fork of the project at your server. At any later time, you can merge in the changes from the original project with: git pull section{ font-size: 25px; } Ultimate Backups \u00b6 Want numerous tamper-proof geographically diverse redundant archives? If your project has many developers, don\u2019t do anything! Every clone of your code is effectively a backup. Not just of the current state, but of your project\u2019s entire history. Thanks to cryptographic hashing, if anyone\u2019s clone becomes corrupted, it will be spotted as soon as they try to communicate with others. section{ font-size: 25px; } If your project is not so popular, find as many servers as you can to host clones. The truly paranoid should always write down the latest 20-byte SHA1 hash of the HEAD somewhere safe. It has to be safe, not private. For example, publishing it in a newspaper would work well, because it\u2019s hard for an attacker to alter every copy of a newspaper. section{ font-size: 25px; } Light-Speed Multitask \u00b6 Say you want to work on several features in parallel. Then commit your project and run: git clone . /some/new/directory Thanks to hardlinking , local clones require less time and space than a plain backup. You can now work on two independent features simultaneously. section{ font-size: 25px; } For example, you can edit one clone while the other is compiling. At any time, you can commit and pull changes from the other clone: git pull /the/other/clone HEAD section{ font-size: 25px; } Guerilla Version Control \u00b6 Are you working on a project that uses some other version control system, and you sorely miss Git? Then initialize a Git repository in your working directory: git init git add . git commit -m \"Initial commit\" section{ font-size: 25px; } then clone it: git clone . /some/new/directory section{ font-size: 25px; } Now go to the new directory and work here instead, using Git to your heart\u2019s content. Once in a while, you\u2019ll want to sync with everyone else, in which case go to the original directory, sync using the other version control system, and type: git add . git commit -m \"Sync with everyone else\" section{ font-size: 25px; } Then go to the new directory and run: git commit -a -m \"Description of my changes\" git pull section{ font-size: 25px; } The procedure for giving your changes to everyone else depends on the other version control system. The new directory contains the files with your changes. Run whatever commands of the other version control system are needed to upload them to the central repository. section{ font-size: 25px; } Subversion, perhaps the best centralized version control system, is used by countless projects. The git svn command automates the above for Subversion repositories, and can also be used to export a Git project to a Subversion repository . section{ font-size: 25px; } Mercurial \u00b6 Mercurial is a similar version control system that can almost seamlessly work in tandem with Git. With the hg-git plugin, a Mercurial user can losslessly push to and pull from a Git repository. section{ font-size: 25px; } Obtain the hg-git plugin with Git: git clone git://github.com/schacon/hg-git.git or Mercurial: hg clone http://bitbucket.org/durin42/hg-git/ section{ font-size: 25px; } Sadly, I am unaware of an analogous plugin for Git. For this reason, I advocate Git over Mercurial for the main repository, even if you prefer Mercurial. With a Mercurial project, usually a volunteer maintains a parallel Git repository to accommodate Git users, whereas thanks to the hg-git plugin, a Git project automatically accommodates Mercurial users. section{ font-size: 25px; } Although the plugin can convert a Mercurial repository to a Git repository by pushing to an empty repository, this job is easier with the hg-fast-export.sh script, available from: git clone git://repo.or.cz/fast-export.git To convert, in an empty directory: git init hg-fast-export.sh -r /hg/repo after adding the script to your $PATH . section{ font-size: 25px; } Bazaar \u00b6 We briefly mention Bazaar because it is the most popular free distributed version control system after Git and Mercurial. section{ font-size: 25px; } Bazaar has the advantage of hindsight, as it is relatively young; its designers could learn from mistakes of the past, and sidestep minor historical warts. Additionally, its developers are mindful of portability and interoperation with other version control systems. section{ font-size: 25px; } A bzr-git plugin lets Bazaar users work with Git repositories to some extent. The tailor program converts Bazaar repositories to Git repositories, and can do so incrementally, while bzr-fast-export is well-suited for one-shot conversions. section{ font-size: 25px; } Branch Wizardry \u00b6 Instant branching and merging are the most lethal of Git\u2019s killer features. Problem : External factors inevitably necessitate context switching. A severe bug manifests in the released version without warning. The deadline for a certain feature is moved closer. A developer whose help you need for a key section of the project is about to leave. In all cases, you must abruptly drop what you are doing and focus on a completely different task. section{ font-size: 25px; } Interrupting your train of thought can be detrimental to your productivity, and the more cumbersome it is to switch contexts, the greater the loss. With centralized version control we must download a fresh working copy from the central server. Distributed systems fare better, as we can clone the desired version locally. section{ font-size: 25px; } But cloning still entails copying the whole working directory as well as the entire history up to the given point. Even though Git reduces the cost of this with file sharing and hard links, the project files themselves must be recreated in their entirety in the new working directory. section{ font-size: 25px; } Solution : Git has a better tool for these situations that is much faster and more space-efficient than cloning: git branch . With this magic word, the files in your directory suddenly shapeshift from one version to another. This transformation can do more than merely go back or forward in history. Your files can morph from the last release to the experimental version to the current development version to your friend\u2019s version and so on. section{ font-size: 25px; } The Boss Key \u00b6 Ever played one of those games where at the push of a button (\u201cthe boss key\u201d), the screen would instantly display a spreadsheet or something? So if the boss walked in the office while you were playing the game you could quickly hide it away? section{ font-size: 25px; } In some directory: echo \"I'm smarter than my boss\" > myfile.txt git init git add . git commit -m \"Initial commit\" section{ font-size: 25px; } We have created a Git repository that tracks one text file containing a certain message. Now type: git checkout -b boss # nothing seems to change after this echo \"My boss is smarter than me\" > myfile.txt git commit -a -m \"Another commit\" section{ font-size: 25px; } It looks like we\u2019ve just overwritten our file and committed it. But it\u2019s an illusion. Type: git checkout master # switch to original version of the file and hey presto! The text file is restored. And if the boss decides to snoop around this directory, type: git checkout boss # switch to version suitable for boss' eyes You can switch between the two versions of the file as much as you like, and commit to each independently. section{ font-size: 25px; } Dirty Work \u00b6 Say you\u2019re working on some feature, and for some reason, you need to go back three versions and temporarily put in a few print statements to see how something works. Then: git commit -a git checkout HEAD~3 section{ font-size: 25px; } Now you can add ugly temporary code all over the place. You can even commit these changes. When you\u2019re done, git checkout master to return to your original work. Observe that any uncommitted changes are carried over. section{ font-size: 25px; } What if you wanted to save the temporary changes after all? Easy: git checkout -b dirty and commit before switching back to the master branch. Whenever you want to return to the dirty changes, simply type: git checkout dirty section{ font-size: 25px; } We touched upon this command in an earlier chapter, when discussing loading old states. At last we can tell the whole story: the files change to the requested state, but we must leave the master branch. Any commits made from now on take your files down a different road, which can be named later. In other words, after checking out an old state, Git automatically puts you in a new, unnamed branch, which can be named and saved with git checkout -b . section{ font-size: 25px; } Quick Fixes \u00b6 You\u2019re in the middle of something when you are told to drop everything and fix a newly discovered bug in commit 1b6d... : git commit -a git checkout -b fixes 1b6d Then once you\u2019ve fixed the bug: git commit -a -m \"Bug fixed\" git checkout master and resume work on your original task. You can even merge in the freshly baked bugfix: git merge fixes section{ font-size: 25px; } Merging \u00b6 With some version control systems, creating branches is easy but merging them back together is tough. With Git, merging is so trivial that you might be unaware of it happening. section{ font-size: 25px; } We actually encountered merging long ago. The pull command in fact fetches commits and then merges them into your current branch. If you have no local changes, then the merge is a fast forward , a degenerate case akin to fetching the latest version in a centralized version control system. But if you do have local changes, Git will automatically merge, and report any conflicts. section{ font-size: 25px; } Ordinarily, a commit has exactly one parent commit , namely, the previous commit. Merging branches together produces a commit with at least two parents. This begs the question: what commit does HEAD~10 really refer to? A commit could have multiple parents, so which one do we follow? section{ font-size: 25px; } It turns out this notation chooses the first parent every time. This is desirable because the current branch becomes the first parent during a merge; frequently you\u2019re only concerned with the changes you made in the current branch, as opposed to changes merged in from other branches. section{ font-size: 25px; } You can refer to a specific parent with a caret. For example, to show the logs from the second parent: git log HEAD^2 section{ font-size: 25px; } You may omit the number for the first parent. For example, to show the differences with the first parent: git diff HEAD^ section{ font-size: 25px; } You can combine this notation with other types. For example: git checkout 1b6d^^2~10 -b ancient starts a new branch \u201cancient\u201d representing the state 10 commits back from the second parent of the first parent of the commit starting with 1b6d. section{ font-size: 25px; } Uninterrupted Workflow \u00b6 Often in hardware projects, the second step of a plan must await the completion of the first step. A car undergoing repairs might sit idly in a garage until a particular part arrives from the factory. A prototype might wait for a chip to be fabricated before construction can continue. section{ font-size: 25px; } Software projects can be similar. The second part of a new feature may have to wait until the first part has been released and tested. Some projects require your code to be reviewed before accepting it, so you might wait until the first part is approved before starting the second part. section{ font-size: 25px; } Thanks to painless branching and merging, we can bend the rules and work on Part II before Part I is officially ready. Suppose you have committed Part I and sent it for review. Let\u2019s say you\u2019re in the master branch. Then branch off: git checkout -b part2 section{ font-size: 25px; } Next, work on Part II, committing your changes along the way. To err is human, and often you\u2019ll want to go back and fix something in Part I. If you\u2019re lucky, or very good, you can skip these lines. git checkout master # Go back to Part I. fix_problem git commit -a # Commit the fixes. git checkout part2 # Go back to Part II. git merge master # Merge in those fixes. section{ font-size: 25px; } Eventually, Part I is approved: git checkout master # Go back to Part I. submit files # Release to the world! git merge part2 # Merge in Part II. git branch -d part2 # Delete \"part2\" branch. section{ font-size: 25px; } Now you\u2019re in the master branch again, with Part II in the working directory. section{ font-size: 25px; } It\u2019s easy to extend this trick for any number of parts. It\u2019s also easy to branch off retroactively: suppose you belatedly realize you should have created a branch 7 commits ago. Then type: git branch -m master part2 # Rename \"master\" branch to \"part2\". git branch master HEAD~7 # Create new \"master\", 7 commits upstream. section{ font-size: 25px; } The master branch now contains just Part I, and the part2 branch contains the rest. We are in the latter branch; we created master without switching to it, because we want to continue work on part2 . This is unusual. Until now, we\u2019ve been switching to branches immediately after creation, as in: git checkout HEAD~7 -b master # Create a branch, and switch to it. section{ font-size: 25px; } Reorganizing a Medley \u00b6 Perhaps you like to work on all aspects of a project in the same branch. You want to keep works-in-progress to yourself and want others to see your commits only when they have been neatly organized. Start a couple of branches: git branch sanitized # Create a branch for sanitized commits. git checkout -b medley # Create and switch to a branch to work in. section{ font-size: 25px; } Next, work on anything: fix bugs, add features, add temporary code, and so forth, committing often along the way. Then: git checkout sanitized git cherry-pick medley^^ applies the grandparent of the head commit of the \u201cmedley\u201d branch to the \u201csanitized\u201d branch. With appropriate cherry-picks you can construct a branch that contains only permanent code, and has related commits grouped together. section{ font-size: 25px; } Managing Branches \u00b6 List all branches by typing: git branch By default, you start in a branch named \u201cmaster\u201d. Some advocate leaving the \u201cmaster\u201d branch untouched and creating new branches for your own edits. section{ font-size: 25px; } The -d and -m options allow you to delete and move (rename) branches. See git help branch . section{ font-size: 25px; } The \u201cmaster\u201d branch is a useful custom. Others may assume that your repository has a branch with this name, and that it contains the official version of your project. Although you can rename or obliterate the \u201cmaster\u201d branch, you might as well respect this convention. section{ font-size: 25px; } Temporary Branches \u00b6 After a while you may realize you are creating short-lived branches frequently for similar reasons: every other branch merely serves to save the current state so you can briefly hop back to an older state to fix a high-priority bug or something. section{ font-size: 25px; } It\u2019s analogous to changing the TV channel temporarily to see what else is on. But instead of pushing a couple of buttons, you have to create, check out, merge, and delete temporary branches. Luckily, Git has a shortcut that is as convenient as a TV remote control: git stash This saves the current state in a temporary location (a stash ) and restores the previous state. section{ font-size: 25px; } Your working directory appears exactly as it was before you started editing, and you can fix bugs, pull in upstream changes, and so on. When you want to go back to the stashed state, type: git stash apply # You may need to resolve some conflicts. section{ font-size: 25px; } You can have multiple stashes, and manipulate them in various ways. See git help stash . As you may have guessed, Git maintains branches behind the scenes to perform this magic trick. section{ font-size: 25px; } Work How You Want \u00b6 You might wonder if branches are worth the bother. After all, clones are almost as fast, and you can switch between them with cd instead of esoteric Git commands. section{ font-size: 25px; } Consider web browsers. Why support multiple tabs as well as multiple windows? Because allowing both accommodates a wide variety of styles. Some users like to keep only one browser window open, and use tabs for multiple webpages. Others might insist on the other extreme: multiple windows with no tabs anywhere. Others still prefer something in between. section{ font-size: 25px; } Branching is like tabs for your working directory, and cloning is like opening a new browser window. These operations are fast and local, so why not experiment to find the combination that best suits you? Git lets you work exactly how you want. section{ font-size: 25px; } Lessons of History \u00b6 A consequence of Git\u2019s distributed nature is that history can be edited easily. But if you tamper with the past, take care: only rewrite that part of history which you alone possess. Just as nations forever argue over who committed what atrocity, if someone else has a clone whose version of history differs to yours, you will have trouble reconciling when your trees interact. Some developers strongly feel history should be immutable, warts and all. Others feel trees should be made presentable before they are unleashed in public. Git accommodates both viewpoints. Like cloning, branching, and merging, rewriting history is simply another power Git gives you. It is up to you to use it wisely. section{ font-size: 25px; } I Stand Corrected \u00b6 Did you just commit, but wish you had typed a different message? Then run: git commit --amend to change the last message. Realized you forgot to add a file? Run git add to add it, and then run the above command. -- Want to include a few more edits in that last commit? Then make those edits and run: git commit --amend -a section{ font-size: 25px; } \u2026 And Then Some \u00b6 Suppose the previous problem is ten times worse. After a lengthy session you\u2019ve made a bunch of commits. But you\u2019re not quite happy with the way they\u2019re organized, and some of those commit messages could use rewording. Then type: git rebase -i HEAD~10 and the last 10 commits will appear in your favourite $EDITOR. A sample excerpt: pick 5c6eb73 Added repo.or.cz link pick a311a64 Reordered analogies in \"Work How You Want\" pick 100834f Added push target to Makefile section{ font-size: 25px; } Older commits precede newer commits in this list, unlike the log command. Here, 5c6eb73 is the oldest commit, and 100834f is the newest. Then: Remove commits by deleting lines. Like the revert command, but off the record: it will be as if the commit never existed. Reorder commits by reordering lines. Replace pick with: edit to mark a commit for amending. reword to change the log message. squash to merge a commit with the previous one. fixup to merge a commit with the previous one and discard the log message. section{ font-size: 25px; } For example, we might replace the second pick with squash : pick 5c6eb73 Added repo.or.cz link squash a311a64 Reordered analogies in \"Work How You Want\" pick 100834f Added push target to Makefile After we save and quit, Git merges a311a64 into 5c6eb73. Thus squash merges into the next commit up: think \u201csquash up\u201d. section{ font-size: 25px; } Git then combines their log messages and presents them for editing. The command fixup skips this step; the squashed log message is simply discarded. section{ font-size: 25px; } If you marked a commit with edit , Git returns you to the past, to the oldest such commit. You can amend the old commit as described in the previous section, and even create new commits that belong here. Once you\u2019re pleased with the \u201cretcon\u201d, go forward in time by running: git rebase --continue Git replays commits until the next edit , or to the present if none remain. section{ font-size: 25px; } You can also abandon the rebase with: git rebase --abort section{ font-size: 25px; } So commit early and commit often: you can tidy up later with rebase. section{ font-size: 25px; } Local Changes Last \u00b6 You\u2019re working on an active project. You make some local commits over time, and then you sync with the official tree with a merge. This cycle repeats itself a few times before you\u2019re ready to push to the central tree. section{ font-size: 25px; } But now the history in your local Git clone is a messy jumble of your changes and the official changes. You\u2019d prefer to see all your changes in one contiguous section, and after all the official changes. section{ font-size: 25px; } This is a job for git rebase as described above. In many cases you can use the --onto flag and avoid interaction. Also see git help rebase for detailed examples of this amazing command. You can split commits. You can even rearrange branches of a tree. Take care: rebase is a powerful command. For complicated rebases, first make a backup with git clone . section{ font-size: 25px; } Rewriting History \u00b6 Occasionally, you need the source control equivalent of airbrushing people out of official photos, erasing them from history in a Stalinesque fashion. For example, suppose we intend to release a project, but it involves a file that should be kept private for some reason. Perhaps I left my credit card number in a text file and accidentally added it to the project. Deleting the file is insufficient, for the file can be accessed from older commits. We must remove the file from all commits: git filter-branch --tree-filter 'rm top/secret/file' HEAD section{ font-size: 25px; } See git help filter-branch , which discusses this example and gives a faster method. In general, filter-branch lets you alter large sections of history with a single command. Afterwards, the .git/refs/original directory describes the state of affairs before the operation. Check the filter-branch command did what you wanted, then delete this directory if you wish to run more filter-branch commands. Lastly, replace clones of your project with your revised version if you want to interact with them later. section{ font-size: 25px; } Making History \u00b6 Want to migrate a project to Git? If it\u2019s managed with one of the more well-known systems, then chances are someone has already written a script to export the whole history to Git. section{ font-size: 25px; } Otherwise, look up git fast-import , which reads text input in a specific format to create Git history from scratch. Typically a script using this command is hastily cobbled together and run once, migrating the project in a single shot. section{ font-size: 25px; } As an example, paste the following listing into temporary file, such as /tmp/history : commit refs/heads/master committer Alice <alice@example.com> Thu, 01 Jan 1970 00 :00:00 +0000 data <<EOT Initial commit. EOT M 100644 inline hello.c data <<EOT #include <stdio.h> int main() { printf(\"Hello, world!\\n\"); return 0; } EOT commit refs/heads/master committer Bob <bob@example.com> Tue, 14 Mar 2000 01 :59:26 -0800 data <<EOT Replace printf() with write(). EOT M 100644 inline hello.c data <<EOT #include <unistd.h> int main() { write(1, \"Hello, world!\\n\", 14); return 0; } EOT section{ font-size: 25px; } Then create a Git repository from this temporary file by typing: mkdir project ; cd project ; git init git fast-import --date-format = rfc2822 < /tmp/history section{ font-size: 25px; } You can checkout the latest version of the project with: git checkout master . The git fast-export command converts any repository to the git fast-import format, whose output you can study for writing exporters, and also to transport repositories in a human-readable format. Indeed, these commands can send repositories of text files over text-only channels. section{ font-size: 25px; } Where Did It All Go Wrong? \u00b6 You\u2019ve just discovered a broken feature in your program which you know for sure was working a few months ago. Argh! Where did this bug come from? If only you had been testing the feature as you developed. It\u2019s too late for that now. However, provided you\u2019ve been committing often, Git can pinpoint the problem: git bisect start git bisect bad HEAD git bisect good 1b6d section{ font-size: 25px; } Git checks out a state halfway in between. Test the feature, and if it\u2019s still broken: git bisect bad If not, replace \"bad\" with \"good\". Git again transports you to a state halfway between the known good and bad versions, narrowing down the possibilities. section{ font-size: 25px; } After a few iterations, this binary search will lead you to the commit that caused the trouble. Once you\u2019ve finished your investigation, return to your original state by typing: git bisect reset section{ font-size: 25px; } Instead of testing every change by hand, automate the search by running: git bisect run my_script Git uses the return value of the given command, typically a one-off script, to decide whether a change is good or bad: the command should exit with code 0 when good, 125 when the change should be skipped, and anything else between 1 and 127 if it is bad. A negative return value aborts the bisect. section{ font-size: 25px; } You can do much more: the help page explains how to visualize bisects, examine or replay the bisect log, and eliminate known innocent changes for a speedier search. section{ font-size: 25px; } Who Made It All Go Wrong? \u00b6 Like many other version control systems, Git has a blame command: git blame bug.c which annotates every line in the given file showing who last changed it, and when. Unlike many other version control systems, this operation works offline, reading only from local disk. section{ font-size: 25px; } Multiplayer Git \u00b6 Initially I used Git on a private project where I was the sole developer. Amongst the commands related to Git\u2019s distributed nature, I needed only pull and clone so could I keep the same project in different places. Later I wanted to publish my code with Git, and include changes from contributors. I had to learn how to manage projects with multiple developers from all over the world. Fortunately, this is Git\u2019s forte, and arguably its raison d\u2019\u00eatre. section{ font-size: 25px; } Who Am I? \u00b6 Every commit has an author name and email, which is shown by git log . By default, Git uses system settings to populate these fields. To set them explicitly, type: git config --global user.name \"John Doe\" git config --global user.email johndoe@example.com Omit the global flag to set these options only for the current repository. section{ font-size: 25px; } Git Over SSH, HTTP \u00b6 Suppose you have SSH access to a web server, but Git is not installed. Though less efficient than its native protocol, Git can communicate over HTTP. Download, compile and install Git in your account, and create a repository in your web directory: GIT_DIR = proj.git git init cd proj.git git --bare update-server-info cp hooks/post-update.sample hooks/post-update section{ font-size: 25px; } For older versions of Git, the copy command fails and you should run: chmod a+x hooks/post-update section{ font-size: 25px; } Now you can publish your latest edits via SSH from any clone: git push web.server:/path/to/proj.git master section{ font-size: 25px; } and anybody can get your project with: git clone http://web.server/proj.git section{ font-size: 25px; } Git Over Anything \u00b6 Want to synchronize repositories without servers, or even a network connection? Need to improvise during an emergency? We\u2019ve seen git fast-export and git fast-import can convert repositories to a single file and back . We could shuttle such files back and forth to transport git repositories over any medium, but a more efficient tool is git bundle . The sender creates a bundle : git bundle create somefile HEAD then transports the bundle, somefile , to the other party somehow: email, thumb drive, an xxd printout and an OCR scanner, reading bits over the phone, smoke signals, etc. section{ font-size: 25px; } The receiver retrieves commits from the bundle by typing: git pull somefile The receiver can even do this from an empty repository. Despite its size, somefile contains the entire original git repository. section{ font-size: 25px; } In larger projects, eliminate waste by bundling only changes the other repository lacks. For example, suppose the commit \u201c1b6d\u2026\u201d is the most recent commit shared by both parties: git bundle create somefile HEAD ^1b6d section{ font-size: 25px; } If done frequently, one could easily forget which commit was last sent. The help page suggests using tags to solve this. Namely, after you send a bundle, type: git tag -f lastbundle HEAD and create new refresher bundles with: git bundle create newbundle HEAD ^lastbundle section{ font-size: 25px; } Patches: The Global Currency \u00b6 Patches are text representations of your changes that can be easily understood by computers and humans alike. This gives them universal appeal. You can email a patch to developers no matter what version control system they\u2019re using. As long as your audience can read their email, they can see your edits. Similarly, on your side, all you require is an email account: there\u2019s no need to setup an online Git repository. section{ font-size: 25px; } Recall from the first chapter: git diff 1b6d > my.patch section{ font-size: 25px; } outputs a patch which can be pasted into an email for discussion. In a Git repository, type: git apply < my.patch section{ font-size: 25px; } to apply the patch. In more formal settings, when author names and perhaps signatures should be recorded, generate the corresponding patches past a certain point by typing: git format-patch 1b6d section{ font-size: 25px; } The resulting files can be given to git-send-email , or sent by hand. You can also specify a range of commits: git format-patch 1b6d..HEAD^^ section{ font-size: 25px; } On the receiving end, save an email to a file, then type: git am < email.txt This applies the incoming patch and also creates a commit, including information such as the author. section{ font-size: 25px; } With a browser email client, you may need to click a button to see the email in its raw original form before saving the patch to a file. There are slight differences for mbox-based email clients, but if you use one of these, you\u2019re probably the sort of person who can figure them out easily without reading tutorials! section{ font-size: 25px; } Sorry, We\u2019ve Moved \u00b6 After cloning a repository, running git push or git pull will automatically push to or pull from the original URL. How does Git do this? The secret lies in config options created with the clone. Let\u2019s take a peek: git config --list The remote.origin.url option controls the source URL; \u201corigin\u201d is a nickname given to the source repository. As with the \u201cmaster\u201d branch convention, we may change or delete this nickname but there is usually no reason for doing so. section{ font-size: 25px; } If the original repository moves, we can update the URL via: git config remote.origin.url git://new.url/proj.git The branch.master.merge option specifies the default remote branch in a git pull . During the initial clone, it is set to the current branch of the source repository, so even if the HEAD of the source repository subsequently moves to a different branch, a later pull will faithfully follow the original branch. section{ font-size: 25px; } This option only applies to the repository we first cloned from, which is recorded in the option branch.master.remote . If we pull in from other repositories we must explicitly state which branch we want: git pull git://example.com/other.git master The above explains why some of our earlier push and pull examples had no arguments. section{ font-size: 25px; } Remote Branches \u00b6 When you clone a repository, you also clone all its branches. You may not have noticed this because Git hides them away: you must ask for them specifically. This prevents branches in the remote repository from interfering with your branches, and also makes Git easier for beginners. section{ font-size: 25px; } List the remote branches with: git branch -r You should see something like: origin/HEAD origin/master origin/experimental These represent branches and the HEAD of the remote repository, and can be used in regular Git commands. For example, suppose you have made many commits, and wish to compare against the last fetched version. section{ font-size: 25px; } You could search through the logs for the appropriate SHA1 hash, but it\u2019s much easier to type: git diff origin/HEAD Or you can see what the \u201cexperimental\u201d branch has been up to: git log origin/experimental section{ font-size: 25px; } Multiple Remotes \u00b6 Suppose two other developers are working on our project, and we want to keep tabs on both. We can follow more than one repository at a time with: git remote add other git://example.com/some_repo.git git pull other some_branch section{ font-size: 25px; } Now we have merged in a branch from the second repository, and we have easy access to all branches of all repositories: git diff origin/experimental^ other/some_branch~5 But what if we just want to compare their changes without affecting our own work? section{ font-size: 25px; } In other words, we want to examine their branches without having their changes invade our working directory. Then rather than pull, run: git fetch # Fetch from origin, the default. git fetch other # Fetch from the second programmer. This just fetches histories. Although the working directory remains untouched, we can refer to any branch of any repository in a Git command because we now possess a local copy. section{ font-size: 25px; } Recall that behind the scenes, a pull is simply a fetch then merge . Usually we pull because we want to merge the latest commit after a fetch; this situation is a notable exception. section{ font-size: 25px; } See git help remote for how to remove remote repositories, ignore certain branches, and more. section{ font-size: 25px; } Preferences \u00b6 For my projects, I like contributors to prepare repositories from which I can pull. Some Git hosting services let you host your own fork of a project with the click of a button. After I fetch a tree, I run Git commands to navigate and examine the changes, which ideally are well-organized and well-described. I merge my own changes, and perhaps make further edits. Once satisfied, I push to the main repository. Though I infrequently receive contributions, I believe this approach scales well. See this blog post by Linus Torvalds . Staying in the Git world is slightly more convenient than patch files, as it saves me from converting them to Git commits. Furthermore, Git handles details such as recording the author\u2019s name and email address, as well as the time and date, and asks the author to describe their own change. section{ font-size: 25px; } Git Grandmastery \u00b6 By now, you should be able to navigate the git help pages and understand almost everything. However, pinpointing the exact command required to solve a given problem can be tedious. Perhaps I can save you some time: below are some recipes I have needed in the past. section{ font-size: 25px; } Source Releases \u00b6 For my projects, Git tracks exactly the files I\u2019d like to archive and release to users. To create a tarball of the source code, I run: git archive --format = tar --prefix = proj-1.2.3/ HEAD section{ font-size: 25px; } Commit What Changed \u00b6 Telling Git when you\u2019ve added, deleted and renamed files is troublesome for certain projects. Instead, you can type: git add . git add -u Git will look at the files in the current directory and work out the details by itself. Instead of the second add command, run git commit -a if you also intend to commit at this time. See git help ignore for how to specify files that should be ignored. section{ font-size: 25px; } You can perform the above in a single pass with: git ls-files -d -m -o -z | xargs -0 git update-index --add --remove The -z and -0 options prevent ill side-effects from filenames containing strange characters. As this command adds ignored files, you may want to use the -x or -X option. section{ font-size: 25px; } My Commit Is Too Big! \u00b6 Have you neglected to commit for too long? Been coding furiously and forgotten about source control until now? Made a series of unrelated changes, because that\u2019s your style? section{ font-size: 25px; } No worries. Run: git add -p For each edit you made, Git will show you the hunk of code that was changed, and ask if it should be part of the next commit. Answer with \"y\" or \"n\". You have other options, such as postponing the decision; type \"?\" to learn more. section{ font-size: 25px; } Once you\u2019re satisfied, type git commit to commit precisely the changes you selected (the staged changes). Make sure you omit the -a option, otherwise Git will commit all the edits. section{ font-size: 25px; } What if you\u2019ve edited many files in many places? Reviewing each change one by one becomes frustratingly mind-numbing. In this case, use git add -i , whose interface is less straightforward, but more flexible. With a few keystrokes, you can stage or unstage several files at a time, or review and select changes in particular files only. Alternatively, run git commit --interactive which automatically commits after you\u2019re done. section{ font-size: 25px; } The Index: Git\u2019s Staging Area \u00b6 So far we have avoided Git\u2019s famous index , but we must now confront it to explain the above. The index is a temporary staging area. Git seldom shuttles data directly between your project and its history. Rather, Git first writes data to the index, and then copies the data in the index to its final destination. section{ font-size: 25px; } For example, commit -a is really a two-step process. The first step places a snapshot of the current state of every tracked file into the index. The second step permanently records the snapshot now in the index. Committing without the -a option only performs the second step, and only makes sense after running commands that somehow change the index, such as git add . section{ font-size: 25px; } Usually we can ignore the index and pretend we are reading straight from and writing straight to the history. On this occasion, we want finer control, so we manipulate the index. We place a snapshot of some, but not all, of our changes into the index, and then permanently record this carefully rigged snapshot. section{ font-size: 25px; } Don\u2019t Lose Your HEAD \u00b6 The HEAD tag is like a cursor that normally points at the latest commit, advancing with each new commit. Some Git commands let you move it. For example: git reset HEAD~3 will move the HEAD three commits back. Thus all Git commands now act as if you hadn\u2019t made those last three commits, while your files remain in the present. See the help page for some applications. section{ font-size: 25px; } But how can you go back to the future? The past commits know nothing of the future. If you have the SHA1 of the original HEAD then: git reset 1b6d -- But suppose you never took it down? Don\u2019t worry: for commands like these, Git saves the original HEAD as a tag called ORIG_HEAD, and you can return safe and sound with: git reset ORIG_HEAD section{ font-size: 25px; } HEAD-hunting \u00b6 Perhaps ORIG_HEAD isn\u2019t enough. Perhaps you\u2019ve just realized you made a monumental mistake and you need to go back to an ancient commit in a long-forgotten branch. section{ font-size: 25px; } By default, Git keeps a commit for at least two weeks, even if you ordered Git to destroy the branch containing it. The trouble is finding the appropriate hash. You could look at all the hash values in .git/objects and use trial and error to find the one you want. But there\u2019s a much easier way. section{ font-size: 25px; } Git records every hash of a commit it computes in .git/logs . The subdirectory refs contains the history of all activity on all branches, while the file HEAD shows every hash value it has ever taken. The latter can be used to find hashes of commits on branches that have been accidentally lopped off. The reflog command provides a friendly interface to these log files. Try git reflog section{ font-size: 25px; } Instead of cutting and pasting hashes from the reflog, try: git checkout \"@{10 minutes ago}\" section{ font-size: 25px; } Or checkout the 5 th -last visited commit via: git checkout \"@{5}\" section{ font-size: 25px; } See the \u201cSpecifying Revisions\u201d section of git help rev-parse for more. You may wish to configure a longer grace period for doomed commits. For example: git config gc.pruneexpire \"30 days\" means a deleted commit will only be permanently lost once 30 days have passed and git gc is run. -- You may also wish to disable automatic invocations of git gc : git config gc.auto 0 in which case commits will only be deleted when you run git gc manually. section{ font-size: 25px; } Building On Git \u00b6 In true UNIX fashion, Git\u2019s design allows it to be easily used as a low-level component of other programs, such as GUI and web interfaces, alternative command-line interfaces, patch managements tools, importing and conversion tools and so on. In fact, some Git commands are themselves scripts standing on the shoulders of giants. With a little tinkering, you can customize Git to suit your preferences. section{ font-size: 25px; } One easy trick is to use built-in Git aliases to shorten your most frequently used commands: git config --global alias.co checkout git config --global --get-regexp alias # display current aliases alias.co checkout git co foo # same as 'git checkout foo' section{ font-size: 25px; } Another is to print the current branch in the prompt, or window title. Invoking git symbolic-ref HEAD section{ font-size: 25px; } shows the current branch name. In practice, you most likely want to remove the \"refs/heads/\" and ignore errors: git symbolic-ref HEAD 2 > /dev/null | cut -b 12 - The contrib subdirectory is a treasure trove of tools built on Git. In time, some of them may be promoted to official commands. On Debian and Ubuntu, this directory lives at /usr/share/doc/git-core/contrib . section{ font-size: 25px; } One popular resident is workdir/git-new-workdir . Via clever symlinking, this script creates a new working directory whose history is shared with the original repository: git-new-workdir an/existing/repo new/directory The new directory and the files within can be thought of as a clone, except since the history is shared, the two trees automatically stay in sync. There\u2019s no need to merge, push, or pull. section{ font-size: 25px; } Daring Stunts \u00b6 These days, Git makes it difficult for the user to accidentally destroy data. But if you know what you are doing, you can override safeguards for common commands. section{ font-size: 25px; } Checkout : Uncommitted changes cause checkout to fail. To destroy your changes, and checkout a given commit anyway, use the force flag: git checkout -f HEAD^ section{ font-size: 25px; } On the other hand, if you specify particular paths for checkout, then there are no safety checks. The supplied paths are quietly overwritten. Take care if you use checkout in this manner. section{ font-size: 25px; } Reset : Reset also fails in the presence of uncommitted changes. To force it through, run: git reset --hard 1b6d section{ font-size: 25px; } Branch : Deleting branches fails if this causes changes to be lost. To force a deletion, type: git branch -D dead_branch # instead of -d section{ font-size: 25px; } Similarly, attempting to overwrite a branch via a move fails if data loss would ensue. To force a branch move, type: git branch -M source target # instead of -m Unlike checkout and reset, these two commands defer data destruction. The changes are still stored in the .git subdirectory, and can be retrieved by recovering the appropriate hash from .git/logs (see \"HEAD-hunting\" above). By default, they will be kept for at least two weeks. section{ font-size: 25px; } Clean : Some git commands refuse to proceed because they\u2019re worried about clobbering untracked files. If you\u2019re certain that all untracked files and directories are expendable, then delete them mercilessly with: git clean -f -d Next time, that pesky command will work! section{ font-size: 25px; } Preventing Bad Commits \u00b6 Stupid mistakes pollute my repositories. Most frightening are missing files due to a forgotten git add . Lesser transgressions are trailing whitespace and unresolved merge conflicts: though harmless, I wish these never appeared on the public record. If only I had bought idiot insurance by using a hook to alert me about these problems: cd .git/hooks cp pre-commit.sample pre-commit # Older Git versions: chmod +x pre-commit section{ font-size: 25px; } Now Git aborts a commit if useless whitespace or unresolved merge conflicts are detected. section{ font-size: 25px; } For this guide, I eventually added the following to the beginning of the pre-commit hook to guard against absent-mindedness: if git ls-files -o | grep '\\.txt$' ; then echo FAIL! Untracked .txt files. exit 1 fi section{ font-size: 25px; } Several git operations support hooks; see git help hooks . We activated the sample post-update hook earlier when discussing Git over HTTP. This runs whenever the head moves. The sample post-update script updates files Git needs for communication over Git-agnostic transports such as HTTP. section{ font-size: 25px; } Secrets Revealed \u00b6 We take a peek under the hood and explain how Git performs its miracles. I will skimp over details. For in-depth descriptions refer to the user manual . section{ font-size: 25px; } Invisibility \u00b6 How can Git be so unobtrusive? Aside from occasional commits and merges, you can work as if you were unaware that version control exists. That is, until you need it, and that\u2019s when you\u2019re glad Git was watching over you the whole time. section{ font-size: 25px; } Other version control systems force you to constantly struggle with red tape and bureaucracy. Permissions of files may be read-only unless you explicitly tell a central server which files you intend to edit. The most basic commands may slow to a crawl as the number of users increases. Work grinds to a halt when the network or the central server goes down. section{ font-size: 25px; } In contrast, Git simply keeps the history of your project in the .git directory in your working directory. This is your own copy of the history, so you can stay offline until you want to communicate with others. You have total control over the fate of your files because Git can easily recreate a saved state from .git at any time. section{ font-size: 25px; } Integrity \u00b6 Most people associate cryptography with keeping information secret, but another equally important goal is keeping information safe. Proper use of cryptographic hash functions can prevent accidental or malicious data corruption. section{ font-size: 25px; } A SHA1 hash can be thought of as a unique 160-bit ID number for every string of bytes you\u2019ll encounter in your life. Actually more than that: every string of bytes that any human will ever use over many lifetimes. section{ font-size: 25px; } As a SHA1 hash is itself a string of bytes, we can hash strings of bytes containing other hashes. This simple observation is surprisingly useful: look up hash chains . We\u2019ll later see how Git uses it to efficiently guarantee data integrity. section{ font-size: 25px; } Briefly, Git keeps your data in the .git/objects subdirectory, where instead of normal filenames, you\u2019ll find only IDs. By using IDs as filenames, as well as a few lockfiles and timestamping tricks, Git transforms any humble filesystem into an efficient and robust database. section{ font-size: 25px; } Intelligence \u00b6 How does Git know you renamed a file, even though you never mentioned the fact explicitly? Sure, you may have run git mv , but that is exactly the same as a git rm followed by a git add . section{ font-size: 25px; } Git heuristically ferrets out renames and copies between successive versions. In fact, it can detect chunks of code being moved or copied around between files! Though it cannot cover all cases, it does a decent job, and this feature is always improving. If it fails to work for you, try options enabling more expensive copy detection, and consider upgrading. section{ font-size: 25px; } Indexing \u00b6 For every tracked file, Git records information such as its size, creation time and last modification time in a file known as the index . To determine whether a file has changed, Git compares its current stats with those cached in the index. If they match, then Git can skip reading the file again. section{ font-size: 25px; } Since stat calls are considerably faster than file reads, if you only edit a few files, Git can update its state in almost no time. section{ font-size: 25px; } We stated earlier that the index is a staging area. Why is a bunch of file stats a staging area? Because the add command puts files into Git\u2019s database and updates these stats, while the commit command, without options, creates a commit based only on these stats and the files already in the database. section{ font-size: 25px; } Git\u2019s Origins \u00b6 This Linux Kernel Mailing List post describes the chain of events that led to Git. The entire thread is a fascinating archaeological site for Git historians. section{ font-size: 25px; } The Object Database \u00b6 Every version of your data is kept in the object database , which lives in the subdirectory .git/objects ; the other residents of .git/ hold lesser data: the index, branch names, tags, configuration options, logs, the current location of the head commit, and so on. The object database is elementary yet elegant, and the source of Git\u2019s power. Each file within .git/objects is an object . There are 3 kinds of objects that concern us: blob objects, tree objects, and commit objects. section{ font-size: 25px; } Blobs \u00b6 First, a magic trick. Pick a filename, any filename. In an empty directory: echo sweet > YOUR_FILENAME git init git add . find .git/objects -type f You\u2019ll see .git/objects/aa/823728ea7d592acc69b36875a482cdf3fd5c8d . section{ font-size: 25px; } How do I know this without knowing the filename? It\u2019s because the SHA1 hash of: \"blob\" SP \"6\" NUL \"sweet\" LF is aa823728ea7d592acc69b36875a482cdf3fd5c8d , where SP is a space, NUL is a zero byte and LF is a linefeed. You can verify this by typing: printf \"blob 6\\000sweet\\n\" | sha1sum section{ font-size: 25px; } Git is content-addressable : files are not stored according to their filename, but rather by the hash of the data they contain, in a file we call a blob object . We can think of the hash as a unique ID for a file\u2019s contents, so in a sense we are addressing files by their content. The initial blob 6 is merely a header consisting of the object type and its length in bytes; it simplifies internal bookkeeping. section{ font-size: 25px; } Thus I could easily predict what you would see. The file\u2019s name is irrelevant: only the data inside is used to construct the blob object. section{ font-size: 25px; } You may be wondering what happens to identical files. Try adding copies of your file, with any filenames whatsoever. The contents of .git/objects stay the same no matter how many you add. Git only stores the data once. section{ font-size: 25px; } By the way, the files within .git/objects are compressed with zlib so you should not stare at them directly. Filter them through zpipe -d , or type: git cat-file -p aa823728ea7d592acc69b36875a482cdf3fd5c8d which pretty-prints the given object. section{ font-size: 25px; } Trees \u00b6 But where are the filenames? They must be stored somewhere at some stage. Git gets around to the filenames during a commit: git commit # Type some message. find .git/objects -type f section{ font-size: 25px; } You should now see 3 objects. This time I cannot tell you what the 2 new files are, as it partly depends on the filename you picked. We\u2019ll proceed assuming you chose \u201crose\u201d. If you didn\u2019t, you can rewrite history to make it look like you did: git filter-branch --tree-filter 'mv YOUR_FILENAME rose' find .git/objects -type f section{ font-size: 25px; } Now you should see the file .git/objects/05/b217bb859794d08bb9e4f7f04cbda4b207fbe9 , because this is the SHA1 hash of its contents: \"tree\" SP \"32\" NUL \"100644 rose\" NUL 0xaa823728ea7d592acc69b36875a482cdf3fd5c8d section{ font-size: 25px; } Check this file does indeed contain the above by typing: echo 05b217bb859794d08bb9e4f7f04cbda4b207fbe9 | git cat-file --batch With zpipe, it\u2019s easy to verify the hash: zpipe -d < .git/objects/05/b217bb859794d08bb9e4f7f04cbda4b207fbe9 | sha1sum Hash verification is trickier via cat-file because its output contains more than the raw uncompressed object file. section{ font-size: 25px; } This file is a tree object: a list of tuples consisting of a file type, a filename, and a hash. In our example, the file type is 100644, which means \u2018rose is a normal file, and the hash is the blob object that contains the contents of rose\u2019. Other possible file types are executables, symlinks or directories. In the last case, the hash points to a tree object. section{ font-size: 25px; } If you ran filter-branch, you\u2019ll have old objects you no longer need. Although they will be jettisoned automatically once the grace period expires, we\u2019ll delete them now to make our toy example easier to follow: rm -r .git/refs/original git reflog expire --expire = now --all git prune section{ font-size: 25px; } For real projects you should typically avoid commands like this, as you are destroying backups. If you want a clean repository, it is usually best to make a fresh clone. Also, take care when directly manipulating .git : what if a Git command is running at the same time, or a sudden power outage occurs? In general, refs should be deleted with git update-ref -d , though usually it\u2019s safe to remove refs/original by hand. section{ font-size: 25px; } Commits \u00b6 We\u2019ve explained 2 of the 3 objects. The third is a commit object. Its contents depend on the commit message as well as the date and time it was created. To match what we have here, we\u2019ll have to tweak it a little: git commit --amend -m Shakespeare # Change the commit message. git filter-branch --env-filter 'export GIT_AUTHOR_DATE=\"Fri 13 Feb 2009 15:31:30 -0800\" GIT_AUTHOR_NAME=\"Alice\" GIT_AUTHOR_EMAIL=\"alice@example.com\" GIT_COMMITTER_DATE=\"Fri, 13 Feb 2009 15:31:30 -0800\" GIT_COMMITTER_NAME=\"Bob\" GIT_COMMITTER_EMAIL=\"bob@example.com\"' # Rig timestamps and authors. find .git/objects -type f section{ font-size: 25px; } You should now see .git/objects/49/993fe130c4b3bf24857a15d7969c396b7bc187 which is the SHA1 hash of its contents: \"commit 158\" NUL \"tree 05b217bb859794d08bb9e4f7f04cbda4b207fbe9\" LF \"author Alice <alice@example.com> 1234567890 -0800\" LF \"committer Bob <bob@example.com> 1234567890 -0800\" LF LF \"Shakespeare\" LF section{ font-size: 25px; } As before, you can run zpipe or cat-file to see for yourself. This is the first commit, so there are no parent commits, but later commits will always contain at least one line identifying a parent commit. section{ font-size: 25px; } Indistinguishable From Magic \u00b6 Git\u2019s secrets seem too simple. It looks like you could mix together a few shell scripts and add a dash of C code to cook it up in a matter of hours: a melange of basic filesystem operations and SHA1 hashing, garnished with lock files and fsyncs for robustness. In fact, this accurately describes the earliest versions of Git. Nonetheless, apart from ingenious packing tricks to save space, and ingenious indexing tricks to save time, we now know how Git deftly changes a filesystem into a database perfect for version control. section{ font-size: 25px; } For example, if any file within the object database is corrupted by a disk error, then its hash will no longer match, alerting us to the problem. By hashing hashes of other objects, we maintain integrity at all levels. Commits are atomic, that is, a commit can never only partially record changes: we can only compute the hash of a commit and store it in the database after we already have stored all relevant trees, blobs and parent commits. The object database is immune to unexpected interruptions such as power outages. section{ font-size: 25px; } We defeat even the most devious adversaries. Suppose somebody attempts to stealthily modify the contents of a file in an ancient version of a project. To keep the object database looking healthy, they must also change the hash of the corresponding blob object since it\u2019s now a different string of bytes. section{ font-size: 25px; } This means they\u2019ll have to change the hash of any tree object referencing the file, and in turn change the hash of all commit objects involving such a tree, in addition to the hashes of all the descendants of these commits. This implies the hash of the official head differs to that of the bad repository. section{ font-size: 25px; } By following the trail of mismatching hashes we can pinpoint the mutilated file, as well as the commit where it was first corrupted. section{ font-size: 25px; } In short, so long as the 20 bytes representing the last commit are safe, it\u2019s impossible to tamper with a Git repository. section{ font-size: 25px; } What about Git\u2019s famous features? Branching? Merging? Tags? Mere details. The current head is kept in the file .git/HEAD , which contains a hash of a commit object. The hash gets updated during a commit as well as many other commands. Branches are almost the same: they are files in .git/refs/heads . Tags too: they live in .git/refs/tags but they are updated by a different set of commands. section{ font-size: 25px; } Git Shortcomings \u00b6 There are some Git issues I\u2019ve swept under the carpet. Some can be handled easily with scripts and hooks, some require reorganizing or redefining the project, and for the few remaining annoyances, one will just have to wait. Or better yet, pitch in and help! section{ font-size: 25px; } SHA1 Weaknesses \u00b6 As time passes, cryptographers discover more and more SHA1 weaknesses. Already, finding hash collisions is feasible for well-funded organizations. Within years, perhaps even a typical PC will have enough computing power to silently corrupt a Git repository. Hopefully Git will migrate to a better hash function before further research destroys SHA1. section{ font-size: 25px; } Unrelated Files \u00b6 If your project is very large and contains many unrelated files that are constantly being changed, Git may be disadvantaged more than other systems because single files are not tracked. Git tracks changes to the whole project, which is usually beneficial. A solution is to break up your project into pieces, each consisting of related files. Use git submodule if you still want to keep everything in a single repository. section{ font-size: 25px; } Who\u2019s Editing What? \u00b6 Some version control systems force you to explicitly mark a file in some way before editing. While this is especially annoying when this involves talking to a central server, it does have two benefits: Diffs are quick because only the marked files need be examined. One can discover who else is working on the file by asking the central server who has marked it for editing. With appropriate scripting, you can achieve the same with Git. This requires cooperation from the programmer, who should execute particular scripts when editing a file. section{ font-size: 25px; } File History \u00b6 Since Git records project-wide changes, reconstructing the history of a single file requires more work than in version control systems that track individual files. The penalty is typically slight, and well worth having as other operations are incredibly efficient. For example, git checkout is faster than cp -a , and project-wide deltas compress better than collections of file-based deltas. section{ font-size: 25px; } Initial Clone \u00b6 Creating a clone is more expensive than checking out code in other version control systems when there is a lengthy history. The initial cost is worth paying in the long run, as most future operations will then be fast and offline. However, in some situations, it may be preferable to create a shallow clone with the --depth option. This is much faster, but the resulting clone has reduced functionality. section{ font-size: 25px; } Volatile Projects \u00b6 Git was written to be fast with respect to the size of the changes. Humans make small edits from version to version. A one-liner bugfix here, a new feature there, emended comments, and so forth. But if your files are radically different in successive revisions, then on each commit, your history necessarily grows by the size of your whole project. section{ font-size: 25px; } There is nothing any version control system can do about this, but standard Git users will suffer more since normally histories are cloned. section{ font-size: 25px; } The reasons why the changes are so great should be examined. Perhaps file formats should be changed. Minor edits should only cause minor changes to at most a few files. section{ font-size: 25px; } Or perhaps a database or backup/archival solution is what is actually being sought, not a version control system. For example, version control may be ill-suited for managing photos periodically taken from a webcam. section{ font-size: 25px; } If the files really must be constantly morphing and they really must be versioned, a possibility is to use Git in a centralized fashion. One can create shallow clones, which checks out little or no history of the project. Of course, many Git tools will be unavailable, and fixes must be submitted as patches. This is probably fine as it\u2019s unclear why anyone would want the history of wildly unstable files. section{ font-size: 25px; } Another example is a project depending on firmware, which takes the form of a huge binary file. The history of the firmware is uninteresting to users, and updates compress poorly, so firmware revisions would unnecessarily blow up the size of the repository. section{ font-size: 25px; } In this case, the source code should be stored in a Git repository, and the binary file should be kept separately. To make life easier, one could distribute a script that uses Git to clone the code, and rsync or a Git shallow clone for the firmware. section{ font-size: 25px; } Global Counter \u00b6 Some centralized version control systems maintain a positive integer that increases when a new commit is accepted. Git refers to changes by their hash, which is better in many circumstances. section{ font-size: 25px; } But some people like having this integer around. Luckily, it\u2019s easy to write scripts so that with every update, the central Git repository increments an integer, perhaps in a tag, and associates it with the hash of the latest commit. section{ font-size: 25px; } Every clone could maintain such a counter, but this would probably be useless, since only the central repository and its counter matters to everyone. section{ font-size: 25px; } Empty Subdirectories \u00b6 Empty subdirectories cannot be tracked. Create dummy files to work around this problem. section{ font-size: 25px; } The current implementation of Git, rather than its design, is to blame for this drawback. With luck, once Git gains more traction, more users will clamour for this feature and it will be implemented. section{ font-size: 25px; } Initial Commit \u00b6 A stereotypical computer scientist counts from 0, rather than 1. Unfortunately, with respect to commits, git does not adhere to this convention. Many commands are unfriendly before the initial commit. Additionally, some corner cases must be handled specially, such as rebasing a branch with a different initial commit. section{ font-size: 25px; } Git would benefit from defining the zero commit: as soon as a repository is constructed, HEAD would be set to the string consisting of 20 zero bytes. This special commit represents an empty tree, with no parent, at some time predating all Git repositories. section{ font-size: 25px; } Then running git log, for example, would inform the user that no commits have been made yet, instead of exiting with a fatal error. Similarly for other tools. section{ font-size: 25px; } Every initial commit is implicitly a descendant of this zero commit. section{ font-size: 25px; } However there are some problem cases unfortunately. If several branches with different initial commits are merged together, then rebasing the result requires substantial manual intervention. section{ font-size: 25px; } Interface Quirks \u00b6 For commits A and B, the meaning of the expressions \"A..B\" and \"A\u2026B\" depends on whether the command expects two endpoints or a range. See git help diff and git help rev-parse . section{ font-size: 25px; } References (1) \u00b6 Source Code Management | Atlassian Git Tutorial . What is Source Code Management or Version Control ? - The Linux Juggernaut https://www.edureka.co/blog/how-to-use-github/ https://www.edureka.co/blog/git-tutorial/ https://www.edureka.co/blog/install-git/ section{ font-size: 25px; } References (2) \u00b6 git - the simple guide - no deep shit! GitHub - rogerdudler/git-guide: git - the simple guide https://dev.to/lydiahallie/cs-visualized-useful-git-commands-37p1#merge How to write a good commit message - DEV Community https://blog.xebialabs.com/2016/06/14/periodic-table-devops-tools-v-2/ section{ font-size: 25px; } References (3) \u00b6 https://harness.io/2018/01/devops-tools-lifecycle-mesh-2018/ https://medium.com/swlh/how-to-become-an-devops-engineer-in-2020-80b8740d5a52 https://www.lucidchart.com/blog/devops-process-flow https://www.researchgate.net/publication/262450962_Rugby_An_Agile_Process_Model_Based_on_Continuous_Delivery section{ font-size: 25px; } References (4) \u00b6 git - the simple guide - no deep shit! Git Tutorial | Commands And Operations In Git | Edureka How to write a good commit message - DEV Community An Introduction to Git and GitHub by Brian Yu - YouTube section{ font-size: 25px; } References (5) \u00b6 https://education.github.com/git-cheat-sheet-education.pdf NDP Software :: Git Cheatsheet ; Learn Git Branching https://guides.github.com/introduction/git-handbook/ section{ font-size: 25px; } \\[ End-Of-Week-3 \\]","title":"Week-3 (Git Version Management)"},{"location":"week-3-git/ce103-week-3-git/#ce103-algorithms-and-programming-i","text":"","title":"CE103 Algorithms and Programming I"},{"location":"week-3-git/ce103-week-3-git/#week-3","text":"","title":"Week-3"},{"location":"week-3-git/ce103-week-3-git/#introduction-to-source-code-version-management-systems","text":"Download DOC , SLIDE , PPTX section{ font-size: 25px; }","title":"Introduction to Source Code Version Management Systems"},{"location":"week-3-git/ce103-week-3-git/#outline","text":"Introduction to Source Code Version Management Systems Features of Source Code Management Systems Why Do We Need Source Code Management Systems Centralized/Distrubuted Version Control Systems Introduction to Git Git Installation and Configuration section{ font-size: 25px; }","title":"Outline"},{"location":"week-3-git/ce103-week-3-git/#outline_1","text":"Git Init Repository Git Add Files Git Commit Changes Git Pull/Fetch Changes from Remote Repo Git Push Local Changes to Remote Repo Git Branching Git Merging and Conflict Solving Git Rebasing Git Reset Git Logs and Monitoring Git Decision Tree Git Visualize Logs","title":"Outline"},{"location":"week-3-git/ce103-week-3-git/#introduction-to-source-code-version-management-systems_1","text":"","title":"Introduction to Source Code Version Management Systems"},{"location":"week-3-git/ce103-week-3-git/#git-github-gitlab-bitbucket-maven-svn-tfs","text":"Source code management (SCM) is used to track modifications to a source code repository. SCM tracks a running history of changes to a code base and helps resolve conflicts when merging updates from multiple contributors. SCM is also synonymous with Version control. As software projects grow in lines of code and contributor head count, the costs of communication overhead and management complexity also grow. SCM is a critical tool to alleviate the organizational strain of growing development costs. section{ font-size: 25px; }","title":"Git, Github, Gitlab, Bitbucket, Maven, SVN, TFS"},{"location":"week-3-git/ce103-week-3-git/#features-of-source-code-management-systems","text":"Authenticated access for commits Revision history on files Atomic commits of multiple files Versioning/Tagging section{ font-size: 25px; }","title":"Features of Source Code Management Systems"},{"location":"week-3-git/ce103-week-3-git/#why-do-we-need-source-code-management-systems-1","text":"We can save the file with a different name if it\u2019s our school project or one-time papers but for a well-equipped software development? Not a chance. section{ font-size: 25px; }","title":"Why Do We Need Source Code Management Systems? (1)"},{"location":"week-3-git/ce103-week-3-git/#why-do-we-need-source-code-management-systems-2","text":"Big projects need a version control system to track the changes and avoid misunderstanding. A good SCM does the following: Backup and Restore Synchronization Short-Term Undo Long-Term Undo Track Changes Ownership Branching and Merging section{ font-size: 25px; }","title":"Why Do We Need Source Code Management Systems? (2)"},{"location":"week-3-git/ce103-week-3-git/#why-do-we-need-source-code-management-systems-3","text":"Backup and Restore \u2013 Files can be saved at any moment and can be restored from the last saved. section{ font-size: 25px; }","title":"Why Do We Need Source Code Management Systems? (3)"},{"location":"week-3-git/ce103-week-3-git/#why-do-we-need-source-code-management-systems-4","text":"Synchronization \u2013 Programmers can get the latest code and fetch the up-to-date codes from the repository. section{ font-size: 25px; }","title":"Why Do We Need Source Code Management Systems? (4)"},{"location":"week-3-git/ce103-week-3-git/#why-do-we-need-source-code-management-systems-5","text":"Short-Term Undo \u2013 Working with a file and messed it up. We can do a short-term undo to the last known version. section{ font-size: 25px; }","title":"Why Do We Need Source Code Management Systems? (5)"},{"location":"week-3-git/ce103-week-3-git/#why-do-we-need-source-code-management-systems-6","text":"Long-Term Undo \u2013 It helps when we have to make a release version rollback. Something like going to the last version which was created a year section{ font-size: 25px; }","title":"Why Do We Need Source Code Management Systems? (6)"},{"location":"week-3-git/ce103-week-3-git/#why-do-we-need-source-code-management-systems-7","text":"Track Changes \u2013 We can track the changes as when anyone is making any change, he can leave a commit message as for why the change was done. section{ font-size: 25px; }","title":"Why Do We Need Source Code Management Systems? (7)"},{"location":"week-3-git/ce103-week-3-git/#why-do-we-need-source-code-management-systems-8","text":"Ownership \u2013 With every commit made to the master branch, it will ask the owner permission to merge it. section{ font-size: 25px; }","title":"Why Do We Need Source Code Management Systems? (8)"},{"location":"week-3-git/ce103-week-3-git/#why-do-we-need-source-code-management-systems-9","text":"Branching and Merging \u2013 You can create a branch of your source code and create the changes. Once the changes are approved, you can merge it with the master branch. section{ font-size: 25px; }","title":"Why Do We Need Source Code Management Systems? (9)"},{"location":"week-3-git/ce103-week-3-git/#why-do-we-need-source-code-management-systems-10","text":"","title":"Why Do We Need Source Code Management Systems? (10)"},{"location":"week-3-git/ce103-week-3-git/#types-of-version-control-systems","text":"Centralized Version Control (TFS, Subversion) Distributed Version Control (Git and Mercurial) section{ font-size: 25px; }","title":"Types of Version Control Systems"},{"location":"week-3-git/ce103-week-3-git/#centralized-version-control-tfs-subversion-1","text":"The main concept of Centralized Version Control is that it works in a client and server relationship. The repository is located in one place and allows access to multiple clients. section{ font-size: 25px; }","title":"Centralized Version Control (TFS, Subversion) (1)"},{"location":"week-3-git/ce103-week-3-git/#centralized-version-control-tfs-subversion-2","text":"section{ font-size: 25px; }","title":"Centralized Version Control (TFS, Subversion) (2)"},{"location":"week-3-git/ce103-week-3-git/#centralized-version-control-tfs-subversion-3","text":"section{ font-size: 25px; }","title":"Centralized Version Control (TFS, Subversion) (3)"},{"location":"week-3-git/ce103-week-3-git/#centralized-version-control-tfs-subversion-4","text":"It\u2019s very similar to FTP where you have FTP clients which connect to FTP server. Here all the user changes and commits have to pass through the central server. For Ex: Subversion. section{ font-size: 25px; }","title":"Centralized Version Control (TFS, Subversion) (4)"},{"location":"week-3-git/ce103-week-3-git/#centralized-version-control-tfs-subversion-5","text":"The benefits of centralized version control are: It\u2019s easy to understand. There are more GUI and IDE clients. You have more control over the users and access. section{ font-size: 25px; }","title":"Centralized Version Control (TFS, Subversion) (5)"},{"location":"week-3-git/ce103-week-3-git/#centralized-version-control-tfs-subversion-6","text":"We do have drawbacks also: It is dependent on the access to the server. It can be slower because every command from the client has to pass the server. Branching and merging strategies are difficult to use. section{ font-size: 25px; }","title":"Centralized Version Control (TFS, Subversion) (6)"},{"location":"week-3-git/ce103-week-3-git/#distributed-version-control-git-and-mercurial-1","text":"These systems are newer to use. In Distributed Version Control, each user has their own copy of the entire repository as well as the files and history. For Ex: Git and Mercurial section{ font-size: 25px; }","title":"Distributed Version Control (Git and Mercurial) (1)"},{"location":"week-3-git/ce103-week-3-git/#distributed-version-control-git-and-mercurial-2","text":"section{ font-size: 25px; }","title":"Distributed Version Control (Git and Mercurial) (2)"},{"location":"week-3-git/ce103-week-3-git/#distributed-version-control-git-and-mercurial-3","text":"section{ font-size: 25px; }","title":"Distributed Version Control (Git and Mercurial) (3)"},{"location":"week-3-git/ce103-week-3-git/#distributed-version-control-git-and-mercurial-4","text":"The benefits of distributed version control are: More powerful and easy change tracking. No need of a centralized server. Most of the functionalities work in offline mode also apart from sharing the repositories. Branching and Merging strategies are more easy and reliable. It\u2019s faster than the other one. section{ font-size: 25px; }","title":"Distributed Version Control (Git and Mercurial) (4)"},{"location":"week-3-git/ce103-week-3-git/#list-of-source-code-version-management-tools-1","text":"section{ font-size: 25px; }","title":"List of Source Code Version Management Tools (1)"},{"location":"week-3-git/ce103-week-3-git/#list-of-source-code-version-management-tools-2","text":"Github GitLab BitBucket SourceForge Beanstalk section{ font-size: 25px; }","title":"List of Source Code Version Management Tools (2)"},{"location":"week-3-git/ce103-week-3-git/#list-of-source-code-version-management-tools-3","text":"Apache Allura AWS CodeCommit Launchpad Phabricator GitBucket section{ font-size: 25px; }","title":"List of Source Code Version Management Tools (3)"},{"location":"week-3-git/ce103-week-3-git/#git-distributed-source-code-management-1","text":"section{ font-size: 25px; }","title":"GIT (Distributed Source Code Management) (1)"},{"location":"week-3-git/ce103-week-3-git/#git-distributed-source-code-management-2","text":"section{ font-size: 25px; }","title":"GIT (Distributed Source Code Management) (2)"},{"location":"week-3-git/ce103-week-3-git/#git-distributed-source-code-management-3","text":"section{ font-size: 25px; }","title":"GIT (Distributed Source Code Management) (3)"},{"location":"week-3-git/ce103-week-3-git/#git-distributed-source-code-management-4","text":"section{ font-size: 25px; }","title":"GIT (Distributed Source Code Management) (4)"},{"location":"week-3-git/ce103-week-3-git/#git-distributed-source-code-management-5","text":"","title":"GIT (Distributed Source Code Management) (5)"},{"location":"week-3-git/ce103-week-3-git/#a-basic-overview-of-how-git-works-1","text":"Create a \"repository\" (project) with a git hosting tool (like Bitbucket) Copy (or clone) the repository to your local machine Add a file to your local repo and \u201ccommit\u201d (save) the changes \u201cPush\u201d your changes to your master branch section{ font-size: 25px; }","title":"A Basic Overview of How Git Works (1)"},{"location":"week-3-git/ce103-week-3-git/#git-distributed-source-code-management-6","text":"","title":"GIT (Distributed Source Code Management) (6)"},{"location":"week-3-git/ce103-week-3-git/#a-basic-overview-of-how-git-works-2","text":"Make a change to your file with a git hosting tool and commit \u201cPull\u201d the changes to your local machine Create a \u201cbranch\u201d (version), make a change, commit the change Open a \u201cpull request\u201d. \u201cMerge\u201d your branch to the master branch section{ font-size: 25px; }","title":"A Basic Overview of How Git Works (2)"},{"location":"week-3-git/ce103-week-3-git/#git-distributed-source-code-management-7","text":"","title":"GIT (Distributed Source Code Management) (7)"},{"location":"week-3-git/ce103-week-3-git/#some-of-the-basic-operations-in-git-are","text":"Initialize Add Commit Pull Push section{ font-size: 25px; }","title":"Some of The Basic Operations in GIT are"},{"location":"week-3-git/ce103-week-3-git/#git-distributed-source-code-management-8","text":"","title":"GIT (Distributed Source Code Management) (8)"},{"location":"week-3-git/ce103-week-3-git/#some-of-the-basic-operations-in-git-are_1","text":"section{ font-size: 25px; }","title":"Some of The Basic Operations in GIT are"},{"location":"week-3-git/ce103-week-3-git/#git-distributed-source-code-management-9","text":"","title":"GIT (Distributed Source Code Management) (9)"},{"location":"week-3-git/ce103-week-3-git/#some-of-the-basic-operations-in-git-are_2","text":"Branching Merging Rebasing section{ font-size: 25px; }","title":"Some of The Basic Operations in GIT are"},{"location":"week-3-git/ce103-week-3-git/#git-distributed-source-code-management-10","text":"","title":"GIT (Distributed Source Code Management) (10)"},{"location":"week-3-git/ce103-week-3-git/#some-of-the-basic-operations-in-git-are_3","text":"section{ font-size: 25px; }","title":"Some of The Basic Operations in GIT are"},{"location":"week-3-git/ce103-week-3-git/#git-distributed-source-code-management-8_1","text":"","title":"GIT (Distributed Source Code Management) (8)"},{"location":"week-3-git/ce103-week-3-git/#a-brief-idea-about-how-these-operations-work-with-the-git-repositories-1","text":"section{ font-size: 25px; }","title":"A brief idea about how these operations work with the Git repositories (1)"},{"location":"week-3-git/ce103-week-3-git/#git-distributed-source-code-management-9_1","text":"","title":"GIT (Distributed Source Code Management) (9)"},{"location":"week-3-git/ce103-week-3-git/#a-brief-idea-about-how-these-operations-work-with-the-git-repositories-2","text":"section{ font-size: 25px; }","title":"A brief idea about how these operations work with the Git repositories (2)"},{"location":"week-3-git/ce103-week-3-git/#git-distributed-source-code-management-10_1","text":"","title":"GIT (Distributed Source Code Management) (10)"},{"location":"week-3-git/ce103-week-3-git/#a-brief-idea-about-how-these-operations-work-with-the-git-repositories-3","text":"For more detailed cheetsheat please check the following interactive map NDP Software :: Git Cheatsheet section{ font-size: 25px; }","title":"A brief idea about how these operations work with the Git repositories (3)"},{"location":"week-3-git/ce103-week-3-git/#installation-of-git-1","text":"Check Installation Already Completed git --version section{ font-size: 25px; }","title":"Installation of GIT (1)"},{"location":"week-3-git/ce103-week-3-git/#installation-of-git-2","text":"If your console gives error about git command follow the steps in the link Install Git | Atlassian Git Tutorial In this link you will should download following setup according to your operating system section{ font-size: 25px; }","title":"Installation of GIT (2)"},{"location":"week-3-git/ce103-week-3-git/#installation-of-git-3","text":"","title":"Installation of GIT (3)"},{"location":"week-3-git/ce103-week-3-git/#git-setup-files","text":"Download git for OSX Download git for Windows Download git for Linux section{ font-size: 25px; }","title":"GIT Setup Files"},{"location":"week-3-git/ce103-week-3-git/#installation-of-git-4","text":"Download and install GIT from the following links (both have same github release path) Git - Downloads section{ font-size: 25px; }","title":"Installation of GIT (4)"},{"location":"week-3-git/ce103-week-3-git/#installation-of-git-5","text":"After running setup follow the steps below section{ font-size: 25px; }","title":"Installation of GIT (5)"},{"location":"week-3-git/ce103-week-3-git/#installation-of-git-6","text":"Select the following configurations section{ font-size: 25px; }","title":"Installation of GIT (6)"},{"location":"week-3-git/ce103-week-3-git/#installation-of-git-7","text":"You can select to use git from Git Bash Only, Also you can use it from command-line by selecting second option. Third option override some Windows executable so your operating system can be affected from this selection. section{ font-size: 25px; }","title":"Installation of GIT (7)"},{"location":"week-3-git/ce103-week-3-git/#installation-of-git-8","text":"Git Credential Manager will be use to configure your remote connection. section{ font-size: 25px; }","title":"Installation of GIT (8)"},{"location":"week-3-git/ce103-week-3-git/#installation-of-git-9","text":"section{ font-size: 25px; }","title":"Installation of GIT (9)"},{"location":"week-3-git/ce103-week-3-git/#installation-of-git-10","text":"MSYS2 MinTTY provide better visual and colorful console outputs section{ font-size: 25px; }","title":"Installation of GIT (10)"},{"location":"week-3-git/ce103-week-3-git/#installation-of-git-extension-windows-1","text":"Git user interface can be installed by the following applications You can install Git GUI from https://git-scm.com/downloads/guis I prefer to use git extension https://gitextensions.github.io/ and https://tortoisegit.org/ together Also Download KDiff3 KDiff3 - Browse Files at SourceForge.net These extensions provide GUI for git operations to make process easier.","title":"Installation of GIT Extension (Windows) (1)"},{"location":"week-3-git/ce103-week-3-git/#enter-git-extension-configurations","text":"section{ font-size: 25px; } Right click to any where on right click menu you will see git extension settings as follow section{ font-size: 25px; }","title":"Enter GIT Extension Configurations"},{"location":"week-3-git/ce103-week-3-git/#configuration-of-git-extension-windows-1","text":"Git extension provides you missing setups or wrong configurations. If everyting is green that mean everything should work perfectly. section{ font-size: 25px; }","title":"Configuration of GIT Extension (Windows) (1)"},{"location":"week-3-git/ce103-week-3-git/#configuration-of-git-extension-windows-2","text":"If you install git everything should be green and this configuration is stored on .gitconfig on your home C:/Windows/Users/<user>/.gitconfig section{ font-size: 25px; }","title":"Configuration of GIT Extension (Windows) (2)"},{"location":"week-3-git/ce103-week-3-git/#configuration-of-git-extension-windows-3","text":"You can use the following template and fix your settings. Git GUI edit this settings. But you can also edit them manually. section{ font-size: 25px; }","title":"Configuration of GIT Extension (Windows) (3)"},{"location":"week-3-git/ce103-week-3-git/#configuration-of-git-extension-windows-3_1","text":"C:/Windows/Users/ /.gitconfig [ core ] editor = \\\" C:/Program Files ( x86 ) /GitExtensions/GitExtensions.exe \\\" fileeditor autocrlf = true quotePath = false commitGraph = true longpaths = true [ user ] email = xxxxxxx@gmail.com name = xxxx xxxxxx [ filter \"lfs\" ] clean = git-lfs clean -- %f smudge = git-lfs smudge -- %f process = git-lfs filter-process required = true [ pull ] rebase = false [ fetch ] prune = false [ rebase ] autoStash = false [ credential ] helper = manager [ diff ] guitool = kdiff3 [ difftool \"kdiff3\" ] path = C:/Program Files/KDiff3/kdiff3.exe cmd = \\\" C:/Program Files/KDiff3/kdiff3.exe \\\" \\\" $LOCAL \\\" \\\" $REMOTE \\\" [ merge ] guitool = tortoisemerge [ mergetool \"tortoisemerge\" ] path = C:/Program Files/TortoiseGit/bin/TortoiseGitMerge.exe cmd = \\\" C:/Program Files/TortoiseGit/bin/TortoiseGitMerge.exe \\\" -base: \\\" $BASE \\\" -mine: \\\" $LOCAL \\\" -theirs: \\\" $REMOTE \\\" -merged: \\\" $MERGED \\\" [ receive ] advertisePushOptions = true [ gc ] writeCommitGraph = true section{ font-size: 25px; }","title":"Configuration of GIT Extension (Windows) (3)"},{"location":"week-3-git/ce103-week-3-git/#configuration-of-git-extension-windows-4","text":"Also in extension you can see similar settings section{ font-size: 25px; }","title":"Configuration of GIT Extension (Windows) (4)"},{"location":"week-3-git/ce103-week-3-git/#configuration-of-git-extension-windows-5","text":"Samples MergeTool tortoisemerge Path to mergetool C:/Program Files/TortoiseGit/bin/TortoiseGitMerge.exe Mergetool command \"C:/Program Files/TortoiseGit/bin/TortoiseGitMerge.exe\" -base:\"$BASE\" -mine:\"$LOCAL\" -theirs:\"$REMOTE\" -merged:\"$MERGED\" section{ font-size: 25px; }","title":"Configuration of GIT Extension (Windows) (5)"},{"location":"week-3-git/ce103-week-3-git/#configuration-of-git-extension-windows-6","text":"Difftool kdiff3 Path to difftool C:/Program Files/KDiff3/kdiff3.exe Difftool command \"C:/Program Files/KDiff3/kdiff3.exe\" \"$LOCAL\" \"$REMOTE\" section{ font-size: 25px; }","title":"Configuration of GIT Extension (Windows) (6)"},{"location":"week-3-git/ce103-week-3-git/#configuration-of-git-extension-windows-7","text":"If you see something as merge and diff tool is not configured, follow the similar settings above on your computer. If you installed kdiff3, tortoisegit and extension you will have same diff and merge tools This topic also help you Git: How can I configure KDiff3 as a merge tool and diff tool? - Stack Overflow section{ font-size: 25px; }","title":"Configuration of GIT Extension (Windows) (7)"},{"location":"week-3-git/ce103-week-3-git/#configuration-of-git-extension-windows-8","text":"Merge, Diff and Shell Tool Configuration Missing. section{ font-size: 25px; }","title":"Configuration of GIT Extension (Windows) (8)"},{"location":"week-3-git/ce103-week-3-git/#configuration-of-git-extension-windows-9","text":"Open Git->Config, in your settings you will see path to mergetool and difftool will be empty fill settings like that below find executables in your computer and copy paths to here. section{ font-size: 25px; }","title":"Configuration of GIT Extension (Windows) (9)"},{"location":"week-3-git/ce103-week-3-git/#configuration-of-git-extension-windows-10","text":"section{ font-size: 25px; }","title":"Configuration of GIT Extension (Windows) (10)"},{"location":"week-3-git/ce103-week-3-git/#configuration-of-git-extension-windows-11","text":"Also if we want to change and use different diff and merge tool then we can do this with gitbash console as below C: \\P rogram Files \\T ortoiseGit \\b in Find TortoiseGitIDiff.exe and TortoiseGitMerge.exe section{ font-size: 25px; }","title":"Configuration of GIT Extension (Windows) (11)"},{"location":"week-3-git/ce103-week-3-git/#configuration-of-git-extension-windows-12","text":"Copy path of this applications C: \\P rogram Files \\T ortoiseGit \\b in \\T ortoiseGitMerge.exe C: \\P rogram Files \\T ortoiseGit \\b in \\T ortoiseGitIDiff.exe section{ font-size: 25px; }","title":"Configuration of GIT Extension (Windows) (12)"},{"location":"week-3-git/ce103-week-3-git/#configuration-of-git-extension-windows-13","text":"Open a gitbash console and run following commands git config --global merge.tool TortoiseGitMerge git config --global mergetool.TortoiseGitMerge.path \"C:/Program Files/TortoiseGit/bin/TortoiseGitMerge.exe\" git config --global mergetool.TortoiseGitMerge.trustExitCode false git config --global diff.guitool TortoiseGitIDiff git config --global difftool.TortoiseGitIDiff.path \"C:/Program Files/TortoiseGit/bin/TortoiseGitIDiff.exe\" git config --global difftool.TortoiseGitIDiff.trustExitCode false This updates will be stored on .gitconfig section{ font-size: 25px; }","title":"Configuration of GIT Extension (Windows) (13)"},{"location":"week-3-git/ce103-week-3-git/#using-the-git-extension-1","text":"right click in the git folder and use Git Extension menu for operations. for sample commit click \"Commit\" section{ font-size: 25px; }","title":"Using the GIT Extension (1)"},{"location":"week-3-git/ce103-week-3-git/#using-the-git-extension-1_1","text":"from opening window first stage related files and then write a good commit message finally click commit to local. You can also commit&push it to remote repository. section{ font-size: 25px; }","title":"Using the GIT Extension (1)"},{"location":"week-3-git/ce103-week-3-git/#git-installation-completed","text":"section{ font-size: 25px; }","title":"GIT Installation Completed.."},{"location":"week-3-git/ce103-week-3-git/#installation-of-gig-git-ignore-creator-1","text":"Requirements Python >= 3.6 Internet connection https://github.com/sloria/gig pip install -U gig section{ font-size: 25px; }","title":"Installation of gig (git ignore creator) (1)"},{"location":"week-3-git/ce103-week-3-git/#installation-of-gig-git-ignore-creator-2","text":"section{ font-size: 25px; }","title":"Installation of gig (git ignore creator) (2)"},{"location":"week-3-git/ce103-week-3-git/#installation-of-gig-git-ignore-creator-3","text":"gig --version section{ font-size: 25px; }","title":"Installation of gig (git ignore creator) (3)"},{"location":"week-3-git/ce103-week-3-git/#usage-of-gig-1","text":"List all gitignore templates gig list gig list -global section{ font-size: 25px; }","title":"Usage of gig (1)"},{"location":"week-3-git/ce103-week-3-git/#usage-of-gig-2","text":"Sample gitignore for C Java and Visual Studio gig C Java VisualStudio > .gitignore section{ font-size: 25px; }","title":"Usage of gig (2)"},{"location":"week-3-git/ce103-week-3-git/#usage-of-gig-3","text":"There is a portal for this also by Toptal \u2022 gitignore.io - Create Useful .gitignore Files For Your Project section{ font-size: 25px; }","title":"Usage of gig (3)"},{"location":"week-3-git/ce103-week-3-git/#usage-of-gig-4","text":"for samples you can check the following links. https://github.com/github/gitignore https://dev.to/shihanng/gig-a-gitignore-generator-opc section{ font-size: 25px; }","title":"Usage of gig (4)"},{"location":"week-3-git/ce103-week-3-git/#configuration-of-git-1","text":"It is important to configure your Git because any commits that you make are associated with your configuration details. configuring Git with your username and email. In order to do that, type the following commands in your Git Bash: git config - - global user.name \"<your name>\" git config - - global user.email \"<your email>\" section{ font-size: 25px; }","title":"Configuration of GIT (1)"},{"location":"week-3-git/ce103-week-3-git/#configuration-of-git-2","text":"section{ font-size: 25px; }","title":"Configuration of GIT (2)"},{"location":"week-3-git/ce103-week-3-git/#configuration-of-git-3","text":"git configuration files are located on the user folder section{ font-size: 25px; }","title":"Configuration of GIT (3)"},{"location":"week-3-git/ce103-week-3-git/#configuration-of-git-4","text":"If you want to view all your configuration details, use the command below git config --list section{ font-size: 25px; }","title":"Configuration of GIT (4)"},{"location":"week-3-git/ce103-week-3-git/#using-gitignore-files-with-git-extension-1","text":"with gitignore file section{ font-size: 25px; }","title":"Using .gitignore files with git-extension (1)"},{"location":"week-3-git/ce103-week-3-git/#using-gitignore-files-with-git-extension-2","text":"without gitignore file (just move to another location) section{ font-size: 25px; }","title":"Using .gitignore files with git-extension (2)"},{"location":"week-3-git/ce103-week-3-git/#github-create-repo","text":"section{ font-size: 25px; }","title":"Github Create Repo"},{"location":"week-3-git/ce103-week-3-git/#initilization-of-repo-not-existing-in-github","text":"","title":"Initilization of Repo (not existing in github)"},{"location":"week-3-git/ce103-week-3-git/#git-init","text":"In order to do that, we use the command git init . git init creates an empty Git repository or re-initializes an existing one. It basically creates a .git directory with sub directories and template files. Running a git init in an existing repository will not overwrite things that are already there. It rather picks up the newly added templates. git init section{ font-size: 25px; }","title":"git init"},{"location":"week-3-git/ce103-week-3-git/#git-init_1","text":"section{ font-size: 25px; }","title":"git init"},{"location":"week-3-git/ce103-week-3-git/#adding-initiated-repo-remote-upstream-repo-link-with-github-repo-1","text":"If you enter following command in the git folder you will see nothing git remote -v That mean this repository do not have a remote upstream repository such as a github or bitbucket repo. section{ font-size: 25px; }","title":"Adding Initiated Repo Remote Upstream Repo (Link with Github Repo) (1)"},{"location":"week-3-git/ce103-week-3-git/#adding-initiated-repo-remote-upstream-repo-link-with-github-repo-2","text":"Open the github and bitbucket repository and copy project path from section{ font-size: 25px; }","title":"Adding Initiated Repo Remote Upstream Repo (Link with Github Repo) (2)"},{"location":"week-3-git/ce103-week-3-git/#adding-initiated-repo-remote-upstream-repo-link-with-github-repo-3","text":"you will see the following sample from github code button https://github.com/ucoruh/ce103-sample-text.git section{ font-size: 25px; }","title":"Adding Initiated Repo Remote Upstream Repo (Link with Github Repo) (3)"},{"location":"week-3-git/ce103-week-3-git/#adding-initiated-repo-remote-upstream-repo-link-with-github-repo-4","text":"Copy link and use with following command git remote add origin https://github.com/ucoruh/ce103-sample-text.git Then verify that you correctly updated remote repository setting with the following command git remote -v - You should see similar outputs origin https://github.com/ucoruh/ce103-sample-text.git ( fetch ) origin https://github.com/ucoruh/ce103-sample-text.git ( push ) You can check the following sample How to Add a New Remote to your Git Repo | Assembla Help Center section{ font-size: 25px; }","title":"Adding Initiated Repo Remote Upstream Repo (Link with Github Repo) (4)"},{"location":"week-3-git/ce103-week-3-git/#now-you-can-push-your-local-changes-to-remote-repository","text":"","title":"Now you can push your local changes to remote repository"},{"location":"week-3-git/ce103-week-3-git/#if-you-see-a-repository-on-github-then-you-can-download-with-following-operation","text":"section{ font-size: 25px; }","title":"If you see a repository on Github then you can download with following operation"},{"location":"week-3-git/ce103-week-3-git/#checkout-a-repository-1","text":"create a working copy of a local repository by running the command git clone /path/to/repository section{ font-size: 25px; }","title":"Checkout a Repository (1)"},{"location":"week-3-git/ce103-week-3-git/#checkout-a-repository-2","text":"Sample clone command git clone https://github.com/ucoruh/ce103-sample-text.git section{ font-size: 25px; }","title":"Checkout a Repository (2)"},{"location":"week-3-git/ce103-week-3-git/#checkout-a-repository-3","text":"when using a remote server, your command will be git clone username@host:/path/to/repository","title":"Checkout a Repository (3)"},{"location":"week-3-git/ce103-week-3-git/#checking-repository-status-1","text":"","title":"Checking Repository Status (1)"},{"location":"week-3-git/ce103-week-3-git/#git-status","text":"The git status command lists all the modified files which are ready to be added to the local repository. git status section{ font-size: 25px; }","title":"git status"},{"location":"week-3-git/ce103-week-3-git/#checking-repository-status-2","text":"","title":"Checking Repository Status (2)"},{"location":"week-3-git/ce103-week-3-git/#git-status_1","text":"section{ font-size: 25px; }","title":"git status"},{"location":"week-3-git/ce103-week-3-git/#adding-files-to-index-1","text":"","title":"Adding Files to Index (1)"},{"location":"week-3-git/ce103-week-3-git/#git-add","text":"This command updates the index using the current content found in the working tree and then prepares the content in the staging area for the next commit. git add <directory> git add <file> git add * section{ font-size: 25px; }","title":"git add"},{"location":"week-3-git/ce103-week-3-git/#adding-files-to-index-1_1","text":"","title":"Adding Files to Index (1)"},{"location":"week-3-git/ce103-week-3-git/#git-add_1","text":"Created two more files edureka3.txt and edureka4.txt. Let us add the files using the command git add -A. This command will add all the files to the index which are in the directory but not updated in the index yet. section{ font-size: 25px; }","title":"git add"},{"location":"week-3-git/ce103-week-3-git/#commit-changes-1","text":"","title":"Commit Changes (1)"},{"location":"week-3-git/ce103-week-3-git/#git-commit","text":"It refers to recording snapshots of the repository at a given time. Committed snapshots will never change unless done explicitly. section{ font-size: 25px; }","title":"git commit"},{"location":"week-3-git/ce103-week-3-git/#commit-changes-2","text":"","title":"Commit Changes (2)"},{"location":"week-3-git/ce103-week-3-git/#git-commit_1","text":"Let me explain how commit works with the diagram below Here, C1 is the initial commit, i.e. the snapshot of the first change from which another snapshot is created with changes named C2. Note that the master points to the latest commit. Now, when I commit again, another snapshot C3 is created and now the master points to C3 instead of C2. section{ font-size: 25px; }","title":"git commit"},{"location":"week-3-git/ce103-week-3-git/#commit-changes-3","text":"","title":"Commit Changes (3)"},{"location":"week-3-git/ce103-week-3-git/#git-commit_2","text":"Commands: git commit -m \"<message>\" Now, if you want to commit a snapshot of all the changes in the working directory at once, you can use the command below section{ font-size: 25px; }","title":"git commit"},{"location":"week-3-git/ce103-week-3-git/#commit-changes-4","text":"","title":"Commit Changes (4)"},{"location":"week-3-git/ce103-week-3-git/#git-commit_3","text":"Please check writing good commit messages article below How to write a good commit message - DEV Community section{ font-size: 25px; }","title":"git commit"},{"location":"week-3-git/ce103-week-3-git/#writing-good-commit-messages-1","text":"type: subject body (optional) footer (optional) section{ font-size: 25px; }","title":"Writing Good Commit Messages (1)"},{"location":"week-3-git/ce103-week-3-git/#writing-good-commit-messages-2","text":"","title":"Writing Good Commit Messages (2)"},{"location":"week-3-git/ce103-week-3-git/#1-type","text":"feat - a new feature fix - a bug fix docs - changes in documentation style - everything related to styling refactor - code changes that neither fixes a bug or adds a feature test - everything related to testing chore - updating build tasks, package manager configs, etc section{ font-size: 25px; }","title":"1. Type"},{"location":"week-3-git/ce103-week-3-git/#writing-good-commit-messages-3","text":"","title":"Writing Good Commit Messages (3)"},{"location":"week-3-git/ce103-week-3-git/#2-subject","text":"This contains a short description of the changes made. It shouldn't be greater than 50 characters, should begin with a capital letter and written in the imperative eg. Add instead of Added or Adds. section{ font-size: 25px; }","title":"2. Subject"},{"location":"week-3-git/ce103-week-3-git/#writing-good-commit-messages-4","text":"","title":"Writing Good Commit Messages (4)"},{"location":"week-3-git/ce103-week-3-git/#3-body","text":"The body is used to explain what changes you made and why you made them. Not all commits are complex enough that they need a body, especially if you are working on a personal project alone, and as such writing a body is optional. A blank line between the body and the subject is required and each line should have no more than 72 characters. section{ font-size: 25px; }","title":"3. Body"},{"location":"week-3-git/ce103-week-3-git/#writing-good-commit-messages-5","text":"","title":"Writing Good Commit Messages (5)"},{"location":"week-3-git/ce103-week-3-git/#4footer","text":"The footer is also optional and mainly used when you are using an issue tracker to reference the issue ID. section{ font-size: 20px; }","title":"4.Footer"},{"location":"week-3-git/ce103-week-3-git/#writing-good-commit-messages-6","text":"","title":"Writing Good Commit Messages (6)"},{"location":"week-3-git/ce103-week-3-git/#example-commit-message","text":"feat: Summarize changes in around 50 characters or less More detailed explanatory text, if necessary. Wrap it to about 72 characters or so. In some contexts, the first line is treated as the subject of the commit and the rest of the text as the body. The blank line separating the summary from the body is critical (unless you omit the body entirely); various tools like `log`, `shortlog` and `rebase` can get confused if you run the two together. Explain the problem that this commit is solving. Focus on why you are making this change as opposed to how (the code explains that). Are there side effects or other unintuitive consequences of this change? Here's the place to explain them. Further paragraphs come after blank lines. - Bullet points are okay, too - Typically a hyphen or asterisk is used for the bullet, preceded by a single space, with blank lines in between, but conventions vary here If you use an issue tracker, put references to them at the bottom, like this: Resolves: #123 See also: #456, #789 section{ font-size: 25px; }","title":"Example Commit Message"},{"location":"week-3-git/ce103-week-3-git/#writing-good-commit-messages-7","text":"You can edit last commit with the following command git commit -a -m \"New commit message\" git commit --amend -m \"New commit message\" section{ font-size: 25px; }","title":"Writing Good Commit Messages (7)"},{"location":"week-3-git/ce103-week-3-git/#writing-good-commit-messages-7_1","text":"Edit last commit output section{ font-size: 25px; } section{ font-size: 25px; }","title":"Writing Good Commit Messages (7)"},{"location":"week-3-git/ce103-week-3-git/#add-files-to-index-1","text":"I have created two more text files in my working directory viz. edureka5.txt and edureka6.txt but they are not added to the index yet. I am adding edureka5.txt using the command git add edureka5.txt section{ font-size: 25px; }","title":"Add Files to Index (1)"},{"location":"week-3-git/ce103-week-3-git/#add-files-to-index-2","text":"section{ font-size: 25px; }","title":"Add Files to Index (2)"},{"location":"week-3-git/ce103-week-3-git/#add-files-to-index-3","text":"I have added edureka5.txt to the index explicitly but not edureka6.txt and made changes in the previous files. I want to commit all changes in the directory at once. section{ font-size: 25px; }","title":"Add Files to Index (3)"},{"location":"week-3-git/ce103-week-3-git/#add-files-to-index-4","text":"This command will commit a snapshot of all changes in the working directory but only includes modifications to tracked files i.e. the files that have been added with git add at some point in their history. Hence, edureka6.txt was not committed because it was not added to the index yet. But changes in all previous files present in the repository were committed, i.e. edureka1.txt, edureka2.txt, edureka3.txt, edureka4.txt and edureka5.txt. Now I have made my desired commits in my local repository section{ font-size: 25px; }","title":"Add Files to Index (4)"},{"location":"week-3-git/ce103-week-3-git/#add-files-to-index-5","text":"your local repository consists of three \"trees\" maintained by git. the first one is your Working Directory which holds the actual files. the second one is the Index which acts as a staging area and finally the HEAD which points to the last commit you've made section{ font-size: 25px; }","title":"Add Files to Index (5)"},{"location":"week-3-git/ce103-week-3-git/#add-files-to-index-6","text":"section{ font-size: 25px; }","title":"Add Files to Index (6)"},{"location":"week-3-git/ce103-week-3-git/#update-local-repo-before-sending-1","text":"","title":"Update local repo before sending (1)"},{"location":"week-3-git/ce103-week-3-git/#fetching","text":"If we have a remote Git branch, for example a branch on Github, it can happen that the remote branch has commits that the current branch doesn't have! Maybe another branch got merged, your colleague pushed a quick fix, and so on. section{ font-size: 25px; }","title":"Fetching"},{"location":"week-3-git/ce103-week-3-git/#update-local-repo-before-sending-2","text":"","title":"Update local repo before sending (2)"},{"location":"week-3-git/ce103-week-3-git/#fetching_1","text":"We can get these changes locally, by performing a git fetch on the remote branch! It doesn't affect your local branch in any way: a fetch simply downloads new data. section{ font-size: 25px; }","title":"Fetching"},{"location":"week-3-git/ce103-week-3-git/#update-local-repo-before-sending-3","text":"","title":"Update local repo before sending (3)"},{"location":"week-3-git/ce103-week-3-git/#fetching_2","text":"section{ font-size: 25px; }","title":"Fetching"},{"location":"week-3-git/ce103-week-3-git/#update-local-repo-before-sending-4","text":"","title":"Update local repo before sending (4)"},{"location":"week-3-git/ce103-week-3-git/#fetching_3","text":"We can now see all the changes that have been made since we last pushed! We can decide what we want to do with the new data now that we have it locally. section{ font-size: 25px; }","title":"Fetching"},{"location":"week-3-git/ce103-week-3-git/#update-local-repo-before-sending-5","text":"","title":"Update local repo before sending (5)"},{"location":"week-3-git/ce103-week-3-git/#pulling","text":"Although a git fetch is very useful in order to get the remote information of a branch, we can also perform a git pull . A git pull is actually two commands in one: a git fetch , and a git merge . When we're pulling changes from the origin, we're first fetching all the data like we did with a git fetch , after which the latest changes are automatically merged into the local branch section{ font-size: 25px; }","title":"Pulling"},{"location":"week-3-git/ce103-week-3-git/#update-local-repo-before-sending-6","text":"","title":"Update local repo before sending (6)"},{"location":"week-3-git/ce103-week-3-git/#pulling_1","text":"section{ font-size: 25px; }","title":"Pulling"},{"location":"week-3-git/ce103-week-3-git/#update-local-repo-before-sending-7","text":"","title":"Update local repo before sending (7)"},{"location":"week-3-git/ce103-week-3-git/#pulling_2","text":"Awesome, we're now perfectly in sync with the remote branch and have all the latest changes! section{ font-size: 25px; }","title":"Pulling"},{"location":"week-3-git/ce103-week-3-git/#update-local-repo-before-sending-8","text":"","title":"Update local repo before sending (8)"},{"location":"week-3-git/ce103-week-3-git/#pulling_3","text":"","title":"Pulling"},{"location":"week-3-git/ce103-week-3-git/#git-pull","text":"Note that before you affect changes to the central repository you should always pull changes from the central repository to your local repository to get updated with the work of all the collaborators that have been contributing in the central repository. For that we will use the pull command. section{ font-size: 25px; }","title":"git pull"},{"location":"week-3-git/ce103-week-3-git/#update-local-repo-before-sending-9","text":"","title":"Update local repo before sending (9)"},{"location":"week-3-git/ce103-week-3-git/#pulling_4","text":"","title":"Pulling"},{"location":"week-3-git/ce103-week-3-git/#git-pull_1","text":"But first, you need to set your central repository as origin using the command git remote add origin <link of your central repository> section{ font-size: 25px; }","title":"git pull"},{"location":"week-3-git/ce103-week-3-git/#update-local-repo-before-sending-10","text":"","title":"Update local repo before sending (10)"},{"location":"week-3-git/ce103-week-3-git/#pulling-git-pull","text":"Now that my origin is set section{ font-size: 25px; }","title":"Pulling / git pull"},{"location":"week-3-git/ce103-week-3-git/#update-local-repo-before-sending-11","text":"","title":"Update local repo before sending (11)"},{"location":"week-3-git/ce103-week-3-git/#pulling-git-pull_1","text":"let us extract files from the origin using pull. For that use the command git pull origin master section{ font-size: 25px; }","title":"Pulling / git pull"},{"location":"week-3-git/ce103-week-3-git/#update-local-repo-before-sending-12","text":"","title":"Update local repo before sending (12)"},{"location":"week-3-git/ce103-week-3-git/#pulling-git-pull_2","text":"This command will copy all the files from the master branch of remote repository to your local repository. section{ font-size: 25px; }","title":"Pulling / git pull"},{"location":"week-3-git/ce103-week-3-git/#update-local-repo-before-sending-13","text":"","title":"Update local repo before sending (13)"},{"location":"week-3-git/ce103-week-3-git/#pulling-git-pull_3","text":"Since my local repository was already updated with files from master branch, hence the message is Already up-to-date. Refer to the screen shot above section{ font-size: 25px; }","title":"Pulling / git pull"},{"location":"week-3-git/ce103-week-3-git/#update-local-repo-before-sending-14","text":"","title":"Update local repo before sending (14)"},{"location":"week-3-git/ce103-week-3-git/#pulling-git-pull_4","text":"One can also try pulling files from a different branch using the following command: git pull origin <branch-name> section{ font-size: 25px; }","title":"Pulling / git pull"},{"location":"week-3-git/ce103-week-3-git/#update-local-repo-before-sending-15","text":"","title":"Update local repo before sending (15)"},{"location":"week-3-git/ce103-week-3-git/#pulling-git-pull_5","text":"Your local Git repository is now updated with all the recent changes. It is time you make changes in the central repository by using the push command. section{ font-size: 25px; }","title":"Pulling / git pull"},{"location":"week-3-git/ce103-week-3-git/#send-changes-to-remote-repo-1","text":"","title":"Send Changes to Remote Repo (1)"},{"location":"week-3-git/ce103-week-3-git/#git-push","text":"This command transfers commits from your local repository to your remote repository. It is the opposite of pull operation. section{ font-size: 25px; }","title":"git push"},{"location":"week-3-git/ce103-week-3-git/#send-changes-to-remote-repo-2","text":"","title":"Send Changes to Remote Repo (2)"},{"location":"week-3-git/ce103-week-3-git/#git-push_1","text":"Pulling imports commits to local repositories whereas pushing exports commits to the remote repositories section{ font-size: 25px; }","title":"git push"},{"location":"week-3-git/ce103-week-3-git/#send-changes-to-remote-repo-3","text":"","title":"Send Changes to Remote Repo (3)"},{"location":"week-3-git/ce103-week-3-git/#git-push_2","text":"The use of git push is to publish your local changes to a central repository. After you\u2019ve accumulated several local commits and are ready to share them with the rest of the team, section{ font-size: 25px; }","title":"git push"},{"location":"week-3-git/ce103-week-3-git/#send-changes-to-remote-repo-4","text":"","title":"Send Changes to Remote Repo (4)"},{"location":"week-3-git/ce103-week-3-git/#git-push_3","text":"you can then push them to the central repository by using the following command git push <remote> section{ font-size: 25px; }","title":"git push"},{"location":"week-3-git/ce103-week-3-git/#send-changes-to-remote-repo-5","text":"","title":"Send Changes to Remote Repo (5)"},{"location":"week-3-git/ce103-week-3-git/#git-push_4","text":"This remote refers to the remote repository which had been set before using the pull command. section{ font-size: 25px; }","title":"git push"},{"location":"week-3-git/ce103-week-3-git/#send-changes-to-remote-repo-6","text":"","title":"Send Changes to Remote Repo (6)"},{"location":"week-3-git/ce103-week-3-git/#git-push_5","text":"This pushes the changes from the local repository to the remote repository along with all the necessary commits and internal objects. This creates a local branch in the destination repository section{ font-size: 25px; }","title":"git push"},{"location":"week-3-git/ce103-week-3-git/#send-changes-to-remote-repo-7","text":"","title":"Send Changes to Remote Repo (7)"},{"location":"week-3-git/ce103-week-3-git/#git-push_6","text":"The below files are the files which we have already committed previously in the commit section and they are all \u201cpush-ready\u201c. section{ font-size: 25px; }","title":"git push"},{"location":"week-3-git/ce103-week-3-git/#send-changes-to-remote-repo-8","text":"","title":"Send Changes to Remote Repo (8)"},{"location":"week-3-git/ce103-week-3-git/#git-push_7","text":"I will use the command git push origin master to reflect these files in the master branch of my central repository. section{ font-size: 25px; }","title":"git push"},{"location":"week-3-git/ce103-week-3-git/#send-changes-to-remote-repo-9","text":"","title":"Send Changes to Remote Repo (9)"},{"location":"week-3-git/ce103-week-3-git/#git-push_8","text":"section{ font-size: 25px; }","title":"git push"},{"location":"week-3-git/ce103-week-3-git/#send-changes-to-remote-repo-10","text":"","title":"Send Changes to Remote Repo (10)"},{"location":"week-3-git/ce103-week-3-git/#git-push_9","text":"section{ font-size: 25px; }","title":"git push"},{"location":"week-3-git/ce103-week-3-git/#send-changes-to-remote-repo-11","text":"","title":"Send Changes to Remote Repo (11)"},{"location":"week-3-git/ce103-week-3-git/#git-push_10","text":"section{ font-size: 25px; }","title":"git push"},{"location":"week-3-git/ce103-week-3-git/#send-changes-to-remote-repo-12","text":"","title":"Send Changes to Remote Repo (12)"},{"location":"week-3-git/ce103-week-3-git/#git-push_11","text":"To prevent overwriting, Git does not allow push when it results in a non-fast forward merge in the destination repository. section{ font-size: 25px; }","title":"git push"},{"location":"week-3-git/ce103-week-3-git/#send-changes-to-remote-repo-13","text":"","title":"Send Changes to Remote Repo (13)"},{"location":"week-3-git/ce103-week-3-git/#git-push_12","text":"A non-fast forward merge means an upstream merge i.e. merging with ancestor or parent branches from a child branch To enable such merge, use the command below git push <remote> -force The above command forces the push operation even if it results in a non-fast forward merge section{ font-size: 25px; }","title":"git push"},{"location":"week-3-git/ce103-week-3-git/#branching-1","text":"","title":"Branching (1)"},{"location":"week-3-git/ce103-week-3-git/#git-branch","text":"Branches in Git are nothing but pointers to a specific commit. Git generally prefers to keep its branches as lightweight as possible. section{ font-size: 25px; }","title":"git branch"},{"location":"week-3-git/ce103-week-3-git/#branching-2","text":"","title":"Branching (2)"},{"location":"week-3-git/ce103-week-3-git/#git-branch_1","text":"There are basically two types of branches viz. local branches remote tracking branches. section{ font-size: 25px; }","title":"git branch"},{"location":"week-3-git/ce103-week-3-git/#branching-3","text":"","title":"Branching (3)"},{"location":"week-3-git/ce103-week-3-git/#git-branch_2","text":"A local branch is just another path of your working tree. On the other hand, remote tracking branches have special purposes. Some of them are: They link your work from the local repository to the work on central repository. section{ font-size: 25px; }","title":"git branch"},{"location":"week-3-git/ce103-week-3-git/#branching-4","text":"","title":"Branching (4)"},{"location":"week-3-git/ce103-week-3-git/#git-branch_3","text":"They automatically detect which remote branches to get changes from, when you use git pull. section{ font-size: 25px; }","title":"git branch"},{"location":"week-3-git/ce103-week-3-git/#branching-5","text":"","title":"Branching (5)"},{"location":"week-3-git/ce103-week-3-git/#learn-current-branch","text":"You can check what your current branch is by using the command git branch The one mantra that you should always be chanting while branching is \u201cbranch early, and branch often\u201d section{ font-size: 25px; }","title":"Learn current branch"},{"location":"week-3-git/ce103-week-3-git/#branching-6","text":"","title":"Branching (6)"},{"location":"week-3-git/ce103-week-3-git/#list-local-branches","text":"git branch -l section{ font-size: 25px; }","title":"List Local Branches"},{"location":"week-3-git/ce103-week-3-git/#branching-7","text":"","title":"Branching (7)"},{"location":"week-3-git/ce103-week-3-git/#list-remote-branches","text":"git branch -r section{ font-size: 25px; }","title":"List Remote Branches"},{"location":"week-3-git/ce103-week-3-git/#branching-8","text":"","title":"Branching (8)"},{"location":"week-3-git/ce103-week-3-git/#list-all-local-and-remote-branches","text":"git branch -a section{ font-size: 25px; }","title":"List All Local and Remote Branches"},{"location":"week-3-git/ce103-week-3-git/#branching-9","text":"Removing merged git branches (after pull-request action in github) If you merged your branch to base branch in github and delete it on github your local branch list will not be updated by it self. You have to use the following command to update local and remote branch lists. Use the following command to syncronize your repository with remote upstream repo. git remote update --prune section{ font-size: 25px; }","title":"Branching (9)"},{"location":"week-3-git/ce103-week-3-git/#branching-10","text":"","title":"Branching (10)"},{"location":"week-3-git/ce103-week-3-git/#create-branch","text":"To create a new branch we use the following command git branch <branch-name> The diagram below shows the workflow when a new branch is created. When we create a new branch it originates from the master branch itself. section{ font-size: 25px; }","title":"Create Branch"},{"location":"week-3-git/ce103-week-3-git/#branching-11","text":"","title":"Branching (11)"},{"location":"week-3-git/ce103-week-3-git/#create-branch_1","text":"section{ font-size: 25px; }","title":"Create Branch"},{"location":"week-3-git/ce103-week-3-git/#branching-12","text":"","title":"Branching (12)"},{"location":"week-3-git/ce103-week-3-git/#create-branch_2","text":"Since there is no storage/memory overhead with making many branches, it is easier to logically divide up your work rather than have big chunky branches You can create and change branch with following command, create a new branch named \"feature_x\" and switch to it using git checkout -b feature_x section{ font-size: 25px; }","title":"Create Branch"},{"location":"week-3-git/ce103-week-3-git/#branching-13","text":"","title":"Branching (13)"},{"location":"week-3-git/ce103-week-3-git/#change-branch","text":"git checkout <branch-name> Example: git checkout master section{ font-size: 25px; }","title":"Change Branch"},{"location":"week-3-git/ce103-week-3-git/#branching-14","text":"","title":"Branching (14)"},{"location":"week-3-git/ce103-week-3-git/#change-branch_1","text":"Branching includes the work of a particular commit along with all parent commits. As you can see in the diagram above, the newBranch has detached itself from the master and hence will create a different path section{ font-size: 25px; }","title":"Change Branch"},{"location":"week-3-git/ce103-week-3-git/#branching-15","text":"","title":"Branching (15)"},{"location":"week-3-git/ce103-week-3-git/#delete-local-branch","text":"and delete the branch again, before doing this switch to main or master branches. git branch -d feature_x section{ font-size: 25px; }","title":"Delete Local Branch"},{"location":"week-3-git/ce103-week-3-git/#branching-16","text":"","title":"Branching (16)"},{"location":"week-3-git/ce103-week-3-git/#delete-remote-branch","text":"and delete the branch again, before doing this switch to main or master branches. git push origin --delete feature_x How to delete remote branches in Git section{ font-size: 25px; }","title":"Delete Remote Branch"},{"location":"week-3-git/ce103-week-3-git/#branching-17","text":"","title":"Branching (17)"},{"location":"week-3-git/ce103-week-3-git/#push-specific-branch-to-remote","text":"A branch is not available to others unless you push the branch to your remote repository git push origin <branch> section{ font-size: 25px; }","title":"Push Specific Branch to Remote"},{"location":"week-3-git/ce103-week-3-git/#branching-18","text":"","title":"Branching (18)"},{"location":"week-3-git/ce103-week-3-git/#update-merge-conflicts","text":"to update your local repository to the newest commit, execute git pull in your working directory to fetch and merge remote changes. to merge another branch into your active branch (e.g. master), use git merge <branch> section{ font-size: 25px; }","title":"Update &amp; Merge (Conflicts)"},{"location":"week-3-git/ce103-week-3-git/#branching-19","text":"","title":"Branching (19)"},{"location":"week-3-git/ce103-week-3-git/#update-merge-conflicts_1","text":"in both cases git tries to auto-merge changes. Unfortunately, this is not always possible and results in conflicts. You are responsible to merge those conflicts manually by editing the files shown by git. After changing, you need to mark them as merged with git add <filename> before merging changes, you can also preview them by using git diff <source_branch> <target_branch> Git merge conflicts | Atlassian Git Tutorial section{ font-size: 25px; }","title":"Update &amp; Merge (Conflicts)"},{"location":"week-3-git/ce103-week-3-git/#branching-20","text":"","title":"Branching (20)"},{"location":"week-3-git/ce103-week-3-git/#update-merge-conflicts_2","text":"There are two types of merges Git can perform: a fast-forward , or a no-fast-forward section{ font-size: 25px; }","title":"Update &amp; Merge (Conflicts)"},{"location":"week-3-git/ce103-week-3-git/#branching-21","text":"","title":"Branching (21)"},{"location":"week-3-git/ce103-week-3-git/#update-merge-conflicts_3","text":"","title":"Update &amp; Merge (Conflicts)"},{"location":"week-3-git/ce103-week-3-git/#fast-forward-ff","text":"A fast-forward merge can happen when the current branch has no extra commits compared to the branch we\u2019re merging. Git is... lazy and will first try to perform the easiest option: the fast-forward! This type of merge doesn\u2019t create a new commit, but rather merges the commit(s) on the branch we\u2019re merging right in the current branch section{ font-size: 25px; }","title":"Fast-forward (--ff)"},{"location":"week-3-git/ce103-week-3-git/#branching-22","text":"","title":"Branching (22)"},{"location":"week-3-git/ce103-week-3-git/#update-merge-conflicts_4","text":"","title":"Update &amp; Merge (Conflicts)"},{"location":"week-3-git/ce103-week-3-git/#fast-forward-ff_1","text":"section{ font-size: 25px; }","title":"Fast-forward (--ff)"},{"location":"week-3-git/ce103-week-3-git/#branching-23","text":"","title":"Branching (23)"},{"location":"week-3-git/ce103-week-3-git/#update-merge-conflicts_5","text":"Perfect! We now have all the changes that were made on the dev branch available on the master branch. So, what's the no-fast-forward all about? section{ font-size: 25px; }","title":"Update &amp; Merge (Conflicts)"},{"location":"week-3-git/ce103-week-3-git/#branching-24","text":"","title":"Branching (24)"},{"location":"week-3-git/ce103-week-3-git/#update-merge-conflicts_6","text":"","title":"Update &amp; Merge (Conflicts)"},{"location":"week-3-git/ce103-week-3-git/#no-fast-foward-no-ff","text":"It's great if your current branch doesn't have any extra commits compared to the branch that you want to merge, but unfortunately that's rarely the case! If we committed changes on the current branch that the branch we want to merge doesn't have, git will perform a no-fast-forward merge. section{ font-size: 25px; }","title":"No-fast-foward (--no-ff)"},{"location":"week-3-git/ce103-week-3-git/#branching-25","text":"","title":"Branching (25)"},{"location":"week-3-git/ce103-week-3-git/#update-merge-conflicts_7","text":"","title":"Update &amp; Merge (Conflicts)"},{"location":"week-3-git/ce103-week-3-git/#no-fast-foward-no-ff_1","text":"With a no-fast-forward merge, Git creates a new merging commit on the active branch. The commit's parent commits point to both the active branch and the branch that we want to merge! section{ font-size: 25px; }","title":"No-fast-foward (--no-ff)"},{"location":"week-3-git/ce103-week-3-git/#branching-26","text":"","title":"Branching (26)"},{"location":"week-3-git/ce103-week-3-git/#update-merge-conflicts_8","text":"","title":"Update &amp; Merge (Conflicts)"},{"location":"week-3-git/ce103-week-3-git/#no-fast-foward-no-ff_2","text":"section{ font-size: 25px; }","title":"No-fast-foward (--no-ff)"},{"location":"week-3-git/ce103-week-3-git/#branching-27","text":"","title":"Branching (27)"},{"location":"week-3-git/ce103-week-3-git/#update-merge-conflicts_9","text":"","title":"Update &amp; Merge (Conflicts)"},{"location":"week-3-git/ce103-week-3-git/#no-fast-foward-no-ff_3","text":"No big deal, a perfect merge! The master branch now contains all the changes that we've made on the dev branch. section{ font-size: 25px; }","title":"No-fast-foward (--no-ff)"},{"location":"week-3-git/ce103-week-3-git/#branching-28","text":"","title":"Branching (28)"},{"location":"week-3-git/ce103-week-3-git/#merge-conflicts","text":"Although Git is good at deciding how to merge branches and add changes to files, it cannot always make this decision all by itself This can happen when the two branches we're trying to merge have changes on the same line in the same file, or if one branch deleted a file that another branch modified, and so on. section{ font-size: 25px; }","title":"Merge Conflicts"},{"location":"week-3-git/ce103-week-3-git/#branching-29","text":"","title":"Branching (29)"},{"location":"week-3-git/ce103-week-3-git/#merge-conflicts_1","text":"In that case, Git will ask you to help decide which of the two options we want to keep! Let's say that on both branches, we edited the first line in the README.md . section{ font-size: 25px; }","title":"Merge Conflicts"},{"location":"week-3-git/ce103-week-3-git/#branching-30","text":"","title":"Branching (30)"},{"location":"week-3-git/ce103-week-3-git/#merge-conflicts_2","text":"If we want to merge dev into master , this will end up in a merge conflict: would you like the title to be Hello! or Hey! ? section{ font-size: 25px; }","title":"Merge Conflicts"},{"location":"week-3-git/ce103-week-3-git/#branching-31","text":"","title":"Branching (31)"},{"location":"week-3-git/ce103-week-3-git/#merge-conflicts_3","text":"When trying to merge the branches, Git will show you where the conflict happens. We can manually remove the changes we don't want to keep, save the changes, add the changed file again, and commit the changes section{ font-size: 25px; }","title":"Merge Conflicts"},{"location":"week-3-git/ce103-week-3-git/#branching-32","text":"","title":"Branching (32)"},{"location":"week-3-git/ce103-week-3-git/#merge-conflicts_4","text":"Although merge conflicts are often quite annoying, it makes total sense: Git shouldn't just assume which change we want to keep section{ font-size: 25px; }","title":"Merge Conflicts"},{"location":"week-3-git/ce103-week-3-git/#branching-33","text":"","title":"Branching (33)"},{"location":"week-3-git/ce103-week-3-git/#sample-conflict-1","text":"participants.txt ( I added a hyphen before each name ) Finance team Charles Lisa John Stacy Alexander git init git add . git commit \u2013m 'Initial list for finance team' section{ font-size: 25px; }","title":"Sample Conflict -1"},{"location":"week-3-git/ce103-week-3-git/#branching-34","text":"","title":"Branching (34)"},{"location":"week-3-git/ce103-week-3-git/#sample-conflict-1_1","text":"Create a new branch called marketing using the following syntax git checkout \u2013b marketing section{ font-size: 25px; }","title":"Sample Conflict -1"},{"location":"week-3-git/ce103-week-3-git/#branching-35","text":"","title":"Branching (35)"},{"location":"week-3-git/ce103-week-3-git/#sample-conflict-1_2","text":"Now open the participants.txt file and start entering the names for the marketing department below the finance team list, as follows: ( I added a hyphen before each name ) Marketing team Collins Linda Patricia Morgan git add . git commit \u2013m 'Unfinished list of marketing team' git checkout master section{ font-size: 25px; }","title":"Sample Conflict -1"},{"location":"week-3-git/ce103-week-3-git/#branching-36","text":"","title":"Branching (36)"},{"location":"week-3-git/ce103-week-3-git/#sample-conflict-1_3","text":"Open the file and delete the names Alexander and Stacy , save, close, add the changes, and commit with the commit message Final list from Finance team git add . git commit \u2013m \"Final list from Finance team\" git checkout marketing section{ font-size: 25px; }","title":"Sample Conflict -1"},{"location":"week-3-git/ce103-week-3-git/#branching-37","text":"","title":"Branching (37)"},{"location":"week-3-git/ce103-week-3-git/#sample-conflict-1_4","text":"Open the file and add the fifth name, Amanda , for the marketing team, save, add, and commit git add . git commit \u2013m \"Initial list of marketing team\" names entered for marketing have been confirmed; now we need to merge these two lists, which can be done by the following command git merge master section{ font-size: 25px; }","title":"Sample Conflict -1"},{"location":"week-3-git/ce103-week-3-git/#branching-38","text":"","title":"Branching (38)"},{"location":"week-3-git/ce103-week-3-git/#sample-conflict-1_5","text":"Auto-merging participants.txt CONFLICT ( content ) : Merge conflict in participants.txt Automatic merge failed ; fix conflicts and then commit the result. section{ font-size: 25px; }","title":"Sample Conflict -1"},{"location":"week-3-git/ce103-week-3-git/#branching-39","text":"","title":"Branching (39)"},{"location":"week-3-git/ce103-week-3-git/#sample-conflict-1_6","text":"Finance team -Charles -Lisa -John <<<<<< < HEAD -Stacy -Alexander Marketing team - Collins - Linda - Patricia - Morgan - Amanda ======= >>>>>>> master section{ font-size: 25px; }","title":"Sample Conflict -1"},{"location":"week-3-git/ce103-week-3-git/#branching-40","text":"","title":"Branching (40)"},{"location":"week-3-git/ce103-week-3-git/#sample-conflict-1_7","text":"<<<<<< < Changes made on the branch that is being merged into. In most cases, this is the branch that I have currently checked out ( i.e. HEAD ) . |||||| | The common ancestor version. ======= Changes made on the branch that is being merged in . This is often a feature/topic branch. >>>>>>> section{ font-size: 25px; }","title":"Sample Conflict -1"},{"location":"week-3-git/ce103-week-3-git/#branching-41","text":"","title":"Branching (41)"},{"location":"week-3-git/ce103-week-3-git/#sample-conflict-1_8","text":"remove them keep the lines you want to see in the final version of the file add and commit section{ font-size: 25px; }","title":"Sample Conflict -1"},{"location":"week-3-git/ce103-week-3-git/#branching-42","text":"","title":"Branching (42)"},{"location":"week-3-git/ce103-week-3-git/#sample-conflict-1_9","text":"If we want to save all to our version git checkout --ours . # checkout our local version of all files git add -u # mark all conflicted files as merged git commit # commit the merge section{ font-size: 25px; }","title":"Sample Conflict -1"},{"location":"week-3-git/ce103-week-3-git/#branching-43","text":"","title":"Branching (43)"},{"location":"week-3-git/ce103-week-3-git/#sample-conflict-1_10","text":"If we want to discard all our revision git checkout --theirs . # checkout remote version of all files git add -u # mark all conflicted files as merged git commit # commit the merge section{ font-size: 25px; }","title":"Sample Conflict -1"},{"location":"week-3-git/ce103-week-3-git/#branching-44","text":"","title":"Branching (44)"},{"location":"week-3-git/ce103-week-3-git/#sample-conflict-2","text":"You're going to pull some changes, but oops, you're not up to date: git fetch origin git pull origin master Output From ssh://gitosis@example.com:22/projectname * branch master -> FETCH_HEAD Updating a030c3a..ee25213 error: Entry 'filename.c' not uptodate. Cannot merge. section{ font-size: 25px; }","title":"Sample Conflict -2"},{"location":"week-3-git/ce103-week-3-git/#branching-45","text":"","title":"Branching (45)"},{"location":"week-3-git/ce103-week-3-git/#sample-conflict-2_1","text":"So you get up-to-date and try again, but have a conflict: git add filename.c git commit -m \"made some wild and crazy changes\" git pull origin master Output From ssh://gitosis@example.com:22/projectname * branch master -> FETCH_HEAD Auto-merging filename.c CONFLICT ( content ) : Merge conflict in filename.c Automatic merge failed ; fix conflicts and then commit the result. section{ font-size: 25px; }","title":"Sample Conflict -2"},{"location":"week-3-git/ce103-week-3-git/#branching-46","text":"","title":"Branching (46)"},{"location":"week-3-git/ce103-week-3-git/#sample-conflict-2_2","text":"So you decide to take a look at the changes: git mergetool Oh my, oh my, upstream changed some things, but just to use my changes...no...their changes... git checkout --ours filename.c git checkout --theirs filename.c git add filename.c git commit -m \"using theirs\" section{ font-size: 25px; }","title":"Sample Conflict -2"},{"location":"week-3-git/ce103-week-3-git/#branching-47","text":"","title":"Branching (47)"},{"location":"week-3-git/ce103-week-3-git/#sample-conflict-2_3","text":"And then we try a final time git pull origin master Output From ssh://gitosis@example.com:22/projectname * branch master -> FETCH_HEAD Already up-to-date. section{ font-size: 25px; }","title":"Sample Conflict -2"},{"location":"week-3-git/ce103-week-3-git/#tagging","text":"it's recommended to create tags for software releases. this is a known concept, which also exists in SVN. You can create a new tag named 1.0.0 by executing git tag 1 .0.0 1b2e1d63ff the 1b2e1d63ff stands for the first 10 characters of the commit id you want to reference with your tag. You can get the commit id by looking at the... section{ font-size: 25px; }","title":"Tagging"},{"location":"week-3-git/ce103-week-3-git/#log-1","text":"in its simplest form, you can study repository history using.. git log You can add a lot of parameters to make the log look like what you want. To see only the commits of a certain author: git log --author = bob section{ font-size: 25px; }","title":"Log (1)"},{"location":"week-3-git/ce103-week-3-git/#log-2","text":"To see a very compressed log where each commit is one line: git log --pretty = oneline section{ font-size: 25px; }","title":"Log (2)"},{"location":"week-3-git/ce103-week-3-git/#log-3","text":"Or maybe you want to see an ASCII art tree of all the branches, decorated with the names of tags and branches: git log --graph --oneline --decorate --all section{ font-size: 25px; }","title":"Log (3)"},{"location":"week-3-git/ce103-week-3-git/#log-4","text":"See only which files have changed: git log --name-status","title":"Log (4)"},{"location":"week-3-git/ce103-week-3-git/#log-5","text":"git log --pretty = format: \"%h%x09%an%x09%ad%x09%s\" section{ font-size: 25px; }","title":"Log (5)"},{"location":"week-3-git/ce103-week-3-git/#log-6","text":"These are just a few of the possible parameters you can use. For more, see git log --help section{ font-size: 25px; }","title":"Log (6)"},{"location":"week-3-git/ce103-week-3-git/#replace-local-changes-1","text":"In case you did something wrong, which for sure never happens ;), you can replace local changes using the command git checkout -- <filename> this replaces the changes in your working tree with the last content in HEAD. Changes already added to the index, as well as new files, will be kept. section{ font-size: 25px; }","title":"Replace Local Changes (1)"},{"location":"week-3-git/ce103-week-3-git/#replace-local-changes-2","text":"if you use dot (.) then all local changes will be rollbacked. git checkout -- . section{ font-size: 25px; }","title":"Replace Local Changes (2)"},{"location":"week-3-git/ce103-week-3-git/#replace-local-changes-3","text":"If you instead want to drop all your local changes and commits, fetch the latest history from the server and point your local master branch at it like this git fetch origin git reset --hard origin/master section{ font-size: 25px; }","title":"Replace Local Changes (3)"},{"location":"week-3-git/ce103-week-3-git/#reflog-1","text":"Everyone makes mistakes, and that's totally okay! Sometimes it may feel like you've corrupt your git repo so badly that you just want to delete it entirely. section{ font-size: 25px; }","title":"Reflog (1)"},{"location":"week-3-git/ce103-week-3-git/#reflog-2","text":"git reflog is a very useful command in order to show a log of all the actions that have been taken! This includes merges, resets, reverts: basically any alteration to your branch. section{ font-size: 25px; }","title":"Reflog (2)"},{"location":"week-3-git/ce103-week-3-git/#reflog-3","text":"section{ font-size: 25px; }","title":"Reflog (3)"},{"location":"week-3-git/ce103-week-3-git/#reflog-4","text":"If you made a mistake, you can easily redo this by resetting HEAD based on the information that reflog gives us! Say that we actually didn't want to merge the origin branch. When we execute the git reflog command, we see that the state of the repo before the merge is at HEAD@{1} . Let's perform a git reset to point HEAD back to where it was on HEAD@{1} ! section{ font-size: 25px; }","title":"Reflog (4)"},{"location":"week-3-git/ce103-week-3-git/#reflog-5","text":"We can see that the latest action has been pushed to the reflog section{ font-size: 25px; }","title":"Reflog (5)"},{"location":"week-3-git/ce103-week-3-git/#resetting-1","text":"It can happen that we committed changes that we didn't want later on. Maybe it's a WIP commit, or maybe a commit that introduced bugs! In that case, we can perform a git reset . section{ font-size: 25px; }","title":"Resetting (1)"},{"location":"week-3-git/ce103-week-3-git/#resetting-2","text":"A git reset gets rid of all the current staged files and gives us control over where HEAD should point to. section{ font-size: 25px; }","title":"Resetting (2)"},{"location":"week-3-git/ce103-week-3-git/#soft-reset-1","text":"A soft reset moves HEAD to the specified commit (or the index of the commit compared to HEAD ), without getting rid of the changes that were introduced on the commits afterward! section{ font-size: 25px; }","title":"Soft Reset (1)"},{"location":"week-3-git/ce103-week-3-git/#soft-reset-2","text":"Let's say that we don't want to keep the commit 9e78i which added a style.css file, and we also don't want to keep the commit 035cc which added an index.js file. However, we do want to keep the newly added style.css and index.js file! A perfect use case for a soft reset. section{ font-size: 25px; }","title":"Soft Reset (2)"},{"location":"week-3-git/ce103-week-3-git/#soft-reset-3","text":"section{ font-size: 25px; } section{ font-size: 25px; }","title":"Soft Reset (3)"},{"location":"week-3-git/ce103-week-3-git/#soft-reset-2_1","text":"When typing git status , you'll see that we still have access to all the changes that were made on the previous commits. This is great, as this means that we can fix the contents of these files and commit them again later on! section{ font-size: 25px; }","title":"Soft Reset (2)"},{"location":"week-3-git/ce103-week-3-git/#hard-reset-1","text":"Sometimes, we don't want to keep the changes that were introduced by certain commits. Unlike a soft reset, we shouldn't need to have access to them any more. Git should simply reset its state back to where it was on the specified commit: this even includes the changes in your working directory and staged files! section{ font-size: 25px; }","title":"Hard reset (1)"},{"location":"week-3-git/ce103-week-3-git/#hard-reset-2","text":"Git has discarded the changes that were introduced on 9e78i and 035cc , and reset its state to where it was on commit ec5be . section{ font-size: 25px; }","title":"Hard reset (2)"},{"location":"week-3-git/ce103-week-3-git/#reverting-1","text":"Another way of undoing changes is by performing a git revert . By reverting a certain commit, we create a new commit that contains the reverted changes! section{ font-size: 25px; }","title":"Reverting (1)"},{"location":"week-3-git/ce103-week-3-git/#reverting-2","text":"Let's say that ec5be added an index.js file. Later on, we actually realize we didn't want this change introduced by this commit anymore! Let's revert the ec5be commit. Perfect! Commit 9e78i reverted the changes that were introduced by the ec5be commit. section{ font-size: 25px; }","title":"Reverting (2)"},{"location":"week-3-git/ce103-week-3-git/#reverting-3","text":"Performing a git revert is very useful in order to undo a certain commit, without modifying the history of the branch. section{ font-size: 25px; }","title":"Reverting (3)"},{"location":"week-3-git/ce103-week-3-git/#cherry-picking-1","text":"When a certain branch contains a commit that introduced changes we need on our active branch, we can cherry-pick that command! By cherry-pick ing a commit, we create a new commit on our active branch that contains the changes that were introduced by the cherry-pick ed commit. section{ font-size: 25px; }","title":"Cherry-picking (1)"},{"location":"week-3-git/ce103-week-3-git/#cherry-picking-1_1","text":"Say that commit 76d12 on the dev branch added a change to the index.js file that we want in our master branch. We don't want the entire we just care about this one single commit! Cool, the master branch now contains the changes that 76d12 introduced section{ font-size: 25px; }","title":"Cherry-picking (1)"},{"location":"week-3-git/ce103-week-3-git/#rebasing-1","text":"We just saw how we could apply changes from one branch to another by performing a git merge . Another way of adding changes from one branch to another is by performing a git rebase . section{ font-size: 25px; }","title":"Rebasing (1)"},{"location":"week-3-git/ce103-week-3-git/#rebasing-2","text":"A git rebase copies the commits from the current branch, and puts these copied commits on top of the specified branch. Perfect, we now have all the changes that were made on the master branch available on the dev branch! section{ font-size: 25px; }","title":"Rebasing (2)"},{"location":"week-3-git/ce103-week-3-git/#rebasing-3","text":"A big difference compared to merging, is that Git won't try to find out which files to keep and not keep. The branch that we're rebasing always has the latest changes that we want to keep! You won't run into any merging conflicts this way, and keeps a nice linear Git history. section{ font-size: 25px; }","title":"Rebasing (3)"},{"location":"week-3-git/ce103-week-3-git/#rebasing-4","text":"This example shows rebasing on the master branch. In bigger projects, however, you usually don't want to do that. A git rebase changes the history of the project as new hashes are created for the copied commits! section{ font-size: 25px; }","title":"Rebasing (4)"},{"location":"week-3-git/ce103-week-3-git/#rebasing-5","text":"Rebasing is great whenever you're working on a feature branch, and the master branch has been updated. You can get all the updates on your branch, which would prevent future merging conflicts! section{ font-size: 25px; }","title":"Rebasing (5)"},{"location":"week-3-git/ce103-week-3-git/#interactive-rebase-1","text":"Before rebasing the commits, we can modify them! We can do so with an interactive rebase . An interactive rebase can also be useful on the branch you're currently working on, and want to modify some commits. section{ font-size: 25px; }","title":"Interactive Rebase (1)"},{"location":"week-3-git/ce103-week-3-git/#interactive-rebase-2","text":"There are 6 actions we can perform on the commits we're rebasing: reword : Change the commit message edit : Amend this commit squash : Meld commit into the previous commit fixup : Meld commit into the previous commit, without keeping the commit's log message exec : Run a command on each commit we want to rebase drop : Remove the commit section{ font-size: 25px; }","title":"Interactive Rebase (2)"},{"location":"week-3-git/ce103-week-3-git/#interactive-rebase-3","text":"Awesome! This way, we can have full control over our commits. If we want to remove a commit, we can just drop it. section{ font-size: 25px; }","title":"Interactive Rebase (3)"},{"location":"week-3-git/ce103-week-3-git/#interactive-rebase-4","text":"Or if we want to squash multiple commits together to get a cleaner history, no problem! Interactive rebasing gives you a lot of control over the commits you're trying to rebase, even on the current active branch section{ font-size: 25px; }","title":"Interactive Rebase (4)"},{"location":"week-3-git/ce103-week-3-git/#useful-hints-1","text":"built-in git GUI gitk section{ font-size: 25px; }","title":"Useful Hints (1)"},{"location":"week-3-git/ce103-week-3-git/#useful-hints-2","text":"use colorful git output git config color.ui true section{ font-size: 25px; }","title":"Useful Hints (2)"},{"location":"week-3-git/ce103-week-3-git/#useful-hints-3","text":"show log on just one line per commit git config format.pretty oneline section{ font-size: 25px; }","title":"Useful Hints (3)"},{"location":"week-3-git/ce103-week-3-git/#useful-hints-4","text":"use interactive adding git add -i HEAD~2 // previous two commits fro head HEAD~~ // previous two commits from head HEAD@ { 2 } // reflog order 18fe5 // previous commit hash section{ font-size: 25px; }","title":"Useful Hints (4)"},{"location":"week-3-git/ce103-week-3-git/#git-flow","text":"A successful Git branching model \u00bb nvie.com section{ font-size: 25px; }","title":"GIT Flow"},{"location":"week-3-git/ce103-week-3-git/#hotfix","text":"Reference: - OneFlow \u2013 a Git branching model and workflow | End of Line Blog - a simple git branching model \u00b7 GitHub section{ font-size: 25px; }","title":"Hotfix"},{"location":"week-3-git/ce103-week-3-git/#git-decision-tree","text":"reference url section{ font-size: 25px; }","title":"GIT Decision Tree"},{"location":"week-3-git/ce103-week-3-git/#git-in-action-1","text":"section{ font-size: 25px; }","title":"GIT in action (1)"},{"location":"week-3-git/ce103-week-3-git/#git-in-action-2","text":"section{ font-size: 25px; }","title":"GIT in action (2)"},{"location":"week-3-git/ce103-week-3-git/#git-in-action-3","text":"section{ font-size: 25px; }","title":"GIT in action (3)"},{"location":"week-3-git/ce103-week-3-git/#git-in-action-4","text":"section{ font-size: 25px; }","title":"GIT in action (4)"},{"location":"week-3-git/ce103-week-3-git/#git-in-action-5","text":"section{ font-size: 25px; }","title":"GIT in action (5)"},{"location":"week-3-git/ce103-week-3-git/#git-in-action-6","text":"section{ font-size: 25px; }","title":"GIT in action (6)"},{"location":"week-3-git/ce103-week-3-git/#git-in-action-7","text":"section{ font-size: 25px; }","title":"GIT in action (7)"},{"location":"week-3-git/ce103-week-3-git/#gource","text":"https://gource.io/","title":"Gource"},{"location":"week-3-git/ce103-week-3-git/#review-git-with-gitmagic-standford-notes","text":"Visit : https://crypto.stanford.edu/~blynn/gitmagic/book.html section{ font-size: 25px; }","title":"Review GIT with GitMagic Standford Notes"},{"location":"week-3-git/ce103-week-3-git/#basic-tricks","text":"Rather than diving into a sea of Git commands, use these elementary examples to get your feet wet. Despite their simplicity, each of them are useful. Indeed, in my first months with Git I never ventured beyond the material in this chapter. section{ font-size: 25px; } section{ font-size: 25px; }","title":"Basic Tricks"},{"location":"week-3-git/ce103-week-3-git/#saving-state","text":"About to attempt something drastic? Before you do, take a snapshot of all files in the current directory with: git init git add . git commit -m \"My first backup\" section{ font-size: 25px; } Now if your new edits go awry, restore the pristine version: git reset --hard section{ font-size: 25px; } To save the state again: git commit -a -m \"Another backup\" section{ font-size: 25px; }","title":"Saving State"},{"location":"week-3-git/ce103-week-3-git/#add-delete-rename","text":"The above only keeps track of the files that were present when you first ran git add . If you add new files or subdirectories, you\u2019ll have to tell Git: git add readme.txt Documentation section{ font-size: 25px; } Similarly, if you want Git to forget about certain files: git rm kludge.h obsolete.c git rm -r incriminating/evidence/ Git deletes these files for you if you haven\u2019t already. section{ font-size: 25px; } Renaming a file is the same as removing the old name and adding the new name. There\u2019s also the shortcut git mv which has the same syntax as the mv command. For example: git mv bug.c feature.c section{ font-size: 25px; }","title":"Add, Delete, Rename"},{"location":"week-3-git/ce103-week-3-git/#advanced-undoredo","text":"Sometimes you just want to go back and forget about every change past a certain point because they\u2019re all wrong. Then: git log shows you a list of recent commits, and their SHA1 hashes: commit 766f9881690d240ba334153047649b8b8f11c664 Author: Bob <bob@example.com> Date: Tue Mar 14 01 :59:26 2000 -0800 Replace printf () with write () . commit 82f5ea346a2e651544956a8653c0f58dc151275c Author: Alice <alice@example.com> Date: Thu Jan 1 00 :00:00 1970 +0000 Initial commit. The first few characters of the hash are enough to specify the commit; alternatively, copy and paste the entire hash. Type: git reset --hard 766f to restore the state to a given commit and erase all newer commits from the record permanently. section{ font-size: 25px; } Other times you want to hop to an old state briefly. In this case, type: git checkout 82f5 This takes you back in time, while preserving newer commits. However, like time travel in a science-fiction movie, if you now edit and commit, you will be in an alternate reality, because your actions are different to what they were the first time around. section{ font-size: 25px; } This alternate reality is called a branch , For now, just remember that git checkout master will take you back to the present. Also, to stop Git complaining, always commit or reset your changes before running checkout. section{ font-size: 25px; } To take the computer game analogy again: git reset --hard : load an old save and delete all saved games newer than the one just loaded. git checkout : load an old game, but if you play on, the game state will deviate from the newer saves you made the first time around. Any saved games you make now will end up in a separate branch representing the alternate reality you have entered. section{ font-size: 25px; } You can choose only to restore particular files and subdirectories by appending them after the command: git checkout 82f5 some.file another.file Take care, as this form of checkout can silently overwrite files. To prevent accidents, commit before running any checkout command, especially when first learning Git. section{ font-size: 25px; } In general, whenever you feel unsure about any operation, Git command or not, first run git commit -a . Don\u2019t like cutting and pasting hashes? Then use: git checkout :/ \"My first b\" to jump to the commit that starts with a given message. You can also ask for the 5 th -last saved state: git checkout master~5 section{ font-size: 25px; }","title":"Advanced Undo/Redo"},{"location":"week-3-git/ce103-week-3-git/#reverting","text":"In a court of law, events can be stricken from the record. Likewise, you can pick specific commits to undo. git commit -a git revert 1b6d will undo just the commit with the given hash. The revert is recorded as a new commit, which you can confirm by running git log . section{ font-size: 25px; }","title":"Reverting"},{"location":"week-3-git/ce103-week-3-git/#changelog-generation","text":"Some projects require a changelog . Generate one by typing: git log > ChangeLog section{ font-size: 25px; }","title":"Changelog Generation"},{"location":"week-3-git/ce103-week-3-git/#downloading-files","text":"Get a copy of a project managed with Git by typing: git clone git://server/path/to/files For example, to get all the files I used to create this site: git clone git://git.or.cz/gitmagic.git We\u2019ll have much to say about the clone command soon. section{ font-size: 25px; }","title":"Downloading Files"},{"location":"week-3-git/ce103-week-3-git/#the-bleeding-edge","text":"If you\u2019ve already downloaded a copy of a project using git clone , you can upgrade to the latest version with: git pull section{ font-size: 25px; }","title":"The Bleeding Edge"},{"location":"week-3-git/ce103-week-3-git/#instant-publishing","text":"Suppose you\u2019ve written a script you\u2019d like to share with others. You could just tell them to download from your computer, but if they do so while you\u2019re improving the script or making experimental changes, they could wind up in trouble. Of course, this is why release cycles exist. Developers may work on a project frequently, but they only make the code available when they feel it is presentable. section{ font-size: 25px; } To do this with Git, in the directory where your script resides: git init git add . git commit -m \"First release\" section{ font-size: 25px; } Then tell your users to run: git clone your.computer:/path/to/script to download your script. This assumes they have ssh access. If not, run git daemon and tell your users to instead run: git clone git://your.computer/path/to/script section{ font-size: 25px; } From now on, every time your script is ready for release, execute: git commit -a -m \"Next release\" and your users can upgrade their version by changing to the directory containing your script and typing: git pull Your users will never end up with a version of your script you don\u2019t want them to see. section{ font-size: 25px; }","title":"Instant Publishing"},{"location":"week-3-git/ce103-week-3-git/#what-have-i-done","text":"Find out what changes you\u2019ve made since the last commit with: git diff section{ font-size: 25px; } Or since yesterday: git diff \"@{yesterday}\" section{ font-size: 25px; } Or between a particular version and 2 versions ago: git diff 1b6d \"master~2\" section{ font-size: 25px; } In each case the output is a patch that can be applied with git apply . Try also: git whatchanged --since = \"2 weeks ago\" section{ font-size: 25px; } Often I\u2019ll browse history with qgit instead, due to its slick photogenic interface, or tig , a text-mode interface that works well over slow connections. Alternatively, install a web server, run git instaweb and fire up any web browser. section{ font-size: 25px; }","title":"What Have I Done?"},{"location":"week-3-git/ce103-week-3-git/#exercise","text":"Let A, B, C, D be four successive commits where B is the same as A except some files have been removed. We want to add the files back at D. How can we do this? There are at least three solutions. Assuming we are at D: The difference between A and B are the removed files. We can create a patch representing this difference and apply it: git diff B A | git apply Since we saved the files back at A, we can retrieve them: git checkout A foo.c bar.h We can view going from A to B as a change we want to undo: git revert B Which choice is best? Whichever you prefer most. It is easy to get what you want with Git, and often there are many ways to get it. section{ font-size: 25px; }","title":"Exercise"},{"location":"week-3-git/ce103-week-3-git/#cloning-around","text":"In older version control systems, checkout is the standard operation to get files. You retrieve a bunch of files in a particular saved state. In Git and other distributed version control systems, cloning is the standard operation. To get files, you create a clone of the entire repository. In other words, you practically mirror the central server. Anything the main repository can do, you can do. section{ font-size: 25px; }","title":"Cloning Around"},{"location":"week-3-git/ce103-week-3-git/#sync-computers","text":"I can tolerate making tarballs or using rsync for backups and basic syncing. But sometimes I edit on my laptop, other times on my desktop, and the two may not have talked to each other in between. Initialize a Git repository and commit your files on one machine. Then on the other: git clone other.computer:/path/to/files to create a second copy of the files and Git repository. From now on, git commit -a git pull other.computer:/path/to/files HEAD will pull in the state of the files on the other computer into the one you\u2019re working on. If you\u2019ve recently made conflicting edits in the same file, Git will let you know and you should commit again after resolving them. section{ font-size: 25px; }","title":"Sync Computers"},{"location":"week-3-git/ce103-week-3-git/#classic-source-control","text":"Initialize a Git repository for your files: git init git add . git commit -m \"Initial commit\" section{ font-size: 25px; } On the central server, initialize a bare repository in some directory: mkdir proj.git cd proj.git git --bare init touch proj.git/git-daemon-export-ok section{ font-size: 25px; } Start the Git daemon if necessary: git daemon --detach # it may already be running section{ font-size: 25px; } For Git hosting services, follow the instructions to setup the initially empty Git repository. Typically one fills in a form on a webpage. Push your project to the central server with: git push central.server/path/to/proj.git HEAD section{ font-size: 25px; } To check out the source, a developer types: git clone central.server/path/to/proj.git section{ font-size: 25px; } After making changes, the developer saves changes locally: git commit -a section{ font-size: 25px; } To update to the latest version: git pull section{ font-size: 25px; } Any merge conflicts should be resolved then committed: git commit -a section{ font-size: 25px; } To check in local changes into the central repository: git push section{ font-size: 25px; } If the main server has new changes due to activity by other developers, the push fails, and the developer should pull the latest version, resolve any merge conflicts, then try again. section{ font-size: 25px; } Developers must have SSH access for the above pull and push commands. However, anyone can see the source by typing: git clone git://central.server/path/to/proj.git The native git protocol is like HTTP: there is no authentication, so anyone can retrieve the project. Accordingly, by default, pushing is forbidden via the git protocol. section{ font-size: 25px; }","title":"Classic Source Control"},{"location":"week-3-git/ce103-week-3-git/#secret-source","text":"For a closed-source project, omit the touch command, and ensure you never create a file named git-daemon-export-ok . The repository can no longer be retrieved via the git protocol; only those with SSH access can see it. If all your repos are closed, running the git daemon is unnecessary because all communication occurs via SSH. section{ font-size: 25px; }","title":"Secret Source"},{"location":"week-3-git/ce103-week-3-git/#bare-repositories","text":"A bare repository is so named because it has no working directory; it only contains files that are normally hidden away in the .git subdirectory. In other words, it maintains the history of a project, and never holds a snapshot of any given version. section{ font-size: 25px; } A bare repository plays a role similar to that of the main server in a centralized version control system: the home of your project. Developers clone your project from it, and push the latest official changes to it. Typically it resides on a server that does little else but disseminate data. Development occurs in the clones, so the home repository can do without a working directory. section{ font-size: 25px; } Many Git commands fail on bare repositories unless the GIT_DIR environment variable is set to the repository path, or the --bare option is supplied. section{ font-size: 25px; }","title":"Bare repositories"},{"location":"week-3-git/ce103-week-3-git/#push-versus-pull","text":"Why did we introduce the push command, rather than rely on the familiar pull command? Firstly, pulling fails on bare repositories: instead you must fetch , a command we later discuss. section{ font-size: 25px; } But even if we kept a normal repository on the central server, pulling into it would still be cumbersome. We would have to login to the server first, and give the pull command the network address of the machine we\u2019re pulling from. Firewalls may interfere, and what if we have no shell access to the server in the first place? section{ font-size: 25px; } However, apart from this case, we discourage pushing into a repository, because confusion can ensue when the destination has a working directory. In short, while learning Git, only push when the target is a bare repository; otherwise pull. section{ font-size: 25px; }","title":"Push versus Pull"},{"location":"week-3-git/ce103-week-3-git/#forking-a-project","text":"Sick of the way a project is being run? Think you could do a better job? Then on your server: git clone git://main.server/path/to/files section{ font-size: 25px; } Next, tell everyone about your fork of the project at your server. At any later time, you can merge in the changes from the original project with: git pull section{ font-size: 25px; }","title":"Forking a Project"},{"location":"week-3-git/ce103-week-3-git/#ultimate-backups","text":"Want numerous tamper-proof geographically diverse redundant archives? If your project has many developers, don\u2019t do anything! Every clone of your code is effectively a backup. Not just of the current state, but of your project\u2019s entire history. Thanks to cryptographic hashing, if anyone\u2019s clone becomes corrupted, it will be spotted as soon as they try to communicate with others. section{ font-size: 25px; } If your project is not so popular, find as many servers as you can to host clones. The truly paranoid should always write down the latest 20-byte SHA1 hash of the HEAD somewhere safe. It has to be safe, not private. For example, publishing it in a newspaper would work well, because it\u2019s hard for an attacker to alter every copy of a newspaper. section{ font-size: 25px; }","title":"Ultimate Backups"},{"location":"week-3-git/ce103-week-3-git/#light-speed-multitask","text":"Say you want to work on several features in parallel. Then commit your project and run: git clone . /some/new/directory Thanks to hardlinking , local clones require less time and space than a plain backup. You can now work on two independent features simultaneously. section{ font-size: 25px; } For example, you can edit one clone while the other is compiling. At any time, you can commit and pull changes from the other clone: git pull /the/other/clone HEAD section{ font-size: 25px; }","title":"Light-Speed Multitask"},{"location":"week-3-git/ce103-week-3-git/#guerilla-version-control","text":"Are you working on a project that uses some other version control system, and you sorely miss Git? Then initialize a Git repository in your working directory: git init git add . git commit -m \"Initial commit\" section{ font-size: 25px; } then clone it: git clone . /some/new/directory section{ font-size: 25px; } Now go to the new directory and work here instead, using Git to your heart\u2019s content. Once in a while, you\u2019ll want to sync with everyone else, in which case go to the original directory, sync using the other version control system, and type: git add . git commit -m \"Sync with everyone else\" section{ font-size: 25px; } Then go to the new directory and run: git commit -a -m \"Description of my changes\" git pull section{ font-size: 25px; } The procedure for giving your changes to everyone else depends on the other version control system. The new directory contains the files with your changes. Run whatever commands of the other version control system are needed to upload them to the central repository. section{ font-size: 25px; } Subversion, perhaps the best centralized version control system, is used by countless projects. The git svn command automates the above for Subversion repositories, and can also be used to export a Git project to a Subversion repository . section{ font-size: 25px; }","title":"Guerilla Version Control"},{"location":"week-3-git/ce103-week-3-git/#mercurial","text":"Mercurial is a similar version control system that can almost seamlessly work in tandem with Git. With the hg-git plugin, a Mercurial user can losslessly push to and pull from a Git repository. section{ font-size: 25px; } Obtain the hg-git plugin with Git: git clone git://github.com/schacon/hg-git.git or Mercurial: hg clone http://bitbucket.org/durin42/hg-git/ section{ font-size: 25px; } Sadly, I am unaware of an analogous plugin for Git. For this reason, I advocate Git over Mercurial for the main repository, even if you prefer Mercurial. With a Mercurial project, usually a volunteer maintains a parallel Git repository to accommodate Git users, whereas thanks to the hg-git plugin, a Git project automatically accommodates Mercurial users. section{ font-size: 25px; } Although the plugin can convert a Mercurial repository to a Git repository by pushing to an empty repository, this job is easier with the hg-fast-export.sh script, available from: git clone git://repo.or.cz/fast-export.git To convert, in an empty directory: git init hg-fast-export.sh -r /hg/repo after adding the script to your $PATH . section{ font-size: 25px; }","title":"Mercurial"},{"location":"week-3-git/ce103-week-3-git/#bazaar","text":"We briefly mention Bazaar because it is the most popular free distributed version control system after Git and Mercurial. section{ font-size: 25px; } Bazaar has the advantage of hindsight, as it is relatively young; its designers could learn from mistakes of the past, and sidestep minor historical warts. Additionally, its developers are mindful of portability and interoperation with other version control systems. section{ font-size: 25px; } A bzr-git plugin lets Bazaar users work with Git repositories to some extent. The tailor program converts Bazaar repositories to Git repositories, and can do so incrementally, while bzr-fast-export is well-suited for one-shot conversions. section{ font-size: 25px; }","title":"Bazaar"},{"location":"week-3-git/ce103-week-3-git/#branch-wizardry","text":"Instant branching and merging are the most lethal of Git\u2019s killer features. Problem : External factors inevitably necessitate context switching. A severe bug manifests in the released version without warning. The deadline for a certain feature is moved closer. A developer whose help you need for a key section of the project is about to leave. In all cases, you must abruptly drop what you are doing and focus on a completely different task. section{ font-size: 25px; } Interrupting your train of thought can be detrimental to your productivity, and the more cumbersome it is to switch contexts, the greater the loss. With centralized version control we must download a fresh working copy from the central server. Distributed systems fare better, as we can clone the desired version locally. section{ font-size: 25px; } But cloning still entails copying the whole working directory as well as the entire history up to the given point. Even though Git reduces the cost of this with file sharing and hard links, the project files themselves must be recreated in their entirety in the new working directory. section{ font-size: 25px; } Solution : Git has a better tool for these situations that is much faster and more space-efficient than cloning: git branch . With this magic word, the files in your directory suddenly shapeshift from one version to another. This transformation can do more than merely go back or forward in history. Your files can morph from the last release to the experimental version to the current development version to your friend\u2019s version and so on. section{ font-size: 25px; }","title":"Branch Wizardry"},{"location":"week-3-git/ce103-week-3-git/#the-boss-key","text":"Ever played one of those games where at the push of a button (\u201cthe boss key\u201d), the screen would instantly display a spreadsheet or something? So if the boss walked in the office while you were playing the game you could quickly hide it away? section{ font-size: 25px; } In some directory: echo \"I'm smarter than my boss\" > myfile.txt git init git add . git commit -m \"Initial commit\" section{ font-size: 25px; } We have created a Git repository that tracks one text file containing a certain message. Now type: git checkout -b boss # nothing seems to change after this echo \"My boss is smarter than me\" > myfile.txt git commit -a -m \"Another commit\" section{ font-size: 25px; } It looks like we\u2019ve just overwritten our file and committed it. But it\u2019s an illusion. Type: git checkout master # switch to original version of the file and hey presto! The text file is restored. And if the boss decides to snoop around this directory, type: git checkout boss # switch to version suitable for boss' eyes You can switch between the two versions of the file as much as you like, and commit to each independently. section{ font-size: 25px; }","title":"The Boss Key"},{"location":"week-3-git/ce103-week-3-git/#dirty-work","text":"Say you\u2019re working on some feature, and for some reason, you need to go back three versions and temporarily put in a few print statements to see how something works. Then: git commit -a git checkout HEAD~3 section{ font-size: 25px; } Now you can add ugly temporary code all over the place. You can even commit these changes. When you\u2019re done, git checkout master to return to your original work. Observe that any uncommitted changes are carried over. section{ font-size: 25px; } What if you wanted to save the temporary changes after all? Easy: git checkout -b dirty and commit before switching back to the master branch. Whenever you want to return to the dirty changes, simply type: git checkout dirty section{ font-size: 25px; } We touched upon this command in an earlier chapter, when discussing loading old states. At last we can tell the whole story: the files change to the requested state, but we must leave the master branch. Any commits made from now on take your files down a different road, which can be named later. In other words, after checking out an old state, Git automatically puts you in a new, unnamed branch, which can be named and saved with git checkout -b . section{ font-size: 25px; }","title":"Dirty Work"},{"location":"week-3-git/ce103-week-3-git/#quick-fixes","text":"You\u2019re in the middle of something when you are told to drop everything and fix a newly discovered bug in commit 1b6d... : git commit -a git checkout -b fixes 1b6d Then once you\u2019ve fixed the bug: git commit -a -m \"Bug fixed\" git checkout master and resume work on your original task. You can even merge in the freshly baked bugfix: git merge fixes section{ font-size: 25px; }","title":"Quick Fixes"},{"location":"week-3-git/ce103-week-3-git/#merging","text":"With some version control systems, creating branches is easy but merging them back together is tough. With Git, merging is so trivial that you might be unaware of it happening. section{ font-size: 25px; } We actually encountered merging long ago. The pull command in fact fetches commits and then merges them into your current branch. If you have no local changes, then the merge is a fast forward , a degenerate case akin to fetching the latest version in a centralized version control system. But if you do have local changes, Git will automatically merge, and report any conflicts. section{ font-size: 25px; } Ordinarily, a commit has exactly one parent commit , namely, the previous commit. Merging branches together produces a commit with at least two parents. This begs the question: what commit does HEAD~10 really refer to? A commit could have multiple parents, so which one do we follow? section{ font-size: 25px; } It turns out this notation chooses the first parent every time. This is desirable because the current branch becomes the first parent during a merge; frequently you\u2019re only concerned with the changes you made in the current branch, as opposed to changes merged in from other branches. section{ font-size: 25px; } You can refer to a specific parent with a caret. For example, to show the logs from the second parent: git log HEAD^2 section{ font-size: 25px; } You may omit the number for the first parent. For example, to show the differences with the first parent: git diff HEAD^ section{ font-size: 25px; } You can combine this notation with other types. For example: git checkout 1b6d^^2~10 -b ancient starts a new branch \u201cancient\u201d representing the state 10 commits back from the second parent of the first parent of the commit starting with 1b6d. section{ font-size: 25px; }","title":"Merging"},{"location":"week-3-git/ce103-week-3-git/#uninterrupted-workflow","text":"Often in hardware projects, the second step of a plan must await the completion of the first step. A car undergoing repairs might sit idly in a garage until a particular part arrives from the factory. A prototype might wait for a chip to be fabricated before construction can continue. section{ font-size: 25px; } Software projects can be similar. The second part of a new feature may have to wait until the first part has been released and tested. Some projects require your code to be reviewed before accepting it, so you might wait until the first part is approved before starting the second part. section{ font-size: 25px; } Thanks to painless branching and merging, we can bend the rules and work on Part II before Part I is officially ready. Suppose you have committed Part I and sent it for review. Let\u2019s say you\u2019re in the master branch. Then branch off: git checkout -b part2 section{ font-size: 25px; } Next, work on Part II, committing your changes along the way. To err is human, and often you\u2019ll want to go back and fix something in Part I. If you\u2019re lucky, or very good, you can skip these lines. git checkout master # Go back to Part I. fix_problem git commit -a # Commit the fixes. git checkout part2 # Go back to Part II. git merge master # Merge in those fixes. section{ font-size: 25px; } Eventually, Part I is approved: git checkout master # Go back to Part I. submit files # Release to the world! git merge part2 # Merge in Part II. git branch -d part2 # Delete \"part2\" branch. section{ font-size: 25px; } Now you\u2019re in the master branch again, with Part II in the working directory. section{ font-size: 25px; } It\u2019s easy to extend this trick for any number of parts. It\u2019s also easy to branch off retroactively: suppose you belatedly realize you should have created a branch 7 commits ago. Then type: git branch -m master part2 # Rename \"master\" branch to \"part2\". git branch master HEAD~7 # Create new \"master\", 7 commits upstream. section{ font-size: 25px; } The master branch now contains just Part I, and the part2 branch contains the rest. We are in the latter branch; we created master without switching to it, because we want to continue work on part2 . This is unusual. Until now, we\u2019ve been switching to branches immediately after creation, as in: git checkout HEAD~7 -b master # Create a branch, and switch to it. section{ font-size: 25px; }","title":"Uninterrupted Workflow"},{"location":"week-3-git/ce103-week-3-git/#reorganizing-a-medley","text":"Perhaps you like to work on all aspects of a project in the same branch. You want to keep works-in-progress to yourself and want others to see your commits only when they have been neatly organized. Start a couple of branches: git branch sanitized # Create a branch for sanitized commits. git checkout -b medley # Create and switch to a branch to work in. section{ font-size: 25px; } Next, work on anything: fix bugs, add features, add temporary code, and so forth, committing often along the way. Then: git checkout sanitized git cherry-pick medley^^ applies the grandparent of the head commit of the \u201cmedley\u201d branch to the \u201csanitized\u201d branch. With appropriate cherry-picks you can construct a branch that contains only permanent code, and has related commits grouped together. section{ font-size: 25px; }","title":"Reorganizing a Medley"},{"location":"week-3-git/ce103-week-3-git/#managing-branches","text":"List all branches by typing: git branch By default, you start in a branch named \u201cmaster\u201d. Some advocate leaving the \u201cmaster\u201d branch untouched and creating new branches for your own edits. section{ font-size: 25px; } The -d and -m options allow you to delete and move (rename) branches. See git help branch . section{ font-size: 25px; } The \u201cmaster\u201d branch is a useful custom. Others may assume that your repository has a branch with this name, and that it contains the official version of your project. Although you can rename or obliterate the \u201cmaster\u201d branch, you might as well respect this convention. section{ font-size: 25px; }","title":"Managing Branches"},{"location":"week-3-git/ce103-week-3-git/#temporary-branches","text":"After a while you may realize you are creating short-lived branches frequently for similar reasons: every other branch merely serves to save the current state so you can briefly hop back to an older state to fix a high-priority bug or something. section{ font-size: 25px; } It\u2019s analogous to changing the TV channel temporarily to see what else is on. But instead of pushing a couple of buttons, you have to create, check out, merge, and delete temporary branches. Luckily, Git has a shortcut that is as convenient as a TV remote control: git stash This saves the current state in a temporary location (a stash ) and restores the previous state. section{ font-size: 25px; } Your working directory appears exactly as it was before you started editing, and you can fix bugs, pull in upstream changes, and so on. When you want to go back to the stashed state, type: git stash apply # You may need to resolve some conflicts. section{ font-size: 25px; } You can have multiple stashes, and manipulate them in various ways. See git help stash . As you may have guessed, Git maintains branches behind the scenes to perform this magic trick. section{ font-size: 25px; }","title":"Temporary Branches"},{"location":"week-3-git/ce103-week-3-git/#work-how-you-want","text":"You might wonder if branches are worth the bother. After all, clones are almost as fast, and you can switch between them with cd instead of esoteric Git commands. section{ font-size: 25px; } Consider web browsers. Why support multiple tabs as well as multiple windows? Because allowing both accommodates a wide variety of styles. Some users like to keep only one browser window open, and use tabs for multiple webpages. Others might insist on the other extreme: multiple windows with no tabs anywhere. Others still prefer something in between. section{ font-size: 25px; } Branching is like tabs for your working directory, and cloning is like opening a new browser window. These operations are fast and local, so why not experiment to find the combination that best suits you? Git lets you work exactly how you want. section{ font-size: 25px; }","title":"Work How You Want"},{"location":"week-3-git/ce103-week-3-git/#lessons-of-history","text":"A consequence of Git\u2019s distributed nature is that history can be edited easily. But if you tamper with the past, take care: only rewrite that part of history which you alone possess. Just as nations forever argue over who committed what atrocity, if someone else has a clone whose version of history differs to yours, you will have trouble reconciling when your trees interact. Some developers strongly feel history should be immutable, warts and all. Others feel trees should be made presentable before they are unleashed in public. Git accommodates both viewpoints. Like cloning, branching, and merging, rewriting history is simply another power Git gives you. It is up to you to use it wisely. section{ font-size: 25px; }","title":"Lessons of History"},{"location":"week-3-git/ce103-week-3-git/#i-stand-corrected","text":"Did you just commit, but wish you had typed a different message? Then run: git commit --amend to change the last message. Realized you forgot to add a file? Run git add to add it, and then run the above command. -- Want to include a few more edits in that last commit? Then make those edits and run: git commit --amend -a section{ font-size: 25px; }","title":"I Stand Corrected"},{"location":"week-3-git/ce103-week-3-git/#and-then-some","text":"Suppose the previous problem is ten times worse. After a lengthy session you\u2019ve made a bunch of commits. But you\u2019re not quite happy with the way they\u2019re organized, and some of those commit messages could use rewording. Then type: git rebase -i HEAD~10 and the last 10 commits will appear in your favourite $EDITOR. A sample excerpt: pick 5c6eb73 Added repo.or.cz link pick a311a64 Reordered analogies in \"Work How You Want\" pick 100834f Added push target to Makefile section{ font-size: 25px; } Older commits precede newer commits in this list, unlike the log command. Here, 5c6eb73 is the oldest commit, and 100834f is the newest. Then: Remove commits by deleting lines. Like the revert command, but off the record: it will be as if the commit never existed. Reorder commits by reordering lines. Replace pick with: edit to mark a commit for amending. reword to change the log message. squash to merge a commit with the previous one. fixup to merge a commit with the previous one and discard the log message. section{ font-size: 25px; } For example, we might replace the second pick with squash : pick 5c6eb73 Added repo.or.cz link squash a311a64 Reordered analogies in \"Work How You Want\" pick 100834f Added push target to Makefile After we save and quit, Git merges a311a64 into 5c6eb73. Thus squash merges into the next commit up: think \u201csquash up\u201d. section{ font-size: 25px; } Git then combines their log messages and presents them for editing. The command fixup skips this step; the squashed log message is simply discarded. section{ font-size: 25px; } If you marked a commit with edit , Git returns you to the past, to the oldest such commit. You can amend the old commit as described in the previous section, and even create new commits that belong here. Once you\u2019re pleased with the \u201cretcon\u201d, go forward in time by running: git rebase --continue Git replays commits until the next edit , or to the present if none remain. section{ font-size: 25px; } You can also abandon the rebase with: git rebase --abort section{ font-size: 25px; } So commit early and commit often: you can tidy up later with rebase. section{ font-size: 25px; }","title":"\u2026 And Then Some"},{"location":"week-3-git/ce103-week-3-git/#local-changes-last","text":"You\u2019re working on an active project. You make some local commits over time, and then you sync with the official tree with a merge. This cycle repeats itself a few times before you\u2019re ready to push to the central tree. section{ font-size: 25px; } But now the history in your local Git clone is a messy jumble of your changes and the official changes. You\u2019d prefer to see all your changes in one contiguous section, and after all the official changes. section{ font-size: 25px; } This is a job for git rebase as described above. In many cases you can use the --onto flag and avoid interaction. Also see git help rebase for detailed examples of this amazing command. You can split commits. You can even rearrange branches of a tree. Take care: rebase is a powerful command. For complicated rebases, first make a backup with git clone . section{ font-size: 25px; }","title":"Local Changes Last"},{"location":"week-3-git/ce103-week-3-git/#rewriting-history","text":"Occasionally, you need the source control equivalent of airbrushing people out of official photos, erasing them from history in a Stalinesque fashion. For example, suppose we intend to release a project, but it involves a file that should be kept private for some reason. Perhaps I left my credit card number in a text file and accidentally added it to the project. Deleting the file is insufficient, for the file can be accessed from older commits. We must remove the file from all commits: git filter-branch --tree-filter 'rm top/secret/file' HEAD section{ font-size: 25px; } See git help filter-branch , which discusses this example and gives a faster method. In general, filter-branch lets you alter large sections of history with a single command. Afterwards, the .git/refs/original directory describes the state of affairs before the operation. Check the filter-branch command did what you wanted, then delete this directory if you wish to run more filter-branch commands. Lastly, replace clones of your project with your revised version if you want to interact with them later. section{ font-size: 25px; }","title":"Rewriting History"},{"location":"week-3-git/ce103-week-3-git/#making-history","text":"Want to migrate a project to Git? If it\u2019s managed with one of the more well-known systems, then chances are someone has already written a script to export the whole history to Git. section{ font-size: 25px; } Otherwise, look up git fast-import , which reads text input in a specific format to create Git history from scratch. Typically a script using this command is hastily cobbled together and run once, migrating the project in a single shot. section{ font-size: 25px; } As an example, paste the following listing into temporary file, such as /tmp/history : commit refs/heads/master committer Alice <alice@example.com> Thu, 01 Jan 1970 00 :00:00 +0000 data <<EOT Initial commit. EOT M 100644 inline hello.c data <<EOT #include <stdio.h> int main() { printf(\"Hello, world!\\n\"); return 0; } EOT commit refs/heads/master committer Bob <bob@example.com> Tue, 14 Mar 2000 01 :59:26 -0800 data <<EOT Replace printf() with write(). EOT M 100644 inline hello.c data <<EOT #include <unistd.h> int main() { write(1, \"Hello, world!\\n\", 14); return 0; } EOT section{ font-size: 25px; } Then create a Git repository from this temporary file by typing: mkdir project ; cd project ; git init git fast-import --date-format = rfc2822 < /tmp/history section{ font-size: 25px; } You can checkout the latest version of the project with: git checkout master . The git fast-export command converts any repository to the git fast-import format, whose output you can study for writing exporters, and also to transport repositories in a human-readable format. Indeed, these commands can send repositories of text files over text-only channels. section{ font-size: 25px; }","title":"Making History"},{"location":"week-3-git/ce103-week-3-git/#where-did-it-all-go-wrong","text":"You\u2019ve just discovered a broken feature in your program which you know for sure was working a few months ago. Argh! Where did this bug come from? If only you had been testing the feature as you developed. It\u2019s too late for that now. However, provided you\u2019ve been committing often, Git can pinpoint the problem: git bisect start git bisect bad HEAD git bisect good 1b6d section{ font-size: 25px; } Git checks out a state halfway in between. Test the feature, and if it\u2019s still broken: git bisect bad If not, replace \"bad\" with \"good\". Git again transports you to a state halfway between the known good and bad versions, narrowing down the possibilities. section{ font-size: 25px; } After a few iterations, this binary search will lead you to the commit that caused the trouble. Once you\u2019ve finished your investigation, return to your original state by typing: git bisect reset section{ font-size: 25px; } Instead of testing every change by hand, automate the search by running: git bisect run my_script Git uses the return value of the given command, typically a one-off script, to decide whether a change is good or bad: the command should exit with code 0 when good, 125 when the change should be skipped, and anything else between 1 and 127 if it is bad. A negative return value aborts the bisect. section{ font-size: 25px; } You can do much more: the help page explains how to visualize bisects, examine or replay the bisect log, and eliminate known innocent changes for a speedier search. section{ font-size: 25px; }","title":"Where Did It All Go Wrong?"},{"location":"week-3-git/ce103-week-3-git/#who-made-it-all-go-wrong","text":"Like many other version control systems, Git has a blame command: git blame bug.c which annotates every line in the given file showing who last changed it, and when. Unlike many other version control systems, this operation works offline, reading only from local disk. section{ font-size: 25px; }","title":"Who Made It All Go Wrong?"},{"location":"week-3-git/ce103-week-3-git/#multiplayer-git","text":"Initially I used Git on a private project where I was the sole developer. Amongst the commands related to Git\u2019s distributed nature, I needed only pull and clone so could I keep the same project in different places. Later I wanted to publish my code with Git, and include changes from contributors. I had to learn how to manage projects with multiple developers from all over the world. Fortunately, this is Git\u2019s forte, and arguably its raison d\u2019\u00eatre. section{ font-size: 25px; }","title":"Multiplayer Git"},{"location":"week-3-git/ce103-week-3-git/#who-am-i","text":"Every commit has an author name and email, which is shown by git log . By default, Git uses system settings to populate these fields. To set them explicitly, type: git config --global user.name \"John Doe\" git config --global user.email johndoe@example.com Omit the global flag to set these options only for the current repository. section{ font-size: 25px; }","title":"Who Am I?"},{"location":"week-3-git/ce103-week-3-git/#git-over-ssh-http","text":"Suppose you have SSH access to a web server, but Git is not installed. Though less efficient than its native protocol, Git can communicate over HTTP. Download, compile and install Git in your account, and create a repository in your web directory: GIT_DIR = proj.git git init cd proj.git git --bare update-server-info cp hooks/post-update.sample hooks/post-update section{ font-size: 25px; } For older versions of Git, the copy command fails and you should run: chmod a+x hooks/post-update section{ font-size: 25px; } Now you can publish your latest edits via SSH from any clone: git push web.server:/path/to/proj.git master section{ font-size: 25px; } and anybody can get your project with: git clone http://web.server/proj.git section{ font-size: 25px; }","title":"Git Over SSH, HTTP"},{"location":"week-3-git/ce103-week-3-git/#git-over-anything","text":"Want to synchronize repositories without servers, or even a network connection? Need to improvise during an emergency? We\u2019ve seen git fast-export and git fast-import can convert repositories to a single file and back . We could shuttle such files back and forth to transport git repositories over any medium, but a more efficient tool is git bundle . The sender creates a bundle : git bundle create somefile HEAD then transports the bundle, somefile , to the other party somehow: email, thumb drive, an xxd printout and an OCR scanner, reading bits over the phone, smoke signals, etc. section{ font-size: 25px; } The receiver retrieves commits from the bundle by typing: git pull somefile The receiver can even do this from an empty repository. Despite its size, somefile contains the entire original git repository. section{ font-size: 25px; } In larger projects, eliminate waste by bundling only changes the other repository lacks. For example, suppose the commit \u201c1b6d\u2026\u201d is the most recent commit shared by both parties: git bundle create somefile HEAD ^1b6d section{ font-size: 25px; } If done frequently, one could easily forget which commit was last sent. The help page suggests using tags to solve this. Namely, after you send a bundle, type: git tag -f lastbundle HEAD and create new refresher bundles with: git bundle create newbundle HEAD ^lastbundle section{ font-size: 25px; }","title":"Git Over Anything"},{"location":"week-3-git/ce103-week-3-git/#patches-the-global-currency","text":"Patches are text representations of your changes that can be easily understood by computers and humans alike. This gives them universal appeal. You can email a patch to developers no matter what version control system they\u2019re using. As long as your audience can read their email, they can see your edits. Similarly, on your side, all you require is an email account: there\u2019s no need to setup an online Git repository. section{ font-size: 25px; } Recall from the first chapter: git diff 1b6d > my.patch section{ font-size: 25px; } outputs a patch which can be pasted into an email for discussion. In a Git repository, type: git apply < my.patch section{ font-size: 25px; } to apply the patch. In more formal settings, when author names and perhaps signatures should be recorded, generate the corresponding patches past a certain point by typing: git format-patch 1b6d section{ font-size: 25px; } The resulting files can be given to git-send-email , or sent by hand. You can also specify a range of commits: git format-patch 1b6d..HEAD^^ section{ font-size: 25px; } On the receiving end, save an email to a file, then type: git am < email.txt This applies the incoming patch and also creates a commit, including information such as the author. section{ font-size: 25px; } With a browser email client, you may need to click a button to see the email in its raw original form before saving the patch to a file. There are slight differences for mbox-based email clients, but if you use one of these, you\u2019re probably the sort of person who can figure them out easily without reading tutorials! section{ font-size: 25px; }","title":"Patches: The Global Currency"},{"location":"week-3-git/ce103-week-3-git/#sorry-weve-moved","text":"After cloning a repository, running git push or git pull will automatically push to or pull from the original URL. How does Git do this? The secret lies in config options created with the clone. Let\u2019s take a peek: git config --list The remote.origin.url option controls the source URL; \u201corigin\u201d is a nickname given to the source repository. As with the \u201cmaster\u201d branch convention, we may change or delete this nickname but there is usually no reason for doing so. section{ font-size: 25px; } If the original repository moves, we can update the URL via: git config remote.origin.url git://new.url/proj.git The branch.master.merge option specifies the default remote branch in a git pull . During the initial clone, it is set to the current branch of the source repository, so even if the HEAD of the source repository subsequently moves to a different branch, a later pull will faithfully follow the original branch. section{ font-size: 25px; } This option only applies to the repository we first cloned from, which is recorded in the option branch.master.remote . If we pull in from other repositories we must explicitly state which branch we want: git pull git://example.com/other.git master The above explains why some of our earlier push and pull examples had no arguments. section{ font-size: 25px; }","title":"Sorry, We\u2019ve Moved"},{"location":"week-3-git/ce103-week-3-git/#remote-branches","text":"When you clone a repository, you also clone all its branches. You may not have noticed this because Git hides them away: you must ask for them specifically. This prevents branches in the remote repository from interfering with your branches, and also makes Git easier for beginners. section{ font-size: 25px; } List the remote branches with: git branch -r You should see something like: origin/HEAD origin/master origin/experimental These represent branches and the HEAD of the remote repository, and can be used in regular Git commands. For example, suppose you have made many commits, and wish to compare against the last fetched version. section{ font-size: 25px; } You could search through the logs for the appropriate SHA1 hash, but it\u2019s much easier to type: git diff origin/HEAD Or you can see what the \u201cexperimental\u201d branch has been up to: git log origin/experimental section{ font-size: 25px; }","title":"Remote Branches"},{"location":"week-3-git/ce103-week-3-git/#multiple-remotes","text":"Suppose two other developers are working on our project, and we want to keep tabs on both. We can follow more than one repository at a time with: git remote add other git://example.com/some_repo.git git pull other some_branch section{ font-size: 25px; } Now we have merged in a branch from the second repository, and we have easy access to all branches of all repositories: git diff origin/experimental^ other/some_branch~5 But what if we just want to compare their changes without affecting our own work? section{ font-size: 25px; } In other words, we want to examine their branches without having their changes invade our working directory. Then rather than pull, run: git fetch # Fetch from origin, the default. git fetch other # Fetch from the second programmer. This just fetches histories. Although the working directory remains untouched, we can refer to any branch of any repository in a Git command because we now possess a local copy. section{ font-size: 25px; } Recall that behind the scenes, a pull is simply a fetch then merge . Usually we pull because we want to merge the latest commit after a fetch; this situation is a notable exception. section{ font-size: 25px; } See git help remote for how to remove remote repositories, ignore certain branches, and more. section{ font-size: 25px; }","title":"Multiple Remotes"},{"location":"week-3-git/ce103-week-3-git/#preferences","text":"For my projects, I like contributors to prepare repositories from which I can pull. Some Git hosting services let you host your own fork of a project with the click of a button. After I fetch a tree, I run Git commands to navigate and examine the changes, which ideally are well-organized and well-described. I merge my own changes, and perhaps make further edits. Once satisfied, I push to the main repository. Though I infrequently receive contributions, I believe this approach scales well. See this blog post by Linus Torvalds . Staying in the Git world is slightly more convenient than patch files, as it saves me from converting them to Git commits. Furthermore, Git handles details such as recording the author\u2019s name and email address, as well as the time and date, and asks the author to describe their own change. section{ font-size: 25px; }","title":"Preferences"},{"location":"week-3-git/ce103-week-3-git/#git-grandmastery","text":"By now, you should be able to navigate the git help pages and understand almost everything. However, pinpointing the exact command required to solve a given problem can be tedious. Perhaps I can save you some time: below are some recipes I have needed in the past. section{ font-size: 25px; }","title":"Git Grandmastery"},{"location":"week-3-git/ce103-week-3-git/#source-releases","text":"For my projects, Git tracks exactly the files I\u2019d like to archive and release to users. To create a tarball of the source code, I run: git archive --format = tar --prefix = proj-1.2.3/ HEAD section{ font-size: 25px; }","title":"Source Releases"},{"location":"week-3-git/ce103-week-3-git/#commit-what-changed","text":"Telling Git when you\u2019ve added, deleted and renamed files is troublesome for certain projects. Instead, you can type: git add . git add -u Git will look at the files in the current directory and work out the details by itself. Instead of the second add command, run git commit -a if you also intend to commit at this time. See git help ignore for how to specify files that should be ignored. section{ font-size: 25px; } You can perform the above in a single pass with: git ls-files -d -m -o -z | xargs -0 git update-index --add --remove The -z and -0 options prevent ill side-effects from filenames containing strange characters. As this command adds ignored files, you may want to use the -x or -X option. section{ font-size: 25px; }","title":"Commit What Changed"},{"location":"week-3-git/ce103-week-3-git/#my-commit-is-too-big","text":"Have you neglected to commit for too long? Been coding furiously and forgotten about source control until now? Made a series of unrelated changes, because that\u2019s your style? section{ font-size: 25px; } No worries. Run: git add -p For each edit you made, Git will show you the hunk of code that was changed, and ask if it should be part of the next commit. Answer with \"y\" or \"n\". You have other options, such as postponing the decision; type \"?\" to learn more. section{ font-size: 25px; } Once you\u2019re satisfied, type git commit to commit precisely the changes you selected (the staged changes). Make sure you omit the -a option, otherwise Git will commit all the edits. section{ font-size: 25px; } What if you\u2019ve edited many files in many places? Reviewing each change one by one becomes frustratingly mind-numbing. In this case, use git add -i , whose interface is less straightforward, but more flexible. With a few keystrokes, you can stage or unstage several files at a time, or review and select changes in particular files only. Alternatively, run git commit --interactive which automatically commits after you\u2019re done. section{ font-size: 25px; }","title":"My Commit Is Too Big!"},{"location":"week-3-git/ce103-week-3-git/#the-index-gits-staging-area","text":"So far we have avoided Git\u2019s famous index , but we must now confront it to explain the above. The index is a temporary staging area. Git seldom shuttles data directly between your project and its history. Rather, Git first writes data to the index, and then copies the data in the index to its final destination. section{ font-size: 25px; } For example, commit -a is really a two-step process. The first step places a snapshot of the current state of every tracked file into the index. The second step permanently records the snapshot now in the index. Committing without the -a option only performs the second step, and only makes sense after running commands that somehow change the index, such as git add . section{ font-size: 25px; } Usually we can ignore the index and pretend we are reading straight from and writing straight to the history. On this occasion, we want finer control, so we manipulate the index. We place a snapshot of some, but not all, of our changes into the index, and then permanently record this carefully rigged snapshot. section{ font-size: 25px; }","title":"The Index: Git\u2019s Staging Area"},{"location":"week-3-git/ce103-week-3-git/#dont-lose-your-head","text":"The HEAD tag is like a cursor that normally points at the latest commit, advancing with each new commit. Some Git commands let you move it. For example: git reset HEAD~3 will move the HEAD three commits back. Thus all Git commands now act as if you hadn\u2019t made those last three commits, while your files remain in the present. See the help page for some applications. section{ font-size: 25px; } But how can you go back to the future? The past commits know nothing of the future. If you have the SHA1 of the original HEAD then: git reset 1b6d -- But suppose you never took it down? Don\u2019t worry: for commands like these, Git saves the original HEAD as a tag called ORIG_HEAD, and you can return safe and sound with: git reset ORIG_HEAD section{ font-size: 25px; }","title":"Don\u2019t Lose Your HEAD"},{"location":"week-3-git/ce103-week-3-git/#head-hunting","text":"Perhaps ORIG_HEAD isn\u2019t enough. Perhaps you\u2019ve just realized you made a monumental mistake and you need to go back to an ancient commit in a long-forgotten branch. section{ font-size: 25px; } By default, Git keeps a commit for at least two weeks, even if you ordered Git to destroy the branch containing it. The trouble is finding the appropriate hash. You could look at all the hash values in .git/objects and use trial and error to find the one you want. But there\u2019s a much easier way. section{ font-size: 25px; } Git records every hash of a commit it computes in .git/logs . The subdirectory refs contains the history of all activity on all branches, while the file HEAD shows every hash value it has ever taken. The latter can be used to find hashes of commits on branches that have been accidentally lopped off. The reflog command provides a friendly interface to these log files. Try git reflog section{ font-size: 25px; } Instead of cutting and pasting hashes from the reflog, try: git checkout \"@{10 minutes ago}\" section{ font-size: 25px; } Or checkout the 5 th -last visited commit via: git checkout \"@{5}\" section{ font-size: 25px; } See the \u201cSpecifying Revisions\u201d section of git help rev-parse for more. You may wish to configure a longer grace period for doomed commits. For example: git config gc.pruneexpire \"30 days\" means a deleted commit will only be permanently lost once 30 days have passed and git gc is run. -- You may also wish to disable automatic invocations of git gc : git config gc.auto 0 in which case commits will only be deleted when you run git gc manually. section{ font-size: 25px; }","title":"HEAD-hunting"},{"location":"week-3-git/ce103-week-3-git/#building-on-git","text":"In true UNIX fashion, Git\u2019s design allows it to be easily used as a low-level component of other programs, such as GUI and web interfaces, alternative command-line interfaces, patch managements tools, importing and conversion tools and so on. In fact, some Git commands are themselves scripts standing on the shoulders of giants. With a little tinkering, you can customize Git to suit your preferences. section{ font-size: 25px; } One easy trick is to use built-in Git aliases to shorten your most frequently used commands: git config --global alias.co checkout git config --global --get-regexp alias # display current aliases alias.co checkout git co foo # same as 'git checkout foo' section{ font-size: 25px; } Another is to print the current branch in the prompt, or window title. Invoking git symbolic-ref HEAD section{ font-size: 25px; } shows the current branch name. In practice, you most likely want to remove the \"refs/heads/\" and ignore errors: git symbolic-ref HEAD 2 > /dev/null | cut -b 12 - The contrib subdirectory is a treasure trove of tools built on Git. In time, some of them may be promoted to official commands. On Debian and Ubuntu, this directory lives at /usr/share/doc/git-core/contrib . section{ font-size: 25px; } One popular resident is workdir/git-new-workdir . Via clever symlinking, this script creates a new working directory whose history is shared with the original repository: git-new-workdir an/existing/repo new/directory The new directory and the files within can be thought of as a clone, except since the history is shared, the two trees automatically stay in sync. There\u2019s no need to merge, push, or pull. section{ font-size: 25px; }","title":"Building On Git"},{"location":"week-3-git/ce103-week-3-git/#daring-stunts","text":"These days, Git makes it difficult for the user to accidentally destroy data. But if you know what you are doing, you can override safeguards for common commands. section{ font-size: 25px; } Checkout : Uncommitted changes cause checkout to fail. To destroy your changes, and checkout a given commit anyway, use the force flag: git checkout -f HEAD^ section{ font-size: 25px; } On the other hand, if you specify particular paths for checkout, then there are no safety checks. The supplied paths are quietly overwritten. Take care if you use checkout in this manner. section{ font-size: 25px; } Reset : Reset also fails in the presence of uncommitted changes. To force it through, run: git reset --hard 1b6d section{ font-size: 25px; } Branch : Deleting branches fails if this causes changes to be lost. To force a deletion, type: git branch -D dead_branch # instead of -d section{ font-size: 25px; } Similarly, attempting to overwrite a branch via a move fails if data loss would ensue. To force a branch move, type: git branch -M source target # instead of -m Unlike checkout and reset, these two commands defer data destruction. The changes are still stored in the .git subdirectory, and can be retrieved by recovering the appropriate hash from .git/logs (see \"HEAD-hunting\" above). By default, they will be kept for at least two weeks. section{ font-size: 25px; } Clean : Some git commands refuse to proceed because they\u2019re worried about clobbering untracked files. If you\u2019re certain that all untracked files and directories are expendable, then delete them mercilessly with: git clean -f -d Next time, that pesky command will work! section{ font-size: 25px; }","title":"Daring Stunts"},{"location":"week-3-git/ce103-week-3-git/#preventing-bad-commits","text":"Stupid mistakes pollute my repositories. Most frightening are missing files due to a forgotten git add . Lesser transgressions are trailing whitespace and unresolved merge conflicts: though harmless, I wish these never appeared on the public record. If only I had bought idiot insurance by using a hook to alert me about these problems: cd .git/hooks cp pre-commit.sample pre-commit # Older Git versions: chmod +x pre-commit section{ font-size: 25px; } Now Git aborts a commit if useless whitespace or unresolved merge conflicts are detected. section{ font-size: 25px; } For this guide, I eventually added the following to the beginning of the pre-commit hook to guard against absent-mindedness: if git ls-files -o | grep '\\.txt$' ; then echo FAIL! Untracked .txt files. exit 1 fi section{ font-size: 25px; } Several git operations support hooks; see git help hooks . We activated the sample post-update hook earlier when discussing Git over HTTP. This runs whenever the head moves. The sample post-update script updates files Git needs for communication over Git-agnostic transports such as HTTP. section{ font-size: 25px; }","title":"Preventing Bad Commits"},{"location":"week-3-git/ce103-week-3-git/#secrets-revealed","text":"We take a peek under the hood and explain how Git performs its miracles. I will skimp over details. For in-depth descriptions refer to the user manual . section{ font-size: 25px; }","title":"Secrets Revealed"},{"location":"week-3-git/ce103-week-3-git/#invisibility","text":"How can Git be so unobtrusive? Aside from occasional commits and merges, you can work as if you were unaware that version control exists. That is, until you need it, and that\u2019s when you\u2019re glad Git was watching over you the whole time. section{ font-size: 25px; } Other version control systems force you to constantly struggle with red tape and bureaucracy. Permissions of files may be read-only unless you explicitly tell a central server which files you intend to edit. The most basic commands may slow to a crawl as the number of users increases. Work grinds to a halt when the network or the central server goes down. section{ font-size: 25px; } In contrast, Git simply keeps the history of your project in the .git directory in your working directory. This is your own copy of the history, so you can stay offline until you want to communicate with others. You have total control over the fate of your files because Git can easily recreate a saved state from .git at any time. section{ font-size: 25px; }","title":"Invisibility"},{"location":"week-3-git/ce103-week-3-git/#integrity","text":"Most people associate cryptography with keeping information secret, but another equally important goal is keeping information safe. Proper use of cryptographic hash functions can prevent accidental or malicious data corruption. section{ font-size: 25px; } A SHA1 hash can be thought of as a unique 160-bit ID number for every string of bytes you\u2019ll encounter in your life. Actually more than that: every string of bytes that any human will ever use over many lifetimes. section{ font-size: 25px; } As a SHA1 hash is itself a string of bytes, we can hash strings of bytes containing other hashes. This simple observation is surprisingly useful: look up hash chains . We\u2019ll later see how Git uses it to efficiently guarantee data integrity. section{ font-size: 25px; } Briefly, Git keeps your data in the .git/objects subdirectory, where instead of normal filenames, you\u2019ll find only IDs. By using IDs as filenames, as well as a few lockfiles and timestamping tricks, Git transforms any humble filesystem into an efficient and robust database. section{ font-size: 25px; }","title":"Integrity"},{"location":"week-3-git/ce103-week-3-git/#intelligence","text":"How does Git know you renamed a file, even though you never mentioned the fact explicitly? Sure, you may have run git mv , but that is exactly the same as a git rm followed by a git add . section{ font-size: 25px; } Git heuristically ferrets out renames and copies between successive versions. In fact, it can detect chunks of code being moved or copied around between files! Though it cannot cover all cases, it does a decent job, and this feature is always improving. If it fails to work for you, try options enabling more expensive copy detection, and consider upgrading. section{ font-size: 25px; }","title":"Intelligence"},{"location":"week-3-git/ce103-week-3-git/#indexing","text":"For every tracked file, Git records information such as its size, creation time and last modification time in a file known as the index . To determine whether a file has changed, Git compares its current stats with those cached in the index. If they match, then Git can skip reading the file again. section{ font-size: 25px; } Since stat calls are considerably faster than file reads, if you only edit a few files, Git can update its state in almost no time. section{ font-size: 25px; } We stated earlier that the index is a staging area. Why is a bunch of file stats a staging area? Because the add command puts files into Git\u2019s database and updates these stats, while the commit command, without options, creates a commit based only on these stats and the files already in the database. section{ font-size: 25px; }","title":"Indexing"},{"location":"week-3-git/ce103-week-3-git/#gits-origins","text":"This Linux Kernel Mailing List post describes the chain of events that led to Git. The entire thread is a fascinating archaeological site for Git historians. section{ font-size: 25px; }","title":"Git\u2019s Origins"},{"location":"week-3-git/ce103-week-3-git/#the-object-database","text":"Every version of your data is kept in the object database , which lives in the subdirectory .git/objects ; the other residents of .git/ hold lesser data: the index, branch names, tags, configuration options, logs, the current location of the head commit, and so on. The object database is elementary yet elegant, and the source of Git\u2019s power. Each file within .git/objects is an object . There are 3 kinds of objects that concern us: blob objects, tree objects, and commit objects. section{ font-size: 25px; }","title":"The Object Database"},{"location":"week-3-git/ce103-week-3-git/#blobs","text":"First, a magic trick. Pick a filename, any filename. In an empty directory: echo sweet > YOUR_FILENAME git init git add . find .git/objects -type f You\u2019ll see .git/objects/aa/823728ea7d592acc69b36875a482cdf3fd5c8d . section{ font-size: 25px; } How do I know this without knowing the filename? It\u2019s because the SHA1 hash of: \"blob\" SP \"6\" NUL \"sweet\" LF is aa823728ea7d592acc69b36875a482cdf3fd5c8d , where SP is a space, NUL is a zero byte and LF is a linefeed. You can verify this by typing: printf \"blob 6\\000sweet\\n\" | sha1sum section{ font-size: 25px; } Git is content-addressable : files are not stored according to their filename, but rather by the hash of the data they contain, in a file we call a blob object . We can think of the hash as a unique ID for a file\u2019s contents, so in a sense we are addressing files by their content. The initial blob 6 is merely a header consisting of the object type and its length in bytes; it simplifies internal bookkeeping. section{ font-size: 25px; } Thus I could easily predict what you would see. The file\u2019s name is irrelevant: only the data inside is used to construct the blob object. section{ font-size: 25px; } You may be wondering what happens to identical files. Try adding copies of your file, with any filenames whatsoever. The contents of .git/objects stay the same no matter how many you add. Git only stores the data once. section{ font-size: 25px; } By the way, the files within .git/objects are compressed with zlib so you should not stare at them directly. Filter them through zpipe -d , or type: git cat-file -p aa823728ea7d592acc69b36875a482cdf3fd5c8d which pretty-prints the given object. section{ font-size: 25px; }","title":"Blobs"},{"location":"week-3-git/ce103-week-3-git/#trees","text":"But where are the filenames? They must be stored somewhere at some stage. Git gets around to the filenames during a commit: git commit # Type some message. find .git/objects -type f section{ font-size: 25px; } You should now see 3 objects. This time I cannot tell you what the 2 new files are, as it partly depends on the filename you picked. We\u2019ll proceed assuming you chose \u201crose\u201d. If you didn\u2019t, you can rewrite history to make it look like you did: git filter-branch --tree-filter 'mv YOUR_FILENAME rose' find .git/objects -type f section{ font-size: 25px; } Now you should see the file .git/objects/05/b217bb859794d08bb9e4f7f04cbda4b207fbe9 , because this is the SHA1 hash of its contents: \"tree\" SP \"32\" NUL \"100644 rose\" NUL 0xaa823728ea7d592acc69b36875a482cdf3fd5c8d section{ font-size: 25px; } Check this file does indeed contain the above by typing: echo 05b217bb859794d08bb9e4f7f04cbda4b207fbe9 | git cat-file --batch With zpipe, it\u2019s easy to verify the hash: zpipe -d < .git/objects/05/b217bb859794d08bb9e4f7f04cbda4b207fbe9 | sha1sum Hash verification is trickier via cat-file because its output contains more than the raw uncompressed object file. section{ font-size: 25px; } This file is a tree object: a list of tuples consisting of a file type, a filename, and a hash. In our example, the file type is 100644, which means \u2018rose is a normal file, and the hash is the blob object that contains the contents of rose\u2019. Other possible file types are executables, symlinks or directories. In the last case, the hash points to a tree object. section{ font-size: 25px; } If you ran filter-branch, you\u2019ll have old objects you no longer need. Although they will be jettisoned automatically once the grace period expires, we\u2019ll delete them now to make our toy example easier to follow: rm -r .git/refs/original git reflog expire --expire = now --all git prune section{ font-size: 25px; } For real projects you should typically avoid commands like this, as you are destroying backups. If you want a clean repository, it is usually best to make a fresh clone. Also, take care when directly manipulating .git : what if a Git command is running at the same time, or a sudden power outage occurs? In general, refs should be deleted with git update-ref -d , though usually it\u2019s safe to remove refs/original by hand. section{ font-size: 25px; }","title":"Trees"},{"location":"week-3-git/ce103-week-3-git/#commits","text":"We\u2019ve explained 2 of the 3 objects. The third is a commit object. Its contents depend on the commit message as well as the date and time it was created. To match what we have here, we\u2019ll have to tweak it a little: git commit --amend -m Shakespeare # Change the commit message. git filter-branch --env-filter 'export GIT_AUTHOR_DATE=\"Fri 13 Feb 2009 15:31:30 -0800\" GIT_AUTHOR_NAME=\"Alice\" GIT_AUTHOR_EMAIL=\"alice@example.com\" GIT_COMMITTER_DATE=\"Fri, 13 Feb 2009 15:31:30 -0800\" GIT_COMMITTER_NAME=\"Bob\" GIT_COMMITTER_EMAIL=\"bob@example.com\"' # Rig timestamps and authors. find .git/objects -type f section{ font-size: 25px; } You should now see .git/objects/49/993fe130c4b3bf24857a15d7969c396b7bc187 which is the SHA1 hash of its contents: \"commit 158\" NUL \"tree 05b217bb859794d08bb9e4f7f04cbda4b207fbe9\" LF \"author Alice <alice@example.com> 1234567890 -0800\" LF \"committer Bob <bob@example.com> 1234567890 -0800\" LF LF \"Shakespeare\" LF section{ font-size: 25px; } As before, you can run zpipe or cat-file to see for yourself. This is the first commit, so there are no parent commits, but later commits will always contain at least one line identifying a parent commit. section{ font-size: 25px; }","title":"Commits"},{"location":"week-3-git/ce103-week-3-git/#indistinguishable-from-magic","text":"Git\u2019s secrets seem too simple. It looks like you could mix together a few shell scripts and add a dash of C code to cook it up in a matter of hours: a melange of basic filesystem operations and SHA1 hashing, garnished with lock files and fsyncs for robustness. In fact, this accurately describes the earliest versions of Git. Nonetheless, apart from ingenious packing tricks to save space, and ingenious indexing tricks to save time, we now know how Git deftly changes a filesystem into a database perfect for version control. section{ font-size: 25px; } For example, if any file within the object database is corrupted by a disk error, then its hash will no longer match, alerting us to the problem. By hashing hashes of other objects, we maintain integrity at all levels. Commits are atomic, that is, a commit can never only partially record changes: we can only compute the hash of a commit and store it in the database after we already have stored all relevant trees, blobs and parent commits. The object database is immune to unexpected interruptions such as power outages. section{ font-size: 25px; } We defeat even the most devious adversaries. Suppose somebody attempts to stealthily modify the contents of a file in an ancient version of a project. To keep the object database looking healthy, they must also change the hash of the corresponding blob object since it\u2019s now a different string of bytes. section{ font-size: 25px; } This means they\u2019ll have to change the hash of any tree object referencing the file, and in turn change the hash of all commit objects involving such a tree, in addition to the hashes of all the descendants of these commits. This implies the hash of the official head differs to that of the bad repository. section{ font-size: 25px; } By following the trail of mismatching hashes we can pinpoint the mutilated file, as well as the commit where it was first corrupted. section{ font-size: 25px; } In short, so long as the 20 bytes representing the last commit are safe, it\u2019s impossible to tamper with a Git repository. section{ font-size: 25px; } What about Git\u2019s famous features? Branching? Merging? Tags? Mere details. The current head is kept in the file .git/HEAD , which contains a hash of a commit object. The hash gets updated during a commit as well as many other commands. Branches are almost the same: they are files in .git/refs/heads . Tags too: they live in .git/refs/tags but they are updated by a different set of commands. section{ font-size: 25px; }","title":"Indistinguishable From Magic"},{"location":"week-3-git/ce103-week-3-git/#git-shortcomings","text":"There are some Git issues I\u2019ve swept under the carpet. Some can be handled easily with scripts and hooks, some require reorganizing or redefining the project, and for the few remaining annoyances, one will just have to wait. Or better yet, pitch in and help! section{ font-size: 25px; }","title":"Git Shortcomings"},{"location":"week-3-git/ce103-week-3-git/#sha1-weaknesses","text":"As time passes, cryptographers discover more and more SHA1 weaknesses. Already, finding hash collisions is feasible for well-funded organizations. Within years, perhaps even a typical PC will have enough computing power to silently corrupt a Git repository. Hopefully Git will migrate to a better hash function before further research destroys SHA1. section{ font-size: 25px; }","title":"SHA1 Weaknesses"},{"location":"week-3-git/ce103-week-3-git/#unrelated-files","text":"If your project is very large and contains many unrelated files that are constantly being changed, Git may be disadvantaged more than other systems because single files are not tracked. Git tracks changes to the whole project, which is usually beneficial. A solution is to break up your project into pieces, each consisting of related files. Use git submodule if you still want to keep everything in a single repository. section{ font-size: 25px; }","title":"Unrelated Files"},{"location":"week-3-git/ce103-week-3-git/#whos-editing-what","text":"Some version control systems force you to explicitly mark a file in some way before editing. While this is especially annoying when this involves talking to a central server, it does have two benefits: Diffs are quick because only the marked files need be examined. One can discover who else is working on the file by asking the central server who has marked it for editing. With appropriate scripting, you can achieve the same with Git. This requires cooperation from the programmer, who should execute particular scripts when editing a file. section{ font-size: 25px; }","title":"Who\u2019s Editing What?"},{"location":"week-3-git/ce103-week-3-git/#file-history","text":"Since Git records project-wide changes, reconstructing the history of a single file requires more work than in version control systems that track individual files. The penalty is typically slight, and well worth having as other operations are incredibly efficient. For example, git checkout is faster than cp -a , and project-wide deltas compress better than collections of file-based deltas. section{ font-size: 25px; }","title":"File History"},{"location":"week-3-git/ce103-week-3-git/#initial-clone","text":"Creating a clone is more expensive than checking out code in other version control systems when there is a lengthy history. The initial cost is worth paying in the long run, as most future operations will then be fast and offline. However, in some situations, it may be preferable to create a shallow clone with the --depth option. This is much faster, but the resulting clone has reduced functionality. section{ font-size: 25px; }","title":"Initial Clone"},{"location":"week-3-git/ce103-week-3-git/#volatile-projects","text":"Git was written to be fast with respect to the size of the changes. Humans make small edits from version to version. A one-liner bugfix here, a new feature there, emended comments, and so forth. But if your files are radically different in successive revisions, then on each commit, your history necessarily grows by the size of your whole project. section{ font-size: 25px; } There is nothing any version control system can do about this, but standard Git users will suffer more since normally histories are cloned. section{ font-size: 25px; } The reasons why the changes are so great should be examined. Perhaps file formats should be changed. Minor edits should only cause minor changes to at most a few files. section{ font-size: 25px; } Or perhaps a database or backup/archival solution is what is actually being sought, not a version control system. For example, version control may be ill-suited for managing photos periodically taken from a webcam. section{ font-size: 25px; } If the files really must be constantly morphing and they really must be versioned, a possibility is to use Git in a centralized fashion. One can create shallow clones, which checks out little or no history of the project. Of course, many Git tools will be unavailable, and fixes must be submitted as patches. This is probably fine as it\u2019s unclear why anyone would want the history of wildly unstable files. section{ font-size: 25px; } Another example is a project depending on firmware, which takes the form of a huge binary file. The history of the firmware is uninteresting to users, and updates compress poorly, so firmware revisions would unnecessarily blow up the size of the repository. section{ font-size: 25px; } In this case, the source code should be stored in a Git repository, and the binary file should be kept separately. To make life easier, one could distribute a script that uses Git to clone the code, and rsync or a Git shallow clone for the firmware. section{ font-size: 25px; }","title":"Volatile Projects"},{"location":"week-3-git/ce103-week-3-git/#global-counter","text":"Some centralized version control systems maintain a positive integer that increases when a new commit is accepted. Git refers to changes by their hash, which is better in many circumstances. section{ font-size: 25px; } But some people like having this integer around. Luckily, it\u2019s easy to write scripts so that with every update, the central Git repository increments an integer, perhaps in a tag, and associates it with the hash of the latest commit. section{ font-size: 25px; } Every clone could maintain such a counter, but this would probably be useless, since only the central repository and its counter matters to everyone. section{ font-size: 25px; }","title":"Global Counter"},{"location":"week-3-git/ce103-week-3-git/#empty-subdirectories","text":"Empty subdirectories cannot be tracked. Create dummy files to work around this problem. section{ font-size: 25px; } The current implementation of Git, rather than its design, is to blame for this drawback. With luck, once Git gains more traction, more users will clamour for this feature and it will be implemented. section{ font-size: 25px; }","title":"Empty Subdirectories"},{"location":"week-3-git/ce103-week-3-git/#initial-commit","text":"A stereotypical computer scientist counts from 0, rather than 1. Unfortunately, with respect to commits, git does not adhere to this convention. Many commands are unfriendly before the initial commit. Additionally, some corner cases must be handled specially, such as rebasing a branch with a different initial commit. section{ font-size: 25px; } Git would benefit from defining the zero commit: as soon as a repository is constructed, HEAD would be set to the string consisting of 20 zero bytes. This special commit represents an empty tree, with no parent, at some time predating all Git repositories. section{ font-size: 25px; } Then running git log, for example, would inform the user that no commits have been made yet, instead of exiting with a fatal error. Similarly for other tools. section{ font-size: 25px; } Every initial commit is implicitly a descendant of this zero commit. section{ font-size: 25px; } However there are some problem cases unfortunately. If several branches with different initial commits are merged together, then rebasing the result requires substantial manual intervention. section{ font-size: 25px; }","title":"Initial Commit"},{"location":"week-3-git/ce103-week-3-git/#interface-quirks","text":"For commits A and B, the meaning of the expressions \"A..B\" and \"A\u2026B\" depends on whether the command expects two endpoints or a range. See git help diff and git help rev-parse . section{ font-size: 25px; }","title":"Interface Quirks"},{"location":"week-3-git/ce103-week-3-git/#references-1","text":"Source Code Management | Atlassian Git Tutorial . What is Source Code Management or Version Control ? - The Linux Juggernaut https://www.edureka.co/blog/how-to-use-github/ https://www.edureka.co/blog/git-tutorial/ https://www.edureka.co/blog/install-git/ section{ font-size: 25px; }","title":"References (1)"},{"location":"week-3-git/ce103-week-3-git/#references-2","text":"git - the simple guide - no deep shit! GitHub - rogerdudler/git-guide: git - the simple guide https://dev.to/lydiahallie/cs-visualized-useful-git-commands-37p1#merge How to write a good commit message - DEV Community https://blog.xebialabs.com/2016/06/14/periodic-table-devops-tools-v-2/ section{ font-size: 25px; }","title":"References (2)"},{"location":"week-3-git/ce103-week-3-git/#references-3","text":"https://harness.io/2018/01/devops-tools-lifecycle-mesh-2018/ https://medium.com/swlh/how-to-become-an-devops-engineer-in-2020-80b8740d5a52 https://www.lucidchart.com/blog/devops-process-flow https://www.researchgate.net/publication/262450962_Rugby_An_Agile_Process_Model_Based_on_Continuous_Delivery section{ font-size: 25px; }","title":"References (3)"},{"location":"week-3-git/ce103-week-3-git/#references-4","text":"git - the simple guide - no deep shit! Git Tutorial | Commands And Operations In Git | Edureka How to write a good commit message - DEV Community An Introduction to Git and GitHub by Brian Yu - YouTube section{ font-size: 25px; }","title":"References (4)"},{"location":"week-3-git/ce103-week-3-git/#references-5","text":"https://education.github.com/git-cheat-sheet-education.pdf NDP Software :: Git Cheatsheet ; Learn Git Branching https://guides.github.com/introduction/git-handbook/ section{ font-size: 25px; } \\[ End-Of-Week-3 \\]","title":"References (5)"},{"location":"week-4-test/ce103-week-4-test/","text":"CE103 Algorithms and Programming I \u00b6 Week-4 \u00b6 Introduction to Code Reusability and Automated Testing \u00b6 Download DOC , SLIDE , PPTX section{ font-size: 25px; } Outline \u00b6 Introduction to Code Reusability and Automated Testing Shared Library Development C C++ C# Java Unit Testing C C++ C# Java Continues Integration Platforms section{ font-size: 25px; } Introduction to Code Reusability and Automated Testing \u00b6 During this course, we will use entry-level shared library development and their tests and test automation. Also, we will see TDD(Test Driven Development) approach. section{ font-size: 25px; } Selected Development Environment \u00b6 During this course, we will use Windows OS, Eclipse and Visual Studio Community Edition environments for examples. section{ font-size: 25px; } Example Content \u00b6 Each example will include two function \" Hello <name> \" printing function with name sayHelloTo(name) and sum of two variable function for basic, sum = sum(a,b) . This sum function will add a to b and return the result to the sum variable. We will locate them in the library and use them from a console application, also we will create unit tests for testing their functionalities and return variables section{ font-size: 30px; } Shared Library Development \u00b6 C Programming (Static Library) \u00b6 Visual Studio Community Edition \u00b6 section{ font-size: 25px; } Shared Library Development - (VS C Static Library)-1 \u00b6 In this sample, we will create a c-lib-sample project that contains a library, executable, unit tests and unit test runners. First of all, you install Visual Studio Community Edition from the website Visual Studio 2019 Community Edition - Son \u00dccretsiz S\u00fcr\u00fcm\u00fc \u0130ndir section{ font-size: 25px; } Shared Library Development - (VS C Static Library)-2 \u00b6 Open visual studio community edition and select create a new project section{ font-size: 25px; } Shared Library Development - (VS C Static Library)-3 \u00b6 Select create a new project section{ font-size: 25px; } Shared Library Development - (VS C Static Library)-4 \u00b6 Select C++ static library from the project list section{ font-size: 25px; } Shared Library Development - (VS C Static Library)-5 \u00b6 Give static library project name section{ font-size: 25px; } Shared Library Development - (VS C Static Library)-6 \u00b6 Default configuration come with C++ project types and setting section{ font-size: 25px; } Shared Library Development - (VS C Static Library)-7 \u00b6 In the c-sample-lib.cpp you will sample function void fncsamplelib (){ } section{ font-size: 25px; } Shared Library Development - (VS C Static Library)-8 \u00b6 Delete pch.h and pch.c files. Also disable use precompiled header settings from configurations and change to \"Not Using Precomplied Headers\", also you can delete precomplied Header File. section{ font-size: 13px; } Shared Library Development - (VS C Static Library)-9 \u00b6 Customize library header name and update framework.h to samplelib.h Insert your functions inside the c-sample-lib.c and update header files also. // c-sample-lib.cpp : Defines the functions for the static library. // #include \"samplelib.h\" #include \"stdio.h\" /// <summary> /// /// </summary> /// <param name=\"name\"></param> void sayHelloTo ( char * name ){ if ( name != NULL ){ printf ( \"Hello %s \\n \" , name ); } else { printf ( \"Hello There \\n \" ); } } /// <summary> /// /// </summary> /// <param name=\"a\"></param> /// <param name=\"b\"></param> /// <returns></returns> int sum ( int a , int b ){ int c = 0 ; c = a + b ; return c ; } section{ font-size: 25px; } Shared Library Development - (VS C Static Library)-10 \u00b6 Also, update samplelib.h as follows. #pragma once #define WIN32_LEAN_AND_MEAN // Exclude rarely-used stuff from Windows headers void sayHelloTo ( char * name ); int sum ( int a , int b ); section{ font-size: 25px; } Shared Library Development - (VS C Static Library)-11 \u00b6 If you check the configuration you will see that for C compiler we are using Microsoft Environment and Toolkits section{ font-size: 25px; } Shared Library Development - (VS C Static Library)-12 \u00b6 Now we can compile our library section{ font-size: 25px; } Shared Library Development - (VS C Static Library)-13 \u00b6 You can follow operation from the output window section{ font-size: 25px; } Shared Library Development - (VS C Static Library)-14 \u00b6 In the debug folder, we will see our output section{ font-size: 25px; } Shared Library Development - (VS C Static Library)-15 \u00b6 Now we will add a console application c-sample-app and use our library section{ font-size: 25px; } Shared Library Development - (VS C Static Library)-16 \u00b6 select C++ Windows Console Application from list section{ font-size: 25px; } Shared Library Development - (VS C Static Library)-17 \u00b6 C++ Console Application Selection will generate a C++ console project we can change extension to C to compile our application as C application. we will convert c-sample-app.c to following code #include <stdio.h> /// <summary> /// /// </summary> /// <returns></returns> int main () { printf ( \"Hello World! \\n \" ); } section{ font-size: 22px; } Shared Library Development - (VS C Static Library)-18 \u00b6 after conversion set c-sample-app as startup project and build it this will create c-sample-app.exe in the same folder with c-sample-lib.lib library if we run the application we will see only \"Hello World\" section{ font-size: 22px; } Shared Library Development - (VS C Static Library)-19 \u00b6 now we will see two options to add a library as references in our application and use its functions. section{ font-size: 22px; } Shared Library Development - (VS C Static Library)-20 \u00b6 First option right click references for c-sample-app and add current library as reference section{ font-size: 22px; } Shared Library Development - (VS C Static Library)-21 \u00b6 Select Add Reference section{ font-size: 22px; } Shared Library Development - (VS C Static Library)-22 \u00b6 Browse for solution and select c-sample-lib section{ font-size: 22px; } Shared Library Development - (VS C Static Library)-23 \u00b6 You can check added reference from references section section{ font-size: 22px; } Shared Library Development - (VS C Static Library)-24 \u00b6 Now we can include required headers from c-sample-lib folder and use it. We can include required header with relative path as follow or with configuration #include <stdio.h> #include \"..\\c-sample-lib\\samplelib.h\" /// <summary> /// /// </summary> /// <returns></returns> int main () { printf ( \"Hello World! \\n \" ); } section{ font-size: 22px; } Shared Library Development - (VS C Static Library)-25 \u00b6 we can build our c-sample-app section{ font-size: 22px; } Shared Library Development - (VS C Static Library)-26 \u00b6 Also we can only write header name #include <samplelib.h> section{ font-size: 22px; } Shared Library Development - (VS C Static Library)-27 \u00b6 For this option, we need to configure include directories section{ font-size: 22px; } Shared Library Development - (VS C Static Library)-28 \u00b6 select c-sample-lib header file location browse for folder section{ font-size: 22px; } Shared Library Development - (VS C Static Library)-29 \u00b6 your full path will be added to your configuration section{ font-size: 22px; } Shared Library Development - (VS C Static Library)-30 \u00b6 if you add header file paths to your configuration you can use header files by name in your source code #include <stdio.h> #include <samplelib.h> /// <summary> /// /// </summary> /// <returns></returns> int main () { printf ( \"Hello World! \\n \" ); } section{ font-size: 22px; } Shared Library Development - (VS C Static Library)-31 \u00b6 we can compile the following we don't have problems but here we need to configure relative paths for configuration open include library settings and update with relative path ..\\c-sample-lib section{ font-size: 22px; } Shared Library Development - (VS C Static Library)-32 \u00b6 now we have portable source code configuration. we can call our functions and then we can update header and library folder configurations. #include <stdio.h> #include <samplelib.h> /// <summary> /// /// </summary> /// <returns></returns> int main () { int result = 0 ; //printf(\"Hello World!\\n\"); result = sum ( 5 , 4 ); sayHelloTo ( \"Computer\" ); printf ( \"Result is %d \\n \" , result ); printf ( \"Press any key to continue... \\n \" ); getchar (); return 0 ; } section{ font-size: 22px; } Shared Library Development - (VS C Static Library)-33 \u00b6 when you run you will see the following outputs, which mean we called library functions. section{ font-size: 22px; } Shared Library Development - (VS C Static Library)-34 \u00b6 A static library is a code-sharing approach if you want to share your source code with your customers then you can share static libraries and header files. In another case you can use a precompiled static library with you or this library can be part of any installation then if there is an installed app and static libraries are placed on the system folder or any different location then you can use configuration files to set library path and included header paths section{ font-size: 22px; } Shared Library Development - (VS C Static Library)-35 \u00b6 Now we can remove the project from c-sample-app references but we will set library file in configuration Before this copy static library and header files to a folder like that DebugStaticLibDeployment Set C/C++ -> General -> Additional Include Directories There is a bug in configurations and relative path not finding headers so for this reason we will set full path but this is not a good practice for team working section{ font-size: 22px; } Shared Library Development - (VS C Static Library)-36 \u00b6 Not Working Solution .. \\ c - sample - lib \\ DebugStaticLibDeployment section{ font-size: 22px; } Shared Library Development - (VS C Static Library)-37 \u00b6 Working Solution E : \\ ... \\ c - lib - sample \\ c - sample - lib \\ DebugStaticLibDeployment section{ font-size: 22px; } Shared Library Development - (VS C Static Library)-38 \u00b6 Now we will set library folder that our static library placed we will set VC++ Directories -> Library Directories Here is the same issue if we use relative path it doesn't work we need to set full path for library folder section{ font-size: 22px; } Shared Library Development - (VS C Static Library)-39 \u00b6 Working Solution E : \\ ... \\ c - lib - sample \\ c - sample - lib \\ DebugStaticLibDeployment section{ font-size: 22px; } Shared Library Development - (VS C Static Library)-40 \u00b6 section{ font-size: 22px; } Shared Library Development - (VS C Static Library)-41 \u00b6 Not Working .. \\ c - sample - lib \\ DebugStaticLibDeployment section{ font-size: 22px; } Shared Library Development - (VS C Static Library)-42 \u00b6 section{ font-size: 22px; } Shared Library Development - (VS C Static Library)-43 \u00b6 If we set full path for both libraries and headers then we need to set library name for project Linker->Input->Additional Dependencies In this case we will compile c-sample-app and we do not need to compile c-sample-lib because we copied output files to a different location and they are ready to use. section{ font-size: 22px; } Shared Library Development - (VS C Static Library)-44 \u00b6 current source code will be like that nothing changed #include <stdio.h> #include <samplelib.h> /// <summary> /// /// </summary> /// <returns></returns> int main () { int result = 0 ; //printf(\"Hello World!\\n\"); result = sum ( 5 , 4 ); sayHelloTo ( \"Computer\" ); printf ( \"Result is %d \\n \" , result ); printf ( \"Press any key to continue... \\n \" ); getchar (); return 0 ; } section{ font-size: 22px; } Shared Library Development - (VS C Static Library)-45 \u00b6 and output will be as follow section{ font-size: 22px; } Shared Library Development - (VS C Static Library)-46 \u00b6 There is a option about portability that we can set for team works We will remove all library related settings from configurations and we will write them in source code Clear linker->general->additional library directories section{ font-size: 22px; } Shared Library Development - (VS C Static Library)-47 \u00b6 Clear C/C++ -> General -> Additional Include Directories section{ font-size: 22px; } Shared Library Development - (VS C Static Library)-48 \u00b6 Clear Linker->Input->Additional Dependencies section{ font-size: 22px; } Shared Library Development - (VS C Static Library)-49 \u00b6 Now we can set this configurations in source code as follow #pragma comment(lib, \"..\\\\DebugStaticLibDeployment\\\\c-sample-lib.lib\") #include \"..\\DebugStaticLibDeployment\\samplelib.h\" #include <stdio.h> /// <summary> /// /// </summary> /// <returns></returns> int main () { int result = 0 ; //printf(\"Hello World!\\n\"); result = sum ( 5 , 4 ); sayHelloTo ( \"Computer\" ); printf ( \"Result is %d \\n \" , result ); printf ( \"Press any key to continue... \\n \" ); getchar (); return 0 ; } with this configuration if your friends download this code then they can run them with their environment without setting a path. section{ font-size: 30px; } Shared Library Development \u00b6 C++ Programming (Static Library) \u00b6 Visual Studio Community Edition \u00b6 section{ font-size: 22px; } Shared Library Development - (VS Cpp Static Library)-1 \u00b6 All steps are similar with C programming above, but you do not need to delete pch.h You should take care about compiled source codes for example if your code is compiled for x86 then your application also should use the x86 configuration else x64 then library should be x64 complied version. section{ font-size: 22px; } Shared Library Development - (VS Cpp Static Library)-2 \u00b6 Source will look like the following // cpp-sample-app.cpp : This file contains the 'main' function. Program execution begins and ends there. // #pragma comment(lib, \"..\\\\DebugStaticLibDeployment\\\\cpp-sample-lib.lib\") #include \"..\\DebugStaticLibDeployment\\samplelib.h\" #include <iostream> int main () { std :: cout << \"Hello World! \\n \" ; int result = 0 ; //printf(\"Hello World!\\n\"); result = sum ( 5 , 4 ); sayHelloTo ( \"Computer\" ); printf ( \"Result is %d \\n \" , result ); printf ( \"Press any key to continue... \\n \" ); getchar (); return 0 ; } section{ font-size: 30px; } Shared Library Development \u00b6 C++ Programming (Static Library) \u00b6 Visual Studio Community Edition WSL Option \u00b6 section{ font-size: 22px; } Shared Library Development - (VS Cpp WSL Static Library)-1 \u00b6 Install WSL2 GitHub - ucoruh/ns3-wsl-win10-setup: ns3 windows 10 WSL2 setup and usage Create a Linux project section{ font-size: 22px; } Shared Library Development - (VS Cpp WSL Static Library)-2 \u00b6 Configure Platform Toolset to WSL section{ font-size: 22px; } Shared Library Development - (VS Cpp WSL Static Library)-3 \u00b6 Select GCC for Windows Subsystem for Linux section{ font-size: 22px; } Shared Library Development - (VS Cpp WSL Static Library)-4 \u00b6 Put a breakpoint and run debugger section{ font-size: 22px; } Shared Library Development - (VS Cpp WSL Static Library)-5 \u00b6 In the debugger for WSL you can use local WSL installation but if you want to run it on Release setting it require a SSH connection. section{ font-size: 22px; } Shared Library Development - (VS Cpp WSL Static Library)-6 \u00b6 Configure SSH parameters section{ font-size: 22px; } Shared Library Development - (VS Cpp WSL Static Library)-7 \u00b6 so you have to complete the following steps. C/C++ Remote Linux Option over SSH Enable SSH SSH on Windows Subsystem for Linux (WSL) | Illuminia Studios Connect to Remote WSL Environment Ba\u011flan hedef Linux sisteminize Visual Studio | Microsoft Docs section{ font-size: 22px; } Shared Library Development \u00b6 C# Programming (Dinamik Library) \u00b6 Visual Studio Community Edition \u00b6 section{ font-size: 22px; } Shared Library Development - (VS Csharp Dynamic Library)-1 \u00b6 In C# project we will create class library we have several options for this sample we will select .NET core that we can build cross platform library section{ font-size: 22px; } Shared Library Development - (VS Csharp Dynamic Library)-2 \u00b6 There is no static library option section{ font-size: 22px; } Shared Library Development - (VS Csharp Dynamic Library)-3 \u00b6 We will select .Net Core 3.1 section{ font-size: 22px; } Shared Library Development - (VS Csharp Dynamic Library)-4 \u00b6 You will have default empty class library file section{ font-size: 22px; } Shared Library Development - (VS Csharp Dynamic Library)-5 \u00b6 In the project you can see .NETcore reference section{ font-size: 22px; } Shared Library Development - (VS Csharp Dynamic Library)-6 \u00b6 We can build empty class library that generate dll for our application section{ font-size: 22px; } Shared Library Development - (VS Csharp Dynamic Library)-7 \u00b6 Now we will add Console Application but this will also use .NETCore section{ font-size: 22px; } Shared Library Development - (VS Csharp Dynamic Library)-8 \u00b6 Select New Project section{ font-size: 25px; } Shared Library Development - (VS Csharp Dynamic Library)-9 \u00b6 Set project name section{ font-size: 25px; } Shared Library Development - (VS Csharp Dynamic Library)-10 \u00b6 Select .NETCore framework section{ font-size: 25px; } Shared Library Development - (VS Csharp Dynamic Library)-11 \u00b6 You will have the following sample main.cs file using System ; namespace csharp_sample_app { class Program { static void Main ( string [] args ) { Console . WriteLine ( \"Hello World!\" ); } } } section{ font-size: 25px; } Shared Library Development - (VS Csharp Dynamic Library)-12 \u00b6 Now we can link projects with adding references open reference section section{ font-size: 25px; } Shared Library Development - (VS Csharp Dynamic Library)-13 \u00b6 browse for class library project output folder and select output dll file for console application section{ font-size: 25px; } Shared Library Development - (VS Csharp Dynamic Library)-14 \u00b6 now we can update our library code and use it in console application copy following sample to sampleLibClass file in the library section{ font-size: 25px; } Shared Library Development - (VS Csharp Dynamic Library)-15 \u00b6 using System ; namespace csharp_sample_lib { public class sampleLibClass { public static void sayHelloTo ( string name ) { if (! String . IsNullOrEmpty ( name )) { Console . WriteLine ( \"Hello \" + name ); } else { Console . WriteLine ( \"Hello There\" ); } } public static int sum ( int a , int b ) { int c = 0 ; c = a + b ; return c ; } } } section{ font-size: 25px; } Shared Library Development - (VS Csharp Dynamic Library)-16 \u00b6 After this operation copy following sample to console application and build app then you can run using csharp_sample_lib ; using System ; namespace csharp_sample_app { class Program { static void Main ( string [] args ) { Console . WriteLine ( \"Hello World!\" ); sampleLibClass . sayHelloTo ( \"Computer\" ); int result = sampleLibClass . sum ( 5 , 4 ); Console . WriteLine ( \"Results is\" + result ); Console . WriteLine ( \"Results is {0}\" , result ); Console . Read (); } } } section{ font-size: 25px; } Shared Library Development - (VS Csharp Dynamic Library)-17 \u00b6 You will see following output that mean we called DLL functions section{ font-size: 25px; } Shared Library Development - (VS Csharp Dynamic Library)-18 \u00b6 Also we can publish this console application with dll for linux environment or others for linux environment we should install .NETCore section{ font-size: 25px; } Shared Library Development - (VS Csharp Dynamic Library)-19 \u00b6 follow the link below or commands that I shared with you as below for deployment How to Install Dotnet Core on Ubuntu 20.04 \u2013 TecAdmin Step 1 \u2013 Enable Microsoft PPA wget https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb sudo dpkg -i packages-microsoft-prod.deb section{ font-size: 25px; } Shared Library Development - (VS Csharp Dynamic Library)-20 \u00b6 Step 2 \u2013 Installing Dotnet Core SDK sudo apt update sudo apt install apt-transport-https sudo apt install dotnet-sdk-3.1 section{ font-size: 25px; } Shared Library Development - (VS Csharp Dynamic Library)-21 \u00b6 Step 3 \u2013 Install Dotnet Core Runtime Only To install .NET Core Runtime on Ubuntu 20.04 LTS system, execute the commands: sudo apt update section{ font-size: 25px; } Shared Library Development - (VS Csharp Dynamic Library)-22 \u00b6 To install the previous version of .Net core runtime 2.1, type: sudo apt install dotnet-runtime-2.1 Press \u201cy\u201d for any input prompted by the installer. section{ font-size: 25px; } Shared Library Development - (VS Csharp Dynamic Library)-23 \u00b6 Step 4 \u2013 (Optional) Check .NET Core Version You can use dotnet command line utility to check installed version of .NET Core on your system. To check dotnet version, type: dotnet --version section{ font-size: 25px; } Shared Library Development - (VS Csharp Dynamic Library)-24 \u00b6 Now we will publish our application as single executable Open publish menu section{ font-size: 25px; } Shared Library Development - (VS Csharp Dynamic Library)-25 \u00b6 Select netcoreapp3.1 and Release for linux-x64 section{ font-size: 25px; } Shared Library Development - (VS Csharp Dynamic Library)-26 \u00b6 Select produce single file section{ font-size: 25px; } Shared Library Development - (VS Csharp Dynamic Library)-27 \u00b6 After succesfull publish you will have linux binary that you can run with WSL section{ font-size: 25px; } Shared Library Development - (VS Csharp Dynamic Library)-28 \u00b6 Open WSL and enter the path where this folder located And run application as follow section{ font-size: 25px; } Shared Library Development - (VS Csharp Dynamic Library)-29 \u00b6 check dotnet --version and then run application you will see similar output section{ font-size: 25px; } Shared Library Development - (VS Csharp Dynamic Library)-30 \u00b6 In this sample we created single application from settings lets try with shared library located option uncheck the \"produce single file\" option and publish again. Then you will have the following outputs section{ font-size: 25px; } Shared Library Development - (VS Csharp Dynamic Library)-31 \u00b6 If you run csharp-sample-app you will have the same output section{ font-size: 30px; } Shared Library Development \u00b6 Java Programming \u00b6 Eclipse IDE \u00b6 section{ font-size: 25px; } Shared Library Development - (Eclipse Java Jar Library)-1 \u00b6 You should download and install eclipse installer and then you should select Eclipse IDE for Java Developers Eclipse Installer 2021-09 R | Eclipse Packages section{ font-size: 25px; } Shared Library Development - (Eclipse Java Jar Library)-2 \u00b6 section{ font-size: 25px; } Shared Library Development - (Eclipse Java Jar Library)-3 \u00b6 section{ font-size: 25px; } Shared Library Development - (Eclipse Java Jar Library)-4 \u00b6 section{ font-size: 25px; } Shared Library Development - (Eclipse Java Jar Library)-5 \u00b6 select create a project section{ font-size: 25px; } Shared Library Development - (Eclipse Java Jar Library)-6 \u00b6 select java project section{ font-size: 25px; } Shared Library Development - (Eclipse Java Jar Library)-7 \u00b6 give project name section{ font-size: 25px; } Shared Library Development - (Eclipse Java Jar Library)-8 \u00b6 select finish section{ font-size: 25px; } Shared Library Development - (Eclipse Java Jar Library)-9 \u00b6 first we need to add a default package to keep everything organized section{ font-size: 25px; } Shared Library Development - (Eclipse Java Jar Library)-10 \u00b6 then we can create our class that includes our functions section{ font-size: 25px; } Shared Library Development - (Eclipse Java Jar Library)-11 \u00b6 give class a name section{ font-size: 25px; } Shared Library Development - (Eclipse Java Jar Library)-12 \u00b6 you will have following class with main section{ font-size: 25px; } Shared Library Development - (Eclipse Java Jar Library)-13 \u00b6 We will create sample java library with static functions as below. package ce103 ; import java.io.IOException ; public class JavaSampleLib { public static void sayHelloTo ( String name ) { if ( name . isBlank () || name . isEmpty ()) { System . out . println ( \"Hello \" + name ); } else { System . out . println ( \"Hello There\" ); } } public static int sum ( int a , int b ) { int c = 0 ; c = a + b ; return c ; } public static void main ( String [] args ) { // TODO Auto-generated method stub System . out . println ( \"Hello World!\" ); JavaSampleLib . sayHelloTo ( \"Computer\" ); int result = JavaSampleLib . sum ( 5 , 4 ); System . out . println ( \"Results is\" + result ); System . out . printf ( \"Results is %d \\n\" , result ); try { System . in . read (); } catch ( IOException e ) { // TODO Auto-generated catch block e . printStackTrace (); } } } section{ font-size: 25px; } Shared Library Development - (Eclipse Java Jar Library)-14 \u00b6 also we can add main method to run our library functions. If we run this file its process main function section{ font-size: 25px; } Shared Library Development - (Eclipse Java Jar Library)-15 \u00b6 we can see output from console as below section{ font-size: 25px; } Shared Library Development - (Eclipse Java Jar Library)-16 \u00b6 There is no exe files java runtime environment run class files but we can export this as an executable. section{ font-size: 25px; } Shared Library Development - (Eclipse Java Jar Library)-17 \u00b6 Select Java->Runnable JAR File section{ font-size: 25px; } Shared Library Development - (Eclipse Java Jar Library)-18 \u00b6 click next and set output path for jar file section{ font-size: 25px; } Shared Library Development - (Eclipse Java Jar Library)-19 \u00b6 If our project has several external dependecy then we can extract this required files (jar, so, dll) in seperated folder or we can combine them and generate a single executable jar Lets pack everthing together, Select launch configuration that has main function section{ font-size: 25px; } Shared Library Development - (Eclipse Java Jar Library)-20 \u00b6 end of this operation we will have the following jar that we can by click section{ font-size: 20px; } Shared Library Development - (Eclipse Java Jar Library)-21 \u00b6 When you click application if cannot run then try command line to see problem enter jar folder and run the following command java -jar JavaSampleLibExecutable.jar In my case eclipse build JDK is newer than that I installed and set for my OS If we check version we can see problem Java version 1.8.0_231 section{ font-size: 25px; } Shared Library Development - (Eclipse Java Jar Library)-22 \u00b6 We can found installed and builded JDK for our application from Eclipse setting section{ font-size: 25px; } Shared Library Development - (Eclipse Java Jar Library)-23 \u00b6 select environments section{ font-size: 25px; } Shared Library Development - (Eclipse Java Jar Library)-24 \u00b6 select installed JRE or JDK section{ font-size: 25px; } Shared Library Development - (Eclipse Java Jar Library)-25 \u00b6 you can see installed JRE or JDK home C : \\Program Files\\Java\\jdk-16.0.1 section{ font-size: 25px; } Shared Library Development - (Eclipse Java Jar Library)-26 \u00b6 Open system environment to fix this problem section{ font-size: 25px; } Shared Library Development - (Eclipse Java Jar Library)-27 \u00b6 section{ font-size: 25px; } Shared Library Development - (Eclipse Java Jar Library)-28 \u00b6 Check user settings first section{ font-size: 25px; } Shared Library Development - (Eclipse Java Jar Library)-29 \u00b6 section{ font-size: 25px; } Shared Library Development - (Eclipse Java Jar Library)-30 \u00b6 Check system settings section{ font-size: 25px; } Shared Library Development - (Eclipse Java Jar Library)-31 \u00b6 section{ font-size: 25px; } Shared Library Development - (Eclipse Java Jar Library)-32 \u00b6 we will move up the JDK 16 configuration then command line will run first java section{ font-size: 25px; } Shared Library Development - (Eclipse Java Jar Library)-33 \u00b6 Also in system setting check JAVA_HOME section{ font-size: 25px; } Shared Library Development - (Eclipse Java Jar Library)-34 \u00b6 After this settings close current command line and open new one Write java --version if you see java version updated and 16.0.1 then settings are correct section{ font-size: 25px; } Shared Library Development - (Eclipse Java Jar Library)-35 \u00b6 and now if we enter and run application as follow we will see output section{ font-size: 25px; } Shared Library Development - (Eclipse Java Jar Library)-36 \u00b6 But when you click this jar its not running as you see so we have options to provide a clickable application there Launch4j is an option here Launch4j - Cross-platform Java executable wrapper section{ font-size: 25px; } Shared Library Development - (Eclipse Java Jar Library)-37 \u00b6 you can watch this tutorial also How to convert jar to exe using Launch4J Full explanation - YouTube section{ font-size: 25px; } Shared Library Development - (Eclipse Java Jar Library)-38 \u00b6 Download and install launch4j and open application section{ font-size: 25px; } Shared Library Development - (Eclipse Java Jar Library)-39 \u00b6 Configure your application settings similar to below select jar file and exe output path section{ font-size: 25px; } Shared Library Development - (Eclipse Java Jar Library)-40 \u00b6 We can customize main class if have multiple main class section{ font-size: 25px; } Shared Library Development - (Eclipse Java Jar Library)-41 \u00b6 select console from setting for this application section{ font-size: 25px; } Shared Library Development - (Eclipse Java Jar Library)-42 \u00b6 we can provide a single running application, this setting avoid to run multiple instances section{ font-size: 25px; } Shared Library Development - (Eclipse Java Jar Library)-43 \u00b6 we need to set runtime environment versions section{ font-size: 25px; } Shared Library Development - (Eclipse Java Jar Library)-44 \u00b6 you can set system parameters before running application section{ font-size: 25px; } Shared Library Development - (Eclipse Java Jar Library)-45 \u00b6 with splash screen you can show a splash screen image for your application section{ font-size: 25px; } Shared Library Development - (Eclipse Java Jar Library)-46 \u00b6 File attributes such as version product information is configured from version info tab section{ font-size: 25px; } Shared Library Development - (Eclipse Java Jar Library)-47 \u00b6 if your application runtime condition has an error then you can show this customized messages also section{ font-size: 25px; } Shared Library Development - (Eclipse Java Jar Library)-48 \u00b6 with this options save configuration file xml section{ font-size: 25px; } Shared Library Development - (Eclipse Java Jar Library)-49 \u00b6 and compile settings section{ font-size: 25px; } Shared Library Development - (Eclipse Java Jar Library)-50 \u00b6 You will see generated output file in log screen Compiling resources Linking Wrapping WARNING: Sign the executable to minimize antivirus false positives or use launching instead of wrapping. Successfully created C:\\Users\\ugur.coruh\\Desktop\\java-export-sample\\JavaSampleLibExecutable.exe section{ font-size: 25px; } Shared Library Development - (Eclipse Java Jar Library)-51 \u00b6 now we can run exe by click section{ font-size: 25px; } Shared Library Development - (Eclipse Java Jar Library)-52 \u00b6 another option here adding a bat file to run current jar file section{ font-size: 25px; } Shared Library Development - (Eclipse Java Jar Library)-53 \u00b6 JavaSampleLibExecutable.bat java -jar JavaSampleLibExecutable.jar if we click bat file then we will automate command line task for current jar file section{ font-size: 25px; } Shared Library Development - (Eclipse Java Jar Library)-54 \u00b6 Now return back to our java library and create another console application that use library functions section{ font-size: 25px; } Shared Library Development - (Eclipse Java Jar Library)-55 \u00b6 section{ font-size: 25px; } Shared Library Development - (Eclipse Java Jar Library)-56 \u00b6 section{ font-size: 25px; } Shared Library Development - (Eclipse Java Jar Library)-57 \u00b6 You can set libraries in this step from but our library should exported for our solution section{ font-size: 25px; } Shared Library Development - (Eclipse Java Jar Library)-58 \u00b6 Select Add External JARs... section{ font-size: 25px; } Shared Library Development - (Eclipse Java Jar Library)-59 \u00b6 Open Exported jar folder and select section{ font-size: 25px; } Shared Library Development - (Eclipse Java Jar Library)-60 \u00b6 Or we can select by Add jar from current workspace section{ font-size: 25px; } Shared Library Development - (Eclipse Java Jar Library)-61 \u00b6 but in this step I won't add anything I'll add references later section{ font-size: 25px; } Shared Library Development - (Eclipse Java Jar Library)-62 \u00b6 we will have the following project section{ font-size: 25px; } Shared Library Development - (Eclipse Java Jar Library)-63 \u00b6 lets create a package section{ font-size: 25px; } Shared Library Development - (Eclipse Java Jar Library)-64 \u00b6 section{ font-size: 25px; } Shared Library Development - (Eclipse Java Jar Library)-65 \u00b6 and lets create a main class for our application section{ font-size: 25px; } Shared Library Development - (Eclipse Java Jar Library)-66 \u00b6 check create main function section{ font-size: 25px; } Shared Library Development - (Eclipse Java Jar Library)-67 \u00b6 section{ font-size: 25px; } Shared Library Development - (Eclipse Java Jar Library)-68 \u00b6 right click to project and add reference section{ font-size: 25px; } Shared Library Development - (Eclipse Java Jar Library)-69 \u00b6 you can enter same configurations from project properties section{ font-size: 25px; } Shared Library Development - (Eclipse Java Jar Library)-70 \u00b6 Lets export our library as a JAR file and then add to our classpath section{ font-size: 25px; } Shared Library Development - (Eclipse Java Jar Library)-71 \u00b6 Select JAR file section{ font-size: 25px; } Shared Library Development - (Eclipse Java Jar Library)-72 \u00b6 we configured output as C : \\Users\\ugur.coruh\\Desktop\\java-export-sample\\JavaSampleLib.jar section{ font-size: 25px; } Shared Library Development - (Eclipse Java Jar Library)-73 \u00b6 section{ font-size: 25px; } Shared Library Development - (Eclipse Java Jar Library)-74 \u00b6 section{ font-size: 25px; } Shared Library Development - (Eclipse Java Jar Library)-75 \u00b6 In the same export folder now we have JavaSampleLib.jar section{ font-size: 25px; } Shared Library Development - (Eclipse Java Jar Library)-76 \u00b6 return back to java-sample-app and then add this jar file to our project Build Path->Add External Archives section{ font-size: 25px; } Shared Library Development - (Eclipse Java Jar Library)-77 \u00b6 you will see its added to reference libraries section{ font-size: 20px; } Shared Library Development - (Eclipse Java Jar Library)-78 \u00b6 in our JavaSampleApp.java we can use the following source codes package ce103 ; import java.io.IOException ; public class JavaSampleApp { public static void main ( String [] args ) { // TODO Auto-generated method stub System . out . println ( \"Hello World!\" ); JavaSampleLib . sayHelloTo ( \"Computer\" ); int result = JavaSampleLib . sum ( 5 , 4 ); System . out . println ( \"Results is\" + result ); System . out . printf ( \"Results is %d \\n\" , result ); try { System . in . read (); } catch ( IOException e ) { // TODO Auto-generated catch block e . printStackTrace (); } } } section{ font-size: 25px; } Shared Library Development - (Eclipse Java Jar Library)-79 \u00b6 When we run application we will see similar output section{ font-size: 25px; } Shared Library Development - (Eclipse Java Jar Library)-80 \u00b6 Lets export this application with its dependent library section{ font-size: 25px; } Shared Library Development - (Eclipse Java Jar Library)-81 \u00b6 Select runnable jar section{ font-size: 25px; } Shared Library Development - (Eclipse Java Jar Library)-82 \u00b6 Set Launch configuration and Export destination C : \\Users\\ugur.coruh\\Desktop\\java-export-sample\\JavaSampleAppSingle.jar section{ font-size: 25px; } Shared Library Development - (Eclipse Java Jar Library)-83 \u00b6 In this option we will have single jar file In the export folder we do not see reference libraries and we can run with command line section{ font-size: 25px; } Shared Library Development - (Eclipse Java Jar Library)-84 \u00b6 only change copy required libraries setting and then give a new name for new jar file and export C : \\Users\\ugur.coruh\\Desktop\\java-export-sample\\JavaSampleAppMultiple.jar section{ font-size: 25px; } Shared Library Development - (Eclipse Java Jar Library)-85 \u00b6 now we have a folder that contains our libraries referenced section{ font-size: 25px; } Shared Library Development - (Eclipse Java Jar Library)-86 \u00b6 in this file we can find our library section{ font-size: 25px; } Shared Library Development - (Eclipse Java Jar Library)-87 \u00b6 if we test our application we will see it will work if we delete JavaSampleLib.jar and then try running application we will get error Application Testing \u00b6 C C++ C# Java section{ font-size: 25px; } Unit Test Development \u00b6 Wikipedia Unit Test Library List for Each Language https://en.wikipedia.org/wiki/List_of_unit_testing_frameworks section{ font-size: 25px; } Visual Studio Community Edition \u00b6 C Unit Tests \u00b6 section{ font-size: 25px; } Visual Studio Community Edition - C Unit Tests \u00b6 There is no direct C source testing but with additional frameworks. Visual Studio can test C sources. You can check the following entry https://stackoverflow.com/questions/65820/unit-testing-c-code Recommended framework is Check https://libcheck.github.io/check/web/install.html https://github.com/libcheck/check/releases section{ font-size: 25px; } Visual Studio Community Edition \u00b6 C++ Unit Tests \u00b6 section{ font-size: 25px; } Visual Studio Community Edition - C++ Unit Tests-1 \u00b6 C/C++ i\u00e7in birim testleri yazma - Visual Studio (Windows) | Microsoft Docs section{ font-size: 25px; } Visual Studio Community Edition - C++ Unit Tests-2 \u00b6 Use cpp-sample-lib project and add section{ font-size: 25px; } Visual Studio Community Edition - C++ Unit Tests-3 \u00b6 Select Native Unit Test section{ font-size: 25px; } Visual Studio Community Edition - C++ Unit Tests-4 \u00b6 Set project path and name section{ font-size: 25px; } Visual Studio Community Edition - C++ Unit Tests-5 \u00b6 You will have cpp-sample-test project section{ font-size: 25px; } Visual Studio Community Edition - C++ Unit Tests-6 \u00b6 Add library project from references section{ font-size: 25px; } Visual Studio Community Edition - C++ Unit Tests-7 \u00b6 Add cpp-sample-lib to cpp-sample-test project section{ font-size: 25px; } Visual Studio Community Edition - C++ Unit Tests-8 \u00b6 cpp-sample-test.cpp #include \"pch.h\" #include \"CppUnitTest.h\" #include \"..\\cpp-sample-lib\\samplelib.h\" using namespace Microsoft :: VisualStudio :: CppUnitTestFramework ; namespace cppsampletest { TEST_CLASS ( cppsampletest ) { public : TEST_METHOD ( TestSumCorrect ) { Assert :: AreEqual ( 9 , sum ( 4 , 5 )); } TEST_METHOD ( TestSumInCorrect ) { Assert :: AreEqual ( 10 , sum ( 4 , 5 )); } }; } section{ font-size: 25px; } Visual Studio Community Edition - C++ Unit Tests-9 \u00b6 section{ font-size: 25px; } Visual Studio Community Edition \u00b6 C# Unit Tests \u00b6 MSTest + .Net Fine Code Coverage NUnit + .NetCore section{ font-size: 25px; } Visual Studio Community Edition (C# Unit Test + MSTestV2+.Net)-1 \u00b6 Install extension fine code coverage https://marketplace.visualstudio.com/items?itemName=FortuneNgwenya.FineCodeCoverage section{ font-size: 25px; } Visual Studio Community Edition (C# Unit Test + MSTestV2+.Net)-2 \u00b6 Create a .Net Framework Library section{ font-size: 25px; } Visual Studio Community Edition (C# Unit Test + MSTestV2+.Net)-3 \u00b6 Set project framework and path section{ font-size: 25px; } Visual Studio Community Edition (C# Unit Test + MSTestV2+.Net)-4 \u00b6 Create library functions section{ font-size: 25px; } Visual Studio Community Edition (C# Unit Test + MSTestV2+.Net)-5 \u00b6 using System ; using System.Collections.Generic ; using System.Text ; namespace cs_lib_sample { public class SampleLibClass { public static string sayHelloTo ( string name ) { string result = String . Empty ; if (! String . IsNullOrEmpty ( name )) { result = \"Hello \" + name ; } else { result = \"Hello There\" ; } Console . WriteLine ( result ); return result ; } public static int sum ( int a , int b ) { int c = 0 ; c = a + b ; return c ; } public int multiply ( int a , int b ) { return a * b ; } } } section{ font-size: 25px; } Visual Studio Community Edition (C# Unit Test + MSTestV2+.Net)-6 \u00b6 Right click and then create unit test project section{ font-size: 25px; } Visual Studio Community Edition (C# Unit Test + MSTestV2+.Net)-7 \u00b6 Press OK section{ font-size: 25px; } Visual Studio Community Edition (C# Unit Test + MSTestV2+.Net)-8 \u00b6 Enter test code using Microsoft.VisualStudio.TestTools.UnitTesting ; using cs_lib_sample ; using System ; using System.Collections.Generic ; using System.Linq ; using System.Text ; using System.Threading.Tasks ; namespace cs_lib_sample.Tests { [TestClass()] public class SampleLibClassTests { [TestMethod()] public void testSayHelloTo () { Assert . AreEqual ( \"Hello Computer\" , SampleLibClass . sayHelloTo ( \"Computer\" ), \"Regular say hello should work\" ); } [TestMethod()] public void testSayHelloToWrong () { Assert . AreEqual ( \"Hello All\" , SampleLibClass . sayHelloTo ( \"Computer\" ), \"Regular say hello won't work\" ); } [TestMethod()] public void testSumCorrect () { Assert . AreEqual ( 9 , SampleLibClass . sum ( 4 , 5 ), \"Regular sum should work\" ); } [TestMethod()] public void testSumWrong () { Assert . AreEqual ( 10 , SampleLibClass . sum ( 4 , 5 ), \"Regular sum shouldn't work\" ); } [TestMethod()] public void testMultiply () { SampleLibClass sampleLib = new SampleLibClass (); Assert . AreEqual ( 20 , sampleLib . multiply ( 4 , 5 ), \"Regular multiplication should work\" ); } } } section{ font-size: 25px; } Visual Studio Community Edition (C# Unit Test + MSTestV2+.Net)-9 \u00b6 Run tests section{ font-size: 25px; } Visual Studio Community Edition (C# Unit Test + MSTestV2+.Net)-10 \u00b6 you will code coverage and entered or passed branches section{ font-size: 25px; } Visual Studio Community Edition \u00b6 C# Unit Test + NUnit + .NETCore \u00b6 section{ font-size: 25px; } Visual Studio Community Edition (C# Unit Test+NUnit+.NETCore)-1 \u00b6 Use cshar-sample-lib for this example Create and add a unit test project to solution section{ font-size: 25px; } Visual Studio Community Edition (C# Unit Test+NUnit+.NETCore)-2 \u00b6 section{ font-size: 25px; } Visual Studio Community Edition (C# Unit Test+NUnit+.NETCore)-3 \u00b6 section{ font-size: 25px; } Visual Studio Community Edition (C# Unit Test+NUnit+.NETCore)-4 \u00b6 section{ font-size: 25px; } Visual Studio Community Edition (C# Unit Test+NUnit+.NETCore)-5 \u00b6 Add project reference section{ font-size: 25px; } Visual Studio Community Edition (C# Unit Test+NUnit+.NETCore)-6 \u00b6 section{ font-size: 25px; } Visual Studio Community Edition (C# Unit Test+NUnit+.NETCore)-7 \u00b6 SampleLibraryTestClasss in NUnit Project using csharp_sample_lib ; using NUnit.Framework ; namespace csharp_sample_lib_test { public class SampleLibraryTestClass { sampleLibClass sampleLib ; [SetUp] public void Setup () { sampleLib = new sampleLibClass (); } [Test] public void testSayHelloTo () { Assert . AreEqual ( \"Hello Computer\" , sampleLibClass . sayHelloTo ( \"Computer\" ), \"Regular say hello should work\" ); } [Test] public void testSayHelloToWrong () { Assert . AreEqual ( \"Hello All\" , sampleLibClass . sayHelloTo ( \"Computer\" ), \"Regular say hello won't work\" ); } [Test] public void testSumCorrect () { Assert . AreEqual ( 9 , sampleLibClass . sum ( 4 , 5 ), \"Regular sum should work\" ); } [Test] public void testSumWrong () { Assert . AreEqual ( 10 , sampleLibClass . sum ( 4 , 5 ), \"Regular sum shouldn't work\" ); } [Test] public void testMultiply () { Assert . AreEqual ( 20 , sampleLib . multiply ( 4 , 5 ), \"Regular multiplication should work\" ); } } } section{ font-size: 25px; } Visual Studio Community Edition (C# Unit Test+NUnit+.NETCore)-8 \u00b6 Sample class library using System ; namespace csharp_sample_lib { public class sampleLibClass { public static string sayHelloTo ( string name ) { string result = String . Empty ; if (! String . IsNullOrEmpty ( name )) { result = \"Hello \" + name ; } else { result = \"Hello There\" ; } Console . WriteLine ( result ); return result ; } public static int sum ( int a , int b ) { int c = 0 ; c = a + b ; return c ; } public int multiply ( int a , int b ) { return a * b ; } } } section{ font-size: 25px; } Visual Studio Community Edition (C# Unit Test+NUnit+.NETCore)-9 \u00b6 Open test explorer and run tests section{ font-size: 25px; } Visual Studio Community Edition (C# Unit Test+NUnit+.NETCore)-10 \u00b6 or you can run from project section{ font-size: 25px; } Visual Studio Community Edition (C# Unit Test+NUnit+.NETCore)-11 \u00b6 Also we can create unit test from library class, Right click the sampleLibClass and select create unit tests but this option do not provide nunit tests. section{ font-size: 25px; } Visual Studio Community Edition (C# Unit Test+NUnit+.NETCore)-12 \u00b6 section{ font-size: 25px; } Visual Studio Community Edition (C# Unit Test+NUnit+.NETCore)-13 \u00b6 section{ font-size: 25px; } Visual Studio Community Edition (C# Unit Test+NUnit+.NETCore)-14 \u00b6 section{ font-size: 25px; } Visual Studio Community Edition (C# Unit Test+NUnit+.NETCore)-15 \u00b6 using Microsoft.VisualStudio.TestTools.UnitTesting ; using csharp_sample_lib ; using System ; using System.Collections.Generic ; using System.Text ; namespace csharp_sample_lib.Tests { [TestClass()] public class sampleLibClassTests { [TestMethod()] public void sayHelloToTest () { Assert . Fail (); } [TestMethod()] public void sumTest () { Assert . Fail (); } [TestMethod()] public void multiplyTest () { Assert . Fail (); } } } section{ font-size: 25px; } Visual Studio Community Edition (C# Unit Test+NUnit+.NETCore)-16 \u00b6 We will not commit this changes and continue from nunit test project, the fine code Coverage also work for nunit test but not provide inline highlighting If we run tests we will have the following outputs section{ font-size: 25px; } Visual Studio Community Edition (C# Unit Test+NUnit+.NETCore)-17 \u00b6 Inline code highlight is part of enterprise visual studio edition Analyzing code coverage in Visual Studio - DEV Community section{ font-size: 30px; } Visual Studio Community Edition (C# Unit Test+OpenCover + Nunit Runner + Report) \u00b6 section{ font-size: 25px; } Visual Studio Community Edition (C# Unit Test+OpenCover + Nunit Runner + Report)-1 \u00b6 TL;DR \u00b6 Additional information you can use OpenCover + Nunit Runner + Report Generator together to setup a code coverage report but it has complex batch running process. After a few try I decided to use fine code coverage but here is the usage not tested well. First unit test runner tool doesn't support .Net Core c# - The NUnit 3 driver encountered an error while executing reflected code (NUnit.Engine.NUnitEngineException) - Stack Overflow Follow the instructions on the link CMD OpenCover \u00b7 sukhoi1/Useful-Notes Wiki \u00b7 GitHub Install OpenCover, ReportGenerator, Nunit,Runners packages then use the package installation folder to get tools that you need section{ font-size: 25px; } Visual Studio Community Edition (C# Unit Test+OpenCover + Nunit Runner + Report)-2 \u00b6 Here is a sample for open cover, select package and copy path section{ font-size: 25px; } Visual Studio Community Edition (C# Unit Test+OpenCover + Nunit Runner + Report)-3 \u00b6 Goto path and tools C : \\Users\\ugur.coruh\\.nuget\\packages\\opencover\\4.7.1221 You need to setup some batch similar with following run-test-coverage.bat set pathA = C:\\Users\\ugur.coruh\\.nuget\\packages\\opencover\\4.7.1221\\tools set pathB = C:\\Users\\ugur.coruh\\.nuget\\packages\\nunit.consolerunner\\3.12.0\\tools set pathC = C:\\Users\\ugur.coruh\\.nuget\\packages\\reportgenerator\\4.8.13\\tools\\netcoreapp3.0 set dllpath = C:\\Users\\ugur.coruh\\Desktop\\csharp-sample-lib\\csharp-sample-lib-test\\bin\\Debug\\netcoreapp3.1 \" %pathA% \\OpenCover.Console.exe\" ^ - targetargs: \" %dllpath% \\csharp-sample-lib-test.dll\" ^ - filter: \"+[csharp-sample-lib*]* -[*test]*\" ^ - target: \" %pathB% \\nunit3-console.exe\" ^ - output: \" %dllpath% \\coverReport.xml\" ^ - skipautoprops -register:user && \" %pathC% \\ReportGenerator.exe\" -reports: \" %dllpath% \\coverReport.xml\" -targetdir: \"\" %dllpath% \\coverage \" pause section{ font-size: 25px; } Visual Studio Community Edition (C# Unit Test+OpenCover + Nunit Runner + Report)-4 \u00b6 but nunit3-console.exe gives error section{ font-size: 25px; } Visual Studio Community Edition (C# Unit Test+OpenCover + Nunit Runner + Report)-5 \u00b6 For this compatibility issues I prefer to use fine code coverage extension. OpenCover related studies Code coverage of manual or automated tests with OpenCover for .NET applications \u2013 Automation Rhapsody Code coverage of .NET Core unit tests with OpenCover \u2013 Automation Rhapsody Sample OpenCover report Summary - Coverage Report section{ font-size: 25px; } Visual Studio Community Edition (C# Unit Test+OpenCover + Nunit Runner + Report)-6 \u00b6 Download and Setup OpenCover, NUnit Console, Report Generator without Package Manager \u00b6 You can also download the tools from github project pages and install on your operating system, section{ font-size: 25px; } Visual Studio Community Edition (C# Unit Test+OpenCover + Nunit Runner + Report)-7 \u00b6 OpenCover \u00b6 Releases \u00b7 OpenCover/opencover \u00b7 GitHub section{ font-size: 25px; } Visual Studio Community Edition (C# Unit Test+OpenCover + Nunit Runner + Report)-8 \u00b6 section{ font-size: 25px; } Visual Studio Community Edition (C# Unit Test+OpenCover + Nunit Runner + Report)-9 \u00b6 Select advanced and then install for all users section{ font-size: 25px; } Visual Studio Community Edition (C# Unit Test+OpenCover + Nunit Runner + Report)-10 \u00b6 section{ font-size: 25px; } Visual Studio Community Edition (C# Unit Test+OpenCover + Nunit Runner + Report)-11 \u00b6 section{ font-size: 25px; } Visual Studio Community Edition (C# Unit Test+OpenCover + Nunit Runner + Report)-12 \u00b6 section{ font-size: 25px; } Visual Studio Community Edition (C# Unit Test+OpenCover + Nunit Runner + Report)-13 \u00b6 section{ font-size: 25px; } Visual Studio Community Edition (C# Unit Test+OpenCover + Nunit Runner + Report)-14 \u00b6 section{ font-size: 25px; } Visual Studio Community Edition (C# Unit Test+OpenCover + Nunit Runner + Report)-15 \u00b6 section{ font-size: 25px; } Visual Studio Community Edition (C# Unit Test+OpenCover + Nunit Runner + Report)-16 \u00b6 section{ font-size: 25px; } Visual Studio Community Edition (C# Unit Test+OpenCover + Nunit Runner + Report)-17 \u00b6 ReportGenerator \u00b6 Release ReportGenerator_4.8.13 \u00b7 danielpalme/ReportGenerator \u00b7 GitHub section{ font-size: 25px; } Visual Studio Community Edition (C# Unit Test+OpenCover + Nunit Runner + Report)-18 \u00b6 section{ font-size: 25px; } Visual Studio Community Edition (C# Unit Test+OpenCover + Nunit Runner + Report)-19 \u00b6 NUnit Console \u00b6 Downloads section{ font-size: 25px; } Visual Studio Community Edition (C# Unit Test+OpenCover + Nunit Runner + Report)-20 \u00b6 section{ font-size: 25px; } Visual Studio Community Edition (C# Unit Test+OpenCover + Nunit Runner + Report)-21 \u00b6 section{ font-size: 25px; } Visual Studio Community Edition (C# Unit Test+OpenCover + Nunit Runner + Report)-22 \u00b6 Download setup section{ font-size: 25px; } Visual Studio Community Edition (C# Unit Test+OpenCover + Nunit Runner + Report)-23 \u00b6 Install setup section{ font-size: 25px; } Visual Studio Community Edition (C# Unit Test+OpenCover + Nunit Runner + Report)-24 \u00b6 NUnit + MSTest Batch Report Generation (Not Tested) \u00b6 OpenCover and ReportGenerator Unit Test Coverage in Visual Studio 2013 and 2015 \u2013 CodeHelper.Net OpenCover and ReportGenerator Unit Test Coverage in Visual Studio 2013 and 2015 - CodeProject section{ font-size: 30px; } Java Unit Tests \u00b6 Eclipse IDE (JUnit4 , JUnit5) \u00b6 section{ font-size: 25px; } Eclipse IDE (JUnit4 , JUnit5) + Java Unit Test \u00b6 In this sample we will create two example for similar library Please check the following links JUnit 5 tutorial - Learn how to write unit tests JUnit 5 JUnit 5 User Guide https://www.eclemma.org/ JUnit Hello World Example - Examples Java Code Geeks - 2021 https://yasinmemic.medium.com/java-ile-unit-test-yazmak-birim-test-ca15cf0d024b section{ font-size: 25px; } Eclipse IDE (JUnit4 , JUnit5) + Java Unit Test \u00b6 In normal java application we can right click the project java-sample-lib and add Junit case section{ font-size: 25px; } Eclipse IDE (JUnit4 , JUnit5) + Java Unit Test \u00b6 section{ font-size: 25px; } Eclipse IDE (JUnit4 , JUnit5) + Java Unit Test \u00b6 section{ font-size: 25px; } Eclipse IDE (JUnit4 , JUnit5) + Java Unit Test \u00b6 section{ font-size: 25px; } Eclipse IDE (JUnit4 , JUnit5) + Java Unit Test \u00b6 section{ font-size: 25px; } Eclipse IDE (JUnit4, JUnit5) + Java Unit Test \u00b6 and you will have the following test class section{ font-size: 25px; } Eclipse IDE (JUnit4, JUnit5) + Java Unit Test \u00b6 Now we will create tests that check our function flowchart and return values We need to cover all code branches that we coded I have updated JavaSampleLib.java as follows to check outputs JavaSampleLib.java package ce103 ; public class JavaSampleLib { public static String sayHelloTo ( String name ) { String output = \"\" ; if ( ! name . isBlank () && ! name . isEmpty ()){ output = \"Hello \" + name ; } else { output = \"Hello There\" ; } System . out . println ( output ); return output ; } public static int sum ( int a , int b ) { int c = 0 ; c = a + b ; return c ; } public int multiply ( int a , int b ) { return a * b ; } // public static void main(String[] args) { // // TODO Auto-generated method stub // System.out.println(\"Hello World!\"); // // JavaSampleLib.sayHelloTo(\"Computer\"); // int result = JavaSampleLib.sum(5, 4); // System.out.println(\"Results is\" + result); // System.out.printf(\"Results is %d \\n\", result); // // // try { // System.in.read(); // } catch (IOException e) { // // TODO Auto-generated catch block // e.printStackTrace(); // } // // } } section{ font-size: 25px; } Eclipse IDE (JUnit4 , JUnit5) + Java Unit Test \u00b6 and JavaSampleLibTest.java package ce103 ; import static org.junit.jupiter.api.Assertions.* ; import org.junit.jupiter.api.AfterAll ; import org.junit.jupiter.api.AfterEach ; import org.junit.jupiter.api.BeforeAll ; import org.junit.jupiter.api.BeforeEach ; import org.junit.jupiter.api.DisplayName ; import org.junit.jupiter.api.RepeatedTest ; import org.junit.jupiter.api.Test ; import org.junit.jupiter.params.ParameterizedTest ; import org.junit.jupiter.params.provider.MethodSource ; class JavaSampleLibTest { JavaSampleLib sampleLib ; @BeforeAll static void setUpBeforeClass () throws Exception { } @AfterAll static void tearDownAfterClass () throws Exception { } @BeforeEach void setUp () throws Exception { sampleLib = new JavaSampleLib (); } @AfterEach void tearDown () throws Exception { } @Test @DisplayName ( \"Simple Say Hello should work\" ) void testSayHelloTo () { assertEquals ( \"Hello Computer\" , JavaSampleLib . sayHelloTo ( \"Computer\" ), \"Regular say hello should work\" ); } @Test @DisplayName ( \"Simple Say Hello shouldn' work\" ) void testSayHelloToWrong () { assertEquals ( \"Hello All\" , JavaSampleLib . sayHelloTo ( \"Computer\" ), \"Regular say hello won't work\" ); } @Test @DisplayName ( \"Simple sum should work\" ) void testSumCorrect () { assertEquals ( 9 , JavaSampleLib . sum ( 4 , 5 ), \"Regular sum should work\" ); } @Test @DisplayName ( \"Simple sum shouldn't work\" ) void testSumWrong () { assertEquals ( 10 , JavaSampleLib . sum ( 4 , 5 ), \"Regular sum shouldn't work\" ); } @Test @DisplayName ( \"Simple multiplication should work\" ) void testMultiply () { assertEquals ( 20 , sampleLib . multiply ( 4 , 5 ), \"Regular multiplication should work\" ); } @RepeatedTest ( 5 ) @DisplayName ( \"Ensure correct handling of zero\" ) void testMultiplyWithZero () { assertEquals ( 0 , sampleLib . multiply ( 0 , 5 ), \"Multiple with zero should be zero\" ); assertEquals ( 0 , sampleLib . multiply ( 5 , 0 ), \"Multiple with zero should be zero\" ); } public static int [][] data () { return new int [][] { { 1 , 2 , 2 }, { 5 , 3 , 15 }, { 121 , 4 , 484 },{ 2 , 2 , 2 } }; } @ParameterizedTest @MethodSource ( value = \"data\" ) void testWithStringParameter ( int [] data ) { JavaSampleLib tester = new JavaSampleLib (); int m1 = data [ 0 ] ; int m2 = data [ 1 ] ; int expected = data [ 2 ] ; assertEquals ( expected , tester . multiply ( m1 , m2 )); } } section{ font-size: 25px; } Eclipse IDE (JUnit4 , JUnit5) + Java Unit Test \u00b6 if we run tests section{ font-size: 25px; } Eclipse IDE (JUnit4 , JUnit5) + Java Unit Test \u00b6 we will see all results there section{ font-size: 25px; } Eclipse IDE (JUnit4 , JUnit5) + Java Unit Test \u00b6 also we can see the code coverage of tests section{ font-size: 25px; } Eclipse IDE (JUnit4 , JUnit5) + Java Unit Test \u00b6 when we open our source code (just close and open again another case highlighting will not work) you will see tested part of your codes section{ font-size: 25px; } Eclipse IDE (JUnit4 , JUnit5) + Java Unit Test \u00b6 Maven Java Application + JUnit \u00b6 Lets create Maven project with tests Create a maven project File -> New -> Maven Project section{ font-size: 25px; } Eclipse IDE (JUnit4 , JUnit5) + Java Unit Test \u00b6 section{ font-size: 25px; } Eclipse IDE (JUnit4 , JUnit5) + Java Unit Test \u00b6 Lets convert our sample java-sample-lib directories to standard folder structure for test and app division Maven \u2013 Introduction to the Standard Directory Layout Also for intro you can use this JUnit Hello World Example - Examples Java Code Geeks - 2021 Eclipse Maven Java JUnit 4.12 (pulled by Maven automatically) section{ font-size: 25px; } Eclipse IDE (JUnit4 , JUnit5) + Java Unit Test \u00b6 Lets give new sample java-sample-lib-mvnbut in this time we will create a maven project section{ font-size: 25px; } Eclipse IDE (JUnit4 , JUnit5) + Java Unit Test \u00b6 section{ font-size: 25px; } Eclipse IDE (JUnit4 , JUnit5) + Java Unit Test \u00b6 pom.xml file <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\" > <modelVersion> 4.0.0 </modelVersion> <groupId> com.ce103 </groupId> <artifactId> java-sample-lib-ext </artifactId> <version> 0.0.1-SNAPSHOT </version> <name> Java Sample Lib </name> <description> Java Sample with Unit Test </description> </project> section{ font-size: 25px; } Eclipse IDE (JUnit4 , JUnit5) + Java Unit Test \u00b6 we will add JUnit 5 for our project <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\" > <modelVersion> 4.0.0 </modelVersion> <groupId> com.ce103 </groupId> <artifactId> java-sample-lib-ext </artifactId> <version> 0.0.1-SNAPSHOT </version> <name> Java Sample Lib </name> <description> Java Sample with Unit Test </description> <dependencies> <dependency> <groupId> org.junit.jupiter </groupId> <artifactId> junit-jupiter-params </artifactId> <version> 5.7.1 </version> <scope> test </scope> </dependency> </dependencies> </project> section{ font-size: 25px; } Eclipse IDE (JUnit4 , JUnit5) + Java Unit Test \u00b6 it will automatically download libraries section{ font-size: 25px; } Eclipse IDE (JUnit4 , JUnit5) + Java Unit Test \u00b6 section{ font-size: 25px; } Eclipse IDE (JUnit4 , JUnit5) + Java Unit Test \u00b6 Create java sample library in ce103 package, first create java package section{ font-size: 25px; } Eclipse IDE (JUnit4 , JUnit5) + Java Unit Test \u00b6 In this package create library class section{ font-size: 25px; } Eclipse IDE (JUnit4 , JUnit5) + Java Unit Test \u00b6 section{ font-size: 25px; } Eclipse IDE (JUnit4 , JUnit5) + Java Unit Test \u00b6 copy content from other library package ce103 ; public class JavaSampleLib { public static String sayHelloTo ( String name ) { String output = \"\" ; if ( ! name . isBlank () && ! name . isEmpty ()){ output = \"Hello \" + name ; } else { output = \"Hello There\" ; } System . out . println ( output ); return output ; } public static int sum ( int a , int b ) { int c = 0 ; c = a + b ; return c ; } public int multiply ( int a , int b ) { return a * b ; } } section{ font-size: 25px; } Eclipse IDE (JUnit4 , JUnit5) + Java Unit Test \u00b6 Now lets create tests inf src/test/java section{ font-size: 25px; } Eclipse IDE (JUnit4 , JUnit5) + Java Unit Test \u00b6 section{ font-size: 25px; } Eclipse IDE (JUnit4 , JUnit5) + Java Unit Test \u00b6 create a JUnit Case section{ font-size: 25px; } Eclipse IDE (JUnit4, JUnit5) + Java Unit Test \u00b6 section{ font-size: 25px; } Eclipse IDE (JUnit4, JUnit5) + Java Unit Test \u00b6 section{ font-size: 25px; } Eclipse IDE (JUnit4, JUnit5) + Java Unit Test \u00b6 section{ font-size: 25px; } Eclipse IDE (JUnit4, JUnit5) + Java Unit Test \u00b6 you will simple template package ce103 ; import static org.junit.jupiter.api.Assertions.* ; import org.junit.jupiter.api.AfterAll ; import org.junit.jupiter.api.AfterEach ; import org.junit.jupiter.api.BeforeAll ; import org.junit.jupiter.api.BeforeEach ; import org.junit.jupiter.api.Test ; class JavaSampleLibTest { @BeforeAll static void setUpBeforeClass () throws Exception { } @AfterAll static void tearDownAfterClass () throws Exception { } @BeforeEach void setUp () throws Exception { } @AfterEach void tearDown () throws Exception { } @Test void testSayHelloTo () { fail ( \"Not yet implemented\" ); } @Test void testSum () { fail ( \"Not yet implemented\" ); } @Test void testMultiply () { fail ( \"Not yet implemented\" ); } } section{ font-size: 25px; } Eclipse IDE (JUnit4, JUnit5) + Java Unit Test \u00b6 now lets copy tests from other projects Convert source codes to java codes ... section{ font-size: 25px; } Eclipse IDE (JUnit4, JUnit5) + Java Unit Test \u00b6 section{ font-size: 25px; } Eclipse IDE (JUnit4, JUnit5) + Java Unit Test \u00b6 section{ font-size: 25px; } Eclipse IDE (JUnit4, JUnit5) + Java Unit Test \u00b6 section{ font-size: 25px; } Eclipse IDE (JUnit4, JUnit5) + Java Unit Test \u00b6 That's a part of java unit testing... section{ font-size: 25px; } TDD (Test Driven Development) \u00b6 Test Driven Development (TDD) https://en.wikipedia.org/wiki/Test-driven_development Acceptance Test Driven Development (ATDD) https://en.wikipedia.org/wiki/Acceptance_test-driven_development Also check out https://en.wikipedia.org/wiki/Kent_Beck Extreme Programming https://en.wikipedia.org/wiki/Extreme_programming Software Design Patterns https://en.wikipedia.org/wiki/Software_design_pattern section{ font-size: 25px; } Test and Deployment Automation Management \u00b6 There are several Continues-Integration services online as follow; - Travis-CI - Appveyor - Jenkins - CircleCI - GitLab - Pantheon - GitHub - Bitrise - Flosum - Buddy - Semaphore section{ font-size: 25px; } Test and Deployment Automation Management \u00b6 Github provides Github Actions for Releases and Tests Jenkins has on promise solutions private development section{ font-size: 25px; } Test and Deployment Automation Management \u00b6 GitHub Actions provide several actions and marketspace https://github.com/marketplace/actions/build-c-project Also, we Can Provide Our Custom Actions name : hello-world on : push jobs : my-job : runs-on : ubuntu-latest steps : - name : my-step run : echo \"Hello World!\" section{ font-size: 25px; } Test and Deployment Automation Management \u00b6 section{ font-size: 25px; } Test and Deployment Automation Management \u00b6 https://github.com/ucoruh/project-cleaner/blob/main/.github/workflows/dotnet-desktop.yml This action build c# application and generates setup manually. Also there is a nice web example https://dev.to/geromegrignon/github-actions-full-ci-cd-javascript-workflow-39om section{ font-size: 25px; } References \u00b6 GitHub - MicrosoftDocs/cpp-docs: C++ Documentation section{ font-size: 25px; } \\[ End-Of-Week-4 \\]","title":"Week-4 (Unit Testing and Libraries)"},{"location":"week-4-test/ce103-week-4-test/#ce103-algorithms-and-programming-i","text":"","title":"CE103 Algorithms and Programming I"},{"location":"week-4-test/ce103-week-4-test/#week-4","text":"","title":"Week-4"},{"location":"week-4-test/ce103-week-4-test/#introduction-to-code-reusability-and-automated-testing","text":"Download DOC , SLIDE , PPTX section{ font-size: 25px; }","title":"Introduction to Code Reusability and Automated Testing"},{"location":"week-4-test/ce103-week-4-test/#outline","text":"Introduction to Code Reusability and Automated Testing Shared Library Development C C++ C# Java Unit Testing C C++ C# Java Continues Integration Platforms section{ font-size: 25px; }","title":"Outline"},{"location":"week-4-test/ce103-week-4-test/#introduction-to-code-reusability-and-automated-testing_1","text":"During this course, we will use entry-level shared library development and their tests and test automation. Also, we will see TDD(Test Driven Development) approach. section{ font-size: 25px; }","title":"Introduction to Code Reusability and Automated Testing"},{"location":"week-4-test/ce103-week-4-test/#selected-development-environment","text":"During this course, we will use Windows OS, Eclipse and Visual Studio Community Edition environments for examples. section{ font-size: 25px; }","title":"Selected Development Environment"},{"location":"week-4-test/ce103-week-4-test/#example-content","text":"Each example will include two function \" Hello <name> \" printing function with name sayHelloTo(name) and sum of two variable function for basic, sum = sum(a,b) . This sum function will add a to b and return the result to the sum variable. We will locate them in the library and use them from a console application, also we will create unit tests for testing their functionalities and return variables section{ font-size: 30px; }","title":"Example Content"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development","text":"","title":"Shared Library Development"},{"location":"week-4-test/ce103-week-4-test/#c-programming-static-library","text":"","title":"C Programming (Static Library)"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition","text":"section{ font-size: 25px; }","title":"Visual Studio Community Edition"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-1","text":"In this sample, we will create a c-lib-sample project that contains a library, executable, unit tests and unit test runners. First of all, you install Visual Studio Community Edition from the website Visual Studio 2019 Community Edition - Son \u00dccretsiz S\u00fcr\u00fcm\u00fc \u0130ndir section{ font-size: 25px; }","title":"Shared Library Development - (VS C Static Library)-1"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-2","text":"Open visual studio community edition and select create a new project section{ font-size: 25px; }","title":"Shared Library Development - (VS C Static Library)-2"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-3","text":"Select create a new project section{ font-size: 25px; }","title":"Shared Library Development - (VS C Static Library)-3"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-4","text":"Select C++ static library from the project list section{ font-size: 25px; }","title":"Shared Library Development - (VS C Static Library)-4"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-5","text":"Give static library project name section{ font-size: 25px; }","title":"Shared Library Development - (VS C Static Library)-5"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-6","text":"Default configuration come with C++ project types and setting section{ font-size: 25px; }","title":"Shared Library Development - (VS C Static Library)-6"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-7","text":"In the c-sample-lib.cpp you will sample function void fncsamplelib (){ } section{ font-size: 25px; }","title":"Shared Library Development - (VS C Static Library)-7"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-8","text":"Delete pch.h and pch.c files. Also disable use precompiled header settings from configurations and change to \"Not Using Precomplied Headers\", also you can delete precomplied Header File. section{ font-size: 13px; }","title":"Shared Library Development - (VS C Static Library)-8"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-9","text":"Customize library header name and update framework.h to samplelib.h Insert your functions inside the c-sample-lib.c and update header files also. // c-sample-lib.cpp : Defines the functions for the static library. // #include \"samplelib.h\" #include \"stdio.h\" /// <summary> /// /// </summary> /// <param name=\"name\"></param> void sayHelloTo ( char * name ){ if ( name != NULL ){ printf ( \"Hello %s \\n \" , name ); } else { printf ( \"Hello There \\n \" ); } } /// <summary> /// /// </summary> /// <param name=\"a\"></param> /// <param name=\"b\"></param> /// <returns></returns> int sum ( int a , int b ){ int c = 0 ; c = a + b ; return c ; } section{ font-size: 25px; }","title":"Shared Library Development - (VS C Static Library)-9"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-10","text":"Also, update samplelib.h as follows. #pragma once #define WIN32_LEAN_AND_MEAN // Exclude rarely-used stuff from Windows headers void sayHelloTo ( char * name ); int sum ( int a , int b ); section{ font-size: 25px; }","title":"Shared Library Development - (VS C Static Library)-10"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-11","text":"If you check the configuration you will see that for C compiler we are using Microsoft Environment and Toolkits section{ font-size: 25px; }","title":"Shared Library Development - (VS C Static Library)-11"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-12","text":"Now we can compile our library section{ font-size: 25px; }","title":"Shared Library Development - (VS C Static Library)-12"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-13","text":"You can follow operation from the output window section{ font-size: 25px; }","title":"Shared Library Development - (VS C Static Library)-13"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-14","text":"In the debug folder, we will see our output section{ font-size: 25px; }","title":"Shared Library Development - (VS C Static Library)-14"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-15","text":"Now we will add a console application c-sample-app and use our library section{ font-size: 25px; }","title":"Shared Library Development - (VS C Static Library)-15"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-16","text":"select C++ Windows Console Application from list section{ font-size: 25px; }","title":"Shared Library Development - (VS C Static Library)-16"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-17","text":"C++ Console Application Selection will generate a C++ console project we can change extension to C to compile our application as C application. we will convert c-sample-app.c to following code #include <stdio.h> /// <summary> /// /// </summary> /// <returns></returns> int main () { printf ( \"Hello World! \\n \" ); } section{ font-size: 22px; }","title":"Shared Library Development - (VS C Static Library)-17"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-18","text":"after conversion set c-sample-app as startup project and build it this will create c-sample-app.exe in the same folder with c-sample-lib.lib library if we run the application we will see only \"Hello World\" section{ font-size: 22px; }","title":"Shared Library Development - (VS C Static Library)-18"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-19","text":"now we will see two options to add a library as references in our application and use its functions. section{ font-size: 22px; }","title":"Shared Library Development - (VS C Static Library)-19"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-20","text":"First option right click references for c-sample-app and add current library as reference section{ font-size: 22px; }","title":"Shared Library Development - (VS C Static Library)-20"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-21","text":"Select Add Reference section{ font-size: 22px; }","title":"Shared Library Development - (VS C Static Library)-21"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-22","text":"Browse for solution and select c-sample-lib section{ font-size: 22px; }","title":"Shared Library Development - (VS C Static Library)-22"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-23","text":"You can check added reference from references section section{ font-size: 22px; }","title":"Shared Library Development - (VS C Static Library)-23"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-24","text":"Now we can include required headers from c-sample-lib folder and use it. We can include required header with relative path as follow or with configuration #include <stdio.h> #include \"..\\c-sample-lib\\samplelib.h\" /// <summary> /// /// </summary> /// <returns></returns> int main () { printf ( \"Hello World! \\n \" ); } section{ font-size: 22px; }","title":"Shared Library Development - (VS C Static Library)-24"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-25","text":"we can build our c-sample-app section{ font-size: 22px; }","title":"Shared Library Development - (VS C Static Library)-25"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-26","text":"Also we can only write header name #include <samplelib.h> section{ font-size: 22px; }","title":"Shared Library Development - (VS C Static Library)-26"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-27","text":"For this option, we need to configure include directories section{ font-size: 22px; }","title":"Shared Library Development - (VS C Static Library)-27"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-28","text":"select c-sample-lib header file location browse for folder section{ font-size: 22px; }","title":"Shared Library Development - (VS C Static Library)-28"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-29","text":"your full path will be added to your configuration section{ font-size: 22px; }","title":"Shared Library Development - (VS C Static Library)-29"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-30","text":"if you add header file paths to your configuration you can use header files by name in your source code #include <stdio.h> #include <samplelib.h> /// <summary> /// /// </summary> /// <returns></returns> int main () { printf ( \"Hello World! \\n \" ); } section{ font-size: 22px; }","title":"Shared Library Development - (VS C Static Library)-30"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-31","text":"we can compile the following we don't have problems but here we need to configure relative paths for configuration open include library settings and update with relative path ..\\c-sample-lib section{ font-size: 22px; }","title":"Shared Library Development - (VS C Static Library)-31"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-32","text":"now we have portable source code configuration. we can call our functions and then we can update header and library folder configurations. #include <stdio.h> #include <samplelib.h> /// <summary> /// /// </summary> /// <returns></returns> int main () { int result = 0 ; //printf(\"Hello World!\\n\"); result = sum ( 5 , 4 ); sayHelloTo ( \"Computer\" ); printf ( \"Result is %d \\n \" , result ); printf ( \"Press any key to continue... \\n \" ); getchar (); return 0 ; } section{ font-size: 22px; }","title":"Shared Library Development - (VS C Static Library)-32"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-33","text":"when you run you will see the following outputs, which mean we called library functions. section{ font-size: 22px; }","title":"Shared Library Development - (VS C Static Library)-33"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-34","text":"A static library is a code-sharing approach if you want to share your source code with your customers then you can share static libraries and header files. In another case you can use a precompiled static library with you or this library can be part of any installation then if there is an installed app and static libraries are placed on the system folder or any different location then you can use configuration files to set library path and included header paths section{ font-size: 22px; }","title":"Shared Library Development - (VS C Static Library)-34"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-35","text":"Now we can remove the project from c-sample-app references but we will set library file in configuration Before this copy static library and header files to a folder like that DebugStaticLibDeployment Set C/C++ -> General -> Additional Include Directories There is a bug in configurations and relative path not finding headers so for this reason we will set full path but this is not a good practice for team working section{ font-size: 22px; }","title":"Shared Library Development - (VS C Static Library)-35"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-36","text":"Not Working Solution .. \\ c - sample - lib \\ DebugStaticLibDeployment section{ font-size: 22px; }","title":"Shared Library Development - (VS C Static Library)-36"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-37","text":"Working Solution E : \\ ... \\ c - lib - sample \\ c - sample - lib \\ DebugStaticLibDeployment section{ font-size: 22px; }","title":"Shared Library Development - (VS C Static Library)-37"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-38","text":"Now we will set library folder that our static library placed we will set VC++ Directories -> Library Directories Here is the same issue if we use relative path it doesn't work we need to set full path for library folder section{ font-size: 22px; }","title":"Shared Library Development - (VS C Static Library)-38"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-39","text":"Working Solution E : \\ ... \\ c - lib - sample \\ c - sample - lib \\ DebugStaticLibDeployment section{ font-size: 22px; }","title":"Shared Library Development - (VS C Static Library)-39"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-40","text":"section{ font-size: 22px; }","title":"Shared Library Development - (VS C Static Library)-40"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-41","text":"Not Working .. \\ c - sample - lib \\ DebugStaticLibDeployment section{ font-size: 22px; }","title":"Shared Library Development - (VS C Static Library)-41"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-42","text":"section{ font-size: 22px; }","title":"Shared Library Development - (VS C Static Library)-42"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-43","text":"If we set full path for both libraries and headers then we need to set library name for project Linker->Input->Additional Dependencies In this case we will compile c-sample-app and we do not need to compile c-sample-lib because we copied output files to a different location and they are ready to use. section{ font-size: 22px; }","title":"Shared Library Development - (VS C Static Library)-43"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-44","text":"current source code will be like that nothing changed #include <stdio.h> #include <samplelib.h> /// <summary> /// /// </summary> /// <returns></returns> int main () { int result = 0 ; //printf(\"Hello World!\\n\"); result = sum ( 5 , 4 ); sayHelloTo ( \"Computer\" ); printf ( \"Result is %d \\n \" , result ); printf ( \"Press any key to continue... \\n \" ); getchar (); return 0 ; } section{ font-size: 22px; }","title":"Shared Library Development - (VS C Static Library)-44"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-45","text":"and output will be as follow section{ font-size: 22px; }","title":"Shared Library Development - (VS C Static Library)-45"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-46","text":"There is a option about portability that we can set for team works We will remove all library related settings from configurations and we will write them in source code Clear linker->general->additional library directories section{ font-size: 22px; }","title":"Shared Library Development - (VS C Static Library)-46"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-47","text":"Clear C/C++ -> General -> Additional Include Directories section{ font-size: 22px; }","title":"Shared Library Development - (VS C Static Library)-47"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-48","text":"Clear Linker->Input->Additional Dependencies section{ font-size: 22px; }","title":"Shared Library Development - (VS C Static Library)-48"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-49","text":"Now we can set this configurations in source code as follow #pragma comment(lib, \"..\\\\DebugStaticLibDeployment\\\\c-sample-lib.lib\") #include \"..\\DebugStaticLibDeployment\\samplelib.h\" #include <stdio.h> /// <summary> /// /// </summary> /// <returns></returns> int main () { int result = 0 ; //printf(\"Hello World!\\n\"); result = sum ( 5 , 4 ); sayHelloTo ( \"Computer\" ); printf ( \"Result is %d \\n \" , result ); printf ( \"Press any key to continue... \\n \" ); getchar (); return 0 ; } with this configuration if your friends download this code then they can run them with their environment without setting a path. section{ font-size: 30px; }","title":"Shared Library Development - (VS C Static Library)-49"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development_1","text":"","title":"Shared Library Development"},{"location":"week-4-test/ce103-week-4-test/#c-programming-static-library_1","text":"","title":"C++ Programming (Static Library)"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition_1","text":"section{ font-size: 22px; }","title":"Visual Studio Community Edition"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-cpp-static-library-1","text":"All steps are similar with C programming above, but you do not need to delete pch.h You should take care about compiled source codes for example if your code is compiled for x86 then your application also should use the x86 configuration else x64 then library should be x64 complied version. section{ font-size: 22px; }","title":"Shared Library Development - (VS Cpp Static Library)-1"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-cpp-static-library-2","text":"Source will look like the following // cpp-sample-app.cpp : This file contains the 'main' function. Program execution begins and ends there. // #pragma comment(lib, \"..\\\\DebugStaticLibDeployment\\\\cpp-sample-lib.lib\") #include \"..\\DebugStaticLibDeployment\\samplelib.h\" #include <iostream> int main () { std :: cout << \"Hello World! \\n \" ; int result = 0 ; //printf(\"Hello World!\\n\"); result = sum ( 5 , 4 ); sayHelloTo ( \"Computer\" ); printf ( \"Result is %d \\n \" , result ); printf ( \"Press any key to continue... \\n \" ); getchar (); return 0 ; } section{ font-size: 30px; }","title":"Shared Library Development - (VS Cpp Static Library)-2"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development_2","text":"","title":"Shared Library Development"},{"location":"week-4-test/ce103-week-4-test/#c-programming-static-library_2","text":"","title":"C++ Programming (Static Library)"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-wsl-option","text":"section{ font-size: 22px; }","title":"Visual Studio Community Edition WSL Option"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-cpp-wsl-static-library-1","text":"Install WSL2 GitHub - ucoruh/ns3-wsl-win10-setup: ns3 windows 10 WSL2 setup and usage Create a Linux project section{ font-size: 22px; }","title":"Shared Library Development - (VS Cpp WSL Static Library)-1"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-cpp-wsl-static-library-2","text":"Configure Platform Toolset to WSL section{ font-size: 22px; }","title":"Shared Library Development - (VS Cpp WSL Static Library)-2"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-cpp-wsl-static-library-3","text":"Select GCC for Windows Subsystem for Linux section{ font-size: 22px; }","title":"Shared Library Development - (VS Cpp WSL Static Library)-3"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-cpp-wsl-static-library-4","text":"Put a breakpoint and run debugger section{ font-size: 22px; }","title":"Shared Library Development - (VS Cpp WSL Static Library)-4"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-cpp-wsl-static-library-5","text":"In the debugger for WSL you can use local WSL installation but if you want to run it on Release setting it require a SSH connection. section{ font-size: 22px; }","title":"Shared Library Development - (VS Cpp WSL Static Library)-5"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-cpp-wsl-static-library-6","text":"Configure SSH parameters section{ font-size: 22px; }","title":"Shared Library Development - (VS Cpp WSL Static Library)-6"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-cpp-wsl-static-library-7","text":"so you have to complete the following steps. C/C++ Remote Linux Option over SSH Enable SSH SSH on Windows Subsystem for Linux (WSL) | Illuminia Studios Connect to Remote WSL Environment Ba\u011flan hedef Linux sisteminize Visual Studio | Microsoft Docs section{ font-size: 22px; }","title":"Shared Library Development - (VS Cpp WSL Static Library)-7"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development_3","text":"","title":"Shared Library Development"},{"location":"week-4-test/ce103-week-4-test/#c-programming-dinamik-library","text":"","title":"C# Programming (Dinamik Library)"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition_2","text":"section{ font-size: 22px; }","title":"Visual Studio Community Edition"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-csharp-dynamic-library-1","text":"In C# project we will create class library we have several options for this sample we will select .NET core that we can build cross platform library section{ font-size: 22px; }","title":"Shared Library Development - (VS Csharp Dynamic Library)-1"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-csharp-dynamic-library-2","text":"There is no static library option section{ font-size: 22px; }","title":"Shared Library Development - (VS Csharp Dynamic Library)-2"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-csharp-dynamic-library-3","text":"We will select .Net Core 3.1 section{ font-size: 22px; }","title":"Shared Library Development - (VS Csharp Dynamic Library)-3"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-csharp-dynamic-library-4","text":"You will have default empty class library file section{ font-size: 22px; }","title":"Shared Library Development - (VS Csharp Dynamic Library)-4"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-csharp-dynamic-library-5","text":"In the project you can see .NETcore reference section{ font-size: 22px; }","title":"Shared Library Development - (VS Csharp Dynamic Library)-5"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-csharp-dynamic-library-6","text":"We can build empty class library that generate dll for our application section{ font-size: 22px; }","title":"Shared Library Development - (VS Csharp Dynamic Library)-6"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-csharp-dynamic-library-7","text":"Now we will add Console Application but this will also use .NETCore section{ font-size: 22px; }","title":"Shared Library Development - (VS Csharp Dynamic Library)-7"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-csharp-dynamic-library-8","text":"Select New Project section{ font-size: 25px; }","title":"Shared Library Development - (VS Csharp Dynamic Library)-8"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-csharp-dynamic-library-9","text":"Set project name section{ font-size: 25px; }","title":"Shared Library Development - (VS Csharp Dynamic Library)-9"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-csharp-dynamic-library-10","text":"Select .NETCore framework section{ font-size: 25px; }","title":"Shared Library Development - (VS Csharp Dynamic Library)-10"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-csharp-dynamic-library-11","text":"You will have the following sample main.cs file using System ; namespace csharp_sample_app { class Program { static void Main ( string [] args ) { Console . WriteLine ( \"Hello World!\" ); } } } section{ font-size: 25px; }","title":"Shared Library Development - (VS Csharp Dynamic Library)-11"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-csharp-dynamic-library-12","text":"Now we can link projects with adding references open reference section section{ font-size: 25px; }","title":"Shared Library Development - (VS Csharp Dynamic Library)-12"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-csharp-dynamic-library-13","text":"browse for class library project output folder and select output dll file for console application section{ font-size: 25px; }","title":"Shared Library Development - (VS Csharp Dynamic Library)-13"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-csharp-dynamic-library-14","text":"now we can update our library code and use it in console application copy following sample to sampleLibClass file in the library section{ font-size: 25px; }","title":"Shared Library Development - (VS Csharp Dynamic Library)-14"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-csharp-dynamic-library-15","text":"using System ; namespace csharp_sample_lib { public class sampleLibClass { public static void sayHelloTo ( string name ) { if (! String . IsNullOrEmpty ( name )) { Console . WriteLine ( \"Hello \" + name ); } else { Console . WriteLine ( \"Hello There\" ); } } public static int sum ( int a , int b ) { int c = 0 ; c = a + b ; return c ; } } } section{ font-size: 25px; }","title":"Shared Library Development - (VS Csharp Dynamic Library)-15"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-csharp-dynamic-library-16","text":"After this operation copy following sample to console application and build app then you can run using csharp_sample_lib ; using System ; namespace csharp_sample_app { class Program { static void Main ( string [] args ) { Console . WriteLine ( \"Hello World!\" ); sampleLibClass . sayHelloTo ( \"Computer\" ); int result = sampleLibClass . sum ( 5 , 4 ); Console . WriteLine ( \"Results is\" + result ); Console . WriteLine ( \"Results is {0}\" , result ); Console . Read (); } } } section{ font-size: 25px; }","title":"Shared Library Development - (VS Csharp Dynamic Library)-16"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-csharp-dynamic-library-17","text":"You will see following output that mean we called DLL functions section{ font-size: 25px; }","title":"Shared Library Development - (VS Csharp Dynamic Library)-17"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-csharp-dynamic-library-18","text":"Also we can publish this console application with dll for linux environment or others for linux environment we should install .NETCore section{ font-size: 25px; }","title":"Shared Library Development - (VS Csharp Dynamic Library)-18"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-csharp-dynamic-library-19","text":"follow the link below or commands that I shared with you as below for deployment How to Install Dotnet Core on Ubuntu 20.04 \u2013 TecAdmin Step 1 \u2013 Enable Microsoft PPA wget https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb sudo dpkg -i packages-microsoft-prod.deb section{ font-size: 25px; }","title":"Shared Library Development - (VS Csharp Dynamic Library)-19"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-csharp-dynamic-library-20","text":"Step 2 \u2013 Installing Dotnet Core SDK sudo apt update sudo apt install apt-transport-https sudo apt install dotnet-sdk-3.1 section{ font-size: 25px; }","title":"Shared Library Development - (VS Csharp Dynamic Library)-20"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-csharp-dynamic-library-21","text":"Step 3 \u2013 Install Dotnet Core Runtime Only To install .NET Core Runtime on Ubuntu 20.04 LTS system, execute the commands: sudo apt update section{ font-size: 25px; }","title":"Shared Library Development - (VS Csharp Dynamic Library)-21"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-csharp-dynamic-library-22","text":"To install the previous version of .Net core runtime 2.1, type: sudo apt install dotnet-runtime-2.1 Press \u201cy\u201d for any input prompted by the installer. section{ font-size: 25px; }","title":"Shared Library Development - (VS Csharp Dynamic Library)-22"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-csharp-dynamic-library-23","text":"Step 4 \u2013 (Optional) Check .NET Core Version You can use dotnet command line utility to check installed version of .NET Core on your system. To check dotnet version, type: dotnet --version section{ font-size: 25px; }","title":"Shared Library Development - (VS Csharp Dynamic Library)-23"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-csharp-dynamic-library-24","text":"Now we will publish our application as single executable Open publish menu section{ font-size: 25px; }","title":"Shared Library Development - (VS Csharp Dynamic Library)-24"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-csharp-dynamic-library-25","text":"Select netcoreapp3.1 and Release for linux-x64 section{ font-size: 25px; }","title":"Shared Library Development - (VS Csharp Dynamic Library)-25"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-csharp-dynamic-library-26","text":"Select produce single file section{ font-size: 25px; }","title":"Shared Library Development - (VS Csharp Dynamic Library)-26"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-csharp-dynamic-library-27","text":"After succesfull publish you will have linux binary that you can run with WSL section{ font-size: 25px; }","title":"Shared Library Development - (VS Csharp Dynamic Library)-27"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-csharp-dynamic-library-28","text":"Open WSL and enter the path where this folder located And run application as follow section{ font-size: 25px; }","title":"Shared Library Development - (VS Csharp Dynamic Library)-28"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-csharp-dynamic-library-29","text":"check dotnet --version and then run application you will see similar output section{ font-size: 25px; }","title":"Shared Library Development - (VS Csharp Dynamic Library)-29"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-csharp-dynamic-library-30","text":"In this sample we created single application from settings lets try with shared library located option uncheck the \"produce single file\" option and publish again. Then you will have the following outputs section{ font-size: 25px; }","title":"Shared Library Development - (VS Csharp Dynamic Library)-30"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-csharp-dynamic-library-31","text":"If you run csharp-sample-app you will have the same output section{ font-size: 30px; }","title":"Shared Library Development - (VS Csharp Dynamic Library)-31"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development_4","text":"","title":"Shared Library Development"},{"location":"week-4-test/ce103-week-4-test/#java-programming","text":"","title":"Java Programming"},{"location":"week-4-test/ce103-week-4-test/#eclipse-ide","text":"section{ font-size: 25px; }","title":"Eclipse IDE"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-1","text":"You should download and install eclipse installer and then you should select Eclipse IDE for Java Developers Eclipse Installer 2021-09 R | Eclipse Packages section{ font-size: 25px; }","title":"Shared Library Development - (Eclipse Java Jar Library)-1"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-2","text":"section{ font-size: 25px; }","title":"Shared Library Development - (Eclipse Java Jar Library)-2"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-3","text":"section{ font-size: 25px; }","title":"Shared Library Development - (Eclipse Java Jar Library)-3"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-4","text":"section{ font-size: 25px; }","title":"Shared Library Development - (Eclipse Java Jar Library)-4"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-5","text":"select create a project section{ font-size: 25px; }","title":"Shared Library Development - (Eclipse Java Jar Library)-5"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-6","text":"select java project section{ font-size: 25px; }","title":"Shared Library Development - (Eclipse Java Jar Library)-6"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-7","text":"give project name section{ font-size: 25px; }","title":"Shared Library Development - (Eclipse Java Jar Library)-7"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-8","text":"select finish section{ font-size: 25px; }","title":"Shared Library Development - (Eclipse Java Jar Library)-8"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-9","text":"first we need to add a default package to keep everything organized section{ font-size: 25px; }","title":"Shared Library Development - (Eclipse Java Jar Library)-9"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-10","text":"then we can create our class that includes our functions section{ font-size: 25px; }","title":"Shared Library Development - (Eclipse Java Jar Library)-10"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-11","text":"give class a name section{ font-size: 25px; }","title":"Shared Library Development - (Eclipse Java Jar Library)-11"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-12","text":"you will have following class with main section{ font-size: 25px; }","title":"Shared Library Development - (Eclipse Java Jar Library)-12"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-13","text":"We will create sample java library with static functions as below. package ce103 ; import java.io.IOException ; public class JavaSampleLib { public static void sayHelloTo ( String name ) { if ( name . isBlank () || name . isEmpty ()) { System . out . println ( \"Hello \" + name ); } else { System . out . println ( \"Hello There\" ); } } public static int sum ( int a , int b ) { int c = 0 ; c = a + b ; return c ; } public static void main ( String [] args ) { // TODO Auto-generated method stub System . out . println ( \"Hello World!\" ); JavaSampleLib . sayHelloTo ( \"Computer\" ); int result = JavaSampleLib . sum ( 5 , 4 ); System . out . println ( \"Results is\" + result ); System . out . printf ( \"Results is %d \\n\" , result ); try { System . in . read (); } catch ( IOException e ) { // TODO Auto-generated catch block e . printStackTrace (); } } } section{ font-size: 25px; }","title":"Shared Library Development - (Eclipse Java Jar Library)-13"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-14","text":"also we can add main method to run our library functions. If we run this file its process main function section{ font-size: 25px; }","title":"Shared Library Development - (Eclipse Java Jar Library)-14"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-15","text":"we can see output from console as below section{ font-size: 25px; }","title":"Shared Library Development - (Eclipse Java Jar Library)-15"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-16","text":"There is no exe files java runtime environment run class files but we can export this as an executable. section{ font-size: 25px; }","title":"Shared Library Development - (Eclipse Java Jar Library)-16"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-17","text":"Select Java->Runnable JAR File section{ font-size: 25px; }","title":"Shared Library Development - (Eclipse Java Jar Library)-17"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-18","text":"click next and set output path for jar file section{ font-size: 25px; }","title":"Shared Library Development - (Eclipse Java Jar Library)-18"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-19","text":"If our project has several external dependecy then we can extract this required files (jar, so, dll) in seperated folder or we can combine them and generate a single executable jar Lets pack everthing together, Select launch configuration that has main function section{ font-size: 25px; }","title":"Shared Library Development - (Eclipse Java Jar Library)-19"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-20","text":"end of this operation we will have the following jar that we can by click section{ font-size: 20px; }","title":"Shared Library Development - (Eclipse Java Jar Library)-20"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-21","text":"When you click application if cannot run then try command line to see problem enter jar folder and run the following command java -jar JavaSampleLibExecutable.jar In my case eclipse build JDK is newer than that I installed and set for my OS If we check version we can see problem Java version 1.8.0_231 section{ font-size: 25px; }","title":"Shared Library Development - (Eclipse Java Jar Library)-21"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-22","text":"We can found installed and builded JDK for our application from Eclipse setting section{ font-size: 25px; }","title":"Shared Library Development - (Eclipse Java Jar Library)-22"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-23","text":"select environments section{ font-size: 25px; }","title":"Shared Library Development - (Eclipse Java Jar Library)-23"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-24","text":"select installed JRE or JDK section{ font-size: 25px; }","title":"Shared Library Development - (Eclipse Java Jar Library)-24"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-25","text":"you can see installed JRE or JDK home C : \\Program Files\\Java\\jdk-16.0.1 section{ font-size: 25px; }","title":"Shared Library Development - (Eclipse Java Jar Library)-25"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-26","text":"Open system environment to fix this problem section{ font-size: 25px; }","title":"Shared Library Development - (Eclipse Java Jar Library)-26"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-27","text":"section{ font-size: 25px; }","title":"Shared Library Development - (Eclipse Java Jar Library)-27"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-28","text":"Check user settings first section{ font-size: 25px; }","title":"Shared Library Development - (Eclipse Java Jar Library)-28"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-29","text":"section{ font-size: 25px; }","title":"Shared Library Development - (Eclipse Java Jar Library)-29"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-30","text":"Check system settings section{ font-size: 25px; }","title":"Shared Library Development - (Eclipse Java Jar Library)-30"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-31","text":"section{ font-size: 25px; }","title":"Shared Library Development - (Eclipse Java Jar Library)-31"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-32","text":"we will move up the JDK 16 configuration then command line will run first java section{ font-size: 25px; }","title":"Shared Library Development - (Eclipse Java Jar Library)-32"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-33","text":"Also in system setting check JAVA_HOME section{ font-size: 25px; }","title":"Shared Library Development - (Eclipse Java Jar Library)-33"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-34","text":"After this settings close current command line and open new one Write java --version if you see java version updated and 16.0.1 then settings are correct section{ font-size: 25px; }","title":"Shared Library Development - (Eclipse Java Jar Library)-34"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-35","text":"and now if we enter and run application as follow we will see output section{ font-size: 25px; }","title":"Shared Library Development - (Eclipse Java Jar Library)-35"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-36","text":"But when you click this jar its not running as you see so we have options to provide a clickable application there Launch4j is an option here Launch4j - Cross-platform Java executable wrapper section{ font-size: 25px; }","title":"Shared Library Development - (Eclipse Java Jar Library)-36"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-37","text":"you can watch this tutorial also How to convert jar to exe using Launch4J Full explanation - YouTube section{ font-size: 25px; }","title":"Shared Library Development - (Eclipse Java Jar Library)-37"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-38","text":"Download and install launch4j and open application section{ font-size: 25px; }","title":"Shared Library Development - (Eclipse Java Jar Library)-38"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-39","text":"Configure your application settings similar to below select jar file and exe output path section{ font-size: 25px; }","title":"Shared Library Development - (Eclipse Java Jar Library)-39"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-40","text":"We can customize main class if have multiple main class section{ font-size: 25px; }","title":"Shared Library Development - (Eclipse Java Jar Library)-40"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-41","text":"select console from setting for this application section{ font-size: 25px; }","title":"Shared Library Development - (Eclipse Java Jar Library)-41"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-42","text":"we can provide a single running application, this setting avoid to run multiple instances section{ font-size: 25px; }","title":"Shared Library Development - (Eclipse Java Jar Library)-42"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-43","text":"we need to set runtime environment versions section{ font-size: 25px; }","title":"Shared Library Development - (Eclipse Java Jar Library)-43"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-44","text":"you can set system parameters before running application section{ font-size: 25px; }","title":"Shared Library Development - (Eclipse Java Jar Library)-44"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-45","text":"with splash screen you can show a splash screen image for your application section{ font-size: 25px; }","title":"Shared Library Development - (Eclipse Java Jar Library)-45"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-46","text":"File attributes such as version product information is configured from version info tab section{ font-size: 25px; }","title":"Shared Library Development - (Eclipse Java Jar Library)-46"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-47","text":"if your application runtime condition has an error then you can show this customized messages also section{ font-size: 25px; }","title":"Shared Library Development - (Eclipse Java Jar Library)-47"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-48","text":"with this options save configuration file xml section{ font-size: 25px; }","title":"Shared Library Development - (Eclipse Java Jar Library)-48"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-49","text":"and compile settings section{ font-size: 25px; }","title":"Shared Library Development - (Eclipse Java Jar Library)-49"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-50","text":"You will see generated output file in log screen Compiling resources Linking Wrapping WARNING: Sign the executable to minimize antivirus false positives or use launching instead of wrapping. Successfully created C:\\Users\\ugur.coruh\\Desktop\\java-export-sample\\JavaSampleLibExecutable.exe section{ font-size: 25px; }","title":"Shared Library Development - (Eclipse Java Jar Library)-50"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-51","text":"now we can run exe by click section{ font-size: 25px; }","title":"Shared Library Development - (Eclipse Java Jar Library)-51"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-52","text":"another option here adding a bat file to run current jar file section{ font-size: 25px; }","title":"Shared Library Development - (Eclipse Java Jar Library)-52"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-53","text":"JavaSampleLibExecutable.bat java -jar JavaSampleLibExecutable.jar if we click bat file then we will automate command line task for current jar file section{ font-size: 25px; }","title":"Shared Library Development - (Eclipse Java Jar Library)-53"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-54","text":"Now return back to our java library and create another console application that use library functions section{ font-size: 25px; }","title":"Shared Library Development - (Eclipse Java Jar Library)-54"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-55","text":"section{ font-size: 25px; }","title":"Shared Library Development - (Eclipse Java Jar Library)-55"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-56","text":"section{ font-size: 25px; }","title":"Shared Library Development - (Eclipse Java Jar Library)-56"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-57","text":"You can set libraries in this step from but our library should exported for our solution section{ font-size: 25px; }","title":"Shared Library Development - (Eclipse Java Jar Library)-57"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-58","text":"Select Add External JARs... section{ font-size: 25px; }","title":"Shared Library Development - (Eclipse Java Jar Library)-58"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-59","text":"Open Exported jar folder and select section{ font-size: 25px; }","title":"Shared Library Development - (Eclipse Java Jar Library)-59"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-60","text":"Or we can select by Add jar from current workspace section{ font-size: 25px; }","title":"Shared Library Development - (Eclipse Java Jar Library)-60"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-61","text":"but in this step I won't add anything I'll add references later section{ font-size: 25px; }","title":"Shared Library Development - (Eclipse Java Jar Library)-61"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-62","text":"we will have the following project section{ font-size: 25px; }","title":"Shared Library Development - (Eclipse Java Jar Library)-62"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-63","text":"lets create a package section{ font-size: 25px; }","title":"Shared Library Development - (Eclipse Java Jar Library)-63"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-64","text":"section{ font-size: 25px; }","title":"Shared Library Development - (Eclipse Java Jar Library)-64"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-65","text":"and lets create a main class for our application section{ font-size: 25px; }","title":"Shared Library Development - (Eclipse Java Jar Library)-65"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-66","text":"check create main function section{ font-size: 25px; }","title":"Shared Library Development - (Eclipse Java Jar Library)-66"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-67","text":"section{ font-size: 25px; }","title":"Shared Library Development - (Eclipse Java Jar Library)-67"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-68","text":"right click to project and add reference section{ font-size: 25px; }","title":"Shared Library Development - (Eclipse Java Jar Library)-68"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-69","text":"you can enter same configurations from project properties section{ font-size: 25px; }","title":"Shared Library Development - (Eclipse Java Jar Library)-69"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-70","text":"Lets export our library as a JAR file and then add to our classpath section{ font-size: 25px; }","title":"Shared Library Development - (Eclipse Java Jar Library)-70"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-71","text":"Select JAR file section{ font-size: 25px; }","title":"Shared Library Development - (Eclipse Java Jar Library)-71"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-72","text":"we configured output as C : \\Users\\ugur.coruh\\Desktop\\java-export-sample\\JavaSampleLib.jar section{ font-size: 25px; }","title":"Shared Library Development - (Eclipse Java Jar Library)-72"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-73","text":"section{ font-size: 25px; }","title":"Shared Library Development - (Eclipse Java Jar Library)-73"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-74","text":"section{ font-size: 25px; }","title":"Shared Library Development - (Eclipse Java Jar Library)-74"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-75","text":"In the same export folder now we have JavaSampleLib.jar section{ font-size: 25px; }","title":"Shared Library Development - (Eclipse Java Jar Library)-75"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-76","text":"return back to java-sample-app and then add this jar file to our project Build Path->Add External Archives section{ font-size: 25px; }","title":"Shared Library Development - (Eclipse Java Jar Library)-76"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-77","text":"you will see its added to reference libraries section{ font-size: 20px; }","title":"Shared Library Development - (Eclipse Java Jar Library)-77"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-78","text":"in our JavaSampleApp.java we can use the following source codes package ce103 ; import java.io.IOException ; public class JavaSampleApp { public static void main ( String [] args ) { // TODO Auto-generated method stub System . out . println ( \"Hello World!\" ); JavaSampleLib . sayHelloTo ( \"Computer\" ); int result = JavaSampleLib . sum ( 5 , 4 ); System . out . println ( \"Results is\" + result ); System . out . printf ( \"Results is %d \\n\" , result ); try { System . in . read (); } catch ( IOException e ) { // TODO Auto-generated catch block e . printStackTrace (); } } } section{ font-size: 25px; }","title":"Shared Library Development - (Eclipse Java Jar Library)-78"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-79","text":"When we run application we will see similar output section{ font-size: 25px; }","title":"Shared Library Development - (Eclipse Java Jar Library)-79"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-80","text":"Lets export this application with its dependent library section{ font-size: 25px; }","title":"Shared Library Development - (Eclipse Java Jar Library)-80"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-81","text":"Select runnable jar section{ font-size: 25px; }","title":"Shared Library Development - (Eclipse Java Jar Library)-81"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-82","text":"Set Launch configuration and Export destination C : \\Users\\ugur.coruh\\Desktop\\java-export-sample\\JavaSampleAppSingle.jar section{ font-size: 25px; }","title":"Shared Library Development - (Eclipse Java Jar Library)-82"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-83","text":"In this option we will have single jar file In the export folder we do not see reference libraries and we can run with command line section{ font-size: 25px; }","title":"Shared Library Development - (Eclipse Java Jar Library)-83"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-84","text":"only change copy required libraries setting and then give a new name for new jar file and export C : \\Users\\ugur.coruh\\Desktop\\java-export-sample\\JavaSampleAppMultiple.jar section{ font-size: 25px; }","title":"Shared Library Development - (Eclipse Java Jar Library)-84"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-85","text":"now we have a folder that contains our libraries referenced section{ font-size: 25px; }","title":"Shared Library Development - (Eclipse Java Jar Library)-85"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-86","text":"in this file we can find our library section{ font-size: 25px; }","title":"Shared Library Development - (Eclipse Java Jar Library)-86"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-87","text":"if we test our application we will see it will work if we delete JavaSampleLib.jar and then try running application we will get error","title":"Shared Library Development - (Eclipse Java Jar Library)-87"},{"location":"week-4-test/ce103-week-4-test/#application-testing","text":"C C++ C# Java section{ font-size: 25px; }","title":"Application Testing"},{"location":"week-4-test/ce103-week-4-test/#unit-test-development","text":"Wikipedia Unit Test Library List for Each Language https://en.wikipedia.org/wiki/List_of_unit_testing_frameworks section{ font-size: 25px; }","title":"Unit Test Development"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition_3","text":"","title":"Visual Studio Community Edition"},{"location":"week-4-test/ce103-week-4-test/#c-unit-tests","text":"section{ font-size: 25px; }","title":"C Unit Tests"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-tests","text":"There is no direct C source testing but with additional frameworks. Visual Studio can test C sources. You can check the following entry https://stackoverflow.com/questions/65820/unit-testing-c-code Recommended framework is Check https://libcheck.github.io/check/web/install.html https://github.com/libcheck/check/releases section{ font-size: 25px; }","title":"Visual Studio Community Edition - C Unit Tests"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition_4","text":"","title":"Visual Studio Community Edition"},{"location":"week-4-test/ce103-week-4-test/#c-unit-tests_1","text":"section{ font-size: 25px; }","title":"C++ Unit Tests"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-tests-1","text":"C/C++ i\u00e7in birim testleri yazma - Visual Studio (Windows) | Microsoft Docs section{ font-size: 25px; }","title":"Visual Studio Community Edition - C++ Unit Tests-1"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-tests-2","text":"Use cpp-sample-lib project and add section{ font-size: 25px; }","title":"Visual Studio Community Edition - C++ Unit Tests-2"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-tests-3","text":"Select Native Unit Test section{ font-size: 25px; }","title":"Visual Studio Community Edition - C++ Unit Tests-3"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-tests-4","text":"Set project path and name section{ font-size: 25px; }","title":"Visual Studio Community Edition - C++ Unit Tests-4"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-tests-5","text":"You will have cpp-sample-test project section{ font-size: 25px; }","title":"Visual Studio Community Edition - C++ Unit Tests-5"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-tests-6","text":"Add library project from references section{ font-size: 25px; }","title":"Visual Studio Community Edition - C++ Unit Tests-6"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-tests-7","text":"Add cpp-sample-lib to cpp-sample-test project section{ font-size: 25px; }","title":"Visual Studio Community Edition - C++ Unit Tests-7"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-tests-8","text":"cpp-sample-test.cpp #include \"pch.h\" #include \"CppUnitTest.h\" #include \"..\\cpp-sample-lib\\samplelib.h\" using namespace Microsoft :: VisualStudio :: CppUnitTestFramework ; namespace cppsampletest { TEST_CLASS ( cppsampletest ) { public : TEST_METHOD ( TestSumCorrect ) { Assert :: AreEqual ( 9 , sum ( 4 , 5 )); } TEST_METHOD ( TestSumInCorrect ) { Assert :: AreEqual ( 10 , sum ( 4 , 5 )); } }; } section{ font-size: 25px; }","title":"Visual Studio Community Edition - C++ Unit Tests-8"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-tests-9","text":"section{ font-size: 25px; }","title":"Visual Studio Community Edition - C++ Unit Tests-9"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition_5","text":"","title":"Visual Studio Community Edition"},{"location":"week-4-test/ce103-week-4-test/#c-unit-tests_2","text":"MSTest + .Net Fine Code Coverage NUnit + .NetCore section{ font-size: 25px; }","title":"C# Unit Tests"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-test-mstestv2net-1","text":"Install extension fine code coverage https://marketplace.visualstudio.com/items?itemName=FortuneNgwenya.FineCodeCoverage section{ font-size: 25px; }","title":"Visual Studio Community Edition (C# Unit Test + MSTestV2+.Net)-1"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-test-mstestv2net-2","text":"Create a .Net Framework Library section{ font-size: 25px; }","title":"Visual Studio Community Edition (C# Unit Test + MSTestV2+.Net)-2"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-test-mstestv2net-3","text":"Set project framework and path section{ font-size: 25px; }","title":"Visual Studio Community Edition (C# Unit Test + MSTestV2+.Net)-3"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-test-mstestv2net-4","text":"Create library functions section{ font-size: 25px; }","title":"Visual Studio Community Edition (C# Unit Test + MSTestV2+.Net)-4"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-test-mstestv2net-5","text":"using System ; using System.Collections.Generic ; using System.Text ; namespace cs_lib_sample { public class SampleLibClass { public static string sayHelloTo ( string name ) { string result = String . Empty ; if (! String . IsNullOrEmpty ( name )) { result = \"Hello \" + name ; } else { result = \"Hello There\" ; } Console . WriteLine ( result ); return result ; } public static int sum ( int a , int b ) { int c = 0 ; c = a + b ; return c ; } public int multiply ( int a , int b ) { return a * b ; } } } section{ font-size: 25px; }","title":"Visual Studio Community Edition (C# Unit Test + MSTestV2+.Net)-5"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-test-mstestv2net-6","text":"Right click and then create unit test project section{ font-size: 25px; }","title":"Visual Studio Community Edition (C# Unit Test + MSTestV2+.Net)-6"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-test-mstestv2net-7","text":"Press OK section{ font-size: 25px; }","title":"Visual Studio Community Edition (C# Unit Test + MSTestV2+.Net)-7"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-test-mstestv2net-8","text":"Enter test code using Microsoft.VisualStudio.TestTools.UnitTesting ; using cs_lib_sample ; using System ; using System.Collections.Generic ; using System.Linq ; using System.Text ; using System.Threading.Tasks ; namespace cs_lib_sample.Tests { [TestClass()] public class SampleLibClassTests { [TestMethod()] public void testSayHelloTo () { Assert . AreEqual ( \"Hello Computer\" , SampleLibClass . sayHelloTo ( \"Computer\" ), \"Regular say hello should work\" ); } [TestMethod()] public void testSayHelloToWrong () { Assert . AreEqual ( \"Hello All\" , SampleLibClass . sayHelloTo ( \"Computer\" ), \"Regular say hello won't work\" ); } [TestMethod()] public void testSumCorrect () { Assert . AreEqual ( 9 , SampleLibClass . sum ( 4 , 5 ), \"Regular sum should work\" ); } [TestMethod()] public void testSumWrong () { Assert . AreEqual ( 10 , SampleLibClass . sum ( 4 , 5 ), \"Regular sum shouldn't work\" ); } [TestMethod()] public void testMultiply () { SampleLibClass sampleLib = new SampleLibClass (); Assert . AreEqual ( 20 , sampleLib . multiply ( 4 , 5 ), \"Regular multiplication should work\" ); } } } section{ font-size: 25px; }","title":"Visual Studio Community Edition (C# Unit Test + MSTestV2+.Net)-8"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-test-mstestv2net-9","text":"Run tests section{ font-size: 25px; }","title":"Visual Studio Community Edition (C# Unit Test + MSTestV2+.Net)-9"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-test-mstestv2net-10","text":"you will code coverage and entered or passed branches section{ font-size: 25px; }","title":"Visual Studio Community Edition (C# Unit Test + MSTestV2+.Net)-10"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition_6","text":"","title":"Visual Studio Community Edition"},{"location":"week-4-test/ce103-week-4-test/#c-unit-test-nunit-netcore","text":"section{ font-size: 25px; }","title":"C# Unit Test + NUnit + .NETCore"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-testnunitnetcore-1","text":"Use cshar-sample-lib for this example Create and add a unit test project to solution section{ font-size: 25px; }","title":"Visual Studio Community Edition (C# Unit Test+NUnit+.NETCore)-1"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-testnunitnetcore-2","text":"section{ font-size: 25px; }","title":"Visual Studio Community Edition (C# Unit Test+NUnit+.NETCore)-2"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-testnunitnetcore-3","text":"section{ font-size: 25px; }","title":"Visual Studio Community Edition (C# Unit Test+NUnit+.NETCore)-3"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-testnunitnetcore-4","text":"section{ font-size: 25px; }","title":"Visual Studio Community Edition (C# Unit Test+NUnit+.NETCore)-4"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-testnunitnetcore-5","text":"Add project reference section{ font-size: 25px; }","title":"Visual Studio Community Edition (C# Unit Test+NUnit+.NETCore)-5"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-testnunitnetcore-6","text":"section{ font-size: 25px; }","title":"Visual Studio Community Edition (C# Unit Test+NUnit+.NETCore)-6"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-testnunitnetcore-7","text":"SampleLibraryTestClasss in NUnit Project using csharp_sample_lib ; using NUnit.Framework ; namespace csharp_sample_lib_test { public class SampleLibraryTestClass { sampleLibClass sampleLib ; [SetUp] public void Setup () { sampleLib = new sampleLibClass (); } [Test] public void testSayHelloTo () { Assert . AreEqual ( \"Hello Computer\" , sampleLibClass . sayHelloTo ( \"Computer\" ), \"Regular say hello should work\" ); } [Test] public void testSayHelloToWrong () { Assert . AreEqual ( \"Hello All\" , sampleLibClass . sayHelloTo ( \"Computer\" ), \"Regular say hello won't work\" ); } [Test] public void testSumCorrect () { Assert . AreEqual ( 9 , sampleLibClass . sum ( 4 , 5 ), \"Regular sum should work\" ); } [Test] public void testSumWrong () { Assert . AreEqual ( 10 , sampleLibClass . sum ( 4 , 5 ), \"Regular sum shouldn't work\" ); } [Test] public void testMultiply () { Assert . AreEqual ( 20 , sampleLib . multiply ( 4 , 5 ), \"Regular multiplication should work\" ); } } } section{ font-size: 25px; }","title":"Visual Studio Community Edition (C# Unit Test+NUnit+.NETCore)-7"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-testnunitnetcore-8","text":"Sample class library using System ; namespace csharp_sample_lib { public class sampleLibClass { public static string sayHelloTo ( string name ) { string result = String . Empty ; if (! String . IsNullOrEmpty ( name )) { result = \"Hello \" + name ; } else { result = \"Hello There\" ; } Console . WriteLine ( result ); return result ; } public static int sum ( int a , int b ) { int c = 0 ; c = a + b ; return c ; } public int multiply ( int a , int b ) { return a * b ; } } } section{ font-size: 25px; }","title":"Visual Studio Community Edition (C# Unit Test+NUnit+.NETCore)-8"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-testnunitnetcore-9","text":"Open test explorer and run tests section{ font-size: 25px; }","title":"Visual Studio Community Edition (C# Unit Test+NUnit+.NETCore)-9"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-testnunitnetcore-10","text":"or you can run from project section{ font-size: 25px; }","title":"Visual Studio Community Edition (C# Unit Test+NUnit+.NETCore)-10"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-testnunitnetcore-11","text":"Also we can create unit test from library class, Right click the sampleLibClass and select create unit tests but this option do not provide nunit tests. section{ font-size: 25px; }","title":"Visual Studio Community Edition (C# Unit Test+NUnit+.NETCore)-11"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-testnunitnetcore-12","text":"section{ font-size: 25px; }","title":"Visual Studio Community Edition (C# Unit Test+NUnit+.NETCore)-12"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-testnunitnetcore-13","text":"section{ font-size: 25px; }","title":"Visual Studio Community Edition (C# Unit Test+NUnit+.NETCore)-13"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-testnunitnetcore-14","text":"section{ font-size: 25px; }","title":"Visual Studio Community Edition (C# Unit Test+NUnit+.NETCore)-14"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-testnunitnetcore-15","text":"using Microsoft.VisualStudio.TestTools.UnitTesting ; using csharp_sample_lib ; using System ; using System.Collections.Generic ; using System.Text ; namespace csharp_sample_lib.Tests { [TestClass()] public class sampleLibClassTests { [TestMethod()] public void sayHelloToTest () { Assert . Fail (); } [TestMethod()] public void sumTest () { Assert . Fail (); } [TestMethod()] public void multiplyTest () { Assert . Fail (); } } } section{ font-size: 25px; }","title":"Visual Studio Community Edition (C# Unit Test+NUnit+.NETCore)-15"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-testnunitnetcore-16","text":"We will not commit this changes and continue from nunit test project, the fine code Coverage also work for nunit test but not provide inline highlighting If we run tests we will have the following outputs section{ font-size: 25px; }","title":"Visual Studio Community Edition (C# Unit Test+NUnit+.NETCore)-16"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-testnunitnetcore-17","text":"Inline code highlight is part of enterprise visual studio edition Analyzing code coverage in Visual Studio - DEV Community section{ font-size: 30px; }","title":"Visual Studio Community Edition (C# Unit Test+NUnit+.NETCore)-17"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-testopencover-nunit-runner-report","text":"section{ font-size: 25px; }","title":"Visual Studio Community Edition (C# Unit Test+OpenCover + Nunit Runner + Report)"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-testopencover-nunit-runner-report-1","text":"","title":"Visual Studio Community Edition (C# Unit Test+OpenCover + Nunit Runner + Report)-1"},{"location":"week-4-test/ce103-week-4-test/#tldr","text":"Additional information you can use OpenCover + Nunit Runner + Report Generator together to setup a code coverage report but it has complex batch running process. After a few try I decided to use fine code coverage but here is the usage not tested well. First unit test runner tool doesn't support .Net Core c# - The NUnit 3 driver encountered an error while executing reflected code (NUnit.Engine.NUnitEngineException) - Stack Overflow Follow the instructions on the link CMD OpenCover \u00b7 sukhoi1/Useful-Notes Wiki \u00b7 GitHub Install OpenCover, ReportGenerator, Nunit,Runners packages then use the package installation folder to get tools that you need section{ font-size: 25px; }","title":"TL;DR"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-testopencover-nunit-runner-report-2","text":"Here is a sample for open cover, select package and copy path section{ font-size: 25px; }","title":"Visual Studio Community Edition (C# Unit Test+OpenCover + Nunit Runner + Report)-2"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-testopencover-nunit-runner-report-3","text":"Goto path and tools C : \\Users\\ugur.coruh\\.nuget\\packages\\opencover\\4.7.1221 You need to setup some batch similar with following run-test-coverage.bat set pathA = C:\\Users\\ugur.coruh\\.nuget\\packages\\opencover\\4.7.1221\\tools set pathB = C:\\Users\\ugur.coruh\\.nuget\\packages\\nunit.consolerunner\\3.12.0\\tools set pathC = C:\\Users\\ugur.coruh\\.nuget\\packages\\reportgenerator\\4.8.13\\tools\\netcoreapp3.0 set dllpath = C:\\Users\\ugur.coruh\\Desktop\\csharp-sample-lib\\csharp-sample-lib-test\\bin\\Debug\\netcoreapp3.1 \" %pathA% \\OpenCover.Console.exe\" ^ - targetargs: \" %dllpath% \\csharp-sample-lib-test.dll\" ^ - filter: \"+[csharp-sample-lib*]* -[*test]*\" ^ - target: \" %pathB% \\nunit3-console.exe\" ^ - output: \" %dllpath% \\coverReport.xml\" ^ - skipautoprops -register:user && \" %pathC% \\ReportGenerator.exe\" -reports: \" %dllpath% \\coverReport.xml\" -targetdir: \"\" %dllpath% \\coverage \" pause section{ font-size: 25px; }","title":"Visual Studio Community Edition (C# Unit Test+OpenCover + Nunit Runner + Report)-3"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-testopencover-nunit-runner-report-4","text":"but nunit3-console.exe gives error section{ font-size: 25px; }","title":"Visual Studio Community Edition (C# Unit Test+OpenCover + Nunit Runner + Report)-4"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-testopencover-nunit-runner-report-5","text":"For this compatibility issues I prefer to use fine code coverage extension. OpenCover related studies Code coverage of manual or automated tests with OpenCover for .NET applications \u2013 Automation Rhapsody Code coverage of .NET Core unit tests with OpenCover \u2013 Automation Rhapsody Sample OpenCover report Summary - Coverage Report section{ font-size: 25px; }","title":"Visual Studio Community Edition (C# Unit Test+OpenCover + Nunit Runner + Report)-5"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-testopencover-nunit-runner-report-6","text":"","title":"Visual Studio Community Edition (C# Unit Test+OpenCover + Nunit Runner + Report)-6"},{"location":"week-4-test/ce103-week-4-test/#download-and-setup-opencover-nunit-console-report-generator-without-package-manager","text":"You can also download the tools from github project pages and install on your operating system, section{ font-size: 25px; }","title":"Download and Setup OpenCover, NUnit Console, Report Generator without Package Manager"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-testopencover-nunit-runner-report-7","text":"","title":"Visual Studio Community Edition (C# Unit Test+OpenCover + Nunit Runner + Report)-7"},{"location":"week-4-test/ce103-week-4-test/#opencover","text":"Releases \u00b7 OpenCover/opencover \u00b7 GitHub section{ font-size: 25px; }","title":"OpenCover"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-testopencover-nunit-runner-report-8","text":"section{ font-size: 25px; }","title":"Visual Studio Community Edition (C# Unit Test+OpenCover + Nunit Runner + Report)-8"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-testopencover-nunit-runner-report-9","text":"Select advanced and then install for all users section{ font-size: 25px; }","title":"Visual Studio Community Edition (C# Unit Test+OpenCover + Nunit Runner + Report)-9"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-testopencover-nunit-runner-report-10","text":"section{ font-size: 25px; }","title":"Visual Studio Community Edition (C# Unit Test+OpenCover + Nunit Runner + Report)-10"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-testopencover-nunit-runner-report-11","text":"section{ font-size: 25px; }","title":"Visual Studio Community Edition (C# Unit Test+OpenCover + Nunit Runner + Report)-11"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-testopencover-nunit-runner-report-12","text":"section{ font-size: 25px; }","title":"Visual Studio Community Edition (C# Unit Test+OpenCover + Nunit Runner + Report)-12"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-testopencover-nunit-runner-report-13","text":"section{ font-size: 25px; }","title":"Visual Studio Community Edition (C# Unit Test+OpenCover + Nunit Runner + Report)-13"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-testopencover-nunit-runner-report-14","text":"section{ font-size: 25px; }","title":"Visual Studio Community Edition (C# Unit Test+OpenCover + Nunit Runner + Report)-14"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-testopencover-nunit-runner-report-15","text":"section{ font-size: 25px; }","title":"Visual Studio Community Edition (C# Unit Test+OpenCover + Nunit Runner + Report)-15"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-testopencover-nunit-runner-report-16","text":"section{ font-size: 25px; }","title":"Visual Studio Community Edition (C# Unit Test+OpenCover + Nunit Runner + Report)-16"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-testopencover-nunit-runner-report-17","text":"","title":"Visual Studio Community Edition (C# Unit Test+OpenCover + Nunit Runner + Report)-17"},{"location":"week-4-test/ce103-week-4-test/#reportgenerator","text":"Release ReportGenerator_4.8.13 \u00b7 danielpalme/ReportGenerator \u00b7 GitHub section{ font-size: 25px; }","title":"ReportGenerator"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-testopencover-nunit-runner-report-18","text":"section{ font-size: 25px; }","title":"Visual Studio Community Edition (C# Unit Test+OpenCover + Nunit Runner + Report)-18"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-testopencover-nunit-runner-report-19","text":"","title":"Visual Studio Community Edition (C# Unit Test+OpenCover + Nunit Runner + Report)-19"},{"location":"week-4-test/ce103-week-4-test/#nunit-console","text":"Downloads section{ font-size: 25px; }","title":"NUnit Console"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-testopencover-nunit-runner-report-20","text":"section{ font-size: 25px; }","title":"Visual Studio Community Edition (C# Unit Test+OpenCover + Nunit Runner + Report)-20"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-testopencover-nunit-runner-report-21","text":"section{ font-size: 25px; }","title":"Visual Studio Community Edition (C# Unit Test+OpenCover + Nunit Runner + Report)-21"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-testopencover-nunit-runner-report-22","text":"Download setup section{ font-size: 25px; }","title":"Visual Studio Community Edition (C# Unit Test+OpenCover + Nunit Runner + Report)-22"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-testopencover-nunit-runner-report-23","text":"Install setup section{ font-size: 25px; }","title":"Visual Studio Community Edition (C# Unit Test+OpenCover + Nunit Runner + Report)-23"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-testopencover-nunit-runner-report-24","text":"","title":"Visual Studio Community Edition (C# Unit Test+OpenCover + Nunit Runner + Report)-24"},{"location":"week-4-test/ce103-week-4-test/#nunit-mstest-batch-report-generation-not-tested","text":"OpenCover and ReportGenerator Unit Test Coverage in Visual Studio 2013 and 2015 \u2013 CodeHelper.Net OpenCover and ReportGenerator Unit Test Coverage in Visual Studio 2013 and 2015 - CodeProject section{ font-size: 30px; }","title":"NUnit + MSTest Batch Report Generation (Not Tested)"},{"location":"week-4-test/ce103-week-4-test/#java-unit-tests","text":"","title":"Java Unit Tests"},{"location":"week-4-test/ce103-week-4-test/#eclipse-ide-junit4-junit5","text":"section{ font-size: 25px; }","title":"Eclipse IDE (JUnit4 , JUnit5)"},{"location":"week-4-test/ce103-week-4-test/#eclipse-ide-junit4-junit5-java-unit-test","text":"In this sample we will create two example for similar library Please check the following links JUnit 5 tutorial - Learn how to write unit tests JUnit 5 JUnit 5 User Guide https://www.eclemma.org/ JUnit Hello World Example - Examples Java Code Geeks - 2021 https://yasinmemic.medium.com/java-ile-unit-test-yazmak-birim-test-ca15cf0d024b section{ font-size: 25px; }","title":"Eclipse IDE (JUnit4 , JUnit5) + Java Unit Test"},{"location":"week-4-test/ce103-week-4-test/#eclipse-ide-junit4-junit5-java-unit-test_1","text":"In normal java application we can right click the project java-sample-lib and add Junit case section{ font-size: 25px; }","title":"Eclipse IDE (JUnit4 , JUnit5) + Java Unit Test"},{"location":"week-4-test/ce103-week-4-test/#eclipse-ide-junit4-junit5-java-unit-test_2","text":"section{ font-size: 25px; }","title":"Eclipse IDE (JUnit4 , JUnit5) + Java Unit Test"},{"location":"week-4-test/ce103-week-4-test/#eclipse-ide-junit4-junit5-java-unit-test_3","text":"section{ font-size: 25px; }","title":"Eclipse IDE (JUnit4 , JUnit5) + Java Unit Test"},{"location":"week-4-test/ce103-week-4-test/#eclipse-ide-junit4-junit5-java-unit-test_4","text":"section{ font-size: 25px; }","title":"Eclipse IDE (JUnit4 , JUnit5) + Java Unit Test"},{"location":"week-4-test/ce103-week-4-test/#eclipse-ide-junit4-junit5-java-unit-test_5","text":"section{ font-size: 25px; }","title":"Eclipse IDE (JUnit4 , JUnit5) + Java Unit Test"},{"location":"week-4-test/ce103-week-4-test/#eclipse-ide-junit4-junit5-java-unit-test_6","text":"and you will have the following test class section{ font-size: 25px; }","title":"Eclipse IDE (JUnit4, JUnit5) + Java Unit Test"},{"location":"week-4-test/ce103-week-4-test/#eclipse-ide-junit4-junit5-java-unit-test_7","text":"Now we will create tests that check our function flowchart and return values We need to cover all code branches that we coded I have updated JavaSampleLib.java as follows to check outputs JavaSampleLib.java package ce103 ; public class JavaSampleLib { public static String sayHelloTo ( String name ) { String output = \"\" ; if ( ! name . isBlank () && ! name . isEmpty ()){ output = \"Hello \" + name ; } else { output = \"Hello There\" ; } System . out . println ( output ); return output ; } public static int sum ( int a , int b ) { int c = 0 ; c = a + b ; return c ; } public int multiply ( int a , int b ) { return a * b ; } // public static void main(String[] args) { // // TODO Auto-generated method stub // System.out.println(\"Hello World!\"); // // JavaSampleLib.sayHelloTo(\"Computer\"); // int result = JavaSampleLib.sum(5, 4); // System.out.println(\"Results is\" + result); // System.out.printf(\"Results is %d \\n\", result); // // // try { // System.in.read(); // } catch (IOException e) { // // TODO Auto-generated catch block // e.printStackTrace(); // } // // } } section{ font-size: 25px; }","title":"Eclipse IDE (JUnit4, JUnit5) + Java Unit Test"},{"location":"week-4-test/ce103-week-4-test/#eclipse-ide-junit4-junit5-java-unit-test_8","text":"and JavaSampleLibTest.java package ce103 ; import static org.junit.jupiter.api.Assertions.* ; import org.junit.jupiter.api.AfterAll ; import org.junit.jupiter.api.AfterEach ; import org.junit.jupiter.api.BeforeAll ; import org.junit.jupiter.api.BeforeEach ; import org.junit.jupiter.api.DisplayName ; import org.junit.jupiter.api.RepeatedTest ; import org.junit.jupiter.api.Test ; import org.junit.jupiter.params.ParameterizedTest ; import org.junit.jupiter.params.provider.MethodSource ; class JavaSampleLibTest { JavaSampleLib sampleLib ; @BeforeAll static void setUpBeforeClass () throws Exception { } @AfterAll static void tearDownAfterClass () throws Exception { } @BeforeEach void setUp () throws Exception { sampleLib = new JavaSampleLib (); } @AfterEach void tearDown () throws Exception { } @Test @DisplayName ( \"Simple Say Hello should work\" ) void testSayHelloTo () { assertEquals ( \"Hello Computer\" , JavaSampleLib . sayHelloTo ( \"Computer\" ), \"Regular say hello should work\" ); } @Test @DisplayName ( \"Simple Say Hello shouldn' work\" ) void testSayHelloToWrong () { assertEquals ( \"Hello All\" , JavaSampleLib . sayHelloTo ( \"Computer\" ), \"Regular say hello won't work\" ); } @Test @DisplayName ( \"Simple sum should work\" ) void testSumCorrect () { assertEquals ( 9 , JavaSampleLib . sum ( 4 , 5 ), \"Regular sum should work\" ); } @Test @DisplayName ( \"Simple sum shouldn't work\" ) void testSumWrong () { assertEquals ( 10 , JavaSampleLib . sum ( 4 , 5 ), \"Regular sum shouldn't work\" ); } @Test @DisplayName ( \"Simple multiplication should work\" ) void testMultiply () { assertEquals ( 20 , sampleLib . multiply ( 4 , 5 ), \"Regular multiplication should work\" ); } @RepeatedTest ( 5 ) @DisplayName ( \"Ensure correct handling of zero\" ) void testMultiplyWithZero () { assertEquals ( 0 , sampleLib . multiply ( 0 , 5 ), \"Multiple with zero should be zero\" ); assertEquals ( 0 , sampleLib . multiply ( 5 , 0 ), \"Multiple with zero should be zero\" ); } public static int [][] data () { return new int [][] { { 1 , 2 , 2 }, { 5 , 3 , 15 }, { 121 , 4 , 484 },{ 2 , 2 , 2 } }; } @ParameterizedTest @MethodSource ( value = \"data\" ) void testWithStringParameter ( int [] data ) { JavaSampleLib tester = new JavaSampleLib (); int m1 = data [ 0 ] ; int m2 = data [ 1 ] ; int expected = data [ 2 ] ; assertEquals ( expected , tester . multiply ( m1 , m2 )); } } section{ font-size: 25px; }","title":"Eclipse IDE (JUnit4 , JUnit5) + Java Unit Test"},{"location":"week-4-test/ce103-week-4-test/#eclipse-ide-junit4-junit5-java-unit-test_9","text":"if we run tests section{ font-size: 25px; }","title":"Eclipse IDE (JUnit4 , JUnit5) + Java Unit Test"},{"location":"week-4-test/ce103-week-4-test/#eclipse-ide-junit4-junit5-java-unit-test_10","text":"we will see all results there section{ font-size: 25px; }","title":"Eclipse IDE (JUnit4 , JUnit5) + Java Unit Test"},{"location":"week-4-test/ce103-week-4-test/#eclipse-ide-junit4-junit5-java-unit-test_11","text":"also we can see the code coverage of tests section{ font-size: 25px; }","title":"Eclipse IDE (JUnit4 , JUnit5) + Java Unit Test"},{"location":"week-4-test/ce103-week-4-test/#eclipse-ide-junit4-junit5-java-unit-test_12","text":"when we open our source code (just close and open again another case highlighting will not work) you will see tested part of your codes section{ font-size: 25px; }","title":"Eclipse IDE (JUnit4 , JUnit5) + Java Unit Test"},{"location":"week-4-test/ce103-week-4-test/#eclipse-ide-junit4-junit5-java-unit-test_13","text":"","title":"Eclipse IDE (JUnit4 , JUnit5) + Java Unit Test"},{"location":"week-4-test/ce103-week-4-test/#maven-java-application-junit","text":"Lets create Maven project with tests Create a maven project File -> New -> Maven Project section{ font-size: 25px; }","title":"Maven Java Application + JUnit"},{"location":"week-4-test/ce103-week-4-test/#eclipse-ide-junit4-junit5-java-unit-test_14","text":"section{ font-size: 25px; }","title":"Eclipse IDE (JUnit4 , JUnit5) + Java Unit Test"},{"location":"week-4-test/ce103-week-4-test/#eclipse-ide-junit4-junit5-java-unit-test_15","text":"Lets convert our sample java-sample-lib directories to standard folder structure for test and app division Maven \u2013 Introduction to the Standard Directory Layout Also for intro you can use this JUnit Hello World Example - Examples Java Code Geeks - 2021 Eclipse Maven Java JUnit 4.12 (pulled by Maven automatically) section{ font-size: 25px; }","title":"Eclipse IDE (JUnit4 , JUnit5) + Java Unit Test"},{"location":"week-4-test/ce103-week-4-test/#eclipse-ide-junit4-junit5-java-unit-test_16","text":"Lets give new sample java-sample-lib-mvnbut in this time we will create a maven project section{ font-size: 25px; }","title":"Eclipse IDE (JUnit4 , JUnit5) + Java Unit Test"},{"location":"week-4-test/ce103-week-4-test/#eclipse-ide-junit4-junit5-java-unit-test_17","text":"section{ font-size: 25px; }","title":"Eclipse IDE (JUnit4 , JUnit5) + Java Unit Test"},{"location":"week-4-test/ce103-week-4-test/#eclipse-ide-junit4-junit5-java-unit-test_18","text":"pom.xml file <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\" > <modelVersion> 4.0.0 </modelVersion> <groupId> com.ce103 </groupId> <artifactId> java-sample-lib-ext </artifactId> <version> 0.0.1-SNAPSHOT </version> <name> Java Sample Lib </name> <description> Java Sample with Unit Test </description> </project> section{ font-size: 25px; }","title":"Eclipse IDE (JUnit4 , JUnit5) + Java Unit Test"},{"location":"week-4-test/ce103-week-4-test/#eclipse-ide-junit4-junit5-java-unit-test_19","text":"we will add JUnit 5 for our project <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\" > <modelVersion> 4.0.0 </modelVersion> <groupId> com.ce103 </groupId> <artifactId> java-sample-lib-ext </artifactId> <version> 0.0.1-SNAPSHOT </version> <name> Java Sample Lib </name> <description> Java Sample with Unit Test </description> <dependencies> <dependency> <groupId> org.junit.jupiter </groupId> <artifactId> junit-jupiter-params </artifactId> <version> 5.7.1 </version> <scope> test </scope> </dependency> </dependencies> </project> section{ font-size: 25px; }","title":"Eclipse IDE (JUnit4 , JUnit5) + Java Unit Test"},{"location":"week-4-test/ce103-week-4-test/#eclipse-ide-junit4-junit5-java-unit-test_20","text":"it will automatically download libraries section{ font-size: 25px; }","title":"Eclipse IDE (JUnit4 , JUnit5) + Java Unit Test"},{"location":"week-4-test/ce103-week-4-test/#eclipse-ide-junit4-junit5-java-unit-test_21","text":"section{ font-size: 25px; }","title":"Eclipse IDE (JUnit4 , JUnit5) + Java Unit Test"},{"location":"week-4-test/ce103-week-4-test/#eclipse-ide-junit4-junit5-java-unit-test_22","text":"Create java sample library in ce103 package, first create java package section{ font-size: 25px; }","title":"Eclipse IDE (JUnit4 , JUnit5) + Java Unit Test"},{"location":"week-4-test/ce103-week-4-test/#eclipse-ide-junit4-junit5-java-unit-test_23","text":"In this package create library class section{ font-size: 25px; }","title":"Eclipse IDE (JUnit4 , JUnit5) + Java Unit Test"},{"location":"week-4-test/ce103-week-4-test/#eclipse-ide-junit4-junit5-java-unit-test_24","text":"section{ font-size: 25px; }","title":"Eclipse IDE (JUnit4 , JUnit5) + Java Unit Test"},{"location":"week-4-test/ce103-week-4-test/#eclipse-ide-junit4-junit5-java-unit-test_25","text":"copy content from other library package ce103 ; public class JavaSampleLib { public static String sayHelloTo ( String name ) { String output = \"\" ; if ( ! name . isBlank () && ! name . isEmpty ()){ output = \"Hello \" + name ; } else { output = \"Hello There\" ; } System . out . println ( output ); return output ; } public static int sum ( int a , int b ) { int c = 0 ; c = a + b ; return c ; } public int multiply ( int a , int b ) { return a * b ; } } section{ font-size: 25px; }","title":"Eclipse IDE (JUnit4 , JUnit5) + Java Unit Test"},{"location":"week-4-test/ce103-week-4-test/#eclipse-ide-junit4-junit5-java-unit-test_26","text":"Now lets create tests inf src/test/java section{ font-size: 25px; }","title":"Eclipse IDE (JUnit4 , JUnit5) + Java Unit Test"},{"location":"week-4-test/ce103-week-4-test/#eclipse-ide-junit4-junit5-java-unit-test_27","text":"section{ font-size: 25px; }","title":"Eclipse IDE (JUnit4 , JUnit5) + Java Unit Test"},{"location":"week-4-test/ce103-week-4-test/#eclipse-ide-junit4-junit5-java-unit-test_28","text":"create a JUnit Case section{ font-size: 25px; }","title":"Eclipse IDE (JUnit4 , JUnit5) + Java Unit Test"},{"location":"week-4-test/ce103-week-4-test/#eclipse-ide-junit4-junit5-java-unit-test_29","text":"section{ font-size: 25px; }","title":"Eclipse IDE (JUnit4, JUnit5) + Java Unit Test"},{"location":"week-4-test/ce103-week-4-test/#eclipse-ide-junit4-junit5-java-unit-test_30","text":"section{ font-size: 25px; }","title":"Eclipse IDE (JUnit4, JUnit5) + Java Unit Test"},{"location":"week-4-test/ce103-week-4-test/#eclipse-ide-junit4-junit5-java-unit-test_31","text":"section{ font-size: 25px; }","title":"Eclipse IDE (JUnit4, JUnit5) + Java Unit Test"},{"location":"week-4-test/ce103-week-4-test/#eclipse-ide-junit4-junit5-java-unit-test_32","text":"you will simple template package ce103 ; import static org.junit.jupiter.api.Assertions.* ; import org.junit.jupiter.api.AfterAll ; import org.junit.jupiter.api.AfterEach ; import org.junit.jupiter.api.BeforeAll ; import org.junit.jupiter.api.BeforeEach ; import org.junit.jupiter.api.Test ; class JavaSampleLibTest { @BeforeAll static void setUpBeforeClass () throws Exception { } @AfterAll static void tearDownAfterClass () throws Exception { } @BeforeEach void setUp () throws Exception { } @AfterEach void tearDown () throws Exception { } @Test void testSayHelloTo () { fail ( \"Not yet implemented\" ); } @Test void testSum () { fail ( \"Not yet implemented\" ); } @Test void testMultiply () { fail ( \"Not yet implemented\" ); } } section{ font-size: 25px; }","title":"Eclipse IDE (JUnit4, JUnit5) + Java Unit Test"},{"location":"week-4-test/ce103-week-4-test/#eclipse-ide-junit4-junit5-java-unit-test_33","text":"now lets copy tests from other projects Convert source codes to java codes ... section{ font-size: 25px; }","title":"Eclipse IDE (JUnit4, JUnit5) + Java Unit Test"},{"location":"week-4-test/ce103-week-4-test/#eclipse-ide-junit4-junit5-java-unit-test_34","text":"section{ font-size: 25px; }","title":"Eclipse IDE (JUnit4, JUnit5) + Java Unit Test"},{"location":"week-4-test/ce103-week-4-test/#eclipse-ide-junit4-junit5-java-unit-test_35","text":"section{ font-size: 25px; }","title":"Eclipse IDE (JUnit4, JUnit5) + Java Unit Test"},{"location":"week-4-test/ce103-week-4-test/#eclipse-ide-junit4-junit5-java-unit-test_36","text":"section{ font-size: 25px; }","title":"Eclipse IDE (JUnit4, JUnit5) + Java Unit Test"},{"location":"week-4-test/ce103-week-4-test/#eclipse-ide-junit4-junit5-java-unit-test_37","text":"That's a part of java unit testing... section{ font-size: 25px; }","title":"Eclipse IDE (JUnit4, JUnit5) + Java Unit Test"},{"location":"week-4-test/ce103-week-4-test/#tdd-test-driven-development","text":"Test Driven Development (TDD) https://en.wikipedia.org/wiki/Test-driven_development Acceptance Test Driven Development (ATDD) https://en.wikipedia.org/wiki/Acceptance_test-driven_development Also check out https://en.wikipedia.org/wiki/Kent_Beck Extreme Programming https://en.wikipedia.org/wiki/Extreme_programming Software Design Patterns https://en.wikipedia.org/wiki/Software_design_pattern section{ font-size: 25px; }","title":"TDD (Test Driven Development)"},{"location":"week-4-test/ce103-week-4-test/#test-and-deployment-automation-management","text":"There are several Continues-Integration services online as follow; - Travis-CI - Appveyor - Jenkins - CircleCI - GitLab - Pantheon - GitHub - Bitrise - Flosum - Buddy - Semaphore section{ font-size: 25px; }","title":"Test and Deployment Automation Management"},{"location":"week-4-test/ce103-week-4-test/#test-and-deployment-automation-management_1","text":"Github provides Github Actions for Releases and Tests Jenkins has on promise solutions private development section{ font-size: 25px; }","title":"Test and Deployment Automation Management"},{"location":"week-4-test/ce103-week-4-test/#test-and-deployment-automation-management_2","text":"GitHub Actions provide several actions and marketspace https://github.com/marketplace/actions/build-c-project Also, we Can Provide Our Custom Actions name : hello-world on : push jobs : my-job : runs-on : ubuntu-latest steps : - name : my-step run : echo \"Hello World!\" section{ font-size: 25px; }","title":"Test and Deployment Automation Management"},{"location":"week-4-test/ce103-week-4-test/#test-and-deployment-automation-management_3","text":"section{ font-size: 25px; }","title":"Test and Deployment Automation Management"},{"location":"week-4-test/ce103-week-4-test/#test-and-deployment-automation-management_4","text":"https://github.com/ucoruh/project-cleaner/blob/main/.github/workflows/dotnet-desktop.yml This action build c# application and generates setup manually. Also there is a nice web example https://dev.to/geromegrignon/github-actions-full-ci-cd-javascript-workflow-39om section{ font-size: 25px; }","title":"Test and Deployment Automation Management"},{"location":"week-4-test/ce103-week-4-test/#references","text":"GitHub - MicrosoftDocs/cpp-docs: C++ Documentation section{ font-size: 25px; } \\[ End-Of-Week-4 \\]","title":"References"},{"location":"week-5-c/ce103-week-5-c/","text":"CE103 Algorithms and Programming I \u00b6 Week-5 \u00b6 C Functional Console Programming \u00b6 Download DOC , SLIDE , PPTX C Functional Console Programming \u00b6 Books and Resources \u00b6 free-programming-books/free-programming-books-langs.md at master \u00b7 EbookFoundation/free-programming-books \u00b7 GitHub goalkicker-C Programming Notes for Professionals book C Functional Console Programming \u00b6 We will use the following course notes and examples. section{ font-size: 25px; } Learn C Programming C Tutorials - Introduction to C Programming Language The C and C++ programming tutorials, hands-on approach with program examples, code samples and tons of output images using Visual C++, C++ Builder, Linux gcc and g++ compilers and IDE CS50x 2021 C Programming For Dummies C reference - cppreference.com https://c.happycodings.com/ C Programming \u00b6 C is a versatile programming language. It is useful for creating software such as operating systems, databases, and compilers. For novices, C programming is a great language to learn to code in. Our C tutorials will take you step by step through the process of learning C programming. Before starting you should check your development enviroment. You will open visual studio community edition and create a C++ console application then rename *.cpp file to *.c for triggering c complier. Before starting you should understand the executable generation flows #include <stdio.h> int main ( void ) { printf ( \"hello, world\" ); } and how we convert source code to binary code 01111111 01000101 01001100 01000110 00000010 00000001 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000010 00000000 00111110 00000000 00000001 00000000 00000000 00000000 10110000 00000101 01000000 00000000 00000000 00000000 00000000 00000000 01000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 11010000 00010011 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 01000000 00000000 00111000 00000000 00001001 00000000 01000000 00000000 00100100 00000000 00100001 00000000 00000110 00000000 00000000 00000000 00000101 00000000 00000000 00000000 01000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 01000000 00000000 01000000 00000000 00000000 00000000 00000000 00000000 01000000 00000000 01000000 00000000 00000000 00000000 00000000 00000000 11111000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 11111000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00001000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000011 00000000 00000000 00000000 00000100 00000000 00000000 00000000 00111000 00000010 00000000 00000000 00000000 00000000 00000000 00000000 ... There is a sandbox in CS50 harvard course Week 0 - CS50x https://sandbox.cs50.io/ you can use it for online compiler $ make hello clang -fsanitize = signed-integer-overflow -fsanitize = undefined -ggdb3 -O0 -std = c11 -Wall -Werror -Wextra -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wshadow hello.c -lcrypt -lcs50 -lm -o hello $ ./hello hello, world if you want to make samething in windows environment you should create the following makefile near the hello.c Makefile # This is the default target, which will be built when # you invoke make .PHONY : all all : hello # This rule tells make how to build hello from hello.cpp hello : hello . c g++ -o hello hello.c # This rule tells make to copy hello to the binaries subdirectory, # creating it if necessary .PHONY : install install : mkdir -p binaries cp -p hello binaries # This rule tells make to delete hello and hello.o .PHONY : clean clean : rm -f hello C: \\U sers \\u gur.coruh \\D esktop \\h ello-make>make hello g++ -o hello hello.c C: \\U sers \\u gur.coruh \\D esktop \\h ello-make>dir Volume in drive C is Windows Volume Serial Number is 8C3C-8F8C Directory of C: \\U sers \\u gur.coruh \\D esktop \\h ello-make 11 /02/2021 01 :44 AM <DIR> . 11 /02/2021 01 :44 AM <DIR> .. 11 /02/2021 01 :15 AM 73 hello.c 11 /02/2021 01 :44 AM 54 ,022 hello.exe 11 /02/2021 01 :43 AM 458 Makefile 3 File ( s ) 54 ,553 bytes 2 Dir ( s ) 101 ,382,164,480 bytes free C: \\U sers \\u gur.coruh \\D esktop \\h ello-make>hello.exe hello, world C: \\U sers \\u gur.coruh \\D esktop \\h ello-make> $ clang hello.c $ ls a.out* hello* hello.c $ ./a.out hello, world $ clang -o hello hello.c $ ls a.out* hello* hello.c $ ./hello hello, world $ ls hello.c $ clang -o hello hello.c -lcs50 $ ls hello* hello.c $ ./hello hello, world $ Also you can use visual studio community edition. Preprocessing \u00b6 get included file declarations #include <cs50.h> #include <stdio.h> int main ( void ) { string name = get_string ( \"What's your name? \" ); printf ( \"hello, %s \\n \" , name ); } to this string get_string ( string prompt ); int printf ( string format , ...); int main ( void ) { string name = get_string ( \"What's your name? \" ); printf ( \"hello, %s \\n \" , name ); } Compiling \u00b6 convert source code to assembler code ... main: # @main .cfi_startproc # BB#0: pushq %rbp .Ltmp0: .cfi_def_cfa_offset 16 .Ltmp1: .cfi_offset %rbp, -16 movq %rsp, %rbp .Ltmp2: .cfi_def_cfa_register %rbp subq $16, %rsp xorl %eax, %eax movl %eax, %edi movabsq $.L.str, %rsi movb $0, %al callq get_string movabsq $.L.str.1, %rdi movq %rax, -8(%rbp) movq -8(%rbp), %rsi movb $0, %al callq printf ... Assembling \u00b6 convert assembler to opcodes ... main: # @main .cfi_startproc # BB#0: pushq %rbp .Ltmp0: .cfi_def_cfa_offset 16 .Ltmp1: .cfi_offset %rbp, -16 movq %rsp, %rbp .Ltmp2: .cfi_def_cfa_register %rbp subq $16, %rsp xorl %eax, %eax movl %eax, %edi movabsq $.L.str, %rsi movb $0, %al callq get_string movabsq $.L.str.1, %rdi movq %rax, -8(%rbp) movq -8(%rbp), %rsi movb $0, %al callq printf ... to thisinking \u00b6 hello.c 01111111 01000101 01001100 01000110 00000010 00000001 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 ... stdio.c 01111111 01000101 01001100 01000110 00000010 00000001 00000001 00000000 00000000 00000000 00000000 00000000 00000000 ... cs50.c 01111111 01000101 01001100 01000110 00000010 00000001 00000001 00000000 00000000 00000000 00000000 00000000 00000000 ... combine binary codes to generate exentroduction \u00b6 Keywords and Identifiers \u00b6 This tutorial will teach you about keywords, which are reserved words in C programming that are part of the syntax. You will also be taught about identifiers and how to name them. Character set \u00b6 A character set is a collection of alphabets, letters, and special characters that are supported by the C programming language. As variables and functions, C accepts both lowercase and uppercase alphabets. Alphabets \u00b6 Uppercase : A B C ................................... X Y Z Lowercase : a b c ...................................... x y z Digits \u00b6 0 1 2 3 4 5 6 7 8 9 Special Characters \u00b6 Special Characters in C Programming , < > . - ( ) ; $ : % [ ] # ? ' & { } \" ^ ! * / - \\ ~ + White space Characters A newline, a horizontal tab, a carriage return, and a form feed are all examples of punctuation. C Keywords \u00b6 Keywords are reserved words in programming that have special meanings to the compiler. Keywords are syntax elements that cannot be used as identifiers. As an example: int money ; In this case, int is a keyword indicating that money is a variable of type int (integer). Because C is a case-sensitive language, all keywords must be written in lowercase. The following is a list of all the keywords permitted in ANSI C. C Keywords auto double int struct break else long switch case enum register typedef char extern return union continue for signed void do if static while default goto sizeof volatile const float short unsigned All of these keywords, as well as their syntax and application, will be covered in their respective topics. The Complete List of all 32 C Programming Keywords (With Examples) - Programiz C Identifiers \u00b6 The term \"identifier\" refers to the name given to entities such as variables, functions, structures, and so on. Identifiers must be distinct. They are created to give a unique name to an entity in order to identify it during program execution. As an example: int money ; double accountBalance ; money and accountBalance are identifiers in this context. Also, keep in mind that identifier names must be distinct from keyword names. Because int is a keyword, it cannot be used as an identifier. Rules for naming identifiers \u00b6 Letters (including capital and lowercase letters), numbers, and underscores can all be used in a valid identification. An identifier's initial letter should be either a letter or an underscore. Keywords such as int, while, and so on cannot be used as identifiers. There are no restrictions on the length of an identification. However, if the identifier is larger than 31 characters, you may have issues with some compilers. If you follow the above criterion, you can use any name as an identifier; nevertheless, provide meaningful names to identifiers that make sense. C Variables, Constants and Literals \u00b6 This article will teach you about variables and the rules for naming variables. You will also learn about different literals and how to build constants in C programming. Variables \u00b6 A variable in programming is a container (storage space) for data. Each variable should be given a unique name to denote the storage region (identifier). Variable names are simply a graphical representation of a memory location. As an example: int playerScore = 95 ; In this case, playerScore is an int variable. The variable is given the integer value 95 in this case. A variable's value may be altered, thus the term variable. char ch = 'a' ; // some code ch = 'l' ; Rules for naming a variable \u00b6 A variable name can only contain characters (uppercase and lowercase), numbers, and underscores. A variable's initial letter should be either a letter or an underscore. There are no restrictions on the length of a variable name (identifier). However, if the variable name is larger than 31 characters, you may have issues with some compilers. Please keep in mind that you should always aim to give variables meaningful names. For example, firstName is a more appropriate variable name than fn . C is a highly typed programming language. This means that once a variable is declared, it cannot be modified. As an example: int number = 5 ; // integer variable number = 5.5 ; // error double number ; // error In this case, the type of number variable is int. This variable cannot be assigned the floating-point (decimal) value 5.5. Furthermore, you cannot change the variable's data type to double. By the way, in order to hold decimal values in C, you must designate their type as double or float. Literals \u00b6 Literals are data that are used to represent fixed values. They can be directly utilized in the code. For example: 1, 2.5, 'c,' and so on. Literals are 1, 2.5, and 'c' in this case. Why? These words cannot have various values assigned to them. 1. Integers \u00b6 An integer is a numeric literal (related with numbers) that does not have any fractional or exponential components. In C programming, there are three types of integer literals: digits (base 10) the number octal (base 8) hexadecimal (base 16) For example: Decimal : 0 , -9 , 22 etc Octal : 021 , 077 , 033 etc Hexadecimal : 0x7f , 0x2a , 0x521 etc In C, octal begins with a 0 while hexadecimal begins with a 0x. 2. Floating-point Literals \u00b6 A floating-point literal is a numeric literal with a fractional or exponent form. As an example: -2.0 0.0000234 -0.22E-5 Please note that \\[ E-5 = 10^{-5} \\] 3. Characters \u00b6 Enclosing a single character inside single quote marks yields a character literal. For example, 'a','m', 'F', '2', \", and so on. 4. Escape Sequences \u00b6 In C programming, it is sometimes important to employ characters that cannot be typed or have specific meaning. For instance, newline (enter), tab, question mark, and so on. Escape sequences are utilized to utilise these characters. Escape Sequences Character \\b Backspace \\f Form feed \\n Newline \\r Return \\t Horizontal Tab \\v Vertical Tab `\\\\ Backslash \\' Single quotation mark \\\" Double quotation mark \\? Question mark \\0 Null character 5. String Literals \u00b6 A string literal is a string of characters surrounded by double quotation marks. As an example: \"good\" //string constant \"\" //null string constant \" \" //string constant of six white space \"x\" //string constant having a single character. \"Earth is round \\n \" //prints string with a newline Constants \u00b6 The const keyword can be used to declare a variable whose value cannot be modified. This will result in a constant. As an example, const double PI = 3.14 ; We've introduced the keyword const. PI is a symbolic constant in this context; its value cannot be modified. const double PI = 3.14 ; PI = 2.9 ; //Error You may also use the #define preprocessor directive to declare a constant. C Data Types \u00b6 In this course, you will learn about basic data types in C programming, such as int, float, and char. Data types are variable declarations in C programming. The kind and quantity of data linked with variables are determined by this. As an example, int myVar ; In this case, myVar is an int (integer) variable. int has a size of 4 bytes. Basic types \u00b6 Here's a table containing commonly used types in C programming for quick access. Type Size(bytes) Format Specifiers int at least 2, usually 4 %d %i char 1 %c float 4 %f double 8 %lf short int 2 usually %hd unsigned int at least 2, usually 4 %u long int at least 4, usually 8 %ld %li long long int at least 8 %lld %lli unsigned long int at least 4 %lu unsigned long long int at least 8 %llu signed char 1 %c usigned char 1 %c long double at least 10, usually 12 or 16 %Lf int \u00b6 Integers are entire integers with zero, positive, and negative values but no decimal values. For instance, \\(0\\) , \\(-5\\) , and \\(10\\) In order to declare an integer variable, we can use int . int id ; In this case, id is an integer variable. In C programming, you can define many variables at the same time. As an example, int id , age ; Integers are typically \\(\\text{4 bytes}\\) in size ( \\(\\text{32 bits}\\) ). It may also take $2^{32} $ different states from \\(-2147483648\\) to \\(2147483647\\) . float and double \u00b6 Real values are stored in float and double variables. float salary ; double price ; Floating-point numbers in C can also be expressed in exponential form. As an example, float normalizationFactor = 22.442e2 ; What is the distinction between float and double? Float (single precision float data type) has a size of 4 bytes. And double (double precision float data type) is 8 bytes in size. char \u00b6 The keyword char is used to declare variables of the character type. As an example, char test = 'h' ; The character variable is 1 byte in size. void \u00b6 void is an unfinished type. It signifies \"nothing\" or \"nothing of the sort.\" You might conceive of emptiness as the absence of something. If a function does not return anything, its return type should be void. It is important to note that void variables cannot be created. short and long \u00b6 If you need to utilize a huge number, a type specifier long can be used. Here's how it works: long a ; long long b ; long double c ; Variables a and b can store integer values in this case. In addition, c may hold a floating-point number. You can use short if you are certain that just a tiny integer range between \\(-32767, +32767\\) will be utilized. short d ; The sizeof() operator may always be used to determine the size of a variable. #include <stdio.h> int main () { short a ; long b ; long long c ; long double d ; printf ( \"size of short = %d bytes \\n \" , sizeof ( a )); printf ( \"size of long = %d bytes \\n \" , sizeof ( b )); printf ( \"size of long long = %d bytes \\n \" , sizeof ( c )); printf ( \"size of long double= %d bytes \\n \" , sizeof ( d )); return 0 ; } signed and unsigned \u00b6 Signed and unsigned are type modifiers in C. You may use them to change the data storage of a data type. As an example, unsigned int x ; int y ; Because we applied the unsigned modifier, the variable x can only retain zero and positive numbers. Given that int has a capacity of 4 bytes , variable y can have values ranging from - \\(2^{31}\\) to \\(2^{31}-1\\) , But variable x can hold values ranging from \\(0\\) to \\(2^{32}-1\\) . Other data types defined in C programming are: \u00b6 bool Type Enumerated type Complex types Derived Data Types \u00b6 Derived types are data types that are derived from basic data types. Arrays, pointers, function types, structures, and so on are examples. C Input Output (I/O) \u00b6 In this lesson, you will learn how to utilize the scanf() function to accept user input and the printf() method to display output to the user. C Output \u00b6 printf() is a common output function in C programming. The function outputs formatted data to the screen. As an example, Example 1: C Output \u00b6 #include <stdio.h> int main () { // Displays the string inside quotations printf ( \"C Programming\" ); return 0 ; } Output C Programming How does this software function? The main() function is required in all legal C programs. The execution of the code begins at the commencement of the main() function. The printf() function is a library function that is used to provide formatted output to the screen. The string is printed within quote marks by the function. In order to utilize printf() in our program, we must include the stdio.h header file using the #include <stdio.h> declaration. The \"Exit status\" of the program is the return 0; statement within the main() method. It's entirely voluntary. Example 2: Integer Output \u00b6 #include <stdio.h> int main () { int testInteger = 5 ; printf ( \"Number = %d\" , testInteger ); return 0 ; } Output Number = 5 To print int types, we utilize the %d format specifier. The value of testInteger will be used in instead of the %d inside the quotes. Example 3: float and double Output \u00b6 #include <stdio.h> int main () { float number1 = 13.5 ; double number2 = 12.4 ; printf ( \"number1 = %f \\n \" , number1 ); printf ( \"number2 = %lf\" , number2 ); return 0 ; } Output number1 = 13 .500000 number2 = 12 .400000 We utilize the %f format specifier to print floats . Similarly, to display double numbers, we use %lf . Example 4: Print Characters \u00b6 #include <stdio.h> int main () { char chr = 'a' ; printf ( \"character = %c\" , chr ); return 0 ; } Output character = a We utilize the %c format specifier to print char. C Input \u00b6 scanf() is a widely used function in C programming to accept user input. The scanf() function reads formatted input from typical input devices like keyboards. Example 5: Integer Input/Output \u00b6 #include <stdio.h> int main () { int testInteger ; printf ( \"Enter an integer: \" ); scanf ( \"%d\" , & testInteger ); printf ( \"Number = %d\" , testInteger ); return 0 ; } Output Enter an integer: 4 Number = 4 To accept int input from the user, we utilized the %d format specifier inside the scanf() method. When a user enters an integer, it is saved in the variable testInteger . You'll see that we used &testInteger within scanf () . This is due to the fact that &testInteger obtains the address of testInteger , and the value given by the user is saved in that address. Example 6: Float and Double Input/Output \u00b6 #include <stdio.h> int main () { float num1 ; double num2 ; printf ( \"Enter a number: \" ); scanf ( \"%f\" , & num1 ); printf ( \"Enter another number: \" ); scanf ( \"%lf\" , & num2 ); printf ( \"num1 = %f \\n \" , num1 ); printf ( \"num2 = %lf\" , num2 ); return 0 ; } Output Enter a number: 12 .523 Enter another number: 10 .2 num1 = 12 .523000 num2 = 10 .200000 For float and double , we use the format specifiers %f and %lf , respectively. Example 7: C Character I/O \u00b6 #include <stdio.h> int main () { char chr ; printf ( \"Enter a character: \" ); scanf ( \"%c\" , & chr ); printf ( \"You entered %c.\" , chr ); return 0 ; } Output Enter a character: g You entered g When a user enters a character into the aforementioned software, the character itself is not saved. An integer value (ASCII value) is instead stored. When we use the %c text format to represent that value, the input character is displayed. The ASCII value of the character is printed when we utilize %d to show it. Example 8: ASCII Value \u00b6 #include <stdio.h> int main () { char chr ; printf ( \"Enter a character: \" ); scanf ( \"%c\" , & chr ); // When %c is used, a character is displayed printf ( \"You entered %c. \\n \" , chr ); // When %d is used, ASCII value is displayed printf ( \"ASCII value is %d.\" , chr ); return 0 ; } Output Enter a character: g You entered g. ASCII value is 103 . I/O Multiple Values \u00b6 Here's how to take numerous user inputs and show them. #include <stdio.h> int main () { int a ; float b ; printf ( \"Enter integer and then a float: \" ); // Taking multiple inputs scanf ( \"%d%f\" , & a , & b ); printf ( \"You entered %d and %f\" , a , b ); return 0 ; } Output Enter integer and then a float: -3 3 .4 You entered -3 and 3 .400000 Format Specifiers for I/O \u00b6 As you can see from the samples above, we apply %d for int %f for float %lf for double %c for char The following is a collection of widely used C data types and associated format specifiers. Type Size(bytes) Format Specifiers int at least 2, usually 4 %d %i char 1 %c float 4 %f double 8 %lf short int 2 usually %hd unsigned int at least 2, usually 4 %u long int at least 4, usually 8 %ld %li long long int at least 8 %lld %lli unsigned long int at least 4 %lu unsigned long long int at least 8 %llu signed char 1 %c usigned char 1 %c long double at least 10, usually 12 or 16 %Lf C Programming Operators \u00b6 With the assistance of examples, you will learn about several operators in C programming in this course. An operator is a symbol that performs an operation on a value or variable. For example, the operator + is used to compute addition. C has a diverse set of operators to execute a variety of tasks. C Arithmetic Operators \u00b6 An arithmetic operator performs mathematical operations such as addition, subtraction, multiplication, division etc on numerical values (constants and variables). Operator Meaning of Operator + Addition or unary plus - Substraction or unary minus * Multiplication / Division % Remainder after division (modulo division) Example 1: Arithmetic Operators \u00b6 // Working of arithmetic operators #include <stdio.h> int main () { int a = 9 , b = 4 , c ; c = a + b ; printf ( \"a+b = %d \\n \" , c ); c = a - b ; printf ( \"a-b = %d \\n \" , c ); c = a * b ; printf ( \"a*b = %d \\n \" , c ); c = a / b ; printf ( \"a/b = %d \\n \" , c ); c = a % b ; printf ( \"Remainder when a divided by b = %d \\n \" , c ); return 0 ; } Output a+b = 13 a-b = 5 a*b = 36 a/b = 2 Remainder when a divided by b = 1 As you might guess, the operators +, -, and * calculate addition, subtraction, and multiplication, respectively. 9/4 Equals 2.25 in standard math. In the program, however, the result is 2 . This is due to the fact that both variables a and b are integers. As a result, the output is also an integer. The compiler ignores the word following the decimal point and displays response 2 rather than 2.25 . The residual is computed using the modulo operator percent. The remaining is 1 when a=9 is divided by b=4 . Only integers can be used with the percent operator. Assume that a = 5.0, b = 2.0, c = 5 , and d = 2 . After that, in C programming. // Either one of the operands is a floating-point number a/b = 2 .5 a/d = 2 .5 c/b = 2 .5 // Both operands are integers c/d = 2 C Increment and Decrement Operators \u00b6 To alter the value of an operand (constant or variable) by one, C programming offers two operators: increment ++ and decrease -- . Increment ++ raises the value by one, and decrement -- lowers the value by one. These two operators are unary, which means they only work on a single operand. Example 2: Increment and Decrement Operators \u00b6 // Working of increment and decrement operators #include <stdio.h> int main () { int a = 10 , b = 100 ; float c = 10.5 , d = 100.5 ; printf ( \"++a = %d \\n \" , ++ a ); printf ( \"--b = %d \\n \" , -- b ); printf ( \"++c = %f \\n \" , ++ c ); printf ( \"--d = %f \\n \" , -- d ); return 0 ; } Output ++a = 11 --b = 99 ++c = 11 .500000 --d = 99 .500000 The operators ++ and -- are used as prefixes here. These two operators, like a++ and a-- can also be used as postfixes. Increment ++ and Decrement -- Operator as Prefix and Postfix \u00b6 The increment operator ++ in programming (Java, C, C++, JavaScript, and so on) increments the value of a variable by one. Similarly, the decrement operator -- reduces a variable's value by one. a = 5 ++a ; // a becomes 6 a++ ; // a becomes 7 --a ; // a becomes 6 a-- ; // a becomes 5 So far, so straightforward. When these two operators are employed as a prefix and a postfix, there is a significant difference. ++ and -- operator as prefix and postfix \u00b6 When you use the ++ operator as a prefix, such as: ++var, the value of var is increased by one and then returned. If you use the ++ operator as a postfix, such as var++, the original value of var is returned first, followed by a one-digit increase of var. The -- operator functions similarly to the ++ operator, except that it reduces the value by one. Example 1: C Programming \u00b6 #include <stdio.h> int main () { int var1 = 5 , var2 = 5 ; // 5 is displayed // Then, var1 is increased to 6. printf ( \"%d \\n \" , var1 ++ ); // var2 is increased to 6 // Then, it is displayed. printf ( \"%d \\n \" , ++ var2 ); return 0 ; } Output 5 6 C Assignment Operators \u00b6 An assignment operator is a type of operator that is used to assign a value to a variable. = is the most commonly used assignment operator. Operator Example Same as = a=b a=b += a+=b a=a+b -= a-=b a=a-b *= a*=b a=a*b /= a/=b a=a/b %= a%=b a=a%b Example 3: Assignment Operators \u00b6 // Working of assignment operators #include <stdio.h> int main () { int a = 5 , c ; c = a ; // c is 5 printf ( \"c = %d \\n \" , c ); c += a ; // c is 10 printf ( \"c = %d \\n \" , c ); c -= a ; // c is 5 printf ( \"c = %d \\n \" , c ); c *= a ; // c is 25 printf ( \"c = %d \\n \" , c ); c /= a ; // c is 5 printf ( \"c = %d \\n \" , c ); c %= a ; // c = 0 printf ( \"c = %d \\n \" , c ); return 0 ; } Output c = 5 c = 10 c = 5 c = 25 c = 5 c = 0 C Relational Operators \u00b6 A relational operator verifies the relationship of two operands. If the relationship is true, it returns 1; if the relationship is false, it returns 0. Operator Meaning of Operator Example == Equal to 5 == 3 is evaluated to 0 > Greater than 5 > 3 is evaluated to 1 < Less than 5 < 3 is evaluated to 0 != Not equal to 5 != 3 is evaluated to 1 >= Greater than or equal to 5 >= 3 is evaluated to 1 <= Less than or equal to 5 <= 3 is evaluated to 0 Example 4: Relational Operators \u00b6 // Working of relational operators #include <stdio.h> int main () { int a = 5 , b = 5 , c = 10 ; printf ( \"%d == %d is %d \\n \" , a , b , a == b ); printf ( \"%d == %d is %d \\n \" , a , c , a == c ); printf ( \"%d > %d is %d \\n \" , a , b , a > b ); printf ( \"%d > %d is %d \\n \" , a , c , a > c ); printf ( \"%d < %d is %d \\n \" , a , b , a < b ); printf ( \"%d < %d is %d \\n \" , a , c , a < c ); printf ( \"%d != %d is %d \\n \" , a , b , a != b ); printf ( \"%d != %d is %d \\n \" , a , c , a != c ); printf ( \"%d >= %d is %d \\n \" , a , b , a >= b ); printf ( \"%d >= %d is %d \\n \" , a , c , a >= c ); printf ( \"%d <= %d is %d \\n \" , a , b , a <= b ); printf ( \"%d <= %d is %d \\n \" , a , c , a <= c ); return 0 ; } Output 5 == 5 is 1 5 == 10 is 0 5 > 5 is 0 5 > 10 is 0 5 < 5 is 0 5 < 10 is 1 5 ! = 5 is 0 5 ! = 10 is 1 5 > = 5 is 1 5 > = 10 is 0 5 < = 5 is 1 5 < = 10 is 1 C Logical Operators \u00b6 A logical operator expression returns either 0 or 1, depending on whether the expression is true or false. Operator Meaning Example && Logical AND. True only if all operands are true If c = 5 and d = 2 then, expression ((c==5) && (d>5)) equals to 0. | Logical OR. True only if either one operand is true ! Logical NOT. True only if the operand is 0 If c = 5 then, expression !(c==5) equals to 0. Example 5: Logical Operators \u00b6 // Working of logical operators #include <stdio.h> int main () { int a = 5 , b = 5 , c = 10 , result ; result = ( a == b ) && ( c > b ); printf ( \"(a == b) && (c > b) is %d \\n \" , result ); result = ( a == b ) && ( c < b ); printf ( \"(a == b) && (c < b) is %d \\n \" , result ); result = ( a == b ) || ( c < b ); printf ( \"(a == b) || (c < b) is %d \\n \" , result ); result = ( a != b ) || ( c < b ); printf ( \"(a != b) || (c < b) is %d \\n \" , result ); result = ! ( a != b ); printf ( \"!(a != b) is %d \\n \" , result ); result = ! ( a == b ); printf ( \"!(a == b) is %d \\n \" , result ); return 0 ; } Output ( a == b ) && ( c > b ) is 1 ( a == b ) && ( c < b ) is 0 ( a == b ) || ( c < b ) is 1 ( a ! = b ) || ( c < b ) is 0 ! ( a ! = b ) is 1 ! ( a == b ) is 0 Explanation of logical operator program (a == b) && (c > 5) evaluates to 1 because both operands (a == b) and (c > b) is 1 (true). (a == b) && (c < b) evaluates to 0 because operand (c < b) is 0 (false). (a == b) || (c < b) evaluates to 1 because (a = b) is 1 (true). (a != b) || (c < b) evaluates to 0 because both operand (a != b) and (c < b) are 0 (false). !(a != b) evaluates to 1 because operand (a != b) is 0 (false). Hence, !(a != b) is 1 (true). !(a == b) evaluates to 0 because (a == b) is 1 (true). Hence, !(a == b) is 0 (false). C Bitwise Operators \u00b6 Mathematical operations like as addition, subtraction, multiplication, division, and so on are transformed to bit-level during computation, which speeds up processing and saves power. In C programming, bitwise operators are used to execute bit-level operations. Operators Meaning of Operators & Bitwise AND ^ Bitwise exclusive OR ~ Bitwise complement << Shift left >> Shift right Other Operators \u00b6 Comma Operator \u00b6 Comma operators are used to connect similar expressions. As an example: int a , c = 5 , d ; The sizeof operator \u00b6 sizeof is a unary operator that returns the data size (constants, variables, array, structure, etc). Example 6: sizeof Operator \u00b6 #include <stdio.h> int main () { int a ; float b ; double c ; char d ; printf ( \"Size of int=%lu bytes \\n \" , sizeof ( a )); printf ( \"Size of float=%lu bytes \\n \" , sizeof ( b )); printf ( \"Size of double=%lu bytes \\n \" , sizeof ( c )); printf ( \"Size of char=%lu byte \\n \" , sizeof ( d )); return 0 ; } Output Size of int = 4 bytes Size of float = 4 bytes Size of double = 8 bytes Size of char = 1 byte Other operators, such as the ternary operator ?: , the reference operato r & , the dereference operator * , and the member selection operator -> , will be covered in more detail later. C Flow Control \u00b6 C if...else Statement \u00b6 With the assistance of examples, you will learn about the if statement (including if...else and nested if...else) in C programming. C if Statement \u00b6 In C programming, the if statement has the following syntax: if ( test expression ) { // code } How if statement works? \u00b6 The test expression inside the parentheses is evaluated by the if statement (). If the test expression is true, the statements within the if body are performed. If the test expression is interpreted as false, the statements within the if body are not performed. How if statement works? Check relational and logical operators to understand more about when a test expression is evaluated to true (non-zero value) and false (0). Example 1: if statement \u00b6 // Program to display a number if it is negative #include <stdio.h> int main () { int number ; printf ( \"Enter an integer: \" ); scanf ( \"%d\" , & number ); // true if number is less than 0 if ( number < 0 ) { printf ( \"You entered %d. \\n \" , number ); } printf ( \"The if statement is easy.\" ); return 0 ; } Output 1 Enter an integer: -2 You entered -2. The if statement is easy. When the user types -2, the test expression number 0 is evaluated as true. As a result, the value -2 that you typed is displayed on the screen. Output 2 Enter an integer: 5 The if statement is easy. When the user enters 5, the test expression number 0 is assessed as false, and the statement within the body of the if is not performed. C if...else Statement \u00b6 An else block is optional in the if statement. The if...else sentence has the following syntax: if ( test expression ) { // run code if test expression is true } else { // run code if test expression is false } How if...else statement works? \u00b6 If the test expression is found to be true, Statements within the if body are performed. Statements within the body of else are not executed. If the test expression is found to be false, Phrases inside the body of else are performed; statements within the body of if are skipped. How if...else statement works? Example 2: if...else statement \u00b6 // Check whether an integer is odd or even #include <stdio.h> int main () { int number ; printf ( \"Enter an integer: \" ); scanf ( \"%d\" , & number ); // True if the remainder is 0 if ( number % 2 == 0 ) { printf ( \"%d is an even integer.\" , number ); } else { printf ( \"%d is an odd integer.\" , number ); } return 0 ; } Output Enter an integer: 7 7 is an odd integer. When the user enters 7, the test expression number% 2==0 returns false. As a result, the statement within the body of else is performed. C if...else Ladder \u00b6 Depending on whether the test phrase is true or false, the if...else statement runs two separate programs. Sometimes a decision must be made between more than two options. You may use the if...else ladder to compare numerous test expressions and execute various statements. Syntax of if...else Ladder \u00b6 if ( test expression1 ) { // statement(s) } else if ( test expression2 ) { // statement(s) } else if ( test expression3 ) { // statement(s) } . . else { // statement(s) } Example 3: C if...else Ladder \u00b6 // Program to relate two integers using =, > or < symbol #include <stdio.h> int main () { int number1 , number2 ; printf ( \"Enter two integers: \" ); scanf ( \"%d %d\" , & number1 , & number2 ); //checks if the two integers are equal. if ( number1 == number2 ) { printf ( \"Result: %d = %d\" , number1 , number2 ); } //checks if number1 is greater than number2. else if ( number1 > number2 ) { printf ( \"Result: %d > %d\" , number1 , number2 ); } //checks if both test expressions are false else { printf ( \"Result: %d < %d\" , number1 , number2 ); } return 0 ; } Output Enter two integers: 12 23 Result: 12 < 23 Nested if...else \u00b6 An if...else statement can be included within the body of another if...else statement. Example 4: Nested if...else \u00b6 This program, similar to the if...else ladder's example, compares two numbers using, >, and =. To fix this problem, we will utilize a layered if...else expression. #include <stdio.h> int main () { int number1 , number2 ; printf ( \"Enter two integers: \" ); scanf ( \"%d %d\" , & number1 , & number2 ); if ( number1 >= number2 ) { if ( number1 == number2 ) { printf ( \"Result: %d = %d\" , number1 , number2 ); } else { printf ( \"Result: %d > %d\" , number1 , number2 ); } } else { printf ( \"Result: %d < %d\" , number1 , number2 ); } return 0 ; } You do not need to use brackets if the body of an if...else statement contains only one sentence. if ( a > b ) { printf ( \"Hello\" ); } printf ( \"Hi\" ); is equivalent to if ( a > b ) printf ( \"Hello\" ); printf ( \"Hi\" ); C for Loop \u00b6 With the assistance of examples, you will learn how to design a for loop in C programming in this article. A loop is a programming construct that is used to repeat a block of code until the stated condition is fulfilled. Loops in C programming are classified into three types: while loop for loop do..while loop This lesson will teach us about the for loop. The while and do...while loops will be covered in the next tutorial. for Loop \u00b6 The for loop has the following syntax: for ( initializationStatement ; testExpression ; updateStatement ) { // statements inside the body of loop } How for loop works? \u00b6 The initialization statement is only used once. The test expression is then evaluated. The for loop is ended if the test statement is interpreted as false. If the test expression is true, the statements inside the for loop's body are performed, and the update expression is updated. The test expression is examined once more. This procedure is repeated until the test expression is false. The loop is terminated when the test expression is false. How for loop works? Example 1: for loop \u00b6 // Print numbers from 1 to 10 #include <stdio.h> int main () { int i ; for ( i = 1 ; i < 11 ; ++ i ) { printf ( \"%d \" , i ); } return 0 ; } Output 1 2 3 4 5 6 7 8 9 10 i is initialized to 1. The test expression i < 11 is evaluated. Since 1 less than 11 is true, the body of for loop is executed. This will print the 1 (value of i) on the screen. The update statement ++i is executed. Now, the value of i will be 2. Again, the test expression is evaluated to true, and the body of for loop is executed. This will print 2 (value of i) on the screen. Again, the update statement ++i is executed and the test expression i < 11 is evaluated. This process goes on until i becomes 11. When i becomes 11, i < 11 will be false, and the for loop terminates. Example 2: for loop \u00b6 // Program to calculate the sum of first n natural numbers // Positive integers 1,2,3...n are known as natural numbers #include <stdio.h> int main () { int num , count , sum = 0 ; printf ( \"Enter a positive integer: \" ); scanf ( \"%d\" , & num ); // for loop terminates when num is less than count for ( count = 1 ; count <= num ; ++ count ) { sum += count ; } printf ( \"Sum = %d\" , sum ); return 0 ; } Output Enter a positive integer: 10 Sum = 55 The value entered by the user is stored in the variable num. Suppose, the user entered 10. The count is initialized to 1 and the test expression is evaluated. Since the test expression count<=num (1 less than or equal to 10) is true, the body of for loop is executed and the value of sum will equal to 1. Then, the update statement ++count is executed and count will equal to 2. Again, the test expression is evaluated. Since 2 is also less than 10, the test expression is evaluated to true and the body of the for loop is executed. Now, sum will equal 3. This process goes on and the sum is calculated until the count reaches 11. When the count is 11, the test expression is evaluated to 0 (false), and the loop terminates. Then, the value of sum is printed on the screen. C while and do...while Loop \u00b6 In this tutorial, you will learn to create while and do...while loop in C programming with the help of examples. In programming, loops are used to repeat a block of code until a specified condition is met. C programming has three types of loops. for loop while loop do...while loop In the previous tutorial, we learned about for loop. In this tutorial, we will learn about while and do..while loop. while loop \u00b6 The syntax of the while loop is: while ( testExpression ) { // the body of the loop } How while loop works? \u00b6 The while loop evaluates the testExpression inside the parentheses () . If testExpression is true , statements inside the body of while loop are executed. Then, testExpression is evaluated again. The process goes on until testExpression is evaluated to false . If testExpression is false , the loop terminates (ends). How while loop works? Example 1: while loop \u00b6 // Print numbers from 1 to 5 #include <stdio.h> int main () { int i = 1 ; while ( i <= 5 ) { printf ( \"%d \\n \" , i ); ++ i ; } return 0 ; } Output 1 2 3 4 5 Here, we have initialized i to 1. When i = 1 , the test expression i <= 5 is true . Hence, the body of the while loop is executed. This prints 1 on the screen and the value of i is increased to 2 . Now, i = 2 , the test expression i <= 5 is again true . The body of the while loop is executed again. This prints 2 on the screen and the value of i is increased to 3 . This process goes on until i becomes 6. Then, the test expression i <= 5 will be false and the loop terminates. do...while loop \u00b6 The do..while loop is similar to the while loop with one important difference. The body of do...while loop is executed at least once. Only then, the test expression is evaluated. The syntax of the do...while loop is: do { // the body of the loop } while ( testExpression ); How do...while loop works? \u00b6 The body of do...while loop is executed once. Only then, the testExpression is evaluated. If testExpression is true , the body of the loop is executed again and testExpression is evaluated once more. This process goes on until testExpression becomes false . If testExpression is false , the loop ends. How do...while loop works? Example 2: do...while loop \u00b6 // Program to add numbers until the user enters zero #include <stdio.h> int main () { double number , sum = 0 ; // the body of the loop is executed at least once do { printf ( \"Enter a number: \" ); scanf ( \"%lf\" , & number ); sum += number ; } while ( number != 0.0 ); printf ( \"Sum = %.2lf\" , sum ); return 0 ; } Output Enter a number: 1 .5 Enter a number: 2 .4 Enter a number: -3.4 Enter a number: 4 .2 Enter a number: 0 Sum = 4 .70 Here, we have used a do...while loop to prompt the user to enter a number. The loop works as long as the input number is not 0 . The do...while loop executes at least once i.e. the first iteration runs without checking the condition. The condition is checked only after the first iteration has been executed. do { printf ( \"Enter a number: \" ); scanf ( \"%lf\" , & number ); sum += number ; } while ( number != 0.0 ); So, if the first input is a non-zero number, that number is added to the sum variable and the loop continues to the next iteration. This process is repeated until the user enters 0 . But if the first input is 0, there will be no second iteration of the loop and sum becomes 0.0 . Outside the loop, we print the value of sum. C break and continue \u00b6 We learned about loops in previous tutorials. In this tutorial, we will learn to use break and continue statements with the help of examples. C break \u00b6 The break statement ends the loop immediately when it is encountered. Its syntax is: break ; The break statement is almost always used with if...else statement inside the loop. How break statement works? Example 1: break statement \u00b6 // Program to calculate the sum of numbers (10 numbers max) // If the user enters a negative number, the loop terminates #include <stdio.h> int main () { int i ; double number , sum = 0.0 ; for ( i = 1 ; i <= 10 ; ++ i ) { printf ( \"Enter n%d: \" , i ); scanf ( \"%lf\" , & number ); // if the user enters a negative number, break the loop if ( number < 0.0 ) { break ; } sum += number ; // sum = sum + number; } printf ( \"Sum = %.2lf\" , sum ); return 0 ; } Output Enter n1: 2 .4 Enter n2: 4 .5 Enter n3: 3 .4 Enter n4: -3 Sum = 10 .30 This program calculates the sum of a maximum of 10 numbers. Why a maximum of 10 numbers? It's because if the user enters a negative number, the break statement is executed. This will end the for loop, and the sum is displayed. In C, break is also used with the switch statement. This will be discussed in the next tutorial. C continue \u00b6 The continue statement skips the current iteration of the loop and continues with the next iteration. Its syntax is: continue ; The continue statement is almost always used with the if...else statement. How continue statement works? Example 2: continue statement \u00b6 // Program to calculate the sum of numbers (10 numbers max) // If the user enters a negative number, it's not added to the result #include <stdio.h> int main () { int i ; double number , sum = 0.0 ; for ( i = 1 ; i <= 10 ; ++ i ) { printf ( \"Enter a n%d: \" , i ); scanf ( \"%lf\" , & number ); if ( number < 0.0 ) { continue ; } sum += number ; // sum = sum + number; } printf ( \"Sum = %.2lf\" , sum ); return 0 ; } Output Enter n1: 1 .1 Enter n2: 2 .2 Enter n3: 5 .5 Enter n4: 4 .4 Enter n5: -3.4 Enter n6: -45.5 Enter n7: 34 .5 Enter n8: -4.2 Enter n9: -1000 Enter n10: 12 Sum = 59 .70 In this program, when the user enters a positive number, the sum is calculated using sum += number; statement. When the user enters a negative number, the continue statement is executed and it skips the negative number from the calculation. C switch Statement \u00b6 In this tutorial, you will learn to create the switch statement in C programming with the help of an example. The switch statement allows us to execute one code block among many alternatives. You can do the same thing with the if...else..if ladder. However, the syntax of the switch statement is much easier to read and write. Syntax of switch...case \u00b6 switch ( expression ) { case constant1 : // statements break ; case constant2 : // statements break ; . . . default : // default statements } How does the switch statement work? \u00b6 The expression is evaluated once and compared with the values of each case label. If there is a match, the corresponding statements after the matching label are executed. For example, if the value of the expression is equal to constant2, statements after case constant2: are executed until break is encountered. If there is no match, the default statements are executed. If we do not use break , all statements after the matching label are executed. By the way, the default clause inside the switch statement is optional. How does the switch statement work? Example: Simple Calculator \u00b6 // Program to create a simple calculator #include <stdio.h> int main () { char operator ; double n1 , n2 ; printf ( \"Enter an operator (+, -, *, /): \" ); scanf ( \"%c\" , & operator ); printf ( \"Enter two operands: \" ); scanf ( \"%lf %lf\" , & n1 , & n2 ); switch ( operator ) { case '+' : printf ( \"%.1lf + %.1lf = %.1lf\" , n1 , n2 , n1 + n2 ); break ; case '-' : printf ( \"%.1lf - %.1lf = %.1lf\" , n1 , n2 , n1 - n2 ); break ; case '*' : printf ( \"%.1lf * %.1lf = %.1lf\" , n1 , n2 , n1 * n2 ); break ; case '/' : printf ( \"%.1lf / %.1lf = %.1lf\" , n1 , n2 , n1 / n2 ); break ; // operator doesn't match any case constant +, -, *, / default : printf ( \"Error! operator is not correct\" ); } return 0 ; } Output Enter an operator ( +, -, *, ) : - Enter two operands: 32 .5 12 .4 32 .5 - 12 .4 = 20 .1 The - operator entered by the user is stored in the operator variable. And, two operands 32.5 and 12.4 are stored in variables n1 and n2 respectively. Since the operator is - , the control of the program jumps to printf ( \"%.1lf - %.1lf = %.1lf\" , n1 , n2 , n1 - n2 ); Finally, the break statement terminates the switch statement. C goto Statement \u00b6 In this tutorial, you will learn to create the goto statement in C programming. Also, you will learn when to use a goto statement and when not to use it. The goto statement allows us to transfer control of the program to the specified label. Syntax of goto Statement \u00b6 goto label ; ... .. ... ... .. ... label : statement ; The label is an identifier. When the goto statement is encountered, the control of the program jumps to label: and starts executing the code. How goto statement work? Example: goto Statement \u00b6 // Program to calculate the sum and average of positive numbers // If the user enters a negative number, the sum and average are displayed. #include <stdio.h> int main () { const int maxInput = 100 ; int i ; double number , average , sum = 0.0 ; for ( i = 1 ; i <= maxInput ; ++ i ) { printf ( \"%d. Enter a number: \" , i ); scanf ( \"%lf\" , & number ); // go to jump if the user enters a negative number if ( number < 0.0 ) { goto jump ; } sum += number ; } jump : average = sum / ( i - 1 ); printf ( \"Sum = %.2f \\n \" , sum ); printf ( \"Average = %.2f\" , average ); return 0 ; } Output 1 . Enter a number: 3 2 . Enter a number: 4 .3 3 . Enter a number: 9 .3 4 . Enter a number: -2.9 Sum = 16 .60 Average = 5 .53 Reasons to avoid goto \u00b6 The use of goto statement may lead to code that is buggy and hard to follow. For example, one : for ( i = 0 ; i < number ; ++ i ) { test += i ; goto two ; } two : if ( test > 5 ) { goto three ; } ... .. ... Also, the goto statement allows you to do bad stuff such as jump out of the scope. That being said, goto can be useful sometimes. For example: to break from nested loops. Should you use goto? \u00b6 If you think the use of goto statement simplifies your program, you can use it. That being said, goto is rarely useful and you can create any C program without using goto altogether. Here's a quote from Bjarne Stroustrup, creator of C++, \"The fact that 'goto' can do anything is exactly why we don't use it.\" https://www.programiz.com/c-programming/c-decision-making-loops-examples C Functions \u00b6 In this tutorial, you will be introduced to functions (both user-defined and standard library functions) in C programming. Also, you will learn why functions are used in programming. A function is a block of code that performs a specific task. Suppose, you need to create a program to create a circle and color it. You can create two functions to solve this problem: create a circle function create a color function Dividing a complex problem into smaller chunks makes our program easy to understand and reuse. Types of function \u00b6 There are two types of function in C programming: Standard library functions User-defined functions Standard library functions \u00b6 The standard library functions are built-in functions in C programming. These functions are defined in header files. For example, The printf() is a standard library function to send formatted output to the screen (display output on the screen). This function is defined in the stdio.h header file. Hence, to use the printf() function, we need to include the stdio.h header file using #include <stdio.h> . The sqrt() function calculates the square root of a number. The function is defined in the math.h header file. Visit standard library functions in C programming to learn more. User-defined function \u00b6 You can also create functions as per your need. Such functions created by the user are known as user-defined functions. How user-defined function works? \u00b6 #include <stdio.h> void functionName () { ... .. ... ... .. ... } int main () { ... .. ... ... .. ... functionName (); ... .. ... ... .. ... } The execution of a C program begins from the main() function. When the compiler encounters functionName(); , control of the program jumps to void functionName () And, the compiler starts executing the codes inside functionName() . The control of the program jumps back to the main() function once code inside the function definition is executed. How functions are work in C? Working of C Function Note, function names are identifiers and should be unique. This is just an overview of user-defined functions. Visit these pages to learn more on: User-defined Function in C programming Types of user-defined Functions Advantages of user-defined function \u00b6 The program will be easier to understand, maintain and debug. Reusable codes that can be used in other programs A large program can be divided into smaller modules. Hence, a large project can be divided among many programmers. C User-defined functions \u00b6 In this tutorial, you will learn to create user-defined functions in C programming with the help of an example. A function is a block of code that performs a specific task. C allows you to define functions according to your need. These functions are known as user-defined functions. For example: Suppose, you need to create a circle and color it depending upon the radius and color. You can create two functions to solve this problem: createCircle() function color() function Example: User-defined function \u00b6 Here is an example to add two integers. To perform this task, we have created an user-defined addNumbers() . #include <stdio.h> int addNumbers ( int a , int b ); // function prototype int main () { int n1 , n2 , sum ; printf ( \"Enters two numbers: \" ); scanf ( \"%d %d\" , & n1 , & n2 ); sum = addNumbers ( n1 , n2 ); // function call printf ( \"sum = %d\" , sum ); return 0 ; } int addNumbers ( int a , int b ) // function definition { int result ; result = a + b ; return result ; // return statement } Function prototype \u00b6 A function prototype is simply the declaration of a function that specifies function's name, parameters and return type. It doesn't contain function body. A function prototype gives information to the compiler that the function may later be used in the program. Syntax of function prototype \u00b6 returnType functionName(type1 argument1, type2 argument2, ...); In the above example, int addNumbers(int a, int b); is the function prototype which provides the following information to the compiler: name of the function is addNumbers() return type of the function is int two arguments of type int are passed to the function The function prototype is not needed if the user-defined function is defined before the main() function. Calling a function \u00b6 Control of the program is transferred to the user-defined function by calling it. Syntax of function call \u00b6 functionName(argument1, argument2, ...); In the above example, the function call is made using addNumbers(n1, n2); statement inside the main() function. Function definition \u00b6 Function definition contains the block of code to perform a specific task. In our example, adding two numbers and returning it. Syntax of function definition \u00b6 returnType functionName ( type1 argument1 , type2 argument2 , ...) { //body of the function } When a function is called, the control of the program is transferred to the function definition. And, the compiler starts executing the codes inside the body of a function. Passing arguments to a function \u00b6 In programming, argument refers to the variable passed to the function. In the above example, two variables n1 and n2 are passed during the function call. The parameters a and b accepts the passed arguments in the function definition. These arguments are called formal parameters of the function. How arguments passed to a function in C? Passing Argument to Function The type of arguments passed to a function and the formal parameters must match, otherwise, the compiler will throw an error. If n1 is of char type, a also should be of char type. If n2 is of float type, variable b also should be of float type. A function can also be called without passing an argument. Return Statement \u00b6 The return statement terminates the execution of a function and returns a value to the calling function. The program control is transferred to the calling function after the return statement. In the above example, the value of the result variable is returned to the main function. The sum variable in the main() function is assigned this value. How return statement work? Syntax of return statement \u00b6 return ( expression ); For example, return a ; return ( a + b ); The type of value returned from the function and the return type specified in the function prototype and function definition must match. Visit this page to learn more on passing arguments and returning value from a function . Types of User-defined Functions in C Programming \u00b6 In this tutorial, you will learn about different approaches you can take to solve the same problem using functions. These 4 programs below check whether the integer entered by the user is a prime number or not. The output of all these programs below is the same, and we have created a user-defined function in each example. However, the approach we have taken in each example is different. Example 1: No Argument Passed and No Return Value \u00b6 #include <stdio.h> void checkPrimeNumber (); int main () { checkPrimeNumber (); // argument is not passed return 0 ; } // return type is void meaning doesn't return any value void checkPrimeNumber () { int n , i , flag = 0 ; printf ( \"Enter a positive integer: \" ); scanf ( \"%d\" , & n ); // 0 and 1 are not prime numbers if ( n == 0 || n == 1 ) flag = 1 ; for ( i = 2 ; i <= n / 2 ; ++ i ) { if ( n % i == 0 ) { flag = 1 ; break ; } } if ( flag == 1 ) printf ( \"%d is not a prime number.\" , n ); else printf ( \"%d is a prime number.\" , n ); } Run Code The checkPrimeNumber() function takes input from the user, checks whether it is a prime number or not, and displays it on the screen. The empty parentheses in checkPrimeNumber(); inside the main() function indicates that no argument is passed to the function. The return type of the function is void . Hence, no value is returned from the function. Example 2: No Arguments Passed But Returns a Value \u00b6 #include <stdio.h> int getInteger (); int main () { int n , i , flag = 0 ; // no argument is passed n = getInteger (); // 0 and 1 are not prime numbers if ( n == 0 || n == 1 ) flag = 1 ; for ( i = 2 ; i <= n / 2 ; ++ i ) { if ( n % i == 0 ){ flag = 1 ; break ; } } if ( flag == 1 ) printf ( \"%d is not a prime number.\" , n ); else printf ( \"%d is a prime number.\" , n ); return 0 ; } // returns integer entered by the user int getInteger () { int n ; printf ( \"Enter a positive integer: \" ); scanf ( \"%d\" , & n ); return n ; } Run Code The empty parentheses in the n = getInteger(); statement indicates that no argument is passed to the function. And, the value returned from the function is assigned to n. Here, the getInteger() function takes input from the user and returns it. The code to check whether a number is prime or not is inside the main() function. Example 3: Argument Passed But No Return Value \u00b6 #include <stdio.h> void checkPrimeAndDisplay ( int n ); int main () { int n ; printf ( \"Enter a positive integer: \" ); scanf ( \"%d\" , & n ); // n is passed to the function checkPrimeAndDisplay ( n ); return 0 ; } // return type is void meaning doesn't return any value void checkPrimeAndDisplay ( int n ) { int i , flag = 0 ; // 0 and 1 are not prime numbers if ( n == 0 || n == 1 ) flag = 1 ; for ( i = 2 ; i <= n / 2 ; ++ i ) { if ( n % i == 0 ){ flag = 1 ; break ; } } if ( flag == 1 ) printf ( \"%d is not a prime number.\" , n ); else printf ( \"%d is a prime number.\" , n ); } Run Code The integer value entered by the user is passed to the checkPrimeAndDisplay() function. Here, the checkPrimeAndDisplay() function checks whether the argument passed is a prime number or not and displays the appropriate message. Example 4: Argument Passed and Returns a Value \u00b6 #include <stdio.h> int checkPrimeNumber ( int n ); int main () { int n , flag ; printf ( \"Enter a positive integer: \" ); scanf ( \"%d\" , & n ); // n is passed to the checkPrimeNumber() function // the returned value is assigned to the flag variable flag = checkPrimeNumber ( n ); if ( flag == 1 ) printf ( \"%d is not a prime number\" , n ); else printf ( \"%d is a prime number\" , n ); return 0 ; } // int is returned from the function int checkPrimeNumber ( int n ) { // 0 and 1 are not prime numbers if ( n == 0 || n == 1 ) return 1 ; int i ; for ( i = 2 ; i <= n / 2 ; ++ i ) { if ( n % i == 0 ) return 1 ; } return 0 ; } Run Code The input from the user is passed to the checkPrimeNumber() function. The checkPrimeNumber() function checks whether the passed argument is prime or not. If the passed argument is a prime number, the function returns 0 . If the passed argument is a non-prime number, the function returns 1 . The return value is assigned to the flag variable. Depending on whether flag is 0 or 1 , an appropriate message is printed from the main() function. Which approach is better? \u00b6 Well, it depends on the problem you are trying to solve. In this case, passing an argument and returning a value from the function (example 4) is better. A function should perform a specific task. The checkPrimeNumber() function doesn't take input from the user nor it displays the appropriate message. It only checks whether a number is prime or not. C Recursion \u00b6 In this tutorial, you will learn to write recursive functions in C programming with the help of an example. A function that calls itself is known as a recursive function. And, this technique is known as recursion. How recursion works? \u00b6 void recurse () { ... .. ... recurse (); ... .. ... } int main () { ... .. ... recurse (); ... .. ... } How recursion works ? Working of Recursion The recursion continues until some condition is met to prevent it. To prevent infinite recursion, if...else statement (or similar approach) can be used where one branch makes the recursive call, and other doesn't. Example: Sum of Natural Numbers Using Recursion \u00b6 #include <stdio.h> int sum ( int n ); int main () { int number , result ; printf ( \"Enter a positive integer: \" ); scanf ( \"%d\" , & number ); result = sum ( number ); printf ( \"sum = %d\" , result ); return 0 ; } int sum ( int n ) { if ( n != 0 ) // sum() function calls itself return n + sum ( n -1 ); else return n ; } Output Enter a positive integer:3 sum = 6 Initially, the sum() is called from the main() function with number passed as an argument. Suppose, the value of n inside sum() is 3 initially. During the next function call, 2 is passed to the sum() function. This process continues until n is equal to 0. When n is equal to 0, the if condition fails and the else part is executed returning the sum of integers ultimately to the main() function. Sum of Natural Numbers \u00b6 Advantages and Disadvantages of Recursion \u00b6 Recursion makes program elegant. However, if performance is vital, use loops instead as recursion is usually much slower. That being said, recursion is an important concept. It is frequently used in data structure and algorithms . For example, it is common to use recursion in problems such as tree traversal. C Storage Class \u00b6 In this tutorial, you will learn about scope and lifetime of local and global variables. Also, you will learn about static and register variables. Every variable in C programming has two properties: type and storage class. Type refers to the data type of a variable. And, storage class determines the scope, visibility and lifetime of a variable. There are 4 types of storage class: automatic external static register Local Variable \u00b6 The variables declared inside a block are automatic or local variables. The local variables exist only inside the block in which it is declared. Let's take an example. #include <stdio.h> int main ( void ) { for ( int i = 0 ; i < 5 ; ++ i ) { printf ( \"C programming\" ); } // Error: i is not declared at this point printf ( \"%d\" , i ); return 0 ; } Run Code When you run the above program, you will get an error undeclared identifier i. It's because i is declared inside the for loop block. Outside of the block, it's undeclared. Let's take another example. int main () { int n1 ; // n1 is a local variable to main() } void func () { int n2 ; // n2 is a local variable to func() } In the above example, n1 is local to main() and n2 is local to func() . This means you cannot access the n1 variable inside func() as it only exists inside main() . Similarly, you cannot access the n2 variable inside main() as it only exists inside func() . Global Variable \u00b6 Variables that are declared outside of all functions are known as external or global variables. They are accessible from any function inside the program. Example 1: Global Variable \u00b6 #include <stdio.h> void display (); int n = 5 ; // global variable int main () { ++ n ; display (); return 0 ; } void display () { ++ n ; printf ( \"n = %d\" , n ); } Run Code Output n = 7 Suppose, a global variable is declared in file1 . If you try to use that variable in a different file file2 , the compiler will complain. To solve this problem, keyword extern is used in file2 to indicate that the external variable is declared in another file. Register Variable \u00b6 The register keyword is used to declare register variables. Register variables were supposed to be faster than local variables. However, modern compilers are very good at code optimization, and there is a rare chance that using register variables will make your program faster. Unless you are working on embedded systems where you know how to optimize code for the given application, there is no use of register variables. Static Variable \u00b6 A static variable is declared by using the static keyword. For example; static int i; The value of a static variable persists until the end of the program. Example 2: Static Variable \u00b6 #include <stdio.h> void display (); int main () { display (); display (); } void display () { static int c = 1 ; c += 5 ; printf ( \"%d \" , c ); } Run Code Output 6 11 During the first function call, the value of c is initialized to 1. Its value is increased by 5. Now, the value of c is 6, which is printed on the screen. During the second function call, c is not initialized to 1 again. It's because c is a static variable. The value c is increased by 5. Now, its value will be 11, which is printed on the screen. C Function Examples C Arrays \u00b6 In this tutorial, you will learn to work with arrays. You will learn to declare, initialize and access elements of an array with the help of examples. C Arrays Arrays in C An array is a variable that can store multiple values. For example, if you want to store 100 integers, you can create an array for it. int data [ 100 ]; How to declare an array? \u00b6 dataType arrayName [ arraySize ]; For example, float mark [ 5 ]; Here, we declared an array, mark, of floating-point type. And its size is 5. Meaning, it can hold 5 floating-point values. It's important to note that the size and type of an array cannot be changed once it is declared. Access Array Elements \u00b6 You can access elements of an array by indices. Suppose you declared an array mark as above. The first element is mark[0], the second element is mark[1] and so on. C Array Decleration \u00b6 Declare an Array \u00b6 Few keynotes : Arrays have 0 as the first index, not 1. In this example, mark[0] is the first element. If the size of an array is n, to access the last element, the n-1 index is used. In this example, mark[4] Suppose the starting address of mark[0] is 2120d . Then, the address of the mark[1] will be 2124d . Similarly, the address of mark[2] will be 2128d and so on. This is because the size of a float is 4 bytes. How to initialize an array? \u00b6 It is possible to initialize an array during declaration. For example, int mark [ 5 ] = { 19 , 10 , 8 , 17 , 9 }; You can also initialize an array like this. int mark [] = { 19 , 10 , 8 , 17 , 9 }; Here, we haven't specified the size. However, the compiler knows its size is 5 as we are initializing it with 5 elements. Initialize Array Initialize an Array Here, mark [ 0 ] is equal to 19 mark [ 1 ] is equal to 10 mark [ 2 ] is equal to 8 mark [ 3 ] is equal to 17 mark [ 4 ] is equal to 9 Change Value of Array elements \u00b6 int mark [ 5 ] = { 19 , 10 , 8 , 17 , 9 } // make the value of the third element to -1 mark [ 2 ] = -1 ; // make the value of the fifth element to 0 mark [ 4 ] = 0 ; Input and Output Array Elements \u00b6 Here's how you can take input from the user and store it in an array element. // take input and store it in the 3rd element \u200b scanf ( \"%d\" , & mark [ 2 ]); // take input and store it in the ith element scanf ( \"%d\" , & mark [ i -1 ]); Here's how you can print an individual element of an array. // print the first element of the array printf ( \"%d\" , mark [ 0 ]); // print the third element of the array printf ( \"%d\" , mark [ 2 ]); // print ith element of the array printf ( \"%d\" , mark [ i -1 ]); Example 1: Array Input/Output \u00b6 // Program to take 5 values from the user and store them in an array // Print the elements stored in the array #include <stdio.h> int main () { int values [ 5 ]; printf ( \"Enter 5 integers: \" ); // taking input and storing it in an array for ( int i = 0 ; i < 5 ; ++ i ) { scanf ( \"%d\" , & values [ i ]); } printf ( \"Displaying integers: \" ); // printing elements of an array for ( int i = 0 ; i < 5 ; ++ i ) { printf ( \"%d \\n \" , values [ i ]); } return 0 ; } Run Code Output Enter 5 integers: 1 -3 34 0 3 Displaying integers: 1 -3 34 0 3 Here, we have used a for loop to take 5 inputs from the user and store them in an array. Then, using another for loop, these elements are displayed on the screen. Example 2: Calculate Average \u00b6 // Program to find the average of n numbers using arrays #include <stdio.h> int main () { int marks [ 10 ], i , n , sum = 0 ; double average ; printf ( \"Enter number of elements: \" ); scanf ( \"%d\" , & n ); for ( i = 0 ; i < n ; ++ i ) { printf ( \"Enter number%d: \" , i + 1 ); scanf ( \"%d\" , & marks [ i ]); // adding integers entered by the user to the sum variable sum += marks [ i ]; } // explicitly convert sum to double // then calculate average average = ( double ) sum / n ; printf ( \"Average = %.2lf\" , average ); return 0 ; } Run Code Output Enter number of elements: 5 Enter number1: 45 Enter number2: 35 Enter number3: 38 Enter number4: 31 Enter number5: 49 Average = 39 .60 Here, we have computed the average of n numbers entered by the user. Access elements out of its bound! \u00b6 Suppose you declared an array of 10 elements. Let's say, int testArray [ 10 ]; You can access the array elements from testArray[0] to testArray[9] . Now let's say if you try to access testArray[12] . The element is not available. This may cause unexpected output (undefined behavior). Sometimes you might get an error and some other time your program may run correctly. Hence, you should never access elements of an array outside of its bound. Multidimensional arrays \u00b6 In this tutorial, you learned about arrays. These arrays are called one-dimensional arrays. In the next tutorial, you will learn about multidimensional arrays (array of an array) . C Multidimensional Arrays \u00b6 In this tutorial, you will learn to work with multidimensional arrays (two-dimensional and three-dimensional arrays) with the help of examples. In C programming, you can create an array of arrays. These arrays are known as multidimensional arrays. For example, float x [ 3 ][ 4 ]; Here, x is a two-dimensional (2d) array. The array can hold 12 elements. You can think the array as a table with 3 rows and each row has 4 columns. Two dimensional array Two dimensional Array Similarly, you can declare a three-dimensional (3d) array. For example, float y [ 2 ][ 4 ][ 3 ]; Here, the array y can hold 24 elements. Initializing a multidimensional array \u00b6 Here is how you can initialize two-dimensional and three-dimensional arrays: Initialization of a 2d array \u00b6 // Different ways to initialize two-dimensional array int c [ 2 ][ 3 ] = {{ 1 , 3 , 0 }, { -1 , 5 , 9 }}; int c [][ 3 ] = {{ 1 , 3 , 0 }, { -1 , 5 , 9 }}; int c [ 2 ][ 3 ] = { 1 , 3 , 0 , -1 , 5 , 9 }; Initialization of a 3d array \u00b6 You can initialize a three-dimensional array in a similar way to a two-dimensional array. Here's an example, int test [ 2 ][ 3 ][ 4 ] = { {{ 3 , 4 , 2 , 3 }, { 0 , -3 , 9 , 11 }, { 23 , 12 , 23 , 2 }}, {{ 13 , 4 , 56 , 3 }, { 5 , 9 , 3 , 5 }, { 3 , 1 , 4 , 9 }}}; Example 1: Two-dimensional array to store and print values \u00b6 // C program to store temperature of two cities of a week and display it. #include <stdio.h> const int CITY = 2 ; const int WEEK = 7 ; int main () { int temperature [ CITY ][ WEEK ]; // Using nested loop to store values in a 2d array for ( int i = 0 ; i < CITY ; ++ i ) { for ( int j = 0 ; j < WEEK ; ++ j ) { printf ( \"City %d, Day %d: \" , i + 1 , j + 1 ); scanf ( \"%d\" , & temperature [ i ][ j ]); } } printf ( \" \\n Displaying values: \\n\\n \" ); // Using nested loop to display vlues of a 2d array for ( int i = 0 ; i < CITY ; ++ i ) { for ( int j = 0 ; j < WEEK ; ++ j ) { printf ( \"City %d, Day %d = %d \\n \" , i + 1 , j + 1 , temperature [ i ][ j ]); } } return 0 ; } Run Code Output City 1 , Day 1 : 33 City 1 , Day 2 : 34 City 1 , Day 3 : 35 City 1 , Day 4 : 33 City 1 , Day 5 : 32 City 1 , Day 6 : 31 City 1 , Day 7 : 30 City 2 , Day 1 : 23 City 2 , Day 2 : 22 City 2 , Day 3 : 21 City 2 , Day 4 : 24 City 2 , Day 5 : 22 City 2 , Day 6 : 25 City 2 , Day 7 : 26 Displaying values: City 1 , Day 1 = 33 City 1 , Day 2 = 34 City 1 , Day 3 = 35 City 1 , Day 4 = 33 City 1 , Day 5 = 32 City 1 , Day 6 = 31 City 1 , Day 7 = 30 City 2 , Day 1 = 23 City 2 , Day 2 = 22 City 2 , Day 3 = 21 City 2 , Day 4 = 24 City 2 , Day 5 = 22 City 2 , Day 6 = 25 City 2 , Day 7 = 26 Example 2: Sum of two matrices \u00b6 // C program to find the sum of two matrices of order 2*2 #include <stdio.h> int main () { float a [ 2 ][ 2 ], b [ 2 ][ 2 ], result [ 2 ][ 2 ]; // Taking input using nested for loop printf ( \"Enter elements of 1st matrix \\n \" ); for ( int i = 0 ; i < 2 ; ++ i ) for ( int j = 0 ; j < 2 ; ++ j ) { printf ( \"Enter a%d%d: \" , i + 1 , j + 1 ); scanf ( \"%f\" , & a [ i ][ j ]); } // Taking input using nested for loop printf ( \"Enter elements of 2nd matrix \\n \" ); for ( int i = 0 ; i < 2 ; ++ i ) for ( int j = 0 ; j < 2 ; ++ j ) { printf ( \"Enter b%d%d: \" , i + 1 , j + 1 ); scanf ( \"%f\" , & b [ i ][ j ]); } // adding corresponding elements of two arrays for ( int i = 0 ; i < 2 ; ++ i ) for ( int j = 0 ; j < 2 ; ++ j ) { result [ i ][ j ] = a [ i ][ j ] + b [ i ][ j ]; } // Displaying the sum printf ( \" \\n Sum Of Matrix:\" ); for ( int i = 0 ; i < 2 ; ++ i ) for ( int j = 0 ; j < 2 ; ++ j ) { printf ( \"%.1f \\t \" , result [ i ][ j ]); if ( j == 1 ) printf ( \" \\n \" ); } return 0 ; } Run Code Output Enter elements of 1st matrix Enter a11: 2 ; Enter a12: 0 .5 ; Enter a21: -1.1 ; Enter a22: 2 ; Enter elements of 2nd matrix Enter b11: 0 .2 ; Enter b12: 0 ; Enter b21: 0 .23 ; Enter b22: 23 ; Sum Of Matrix: 2 .2 0 .5 -0.9 25 .0 Example 3: Three-dimensional array \u00b6 // C Program to store and print 12 values entered by the user #include <stdio.h> int main () { int test [ 2 ][ 3 ][ 2 ]; printf ( \"Enter 12 values: \\n \" ); for ( int i = 0 ; i < 2 ; ++ i ) { for ( int j = 0 ; j < 3 ; ++ j ) { for ( int k = 0 ; k < 2 ; ++ k ) { scanf ( \"%d\" , & test [ i ][ j ][ k ]); } } } // Printing values with the proper index. printf ( \" \\n Displaying values: \\n \" ); for ( int i = 0 ; i < 2 ; ++ i ) { for ( int j = 0 ; j < 3 ; ++ j ) { for ( int k = 0 ; k < 2 ; ++ k ) { printf ( \"test[%d][%d][%d] = %d \\n \" , i , j , k , test [ i ][ j ][ k ]); } } } return 0 ; } Run Code Output Enter 12 values: 1 2 3 4 5 6 7 8 9 10 11 12 Displaying Values: test [ 0 ][ 0 ][ 0 ] = 1 test [ 0 ][ 0 ][ 1 ] = 2 test [ 0 ][ 1 ][ 0 ] = 3 test [ 0 ][ 1 ][ 1 ] = 4 test [ 0 ][ 2 ][ 0 ] = 5 test [ 0 ][ 2 ][ 1 ] = 6 test [ 1 ][ 0 ][ 0 ] = 7 test [ 1 ][ 0 ][ 1 ] = 8 test [ 1 ][ 1 ][ 0 ] = 9 test [ 1 ][ 1 ][ 1 ] = 10 test [ 1 ][ 2 ][ 0 ] = 11 test [ 1 ][ 2 ][ 1 ] = 12 Pass arrays to a function in C \u00b6 In this tutorial, you'll learn to pass arrays (both one-dimensional and multidimensional arrays) to a function in C programming with the help of examples. In C programming, you can pass an entire array to functions. Before we learn that, let's see how you can pass individual elements of an array to functions. Pass Individual Array Elements \u00b6 Passing array elements to a function is similar to passing variables to a function . Example 1: Pass Individual Array Elements \u00b6 #include <stdio.h> void display ( int age1 , int age2 ) { printf ( \"%d \\n \" , age1 ); printf ( \"%d \\n \" , age2 ); } int main () { int ageArray [] = { 2 , 8 , 4 , 12 }; // pass second and third elements to display() display ( ageArray [ 1 ], ageArray [ 2 ]); return 0 ; } Run Code Output 8 4 Here, we have passed array parameters to the display() function in the same way we pass variables to a function. // pass second and third elements to display() display ( ageArray [ 1 ], ageArray [ 2 ]); We can see this in the function definition, where the function parameters are individual variables: void display ( int age1 , int age2 ) { // code } Example 2: Pass Arrays to Functions \u00b6 // Program to calculate the sum of array elements by passing to a function #include <stdio.h> float calculateSum ( float num []); int main () { float result , num [] = { 23.4 , 55 , 22.6 , 3 , 40.5 , 18 }; // num array is passed to calculateSum() result = calculateSum ( num ); printf ( \"Result = %.2f\" , result ); return 0 ; } float calculateSum ( float num []) { float sum = 0.0 ; for ( int i = 0 ; i < 6 ; ++ i ) { sum += num [ i ]; } return sum ; } Run Code Output Result = 162 .50 To pass an entire array to a function, only the name of the array is passed as an argument. result = calculateSum ( num ); However, notice the use of [] in the function definition. float calculateSum ( float num []) { ... .. } This informs the compiler that you are passing a one-dimensional array to the function. Pass Multidimensional Arrays to a Function \u00b6 To pass multidimensional arrays to a function, only the name of the array is passed to the function (similar to one-dimensional arrays). Example 3: Pass two-dimensional arrays \u00b6 #include <stdio.h> void displayNumbers ( int num [ 2 ][ 2 ]); int main () { int num [ 2 ][ 2 ]; printf ( \"Enter 4 numbers: \\n \" ); for ( int i = 0 ; i < 2 ; ++ i ) { for ( int j = 0 ; j < 2 ; ++ j ) { scanf ( \"%d\" , & num [ i ][ j ]); } } // pass multi-dimensional array to a function displayNumbers ( num ); return 0 ; } void displayNumbers ( int num [ 2 ][ 2 ]) { printf ( \"Displaying: \\n \" ); for ( int i = 0 ; i < 2 ; ++ i ) { for ( int j = 0 ; j < 2 ; ++ j ) { printf ( \"%d \\n \" , num [ i ][ j ]); } } } Run Code Output Enter 4 numbers: 2 3 4 5 Displaying: 2 3 4 5 Notice the parameter int num[2][2] in the function prototype and function definition: // function prototype void displayNumbers ( int num [ 2 ][ 2 ]); This signifies that the function takes a two-dimensional array as an argument. We can also pass arrays with more than 2 dimensions as a function argument. When passing two-dimensional arrays, it is not mandatory to specify the number of rows in the array. However, the number of columns should always be specified. For example, void displayNumbers ( int num [][ 2 ]) { // code } Recommended Reading: Call by Reference in C C Pointers \u00b6 In this tutorial, you'll learn about pointers; what pointers are, how do you use them and the common mistakes you might face when working with them with the help of examples. Pointers are powerful features of C and C++ programming. Before we learn pointers, let's learn about addresses in C programming. Address in C \u00b6 If you have a variable var in your program, &var will give you its address in the memory. We have used address numerous times while using the scanf() function. scanf ( \"%d\" , & var ); Here, the value entered by the user is stored in the address of var variable. Let's take a working example. #include <stdio.h> int main () { int var = 5 ; printf ( \"var: %d \\n \" , var ); // Notice the use of & before var printf ( \"address of var: %p\" , & var ); return 0 ; } Output var: 5 address of var: 2686778 Note: You will probably get a different address when you run the above code. C Pointers \u00b6 Pointers (pointer variables) are special variables that are used to store addresses rather than values. Pointer Syntax \u00b6 Here is how we can declare pointers. int * p ; Here, we have declared a pointer p of int type. You can also declare pointers in these ways. int * p1 ; int * p2 ; Let's take another example of declaring pointers. int * p1 , p2 ; Here, we have declared a pointer p1 and a normal variable p2. Assigning addresses to Pointers \u00b6 Let's take an example. int * pc , c ; c = 5 ; pc = & c ; Here, 5 is assigned to the c variable. And, the address of c is assigned to the pc pointer. Get Value of Thing Pointed by Pointers \u00b6 To get the value of the thing pointed by the pointers, we use the * operator. For example: int * pc , c ; c = 5 ; pc = & c ; printf ( \"%d\" , * pc ); // Output: 5 Here, the address of c is assigned to the pc pointer. To get the value stored in that address, we used *pc. Note: In the above example, pc is a pointer, not *pc . You cannot and should not do something like *pc = &c ; By the way, * is called the dereference operator (when working with pointers). It operates on a pointer and gives the value stored in that pointer. Changing Value Pointed by Pointers \u00b6 Let's take an example. int * pc , c ; c = 5 ; pc = & c ; c = 1 ; printf ( \"%d\" , c ); // Output: 1 printf ( \"%d\" , * pc ); // Ouptut: 1 We have assigned the address of c to the pc pointer. Then, we changed the value of c to 1. Since pc and the address of c is the same, *pc gives us 1. Let's take another example. int * pc , c ; c = 5 ; pc = & c ; * pc = 1 ; printf ( \"%d\" , * pc ); // Ouptut: 1 printf ( \"%d\" , c ); // Output: 1 We have assigned the address of c to the pc pointer. Then, we changed *pc to 1 using *pc = 1; . Since pc and the address of c is the same, c will be equal to 1. Let's take one more example. int * pc , c , d ; c = 5 ; d = -15 ; pc = & c ; printf ( \"%d\" , * pc ); // Output: 5 pc = & d ; printf ( \"%d\" , * pc ); // Ouptut: -15 Initially, the address of c is assigned to the pc pointer using pc = &c; . Since c is 5, *pc gives us 5. Then, the address of d is assigned to the pc pointer using pc = &d; . Since d is -15, *pc gives us -15. Example: Working of Pointers \u00b6 Let's take a working example. #include <stdio.h> int main () { int * pc , c ; c = 22 ; printf ( \"Address of c: %p \\n \" , & c ); printf ( \"Value of c: %d \\n\\n \" , c ); // 22 pc = & c ; printf ( \"Address of pointer pc: %p \\n \" , pc ); printf ( \"Content of pointer pc: %d \\n\\n \" , * pc ); // 22 c = 11 ; printf ( \"Address of pointer pc: %p \\n \" , pc ); printf ( \"Content of pointer pc: %d \\n\\n \" , * pc ); // 11 * pc = 2 ; printf ( \"Address of c: %p \\n \" , & c ); printf ( \"Value of c: %d \\n\\n \" , c ); // 2 return 0 ; } Output Address of c: 2686784 Value of c: 22 Address of pointer pc: 2686784 Content of pointer pc: 22 Address of pointer pc: 2686784 Content of pointer pc: 11 Address of c: 2686784 Value of c: 2 Explanation of the program int* pc, c; Here, a pointer pc and a normal variable c, both of type int , is created. Since pc and c are not initialized at initially, pointer pc points to either no address or a random address. And, variable c has an address but contains random garbage value. 2. c = 22; This assigns 22 to the variable c. That is, 22 is stored in the memory location of variable c. pc = &c; This assigns the address of variable c to the pointer pc. c = 11; This assigns 11 to variable c. *pc = 2; This change the value at the memory location pointed by the pointer pc to 2. Common mistakes when working with pointers \u00b6 Suppose, you want pointer pc to point to the address of c. Then, int c , * pc ; // pc is address but c is not pc = c ; // Error // &c is address but *pc is not * pc = & c ; // Error // both &c and pc are addresses pc = & c ; // Not an error // both c and *pc are values * pc = c ; // Not an error Here's an example of pointer syntax beginners often find confusing. #include <stdio.h> int main () { int c = 5 ; int * p = & c ; printf ( \"%d\" , * p ); // 5 return 0 ; } Why didn't we get an error when using int *p = &c; ? It's because int * p = & c ; is equivalent to int * p : p = & c ; In both cases, we are creating a pointer p (not *p ) and assigning &c to it. To avoid this confusion, we can use the statement like this: int * p = & c ; Now you know what pointers are, you will learn how pointers are related to arrays in the next tutorial. Relationship Between Arrays and Pointers \u00b6 In this tutorial, you'll learn about the relationship between arrays and pointers in C programming. You will also learn to access array elements using pointers. Before you learn about the relationship between arrays and pointers, be sure to check these two topics: C Arrays C Pointers Relationship Between Arrays and Pointers \u00b6 An array is a block of sequential data. Let's write a program to print addresses of array elements. #include <stdio.h> int main () { int x [ 4 ]; int i ; for ( i = 0 ; i < 4 ; ++ i ) { printf ( \"&x[%d] = %p \\n \" , i , & x [ i ]); } printf ( \"Address of array x: %p\" , x ); return 0 ; } Output & x [ 0 ] = 1450734448 & x [ 1 ] = 1450734452 & x [ 2 ] = 1450734456 & x [ 3 ] = 1450734460 Address of array x: 1450734448 ``` --- There is a difference of 4 bytes between two consecutive elements of array x. It is because the size of ` int ` is 4 bytes ( on our compiler ) . Notice that, the address of & x [ 0 ] and x is the same. It ' s because the variable name x points to the first element of the array. --- ### Arrays as Pointers ! [ center height:300px ]( https://cdn.programiz.com/sites/tutorial2program/files/array-pointers.jpg ) --- Relation between Arrays and Pointers From the above example, it is clear that ` & x [ 0 ] ` is equivalent to x. And, ` x [ 0 ] ` is equivalent to ` *x ` . --- Similarly, - ` & x [ 1 ] ` is equivalent to ` x+1 ` and ` x [ 1 ] ` is equivalent to ` * ( x+1 ) ` . - ` & x [ 2 ] ` is equivalent to ` x+2 ` and ` x [ 2 ] ` is equivalent to ` * ( x+2 ) ` . - ... - Basically, ` & x [ i ] ` is equivalent to ` x+i ` and ` x [ i ] ` is equivalent to ` * ( x+i ) ` . --- ### Example 1: Pointers and Arrays ``` c #include <stdio.h> int main () { int i, x [ 6 ] , sum = 0 ; printf ( \"Enter 6 numbers: \" ) ; for ( i = 0 ; i < 6 ; ++i ) { // Equivalent to scanf ( \"%d\" , & x [ i ]) ; scanf ( \"%d\" , x+i ) ; // Equivalent to sum += x [ i ] sum += * ( x+i ) ; } printf ( \"Sum = %d\" , sum ) ; return 0 ; } When you run the program, the output will be: Enter 6 numbers: 2 3 4 4 12 4 Sum = 29 Here, we have declared an array x of 6 elements. To access elements of the array, we have used pointers. In most contexts, array names decay to pointers. In simple words, array names are converted to pointers. That's the reason why you can use pointers to access elements of arrays. However, you should remember that pointers and arrays are not the same . There are a few cases where array names don't decay to pointers. To learn more, visit: When does array name doesn't decay into a pointer? Example 2: Arrays and Pointers \u00b6 #include <stdio.h> int main () { int x [ 5 ] = { 1 , 2 , 3 , 4 , 5 }; int * ptr ; // ptr is assigned the address of the third element ptr = & x [ 2 ]; printf ( \"*ptr = %d \\n \" , * ptr ); // 3 printf ( \"*(ptr+1) = %d \\n \" , * ( ptr + 1 )); // 4 printf ( \"*(ptr-1) = %d\" , * ( ptr -1 )); // 2 return 0 ; } When you run the program, the output will be: *ptr = 3 * ( ptr+1 ) = 4 * ( ptr-1 ) = 2 In this example, &x[2] , the address of the third element, is assigned to the ptr pointer. Hence, 3 was displayed when we printed *ptr . And, printing *(ptr+1) gives us the fourth element. Similarly, printing *(ptr-1) gives us the second element. C Pass Addresses and Pointers \u00b6 In this tutorial, you'll learn to pass addresses and pointers as arguments to functions with the help of examples. In C programming, it is also possible to pass addresses as arguments to functions. To accept these addresses in the function definition, we can use pointers. It's because pointers are used to store addresses. Let's take an example: Example: Pass Addresses to Functions \u00b6 #include <stdio.h> void swap ( int * n1 , int * n2 ); int main () { int num1 = 5 , num2 = 10 ; // address of num1 and num2 is passed swap ( & num1 , & num2 ); printf ( \"num1 = %d \\n \" , num1 ); printf ( \"num2 = %d\" , num2 ); return 0 ; } void swap ( int * n1 , int * n2 ) { int temp ; temp = * n1 ; * n1 = * n2 ; * n2 = temp ; } Run Code When you run the program, the output will be: num1 = 10 num2 = 5 The address of num1 and num2 are passed to the swap() function using swap(&num1, &num2); . Pointers n1 and n2 accept these arguments in the function definition. void swap ( int * n1 , int * n2 ) { ... .. } When *n1 and *n2 are changed inside the swap() function, num1 and num2 inside the main() function are also changed. Inside the swap() function, *n1 and *n2 swapped. Hence, num1 and num2 are also swapped. Notice that swap() is not returning anything; its return type is void . Example 2: Passing Pointers to Functions \u00b6 #include <stdio.h> void addOne ( int * ptr ) { ( * ptr ) ++ ; // adding 1 to *ptr } int main () { int * p , i = 10 ; p = & i ; addOne ( p ); printf ( \"%d\" , * p ); // 11 return 0 ; } Run Code Here, the value stored at p, *p , is 10 initially. We then passed the pointer p to the addOne() function. The ptr pointer gets this address in the addOne() function. Inside the function, we increased the value stored at ptr by 1 using (*ptr)++; . Since ptr and p pointers both have the same address, *p inside main() is also 11. C Dynamic Memory Allocation \u00b6 In this tutorial, you'll learn to dynamically allocate memory in your C program using standard library functions: malloc(), calloc(), free() and realloc(). As you know, an array is a collection of a fixed number of values. Once the size of an array is declared, you cannot change it. Sometimes the size of the array you declared may be insufficient. To solve this issue, you can allocate memory manually during run-time. This is known as dynamic memory allocation in C programming. To allocate memory dynamically, library functions are malloc() , calloc() , realloc() and free() are used. These functions are defined in the <stdlib.h> header file. C malloc() \u00b6 The name \"malloc\" stands for memory allocation. The malloc() function reserves a block of memory of the specified number of bytes. And, it returns a pointer of void which can be casted into pointers of any form. Syntax of malloc() \u00b6 ptr = ( castType * ) malloc ( size ); Example ptr = ( float * ) malloc ( 100 * sizeof ( float )); The above statement allocates 400 bytes of memory. It's because the size of float is 4 bytes. And, the pointer ptr holds the address of the first byte in the allocated memory. The expression results in a NULL pointer if the memory cannot be allocated. C calloc() \u00b6 The name \"calloc\" stands for contiguous allocation. The malloc() function allocates memory and leaves the memory uninitialized, whereas the calloc() function allocates memory and initializes all bits to zero. Syntax of calloc() \u00b6 ptr = ( castType * ) calloc ( n , size ); Example: ptr = ( float * ) calloc ( 25 , sizeof ( float )); The above statement allocates contiguous space in memory for 25 elements of type float . C free() \u00b6 Dynamically allocated memory created with either calloc() or malloc() doesn't get freed on their own. You must explicitly use free() to release the space. Syntax of free() \u00b6 free ( ptr ); This statement frees the space allocated in the memory pointed by ptr . Example 1: malloc() and free() \u00b6 // Program to calculate the sum of n numbers entered by the user #include <stdio.h> #include <stdlib.h> int main () { int n , i , * ptr , sum = 0 ; printf ( \"Enter number of elements: \" ); scanf ( \"%d\" , & n ); ptr = ( int * ) malloc ( n * sizeof ( int )); // if memory cannot be allocated if ( ptr == NULL ) { printf ( \"Error! memory not allocated.\" ); exit ( 0 ); } printf ( \"Enter elements: \" ); for ( i = 0 ; i < n ; ++ i ) { scanf ( \"%d\" , ptr + i ); sum += * ( ptr + i ); } printf ( \"Sum = %d\" , sum ); // deallocating the memory free ( ptr ); return 0 ; } Run Code Output Enter number of elements: 3 Enter elements: 100 20 36 Sum = 156 Here, we have dynamically allocated the memory for n number of int . Example 2: calloc() and free() \u00b6 // Program to calculate the sum of n numbers entered by the user #include <stdio.h> #include <stdlib.h> int main () { int n , i , * ptr , sum = 0 ; printf ( \"Enter number of elements: \" ); scanf ( \"%d\" , & n ); ptr = ( int * ) calloc ( n , sizeof ( int )); if ( ptr == NULL ) { printf ( \"Error! memory not allocated.\" ); exit ( 0 ); } printf ( \"Enter elements: \" ); for ( i = 0 ; i < n ; ++ i ) { scanf ( \"%d\" , ptr + i ); sum += * ( ptr + i ); } printf ( \"Sum = %d\" , sum ); free ( ptr ); return 0 ; } Run Code Output Enter number of elements: 3 Enter elements: 100 20 36 Sum = 156 C realloc() \u00b6 If the dynamically allocated memory is insufficient or more than required, you can change the size of previously allocated memory using the realloc() function. Syntax of realloc() \u00b6 ptr = realloc ( ptr , x ); Here, ptr is reallocated with a new size x. Example 3: realloc() \u00b6 #include <stdio.h> #include <stdlib.h> int main () { int * ptr , i , n1 , n2 ; printf ( \"Enter size: \" ); scanf ( \"%d\" , & n1 ); ptr = ( int * ) malloc ( n1 * sizeof ( int )); printf ( \"Addresses of previously allocated memory: \\n \" ); for ( i = 0 ; i < n1 ; ++ i ) printf ( \"%pc \\n \" , ptr + i ); printf ( \" \\n Enter the new size: \" ); scanf ( \"%d\" , & n2 ); // rellocating the memory ptr = realloc ( ptr , n2 * sizeof ( int )); printf ( \"Addresses of newly allocated memory: \\n \" ); for ( i = 0 ; i < n2 ; ++ i ) printf ( \"%pc \\n \" , ptr + i ); free ( ptr ); return 0 ; } Run Code Output Enter size: 2 Addresses of previously allocated memory: 26855472 26855476 Enter the new size: 4 Addresses of newly allocated memory: 26855472 26855476 26855480 26855484 C Array and Pointer Examples C Programming Strings \u00b6 In this tutorial, you'll learn about strings in C programming. You'll learn to declare them, initialize them and use them for various I/O operations with the help of examples. In C programming, a string is a sequence of characters terminated with a null character \\0 . For example: char c [] = \"c string\" ; When the compiler encounters a sequence of characters enclosed in the double quotation marks, it appends a null character \\0 at the end by default. Strings in memory diagram \u00b6 How to declare a string? \u00b6 Here's how you can declare strings: char s [ 5 ]; String Declaration in C Here, we have declared a string of 5 characters. How to initialize strings? \u00b6 You can initialize strings in a number of ways. char c [] = \"abcd\" ; char c [ 50 ] = \"abcd\" ; char c [] = { 'a' , 'b' , 'c' , 'd' , '\\0' }; char c [ 5 ] = { 'a' , 'b' , 'c' , 'd' , '\\0' }; String Initialization in C Let's take another example: char c [ 5 ] = \"abcde\" ; Here, we are trying to assign 6 characters (the last character is '\\0' ) to a char array having 5 characters. This is bad and you should never do this. Assigning Values to Strings \u00b6 Arrays and strings are second-class citizens in C; they do not support the assignment operator once it is declared. For example, char c [ 100 ]; c = \"C programming\" ; // Error! array type is not assignable. Note: Use the strcpy() function to copy the string instead. Read String from the user \u00b6 You can use the scanf() function to read a string. The scanf() function reads the sequence of characters until it encounters whitespace (space, newline, tab, etc.). Example 1: scanf() to read a string \u00b6 #include <stdio.h> int main () { char name [ 20 ]; printf ( \"Enter name: \" ); scanf ( \"%s\" , name ); printf ( \"Your name is %s.\" , name ); return 0 ; } Output Enter name: Dennis Ritchie Your name is Dennis. Even though Dennis Ritchie was entered in the above program, only \"Dennis\" was stored in the name string. It's because there was a space after Dennis. Also notice that we have used the code name instead of &name with scanf() . scanf ( \"%s\" , name ); This is because name is a char array, and we know that array names decay to pointers in C. Thus, the name in scanf() already points to the address of the first element in the string, which is why we don't need to use & . How to read a line of text? \u00b6 You can use the fgets() function to read a line of string. And, you can use puts() to display the string. Example 2: fgets() and puts() \u00b6 #include <stdio.h> int main () { char name [ 30 ]; printf ( \"Enter name: \" ); fgets ( name , sizeof ( name ), stdin ); // read string printf ( \"Name: \" ); puts ( name ); // display string return 0 ; } Output Enter name: Tom Hanks Name: Tom Hanks Here, we have used fgets() function to read a string from the user. fgets(name, sizeof(name), stdlin); // read string The sizeof(name) results to 30. Hence, we can take a maximum of 30 characters as input which is the size of the name string. To print the string, we have used puts(name); . Note: The gets() function can also be to take input from the user. However, it is removed from the C standard. It's because gets() allows you to input any length of characters. Hence, there might be a buffer overflow. Passing Strings to Functions \u00b6 Strings can be passed to a function in a similar way as arrays. Learn more about passing arrays to a function . Example 3: Passing string to a Function \u00b6 #include <stdio.h> void displayString ( char str []); int main () { char str [ 50 ]; printf ( \"Enter string: \" ); fgets ( str , sizeof ( str ), stdin ); displayString ( str ); // Passing string to a function. return 0 ; } void displayString ( char str []) { printf ( \"String Output: \" ); puts ( str ); } Strings and Pointers \u00b6 Similar like arrays, string names are \"decayed\" to pointers. Hence, you can use pointers to manipulate elements of the string. We recommended you to check C Arrays and Pointers before you check this example. Example 4: Strings and Pointers \u00b6 #include <stdio.h> int main ( void ) { char name [] = \"Harry Potter\" ; printf ( \"%c\" , * name ); // Output: H printf ( \"%c\" , * ( name + 1 )); // Output: a printf ( \"%c\" , * ( name + 7 )); // Output: o char * namePtr ; namePtr = name ; printf ( \"%c\" , * namePtr ); // Output: H printf ( \"%c\" , * ( namePtr + 1 )); // Output: a printf ( \"%c\" , * ( namePtr + 7 )); // Output: o } Commonly Used String Functions \u00b6 strlen() - calculates the length of a string strcpy() - copies a string to another strcmp() - compares two strings strcat() - concatenates two strings String Manipulations In C Programming Using Library Functions \u00b6 In this article, you'll learn to manipulate strings in C using library functions such as gets(), puts, strlen() and more. You'll learn to get string from the user and perform operations on the string. You need to often manipulate strings according to the need of a problem. Most, if not all, of the time string manipulation can be done manually but, this makes programming complex and large. To solve this, C supports a large number of string handling functions in the standard library \"string.h\" . Few commonly used string handling functions are discussed below: Function Work of Function strlen() computes string's length strcpy() copies a string to another strcat() concatenates(joins) two strings strcmp() compares two strings strlwr() converts string to lowercase strupr() converts string to uppercase Strings handling functions are defined under \"string.h\" header file. include \u00b6 Note: You have to include the code below to run string handling functions. gets() and puts() \u00b6 Functions gets() and puts() are two string functions to take string input from the user and display it respectively as mentioned in the previous chapter . #include <stdio.h> int main () { char name [ 30 ]; printf ( \"Enter name: \" ); gets ( name ); //Function to read string from user. printf ( \"Name: \" ); puts ( name ); //Function to display string. return 0 ; } Note: Though, gets() and puts() function handle strings, both these functions are defined in \"stdio.h\" header file. String Examples in C Programming C struct \u00b6 In this tutorial, you'll learn about struct types in C Programming with the help of examples. In C programming, a struct (or structure) is a collection of variables (can be of different types) under a single name. Define Structures \u00b6 Before you can create structure variables, you need to define its data type. To define a struct, the struct keyword is used. Syntax of struct \u00b6 struct structureName { dataType member1 ; dataType member2 ; ... }; For example, struct Person { char name [ 50 ]; int citNo ; float salary ; }; Here, a derived type struct Person is defined. Now, you can create variables of this type. Create struct Variables \u00b6 When a struct type is declared, no storage or memory is allocated. To allocate memory of a given structure type and work with it, we need to create variables. Here's how we create structure variables: struct Person { // code }; int main () { struct Person person1 , person2 , p [ 20 ]; return 0 ; } Another way of creating a struct variable is: struct Person { // code } person1 , person2 , p [ 20 ]; In both cases, person1 and person2 are struct Person variables p[] is a struct Person array of size 20. Access Members of a Structure \u00b6 There are two types of operators used for accessing members of a structure. . - Member operator -> - Structure pointer operator (will be discussed in the next tutorial) Suppose, you want to access the salary of person2. Here's how you can do it. person2 . salary Example 1: C structs \u00b6 #include <stdio.h> #include <string.h> // create struct with person1 variable struct Person { char name [ 50 ]; int citNo ; float salary ; } person1 ; int main () { // assign value to name of person1 strcpy ( person1 . name , \"George Orwell\" ); // assign values to other person1 variables person1 . citNo = 1984 ; person1 . salary = 2500 ; // print struct variables printf ( \"Name: %s \\n \" , person1 . name ); printf ( \"Citizenship No.: %d \\n \" , person1 . citNo ); printf ( \"Salary: %.2f\" , person1 . salary ); return 0 ; } Run Code Output Name: George Orwell Citizenship No.: 1984 Salary: 2500 .00 In this program, we have created a struct named Person . We have also created a variable of Person named person1. In main() , we have assigned values to the variables defined in Person for the person1 object. strcpy ( person1 . name , \"George Orwell\" ); person1 . citNo = 1984 ; person1 . salary = 2500 ; Notice that we have used strcpy() function to assign the value to person1.name. This is because name is a char array ( C-string ) and we cannot use the assignment operator = with it after we have declared the string. Finally, we printed the data of person1. Keyword typedef \u00b6 We use the typedef keyword to create an alias name for data types. It is commonly used with structures to simplify the syntax of declaring variables. For example, let us look at the following code: struct Distance { int feet ; float inch ; }; int main () { struct Distance d1 , d2 ; } We can use typedef to write an equivalent code with a simplified syntax: typedef struct Distance { int feet ; float inch ; } distances ; int main () { distances d1 , d2 ; } Example 2: C typedef \u00b6 #include <stdio.h> #include <string.h> // struct with typedef person typedef struct Person { char name [ 50 ]; int citNo ; float salary ; } person ; int main () { // create Person variable person p1 ; // assign value to name of p1 strcpy ( p1 . name , \"George Orwell\" ); // assign values to other p1 variables p1 . citNo = 1984 ; p1 . salary = 2500 ; // print struct variables printf ( \"Name: %s \\n \" , p1 . name ); printf ( \"Citizenship No.: %d \\n \" , p1 . citNo ); printf ( \"Salary: %.2f\" , p1 . salary ); return 0 ; } Run Code Output Name: George Orwell Citizenship No.: 1984 Salary: 2500 .00 Here, we have used typedef with the Person structure to create an alias person . // struct with typedef person typedef struct Person { // code } person ; Now, we can simply declare a Person variable using the person alias: // equivalent to struct Person p1 person p1 ; Nested Structures \u00b6 You can create structures within a structure in C programming. For example, struct complex { int imag ; float real ; }; struct number { struct complex comp ; int integers ; } num1 , num2 ; Suppose, you want to set imag of num2 variable to 11 . Here's how you can do it: num2 . comp . imag = 11 ; Example 3: C Nested Structures \u00b6 #include <stdio.h> struct complex { int imag ; float real ; }; struct number { struct complex comp ; int integer ; } num1 ; int main () { // initialize complex variables num1 . comp . imag = 11 ; num1 . comp . real = 5.25 ; // initialize number variable num1 . integer = 6 ; // print struct variables printf ( \"Imaginary Part: %d \\n \" , num1 . comp . imag ); printf ( \"Real Part: %.2f \\n \" , num1 . comp . real ); printf ( \"Integer: %d\" , num1 . integer ); return 0 ; } Run Code Output Imaginary Part: 11 Real Part: 5 .25 Integer: 6 Why structs in C? \u00b6 Suppose you want to store information about a person: his/her name, citizenship number, and salary. You can create different variables name, citNo and salary to store this information. What if you need to store information of more than one person? Now, you need to create different variables for each information per person: name1, citNo1, salary1, name2, citNo2, salary2, etc. A better approach would be to have a collection of all related information under a single name Person structure and use it for every person. More on struct \u00b6 Structures and pointers Passing structures to a function C structs and Pointers \u00b6 In this tutorial, you'll learn to use pointers to access members of structs in C programming. You will also learn to dynamically allocate memory of struct types. Before you learn about how pointers can be used with structs, be sure to check these tutorials: C Pointers C struct C Pointers to struct \u00b6 Here's how you can create pointers to structs. struct name { member1 ; member2 ; . . }; int main () { struct name * ptr , Harry ; } Here, ptr is a pointer to struct . Example: Access members using Pointer \u00b6 To access members of a structure using pointers, we use the -> operator. #include <stdio.h> struct person { int age ; float weight ; }; int main () { struct person * personPtr , person1 ; personPtr = & person1 ; printf ( \"Enter age: \" ); scanf ( \"%d\" , & personPtr -> age ); printf ( \"Enter weight: \" ); scanf ( \"%f\" , & personPtr -> weight ); printf ( \"Displaying: \\n \" ); printf ( \"Age: %d \\n \" , personPtr -> age ); printf ( \"weight: %f\" , personPtr -> weight ); return 0 ; } Run Code In this example, the address of person1 is stored in the personPtr pointer using personPtr = &person1; . Now, you can access the members of person1 using the personPtr pointer. By the way, personPtr->age is equivalent to (*personPtr).age personPtr->weight is equivalent to (*personPtr).weight Dynamic memory allocation of structs \u00b6 Before you proceed this section, we recommend you to check C dynamic memory allocation . Sometimes, the number of struct variables you declared may be insufficient. You may need to allocate memory during run-time. Here's how you can achieve this in C programming. Example: Dynamic memory allocation of structs \u00b6 #include <stdio.h> #include <stdlib.h> struct person { int age ; float weight ; char name [ 30 ]; }; int main () { struct person * ptr ; int i , n ; printf ( \"Enter the number of persons: \" ); scanf ( \"%d\" , & n ); // allocating memory for n numbers of struct person ptr = ( struct person * ) malloc ( n * sizeof ( struct person )); for ( i = 0 ; i < n ; ++ i ) { printf ( \"Enter first name and age respectively: \" ); // To access members of 1st struct person, // ptr->name and ptr->age is used // To access members of 2nd struct person, // (ptr+1)->name and (ptr+1)->age is used scanf ( \"%s %d\" , ( ptr + i ) -> name , & ( ptr + i ) -> age ); } printf ( \"Displaying Information: \\n \" ); for ( i = 0 ; i < n ; ++ i ) printf ( \"Name: %s \\t Age: %d \\n \" , ( ptr + i ) -> name , ( ptr + i ) -> age ); return 0 ; } Run Code When you run the program, the output will be: Enter the number of persons: 2 Enter first name and age respectively: Harry 24 Enter first name and age respectively: Gary 32 Displaying Information: Name: Harry Age: 24 Name: Gary Age: 32 In the above example, n number of struct variables are created where n is entered by the user. To allocate the memory for n number of struct person, we used, ptr = (struct person*) malloc(n * sizeof(struct person)); Then, we used the ptr pointer to access elements of person. C Structure and Function \u00b6 In this tutorial, you'll learn to pass struct variables as arguments to a function. You will learn to return struct from a function with the help of examples. Similar to variables of built-in types, you can also pass structure variables to a function. Passing structs to functions \u00b6 We recommended you to learn these tutorials before you learn how to pass structs to functions. C structures C functions User-defined Function Here's how you can pass structures to a function #include <stdio.h> struct student { char name [ 50 ]; int age ; }; // function prototype void display ( struct student s ); int main () { struct student s1 ; printf ( \"Enter name: \" ); // read string input from the user until \\n is entered // \\n is discarded scanf ( \"%[^ \\n ]%*c\" , s1 . name ); printf ( \"Enter age: \" ); scanf ( \"%d\" , & s1 . age ); display ( s1 ); // passing struct as an argument return 0 ; } void display ( struct student s ) { printf ( \" \\n Displaying information \\n \" ); printf ( \"Name: %s\" , s . name ); printf ( \" \\n Age: %d\" , s . age ); } Run Code Output Enter name: Bond Enter age: 13 Displaying information Name: Bond Age: 13 Here, a struct variable s1 of type struct student is created. The variable is passed to the display() function using display(s1); statement. Return struct from a function \u00b6 Here's how you can return structure from a function: #include <stdio.h> struct student { char name [ 50 ]; int age ; }; // function prototype struct student getInformation (); int main () { struct student s ; s = getInformation (); printf ( \" \\n Displaying information \\n \" ); printf ( \"Name: %s\" , s . name ); printf ( \" \\n Roll: %d\" , s . age ); return 0 ; } struct student getInformation () { struct student s1 ; printf ( \"Enter name: \" ); scanf ( \"%[^ \\n ]%*c\" , s1 . name ); printf ( \"Enter age: \" ); scanf ( \"%d\" , & s1 . age ); return s1 ; } Run Code Here, the getInformation() function is called using s = getInformation(); statement. The function returns a structure of type struct student . The returned structure is displayed from the main() function. Notice that, the return type of getInformation() is also struct student . Passing struct by reference \u00b6 You can also pass structs by reference (in a similar way like you pass variables of built-in type by reference). We suggest you to read pass by reference tutorial before you proceed. During pass by reference, the memory addresses of struct variables are passed to the function. #include <stdio.h> typedef struct Complex { float real ; float imag ; } complex ; void addNumbers ( complex c1 , complex c2 , complex * result ); int main () { complex c1 , c2 , result ; printf ( \"For first number, \\n \" ); printf ( \"Enter real part: \" ); scanf ( \"%f\" , & c1 . real ); printf ( \"Enter imaginary part: \" ); scanf ( \"%f\" , & c1 . imag ); printf ( \"For second number, \\n \" ); printf ( \"Enter real part: \" ); scanf ( \"%f\" , & c2 . real ); printf ( \"Enter imaginary part: \" ); scanf ( \"%f\" , & c2 . imag ); addNumbers ( c1 , c2 , & result ); printf ( \" \\n result.real = %.1f \\n \" , result . real ); printf ( \"result.imag = %.1f\" , result . imag ); return 0 ; } void addNumbers ( complex c1 , complex c2 , complex * result ) { result -> real = c1 . real + c2 . real ; result -> imag = c1 . imag + c2 . imag ; } Run Code Output For first number, Enter real part: 1 .1 Enter imaginary part: -2.4 For second number, Enter real part: 3 .4 Enter imaginary part: -3.2 result.real = 4 .5 result.imag = -5.6 In the above program, three structure variables c1, c2 and the address of result is passed to the addNumbers() function. Here, result is passed by reference. When the result variable inside the addNumbers() is altered, the result variable inside the main() function is also altered accordingly. C Unions \u00b6 In this tutorial, you'll learn about unions in C programming. More specifically, how to create unions, access its members and learn the differences between unions and structures. A union is a user-defined type similar to structs in C except for one key difference. Structures allocate enough space to store all their members, whereas unions can only hold one member value at a time . How to define a union? \u00b6 We use the union keyword to define unions. Here's an example: union car { char name [ 50 ]; int price ; }; The above code defines a derived type union car . Create union variables \u00b6 When a union is defined, it creates a user-defined type. However, no memory is allocated. To allocate memory for a given union type and work with it, we need to create variables. Here's how we create union variables. union car { char name [ 50 ]; int price ; }; int main () { union car car1 , car2 , * car3 ; return 0 ; } Another way of creating union variables is: union car { char name [ 50 ]; int price ; } car1 , car2 , * car3 ; In both cases, union variables car1, car2, and a union pointer car3 of union car type are created. Access members of a union \u00b6 We use the . operator to access members of a union. And to access pointer variables, we use the -> operator. In the above example, To access price for car1 , car1.price is used. To access price using car3 , either (*car3).price or car3->price can be used. Difference between unions and structures \u00b6 Let's take an example to demonstrate the difference between unions and structures: #include <stdio.h> union unionJob { //defining a union char name [ 32 ]; float salary ; int workerNo ; } uJob ; struct structJob { char name [ 32 ]; float salary ; int workerNo ; } sJob ; int main () { printf ( \"size of union = %d bytes\" , sizeof ( uJob )); printf ( \" \\n size of structure = %d bytes\" , sizeof ( sJob )); return 0 ; } Output size of union = 32 size of structure = 40 Why this difference in the size of union and structure variables? Here, the size of sJob is 40 bytes because the size of name[32] is 32 bytes the size of salary is 4 bytes the size of workerNo is 4 bytes However, the size of uJob is 32 bytes. It's because the size of a union variable will always be the size of its largest element. In the above example, the size of its largest element, ( name[32] ), is 32 bytes. With a union, all members share the same memory . Example: Accessing Union Members \u00b6 #include <stdio.h> union Job { float salary ; int workerNo ; } j ; int main () { j . salary = 12.3 ; // when j.workerNo is assigned a value, // j.salary will no longer hold 12.3 j . workerNo = 100 ; printf ( \"Salary = %.1f \\n \" , j . salary ); printf ( \"Number of workers = %d\" , j . workerNo ); return 0 ; } Output Salary = 0 .0 Number of workers = 100 To learn where unions are used, visit Why do we need C Unions? C Struct Examples C File Handling \u00b6 In this tutorial, you will learn about file handling in C. You will learn to handle standard I/O in C using fprintf(), fscanf(), fread(), fwrite(), fseek() etc. with the help of examples. A file is a container in computer storage devices used for storing data. Why files are needed? \u00b6 When a program is terminated, the entire data is lost. Storing in a file will preserve your data even if the program terminates. If you have to enter a large number of data, it will take a lot of time to enter them all. However, if you have a file containing all the data, you can easily access the contents of the file using a few commands in C. You can easily move your data from one computer to another without any changes. Types of Files \u00b6 When dealing with files, there are two types of files you should know about: Text files Binary files 1. Text files \u00b6 Text files are the normal .txt files. You can easily create text files using any simple text editors such as Notepad. When you open those files, you'll see all the contents within the file as plain text. You can easily edit or delete the contents. They take minimum effort to maintain, are easily readable, and provide the least security and takes bigger storage space. 2. Binary files \u00b6 Binary files are mostly the .bin files in your computer. Instead of storing data in plain text, they store it in the binary form (0's and 1's). They can hold a higher amount of data, are not readable easily, and provides better security than text files. File Operations \u00b6 In C, you can perform four major operations on files, either text or binary: Creating a new file Opening an existing file Closing a file Reading from and writing information to a file Working with files \u00b6 When working with files, you need to declare a pointer of type file. This declaration is needed for communication between the file and the program. FILE * fptr ; Opening a file - for creation and edit \u00b6 Opening a file is performed using the fopen() function defined in the stdio.h header file. The syntax for opening a file in standard I/O is: ptr = fopen ( \"fileopen\" , \"mode\" ); For example, fopen ( \"E: \\\\ cprogram \\\\ newprogram.txt\" , \"w\" ); fopen ( \"E: \\\\ cprogram \\\\ oldprogram.bin\" , \"rb\" ); Let's suppose the file newprogram.txt doesn't exist in the location E:\\cprogram . The first function creates a new file named newprogram.txt and opens it for writing as per the mode 'w' . The writing mode allows you to create and edit (overwrite) the contents of the file. Now let's suppose the second binary file oldprogram.bin exists in the location E:\\cprogram . The second function opens the existing file for reading in binary mode 'rb' . The reading mode only allows you to read the file, you cannot write into the file. Opening Modes in Standard I/O Mode Meaning of Mode During Inexistence of file r Open for reading. If the file does not exist, fopen() returns NULL. rb Open for reading in binary mode. If the file does not exist, fopen() returns NULL. w Open for writing. If the file exists, its contents are overwritten. If the file does not exist, it will be created. Opening Modes in Standard I/O Mode Meaning of Mode During Inexistence of file wb Open for writing in binary mode. If the file exists, its contents are overwritten. If the file does not exist, it will be created. a Open for append. Data is added to the end of the file. If the file does not exist, it will be created. ab Open for append in binary mode. Data is added to the end of the file. If the file does not exist, it will be created. Opening Modes in Standard I/O Mode Meaning of Mode During Inexistence of file r+ Open for both reading and writing. If the file does not exist, fopen() returns NULL. rb+ Open for both reading and writing in binary mode. If the file does not exist, fopen() returns NULL. w+ Open for both reading and writing. If the file exists, its contents are overwritten. If the file does not exist, it will be created. Opening Modes in Standard I/O Mode Meaning of Mode During Inexistence of file wb+ Open for both reading and writing in binary mode. If the file exists, its contents are overwritten. If the file does not exist, it will be created. a+ Open for both reading and appending. If the file does not exist, it will be created. ab+ Open for both reading and appending in binary mode. If the file does not exist, it will be created. Closing a File \u00b6 The file (both text and binary) should be closed after reading/writing. Closing a file is performed using the fclose() function. fclose ( fptr ); Here, fptr is a file pointer associated with the file to be closed. Reading and writing to a text file \u00b6 For reading and writing to a text file, we use the functions fprintf() and fscanf(). They are just the file versions of printf() and scanf() . The only difference is that fprintf() and fscanf() expects a pointer to the structure FILE. Example 1: Write to a text file \u00b6 #include <stdio.h> #include <stdlib.h> int main () { int num ; FILE * fptr ; // use appropriate location if you are using MacOS or Linux fptr = fopen ( \"C: \\\\ program.txt\" , \"w\" ); if ( fptr == NULL ) { printf ( \"Error!\" ); exit ( 1 ); } printf ( \"Enter num: \" ); scanf ( \"%d\" , & num ); fprintf ( fptr , \"%d\" , num ); fclose ( fptr ); return 0 ; } This program takes a number from the user and stores in the file program.txt . After you compile and run this program, you can see a text file program.txt created in C drive of your computer. When you open the file, you can see the integer you entered. Example 2: Read from a text file \u00b6 #include <stdio.h> #include <stdlib.h> int main () { int num ; FILE * fptr ; if (( fptr = fopen ( \"C: \\\\ program.txt\" , \"r\" )) == NULL ){ printf ( \"Error! opening file\" ); // Program exits if the file pointer returns NULL. exit ( 1 ); } fscanf ( fptr , \"%d\" , & num ); printf ( \"Value of n=%d\" , num ); fclose ( fptr ); return 0 ; } This program reads the integer present in the program.txt file and prints it onto the screen. If you successfully created the file from Example 1 , running this program will get you the integer you entered. Other functions like fgetchar() , fputc() etc. can be used in a similar way. Reading and writing to a binary file \u00b6 Functions fread() and fwrite() are used for reading from and writing to a file on the disk respectively in case of binary files. Writing to a binary file \u00b6 To write into a binary file, you need to use the fwrite() function. The functions take four arguments: address of data to be written in the disk size of data to be written in the disk number of such type of data pointer to the file where you want to write. fwrite ( addressData , sizeData , numbersData , pointerToFile ); Example 3: Write to a binary file using fwrite() \u00b6 #include <stdio.h> #include <stdlib.h> struct threeNum { int n1 , n2 , n3 ; }; int main () { int n ; struct threeNum num ; FILE * fptr ; if (( fptr = fopen ( \"C: \\\\ program.bin\" , \"wb\" )) == NULL ){ printf ( \"Error! opening file\" ); // Program exits if the file pointer returns NULL. exit ( 1 ); } for ( n = 1 ; n < 5 ; ++ n ) { num . n1 = n ; num . n2 = 5 * n ; num . n3 = 5 * n + 1 ; fwrite ( & num , sizeof ( struct threeNum ), 1 , fptr ); } fclose ( fptr ); return 0 ; } In this program, we create a new file program.bin in the C drive. We declare a structure threeNum with three numbers - n1, n2 and n3, and define it in the main function as num. Now, inside the for loop, we store the value into the file using fwrite() . The first parameter takes the address of num and the second parameter takes the size of the structure threeNum . Since we're only inserting one instance of num, the third parameter is 1 . And, the last parameter *fptr points to the file we're storing the data. Finally, we close the file. Reading from a binary file \u00b6 Function fread() also take 4 arguments similar to the fwrite() function as above. fread ( addressData , sizeData , numbersData , pointerToFile ); Example 4: Read from a binary file using fread() \u00b6 #include <stdio.h> #include <stdlib.h> struct threeNum { int n1 , n2 , n3 ; }; int main () { int n ; struct threeNum num ; FILE * fptr ; if (( fptr = fopen ( \"C: \\\\ program.bin\" , \"rb\" )) == NULL ){ printf ( \"Error! opening file\" ); // Program exits if the file pointer returns NULL. exit ( 1 ); } for ( n = 1 ; n < 5 ; ++ n ) { fread ( & num , sizeof ( struct threeNum ), 1 , fptr ); printf ( \"n1: %d \\t n2: %d \\t n3: %d \\n \" , num . n1 , num . n2 , num . n3 ); } fclose ( fptr ); return 0 ; } In this program, you read the same file program.bin and loop through the records one by one. In simple terms, you read one threeNum record of threeNum size from the file pointed by *fptr into the structure num. You'll get the same records you inserted in Example 3 . Getting data using fseek() \u00b6 If you have many records inside a file and need to access a record at a specific position, you need to loop through all the records before it to get the record. This will waste a lot of memory and operation time. An easier way to get to the required data can be achieved using fseek() . As the name suggests, fseek() seeks the cursor to the given record in the file. Syntax of fseek() \u00b6 fseek ( FILE * stream , long int offset , int whence ); The first parameter stream is the pointer to the file. The second parameter is the position of the record to be found, and the third parameter specifies the location where the offset starts. Different whence in fseek() Whence Meaning SEEK_SET Starts the offset from the beginning of the file. SEEK_END Starts the offset from the end of the file. SEEK_CUR Starts the offset from the current location of the cursor in the file. Example 5: fseek() \u00b6 #include <stdio.h> #include <stdlib.h> struct threeNum { int n1 , n2 , n3 ; }; int main () { int n ; struct threeNum num ; FILE * fptr ; if (( fptr = fopen ( \"C: \\\\ program.bin\" , \"rb\" )) == NULL ){ printf ( \"Error! opening file\" ); // Program exits if the file pointer returns NULL. exit ( 1 ); } // Moves the cursor to the end of the file fseek ( fptr , - sizeof ( struct threeNum ), SEEK_END ); for ( n = 1 ; n < 5 ; ++ n ) { fread ( & num , sizeof ( struct threeNum ), 1 , fptr ); printf ( \"n1: %d \\t n2: %d \\t n3: %d \\n \" , num . n1 , num . n2 , num . n3 ); fseek ( fptr , -2 * sizeof ( struct threeNum ), SEEK_CUR ); } fclose ( fptr ); return 0 ; } This program will start reading the records from the file program.bin in the reverse order (last to first) and prints it. C Files Examples \u00b6 In this article, you'll find a list of examples to handle file input/output operations in C programming. To understand all programs on this page, you should have the knowledge of the following topics. C Arrays C Pointers Array and Pointer Relation File I/O C File Examples \u00b6 1. C program to read name and marks of n number of students and store them in a file. #include <stdio.h> int main () { char name [ 50 ]; int marks , i , num ; printf ( \"Enter number of students: \" ); scanf ( \"%d\" , & num ); FILE * fptr ; fptr = ( fopen ( \"C: \\\\ student.txt\" , \"w\" )); if ( fptr == NULL ) { printf ( \"Error!\" ); exit ( 1 ); } for ( i = 0 ; i < num ; ++ i ) { printf ( \"For student%d \\n Enter name: \" , i + 1 ); scanf ( \"%s\" , name ); printf ( \"Enter marks: \" ); scanf ( \"%d\" , & marks ); fprintf ( fptr , \" \\n Name: %s \\n Marks=%d \\n \" , name , marks ); } fclose ( fptr ); return 0 ; } 2. C program to read name and marks of n number of students from and store them in a file. If the file previously exits, add the information to the file. #include <stdio.h> int main () { char name [ 50 ]; int marks , i , num ; printf ( \"Enter number of students: \" ); scanf ( \"%d\" , & num ); FILE * fptr ; fptr = ( fopen ( \"C: \\\\ student.txt\" , \"a\" )); if ( fptr == NULL ) { printf ( \"Error!\" ); exit ( 1 ); } for ( i = 0 ; i < num ; ++ i ) { printf ( \"For student%d \\n Enter name: \" , i + 1 ); scanf ( \"%s\" , name ); printf ( \"Enter marks: \" ); scanf ( \"%d\" , & marks ); fprintf ( fptr , \" \\n Name: %s \\n Marks=%d \\n \" , name , marks ); } fclose ( fptr ); return 0 ; } 3. C program to write all the members of an array of structures to a file using fwrite(). Read the array from the file and display on the screen. #include <stdio.h> struct student { char name [ 50 ]; int height ; }; int main (){ struct student stud1 [ 5 ], stud2 [ 5 ]; FILE * fptr ; int i ; fptr = fopen ( \"file.txt\" , \"wb\" ); for ( i = 0 ; i < 5 ; ++ i ) { fflush ( stdin ); printf ( \"Enter name: \" ); gets ( stud1 [ i ]. name ); printf ( \"Enter height: \" ); scanf ( \"%d\" , & stud1 [ i ]. height ); } fwrite ( stud1 , sizeof ( stud1 ), 1 , fptr ); fclose ( fptr ); fptr = fopen ( \"file.txt\" , \"rb\" ); fread ( stud2 , sizeof ( stud2 ), 1 , fptr ); for ( i = 0 ; i < 5 ; ++ i ) { printf ( \"Name: %s \\n Height: %d\" , stud2 [ i ]. name , stud2 [ i ]. height ); } fclose ( fptr ); } C enums \u00b6 In this tutorial, you will learn about enum (enumeration) in C programming with the help of examples. In C programming, an enumeration type (also called enum) is a data type that consists of integral constants. To define enums, the enum keyword is used. enum flag { const1 , const2 , ..., constN }; By default, const1 is 0, const2 is 1 and so on. You can change default values of enum elements during declaration (if necessary). // Changing default values of enum constants enum suit { club = 0 , diamonds = 10 , hearts = 20 , spades = 3 , }; Enumerated Type Declaration \u00b6 When you define an enum type, the blueprint for the variable is created. Here's how you can create variables of enum types. enum boolean {false, true}; enum boolean check; // declaring an enum variable Here, a variable check of the type enum boolean is created. You can also declare enum variables like this. enum boolean {false, true} check; Here, the value of false is equal to 0 and the value of true is equal to 1. Example: Enumeration Type \u00b6 #include <stdio.h> enum week { Sunday , Monday , Tuesday , Wednesday , Thursday , Friday , Saturday }; int main () { // creating today variable of enum week type enum week today ; today = Wednesday ; printf ( \"Day %d\" , today + 1 ); return 0 ; } Output Day 4 Why enums are used? \u00b6 An enum variable can take only one value. Here is an example to demonstrate it, #include <stdio.h> enum suit { club = 0 , diamonds = 10 , hearts = 20 , spades = 3 } card ; int main () { card = club ; printf ( \"Size of enum variable = %d bytes\" , sizeof ( card )); return 0 ; } Output Size of enum variable = 4 bytes Here, we are getting 4 because the size of int is 4 bytes. This makes enum a good choice to work with flags. How to use enums for flags? \u00b6 Let us take an example, enum designFlags { ITALICS = 1 , BOLD = 2 , UNDERLINE = 4 } button ; Suppose you are designing a button for Windows application. You can set flags ITALICS , BOLD and UNDERLINE to work with text. There is a reason why all the integral constants are a power of 2 in the above pseudocode. // In binary ITALICS = 00000001 BOLD = 00000010 UNDERLINE = 00000100 Since the integral constants are a power of 2, you can combine two or more flags at once without overlapping using bitwise OR | operator . This allows you to choose two or more flags at once. For example, #include <stdio.h> enum designFlags { BOLD = 1 , ITALICS = 2 , UNDERLINE = 4 }; int main () { int myDesign = BOLD | UNDERLINE ; // 00000001 // | 00000100 // ___________ // 00000101 printf ( \"%d\" , myDesign ); return 0 ; } Output 5 When the output is 5, you always know that bold and underline is used. Also, you can add flags according to your requirements. if ( myDesign & ITALICS ) { // code for italics } Here, we have added italics to our design. Note, only code for italics is written inside the if statement. You can accomplish almost anything in C programming without using enumerations. However, they can be pretty handy in certain situations. C Preprocessor and Macros \u00b6 In this tutorial, you will be introduced to c preprocessors, and you will learn to use #include, #define and conditional compilation with the help of examples. C Preprocessor Working of C Preprocessor The C preprocessor is a macro preprocessor (allows you to define macros) that transforms your program before it is compiled. These transformations can be the inclusion of header files, macro expansions, etc. All preprocessing directives begin with a # symbol. For example, #define PI 3.14 Some of the common uses of C preprocessors are: Including Header Files: #include \u00b6 The #include preprocessor is used to include header files to C programs. For example, #include <stdio.h> Here, stdio.h is a header file. The #include preprocessor directive replaces the above line with the contents of stdio.h header file. That's the reason why you need to use #include <stdio.h> before you can use functions like scanf() and printf() . You can also create your own header file containing function declaration and include it in your program using this preprocessor directive. #include \"my_header.h\" Visit this page to learn more about using header files . Macros using #define \u00b6 A macro is a fragment of code that is given a name. You can define a macro in C using the #define preprocessor directive. Here's an example. #define c 299792458 // speed of light Here, when we use c in our program, it is replaced with 299792458 . Example 1: #define preprocessor \u00b6 #include <stdio.h> #define PI 3.1415 int main () { float radius , area ; printf ( \"Enter the radius: \" ); scanf ( \"%f\" , & radius ); // Notice, the use of PI area = PI * radius * radius ; printf ( \"Area=%.2f\" , area ); return 0 ; } Function like Macros \u00b6 You can also define macros that work in a similar way as a function call. This is known as function-like macros. For example, #define circleArea(r) (3.1415*(r)*(r)) Every time the program encounters circleArea(argument) , it is replaced by (3.1415*(argument)*(argument)) . Suppose, we passed 5 as an argument then, it expands as below: circleArea ( 5 ) expands to ( 3.1415 * 5 * 5 ) Example 2: Using #define preprocessor \u00b6 #include <stdio.h> #define PI 3.1415 #define circleArea(r) (PI*r*r) int main () { float radius , area ; printf ( \"Enter the radius: \" ); scanf ( \"%f\" , & radius ); area = circleArea ( radius ); printf ( \"Area = %.2f\" , area ); return 0 ; } Visit this page to learn more about macros and #define preprocessor . Conditional Compilation \u00b6 In C programming, you can instruct the preprocessor whether to include a block of code or not. To do so, conditional directives can be used. It's similar to a if statement with one major difference. The if statement is tested during the execution time to check whether a block of code should be executed or not whereas, the conditionals are used to include (or skip) a block of code in your program before execution. Uses of Conditional \u00b6 use different code depending on the machine, operating system compile the same source file in two different programs to exclude certain code from the program but to keep it as a reference for future purposes How to use conditional? \u00b6 To use conditional, #ifdef , #if , #defined , #else and #elif directives are used. #ifdef Directive \u00b6 #ifdef MACRO // conditional codes #endif Here, the conditional codes are included in the program only if MACRO is defined. #if, #elif and #else Directive \u00b6 #if expression // conditional codes #endif Here, expression is an expression of integer type (can be integers, characters, arithmetic expression, macros, and so on). The conditional codes are included in the program only if the expression is evaluated to a non-zero value. The optional #else directive can be used with #if directive. #if expression conditional codes if expression is non - zero #else conditional if expression is 0 #endif You can also add nested conditional to your #if...#else using #elif #if expression // conditional codes if expression is non-zero #elif expression1 // conditional codes if expression is non-zero #elif expression2 // conditional codes if expression is non-zero #else // conditional if all expressions are 0 #endif #defined \u00b6 The special operator #defined is used to test whether a certain macro is defined or not. It's often used with #if directive. #if defined BUFFER_SIZE && BUFFER_SIZE >= 2048 // codes Predefined Macros \u00b6 Here are some predefined macros in C programming. Macro Value __DATE__ A string containing the current date. __FILE__ A string containing the file name. __LINE__ An integer representing the current line number. __STDC__ If follows ANSI standard C, then the value is a nonzero integer. __TIME__ A string containing the current time. Example 3: Get current time using TIME \u00b6 The following program outputs the current time using __TIME__ macro. #include <stdio.h> int main () { printf ( \"Current time: %s\" , __TIME__ ); } Output Current time: 19 :54:39 Recommended Readings \u00b6 Line control Pragmas Preprocessor Output Other directives C Standard Library Functions \u00b6 In this tutorial, you'll learn about the standard library functions in C. More specifically, what are they, different library functions in C and how to use them in your program. C Standard library functions or simply C Library functions are inbuilt functions in C programming. The prototype and data definitions of these functions are present in their respective header files. To use these functions we need to include the header file in our program. For example, If you want to use the printf() function, the header file <stdio.h> should be included. #include <stdio.h> int main () { printf ( \"Catch me if you can.\" ); } Run Code If you try to use printf() without including the stdio.h header file, you will get an error. Advantages of Using C library functions \u00b6 1. They work One of the most important reasons you should use library functions is simply because they work. These functions have gone through multiple rigorous testing and are easy to use. 2. The functions are optimized for performance Since, the functions are \"standard library\" functions, a dedicated group of developers constantly make them better. In the process, they are able to create the most efficient code optimized for maximum performance. 3. It saves considerable development time Since the general functions like printing to a screen, calculating the square root, and many more are already written. You shouldn't worry about creating them once again. 4. The functions are portable With ever-changing real-world needs, your application is expected to work every time, everywhere. And, these library functions help you in that they do the same thing on every computer. Example: Square root using sqrt() function \u00b6 Suppose, you want to find the square root of a number. To compute the square root of a number, you can use the sqrt() library function. The function is defined in the math.h header file. #include <stdio.h> #include <math.h> int main () { float num , root ; printf ( \"Enter a number: \" ); scanf ( \"%f\" , & num ); // Computes the square root of num and stores in root. root = sqrt ( num ); printf ( \"Square root of %.2f = %.2f\" , num , root ); return 0 ; } Run Code When you run the program, the output will be: Enter a number: 12 Square root of 12 .00 = 3 .46 Library Functions in Different Header Files \u00b6 C Header Files Description Program assertion functions Character type functions Localization functions Mathematics functions Jump functions Library Functions in Different Header Files \u00b6 C Header Files Description Signal handling functions Variable arguments handling functions Standard Input/Output functions Standard Utility functions String handling functions Date time functions C Examples | Programiz References \u00b6 Learn C Programming \\[ End-Of-Week-5 \\]","title":"Week-5 (C Console Programming)"},{"location":"week-5-c/ce103-week-5-c/#ce103-algorithms-and-programming-i","text":"","title":"CE103 Algorithms and Programming I"},{"location":"week-5-c/ce103-week-5-c/#week-5","text":"","title":"Week-5"},{"location":"week-5-c/ce103-week-5-c/#c-functional-console-programming","text":"Download DOC , SLIDE , PPTX","title":"C Functional Console Programming"},{"location":"week-5-c/ce103-week-5-c/#c-functional-console-programming_1","text":"","title":"C Functional Console Programming"},{"location":"week-5-c/ce103-week-5-c/#books-and-resources","text":"free-programming-books/free-programming-books-langs.md at master \u00b7 EbookFoundation/free-programming-books \u00b7 GitHub goalkicker-C Programming Notes for Professionals book","title":"Books and Resources"},{"location":"week-5-c/ce103-week-5-c/#c-functional-console-programming_2","text":"We will use the following course notes and examples. section{ font-size: 25px; } Learn C Programming C Tutorials - Introduction to C Programming Language The C and C++ programming tutorials, hands-on approach with program examples, code samples and tons of output images using Visual C++, C++ Builder, Linux gcc and g++ compilers and IDE CS50x 2021 C Programming For Dummies C reference - cppreference.com https://c.happycodings.com/","title":"C Functional Console Programming"},{"location":"week-5-c/ce103-week-5-c/#c-programming","text":"C is a versatile programming language. It is useful for creating software such as operating systems, databases, and compilers. For novices, C programming is a great language to learn to code in. Our C tutorials will take you step by step through the process of learning C programming. Before starting you should check your development enviroment. You will open visual studio community edition and create a C++ console application then rename *.cpp file to *.c for triggering c complier. Before starting you should understand the executable generation flows #include <stdio.h> int main ( void ) { printf ( \"hello, world\" ); } and how we convert source code to binary code 01111111 01000101 01001100 01000110 00000010 00000001 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000010 00000000 00111110 00000000 00000001 00000000 00000000 00000000 10110000 00000101 01000000 00000000 00000000 00000000 00000000 00000000 01000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 11010000 00010011 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 01000000 00000000 00111000 00000000 00001001 00000000 01000000 00000000 00100100 00000000 00100001 00000000 00000110 00000000 00000000 00000000 00000101 00000000 00000000 00000000 01000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 01000000 00000000 01000000 00000000 00000000 00000000 00000000 00000000 01000000 00000000 01000000 00000000 00000000 00000000 00000000 00000000 11111000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 11111000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00001000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000011 00000000 00000000 00000000 00000100 00000000 00000000 00000000 00111000 00000010 00000000 00000000 00000000 00000000 00000000 00000000 ... There is a sandbox in CS50 harvard course Week 0 - CS50x https://sandbox.cs50.io/ you can use it for online compiler $ make hello clang -fsanitize = signed-integer-overflow -fsanitize = undefined -ggdb3 -O0 -std = c11 -Wall -Werror -Wextra -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wshadow hello.c -lcrypt -lcs50 -lm -o hello $ ./hello hello, world if you want to make samething in windows environment you should create the following makefile near the hello.c Makefile # This is the default target, which will be built when # you invoke make .PHONY : all all : hello # This rule tells make how to build hello from hello.cpp hello : hello . c g++ -o hello hello.c # This rule tells make to copy hello to the binaries subdirectory, # creating it if necessary .PHONY : install install : mkdir -p binaries cp -p hello binaries # This rule tells make to delete hello and hello.o .PHONY : clean clean : rm -f hello C: \\U sers \\u gur.coruh \\D esktop \\h ello-make>make hello g++ -o hello hello.c C: \\U sers \\u gur.coruh \\D esktop \\h ello-make>dir Volume in drive C is Windows Volume Serial Number is 8C3C-8F8C Directory of C: \\U sers \\u gur.coruh \\D esktop \\h ello-make 11 /02/2021 01 :44 AM <DIR> . 11 /02/2021 01 :44 AM <DIR> .. 11 /02/2021 01 :15 AM 73 hello.c 11 /02/2021 01 :44 AM 54 ,022 hello.exe 11 /02/2021 01 :43 AM 458 Makefile 3 File ( s ) 54 ,553 bytes 2 Dir ( s ) 101 ,382,164,480 bytes free C: \\U sers \\u gur.coruh \\D esktop \\h ello-make>hello.exe hello, world C: \\U sers \\u gur.coruh \\D esktop \\h ello-make> $ clang hello.c $ ls a.out* hello* hello.c $ ./a.out hello, world $ clang -o hello hello.c $ ls a.out* hello* hello.c $ ./hello hello, world $ ls hello.c $ clang -o hello hello.c -lcs50 $ ls hello* hello.c $ ./hello hello, world $ Also you can use visual studio community edition.","title":"C Programming"},{"location":"week-5-c/ce103-week-5-c/#preprocessing","text":"get included file declarations #include <cs50.h> #include <stdio.h> int main ( void ) { string name = get_string ( \"What's your name? \" ); printf ( \"hello, %s \\n \" , name ); } to this string get_string ( string prompt ); int printf ( string format , ...); int main ( void ) { string name = get_string ( \"What's your name? \" ); printf ( \"hello, %s \\n \" , name ); }","title":"Preprocessing"},{"location":"week-5-c/ce103-week-5-c/#compiling","text":"convert source code to assembler code ... main: # @main .cfi_startproc # BB#0: pushq %rbp .Ltmp0: .cfi_def_cfa_offset 16 .Ltmp1: .cfi_offset %rbp, -16 movq %rsp, %rbp .Ltmp2: .cfi_def_cfa_register %rbp subq $16, %rsp xorl %eax, %eax movl %eax, %edi movabsq $.L.str, %rsi movb $0, %al callq get_string movabsq $.L.str.1, %rdi movq %rax, -8(%rbp) movq -8(%rbp), %rsi movb $0, %al callq printf ...","title":"Compiling"},{"location":"week-5-c/ce103-week-5-c/#assembling","text":"convert assembler to opcodes ... main: # @main .cfi_startproc # BB#0: pushq %rbp .Ltmp0: .cfi_def_cfa_offset 16 .Ltmp1: .cfi_offset %rbp, -16 movq %rsp, %rbp .Ltmp2: .cfi_def_cfa_register %rbp subq $16, %rsp xorl %eax, %eax movl %eax, %edi movabsq $.L.str, %rsi movb $0, %al callq get_string movabsq $.L.str.1, %rdi movq %rax, -8(%rbp) movq -8(%rbp), %rsi movb $0, %al callq printf ... to thistitle":"Assembling"},{"location":"week-5-c/ce103-week-5-c/#linking","text":"hello.c 01111111 01000101 01001100 01000110 00000010 00000001 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 ... stdio.c 01111111 01000101 01001100 01000110 00000010 00000001 00000001 00000000 00000000 00000000 00000000 00000000 00000000 ... cs50.c 01111111 01000101 01001100 01000110 00000010 00000001 00000001 00000000 00000000 00000000 00000000 00000000 00000000 ... combine binary codes to generate exetitle":"Linking"},{"location":"week-5-c/ce103-week-5-c/#c-introduction","text":"","title":"C Introduction"},{"location":"week-5-c/ce103-week-5-c/#keywords-and-identifiers","text":"This tutorial will teach you about keywords, which are reserved words in C programming that are part of the syntax. You will also be taught about identifiers and how to name them.","title":"Keywords and Identifiers"},{"location":"week-5-c/ce103-week-5-c/#character-set","text":"A character set is a collection of alphabets, letters, and special characters that are supported by the C programming language. As variables and functions, C accepts both lowercase and uppercase alphabets.","title":"Character set"},{"location":"week-5-c/ce103-week-5-c/#alphabets","text":"Uppercase : A B C ................................... X Y Z Lowercase : a b c ...................................... x y z","title":"Alphabets"},{"location":"week-5-c/ce103-week-5-c/#digits","text":"0 1 2 3 4 5 6 7 8 9","title":"Digits"},{"location":"week-5-c/ce103-week-5-c/#special-characters","text":"Special Characters in C Programming , < > . - ( ) ; $ : % [ ] # ? ' & { } \" ^ ! * / - \\ ~ + White space Characters A newline, a horizontal tab, a carriage return, and a form feed are all examples of punctuation.","title":"Special Characters"},{"location":"week-5-c/ce103-week-5-c/#c-keywords","text":"Keywords are reserved words in programming that have special meanings to the compiler. Keywords are syntax elements that cannot be used as identifiers. As an example: int money ; In this case, int is a keyword indicating that money is a variable of type int (integer). Because C is a case-sensitive language, all keywords must be written in lowercase. The following is a list of all the keywords permitted in ANSI C. C Keywords auto double int struct break else long switch case enum register typedef char extern return union continue for signed void do if static while default goto sizeof volatile const float short unsigned All of these keywords, as well as their syntax and application, will be covered in their respective topics. The Complete List of all 32 C Programming Keywords (With Examples) - Programiz","title":"C Keywords"},{"location":"week-5-c/ce103-week-5-c/#c-identifiers","text":"The term \"identifier\" refers to the name given to entities such as variables, functions, structures, and so on. Identifiers must be distinct. They are created to give a unique name to an entity in order to identify it during program execution. As an example: int money ; double accountBalance ; money and accountBalance are identifiers in this context. Also, keep in mind that identifier names must be distinct from keyword names. Because int is a keyword, it cannot be used as an identifier.","title":"C Identifiers"},{"location":"week-5-c/ce103-week-5-c/#rules-for-naming-identifiers","text":"Letters (including capital and lowercase letters), numbers, and underscores can all be used in a valid identification. An identifier's initial letter should be either a letter or an underscore. Keywords such as int, while, and so on cannot be used as identifiers. There are no restrictions on the length of an identification. However, if the identifier is larger than 31 characters, you may have issues with some compilers. If you follow the above criterion, you can use any name as an identifier; nevertheless, provide meaningful names to identifiers that make sense.","title":"Rules for naming identifiers"},{"location":"week-5-c/ce103-week-5-c/#c-variables-constants-and-literals","text":"This article will teach you about variables and the rules for naming variables. You will also learn about different literals and how to build constants in C programming.","title":"C Variables, Constants and Literals"},{"location":"week-5-c/ce103-week-5-c/#variables","text":"A variable in programming is a container (storage space) for data. Each variable should be given a unique name to denote the storage region (identifier). Variable names are simply a graphical representation of a memory location. As an example: int playerScore = 95 ; In this case, playerScore is an int variable. The variable is given the integer value 95 in this case. A variable's value may be altered, thus the term variable. char ch = 'a' ; // some code ch = 'l' ;","title":"Variables"},{"location":"week-5-c/ce103-week-5-c/#rules-for-naming-a-variable","text":"A variable name can only contain characters (uppercase and lowercase), numbers, and underscores. A variable's initial letter should be either a letter or an underscore. There are no restrictions on the length of a variable name (identifier). However, if the variable name is larger than 31 characters, you may have issues with some compilers. Please keep in mind that you should always aim to give variables meaningful names. For example, firstName is a more appropriate variable name than fn . C is a highly typed programming language. This means that once a variable is declared, it cannot be modified. As an example: int number = 5 ; // integer variable number = 5.5 ; // error double number ; // error In this case, the type of number variable is int. This variable cannot be assigned the floating-point (decimal) value 5.5. Furthermore, you cannot change the variable's data type to double. By the way, in order to hold decimal values in C, you must designate their type as double or float.","title":"Rules for naming a variable"},{"location":"week-5-c/ce103-week-5-c/#literals","text":"Literals are data that are used to represent fixed values. They can be directly utilized in the code. For example: 1, 2.5, 'c,' and so on. Literals are 1, 2.5, and 'c' in this case. Why? These words cannot have various values assigned to them.","title":"Literals"},{"location":"week-5-c/ce103-week-5-c/#1-integers","text":"An integer is a numeric literal (related with numbers) that does not have any fractional or exponential components. In C programming, there are three types of integer literals: digits (base 10) the number octal (base 8) hexadecimal (base 16) For example: Decimal : 0 , -9 , 22 etc Octal : 021 , 077 , 033 etc Hexadecimal : 0x7f , 0x2a , 0x521 etc In C, octal begins with a 0 while hexadecimal begins with a 0x.","title":"1. Integers"},{"location":"week-5-c/ce103-week-5-c/#2-floating-point-literals","text":"A floating-point literal is a numeric literal with a fractional or exponent form. As an example: -2.0 0.0000234 -0.22E-5 Please note that \\[ E-5 = 10^{-5} \\]","title":"2. Floating-point Literals"},{"location":"week-5-c/ce103-week-5-c/#3-characters","text":"Enclosing a single character inside single quote marks yields a character literal. For example, 'a','m', 'F', '2', \", and so on.","title":"3. Characters"},{"location":"week-5-c/ce103-week-5-c/#4-escape-sequences","text":"In C programming, it is sometimes important to employ characters that cannot be typed or have specific meaning. For instance, newline (enter), tab, question mark, and so on. Escape sequences are utilized to utilise these characters. Escape Sequences Character \\b Backspace \\f Form feed \\n Newline \\r Return \\t Horizontal Tab \\v Vertical Tab `\\\\ Backslash \\' Single quotation mark \\\" Double quotation mark \\? Question mark \\0 Null character","title":"4. Escape Sequences"},{"location":"week-5-c/ce103-week-5-c/#5-string-literals","text":"A string literal is a string of characters surrounded by double quotation marks. As an example: \"good\" //string constant \"\" //null string constant \" \" //string constant of six white space \"x\" //string constant having a single character. \"Earth is round \\n \" //prints string with a newline","title":"5. String Literals"},{"location":"week-5-c/ce103-week-5-c/#constants","text":"The const keyword can be used to declare a variable whose value cannot be modified. This will result in a constant. As an example, const double PI = 3.14 ; We've introduced the keyword const. PI is a symbolic constant in this context; its value cannot be modified. const double PI = 3.14 ; PI = 2.9 ; //Error You may also use the #define preprocessor directive to declare a constant.","title":"Constants"},{"location":"week-5-c/ce103-week-5-c/#c-data-types","text":"In this course, you will learn about basic data types in C programming, such as int, float, and char. Data types are variable declarations in C programming. The kind and quantity of data linked with variables are determined by this. As an example, int myVar ; In this case, myVar is an int (integer) variable. int has a size of 4 bytes.","title":"C Data Types"},{"location":"week-5-c/ce103-week-5-c/#basic-types","text":"Here's a table containing commonly used types in C programming for quick access. Type Size(bytes) Format Specifiers int at least 2, usually 4 %d %i char 1 %c float 4 %f double 8 %lf short int 2 usually %hd unsigned int at least 2, usually 4 %u long int at least 4, usually 8 %ld %li long long int at least 8 %lld %lli unsigned long int at least 4 %lu unsigned long long int at least 8 %llu signed char 1 %c usigned char 1 %c long double at least 10, usually 12 or 16 %Lf","title":"Basic types"},{"location":"week-5-c/ce103-week-5-c/#int","text":"Integers are entire integers with zero, positive, and negative values but no decimal values. For instance, \\(0\\) , \\(-5\\) , and \\(10\\) In order to declare an integer variable, we can use int . int id ; In this case, id is an integer variable. In C programming, you can define many variables at the same time. As an example, int id , age ; Integers are typically \\(\\text{4 bytes}\\) in size ( \\(\\text{32 bits}\\) ). It may also take $2^{32} $ different states from \\(-2147483648\\) to \\(2147483647\\) .","title":"int"},{"location":"week-5-c/ce103-week-5-c/#float-and-double","text":"Real values are stored in float and double variables. float salary ; double price ; Floating-point numbers in C can also be expressed in exponential form. As an example, float normalizationFactor = 22.442e2 ; What is the distinction between float and double? Float (single precision float data type) has a size of 4 bytes. And double (double precision float data type) is 8 bytes in size.","title":"float and double"},{"location":"week-5-c/ce103-week-5-c/#char","text":"The keyword char is used to declare variables of the character type. As an example, char test = 'h' ; The character variable is 1 byte in size.","title":"char"},{"location":"week-5-c/ce103-week-5-c/#void","text":"void is an unfinished type. It signifies \"nothing\" or \"nothing of the sort.\" You might conceive of emptiness as the absence of something. If a function does not return anything, its return type should be void. It is important to note that void variables cannot be created.","title":"void"},{"location":"week-5-c/ce103-week-5-c/#short-and-long","text":"If you need to utilize a huge number, a type specifier long can be used. Here's how it works: long a ; long long b ; long double c ; Variables a and b can store integer values in this case. In addition, c may hold a floating-point number. You can use short if you are certain that just a tiny integer range between \\(-32767, +32767\\) will be utilized. short d ; The sizeof() operator may always be used to determine the size of a variable. #include <stdio.h> int main () { short a ; long b ; long long c ; long double d ; printf ( \"size of short = %d bytes \\n \" , sizeof ( a )); printf ( \"size of long = %d bytes \\n \" , sizeof ( b )); printf ( \"size of long long = %d bytes \\n \" , sizeof ( c )); printf ( \"size of long double= %d bytes \\n \" , sizeof ( d )); return 0 ; }","title":"short and long"},{"location":"week-5-c/ce103-week-5-c/#signed-and-unsigned","text":"Signed and unsigned are type modifiers in C. You may use them to change the data storage of a data type. As an example, unsigned int x ; int y ; Because we applied the unsigned modifier, the variable x can only retain zero and positive numbers. Given that int has a capacity of 4 bytes , variable y can have values ranging from - \\(2^{31}\\) to \\(2^{31}-1\\) , But variable x can hold values ranging from \\(0\\) to \\(2^{32}-1\\) .","title":"signed and unsigned"},{"location":"week-5-c/ce103-week-5-c/#other-data-types-defined-in-c-programming-are","text":"bool Type Enumerated type Complex types","title":"Other data types defined in C programming are:"},{"location":"week-5-c/ce103-week-5-c/#derived-data-types","text":"Derived types are data types that are derived from basic data types. Arrays, pointers, function types, structures, and so on are examples.","title":"Derived Data Types"},{"location":"week-5-c/ce103-week-5-c/#c-input-output-io","text":"In this lesson, you will learn how to utilize the scanf() function to accept user input and the printf() method to display output to the user.","title":"C Input Output (I/O)"},{"location":"week-5-c/ce103-week-5-c/#c-output","text":"printf() is a common output function in C programming. The function outputs formatted data to the screen. As an example,","title":"C Output"},{"location":"week-5-c/ce103-week-5-c/#example-1-c-output","text":"#include <stdio.h> int main () { // Displays the string inside quotations printf ( \"C Programming\" ); return 0 ; } Output C Programming How does this software function? The main() function is required in all legal C programs. The execution of the code begins at the commencement of the main() function. The printf() function is a library function that is used to provide formatted output to the screen. The string is printed within quote marks by the function. In order to utilize printf() in our program, we must include the stdio.h header file using the #include <stdio.h> declaration. The \"Exit status\" of the program is the return 0; statement within the main() method. It's entirely voluntary.","title":"Example 1: C Output"},{"location":"week-5-c/ce103-week-5-c/#example-2-integer-output","text":"#include <stdio.h> int main () { int testInteger = 5 ; printf ( \"Number = %d\" , testInteger ); return 0 ; } Output Number = 5 To print int types, we utilize the %d format specifier. The value of testInteger will be used in instead of the %d inside the quotes.","title":"Example 2: Integer Output"},{"location":"week-5-c/ce103-week-5-c/#example-3-float-and-double-output","text":"#include <stdio.h> int main () { float number1 = 13.5 ; double number2 = 12.4 ; printf ( \"number1 = %f \\n \" , number1 ); printf ( \"number2 = %lf\" , number2 ); return 0 ; } Output number1 = 13 .500000 number2 = 12 .400000 We utilize the %f format specifier to print floats . Similarly, to display double numbers, we use %lf .","title":"Example 3: float and double Output"},{"location":"week-5-c/ce103-week-5-c/#example-4-print-characters","text":"#include <stdio.h> int main () { char chr = 'a' ; printf ( \"character = %c\" , chr ); return 0 ; } Output character = a We utilize the %c format specifier to print char.","title":"Example 4: Print Characters"},{"location":"week-5-c/ce103-week-5-c/#c-input","text":"scanf() is a widely used function in C programming to accept user input. The scanf() function reads formatted input from typical input devices like keyboards.","title":"C Input"},{"location":"week-5-c/ce103-week-5-c/#example-5-integer-inputoutput","text":"#include <stdio.h> int main () { int testInteger ; printf ( \"Enter an integer: \" ); scanf ( \"%d\" , & testInteger ); printf ( \"Number = %d\" , testInteger ); return 0 ; } Output Enter an integer: 4 Number = 4 To accept int input from the user, we utilized the %d format specifier inside the scanf() method. When a user enters an integer, it is saved in the variable testInteger . You'll see that we used &testInteger within scanf () . This is due to the fact that &testInteger obtains the address of testInteger , and the value given by the user is saved in that address.","title":"Example 5: Integer Input/Output"},{"location":"week-5-c/ce103-week-5-c/#example-6-float-and-double-inputoutput","text":"#include <stdio.h> int main () { float num1 ; double num2 ; printf ( \"Enter a number: \" ); scanf ( \"%f\" , & num1 ); printf ( \"Enter another number: \" ); scanf ( \"%lf\" , & num2 ); printf ( \"num1 = %f \\n \" , num1 ); printf ( \"num2 = %lf\" , num2 ); return 0 ; } Output Enter a number: 12 .523 Enter another number: 10 .2 num1 = 12 .523000 num2 = 10 .200000 For float and double , we use the format specifiers %f and %lf , respectively.","title":"Example 6: Float and Double Input/Output"},{"location":"week-5-c/ce103-week-5-c/#example-7-c-character-io","text":"#include <stdio.h> int main () { char chr ; printf ( \"Enter a character: \" ); scanf ( \"%c\" , & chr ); printf ( \"You entered %c.\" , chr ); return 0 ; } Output Enter a character: g You entered g When a user enters a character into the aforementioned software, the character itself is not saved. An integer value (ASCII value) is instead stored. When we use the %c text format to represent that value, the input character is displayed. The ASCII value of the character is printed when we utilize %d to show it.","title":"Example 7: C Character I/O"},{"location":"week-5-c/ce103-week-5-c/#example-8-ascii-value","text":"#include <stdio.h> int main () { char chr ; printf ( \"Enter a character: \" ); scanf ( \"%c\" , & chr ); // When %c is used, a character is displayed printf ( \"You entered %c. \\n \" , chr ); // When %d is used, ASCII value is displayed printf ( \"ASCII value is %d.\" , chr ); return 0 ; } Output Enter a character: g You entered g. ASCII value is 103 .","title":"Example 8: ASCII Value"},{"location":"week-5-c/ce103-week-5-c/#io-multiple-values","text":"Here's how to take numerous user inputs and show them. #include <stdio.h> int main () { int a ; float b ; printf ( \"Enter integer and then a float: \" ); // Taking multiple inputs scanf ( \"%d%f\" , & a , & b ); printf ( \"You entered %d and %f\" , a , b ); return 0 ; } Output Enter integer and then a float: -3 3 .4 You entered -3 and 3 .400000","title":"I/O Multiple Values"},{"location":"week-5-c/ce103-week-5-c/#format-specifiers-for-io","text":"As you can see from the samples above, we apply %d for int %f for float %lf for double %c for char The following is a collection of widely used C data types and associated format specifiers. Type Size(bytes) Format Specifiers int at least 2, usually 4 %d %i char 1 %c float 4 %f double 8 %lf short int 2 usually %hd unsigned int at least 2, usually 4 %u long int at least 4, usually 8 %ld %li long long int at least 8 %lld %lli unsigned long int at least 4 %lu unsigned long long int at least 8 %llu signed char 1 %c usigned char 1 %c long double at least 10, usually 12 or 16 %Lf","title":"Format Specifiers for I/O"},{"location":"week-5-c/ce103-week-5-c/#c-programming-operators","text":"With the assistance of examples, you will learn about several operators in C programming in this course. An operator is a symbol that performs an operation on a value or variable. For example, the operator + is used to compute addition. C has a diverse set of operators to execute a variety of tasks.","title":"C Programming Operators"},{"location":"week-5-c/ce103-week-5-c/#c-arithmetic-operators","text":"An arithmetic operator performs mathematical operations such as addition, subtraction, multiplication, division etc on numerical values (constants and variables). Operator Meaning of Operator + Addition or unary plus - Substraction or unary minus * Multiplication / Division % Remainder after division (modulo division)","title":"C Arithmetic Operators"},{"location":"week-5-c/ce103-week-5-c/#example-1-arithmetic-operators","text":"// Working of arithmetic operators #include <stdio.h> int main () { int a = 9 , b = 4 , c ; c = a + b ; printf ( \"a+b = %d \\n \" , c ); c = a - b ; printf ( \"a-b = %d \\n \" , c ); c = a * b ; printf ( \"a*b = %d \\n \" , c ); c = a / b ; printf ( \"a/b = %d \\n \" , c ); c = a % b ; printf ( \"Remainder when a divided by b = %d \\n \" , c ); return 0 ; } Output a+b = 13 a-b = 5 a*b = 36 a/b = 2 Remainder when a divided by b = 1 As you might guess, the operators +, -, and * calculate addition, subtraction, and multiplication, respectively. 9/4 Equals 2.25 in standard math. In the program, however, the result is 2 . This is due to the fact that both variables a and b are integers. As a result, the output is also an integer. The compiler ignores the word following the decimal point and displays response 2 rather than 2.25 . The residual is computed using the modulo operator percent. The remaining is 1 when a=9 is divided by b=4 . Only integers can be used with the percent operator. Assume that a = 5.0, b = 2.0, c = 5 , and d = 2 . After that, in C programming. // Either one of the operands is a floating-point number a/b = 2 .5 a/d = 2 .5 c/b = 2 .5 // Both operands are integers c/d = 2","title":"Example 1: Arithmetic Operators"},{"location":"week-5-c/ce103-week-5-c/#c-increment-and-decrement-operators","text":"To alter the value of an operand (constant or variable) by one, C programming offers two operators: increment ++ and decrease -- . Increment ++ raises the value by one, and decrement -- lowers the value by one. These two operators are unary, which means they only work on a single operand.","title":"C Increment and Decrement Operators"},{"location":"week-5-c/ce103-week-5-c/#example-2-increment-and-decrement-operators","text":"// Working of increment and decrement operators #include <stdio.h> int main () { int a = 10 , b = 100 ; float c = 10.5 , d = 100.5 ; printf ( \"++a = %d \\n \" , ++ a ); printf ( \"--b = %d \\n \" , -- b ); printf ( \"++c = %f \\n \" , ++ c ); printf ( \"--d = %f \\n \" , -- d ); return 0 ; } Output ++a = 11 --b = 99 ++c = 11 .500000 --d = 99 .500000 The operators ++ and -- are used as prefixes here. These two operators, like a++ and a-- can also be used as postfixes.","title":"Example 2: Increment and Decrement Operators"},{"location":"week-5-c/ce103-week-5-c/#increment-and-decrement-operator-as-prefix-and-postfix","text":"The increment operator ++ in programming (Java, C, C++, JavaScript, and so on) increments the value of a variable by one. Similarly, the decrement operator -- reduces a variable's value by one. a = 5 ++a ; // a becomes 6 a++ ; // a becomes 7 --a ; // a becomes 6 a-- ; // a becomes 5 So far, so straightforward. When these two operators are employed as a prefix and a postfix, there is a significant difference.","title":"Increment ++ and Decrement -- Operator as Prefix and Postfix"},{"location":"week-5-c/ce103-week-5-c/#and-operator-as-prefix-and-postfix","text":"When you use the ++ operator as a prefix, such as: ++var, the value of var is increased by one and then returned. If you use the ++ operator as a postfix, such as var++, the original value of var is returned first, followed by a one-digit increase of var. The -- operator functions similarly to the ++ operator, except that it reduces the value by one.","title":"++ and -- operator as prefix and postfix"},{"location":"week-5-c/ce103-week-5-c/#example-1-c-programming","text":"#include <stdio.h> int main () { int var1 = 5 , var2 = 5 ; // 5 is displayed // Then, var1 is increased to 6. printf ( \"%d \\n \" , var1 ++ ); // var2 is increased to 6 // Then, it is displayed. printf ( \"%d \\n \" , ++ var2 ); return 0 ; } Output 5 6","title":"Example 1: C Programming"},{"location":"week-5-c/ce103-week-5-c/#c-assignment-operators","text":"An assignment operator is a type of operator that is used to assign a value to a variable. = is the most commonly used assignment operator. Operator Example Same as = a=b a=b += a+=b a=a+b -= a-=b a=a-b *= a*=b a=a*b /= a/=b a=a/b %= a%=b a=a%b","title":"C Assignment Operators"},{"location":"week-5-c/ce103-week-5-c/#example-3-assignment-operators","text":"// Working of assignment operators #include <stdio.h> int main () { int a = 5 , c ; c = a ; // c is 5 printf ( \"c = %d \\n \" , c ); c += a ; // c is 10 printf ( \"c = %d \\n \" , c ); c -= a ; // c is 5 printf ( \"c = %d \\n \" , c ); c *= a ; // c is 25 printf ( \"c = %d \\n \" , c ); c /= a ; // c is 5 printf ( \"c = %d \\n \" , c ); c %= a ; // c = 0 printf ( \"c = %d \\n \" , c ); return 0 ; } Output c = 5 c = 10 c = 5 c = 25 c = 5 c = 0","title":"Example 3: Assignment Operators"},{"location":"week-5-c/ce103-week-5-c/#c-relational-operators","text":"A relational operator verifies the relationship of two operands. If the relationship is true, it returns 1; if the relationship is false, it returns 0. Operator Meaning of Operator Example == Equal to 5 == 3 is evaluated to 0 > Greater than 5 > 3 is evaluated to 1 < Less than 5 < 3 is evaluated to 0 != Not equal to 5 != 3 is evaluated to 1 >= Greater than or equal to 5 >= 3 is evaluated to 1 <= Less than or equal to 5 <= 3 is evaluated to 0","title":"C Relational Operators"},{"location":"week-5-c/ce103-week-5-c/#example-4-relational-operators","text":"// Working of relational operators #include <stdio.h> int main () { int a = 5 , b = 5 , c = 10 ; printf ( \"%d == %d is %d \\n \" , a , b , a == b ); printf ( \"%d == %d is %d \\n \" , a , c , a == c ); printf ( \"%d > %d is %d \\n \" , a , b , a > b ); printf ( \"%d > %d is %d \\n \" , a , c , a > c ); printf ( \"%d < %d is %d \\n \" , a , b , a < b ); printf ( \"%d < %d is %d \\n \" , a , c , a < c ); printf ( \"%d != %d is %d \\n \" , a , b , a != b ); printf ( \"%d != %d is %d \\n \" , a , c , a != c ); printf ( \"%d >= %d is %d \\n \" , a , b , a >= b ); printf ( \"%d >= %d is %d \\n \" , a , c , a >= c ); printf ( \"%d <= %d is %d \\n \" , a , b , a <= b ); printf ( \"%d <= %d is %d \\n \" , a , c , a <= c ); return 0 ; } Output 5 == 5 is 1 5 == 10 is 0 5 > 5 is 0 5 > 10 is 0 5 < 5 is 0 5 < 10 is 1 5 ! = 5 is 0 5 ! = 10 is 1 5 > = 5 is 1 5 > = 10 is 0 5 < = 5 is 1 5 < = 10 is 1","title":"Example 4: Relational Operators"},{"location":"week-5-c/ce103-week-5-c/#c-logical-operators","text":"A logical operator expression returns either 0 or 1, depending on whether the expression is true or false. Operator Meaning Example && Logical AND. True only if all operands are true If c = 5 and d = 2 then, expression ((c==5) && (d>5)) equals to 0. | Logical OR. True only if either one operand is true ! Logical NOT. True only if the operand is 0 If c = 5 then, expression !(c==5) equals to 0.","title":"C Logical Operators"},{"location":"week-5-c/ce103-week-5-c/#example-5-logical-operators","text":"// Working of logical operators #include <stdio.h> int main () { int a = 5 , b = 5 , c = 10 , result ; result = ( a == b ) && ( c > b ); printf ( \"(a == b) && (c > b) is %d \\n \" , result ); result = ( a == b ) && ( c < b ); printf ( \"(a == b) && (c < b) is %d \\n \" , result ); result = ( a == b ) || ( c < b ); printf ( \"(a == b) || (c < b) is %d \\n \" , result ); result = ( a != b ) || ( c < b ); printf ( \"(a != b) || (c < b) is %d \\n \" , result ); result = ! ( a != b ); printf ( \"!(a != b) is %d \\n \" , result ); result = ! ( a == b ); printf ( \"!(a == b) is %d \\n \" , result ); return 0 ; } Output ( a == b ) && ( c > b ) is 1 ( a == b ) && ( c < b ) is 0 ( a == b ) || ( c < b ) is 1 ( a ! = b ) || ( c < b ) is 0 ! ( a ! = b ) is 1 ! ( a == b ) is 0 Explanation of logical operator program (a == b) && (c > 5) evaluates to 1 because both operands (a == b) and (c > b) is 1 (true). (a == b) && (c < b) evaluates to 0 because operand (c < b) is 0 (false). (a == b) || (c < b) evaluates to 1 because (a = b) is 1 (true). (a != b) || (c < b) evaluates to 0 because both operand (a != b) and (c < b) are 0 (false). !(a != b) evaluates to 1 because operand (a != b) is 0 (false). Hence, !(a != b) is 1 (true). !(a == b) evaluates to 0 because (a == b) is 1 (true). Hence, !(a == b) is 0 (false).","title":"Example 5: Logical Operators"},{"location":"week-5-c/ce103-week-5-c/#c-bitwise-operators","text":"Mathematical operations like as addition, subtraction, multiplication, division, and so on are transformed to bit-level during computation, which speeds up processing and saves power. In C programming, bitwise operators are used to execute bit-level operations. Operators Meaning of Operators & Bitwise AND ^ Bitwise exclusive OR ~ Bitwise complement << Shift left >> Shift right","title":"C Bitwise Operators"},{"location":"week-5-c/ce103-week-5-c/#other-operators","text":"","title":"Other Operators"},{"location":"week-5-c/ce103-week-5-c/#comma-operator","text":"Comma operators are used to connect similar expressions. As an example: int a , c = 5 , d ;","title":"Comma Operator"},{"location":"week-5-c/ce103-week-5-c/#the-sizeof-operator","text":"sizeof is a unary operator that returns the data size (constants, variables, array, structure, etc).","title":"The sizeof operator"},{"location":"week-5-c/ce103-week-5-c/#example-6-sizeof-operator","text":"#include <stdio.h> int main () { int a ; float b ; double c ; char d ; printf ( \"Size of int=%lu bytes \\n \" , sizeof ( a )); printf ( \"Size of float=%lu bytes \\n \" , sizeof ( b )); printf ( \"Size of double=%lu bytes \\n \" , sizeof ( c )); printf ( \"Size of char=%lu byte \\n \" , sizeof ( d )); return 0 ; } Output Size of int = 4 bytes Size of float = 4 bytes Size of double = 8 bytes Size of char = 1 byte Other operators, such as the ternary operator ?: , the reference operato r & , the dereference operator * , and the member selection operator -> , will be covered in more detail later.","title":"Example 6: sizeof Operator"},{"location":"week-5-c/ce103-week-5-c/#c-flow-control","text":"","title":"C Flow Control"},{"location":"week-5-c/ce103-week-5-c/#c-ifelse-statement","text":"With the assistance of examples, you will learn about the if statement (including if...else and nested if...else) in C programming.","title":"C if...else Statement"},{"location":"week-5-c/ce103-week-5-c/#c-if-statement","text":"In C programming, the if statement has the following syntax: if ( test expression ) { // code }","title":"C if Statement"},{"location":"week-5-c/ce103-week-5-c/#how-if-statement-works","text":"The test expression inside the parentheses is evaluated by the if statement (). If the test expression is true, the statements within the if body are performed. If the test expression is interpreted as false, the statements within the if body are not performed. How if statement works? Check relational and logical operators to understand more about when a test expression is evaluated to true (non-zero value) and false (0).","title":"How if statement works?"},{"location":"week-5-c/ce103-week-5-c/#example-1-if-statement","text":"// Program to display a number if it is negative #include <stdio.h> int main () { int number ; printf ( \"Enter an integer: \" ); scanf ( \"%d\" , & number ); // true if number is less than 0 if ( number < 0 ) { printf ( \"You entered %d. \\n \" , number ); } printf ( \"The if statement is easy.\" ); return 0 ; } Output 1 Enter an integer: -2 You entered -2. The if statement is easy. When the user types -2, the test expression number 0 is evaluated as true. As a result, the value -2 that you typed is displayed on the screen. Output 2 Enter an integer: 5 The if statement is easy. When the user enters 5, the test expression number 0 is assessed as false, and the statement within the body of the if is not performed.","title":"Example 1: if statement"},{"location":"week-5-c/ce103-week-5-c/#c-ifelse-statement_1","text":"An else block is optional in the if statement. The if...else sentence has the following syntax: if ( test expression ) { // run code if test expression is true } else { // run code if test expression is false }","title":"C if...else Statement"},{"location":"week-5-c/ce103-week-5-c/#how-ifelse-statement-works","text":"If the test expression is found to be true, Statements within the if body are performed. Statements within the body of else are not executed. If the test expression is found to be false, Phrases inside the body of else are performed; statements within the body of if are skipped. How if...else statement works?","title":"How if...else statement works?"},{"location":"week-5-c/ce103-week-5-c/#example-2-ifelse-statement","text":"// Check whether an integer is odd or even #include <stdio.h> int main () { int number ; printf ( \"Enter an integer: \" ); scanf ( \"%d\" , & number ); // True if the remainder is 0 if ( number % 2 == 0 ) { printf ( \"%d is an even integer.\" , number ); } else { printf ( \"%d is an odd integer.\" , number ); } return 0 ; } Output Enter an integer: 7 7 is an odd integer. When the user enters 7, the test expression number% 2==0 returns false. As a result, the statement within the body of else is performed.","title":"Example 2: if...else statement"},{"location":"week-5-c/ce103-week-5-c/#c-ifelse-ladder","text":"Depending on whether the test phrase is true or false, the if...else statement runs two separate programs. Sometimes a decision must be made between more than two options. You may use the if...else ladder to compare numerous test expressions and execute various statements.","title":"C if...else Ladder"},{"location":"week-5-c/ce103-week-5-c/#syntax-of-ifelse-ladder","text":"if ( test expression1 ) { // statement(s) } else if ( test expression2 ) { // statement(s) } else if ( test expression3 ) { // statement(s) } . . else { // statement(s) }","title":"Syntax of if...else Ladder"},{"location":"week-5-c/ce103-week-5-c/#example-3-c-ifelse-ladder","text":"// Program to relate two integers using =, > or < symbol #include <stdio.h> int main () { int number1 , number2 ; printf ( \"Enter two integers: \" ); scanf ( \"%d %d\" , & number1 , & number2 ); //checks if the two integers are equal. if ( number1 == number2 ) { printf ( \"Result: %d = %d\" , number1 , number2 ); } //checks if number1 is greater than number2. else if ( number1 > number2 ) { printf ( \"Result: %d > %d\" , number1 , number2 ); } //checks if both test expressions are false else { printf ( \"Result: %d < %d\" , number1 , number2 ); } return 0 ; } Output Enter two integers: 12 23 Result: 12 < 23","title":"Example 3: C if...else Ladder"},{"location":"week-5-c/ce103-week-5-c/#nested-ifelse","text":"An if...else statement can be included within the body of another if...else statement.","title":"Nested if...else"},{"location":"week-5-c/ce103-week-5-c/#example-4-nested-ifelse","text":"This program, similar to the if...else ladder's example, compares two numbers using, >, and =. To fix this problem, we will utilize a layered if...else expression. #include <stdio.h> int main () { int number1 , number2 ; printf ( \"Enter two integers: \" ); scanf ( \"%d %d\" , & number1 , & number2 ); if ( number1 >= number2 ) { if ( number1 == number2 ) { printf ( \"Result: %d = %d\" , number1 , number2 ); } else { printf ( \"Result: %d > %d\" , number1 , number2 ); } } else { printf ( \"Result: %d < %d\" , number1 , number2 ); } return 0 ; } You do not need to use brackets if the body of an if...else statement contains only one sentence. if ( a > b ) { printf ( \"Hello\" ); } printf ( \"Hi\" ); is equivalent to if ( a > b ) printf ( \"Hello\" ); printf ( \"Hi\" );","title":"Example 4: Nested if...else"},{"location":"week-5-c/ce103-week-5-c/#c-for-loop","text":"With the assistance of examples, you will learn how to design a for loop in C programming in this article. A loop is a programming construct that is used to repeat a block of code until the stated condition is fulfilled. Loops in C programming are classified into three types: while loop for loop do..while loop This lesson will teach us about the for loop. The while and do...while loops will be covered in the next tutorial.","title":"C for Loop"},{"location":"week-5-c/ce103-week-5-c/#for-loop","text":"The for loop has the following syntax: for ( initializationStatement ; testExpression ; updateStatement ) { // statements inside the body of loop }","title":"for Loop"},{"location":"week-5-c/ce103-week-5-c/#how-for-loop-works","text":"The initialization statement is only used once. The test expression is then evaluated. The for loop is ended if the test statement is interpreted as false. If the test expression is true, the statements inside the for loop's body are performed, and the update expression is updated. The test expression is examined once more. This procedure is repeated until the test expression is false. The loop is terminated when the test expression is false. How for loop works?","title":"How for loop works?"},{"location":"week-5-c/ce103-week-5-c/#example-1-for-loop","text":"// Print numbers from 1 to 10 #include <stdio.h> int main () { int i ; for ( i = 1 ; i < 11 ; ++ i ) { printf ( \"%d \" , i ); } return 0 ; } Output 1 2 3 4 5 6 7 8 9 10 i is initialized to 1. The test expression i < 11 is evaluated. Since 1 less than 11 is true, the body of for loop is executed. This will print the 1 (value of i) on the screen. The update statement ++i is executed. Now, the value of i will be 2. Again, the test expression is evaluated to true, and the body of for loop is executed. This will print 2 (value of i) on the screen. Again, the update statement ++i is executed and the test expression i < 11 is evaluated. This process goes on until i becomes 11. When i becomes 11, i < 11 will be false, and the for loop terminates.","title":"Example 1: for loop"},{"location":"week-5-c/ce103-week-5-c/#example-2-for-loop","text":"// Program to calculate the sum of first n natural numbers // Positive integers 1,2,3...n are known as natural numbers #include <stdio.h> int main () { int num , count , sum = 0 ; printf ( \"Enter a positive integer: \" ); scanf ( \"%d\" , & num ); // for loop terminates when num is less than count for ( count = 1 ; count <= num ; ++ count ) { sum += count ; } printf ( \"Sum = %d\" , sum ); return 0 ; } Output Enter a positive integer: 10 Sum = 55 The value entered by the user is stored in the variable num. Suppose, the user entered 10. The count is initialized to 1 and the test expression is evaluated. Since the test expression count<=num (1 less than or equal to 10) is true, the body of for loop is executed and the value of sum will equal to 1. Then, the update statement ++count is executed and count will equal to 2. Again, the test expression is evaluated. Since 2 is also less than 10, the test expression is evaluated to true and the body of the for loop is executed. Now, sum will equal 3. This process goes on and the sum is calculated until the count reaches 11. When the count is 11, the test expression is evaluated to 0 (false), and the loop terminates. Then, the value of sum is printed on the screen.","title":"Example 2: for loop"},{"location":"week-5-c/ce103-week-5-c/#c-while-and-dowhile-loop","text":"In this tutorial, you will learn to create while and do...while loop in C programming with the help of examples. In programming, loops are used to repeat a block of code until a specified condition is met. C programming has three types of loops. for loop while loop do...while loop In the previous tutorial, we learned about for loop. In this tutorial, we will learn about while and do..while loop.","title":"C while and do...while Loop"},{"location":"week-5-c/ce103-week-5-c/#while-loop","text":"The syntax of the while loop is: while ( testExpression ) { // the body of the loop }","title":"while loop"},{"location":"week-5-c/ce103-week-5-c/#how-while-loop-works","text":"The while loop evaluates the testExpression inside the parentheses () . If testExpression is true , statements inside the body of while loop are executed. Then, testExpression is evaluated again. The process goes on until testExpression is evaluated to false . If testExpression is false , the loop terminates (ends). How while loop works?","title":"How while loop works?"},{"location":"week-5-c/ce103-week-5-c/#example-1-while-loop","text":"// Print numbers from 1 to 5 #include <stdio.h> int main () { int i = 1 ; while ( i <= 5 ) { printf ( \"%d \\n \" , i ); ++ i ; } return 0 ; } Output 1 2 3 4 5 Here, we have initialized i to 1. When i = 1 , the test expression i <= 5 is true . Hence, the body of the while loop is executed. This prints 1 on the screen and the value of i is increased to 2 . Now, i = 2 , the test expression i <= 5 is again true . The body of the while loop is executed again. This prints 2 on the screen and the value of i is increased to 3 . This process goes on until i becomes 6. Then, the test expression i <= 5 will be false and the loop terminates.","title":"Example 1: while loop"},{"location":"week-5-c/ce103-week-5-c/#dowhile-loop","text":"The do..while loop is similar to the while loop with one important difference. The body of do...while loop is executed at least once. Only then, the test expression is evaluated. The syntax of the do...while loop is: do { // the body of the loop } while ( testExpression );","title":"do...while loop"},{"location":"week-5-c/ce103-week-5-c/#how-dowhile-loop-works","text":"The body of do...while loop is executed once. Only then, the testExpression is evaluated. If testExpression is true , the body of the loop is executed again and testExpression is evaluated once more. This process goes on until testExpression becomes false . If testExpression is false , the loop ends. How do...while loop works?","title":"How do...while loop works?"},{"location":"week-5-c/ce103-week-5-c/#example-2-dowhile-loop","text":"// Program to add numbers until the user enters zero #include <stdio.h> int main () { double number , sum = 0 ; // the body of the loop is executed at least once do { printf ( \"Enter a number: \" ); scanf ( \"%lf\" , & number ); sum += number ; } while ( number != 0.0 ); printf ( \"Sum = %.2lf\" , sum ); return 0 ; } Output Enter a number: 1 .5 Enter a number: 2 .4 Enter a number: -3.4 Enter a number: 4 .2 Enter a number: 0 Sum = 4 .70 Here, we have used a do...while loop to prompt the user to enter a number. The loop works as long as the input number is not 0 . The do...while loop executes at least once i.e. the first iteration runs without checking the condition. The condition is checked only after the first iteration has been executed. do { printf ( \"Enter a number: \" ); scanf ( \"%lf\" , & number ); sum += number ; } while ( number != 0.0 ); So, if the first input is a non-zero number, that number is added to the sum variable and the loop continues to the next iteration. This process is repeated until the user enters 0 . But if the first input is 0, there will be no second iteration of the loop and sum becomes 0.0 . Outside the loop, we print the value of sum.","title":"Example 2: do...while loop"},{"location":"week-5-c/ce103-week-5-c/#c-break-and-continue","text":"We learned about loops in previous tutorials. In this tutorial, we will learn to use break and continue statements with the help of examples.","title":"C break and continue"},{"location":"week-5-c/ce103-week-5-c/#c-break","text":"The break statement ends the loop immediately when it is encountered. Its syntax is: break ; The break statement is almost always used with if...else statement inside the loop. How break statement works?","title":"C break"},{"location":"week-5-c/ce103-week-5-c/#example-1-break-statement","text":"// Program to calculate the sum of numbers (10 numbers max) // If the user enters a negative number, the loop terminates #include <stdio.h> int main () { int i ; double number , sum = 0.0 ; for ( i = 1 ; i <= 10 ; ++ i ) { printf ( \"Enter n%d: \" , i ); scanf ( \"%lf\" , & number ); // if the user enters a negative number, break the loop if ( number < 0.0 ) { break ; } sum += number ; // sum = sum + number; } printf ( \"Sum = %.2lf\" , sum ); return 0 ; } Output Enter n1: 2 .4 Enter n2: 4 .5 Enter n3: 3 .4 Enter n4: -3 Sum = 10 .30 This program calculates the sum of a maximum of 10 numbers. Why a maximum of 10 numbers? It's because if the user enters a negative number, the break statement is executed. This will end the for loop, and the sum is displayed. In C, break is also used with the switch statement. This will be discussed in the next tutorial.","title":"Example 1: break statement"},{"location":"week-5-c/ce103-week-5-c/#c-continue","text":"The continue statement skips the current iteration of the loop and continues with the next iteration. Its syntax is: continue ; The continue statement is almost always used with the if...else statement. How continue statement works?","title":"C continue"},{"location":"week-5-c/ce103-week-5-c/#example-2-continue-statement","text":"// Program to calculate the sum of numbers (10 numbers max) // If the user enters a negative number, it's not added to the result #include <stdio.h> int main () { int i ; double number , sum = 0.0 ; for ( i = 1 ; i <= 10 ; ++ i ) { printf ( \"Enter a n%d: \" , i ); scanf ( \"%lf\" , & number ); if ( number < 0.0 ) { continue ; } sum += number ; // sum = sum + number; } printf ( \"Sum = %.2lf\" , sum ); return 0 ; } Output Enter n1: 1 .1 Enter n2: 2 .2 Enter n3: 5 .5 Enter n4: 4 .4 Enter n5: -3.4 Enter n6: -45.5 Enter n7: 34 .5 Enter n8: -4.2 Enter n9: -1000 Enter n10: 12 Sum = 59 .70 In this program, when the user enters a positive number, the sum is calculated using sum += number; statement. When the user enters a negative number, the continue statement is executed and it skips the negative number from the calculation.","title":"Example 2: continue statement"},{"location":"week-5-c/ce103-week-5-c/#c-switch-statement","text":"In this tutorial, you will learn to create the switch statement in C programming with the help of an example. The switch statement allows us to execute one code block among many alternatives. You can do the same thing with the if...else..if ladder. However, the syntax of the switch statement is much easier to read and write.","title":"C switch Statement"},{"location":"week-5-c/ce103-week-5-c/#syntax-of-switchcase","text":"switch ( expression ) { case constant1 : // statements break ; case constant2 : // statements break ; . . . default : // default statements }","title":"Syntax of switch...case"},{"location":"week-5-c/ce103-week-5-c/#how-does-the-switch-statement-work","text":"The expression is evaluated once and compared with the values of each case label. If there is a match, the corresponding statements after the matching label are executed. For example, if the value of the expression is equal to constant2, statements after case constant2: are executed until break is encountered. If there is no match, the default statements are executed. If we do not use break , all statements after the matching label are executed. By the way, the default clause inside the switch statement is optional. How does the switch statement work?","title":"How does the switch statement work?"},{"location":"week-5-c/ce103-week-5-c/#example-simple-calculator","text":"// Program to create a simple calculator #include <stdio.h> int main () { char operator ; double n1 , n2 ; printf ( \"Enter an operator (+, -, *, /): \" ); scanf ( \"%c\" , & operator ); printf ( \"Enter two operands: \" ); scanf ( \"%lf %lf\" , & n1 , & n2 ); switch ( operator ) { case '+' : printf ( \"%.1lf + %.1lf = %.1lf\" , n1 , n2 , n1 + n2 ); break ; case '-' : printf ( \"%.1lf - %.1lf = %.1lf\" , n1 , n2 , n1 - n2 ); break ; case '*' : printf ( \"%.1lf * %.1lf = %.1lf\" , n1 , n2 , n1 * n2 ); break ; case '/' : printf ( \"%.1lf / %.1lf = %.1lf\" , n1 , n2 , n1 / n2 ); break ; // operator doesn't match any case constant +, -, *, / default : printf ( \"Error! operator is not correct\" ); } return 0 ; } Output Enter an operator ( +, -, *, ) : - Enter two operands: 32 .5 12 .4 32 .5 - 12 .4 = 20 .1 The - operator entered by the user is stored in the operator variable. And, two operands 32.5 and 12.4 are stored in variables n1 and n2 respectively. Since the operator is - , the control of the program jumps to printf ( \"%.1lf - %.1lf = %.1lf\" , n1 , n2 , n1 - n2 ); Finally, the break statement terminates the switch statement.","title":"Example: Simple Calculator"},{"location":"week-5-c/ce103-week-5-c/#c-goto-statement","text":"In this tutorial, you will learn to create the goto statement in C programming. Also, you will learn when to use a goto statement and when not to use it. The goto statement allows us to transfer control of the program to the specified label.","title":"C goto Statement"},{"location":"week-5-c/ce103-week-5-c/#syntax-of-goto-statement","text":"goto label ; ... .. ... ... .. ... label : statement ; The label is an identifier. When the goto statement is encountered, the control of the program jumps to label: and starts executing the code. How goto statement work?","title":"Syntax of goto Statement"},{"location":"week-5-c/ce103-week-5-c/#example-goto-statement","text":"// Program to calculate the sum and average of positive numbers // If the user enters a negative number, the sum and average are displayed. #include <stdio.h> int main () { const int maxInput = 100 ; int i ; double number , average , sum = 0.0 ; for ( i = 1 ; i <= maxInput ; ++ i ) { printf ( \"%d. Enter a number: \" , i ); scanf ( \"%lf\" , & number ); // go to jump if the user enters a negative number if ( number < 0.0 ) { goto jump ; } sum += number ; } jump : average = sum / ( i - 1 ); printf ( \"Sum = %.2f \\n \" , sum ); printf ( \"Average = %.2f\" , average ); return 0 ; } Output 1 . Enter a number: 3 2 . Enter a number: 4 .3 3 . Enter a number: 9 .3 4 . Enter a number: -2.9 Sum = 16 .60 Average = 5 .53","title":"Example: goto Statement"},{"location":"week-5-c/ce103-week-5-c/#reasons-to-avoid-goto","text":"The use of goto statement may lead to code that is buggy and hard to follow. For example, one : for ( i = 0 ; i < number ; ++ i ) { test += i ; goto two ; } two : if ( test > 5 ) { goto three ; } ... .. ... Also, the goto statement allows you to do bad stuff such as jump out of the scope. That being said, goto can be useful sometimes. For example: to break from nested loops.","title":"Reasons to avoid goto"},{"location":"week-5-c/ce103-week-5-c/#should-you-use-goto","text":"If you think the use of goto statement simplifies your program, you can use it. That being said, goto is rarely useful and you can create any C program without using goto altogether. Here's a quote from Bjarne Stroustrup, creator of C++, \"The fact that 'goto' can do anything is exactly why we don't use it.\" https://www.programiz.com/c-programming/c-decision-making-loops-examples","title":"Should you use goto?"},{"location":"week-5-c/ce103-week-5-c/#c-functions","text":"In this tutorial, you will be introduced to functions (both user-defined and standard library functions) in C programming. Also, you will learn why functions are used in programming. A function is a block of code that performs a specific task. Suppose, you need to create a program to create a circle and color it. You can create two functions to solve this problem: create a circle function create a color function Dividing a complex problem into smaller chunks makes our program easy to understand and reuse.","title":"C Functions"},{"location":"week-5-c/ce103-week-5-c/#types-of-function","text":"There are two types of function in C programming: Standard library functions User-defined functions","title":"Types of function"},{"location":"week-5-c/ce103-week-5-c/#standard-library-functions","text":"The standard library functions are built-in functions in C programming. These functions are defined in header files. For example, The printf() is a standard library function to send formatted output to the screen (display output on the screen). This function is defined in the stdio.h header file. Hence, to use the printf() function, we need to include the stdio.h header file using #include <stdio.h> . The sqrt() function calculates the square root of a number. The function is defined in the math.h header file. Visit standard library functions in C programming to learn more.","title":"Standard library functions"},{"location":"week-5-c/ce103-week-5-c/#user-defined-function","text":"You can also create functions as per your need. Such functions created by the user are known as user-defined functions.","title":"User-defined function"},{"location":"week-5-c/ce103-week-5-c/#how-user-defined-function-works","text":"#include <stdio.h> void functionName () { ... .. ... ... .. ... } int main () { ... .. ... ... .. ... functionName (); ... .. ... ... .. ... } The execution of a C program begins from the main() function. When the compiler encounters functionName(); , control of the program jumps to void functionName () And, the compiler starts executing the codes inside functionName() . The control of the program jumps back to the main() function once code inside the function definition is executed. How functions are work in C? Working of C Function Note, function names are identifiers and should be unique. This is just an overview of user-defined functions. Visit these pages to learn more on: User-defined Function in C programming Types of user-defined Functions","title":"How user-defined function works?"},{"location":"week-5-c/ce103-week-5-c/#advantages-of-user-defined-function","text":"The program will be easier to understand, maintain and debug. Reusable codes that can be used in other programs A large program can be divided into smaller modules. Hence, a large project can be divided among many programmers.","title":"Advantages of user-defined function"},{"location":"week-5-c/ce103-week-5-c/#c-user-defined-functions","text":"In this tutorial, you will learn to create user-defined functions in C programming with the help of an example. A function is a block of code that performs a specific task. C allows you to define functions according to your need. These functions are known as user-defined functions. For example: Suppose, you need to create a circle and color it depending upon the radius and color. You can create two functions to solve this problem: createCircle() function color() function","title":"C User-defined functions"},{"location":"week-5-c/ce103-week-5-c/#example-user-defined-function","text":"Here is an example to add two integers. To perform this task, we have created an user-defined addNumbers() . #include <stdio.h> int addNumbers ( int a , int b ); // function prototype int main () { int n1 , n2 , sum ; printf ( \"Enters two numbers: \" ); scanf ( \"%d %d\" , & n1 , & n2 ); sum = addNumbers ( n1 , n2 ); // function call printf ( \"sum = %d\" , sum ); return 0 ; } int addNumbers ( int a , int b ) // function definition { int result ; result = a + b ; return result ; // return statement }","title":"Example: User-defined function"},{"location":"week-5-c/ce103-week-5-c/#function-prototype","text":"A function prototype is simply the declaration of a function that specifies function's name, parameters and return type. It doesn't contain function body. A function prototype gives information to the compiler that the function may later be used in the program.","title":"Function prototype"},{"location":"week-5-c/ce103-week-5-c/#syntax-of-function-prototype","text":"returnType functionName(type1 argument1, type2 argument2, ...); In the above example, int addNumbers(int a, int b); is the function prototype which provides the following information to the compiler: name of the function is addNumbers() return type of the function is int two arguments of type int are passed to the function The function prototype is not needed if the user-defined function is defined before the main() function.","title":"Syntax of function prototype"},{"location":"week-5-c/ce103-week-5-c/#calling-a-function","text":"Control of the program is transferred to the user-defined function by calling it.","title":"Calling a function"},{"location":"week-5-c/ce103-week-5-c/#syntax-of-function-call","text":"functionName(argument1, argument2, ...); In the above example, the function call is made using addNumbers(n1, n2); statement inside the main() function.","title":"Syntax of function call"},{"location":"week-5-c/ce103-week-5-c/#function-definition","text":"Function definition contains the block of code to perform a specific task. In our example, adding two numbers and returning it.","title":"Function definition"},{"location":"week-5-c/ce103-week-5-c/#syntax-of-function-definition","text":"returnType functionName ( type1 argument1 , type2 argument2 , ...) { //body of the function } When a function is called, the control of the program is transferred to the function definition. And, the compiler starts executing the codes inside the body of a function.","title":"Syntax of function definition"},{"location":"week-5-c/ce103-week-5-c/#passing-arguments-to-a-function","text":"In programming, argument refers to the variable passed to the function. In the above example, two variables n1 and n2 are passed during the function call. The parameters a and b accepts the passed arguments in the function definition. These arguments are called formal parameters of the function. How arguments passed to a function in C? Passing Argument to Function The type of arguments passed to a function and the formal parameters must match, otherwise, the compiler will throw an error. If n1 is of char type, a also should be of char type. If n2 is of float type, variable b also should be of float type. A function can also be called without passing an argument.","title":"Passing arguments to a function"},{"location":"week-5-c/ce103-week-5-c/#return-statement","text":"The return statement terminates the execution of a function and returns a value to the calling function. The program control is transferred to the calling function after the return statement. In the above example, the value of the result variable is returned to the main function. The sum variable in the main() function is assigned this value. How return statement work?","title":"Return Statement"},{"location":"week-5-c/ce103-week-5-c/#syntax-of-return-statement","text":"return ( expression ); For example, return a ; return ( a + b ); The type of value returned from the function and the return type specified in the function prototype and function definition must match. Visit this page to learn more on passing arguments and returning value from a function .","title":"Syntax of return statement"},{"location":"week-5-c/ce103-week-5-c/#types-of-user-defined-functions-in-c-programming","text":"In this tutorial, you will learn about different approaches you can take to solve the same problem using functions. These 4 programs below check whether the integer entered by the user is a prime number or not. The output of all these programs below is the same, and we have created a user-defined function in each example. However, the approach we have taken in each example is different.","title":"Types of User-defined Functions in C Programming"},{"location":"week-5-c/ce103-week-5-c/#example-1-no-argument-passed-and-no-return-value","text":"#include <stdio.h> void checkPrimeNumber (); int main () { checkPrimeNumber (); // argument is not passed return 0 ; } // return type is void meaning doesn't return any value void checkPrimeNumber () { int n , i , flag = 0 ; printf ( \"Enter a positive integer: \" ); scanf ( \"%d\" , & n ); // 0 and 1 are not prime numbers if ( n == 0 || n == 1 ) flag = 1 ; for ( i = 2 ; i <= n / 2 ; ++ i ) { if ( n % i == 0 ) { flag = 1 ; break ; } } if ( flag == 1 ) printf ( \"%d is not a prime number.\" , n ); else printf ( \"%d is a prime number.\" , n ); } Run Code The checkPrimeNumber() function takes input from the user, checks whether it is a prime number or not, and displays it on the screen. The empty parentheses in checkPrimeNumber(); inside the main() function indicates that no argument is passed to the function. The return type of the function is void . Hence, no value is returned from the function.","title":"Example 1: No Argument Passed and No Return Value"},{"location":"week-5-c/ce103-week-5-c/#example-2-no-arguments-passed-but-returns-a-value","text":"#include <stdio.h> int getInteger (); int main () { int n , i , flag = 0 ; // no argument is passed n = getInteger (); // 0 and 1 are not prime numbers if ( n == 0 || n == 1 ) flag = 1 ; for ( i = 2 ; i <= n / 2 ; ++ i ) { if ( n % i == 0 ){ flag = 1 ; break ; } } if ( flag == 1 ) printf ( \"%d is not a prime number.\" , n ); else printf ( \"%d is a prime number.\" , n ); return 0 ; } // returns integer entered by the user int getInteger () { int n ; printf ( \"Enter a positive integer: \" ); scanf ( \"%d\" , & n ); return n ; } Run Code The empty parentheses in the n = getInteger(); statement indicates that no argument is passed to the function. And, the value returned from the function is assigned to n. Here, the getInteger() function takes input from the user and returns it. The code to check whether a number is prime or not is inside the main() function.","title":"Example 2: No Arguments Passed But\u00a0Returns a Value"},{"location":"week-5-c/ce103-week-5-c/#example-3-argument-passed-but-no-return-value","text":"#include <stdio.h> void checkPrimeAndDisplay ( int n ); int main () { int n ; printf ( \"Enter a positive integer: \" ); scanf ( \"%d\" , & n ); // n is passed to the function checkPrimeAndDisplay ( n ); return 0 ; } // return type is void meaning doesn't return any value void checkPrimeAndDisplay ( int n ) { int i , flag = 0 ; // 0 and 1 are not prime numbers if ( n == 0 || n == 1 ) flag = 1 ; for ( i = 2 ; i <= n / 2 ; ++ i ) { if ( n % i == 0 ){ flag = 1 ; break ; } } if ( flag == 1 ) printf ( \"%d is not a prime number.\" , n ); else printf ( \"%d is a prime number.\" , n ); } Run Code The integer value entered by the user is passed to the checkPrimeAndDisplay() function. Here, the checkPrimeAndDisplay() function checks whether the argument passed is a prime number or not and displays the appropriate message.","title":"Example 3: Argument Passed But No Return Value"},{"location":"week-5-c/ce103-week-5-c/#example-4-argument-passed-and-returns-a-value","text":"#include <stdio.h> int checkPrimeNumber ( int n ); int main () { int n , flag ; printf ( \"Enter a positive integer: \" ); scanf ( \"%d\" , & n ); // n is passed to the checkPrimeNumber() function // the returned value is assigned to the flag variable flag = checkPrimeNumber ( n ); if ( flag == 1 ) printf ( \"%d is not a prime number\" , n ); else printf ( \"%d is a prime number\" , n ); return 0 ; } // int is returned from the function int checkPrimeNumber ( int n ) { // 0 and 1 are not prime numbers if ( n == 0 || n == 1 ) return 1 ; int i ; for ( i = 2 ; i <= n / 2 ; ++ i ) { if ( n % i == 0 ) return 1 ; } return 0 ; } Run Code The input from the user is passed to the checkPrimeNumber() function. The checkPrimeNumber() function checks whether the passed argument is prime or not. If the passed argument is a prime number, the function returns 0 . If the passed argument is a non-prime number, the function returns 1 . The return value is assigned to the flag variable. Depending on whether flag is 0 or 1 , an appropriate message is printed from the main() function.","title":"Example 4: Argument Passed and Returns a Value"},{"location":"week-5-c/ce103-week-5-c/#which-approach-is-better","text":"Well, it depends on the problem you are trying to solve. In this case, passing an argument and returning a value from the function (example 4) is better. A function should perform a specific task. The checkPrimeNumber() function doesn't take input from the user nor it displays the appropriate message. It only checks whether a number is prime or not.","title":"Which approach is better?"},{"location":"week-5-c/ce103-week-5-c/#c-recursion","text":"In this tutorial, you will learn to write recursive functions in C programming with the help of an example. A function that calls itself is known as a recursive function. And, this technique is known as recursion.","title":"C Recursion"},{"location":"week-5-c/ce103-week-5-c/#how-recursion-works","text":"void recurse () { ... .. ... recurse (); ... .. ... } int main () { ... .. ... recurse (); ... .. ... } How recursion works ? Working of Recursion The recursion continues until some condition is met to prevent it. To prevent infinite recursion, if...else statement (or similar approach) can be used where one branch makes the recursive call, and other doesn't.","title":"How recursion works?"},{"location":"week-5-c/ce103-week-5-c/#example-sum-of-natural-numbers-using-recursion","text":"#include <stdio.h> int sum ( int n ); int main () { int number , result ; printf ( \"Enter a positive integer: \" ); scanf ( \"%d\" , & number ); result = sum ( number ); printf ( \"sum = %d\" , result ); return 0 ; } int sum ( int n ) { if ( n != 0 ) // sum() function calls itself return n + sum ( n -1 ); else return n ; } Output Enter a positive integer:3 sum = 6 Initially, the sum() is called from the main() function with number passed as an argument. Suppose, the value of n inside sum() is 3 initially. During the next function call, 2 is passed to the sum() function. This process continues until n is equal to 0. When n is equal to 0, the if condition fails and the else part is executed returning the sum of integers ultimately to the main() function.","title":"Example: Sum of Natural Numbers Using Recursion"},{"location":"week-5-c/ce103-week-5-c/#sum-of-natural-numbers","text":"","title":"Sum of Natural Numbers"},{"location":"week-5-c/ce103-week-5-c/#advantages-and-disadvantages-of-recursion","text":"Recursion makes program elegant. However, if performance is vital, use loops instead as recursion is usually much slower. That being said, recursion is an important concept. It is frequently used in data structure and algorithms . For example, it is common to use recursion in problems such as tree traversal.","title":"Advantages and Disadvantages of Recursion"},{"location":"week-5-c/ce103-week-5-c/#c-storage-class","text":"In this tutorial, you will learn about scope and lifetime of local and global variables. Also, you will learn about static and register variables. Every variable in C programming has two properties: type and storage class. Type refers to the data type of a variable. And, storage class determines the scope, visibility and lifetime of a variable. There are 4 types of storage class: automatic external static register","title":"C Storage Class"},{"location":"week-5-c/ce103-week-5-c/#local-variable","text":"The variables declared inside a block are automatic or local variables. The local variables exist only inside the block in which it is declared. Let's take an example. #include <stdio.h> int main ( void ) { for ( int i = 0 ; i < 5 ; ++ i ) { printf ( \"C programming\" ); } // Error: i is not declared at this point printf ( \"%d\" , i ); return 0 ; } Run Code When you run the above program, you will get an error undeclared identifier i. It's because i is declared inside the for loop block. Outside of the block, it's undeclared. Let's take another example. int main () { int n1 ; // n1 is a local variable to main() } void func () { int n2 ; // n2 is a local variable to func() } In the above example, n1 is local to main() and n2 is local to func() . This means you cannot access the n1 variable inside func() as it only exists inside main() . Similarly, you cannot access the n2 variable inside main() as it only exists inside func() .","title":"Local Variable"},{"location":"week-5-c/ce103-week-5-c/#global-variable","text":"Variables that are declared outside of all functions are known as external or global variables. They are accessible from any function inside the program.","title":"Global Variable"},{"location":"week-5-c/ce103-week-5-c/#example-1-global-variable","text":"#include <stdio.h> void display (); int n = 5 ; // global variable int main () { ++ n ; display (); return 0 ; } void display () { ++ n ; printf ( \"n = %d\" , n ); } Run Code Output n = 7 Suppose, a global variable is declared in file1 . If you try to use that variable in a different file file2 , the compiler will complain. To solve this problem, keyword extern is used in file2 to indicate that the external variable is declared in another file.","title":"Example 1: Global Variable"},{"location":"week-5-c/ce103-week-5-c/#register-variable","text":"The register keyword is used to declare register variables. Register variables were supposed to be faster than local variables. However, modern compilers are very good at code optimization, and there is a rare chance that using register variables will make your program faster. Unless you are working on embedded systems where you know how to optimize code for the given application, there is no use of register variables.","title":"Register Variable"},{"location":"week-5-c/ce103-week-5-c/#static-variable","text":"A static variable is declared by using the static keyword. For example; static int i; The value of a static variable persists until the end of the program.","title":"Static Variable"},{"location":"week-5-c/ce103-week-5-c/#example-2-static-variable","text":"#include <stdio.h> void display (); int main () { display (); display (); } void display () { static int c = 1 ; c += 5 ; printf ( \"%d \" , c ); } Run Code Output 6 11 During the first function call, the value of c is initialized to 1. Its value is increased by 5. Now, the value of c is 6, which is printed on the screen. During the second function call, c is not initialized to 1 again. It's because c is a static variable. The value c is increased by 5. Now, its value will be 11, which is printed on the screen. C Function Examples","title":"Example 2: Static Variable"},{"location":"week-5-c/ce103-week-5-c/#c-arrays","text":"In this tutorial, you will learn to work with arrays. You will learn to declare, initialize and access elements of an array with the help of examples. C Arrays Arrays in C An array is a variable that can store multiple values. For example, if you want to store 100 integers, you can create an array for it. int data [ 100 ];","title":"C Arrays"},{"location":"week-5-c/ce103-week-5-c/#how-to-declare-an-array","text":"dataType arrayName [ arraySize ]; For example, float mark [ 5 ]; Here, we declared an array, mark, of floating-point type. And its size is 5. Meaning, it can hold 5 floating-point values. It's important to note that the size and type of an array cannot be changed once it is declared.","title":"How to declare an array?"},{"location":"week-5-c/ce103-week-5-c/#access-array-elements","text":"You can access elements of an array by indices. Suppose you declared an array mark as above. The first element is mark[0], the second element is mark[1] and so on.","title":"Access Array Elements"},{"location":"week-5-c/ce103-week-5-c/#c-array-decleration","text":"","title":"C Array Decleration"},{"location":"week-5-c/ce103-week-5-c/#declare-an-array","text":"Few keynotes : Arrays have 0 as the first index, not 1. In this example, mark[0] is the first element. If the size of an array is n, to access the last element, the n-1 index is used. In this example, mark[4] Suppose the starting address of mark[0] is 2120d . Then, the address of the mark[1] will be 2124d . Similarly, the address of mark[2] will be 2128d and so on. This is because the size of a float is 4 bytes.","title":"Declare an Array"},{"location":"week-5-c/ce103-week-5-c/#how-to-initialize-an-array","text":"It is possible to initialize an array during declaration. For example, int mark [ 5 ] = { 19 , 10 , 8 , 17 , 9 }; You can also initialize an array like this. int mark [] = { 19 , 10 , 8 , 17 , 9 }; Here, we haven't specified the size. However, the compiler knows its size is 5 as we are initializing it with 5 elements. Initialize Array Initialize an Array Here, mark [ 0 ] is equal to 19 mark [ 1 ] is equal to 10 mark [ 2 ] is equal to 8 mark [ 3 ] is equal to 17 mark [ 4 ] is equal to 9","title":"How to initialize an array?"},{"location":"week-5-c/ce103-week-5-c/#change-value-of-array-elements","text":"int mark [ 5 ] = { 19 , 10 , 8 , 17 , 9 } // make the value of the third element to -1 mark [ 2 ] = -1 ; // make the value of the fifth element to 0 mark [ 4 ] = 0 ;","title":"Change Value of Array elements"},{"location":"week-5-c/ce103-week-5-c/#input-and-output-array-elements","text":"Here's how you can take input from the user and store it in an array element. // take input and store it in the 3rd element \u200b scanf ( \"%d\" , & mark [ 2 ]); // take input and store it in the ith element scanf ( \"%d\" , & mark [ i -1 ]); Here's how you can print an individual element of an array. // print the first element of the array printf ( \"%d\" , mark [ 0 ]); // print the third element of the array printf ( \"%d\" , mark [ 2 ]); // print ith element of the array printf ( \"%d\" , mark [ i -1 ]);","title":"Input and Output Array Elements"},{"location":"week-5-c/ce103-week-5-c/#example-1-array-inputoutput","text":"// Program to take 5 values from the user and store them in an array // Print the elements stored in the array #include <stdio.h> int main () { int values [ 5 ]; printf ( \"Enter 5 integers: \" ); // taking input and storing it in an array for ( int i = 0 ; i < 5 ; ++ i ) { scanf ( \"%d\" , & values [ i ]); } printf ( \"Displaying integers: \" ); // printing elements of an array for ( int i = 0 ; i < 5 ; ++ i ) { printf ( \"%d \\n \" , values [ i ]); } return 0 ; } Run Code Output Enter 5 integers: 1 -3 34 0 3 Displaying integers: 1 -3 34 0 3 Here, we have used a for loop to take 5 inputs from the user and store them in an array. Then, using another for loop, these elements are displayed on the screen.","title":"Example 1: Array Input/Output"},{"location":"week-5-c/ce103-week-5-c/#example-2-calculate-average","text":"// Program to find the average of n numbers using arrays #include <stdio.h> int main () { int marks [ 10 ], i , n , sum = 0 ; double average ; printf ( \"Enter number of elements: \" ); scanf ( \"%d\" , & n ); for ( i = 0 ; i < n ; ++ i ) { printf ( \"Enter number%d: \" , i + 1 ); scanf ( \"%d\" , & marks [ i ]); // adding integers entered by the user to the sum variable sum += marks [ i ]; } // explicitly convert sum to double // then calculate average average = ( double ) sum / n ; printf ( \"Average = %.2lf\" , average ); return 0 ; } Run Code Output Enter number of elements: 5 Enter number1: 45 Enter number2: 35 Enter number3: 38 Enter number4: 31 Enter number5: 49 Average = 39 .60 Here, we have computed the average of n numbers entered by the user.","title":"Example 2: Calculate Average"},{"location":"week-5-c/ce103-week-5-c/#access-elements-out-of-its-bound","text":"Suppose you declared an array of 10 elements. Let's say, int testArray [ 10 ]; You can access the array elements from testArray[0] to testArray[9] . Now let's say if you try to access testArray[12] . The element is not available. This may cause unexpected output (undefined behavior). Sometimes you might get an error and some other time your program may run correctly. Hence, you should never access elements of an array outside of its bound.","title":"Access elements out of its bound!"},{"location":"week-5-c/ce103-week-5-c/#multidimensional-arrays","text":"In this tutorial, you learned about arrays. These arrays are called one-dimensional arrays. In the next tutorial, you will learn about multidimensional arrays (array of an array) .","title":"Multidimensional arrays"},{"location":"week-5-c/ce103-week-5-c/#c-multidimensional-arrays","text":"In this tutorial, you will learn to work with multidimensional arrays (two-dimensional and three-dimensional arrays) with the help of examples. In C programming, you can create an array of arrays. These arrays are known as multidimensional arrays. For example, float x [ 3 ][ 4 ]; Here, x is a two-dimensional (2d) array. The array can hold 12 elements. You can think the array as a table with 3 rows and each row has 4 columns. Two dimensional array Two dimensional Array Similarly, you can declare a three-dimensional (3d) array. For example, float y [ 2 ][ 4 ][ 3 ]; Here, the array y can hold 24 elements.","title":"C Multidimensional Arrays"},{"location":"week-5-c/ce103-week-5-c/#initializing-a-multidimensional-array","text":"Here is how you can initialize two-dimensional and three-dimensional arrays:","title":"Initializing a multidimensional array"},{"location":"week-5-c/ce103-week-5-c/#initialization-of-a-2d-array","text":"// Different ways to initialize two-dimensional array int c [ 2 ][ 3 ] = {{ 1 , 3 , 0 }, { -1 , 5 , 9 }}; int c [][ 3 ] = {{ 1 , 3 , 0 }, { -1 , 5 , 9 }}; int c [ 2 ][ 3 ] = { 1 , 3 , 0 , -1 , 5 , 9 };","title":"Initialization of a 2d array"},{"location":"week-5-c/ce103-week-5-c/#initialization-of-a-3d-array","text":"You can initialize a three-dimensional array in a similar way to a two-dimensional array. Here's an example, int test [ 2 ][ 3 ][ 4 ] = { {{ 3 , 4 , 2 , 3 }, { 0 , -3 , 9 , 11 }, { 23 , 12 , 23 , 2 }}, {{ 13 , 4 , 56 , 3 }, { 5 , 9 , 3 , 5 }, { 3 , 1 , 4 , 9 }}};","title":"Initialization of a 3d array"},{"location":"week-5-c/ce103-week-5-c/#example-1-two-dimensional-array-to-store-and-print-values","text":"// C program to store temperature of two cities of a week and display it. #include <stdio.h> const int CITY = 2 ; const int WEEK = 7 ; int main () { int temperature [ CITY ][ WEEK ]; // Using nested loop to store values in a 2d array for ( int i = 0 ; i < CITY ; ++ i ) { for ( int j = 0 ; j < WEEK ; ++ j ) { printf ( \"City %d, Day %d: \" , i + 1 , j + 1 ); scanf ( \"%d\" , & temperature [ i ][ j ]); } } printf ( \" \\n Displaying values: \\n\\n \" ); // Using nested loop to display vlues of a 2d array for ( int i = 0 ; i < CITY ; ++ i ) { for ( int j = 0 ; j < WEEK ; ++ j ) { printf ( \"City %d, Day %d = %d \\n \" , i + 1 , j + 1 , temperature [ i ][ j ]); } } return 0 ; } Run Code Output City 1 , Day 1 : 33 City 1 , Day 2 : 34 City 1 , Day 3 : 35 City 1 , Day 4 : 33 City 1 , Day 5 : 32 City 1 , Day 6 : 31 City 1 , Day 7 : 30 City 2 , Day 1 : 23 City 2 , Day 2 : 22 City 2 , Day 3 : 21 City 2 , Day 4 : 24 City 2 , Day 5 : 22 City 2 , Day 6 : 25 City 2 , Day 7 : 26 Displaying values: City 1 , Day 1 = 33 City 1 , Day 2 = 34 City 1 , Day 3 = 35 City 1 , Day 4 = 33 City 1 , Day 5 = 32 City 1 , Day 6 = 31 City 1 , Day 7 = 30 City 2 , Day 1 = 23 City 2 , Day 2 = 22 City 2 , Day 3 = 21 City 2 , Day 4 = 24 City 2 , Day 5 = 22 City 2 , Day 6 = 25 City 2 , Day 7 = 26","title":"Example 1: Two-dimensional array to store and print values"},{"location":"week-5-c/ce103-week-5-c/#example-2-sum-of-two-matrices","text":"// C program to find the sum of two matrices of order 2*2 #include <stdio.h> int main () { float a [ 2 ][ 2 ], b [ 2 ][ 2 ], result [ 2 ][ 2 ]; // Taking input using nested for loop printf ( \"Enter elements of 1st matrix \\n \" ); for ( int i = 0 ; i < 2 ; ++ i ) for ( int j = 0 ; j < 2 ; ++ j ) { printf ( \"Enter a%d%d: \" , i + 1 , j + 1 ); scanf ( \"%f\" , & a [ i ][ j ]); } // Taking input using nested for loop printf ( \"Enter elements of 2nd matrix \\n \" ); for ( int i = 0 ; i < 2 ; ++ i ) for ( int j = 0 ; j < 2 ; ++ j ) { printf ( \"Enter b%d%d: \" , i + 1 , j + 1 ); scanf ( \"%f\" , & b [ i ][ j ]); } // adding corresponding elements of two arrays for ( int i = 0 ; i < 2 ; ++ i ) for ( int j = 0 ; j < 2 ; ++ j ) { result [ i ][ j ] = a [ i ][ j ] + b [ i ][ j ]; } // Displaying the sum printf ( \" \\n Sum Of Matrix:\" ); for ( int i = 0 ; i < 2 ; ++ i ) for ( int j = 0 ; j < 2 ; ++ j ) { printf ( \"%.1f \\t \" , result [ i ][ j ]); if ( j == 1 ) printf ( \" \\n \" ); } return 0 ; } Run Code Output Enter elements of 1st matrix Enter a11: 2 ; Enter a12: 0 .5 ; Enter a21: -1.1 ; Enter a22: 2 ; Enter elements of 2nd matrix Enter b11: 0 .2 ; Enter b12: 0 ; Enter b21: 0 .23 ; Enter b22: 23 ; Sum Of Matrix: 2 .2 0 .5 -0.9 25 .0","title":"Example 2: Sum of two matrices"},{"location":"week-5-c/ce103-week-5-c/#example-3-three-dimensional-array","text":"// C Program to store and print 12 values entered by the user #include <stdio.h> int main () { int test [ 2 ][ 3 ][ 2 ]; printf ( \"Enter 12 values: \\n \" ); for ( int i = 0 ; i < 2 ; ++ i ) { for ( int j = 0 ; j < 3 ; ++ j ) { for ( int k = 0 ; k < 2 ; ++ k ) { scanf ( \"%d\" , & test [ i ][ j ][ k ]); } } } // Printing values with the proper index. printf ( \" \\n Displaying values: \\n \" ); for ( int i = 0 ; i < 2 ; ++ i ) { for ( int j = 0 ; j < 3 ; ++ j ) { for ( int k = 0 ; k < 2 ; ++ k ) { printf ( \"test[%d][%d][%d] = %d \\n \" , i , j , k , test [ i ][ j ][ k ]); } } } return 0 ; } Run Code Output Enter 12 values: 1 2 3 4 5 6 7 8 9 10 11 12 Displaying Values: test [ 0 ][ 0 ][ 0 ] = 1 test [ 0 ][ 0 ][ 1 ] = 2 test [ 0 ][ 1 ][ 0 ] = 3 test [ 0 ][ 1 ][ 1 ] = 4 test [ 0 ][ 2 ][ 0 ] = 5 test [ 0 ][ 2 ][ 1 ] = 6 test [ 1 ][ 0 ][ 0 ] = 7 test [ 1 ][ 0 ][ 1 ] = 8 test [ 1 ][ 1 ][ 0 ] = 9 test [ 1 ][ 1 ][ 1 ] = 10 test [ 1 ][ 2 ][ 0 ] = 11 test [ 1 ][ 2 ][ 1 ] = 12","title":"Example 3: Three-dimensional array"},{"location":"week-5-c/ce103-week-5-c/#pass-arrays-to-a-function-in-c","text":"In this tutorial, you'll learn to pass arrays (both one-dimensional and multidimensional arrays) to a function in C programming with the help of examples. In C programming, you can pass an entire array to functions. Before we learn that, let's see how you can pass individual elements of an array to functions.","title":"Pass arrays to a function in C"},{"location":"week-5-c/ce103-week-5-c/#pass-individual-array-elements","text":"Passing array elements to a function is similar to passing variables to a function .","title":"Pass\u00a0Individual Array Elements"},{"location":"week-5-c/ce103-week-5-c/#example-1-pass-individual-array-elements","text":"#include <stdio.h> void display ( int age1 , int age2 ) { printf ( \"%d \\n \" , age1 ); printf ( \"%d \\n \" , age2 ); } int main () { int ageArray [] = { 2 , 8 , 4 , 12 }; // pass second and third elements to display() display ( ageArray [ 1 ], ageArray [ 2 ]); return 0 ; } Run Code Output 8 4 Here, we have passed array parameters to the display() function in the same way we pass variables to a function. // pass second and third elements to display() display ( ageArray [ 1 ], ageArray [ 2 ]); We can see this in the function definition, where the function parameters are individual variables: void display ( int age1 , int age2 ) { // code }","title":"Example 1: Pass\u00a0Individual\u00a0Array Elements"},{"location":"week-5-c/ce103-week-5-c/#example-2-pass-arrays-to-functions","text":"// Program to calculate the sum of array elements by passing to a function #include <stdio.h> float calculateSum ( float num []); int main () { float result , num [] = { 23.4 , 55 , 22.6 , 3 , 40.5 , 18 }; // num array is passed to calculateSum() result = calculateSum ( num ); printf ( \"Result = %.2f\" , result ); return 0 ; } float calculateSum ( float num []) { float sum = 0.0 ; for ( int i = 0 ; i < 6 ; ++ i ) { sum += num [ i ]; } return sum ; } Run Code Output Result = 162 .50 To pass an entire array to a function, only the name of the array is passed as an argument. result = calculateSum ( num ); However, notice the use of [] in the function definition. float calculateSum ( float num []) { ... .. } This informs the compiler that you are passing a one-dimensional array to the function.","title":"Example 2: Pass\u00a0Arrays to Functions"},{"location":"week-5-c/ce103-week-5-c/#pass-multidimensional-arrays-to-a-function","text":"To pass multidimensional arrays to a function, only the name of the array is passed to the function (similar to one-dimensional arrays).","title":"Pass\u00a0Multidimensional Arrays to a Function"},{"location":"week-5-c/ce103-week-5-c/#example-3-pass-two-dimensional-arrays","text":"#include <stdio.h> void displayNumbers ( int num [ 2 ][ 2 ]); int main () { int num [ 2 ][ 2 ]; printf ( \"Enter 4 numbers: \\n \" ); for ( int i = 0 ; i < 2 ; ++ i ) { for ( int j = 0 ; j < 2 ; ++ j ) { scanf ( \"%d\" , & num [ i ][ j ]); } } // pass multi-dimensional array to a function displayNumbers ( num ); return 0 ; } void displayNumbers ( int num [ 2 ][ 2 ]) { printf ( \"Displaying: \\n \" ); for ( int i = 0 ; i < 2 ; ++ i ) { for ( int j = 0 ; j < 2 ; ++ j ) { printf ( \"%d \\n \" , num [ i ][ j ]); } } } Run Code Output Enter 4 numbers: 2 3 4 5 Displaying: 2 3 4 5 Notice the parameter int num[2][2] in the function prototype and function definition: // function prototype void displayNumbers ( int num [ 2 ][ 2 ]); This signifies that the function takes a two-dimensional array as an argument. We can also pass arrays with more than 2 dimensions as a function argument. When passing two-dimensional arrays, it is not mandatory to specify the number of rows in the array. However, the number of columns should always be specified. For example, void displayNumbers ( int num [][ 2 ]) { // code } Recommended Reading: Call by Reference in C","title":"Example 3: Pass\u00a0two-dimensional arrays"},{"location":"week-5-c/ce103-week-5-c/#c-pointers","text":"In this tutorial, you'll learn about pointers; what pointers are, how do you use them and the common mistakes you might face when working with them with the help of examples. Pointers are powerful features of C and C++ programming. Before we learn pointers, let's learn about addresses in C programming.","title":"C Pointers"},{"location":"week-5-c/ce103-week-5-c/#address-in-c","text":"If you have a variable var in your program, &var will give you its address in the memory. We have used address numerous times while using the scanf() function. scanf ( \"%d\" , & var ); Here, the value entered by the user is stored in the address of var variable. Let's take a working example. #include <stdio.h> int main () { int var = 5 ; printf ( \"var: %d \\n \" , var ); // Notice the use of & before var printf ( \"address of var: %p\" , & var ); return 0 ; } Output var: 5 address of var: 2686778 Note: You will probably get a different address when you run the above code.","title":"Address in C"},{"location":"week-5-c/ce103-week-5-c/#c-pointers_1","text":"Pointers (pointer variables) are special variables that are used to store addresses rather than values.","title":"C Pointers"},{"location":"week-5-c/ce103-week-5-c/#pointer-syntax","text":"Here is how we can declare pointers. int * p ; Here, we have declared a pointer p of int type. You can also declare pointers in these ways. int * p1 ; int * p2 ; Let's take another example of declaring pointers. int * p1 , p2 ; Here, we have declared a pointer p1 and a normal variable p2.","title":"Pointer Syntax"},{"location":"week-5-c/ce103-week-5-c/#assigning-addresses-to-pointers","text":"Let's take an example. int * pc , c ; c = 5 ; pc = & c ; Here, 5 is assigned to the c variable. And, the address of c is assigned to the pc pointer.","title":"Assigning addresses to Pointers"},{"location":"week-5-c/ce103-week-5-c/#get-value-of-thing-pointed-by-pointers","text":"To get the value of the thing pointed by the pointers, we use the * operator. For example: int * pc , c ; c = 5 ; pc = & c ; printf ( \"%d\" , * pc ); // Output: 5 Here, the address of c is assigned to the pc pointer. To get the value stored in that address, we used *pc. Note: In the above example, pc is a pointer, not *pc . You cannot and should not do something like *pc = &c ; By the way, * is called the dereference operator (when working with pointers). It operates on a pointer and gives the value stored in that pointer.","title":"Get Value of Thing Pointed by Pointers"},{"location":"week-5-c/ce103-week-5-c/#changing-value-pointed-by-pointers","text":"Let's take an example. int * pc , c ; c = 5 ; pc = & c ; c = 1 ; printf ( \"%d\" , c ); // Output: 1 printf ( \"%d\" , * pc ); // Ouptut: 1 We have assigned the address of c to the pc pointer. Then, we changed the value of c to 1. Since pc and the address of c is the same, *pc gives us 1. Let's take another example. int * pc , c ; c = 5 ; pc = & c ; * pc = 1 ; printf ( \"%d\" , * pc ); // Ouptut: 1 printf ( \"%d\" , c ); // Output: 1 We have assigned the address of c to the pc pointer. Then, we changed *pc to 1 using *pc = 1; . Since pc and the address of c is the same, c will be equal to 1. Let's take one more example. int * pc , c , d ; c = 5 ; d = -15 ; pc = & c ; printf ( \"%d\" , * pc ); // Output: 5 pc = & d ; printf ( \"%d\" , * pc ); // Ouptut: -15 Initially, the address of c is assigned to the pc pointer using pc = &c; . Since c is 5, *pc gives us 5. Then, the address of d is assigned to the pc pointer using pc = &d; . Since d is -15, *pc gives us -15.","title":"Changing Value Pointed by Pointers"},{"location":"week-5-c/ce103-week-5-c/#example-working-of-pointers","text":"Let's take a working example. #include <stdio.h> int main () { int * pc , c ; c = 22 ; printf ( \"Address of c: %p \\n \" , & c ); printf ( \"Value of c: %d \\n\\n \" , c ); // 22 pc = & c ; printf ( \"Address of pointer pc: %p \\n \" , pc ); printf ( \"Content of pointer pc: %d \\n\\n \" , * pc ); // 22 c = 11 ; printf ( \"Address of pointer pc: %p \\n \" , pc ); printf ( \"Content of pointer pc: %d \\n\\n \" , * pc ); // 11 * pc = 2 ; printf ( \"Address of c: %p \\n \" , & c ); printf ( \"Value of c: %d \\n\\n \" , c ); // 2 return 0 ; } Output Address of c: 2686784 Value of c: 22 Address of pointer pc: 2686784 Content of pointer pc: 22 Address of pointer pc: 2686784 Content of pointer pc: 11 Address of c: 2686784 Value of c: 2 Explanation of the program int* pc, c; Here, a pointer pc and a normal variable c, both of type int , is created. Since pc and c are not initialized at initially, pointer pc points to either no address or a random address. And, variable c has an address but contains random garbage value. 2. c = 22; This assigns 22 to the variable c. That is, 22 is stored in the memory location of variable c. pc = &c; This assigns the address of variable c to the pointer pc. c = 11; This assigns 11 to variable c. *pc = 2; This change the value at the memory location pointed by the pointer pc to 2.","title":"Example: Working of Pointers"},{"location":"week-5-c/ce103-week-5-c/#common-mistakes-when-working-with-pointers","text":"Suppose, you want pointer pc to point to the address of c. Then, int c , * pc ; // pc is address but c is not pc = c ; // Error // &c is address but *pc is not * pc = & c ; // Error // both &c and pc are addresses pc = & c ; // Not an error // both c and *pc are values * pc = c ; // Not an error Here's an example of pointer syntax beginners often find confusing. #include <stdio.h> int main () { int c = 5 ; int * p = & c ; printf ( \"%d\" , * p ); // 5 return 0 ; } Why didn't we get an error when using int *p = &c; ? It's because int * p = & c ; is equivalent to int * p : p = & c ; In both cases, we are creating a pointer p (not *p ) and assigning &c to it. To avoid this confusion, we can use the statement like this: int * p = & c ; Now you know what pointers are, you will learn how pointers are related to arrays in the next tutorial.","title":"Common mistakes when working with pointers"},{"location":"week-5-c/ce103-week-5-c/#relationship-between-arrays-and-pointers","text":"In this tutorial, you'll learn about the relationship between arrays and pointers in C programming. You will also learn to access array elements using pointers. Before you learn about the relationship between arrays and pointers, be sure to check these two topics: C Arrays C Pointers","title":"Relationship Between Arrays and Pointers"},{"location":"week-5-c/ce103-week-5-c/#relationship-between-arrays-and-pointers_1","text":"An array is a block of sequential data. Let's write a program to print addresses of array elements. #include <stdio.h> int main () { int x [ 4 ]; int i ; for ( i = 0 ; i < 4 ; ++ i ) { printf ( \"&x[%d] = %p \\n \" , i , & x [ i ]); } printf ( \"Address of array x: %p\" , x ); return 0 ; } Output & x [ 0 ] = 1450734448 & x [ 1 ] = 1450734452 & x [ 2 ] = 1450734456 & x [ 3 ] = 1450734460 Address of array x: 1450734448 ``` --- There is a difference of 4 bytes between two consecutive elements of array x. It is because the size of ` int ` is 4 bytes ( on our compiler ) . Notice that, the address of & x [ 0 ] and x is the same. It ' s because the variable name x points to the first element of the array. --- ### Arrays as Pointers ! [ center height:300px ]( https://cdn.programiz.com/sites/tutorial2program/files/array-pointers.jpg ) --- Relation between Arrays and Pointers From the above example, it is clear that ` & x [ 0 ] ` is equivalent to x. And, ` x [ 0 ] ` is equivalent to ` *x ` . --- Similarly, - ` & x [ 1 ] ` is equivalent to ` x+1 ` and ` x [ 1 ] ` is equivalent to ` * ( x+1 ) ` . - ` & x [ 2 ] ` is equivalent to ` x+2 ` and ` x [ 2 ] ` is equivalent to ` * ( x+2 ) ` . - ... - Basically, ` & x [ i ] ` is equivalent to ` x+i ` and ` x [ i ] ` is equivalent to ` * ( x+i ) ` . --- ### Example 1: Pointers and Arrays ``` c #include <stdio.h> int main () { int i, x [ 6 ] , sum = 0 ; printf ( \"Enter 6 numbers: \" ) ; for ( i = 0 ; i < 6 ; ++i ) { // Equivalent to scanf ( \"%d\" , & x [ i ]) ; scanf ( \"%d\" , x+i ) ; // Equivalent to sum += x [ i ] sum += * ( x+i ) ; } printf ( \"Sum = %d\" , sum ) ; return 0 ; } When you run the program, the output will be: Enter 6 numbers: 2 3 4 4 12 4 Sum = 29 Here, we have declared an array x of 6 elements. To access elements of the array, we have used pointers. In most contexts, array names decay to pointers. In simple words, array names are converted to pointers. That's the reason why you can use pointers to access elements of arrays. However, you should remember that pointers and arrays are not the same . There are a few cases where array names don't decay to pointers. To learn more, visit: When does array name doesn't decay into a pointer?","title":"Relationship Between Arrays and Pointers"},{"location":"week-5-c/ce103-week-5-c/#example-2-arrays-and-pointers","text":"#include <stdio.h> int main () { int x [ 5 ] = { 1 , 2 , 3 , 4 , 5 }; int * ptr ; // ptr is assigned the address of the third element ptr = & x [ 2 ]; printf ( \"*ptr = %d \\n \" , * ptr ); // 3 printf ( \"*(ptr+1) = %d \\n \" , * ( ptr + 1 )); // 4 printf ( \"*(ptr-1) = %d\" , * ( ptr -1 )); // 2 return 0 ; } When you run the program, the output will be: *ptr = 3 * ( ptr+1 ) = 4 * ( ptr-1 ) = 2 In this example, &x[2] , the address of the third element, is assigned to the ptr pointer. Hence, 3 was displayed when we printed *ptr . And, printing *(ptr+1) gives us the fourth element. Similarly, printing *(ptr-1) gives us the second element.","title":"Example 2: Arrays and Pointers"},{"location":"week-5-c/ce103-week-5-c/#c-pass-addresses-and-pointers","text":"In this tutorial, you'll learn to pass addresses and pointers as arguments to functions with the help of examples. In C programming, it is also possible to pass addresses as arguments to functions. To accept these addresses in the function definition, we can use pointers. It's because pointers are used to store addresses. Let's take an example:","title":"C Pass Addresses and Pointers"},{"location":"week-5-c/ce103-week-5-c/#example-pass-addresses-to-functions","text":"#include <stdio.h> void swap ( int * n1 , int * n2 ); int main () { int num1 = 5 , num2 = 10 ; // address of num1 and num2 is passed swap ( & num1 , & num2 ); printf ( \"num1 = %d \\n \" , num1 ); printf ( \"num2 = %d\" , num2 ); return 0 ; } void swap ( int * n1 , int * n2 ) { int temp ; temp = * n1 ; * n1 = * n2 ; * n2 = temp ; } Run Code When you run the program, the output will be: num1 = 10 num2 = 5 The address of num1 and num2 are passed to the swap() function using swap(&num1, &num2); . Pointers n1 and n2 accept these arguments in the function definition. void swap ( int * n1 , int * n2 ) { ... .. } When *n1 and *n2 are changed inside the swap() function, num1 and num2 inside the main() function are also changed. Inside the swap() function, *n1 and *n2 swapped. Hence, num1 and num2 are also swapped. Notice that swap() is not returning anything; its return type is void .","title":"Example: Pass Addresses to Functions"},{"location":"week-5-c/ce103-week-5-c/#example-2-passing-pointers-to-functions","text":"#include <stdio.h> void addOne ( int * ptr ) { ( * ptr ) ++ ; // adding 1 to *ptr } int main () { int * p , i = 10 ; p = & i ; addOne ( p ); printf ( \"%d\" , * p ); // 11 return 0 ; } Run Code Here, the value stored at p, *p , is 10 initially. We then passed the pointer p to the addOne() function. The ptr pointer gets this address in the addOne() function. Inside the function, we increased the value stored at ptr by 1 using (*ptr)++; . Since ptr and p pointers both have the same address, *p inside main() is also 11.","title":"Example 2: Passing Pointers to Functions"},{"location":"week-5-c/ce103-week-5-c/#c-dynamic-memory-allocation","text":"In this tutorial, you'll learn to dynamically allocate memory in your C program using standard library functions: malloc(), calloc(), free() and realloc(). As you know, an array is a collection of a fixed number of values. Once the size of an array is declared, you cannot change it. Sometimes the size of the array you declared may be insufficient. To solve this issue, you can allocate memory manually during run-time. This is known as dynamic memory allocation in C programming. To allocate memory dynamically, library functions are malloc() , calloc() , realloc() and free() are used. These functions are defined in the <stdlib.h> header file.","title":"C Dynamic Memory Allocation"},{"location":"week-5-c/ce103-week-5-c/#c-malloc","text":"The name \"malloc\" stands for memory allocation. The malloc() function reserves a block of memory of the specified number of bytes. And, it returns a pointer of void which can be casted into pointers of any form.","title":"C malloc()"},{"location":"week-5-c/ce103-week-5-c/#syntax-of-malloc","text":"ptr = ( castType * ) malloc ( size ); Example ptr = ( float * ) malloc ( 100 * sizeof ( float )); The above statement allocates 400 bytes of memory. It's because the size of float is 4 bytes. And, the pointer ptr holds the address of the first byte in the allocated memory. The expression results in a NULL pointer if the memory cannot be allocated.","title":"Syntax of malloc()"},{"location":"week-5-c/ce103-week-5-c/#c-calloc","text":"The name \"calloc\" stands for contiguous allocation. The malloc() function allocates memory and leaves the memory uninitialized, whereas the calloc() function allocates memory and initializes all bits to zero.","title":"C calloc()"},{"location":"week-5-c/ce103-week-5-c/#syntax-of-calloc","text":"ptr = ( castType * ) calloc ( n , size ); Example: ptr = ( float * ) calloc ( 25 , sizeof ( float )); The above statement allocates contiguous space in memory for 25 elements of type float .","title":"Syntax of calloc()"},{"location":"week-5-c/ce103-week-5-c/#c-free","text":"Dynamically allocated memory created with either calloc() or malloc() doesn't get freed on their own. You must explicitly use free() to release the space.","title":"C free()"},{"location":"week-5-c/ce103-week-5-c/#syntax-of-free","text":"free ( ptr ); This statement frees the space allocated in the memory pointed by ptr .","title":"Syntax of free()"},{"location":"week-5-c/ce103-week-5-c/#example-1-malloc-and-free","text":"// Program to calculate the sum of n numbers entered by the user #include <stdio.h> #include <stdlib.h> int main () { int n , i , * ptr , sum = 0 ; printf ( \"Enter number of elements: \" ); scanf ( \"%d\" , & n ); ptr = ( int * ) malloc ( n * sizeof ( int )); // if memory cannot be allocated if ( ptr == NULL ) { printf ( \"Error! memory not allocated.\" ); exit ( 0 ); } printf ( \"Enter elements: \" ); for ( i = 0 ; i < n ; ++ i ) { scanf ( \"%d\" , ptr + i ); sum += * ( ptr + i ); } printf ( \"Sum = %d\" , sum ); // deallocating the memory free ( ptr ); return 0 ; } Run Code Output Enter number of elements: 3 Enter elements: 100 20 36 Sum = 156 Here, we have dynamically allocated the memory for n number of int .","title":"Example 1: malloc() and free()"},{"location":"week-5-c/ce103-week-5-c/#example-2-calloc-and-free","text":"// Program to calculate the sum of n numbers entered by the user #include <stdio.h> #include <stdlib.h> int main () { int n , i , * ptr , sum = 0 ; printf ( \"Enter number of elements: \" ); scanf ( \"%d\" , & n ); ptr = ( int * ) calloc ( n , sizeof ( int )); if ( ptr == NULL ) { printf ( \"Error! memory not allocated.\" ); exit ( 0 ); } printf ( \"Enter elements: \" ); for ( i = 0 ; i < n ; ++ i ) { scanf ( \"%d\" , ptr + i ); sum += * ( ptr + i ); } printf ( \"Sum = %d\" , sum ); free ( ptr ); return 0 ; } Run Code Output Enter number of elements: 3 Enter elements: 100 20 36 Sum = 156","title":"Example 2: calloc() and free()"},{"location":"week-5-c/ce103-week-5-c/#c-realloc","text":"If the dynamically allocated memory is insufficient or more than required, you can change the size of previously allocated memory using the realloc() function.","title":"C realloc()"},{"location":"week-5-c/ce103-week-5-c/#syntax-of-realloc","text":"ptr = realloc ( ptr , x ); Here, ptr is reallocated with a new size x.","title":"Syntax of realloc()"},{"location":"week-5-c/ce103-week-5-c/#example-3-realloc","text":"#include <stdio.h> #include <stdlib.h> int main () { int * ptr , i , n1 , n2 ; printf ( \"Enter size: \" ); scanf ( \"%d\" , & n1 ); ptr = ( int * ) malloc ( n1 * sizeof ( int )); printf ( \"Addresses of previously allocated memory: \\n \" ); for ( i = 0 ; i < n1 ; ++ i ) printf ( \"%pc \\n \" , ptr + i ); printf ( \" \\n Enter the new size: \" ); scanf ( \"%d\" , & n2 ); // rellocating the memory ptr = realloc ( ptr , n2 * sizeof ( int )); printf ( \"Addresses of newly allocated memory: \\n \" ); for ( i = 0 ; i < n2 ; ++ i ) printf ( \"%pc \\n \" , ptr + i ); free ( ptr ); return 0 ; } Run Code Output Enter size: 2 Addresses of previously allocated memory: 26855472 26855476 Enter the new size: 4 Addresses of newly allocated memory: 26855472 26855476 26855480 26855484 C Array and Pointer Examples","title":"Example 3: realloc()"},{"location":"week-5-c/ce103-week-5-c/#c-programming-strings","text":"In this tutorial, you'll learn about strings in C programming. You'll learn to declare them, initialize them and use them for various I/O operations with the help of examples. In C programming, a string is a sequence of characters terminated with a null character \\0 . For example: char c [] = \"c string\" ; When the compiler encounters a sequence of characters enclosed in the double quotation marks, it appends a null character \\0 at the end by default.","title":"C Programming Strings"},{"location":"week-5-c/ce103-week-5-c/#strings-in-memory-diagram","text":"","title":"Strings in memory diagram"},{"location":"week-5-c/ce103-week-5-c/#how-to-declare-a-string","text":"Here's how you can declare strings: char s [ 5 ]; String Declaration in C Here, we have declared a string of 5 characters.","title":"How to declare a string?"},{"location":"week-5-c/ce103-week-5-c/#how-to-initialize-strings","text":"You can initialize strings in a number of ways. char c [] = \"abcd\" ; char c [ 50 ] = \"abcd\" ; char c [] = { 'a' , 'b' , 'c' , 'd' , '\\0' }; char c [ 5 ] = { 'a' , 'b' , 'c' , 'd' , '\\0' }; String Initialization in C Let's take another example: char c [ 5 ] = \"abcde\" ; Here, we are trying to assign 6 characters (the last character is '\\0' ) to a char array having 5 characters. This is bad and you should never do this.","title":"How to initialize strings?"},{"location":"week-5-c/ce103-week-5-c/#assigning-values-to-strings","text":"Arrays and strings are second-class citizens in C; they do not support the assignment operator once it is declared. For example, char c [ 100 ]; c = \"C programming\" ; // Error! array type is not assignable. Note: Use the strcpy() function to copy the string instead.","title":"Assigning Values to Strings"},{"location":"week-5-c/ce103-week-5-c/#read-string-from-the-user","text":"You can use the scanf() function to read a string. The scanf() function reads the sequence of characters until it encounters whitespace (space, newline, tab, etc.).","title":"Read String from the user"},{"location":"week-5-c/ce103-week-5-c/#example-1-scanf-to-read-a-string","text":"#include <stdio.h> int main () { char name [ 20 ]; printf ( \"Enter name: \" ); scanf ( \"%s\" , name ); printf ( \"Your name is %s.\" , name ); return 0 ; } Output Enter name: Dennis Ritchie Your name is Dennis. Even though Dennis Ritchie was entered in the above program, only \"Dennis\" was stored in the name string. It's because there was a space after Dennis. Also notice that we have used the code name instead of &name with scanf() . scanf ( \"%s\" , name ); This is because name is a char array, and we know that array names decay to pointers in C. Thus, the name in scanf() already points to the address of the first element in the string, which is why we don't need to use & .","title":"Example 1: scanf() to read a string"},{"location":"week-5-c/ce103-week-5-c/#how-to-read-a-line-of-text","text":"You can use the fgets() function to read a line of string. And, you can use puts() to display the string.","title":"How to read a line of text?"},{"location":"week-5-c/ce103-week-5-c/#example-2-fgets-and-puts","text":"#include <stdio.h> int main () { char name [ 30 ]; printf ( \"Enter name: \" ); fgets ( name , sizeof ( name ), stdin ); // read string printf ( \"Name: \" ); puts ( name ); // display string return 0 ; } Output Enter name: Tom Hanks Name: Tom Hanks Here, we have used fgets() function to read a string from the user. fgets(name, sizeof(name), stdlin); // read string The sizeof(name) results to 30. Hence, we can take a maximum of 30 characters as input which is the size of the name string. To print the string, we have used puts(name); . Note: The gets() function can also be to take input from the user. However, it is removed from the C standard. It's because gets() allows you to input any length of characters. Hence, there might be a buffer overflow.","title":"Example 2: fgets() and puts()"},{"location":"week-5-c/ce103-week-5-c/#passing-strings-to-functions","text":"Strings can be passed to a function in a similar way as arrays. Learn more about passing arrays to a function .","title":"Passing Strings to Functions"},{"location":"week-5-c/ce103-week-5-c/#example-3-passing-string-to-a-function","text":"#include <stdio.h> void displayString ( char str []); int main () { char str [ 50 ]; printf ( \"Enter string: \" ); fgets ( str , sizeof ( str ), stdin ); displayString ( str ); // Passing string to a function. return 0 ; } void displayString ( char str []) { printf ( \"String Output: \" ); puts ( str ); }","title":"Example 3: Passing string to a Function"},{"location":"week-5-c/ce103-week-5-c/#strings-and-pointers","text":"Similar like arrays, string names are \"decayed\" to pointers. Hence, you can use pointers to manipulate elements of the string. We recommended you to check C Arrays and Pointers before you check this example.","title":"Strings and Pointers"},{"location":"week-5-c/ce103-week-5-c/#example-4-strings-and-pointers","text":"#include <stdio.h> int main ( void ) { char name [] = \"Harry Potter\" ; printf ( \"%c\" , * name ); // Output: H printf ( \"%c\" , * ( name + 1 )); // Output: a printf ( \"%c\" , * ( name + 7 )); // Output: o char * namePtr ; namePtr = name ; printf ( \"%c\" , * namePtr ); // Output: H printf ( \"%c\" , * ( namePtr + 1 )); // Output: a printf ( \"%c\" , * ( namePtr + 7 )); // Output: o }","title":"Example 4: Strings and Pointers"},{"location":"week-5-c/ce103-week-5-c/#commonly-used-string-functions","text":"strlen() - calculates the length of a string strcpy() - copies a string to another strcmp() - compares two strings strcat() - concatenates two strings","title":"Commonly Used String Functions"},{"location":"week-5-c/ce103-week-5-c/#string-manipulations-in-c-programming-using-library-functions","text":"In this article, you'll learn to manipulate strings in C using library functions such as gets(), puts, strlen() and more. You'll learn to get string from the user and perform operations on the string. You need to often manipulate strings according to the need of a problem. Most, if not all, of the time string manipulation can be done manually but, this makes programming complex and large. To solve this, C supports a large number of string handling functions in the standard library \"string.h\" . Few commonly used string handling functions are discussed below: Function Work of Function strlen() computes string's length strcpy() copies a string to another strcat() concatenates(joins) two strings strcmp() compares two strings strlwr() converts string to lowercase strupr() converts string to uppercase Strings handling functions are defined under \"string.h\" header file.","title":"String Manipulations In C Programming Using Library Functions"},{"location":"week-5-c/ce103-week-5-c/#include","text":"Note: You have to include the code below to run string handling functions.","title":"include "},{"location":"week-5-c/ce103-week-5-c/#gets-and-puts","text":"Functions gets() and puts() are two string functions to take string input from the user and display it respectively as mentioned in the previous chapter . #include <stdio.h> int main () { char name [ 30 ]; printf ( \"Enter name: \" ); gets ( name ); //Function to read string from user. printf ( \"Name: \" ); puts ( name ); //Function to display string. return 0 ; } Note: Though, gets() and puts() function handle strings, both these functions are defined in \"stdio.h\" header file. String Examples in C Programming","title":"gets() and puts()"},{"location":"week-5-c/ce103-week-5-c/#c-struct","text":"In this tutorial, you'll learn about struct types in C Programming with the help of examples. In C programming, a struct (or structure) is a collection of variables (can be of different types) under a single name.","title":"C struct"},{"location":"week-5-c/ce103-week-5-c/#define-structures","text":"Before you can create structure variables, you need to define its data type. To define a struct, the struct keyword is used.","title":"Define Structures"},{"location":"week-5-c/ce103-week-5-c/#syntax-of-struct","text":"struct structureName { dataType member1 ; dataType member2 ; ... }; For example, struct Person { char name [ 50 ]; int citNo ; float salary ; }; Here, a derived type struct Person is defined. Now, you can create variables of this type.","title":"Syntax of struct"},{"location":"week-5-c/ce103-week-5-c/#create-struct-variables","text":"When a struct type is declared, no storage or memory is allocated. To allocate memory of a given structure type and work with it, we need to create variables. Here's how we create structure variables: struct Person { // code }; int main () { struct Person person1 , person2 , p [ 20 ]; return 0 ; } Another way of creating a struct variable is: struct Person { // code } person1 , person2 , p [ 20 ]; In both cases, person1 and person2 are struct Person variables p[] is a struct Person array of size 20.","title":"Create struct Variables"},{"location":"week-5-c/ce103-week-5-c/#access-members-of-a-structure","text":"There are two types of operators used for accessing members of a structure. . - Member operator -> - Structure pointer operator (will be discussed in the next tutorial) Suppose, you want to access the salary of person2. Here's how you can do it. person2 . salary","title":"Access Members of a Structure"},{"location":"week-5-c/ce103-week-5-c/#example-1-c-structs","text":"#include <stdio.h> #include <string.h> // create struct with person1 variable struct Person { char name [ 50 ]; int citNo ; float salary ; } person1 ; int main () { // assign value to name of person1 strcpy ( person1 . name , \"George Orwell\" ); // assign values to other person1 variables person1 . citNo = 1984 ; person1 . salary = 2500 ; // print struct variables printf ( \"Name: %s \\n \" , person1 . name ); printf ( \"Citizenship No.: %d \\n \" , person1 . citNo ); printf ( \"Salary: %.2f\" , person1 . salary ); return 0 ; } Run Code Output Name: George Orwell Citizenship No.: 1984 Salary: 2500 .00 In this program, we have created a struct named Person . We have also created a variable of Person named person1. In main() , we have assigned values to the variables defined in Person for the person1 object. strcpy ( person1 . name , \"George Orwell\" ); person1 . citNo = 1984 ; person1 . salary = 2500 ; Notice that we have used strcpy() function to assign the value to person1.name. This is because name is a char array ( C-string ) and we cannot use the assignment operator = with it after we have declared the string. Finally, we printed the data of person1.","title":"Example 1: C structs"},{"location":"week-5-c/ce103-week-5-c/#keyword-typedef","text":"We use the typedef keyword to create an alias name for data types. It is commonly used with structures to simplify the syntax of declaring variables. For example, let us look at the following code: struct Distance { int feet ; float inch ; }; int main () { struct Distance d1 , d2 ; } We can use typedef to write an equivalent code with a simplified syntax: typedef struct Distance { int feet ; float inch ; } distances ; int main () { distances d1 , d2 ; }","title":"Keyword typedef"},{"location":"week-5-c/ce103-week-5-c/#example-2-c-typedef","text":"#include <stdio.h> #include <string.h> // struct with typedef person typedef struct Person { char name [ 50 ]; int citNo ; float salary ; } person ; int main () { // create Person variable person p1 ; // assign value to name of p1 strcpy ( p1 . name , \"George Orwell\" ); // assign values to other p1 variables p1 . citNo = 1984 ; p1 . salary = 2500 ; // print struct variables printf ( \"Name: %s \\n \" , p1 . name ); printf ( \"Citizenship No.: %d \\n \" , p1 . citNo ); printf ( \"Salary: %.2f\" , p1 . salary ); return 0 ; } Run Code Output Name: George Orwell Citizenship No.: 1984 Salary: 2500 .00 Here, we have used typedef with the Person structure to create an alias person . // struct with typedef person typedef struct Person { // code } person ; Now, we can simply declare a Person variable using the person alias: // equivalent to struct Person p1 person p1 ;","title":"Example 2: C typedef"},{"location":"week-5-c/ce103-week-5-c/#nested-structures","text":"You can create structures within a structure in C programming. For example, struct complex { int imag ; float real ; }; struct number { struct complex comp ; int integers ; } num1 , num2 ; Suppose, you want to set imag of num2 variable to 11 . Here's how you can do it: num2 . comp . imag = 11 ;","title":"Nested Structures"},{"location":"week-5-c/ce103-week-5-c/#example-3-c-nested-structures","text":"#include <stdio.h> struct complex { int imag ; float real ; }; struct number { struct complex comp ; int integer ; } num1 ; int main () { // initialize complex variables num1 . comp . imag = 11 ; num1 . comp . real = 5.25 ; // initialize number variable num1 . integer = 6 ; // print struct variables printf ( \"Imaginary Part: %d \\n \" , num1 . comp . imag ); printf ( \"Real Part: %.2f \\n \" , num1 . comp . real ); printf ( \"Integer: %d\" , num1 . integer ); return 0 ; } Run Code Output Imaginary Part: 11 Real Part: 5 .25 Integer: 6","title":"Example 3: C Nested Structures"},{"location":"week-5-c/ce103-week-5-c/#why-structs-in-c","text":"Suppose you want to store information about a person: his/her name, citizenship number, and salary. You can create different variables name, citNo and salary to store this information. What if you need to store information of more than one person? Now, you need to create different variables for each information per person: name1, citNo1, salary1, name2, citNo2, salary2, etc. A better approach would be to have a collection of all related information under a single name Person structure and use it for every person.","title":"Why structs in C?"},{"location":"week-5-c/ce103-week-5-c/#more-on-struct","text":"Structures and pointers Passing structures to a function","title":"More on struct"},{"location":"week-5-c/ce103-week-5-c/#c-structs-and-pointers","text":"In this tutorial, you'll learn to use pointers to access members of structs in C programming. You will also learn to dynamically allocate memory of struct types. Before you learn about how pointers can be used with structs, be sure to check these tutorials: C Pointers C struct","title":"C structs and Pointers"},{"location":"week-5-c/ce103-week-5-c/#c-pointers-to-struct","text":"Here's how you can create pointers to structs. struct name { member1 ; member2 ; . . }; int main () { struct name * ptr , Harry ; } Here, ptr is a pointer to struct .","title":"C Pointers to struct"},{"location":"week-5-c/ce103-week-5-c/#example-access-members-using-pointer","text":"To access members of a structure using pointers, we use the -> operator. #include <stdio.h> struct person { int age ; float weight ; }; int main () { struct person * personPtr , person1 ; personPtr = & person1 ; printf ( \"Enter age: \" ); scanf ( \"%d\" , & personPtr -> age ); printf ( \"Enter weight: \" ); scanf ( \"%f\" , & personPtr -> weight ); printf ( \"Displaying: \\n \" ); printf ( \"Age: %d \\n \" , personPtr -> age ); printf ( \"weight: %f\" , personPtr -> weight ); return 0 ; } Run Code In this example, the address of person1 is stored in the personPtr pointer using personPtr = &person1; . Now, you can access the members of person1 using the personPtr pointer. By the way, personPtr->age is equivalent to (*personPtr).age personPtr->weight is equivalent to (*personPtr).weight","title":"Example: Access members using Pointer"},{"location":"week-5-c/ce103-week-5-c/#dynamic-memory-allocation-of-structs","text":"Before you proceed this section, we recommend you to check C dynamic memory allocation . Sometimes, the number of struct variables you declared may be insufficient. You may need to allocate memory during run-time. Here's how you can achieve this in C programming.","title":"Dynamic memory allocation of structs"},{"location":"week-5-c/ce103-week-5-c/#example-dynamic-memory-allocation-of-structs","text":"#include <stdio.h> #include <stdlib.h> struct person { int age ; float weight ; char name [ 30 ]; }; int main () { struct person * ptr ; int i , n ; printf ( \"Enter the number of persons: \" ); scanf ( \"%d\" , & n ); // allocating memory for n numbers of struct person ptr = ( struct person * ) malloc ( n * sizeof ( struct person )); for ( i = 0 ; i < n ; ++ i ) { printf ( \"Enter first name and age respectively: \" ); // To access members of 1st struct person, // ptr->name and ptr->age is used // To access members of 2nd struct person, // (ptr+1)->name and (ptr+1)->age is used scanf ( \"%s %d\" , ( ptr + i ) -> name , & ( ptr + i ) -> age ); } printf ( \"Displaying Information: \\n \" ); for ( i = 0 ; i < n ; ++ i ) printf ( \"Name: %s \\t Age: %d \\n \" , ( ptr + i ) -> name , ( ptr + i ) -> age ); return 0 ; } Run Code When you run the program, the output will be: Enter the number of persons: 2 Enter first name and age respectively: Harry 24 Enter first name and age respectively: Gary 32 Displaying Information: Name: Harry Age: 24 Name: Gary Age: 32 In the above example, n number of struct variables are created where n is entered by the user. To allocate the memory for n number of struct person, we used, ptr = (struct person*) malloc(n * sizeof(struct person)); Then, we used the ptr pointer to access elements of person.","title":"Example: Dynamic memory allocation of structs"},{"location":"week-5-c/ce103-week-5-c/#c-structure-and-function","text":"In this tutorial, you'll learn to pass struct variables as arguments to a function. You will learn to return struct from a function with the help of examples. Similar to variables of built-in types, you can also pass structure variables to a function.","title":"C Structure and Function"},{"location":"week-5-c/ce103-week-5-c/#passing-structs-to-functions","text":"We recommended you to learn these tutorials before you learn how to pass structs to functions. C structures C functions User-defined Function Here's how you can pass structures to a function #include <stdio.h> struct student { char name [ 50 ]; int age ; }; // function prototype void display ( struct student s ); int main () { struct student s1 ; printf ( \"Enter name: \" ); // read string input from the user until \\n is entered // \\n is discarded scanf ( \"%[^ \\n ]%*c\" , s1 . name ); printf ( \"Enter age: \" ); scanf ( \"%d\" , & s1 . age ); display ( s1 ); // passing struct as an argument return 0 ; } void display ( struct student s ) { printf ( \" \\n Displaying information \\n \" ); printf ( \"Name: %s\" , s . name ); printf ( \" \\n Age: %d\" , s . age ); } Run Code Output Enter name: Bond Enter age: 13 Displaying information Name: Bond Age: 13 Here, a struct variable s1 of type struct student is created. The variable is passed to the display() function using display(s1); statement.","title":"Passing structs to functions"},{"location":"week-5-c/ce103-week-5-c/#return-struct-from-a-function","text":"Here's how you can return structure from a function: #include <stdio.h> struct student { char name [ 50 ]; int age ; }; // function prototype struct student getInformation (); int main () { struct student s ; s = getInformation (); printf ( \" \\n Displaying information \\n \" ); printf ( \"Name: %s\" , s . name ); printf ( \" \\n Roll: %d\" , s . age ); return 0 ; } struct student getInformation () { struct student s1 ; printf ( \"Enter name: \" ); scanf ( \"%[^ \\n ]%*c\" , s1 . name ); printf ( \"Enter age: \" ); scanf ( \"%d\" , & s1 . age ); return s1 ; } Run Code Here, the getInformation() function is called using s = getInformation(); statement. The function returns a structure of type struct student . The returned structure is displayed from the main() function. Notice that, the return type of getInformation() is also struct student .","title":"Return struct from a function"},{"location":"week-5-c/ce103-week-5-c/#passing-struct-by-reference","text":"You can also pass structs by reference (in a similar way like you pass variables of built-in type by reference). We suggest you to read pass by reference tutorial before you proceed. During pass by reference, the memory addresses of struct variables are passed to the function. #include <stdio.h> typedef struct Complex { float real ; float imag ; } complex ; void addNumbers ( complex c1 , complex c2 , complex * result ); int main () { complex c1 , c2 , result ; printf ( \"For first number, \\n \" ); printf ( \"Enter real part: \" ); scanf ( \"%f\" , & c1 . real ); printf ( \"Enter imaginary part: \" ); scanf ( \"%f\" , & c1 . imag ); printf ( \"For second number, \\n \" ); printf ( \"Enter real part: \" ); scanf ( \"%f\" , & c2 . real ); printf ( \"Enter imaginary part: \" ); scanf ( \"%f\" , & c2 . imag ); addNumbers ( c1 , c2 , & result ); printf ( \" \\n result.real = %.1f \\n \" , result . real ); printf ( \"result.imag = %.1f\" , result . imag ); return 0 ; } void addNumbers ( complex c1 , complex c2 , complex * result ) { result -> real = c1 . real + c2 . real ; result -> imag = c1 . imag + c2 . imag ; } Run Code Output For first number, Enter real part: 1 .1 Enter imaginary part: -2.4 For second number, Enter real part: 3 .4 Enter imaginary part: -3.2 result.real = 4 .5 result.imag = -5.6 In the above program, three structure variables c1, c2 and the address of result is passed to the addNumbers() function. Here, result is passed by reference. When the result variable inside the addNumbers() is altered, the result variable inside the main() function is also altered accordingly.","title":"Passing struct by reference"},{"location":"week-5-c/ce103-week-5-c/#c-unions","text":"In this tutorial, you'll learn about unions in C programming. More specifically, how to create unions, access its members and learn the differences between unions and structures. A union is a user-defined type similar to structs in C except for one key difference. Structures allocate enough space to store all their members, whereas unions can only hold one member value at a time .","title":"C Unions"},{"location":"week-5-c/ce103-week-5-c/#how-to-define-a-union","text":"We use the union keyword to define unions. Here's an example: union car { char name [ 50 ]; int price ; }; The above code defines a derived type union car .","title":"How to define a union?"},{"location":"week-5-c/ce103-week-5-c/#create-union-variables","text":"When a union is defined, it creates a user-defined type. However, no memory is allocated. To allocate memory for a given union type and work with it, we need to create variables. Here's how we create union variables. union car { char name [ 50 ]; int price ; }; int main () { union car car1 , car2 , * car3 ; return 0 ; } Another way of creating union variables is: union car { char name [ 50 ]; int price ; } car1 , car2 , * car3 ; In both cases, union variables car1, car2, and a union pointer car3 of union car type are created.","title":"Create union variables"},{"location":"week-5-c/ce103-week-5-c/#access-members-of-a-union","text":"We use the . operator to access members of a union. And to access pointer variables, we use the -> operator. In the above example, To access price for car1 , car1.price is used. To access price using car3 , either (*car3).price or car3->price can be used.","title":"Access members of a union"},{"location":"week-5-c/ce103-week-5-c/#difference-between-unions-and-structures","text":"Let's take an example to demonstrate the difference between unions and structures: #include <stdio.h> union unionJob { //defining a union char name [ 32 ]; float salary ; int workerNo ; } uJob ; struct structJob { char name [ 32 ]; float salary ; int workerNo ; } sJob ; int main () { printf ( \"size of union = %d bytes\" , sizeof ( uJob )); printf ( \" \\n size of structure = %d bytes\" , sizeof ( sJob )); return 0 ; } Output size of union = 32 size of structure = 40 Why this difference in the size of union and structure variables? Here, the size of sJob is 40 bytes because the size of name[32] is 32 bytes the size of salary is 4 bytes the size of workerNo is 4 bytes However, the size of uJob is 32 bytes. It's because the size of a union variable will always be the size of its largest element. In the above example, the size of its largest element, ( name[32] ), is 32 bytes. With a union, all members share the same memory .","title":"Difference between unions and structures"},{"location":"week-5-c/ce103-week-5-c/#example-accessing-union-members","text":"#include <stdio.h> union Job { float salary ; int workerNo ; } j ; int main () { j . salary = 12.3 ; // when j.workerNo is assigned a value, // j.salary will no longer hold 12.3 j . workerNo = 100 ; printf ( \"Salary = %.1f \\n \" , j . salary ); printf ( \"Number of workers = %d\" , j . workerNo ); return 0 ; } Output Salary = 0 .0 Number of workers = 100 To learn where unions are used, visit Why do we need C Unions? C Struct Examples","title":"Example: Accessing Union Members"},{"location":"week-5-c/ce103-week-5-c/#c-file-handling","text":"In this tutorial, you will learn about file handling in C. You will learn to handle standard I/O in C using fprintf(), fscanf(), fread(), fwrite(), fseek() etc. with the help of examples. A file is a container in computer storage devices used for storing data.","title":"C File Handling"},{"location":"week-5-c/ce103-week-5-c/#why-files-are-needed","text":"When a program is terminated, the entire data is lost. Storing in a file will preserve your data even if the program terminates. If you have to enter a large number of data, it will take a lot of time to enter them all. However, if you have a file containing all the data, you can easily access the contents of the file using a few commands in C. You can easily move your data from one computer to another without any changes.","title":"Why files are needed?"},{"location":"week-5-c/ce103-week-5-c/#types-of-files","text":"When dealing with files, there are two types of files you should know about: Text files Binary files","title":"Types of Files"},{"location":"week-5-c/ce103-week-5-c/#1-text-files","text":"Text files are the normal .txt files. You can easily create text files using any simple text editors such as Notepad. When you open those files, you'll see all the contents within the file as plain text. You can easily edit or delete the contents. They take minimum effort to maintain, are easily readable, and provide the least security and takes bigger storage space.","title":"1. Text files"},{"location":"week-5-c/ce103-week-5-c/#2-binary-files","text":"Binary files are mostly the .bin files in your computer. Instead of storing data in plain text, they store it in the binary form (0's and 1's). They can hold a higher amount of data, are not readable easily, and provides better security than text files.","title":"2. Binary files"},{"location":"week-5-c/ce103-week-5-c/#file-operations","text":"In C, you can perform four major operations on files, either text or binary: Creating a new file Opening an existing file Closing a file Reading from and writing information to a file","title":"File Operations"},{"location":"week-5-c/ce103-week-5-c/#working-with-files","text":"When working with files, you need to declare a pointer of type file. This declaration is needed for communication between the file and the program. FILE * fptr ;","title":"Working with files"},{"location":"week-5-c/ce103-week-5-c/#opening-a-file-for-creation-and-edit","text":"Opening a file is performed using the fopen() function defined in the stdio.h header file. The syntax for opening a file in standard I/O is: ptr = fopen ( \"fileopen\" , \"mode\" ); For example, fopen ( \"E: \\\\ cprogram \\\\ newprogram.txt\" , \"w\" ); fopen ( \"E: \\\\ cprogram \\\\ oldprogram.bin\" , \"rb\" ); Let's suppose the file newprogram.txt doesn't exist in the location E:\\cprogram . The first function creates a new file named newprogram.txt and opens it for writing as per the mode 'w' . The writing mode allows you to create and edit (overwrite) the contents of the file. Now let's suppose the second binary file oldprogram.bin exists in the location E:\\cprogram . The second function opens the existing file for reading in binary mode 'rb' . The reading mode only allows you to read the file, you cannot write into the file. Opening Modes in Standard I/O Mode Meaning of Mode During Inexistence of file r Open for reading. If the file does not exist, fopen() returns NULL. rb Open for reading in binary mode. If the file does not exist, fopen() returns NULL. w Open for writing. If the file exists, its contents are overwritten. If the file does not exist, it will be created. Opening Modes in Standard I/O Mode Meaning of Mode During Inexistence of file wb Open for writing in binary mode. If the file exists, its contents are overwritten. If the file does not exist, it will be created. a Open for append. Data is added to the end of the file. If the file does not exist, it will be created. ab Open for append in binary mode. Data is added to the end of the file. If the file does not exist, it will be created. Opening Modes in Standard I/O Mode Meaning of Mode During Inexistence of file r+ Open for both reading and writing. If the file does not exist, fopen() returns NULL. rb+ Open for both reading and writing in binary mode. If the file does not exist, fopen() returns NULL. w+ Open for both reading and writing. If the file exists, its contents are overwritten. If the file does not exist, it will be created. Opening Modes in Standard I/O Mode Meaning of Mode During Inexistence of file wb+ Open for both reading and writing in binary mode. If the file exists, its contents are overwritten. If the file does not exist, it will be created. a+ Open for both reading and appending. If the file does not exist, it will be created. ab+ Open for both reading and appending in binary mode. If the file does not exist, it will be created.","title":"Opening a file - for creation and edit"},{"location":"week-5-c/ce103-week-5-c/#closing-a-file","text":"The file (both text and binary) should be closed after reading/writing. Closing a file is performed using the fclose() function. fclose ( fptr ); Here, fptr is a file pointer associated with the file to be closed.","title":"Closing a File"},{"location":"week-5-c/ce103-week-5-c/#reading-and-writing-to-a-text-file","text":"For reading and writing to a text file, we use the functions fprintf() and fscanf(). They are just the file versions of printf() and scanf() . The only difference is that fprintf() and fscanf() expects a pointer to the structure FILE.","title":"Reading and writing to a text file"},{"location":"week-5-c/ce103-week-5-c/#example-1-write-to-a-text-file","text":"#include <stdio.h> #include <stdlib.h> int main () { int num ; FILE * fptr ; // use appropriate location if you are using MacOS or Linux fptr = fopen ( \"C: \\\\ program.txt\" , \"w\" ); if ( fptr == NULL ) { printf ( \"Error!\" ); exit ( 1 ); } printf ( \"Enter num: \" ); scanf ( \"%d\" , & num ); fprintf ( fptr , \"%d\" , num ); fclose ( fptr ); return 0 ; } This program takes a number from the user and stores in the file program.txt . After you compile and run this program, you can see a text file program.txt created in C drive of your computer. When you open the file, you can see the integer you entered.","title":"Example 1: Write to a text file"},{"location":"week-5-c/ce103-week-5-c/#example-2-read-from-a-text-file","text":"#include <stdio.h> #include <stdlib.h> int main () { int num ; FILE * fptr ; if (( fptr = fopen ( \"C: \\\\ program.txt\" , \"r\" )) == NULL ){ printf ( \"Error! opening file\" ); // Program exits if the file pointer returns NULL. exit ( 1 ); } fscanf ( fptr , \"%d\" , & num ); printf ( \"Value of n=%d\" , num ); fclose ( fptr ); return 0 ; } This program reads the integer present in the program.txt file and prints it onto the screen. If you successfully created the file from Example 1 , running this program will get you the integer you entered. Other functions like fgetchar() , fputc() etc. can be used in a similar way.","title":"Example 2: Read from a text file"},{"location":"week-5-c/ce103-week-5-c/#reading-and-writing-to-a-binary-file","text":"Functions fread() and fwrite() are used for reading from and writing to a file on the disk respectively in case of binary files.","title":"Reading and writing to a binary file"},{"location":"week-5-c/ce103-week-5-c/#writing-to-a-binary-file","text":"To write into a binary file, you need to use the fwrite() function. The functions take four arguments: address of data to be written in the disk size of data to be written in the disk number of such type of data pointer to the file where you want to write. fwrite ( addressData , sizeData , numbersData , pointerToFile );","title":"Writing to a binary file"},{"location":"week-5-c/ce103-week-5-c/#example-3-write-to-a-binary-file-using-fwrite","text":"#include <stdio.h> #include <stdlib.h> struct threeNum { int n1 , n2 , n3 ; }; int main () { int n ; struct threeNum num ; FILE * fptr ; if (( fptr = fopen ( \"C: \\\\ program.bin\" , \"wb\" )) == NULL ){ printf ( \"Error! opening file\" ); // Program exits if the file pointer returns NULL. exit ( 1 ); } for ( n = 1 ; n < 5 ; ++ n ) { num . n1 = n ; num . n2 = 5 * n ; num . n3 = 5 * n + 1 ; fwrite ( & num , sizeof ( struct threeNum ), 1 , fptr ); } fclose ( fptr ); return 0 ; } In this program, we create a new file program.bin in the C drive. We declare a structure threeNum with three numbers - n1, n2 and n3, and define it in the main function as num. Now, inside the for loop, we store the value into the file using fwrite() . The first parameter takes the address of num and the second parameter takes the size of the structure threeNum . Since we're only inserting one instance of num, the third parameter is 1 . And, the last parameter *fptr points to the file we're storing the data. Finally, we close the file.","title":"Example 3: Write to a binary file using fwrite()"},{"location":"week-5-c/ce103-week-5-c/#reading-from-a-binary-file","text":"Function fread() also take 4 arguments similar to the fwrite() function as above. fread ( addressData , sizeData , numbersData , pointerToFile );","title":"Reading from a binary file"},{"location":"week-5-c/ce103-week-5-c/#example-4-read-from-a-binary-file-using-fread","text":"#include <stdio.h> #include <stdlib.h> struct threeNum { int n1 , n2 , n3 ; }; int main () { int n ; struct threeNum num ; FILE * fptr ; if (( fptr = fopen ( \"C: \\\\ program.bin\" , \"rb\" )) == NULL ){ printf ( \"Error! opening file\" ); // Program exits if the file pointer returns NULL. exit ( 1 ); } for ( n = 1 ; n < 5 ; ++ n ) { fread ( & num , sizeof ( struct threeNum ), 1 , fptr ); printf ( \"n1: %d \\t n2: %d \\t n3: %d \\n \" , num . n1 , num . n2 , num . n3 ); } fclose ( fptr ); return 0 ; } In this program, you read the same file program.bin and loop through the records one by one. In simple terms, you read one threeNum record of threeNum size from the file pointed by *fptr into the structure num. You'll get the same records you inserted in Example 3 .","title":"Example 4: Read from a binary file using fread()"},{"location":"week-5-c/ce103-week-5-c/#getting-data-using-fseek","text":"If you have many records inside a file and need to access a record at a specific position, you need to loop through all the records before it to get the record. This will waste a lot of memory and operation time. An easier way to get to the required data can be achieved using fseek() . As the name suggests, fseek() seeks the cursor to the given record in the file.","title":"Getting data using fseek()"},{"location":"week-5-c/ce103-week-5-c/#syntax-of-fseek","text":"fseek ( FILE * stream , long int offset , int whence ); The first parameter stream is the pointer to the file. The second parameter is the position of the record to be found, and the third parameter specifies the location where the offset starts. Different whence in fseek() Whence Meaning SEEK_SET Starts the offset from the beginning of the file. SEEK_END Starts the offset from the end of the file. SEEK_CUR Starts the offset from the current location of the cursor in the file.","title":"Syntax of fseek()"},{"location":"week-5-c/ce103-week-5-c/#example-5-fseek","text":"#include <stdio.h> #include <stdlib.h> struct threeNum { int n1 , n2 , n3 ; }; int main () { int n ; struct threeNum num ; FILE * fptr ; if (( fptr = fopen ( \"C: \\\\ program.bin\" , \"rb\" )) == NULL ){ printf ( \"Error! opening file\" ); // Program exits if the file pointer returns NULL. exit ( 1 ); } // Moves the cursor to the end of the file fseek ( fptr , - sizeof ( struct threeNum ), SEEK_END ); for ( n = 1 ; n < 5 ; ++ n ) { fread ( & num , sizeof ( struct threeNum ), 1 , fptr ); printf ( \"n1: %d \\t n2: %d \\t n3: %d \\n \" , num . n1 , num . n2 , num . n3 ); fseek ( fptr , -2 * sizeof ( struct threeNum ), SEEK_CUR ); } fclose ( fptr ); return 0 ; } This program will start reading the records from the file program.bin in the reverse order (last to first) and prints it.","title":"Example 5: fseek()"},{"location":"week-5-c/ce103-week-5-c/#c-files-examples","text":"In this article, you'll find a list of examples to handle file input/output operations in C programming. To understand all programs on this page, you should have the knowledge of the following topics. C Arrays C Pointers Array and Pointer Relation File I/O","title":"C Files Examples"},{"location":"week-5-c/ce103-week-5-c/#c-file-examples","text":"1. C program to read name and marks of n number of students and store them in a file. #include <stdio.h> int main () { char name [ 50 ]; int marks , i , num ; printf ( \"Enter number of students: \" ); scanf ( \"%d\" , & num ); FILE * fptr ; fptr = ( fopen ( \"C: \\\\ student.txt\" , \"w\" )); if ( fptr == NULL ) { printf ( \"Error!\" ); exit ( 1 ); } for ( i = 0 ; i < num ; ++ i ) { printf ( \"For student%d \\n Enter name: \" , i + 1 ); scanf ( \"%s\" , name ); printf ( \"Enter marks: \" ); scanf ( \"%d\" , & marks ); fprintf ( fptr , \" \\n Name: %s \\n Marks=%d \\n \" , name , marks ); } fclose ( fptr ); return 0 ; } 2. C program to read name and marks of n number of students from and store them in a file. If the file previously exits, add the information to the file. #include <stdio.h> int main () { char name [ 50 ]; int marks , i , num ; printf ( \"Enter number of students: \" ); scanf ( \"%d\" , & num ); FILE * fptr ; fptr = ( fopen ( \"C: \\\\ student.txt\" , \"a\" )); if ( fptr == NULL ) { printf ( \"Error!\" ); exit ( 1 ); } for ( i = 0 ; i < num ; ++ i ) { printf ( \"For student%d \\n Enter name: \" , i + 1 ); scanf ( \"%s\" , name ); printf ( \"Enter marks: \" ); scanf ( \"%d\" , & marks ); fprintf ( fptr , \" \\n Name: %s \\n Marks=%d \\n \" , name , marks ); } fclose ( fptr ); return 0 ; } 3. C program to write all the members of an array of structures to a file using fwrite(). Read the array from the file and display on the screen. #include <stdio.h> struct student { char name [ 50 ]; int height ; }; int main (){ struct student stud1 [ 5 ], stud2 [ 5 ]; FILE * fptr ; int i ; fptr = fopen ( \"file.txt\" , \"wb\" ); for ( i = 0 ; i < 5 ; ++ i ) { fflush ( stdin ); printf ( \"Enter name: \" ); gets ( stud1 [ i ]. name ); printf ( \"Enter height: \" ); scanf ( \"%d\" , & stud1 [ i ]. height ); } fwrite ( stud1 , sizeof ( stud1 ), 1 , fptr ); fclose ( fptr ); fptr = fopen ( \"file.txt\" , \"rb\" ); fread ( stud2 , sizeof ( stud2 ), 1 , fptr ); for ( i = 0 ; i < 5 ; ++ i ) { printf ( \"Name: %s \\n Height: %d\" , stud2 [ i ]. name , stud2 [ i ]. height ); } fclose ( fptr ); }","title":"C File Examples"},{"location":"week-5-c/ce103-week-5-c/#c-enums","text":"In this tutorial, you will learn about enum (enumeration) in C programming with the help of examples. In C programming, an enumeration type (also called enum) is a data type that consists of integral constants. To define enums, the enum keyword is used. enum flag { const1 , const2 , ..., constN }; By default, const1 is 0, const2 is 1 and so on. You can change default values of enum elements during declaration (if necessary). // Changing default values of enum constants enum suit { club = 0 , diamonds = 10 , hearts = 20 , spades = 3 , };","title":"C enums"},{"location":"week-5-c/ce103-week-5-c/#enumerated-type-declaration","text":"When you define an enum type, the blueprint for the variable is created. Here's how you can create variables of enum types. enum boolean {false, true}; enum boolean check; // declaring an enum variable Here, a variable check of the type enum boolean is created. You can also declare enum variables like this. enum boolean {false, true} check; Here, the value of false is equal to 0 and the value of true is equal to 1.","title":"Enumerated Type Declaration"},{"location":"week-5-c/ce103-week-5-c/#example-enumeration-type","text":"#include <stdio.h> enum week { Sunday , Monday , Tuesday , Wednesday , Thursday , Friday , Saturday }; int main () { // creating today variable of enum week type enum week today ; today = Wednesday ; printf ( \"Day %d\" , today + 1 ); return 0 ; } Output Day 4","title":"Example: Enumeration Type"},{"location":"week-5-c/ce103-week-5-c/#why-enums-are-used","text":"An enum variable can take only one value. Here is an example to demonstrate it, #include <stdio.h> enum suit { club = 0 , diamonds = 10 , hearts = 20 , spades = 3 } card ; int main () { card = club ; printf ( \"Size of enum variable = %d bytes\" , sizeof ( card )); return 0 ; } Output Size of enum variable = 4 bytes Here, we are getting 4 because the size of int is 4 bytes. This makes enum a good choice to work with flags.","title":"Why enums are used?"},{"location":"week-5-c/ce103-week-5-c/#how-to-use-enums-for-flags","text":"Let us take an example, enum designFlags { ITALICS = 1 , BOLD = 2 , UNDERLINE = 4 } button ; Suppose you are designing a button for Windows application. You can set flags ITALICS , BOLD and UNDERLINE to work with text. There is a reason why all the integral constants are a power of 2 in the above pseudocode. // In binary ITALICS = 00000001 BOLD = 00000010 UNDERLINE = 00000100 Since the integral constants are a power of 2, you can combine two or more flags at once without overlapping using bitwise OR | operator . This allows you to choose two or more flags at once. For example, #include <stdio.h> enum designFlags { BOLD = 1 , ITALICS = 2 , UNDERLINE = 4 }; int main () { int myDesign = BOLD | UNDERLINE ; // 00000001 // | 00000100 // ___________ // 00000101 printf ( \"%d\" , myDesign ); return 0 ; } Output 5 When the output is 5, you always know that bold and underline is used. Also, you can add flags according to your requirements. if ( myDesign & ITALICS ) { // code for italics } Here, we have added italics to our design. Note, only code for italics is written inside the if statement. You can accomplish almost anything in C programming without using enumerations. However, they can be pretty handy in certain situations.","title":"How to use enums for flags?"},{"location":"week-5-c/ce103-week-5-c/#c-preprocessor-and-macros","text":"In this tutorial, you will be introduced to c preprocessors, and you will learn to use #include, #define and conditional compilation with the help of examples. C Preprocessor Working of C Preprocessor The C preprocessor is a macro preprocessor (allows you to define macros) that transforms your program before it is compiled. These transformations can be the inclusion of header files, macro expansions, etc. All preprocessing directives begin with a # symbol. For example, #define PI 3.14 Some of the common uses of C preprocessors are:","title":"C Preprocessor and Macros"},{"location":"week-5-c/ce103-week-5-c/#including-header-files-include","text":"The #include preprocessor is used to include header files to C programs. For example, #include <stdio.h> Here, stdio.h is a header file. The #include preprocessor directive replaces the above line with the contents of stdio.h header file. That's the reason why you need to use #include <stdio.h> before you can use functions like scanf() and printf() . You can also create your own header file containing function declaration and include it in your program using this preprocessor directive. #include \"my_header.h\" Visit this page to learn more about using header files .","title":"Including Header Files: #include"},{"location":"week-5-c/ce103-week-5-c/#macros-using-define","text":"A macro is a fragment of code that is given a name. You can define a macro in C using the #define preprocessor directive. Here's an example. #define c 299792458 // speed of light Here, when we use c in our program, it is replaced with 299792458 .","title":"Macros using #define"},{"location":"week-5-c/ce103-week-5-c/#example-1-define-preprocessor","text":"#include <stdio.h> #define PI 3.1415 int main () { float radius , area ; printf ( \"Enter the radius: \" ); scanf ( \"%f\" , & radius ); // Notice, the use of PI area = PI * radius * radius ; printf ( \"Area=%.2f\" , area ); return 0 ; }","title":"Example 1: #define preprocessor"},{"location":"week-5-c/ce103-week-5-c/#function-like-macros","text":"You can also define macros that work in a similar way as a function call. This is known as function-like macros. For example, #define circleArea(r) (3.1415*(r)*(r)) Every time the program encounters circleArea(argument) , it is replaced by (3.1415*(argument)*(argument)) . Suppose, we passed 5 as an argument then, it expands as below: circleArea ( 5 ) expands to ( 3.1415 * 5 * 5 )","title":"Function like Macros"},{"location":"week-5-c/ce103-week-5-c/#example-2-using-define-preprocessor","text":"#include <stdio.h> #define PI 3.1415 #define circleArea(r) (PI*r*r) int main () { float radius , area ; printf ( \"Enter the radius: \" ); scanf ( \"%f\" , & radius ); area = circleArea ( radius ); printf ( \"Area = %.2f\" , area ); return 0 ; } Visit this page to learn more about macros and #define preprocessor .","title":"Example 2: Using #define preprocessor"},{"location":"week-5-c/ce103-week-5-c/#conditional-compilation","text":"In C programming, you can instruct the preprocessor whether to include a block of code or not. To do so, conditional directives can be used. It's similar to a if statement with one major difference. The if statement is tested during the execution time to check whether a block of code should be executed or not whereas, the conditionals are used to include (or skip) a block of code in your program before execution.","title":"Conditional Compilation"},{"location":"week-5-c/ce103-week-5-c/#uses-of-conditional","text":"use different code depending on the machine, operating system compile the same source file in two different programs to exclude certain code from the program but to keep it as a reference for future purposes","title":"Uses of Conditional"},{"location":"week-5-c/ce103-week-5-c/#how-to-use-conditional","text":"To use conditional, #ifdef , #if , #defined , #else and #elif directives are used.","title":"How to use conditional?"},{"location":"week-5-c/ce103-week-5-c/#ifdef-directive","text":"#ifdef MACRO // conditional codes #endif Here, the conditional codes are included in the program only if MACRO is defined.","title":"#ifdef Directive"},{"location":"week-5-c/ce103-week-5-c/#if-elif-and-else-directive","text":"#if expression // conditional codes #endif Here, expression is an expression of integer type (can be integers, characters, arithmetic expression, macros, and so on). The conditional codes are included in the program only if the expression is evaluated to a non-zero value. The optional #else directive can be used with #if directive. #if expression conditional codes if expression is non - zero #else conditional if expression is 0 #endif You can also add nested conditional to your #if...#else using #elif #if expression // conditional codes if expression is non-zero #elif expression1 // conditional codes if expression is non-zero #elif expression2 // conditional codes if expression is non-zero #else // conditional if all expressions are 0 #endif","title":"#if, #elif and #else Directive"},{"location":"week-5-c/ce103-week-5-c/#defined","text":"The special operator #defined is used to test whether a certain macro is defined or not. It's often used with #if directive. #if defined BUFFER_SIZE && BUFFER_SIZE >= 2048 // codes","title":"#defined"},{"location":"week-5-c/ce103-week-5-c/#predefined-macros","text":"Here are some predefined macros in C programming. Macro Value __DATE__ A string containing the current date. __FILE__ A string containing the file name. __LINE__ An integer representing the current line number. __STDC__ If follows ANSI standard C, then the value is a nonzero integer. __TIME__ A string containing the current time.","title":"Predefined Macros"},{"location":"week-5-c/ce103-week-5-c/#example-3-get-current-time-using-time","text":"The following program outputs the current time using __TIME__ macro. #include <stdio.h> int main () { printf ( \"Current time: %s\" , __TIME__ ); } Output Current time: 19 :54:39","title":"Example 3: Get current time using TIME"},{"location":"week-5-c/ce103-week-5-c/#recommended-readings","text":"Line control Pragmas Preprocessor Output Other directives","title":"Recommended Readings"},{"location":"week-5-c/ce103-week-5-c/#c-standard-library-functions","text":"In this tutorial, you'll learn about the standard library functions in C. More specifically, what are they, different library functions in C and how to use them in your program. C Standard library functions or simply C Library functions are inbuilt functions in C programming. The prototype and data definitions of these functions are present in their respective header files. To use these functions we need to include the header file in our program. For example, If you want to use the printf() function, the header file <stdio.h> should be included. #include <stdio.h> int main () { printf ( \"Catch me if you can.\" ); } Run Code If you try to use printf() without including the stdio.h header file, you will get an error.","title":"C Standard Library Functions"},{"location":"week-5-c/ce103-week-5-c/#advantages-of-using-c-library-functions","text":"1. They work One of the most important reasons you should use library functions is simply because they work. These functions have gone through multiple rigorous testing and are easy to use. 2. The functions are optimized for performance Since, the functions are \"standard library\" functions, a dedicated group of developers constantly make them better. In the process, they are able to create the most efficient code optimized for maximum performance. 3. It saves considerable development time Since the general functions like printing to a screen, calculating the square root, and many more are already written. You shouldn't worry about creating them once again. 4. The functions are portable With ever-changing real-world needs, your application is expected to work every time, everywhere. And, these library functions help you in that they do the same thing on every computer.","title":"Advantages of Using C library functions"},{"location":"week-5-c/ce103-week-5-c/#example-square-root-using-sqrt-function","text":"Suppose, you want to find the square root of a number. To compute the square root of a number, you can use the sqrt() library function. The function is defined in the math.h header file. #include <stdio.h> #include <math.h> int main () { float num , root ; printf ( \"Enter a number: \" ); scanf ( \"%f\" , & num ); // Computes the square root of num and stores in root. root = sqrt ( num ); printf ( \"Square root of %.2f = %.2f\" , num , root ); return 0 ; } Run Code When you run the program, the output will be: Enter a number: 12 Square root of 12 .00 = 3 .46","title":"Example: Square root using sqrt() function"},{"location":"week-5-c/ce103-week-5-c/#library-functions-in-different-header-files","text":"C Header Files Description Program assertion functions Character type functions Localization functions Mathematics functions Jump functions","title":"Library Functions in Different Header Files"},{"location":"week-5-c/ce103-week-5-c/#library-functions-in-different-header-files_1","text":"C Header Files Description Signal handling functions Variable arguments handling functions Standard Input/Output functions Standard Utility functions String handling functions Date time functions C Examples | Programiz","title":"Library Functions in Different Header Files"},{"location":"week-5-c/ce103-week-5-c/#references","text":"Learn C Programming \\[ End-Of-Week-5 \\]","title":"References"},{"location":"week-5-c/sources/console-snake-game/","text":"Console Snake Game \u00b6 Description \u00b6 A console snake game that can (or should) work in linux & windows environments. This was created in my first year at Murdoch University, Perth Western Australia. Compiling \u00b6 Linux \u00b6 wget https://raw.githubusercontent.com/Contagious06/console-snake-game/master/src/snake.c gcc snake.c \u2013lm \u2013o snake.out chmod +x snake.out ./snake.out Windows \u00b6 Download https://raw.githubusercontent.com/Contagious06/console-snake-game/master/src/snake.c bcc32 snake.c snake.exe Demo \u00b6","title":"Console Snake Game"},{"location":"week-5-c/sources/console-snake-game/#console-snake-game","text":"","title":"Console Snake Game"},{"location":"week-5-c/sources/console-snake-game/#description","text":"A console snake game that can (or should) work in linux & windows environments. This was created in my first year at Murdoch University, Perth Western Australia.","title":"Description"},{"location":"week-5-c/sources/console-snake-game/#compiling","text":"","title":"Compiling"},{"location":"week-5-c/sources/console-snake-game/#linux","text":"wget https://raw.githubusercontent.com/Contagious06/console-snake-game/master/src/snake.c gcc snake.c \u2013lm \u2013o snake.out chmod +x snake.out ./snake.out","title":"Linux"},{"location":"week-5-c/sources/console-snake-game/#windows","text":"Download https://raw.githubusercontent.com/Contagious06/console-snake-game/master/src/snake.c bcc32 snake.c snake.exe","title":"Windows"},{"location":"week-5-c/sources/console-snake-game/#demo","text":"","title":"Demo"},{"location":"week-6-cpp/ce103-week-6-cpp/","text":"CE103 Algorithms and Programming I \u00b6 Week-6 \u00b6 C++ Functional Console Programming \u00b6 Download DOC , SLIDE , PPTX C++ Functional Console Programming \u00b6 Books and Resources \u00b6 free-programming-books/free-programming-books-langs.md at master \u00b7 EbookFoundation/free-programming-books \u00b7 GitHub C++ Functional Console Programming \u00b6 C++ Introduction \u00b6 C++ Variables, Literals and Constants \u00b6 In this tutorial, we will learn about variables, literals, and constants in C++ with the help of examples. C++ Variables \u00b6 In programming, a variable is a container (storage area) to hold data. To indicate the storage area, each variable should be given a unique name (identifier). For example, int age = 14 ; Here, age is a variable of the int data type, and we have assigned an integer value 14 to it. Note: The int data type suggests that the variable can only hold integers. Similarly, we can use the double data type if we have to store decimals and exponentials. We will learn about all the data types in detail in the next tutorial. The value of a variable can be changed, hence the name variable . int age = 14 ; // age is 14 age = 17 ; // age is 17 Rules for naming a variable \u00b6 A variable name can only have alphabets, numbers, and the underscore _ . A variable name cannot begin with a number. It is a preferred practice to begin variable names with a lowercase character. For example, name is preferable to Name. A variable name cannot be a keyword . For example, int is a keyword that is used to denote integers. A variable name can start with an underscore. However, it's not considered a good practice. Note: We should try to give meaningful names to variables. For example, first_name is a better variable name than fn. C++ Literals \u00b6 Literals are data used for representing fixed values. They can be used directly in the code. For example: 1 , 2.5 , 'c' etc. Here, 1 , 2.5 and 'c' are literals. Why? You cannot assign different values to these terms. Here's a list of different literals in C++ programming. 1. Integers \u00b6 An integer is a numeric literal(associated with numbers) without any fractional or exponential part. There are three types of integer literals in C programming: decimal (base 10) octal (base 8) hexadecimal (base 16) For example: Decimal : 0 , -9 , 22 etc Octal : 021 , 077 , 033 etc Hexadecimal : 0x7f , 0x2a , 0x521 etc In C++ programming, octal starts with a 0 , and hexadecimal starts with a 0x . 2. Floating-point Literals \u00b6 A floating-point literal is a numeric literal that has either a fractional form or an exponent form. For example: -2.0 0.0000234 -0.22E-5 Note: E-5 = 10-5 3. Characters \u00b6 A character literal is created by enclosing a single character inside single quotation marks. For example: 'a' , 'm' , 'F' , '2' , '}' etc. 4. Escape Sequences \u00b6 Sometimes, it is necessary to use characters that cannot be typed or has special meaning in C++ programming. For example, newline (enter), tab, question mark, etc. In order to use these characters, escape sequences are used. Escape Sequences Characters \\b Backspace \\f Form feed \\n Newline \\r Return \\t Horizontal tab \\v Vertical tab \\\\ Backslash \\' Single quotation mark \\\" Double quotation mark \\? Question mark \\0 Null Character 5. String Literals \u00b6 A string literal is a sequence of characters enclosed in double-quote marks. For example: \"good\" string constant \"\" null string constant \" \" string constant of six white space \"x\" string constant having a single character \"Earth is round\\n\" prints string with a newline We will learn about strings in detail in the C++ string tutorial. C++ Constants \u00b6 In C++, we can create variables whose value cannot be changed. For that, we use the const keyword. Here's an example: const int LIGHT_SPEED = 299792458 ; LIGHT_SPEED = 2500 // Error! LIGHT_SPEED is a constant. Here, we have used the keyword const to declare a constant named LIGHT_SPEED . If we try to change the value of LIGHT_SPEED , we will get an error. A constant can also be created using the #define preprocessor directive. We will learn about it in detail in the C++ Macros tutorial. C++ Data Types \u00b6 In this tutorial, we will learn about basic data types such as int, float, char, etc. in C++ programming with the help of examples. In C++, data types are declarations for variables. This determines the type and size of data associated with variables. For example, int age = 13 ; Here, age is a variable of type int . Meaning, the variable can only store integers of either 2 or 4 bytes. C++ Fundamental Data Types \u00b6 The table below shows the fundamental data types, their meaning, and their sizes (in bytes): Data Type Meaning Size (in Bytes) int Integer 2 or 4 float Floating-point 4 double Double Floating-point 8 char Character 1 wchar_t Wide Character 2 bool Boolean 1 void Empty 0 Now, let us discuss these fundamental data types in more detail. 1. C++ int \u00b6 The int keyword is used to indicate integers. Its size is usually 4 bytes. Meaning, it can store values from -2147483648 to 2147483647 . For example, int salary = 85000 ; 2. C++ float and double \u00b6 float and double are used to store floating-point numbers (decimals and exponentials). The size of float is 4 bytes and the size of double is 8 bytes. Hence, double has two times the precision of float . To learn more, visit C++ float and double. For example, float area = 64.74 ; double volume = 134.64534 ; As mentioned above, these two data types are also used for exponentials. For example, double distance = 45E12 // 45E12 is equal to 45*10^12 3. C++ char \u00b6 Keyword char is used for characters. Its size is 1 byte. Characters in C++ are enclosed inside single quotes ' ' . For example, char test = 'h' ; Note: In C++, an integer value is stored in a char variable rather than the character itself. To learn more, visit C++ characters . 4. C++ wchar_t \u00b6 Wide character wchar_t is similar to the char data type, except its size is 2 bytes instead of 1. It is used to represent characters that require more memory to represent them than a single char . For example, wchar_t test = L '\u05dd' // storing Hebrew character; Notice the letter L before the quotation marks. Note: There are also two other fixed-size character types char16_t and char32_t introduced in C++11. 5. C++ bool \u00b6 The bool data type has one of two possible values: true or false . Booleans are used in conditional statements and loops (which we will learn in later chapters). For example, bool cond = false ; 6. C++ void \u00b6 The void keyword indicates an absence of data. It means \"nothing\" or \"no value\". We will use void when we learn about functions and pointers. Note: We cannot declare variables of the void type. C++ Type Modifiers \u00b6 We can further modify some of the fundamental data types by using type modifiers. There are 4 type modifiers in C++. They are: signed unsigned short long We can modify the following data types with the above modifiers: int double char C++ Modified Data Types List \u00b6 Data Type Size (in Bytes) Meaning signed int 4 used for integers (equivalent to int ) unsigned int 4 can only store positive integers short 2 used for small integers (range -32768 to 32767 ) unsigned short 2 used for small positive integers (range 0 to 65,535 ) long at least 4 used for large integers (equivalent to long int ) unsigned long 4 used for large positive integers or 0 (equivalent to unsigned long int ) long long 8 used for very large integers (equivalent to long long int ). unsigned long long 8 used for very large positive integers or 0 (equivalent to unsigned long long int ) long double 12 used for large floating-point numbers signed char 1 used for characters (guaranteed range -127 to 127 ) unsigned char 1 used for characters (range 0 to 255 ) Let's see a few examples. long b = 4523232 ; long int c = 2345342 ; long double d = 233434.56343 ; short d = 3434233 ; // Error! out of range unsigned int a = -5 ; // Error! can only store positive numbers or 0 Derived Data Types \u00b6 Data types that are derived from fundamental data types are derived types. For example: arrays, pointers, function types, structures, etc. We will learn about these derived data types in later tutorials. C++ Basic Input/Output \u00b6 In this tutorial, we will learn to use the cin object to take input from the user, and the cout object to display output to the user with the help of examples. C++ Output \u00b6 In C++, cout sends formatted output to standard output devices, such as the screen. We use the cout object along with the << operator for displaying output. Example 1: String Output \u00b6 #include <iostream> using namespace std ; int main () { // prints the string enclosed in double quotes cout << \"This is C++ Programming\" ; return 0 ; } Run Code Output This is C++ Programming How does this program work? We first include the iostream header file that allows us to display output. The cout object is defined inside the std namespace. To use the std namespace, we used the using namespace std; statement. Every C++ program starts with the main() function. The code execution begins from the start of the main() function. cout is an object that prints the string inside quotation marks \" \" . It is followed by the << operator. return 0; is the \"exit status\" of the main() function. The program ends with this statement, however, this statement is not mandatory. Note: If we don't include the using namespace std; statement, we need to use std::cout instead of cout . This is the preferred method as using the std namespace can create potential problems. However, we have used the std namespace in our tutorials in order to make the codes more readable. #include <iostream> int main () { // prints the string enclosed in double quotes std :: cout << \"This is C++ Programming\" ; return 0 ; } Run Code Example 2: Numbers and Characters Output \u00b6 To print the numbers and character variables, we use the same cout object but without using quotation marks. #include <iostream> using namespace std ; int main () { int num1 = 70 ; double num2 = 256.783 ; char ch = 'A' ; cout << num1 << endl ; // print integer cout << num2 << endl ; // print double cout << \"character: \" << ch << endl ; // print char return 0 ; } Run Code Output 70 256 .783 character: A Notes: The endl manipulator is used to insert a new line. That's why each output is displayed in a new line. The << operator can be used more than once if we want to print different variables, strings and so on in a single statement. For example: cout << \"character: \" << ch << endl ; C++ Input \u00b6 In C++, cin takes formatted input from standard input devices such as the keyboard. We use the cin object along with the >> operator for taking input. Example 3: Integer Input/Output \u00b6 #include <iostream> using namespace std ; int main () { int num ; cout << \"Enter an integer: \" ; cin >> num ; // Taking input cout << \"The number is: \" << num ; return 0 ; } Run Code Output Enter an integer: 70 The number is: 70 In the program, we used cin >> num ; to take input from the user. The input is stored in the variable num. We use the >> operator with cin to take input. Note: If we don't include the using namespace std; statement, we need to use std::cin instead of cin . C++ Taking Multiple Inputs \u00b6 #include <iostream> using namespace std ; int main () { char a ; int num ; cout << \"Enter a character and an integer: \" ; cin >> a >> num ; cout << \"Character: \" << a << endl ; cout << \"Number: \" << num ; return 0 ; } Run Code Output Enter a character and an integer: F 23 Character: F Number: 23 C++ Type Conversion \u00b6 In this tutorial, we will learn about the basics of C++ type conversion with the help of examples. C++ allows us to convert data of one type to that of another. This is known as type conversion. There are two types of type conversion in C++. Implicit Conversion Explicit Conversion (also known as Type Casting) Implicit Type Conversion \u00b6 The type conversion that is done automatically done by the compiler is known as implicit type conversion. This type of conversion is also known as automatic conversion. Let us look at two examples of implicit type conversion. Example 1: Conversion From int to double \u00b6 // Working of implicit type-conversion #include <iostream> using namespace std ; int main () { // assigning an int value to num_int int num_int = 9 ; // declaring a double type variable double num_double ; // implicit conversion // assigning int value to a double variable num_double = num_int ; cout << \"num_int = \" << num_int << endl ; cout << \"num_double = \" << num_double << endl ; return 0 ; } Run Code Output num_int = 9 num_double = 9 In the program, we have assigned an int data to a double variable. num_double = num_int ; Here, the int value is automatically converted to double by the compiler before it is assigned to the num_double variable. This is an example of implicit type conversion. Example 2: Automatic Conversion from double to int \u00b6 //Working of Implicit type-conversion #include <iostream> using namespace std ; int main () { int num_int ; double num_double = 9.99 ; // implicit conversion // assigning a double value to an int variable num_int = num_double ; cout << \"num_int = \" << num_int << endl ; cout << \"num_double = \" << num_double << endl ; return 0 ; } Run Code Output num_int = 9 num_double = 9 .99 In the program, we have assigned a double data to an int variable. num_int = num_double ; Here, the double value is automatically converted to int by the compiler before it is assigned to the num_int variable. This is also an example of implicit type conversion. Note: Since int cannot have a decimal part, the digits after the decimal point are truncated in the above example. Data Loss During Conversion (Narrowing Conversion) \u00b6 As we have seen from the above example, conversion from one data type to another is prone to data loss. This happens when data of a larger type is converted to data of a smaller type. Possible Data Loss During Type Conversion C++ Explicit Conversion \u00b6 When the user manually changes data from one type to another, this is known as explicit conversion . This type of conversion is also known as type casting . There are three major ways in which we can use explicit conversion in C++. They are: C-style type casting (also known as cast notation ) Function notation (also known as old C++ style type casting ) Type conversion operators C-style Type Casting \u00b6 As the name suggests, this type of casting is favored by the C programming language . It is also known as cast notation . The syntax for this style is: ( data_type ) expression ; For example, // initializing int variable int num_int = 26 ; // declaring double variable double num_double ; // converting from int to double num_double = ( double ) num_int ; Function-style Casting \u00b6 We can also use the function like notation to cast data from one type to another. The syntax for this style is: data_type ( expression ); For example, // initializing int variable int num_int = 26 ; // declaring double variable double num_double ; // converting from int to double num_double = double ( num_int ); Example 3: Type Casting \u00b6 #include <iostream> using namespace std ; int main () { // initializing a double variable double num_double = 3.56 ; cout << \"num_double = \" << num_double << endl ; // C-style conversion from double to int int num_int1 = ( int ) num_double ; cout << \"num_int1 = \" << num_int1 << endl ; // function-style conversion from double to int int num_int2 = int ( num_double ); cout << \"num_int2 = \" << num_int2 << endl ; return 0 ; } Run Code Output num_double = 3 .56 num_int1 = 3 num_int2 = 3 We used both the C style type conversion and the function-style casting for type conversion and displayed the results. Since they perform the same task, both give us the same output. Type Conversion Operators \u00b6 Besides these two type castings, C++ also has four operators for type conversion. They are known as type conversion operators . They are: static_cast dynamic_cast const_cast reinterpret_cast We will learn about these casts in later tutorials. Recommended Tutorials: C++ string to int and Vice-versa C++ string to float, double and Vice-versa C++ Operators \u00b6 In this tutorial, we will learn about the different types of operators in C++ with the help of examples. In programming, an operator is a symbol that operates on a value or a variable. Operators are symbols that perform operations on variables and values. For example, + is an operator used for addition, while - is an operator used for subtraction. Operators in C++ can be classified into 6 types: Arithmetic Operators Assignment Operators Relational Operators Logical Operators Bitwise Operators Other Operators 1. C++ Arithmetic Operators \u00b6 Arithmetic operators are used to perform arithmetic operations on variables and data. For example, a + b ; Here, the + operator is used to add two variables a and b. Similarly there are various other arithmetic operators in C++. Operator Operation + Addition - Subtraction * Multiplication / Division % Modulo Operation (Remainder after division) Example 1: Arithmetic Operators \u00b6 #include <iostream> using namespace std ; int main () { int a , b ; a = 7 ; b = 2 ; // printing the sum of a and b cout << \"a + b = \" << ( a + b ) << endl ; // printing the difference of a and b cout << \"a - b = \" << ( a - b ) << endl ; // printing the product of a and b cout << \"a * b = \" << ( a * b ) << endl ; // printing the division of a by b cout << \"a / b = \" << ( a / b ) << endl ; // printing the modulo of a by b cout << \"a % b = \" << ( a % b ) << endl ; return 0 ; } Run Code Output a + b = 9 a - b = 5 a * b = 14 a / b = 3 a % b = 1 Here, the operators + , - and * compute addition, subtraction, and multiplication respectively as we might have expected. / Division Operator Note the operation (a / b) in our program. The / operator is the division operator. As we can see from the above example, if an integer is divided by another integer, we will get the quotient. However, if either divisor or dividend is a floating-point number, we will get the result in decimals. In C++, 7 / 2 is 3 7.0 / 2 is 3.5 7 / 2.0 is 3.5 7.0 / 2.0 is 3.5 % Modulo Operator The modulo operator % computes the remainder. When a = 9 is divided by b = 4 , the remainder is 1 . Note: The % operator can only be used with integers. Increment and Decrement Operators \u00b6 C++ also provides increment and decrement operators: ++ and -- respectively. ++ increases the value of the operand by 1 -- decreases it by 1 For example, int num = 5 ; // increment operator ++ num ; // 6 Here, the code ++num; increases the value of num by 1 . Example 2: Increment and Decrement Operators \u00b6 // Working of increment and decrement operators #include <iostream> using namespace std ; int main () { int a = 10 , b = 100 , result_a , result_b ; // incrementing a by 1 and storing the result in result_a result_a = ++ a ; cout << \"result_a = \" << result_a << endl ; // decrementing b by 1 and storing the result in result_b result_b = -- b ; cout << \"result_b = \" << result_b << endl ; return 0 ; } Run Code Output result_a = 11 result_b = 99 In the above program, we have used the ++ and -- operators as prefixes (++a and --b) . However, we can also use these operators as postfix (a++ and b--) . To learn more, visit increment and decrement operators . 2. C++ Assignment Operators \u00b6 In C++, assignment operators are used to assign values to variables. For example, // assign 5 to a a = 5 ; Here, we have assigned a value of 5 to the variable a. Operator Example Equivalent to = a = b; a = b; += a += b; a = a + b; -= a -= b; a = a - b; *= a *= b; a = a * b; /= a /= b; a = a / b; %= a %= b; a = a % b; Example 3: Assignment Operators \u00b6 #include <iostream> using namespace std ; int main () { int a , b ; // 2 is assigned to a a = 2 ; // 7 is assigned to b b = 7 ; cout << \"a = \" << a << endl ; cout << \"b = \" << b << endl ; cout << \" \\n After a += b;\" << endl ; // assigning the sum of a and b to a a += b ; // a = a +b cout << \"a = \" << a << endl ; return 0 ; } Run Code Output a = 2 b = 7 After a += b ; a = 9 3. C++ Relational Operators \u00b6 A relational operator is used to check the relationship between two operands. For example, // checks if a is greater than b a > b ; Here, > is a relational operator. It checks if a is greater than b or not. If the relation is true , it returns 1 whereas if the relation is false , it returns 0 . Operator Meaning Example == Is Equal To 3 == 5 gives us false != Not Equal To 3 != 5 gives us true > Greater Than 3 > 5 gives us false < Less Than 3 < 5 gives us true >= Greater Than or Equal To 3 >= 5 give us false <= Less Than or Equal To 3 <= 5 gives us true Example 4: Relational Operators \u00b6 #include <iostream> using namespace std ; int main () { int a , b ; a = 3 ; b = 5 ; bool result ; result = ( a == b ); // false cout << \"3 == 5 is \" << result << endl ; result = ( a != b ); // true cout << \"3 != 5 is \" << result << endl ; result = a > b ; // false cout << \"3 > 5 is \" << result << endl ; result = a < b ; // true cout << \"3 < 5 is \" << result << endl ; result = a >= b ; // false cout << \"3 >= 5 is \" << result << endl ; result = a <= b ; // true cout << \"3 <= 5 is \" << result << endl ; return 0 ; } Run Code Output 3 == 5 is 0 3 ! = 5 is 1 3 > 5 is 0 3 < 5 is 1 3 > = 5 is 0 3 < = 5 is 1 Note : Relational operators are used in decision-making and loops. 4. C++ Logical Operators \u00b6 Logical operators are used to check whether an expression is true or false . If the expression is true , it returns 1 whereas if the expression is false , it returns 0 . Operator Example Meaning && expression1 && expression2 Logical AND. True only if all the operands are true. \\| expression1 | expression2 Logical OR. True if at least one of the operands is true. ! **!**expression Logical NOT. True only if the operand is false. In C++, logical operators are commonly used in decision making. To further understand the logical operators, let's see the following examples, Suppose , a = 5 b = 8 Then , ( a > 3 ) && ( b > 5 ) evaluates to true ( a > 3 ) && ( b < 5 ) evaluates to false ( a > 3 ) || ( b > 5 ) evaluates to true ( a > 3 ) || ( b < 5 ) evaluates to true ( a < 3 ) || ( b < 5 ) evaluates to false ! ( a < 3 ) evaluates to true ! ( a > 3 ) evaluates to false Example 5: Logical Operators \u00b6 #include <iostream> using namespace std ; int main () { bool result ; result = ( 3 != 5 ) && ( 3 < 5 ); // true cout << \"(3 != 5) && (3 < 5) is \" << result << endl ; result = ( 3 == 5 ) && ( 3 < 5 ); // false cout << \"(3 == 5) && (3 < 5) is \" << result << endl ; result = ( 3 == 5 ) && ( 3 > 5 ); // false cout << \"(3 == 5) && (3 > 5) is \" << result << endl ; result = ( 3 != 5 ) || ( 3 < 5 ); // true cout << \"(3 != 5) || (3 < 5) is \" << result << endl ; result = ( 3 != 5 ) || ( 3 > 5 ); // true cout << \"(3 != 5) || (3 > 5) is \" << result << endl ; result = ( 3 == 5 ) || ( 3 > 5 ); // false cout << \"(3 == 5) || (3 > 5) is \" << result << endl ; result = ! ( 5 == 2 ); // true cout << \"!(5 == 2) is \" << result << endl ; result = ! ( 5 == 5 ); // false cout << \"!(5 == 5) is \" << result << endl ; return 0 ; } Run Code Output ( 3 != 5 ) && ( 3 < 5 ) is 1 ( 3 == 5 ) && ( 3 < 5 ) is 0 ( 3 == 5 ) && ( 3 > 5 ) is 0 ( 3 != 5 ) || ( 3 < 5 ) is 1 ( 3 != 5 ) || ( 3 > 5 ) is 1 ( 3 == 5 ) || ( 3 > 5 ) is 0 ! ( 5 == 2 ) is 1 ! ( 5 == 5 ) is 0 \u00b6 Explanation of logical operator program (3 != 5) && (3 < 5) evaluates to 1 because both operands (3 != 5) and (3 < 5) are 1 (true). (3 == 5) && (3 < 5) evaluates to 0 because the operand (3 == 5) is 0 (false). (3 == 5) && (3 > 5) evaluates to 0 because both operands (3 == 5) and (3 > 5) are 0 (false). (3 != 5) || (3 < 5) evaluates to 1 because both operands (3 != 5) and (3 < 5) are 1 (true). (3 != 5) || (3 > 5) evaluates to 1 because the operand (3 != 5) is 1 (true). (3 == 5) || (3 > 5) evaluates to 0 because both operands (3 == 5) and (3 > 5) are 0 (false). !(5 == 2) evaluates to 1 because the operand (5 == 2) is 0 (false). !(5 == 5) evaluates to 0 because the operand (5 == 5) is 1 (true). 5. C++ Bitwise Operators \u00b6 In C++, bitwise operators are used to perform operations on individual bits. They can only be used alongside char and int data types. Operator Description & Binary AND \\| Binary OR ^ Binary XOR ~ Binary One's Complement << Binary Shift Left >> Binary Shift Right To learn more, visit C++ bitwise operators . 6. Other C++ Operators \u00b6 Here's a list of some other common operators available in C++. We will learn about them in later tutorials. Operator Description Example sizeof returns the size of data type sizeof(int); // 4 ?: returns value based on the condition string result = (5 > 0) ? \"even\" : \"odd\"; // \"even\" & represents memory address of the operand &num; // address of num . accesses members of struct variables or class objects s1.marks = 92; -> used with pointers to access the class or struct variables ptr->marks = 92; << prints the output value cout << 5; >> gets the input value cin >> num; C++ Comments \u00b6 In this tutorial, we will learn about C++ comments, why we use them, and how to use them with the help of examples. C++ comments are hints that a programmer can add to make their code easier to read and understand. They are completely ignored by C++ compilers. There are two ways to add comments to code: // - Single Line Comments /* */ -Multi-line Comments Single Line Comments \u00b6 In C++, any line that starts with // is a comment. For example, // declaring a variable int a ; // initializing the variable 'a' with the value 2 a = 2 ; Here, we have used two single-line comments: // declaring a variable // initializing the variable 'a' with the value 2 We can also use single line comment like this: int a ; // declaring a variable Multi-line comments \u00b6 In C++, any line between /* and */ is also a comment. For example, /* declaring a variableto store salary to employees*/ int salary = 2000 ; This syntax can be used to write both single-line and multi-line comments. Using Comments for Debugging \u00b6 Comments can also be used to disable code to prevent it from being executed. For example, #include <iostream> using namespace std ; int main () { cout << \"some code\" ; cout << '' error code ; cout << \"some other code\" ; return 0 ;} Run Code If we get an error while running the program, instead of removing the error-prone code, we can use comments to disable it from being executed; this can be a valuable debugging tool. #include <iostream> using namespace std ; int main () { cout << \"some code\" ; // cout << ''error code; cout << \"some other code\" ; return 0 ; } Run Code Pro Tip: Remember the shortcut for using comments; it can be really helpful. For most code editors, it's Ctrl + / for Windows and Cmd + / for Mac. Why use Comments? \u00b6 If we write comments on our code, it will be easier for us to understand the code in the future. Also, it will be easier for your fellow developers to understand the code. Note: Comments shouldn't be the substitute for a way to explain poorly written code in English. We should always write well-structured and self-explanatory code. And, then use comments. As a general rule of thumb, use comments to explain Why you did something rather than How you did something, and you are good. C++ Flow Control \u00b6 C++ if, if...else and Nested if...else \u00b6 In this tutorial, we will learn about the if...else statement to create decision making programs with the help of examples. In computer programming, we use the if...else statement to run one block of code under certain conditions and another block of code under different conditions. For example, assigning grades (A, B, C) based on marks obtained by a student. if the percentage is above 90 , assign grade A if the percentage is above 75 , assign grade B if the percentage is above 65 , assign grade C There are three forms of if...else statements in C++. if statement if...else statement if...else if...else statement C++ if Statement \u00b6 The syntax of the if statement is: if ( condition ) { // body of if statement } The if statement evaluates the condition inside the parentheses ( ) . If the condition evaluates to true , the code inside the body of if is executed. If the condition evaluates to false , the code inside the body of if is skipped. Note: The code inside { } is the body of the if statement. How if Statement Works Example 1: C++ if Statement \u00b6 // Program to print positive number entered by the user // If the user enters a negative number, it is skipped #include <iostream> using namespace std ; int main () { int number ; cout << \"Enter an integer: \" ; cin >> number ; // checks if the number is positive if ( number > 0 ) { cout << \"You entered a positive integer: \" << number << endl ; } cout << \"This statement is always executed.\" ; return 0 ; } Run Code Output 1 Enter an integer: 5 You entered a positive number: 5 This statement is always executed. When the user enters 5 , the condition number > 0 is evaluated to true and the statement inside the body of if is executed. Output 2 Enter a number: -5 This statement is always executed. When the user enters -5 , the condition number > 0 is evaluated to false and the statement inside the body of if is not executed. C++ if...else \u00b6 The if statement can have an optional else clause. Its syntax is: if ( condition ) { // block of code if condition is true } else { // block of code if condition is false } The if..else statement evaluates the condition inside the parenthesis. How if...else Statement Works If the condition evaluates true , the code inside the body of if is executed the code inside the body of else is skipped from execution If the condition evaluates false , the code inside the body of else is executed the code inside the body of if is skipped from execution Example 2: C++ if...else Statement \u00b6 // Program to check whether an integer is positive or negative // This program considers 0 as a positive number #include <iostream> using namespace std ; int main () { int number ; cout << \"Enter an integer: \" ; cin >> number ; if ( number >= 0 ) { cout << \"You entered a positive integer: \" << number << endl ; } else { cout << \"You entered a negative integer: \" << number << endl ; } cout << \"This line is always printed.\" ; return 0 ; } Run Code Output 1 Enter an integer: 4 You entered a positive integer: 4 . This line is always printed. In the above program, we have the condition number >= 0 . If we enter the number greater or equal to 0, then the condition evaluates true . Here, we enter 4. So, the condition is true . Hence, the statement inside the body of if is executed. Output 2 Enter an integer: -4 You entered a negative integer: -4. This line is always printed. Here, we enter -4. So, the condition is false . Hence, the statement inside the body of else is executed. C++ if...else...else if statement \u00b6 The if...else statement is used to execute a block of code among two alternatives. However, if we need to make a choice between more than two alternatives, we use the if...else if...else statement. The syntax of the if...else if...else statement is: if ( condition1 ) { // code block 1 } else if ( condition2 ){ // code block 2 } else { // code block 3 } Here, If condition1 evaluates to true , the code block 1 is executed. If condition1 evaluates to false , then condition2 is evaluated. If condition2 is true , the code block 2 is executed. If condition2 is false , the code block 3 is executed. How if...else if...else Statement Works Note: There can be more than one else if statement but only one if and else statements. Example 3: C++ if...else...else if \u00b6 // Program to check whether an integer is positive, negative or zero #include <iostream> using namespace std ; int main () { int number ; cout << \"Enter an integer: \" ; cin >> number ; if ( number > 0 ) { cout << \"You entered a positive integer: \" << number << endl ; } else if ( number < 0 ) { cout << \"You entered a negative integer: \" << number << endl ; } else { cout << \"You entered 0.\" << endl ; } cout << \"This line is always printed.\" ; return 0 ; } Run Code Output 1 Enter an integer: 1 You entered a positive integer: 1 . This line is always printed. Output 2 Enter an integer: -2 You entered a negative integer: -2. This line is always printed. Output 3 Enter an integer: 0 You entered 0 . This line is always printed. In this program, we take a number from the user. We then use the if...else if...else ladder to check whether the number is positive, negative, or zero. If the number is greater than 0 , the code inside the if block is executed. If the number is less than 0 , the code inside the else if block is executed. Otherwise, the code inside the else block is executed. C++ Nested if...else \u00b6 Sometimes, we need to use an if statement inside another if statement. This is known as nested if statement. Think of it as multiple layers of if statements. There is a first, outer if statement, and inside it is another, inner if statement. Its syntax is: // outer if statement if ( condition1 ) { // statements // inner if statement if ( condition2 ) { // statements } } Notes: We can add else and else if statements to the inner if statement as required. The inner if statement can also be inserted inside the outer else or else if statements (if they exist). We can nest multiple layers of if statements. Example 4: C++ Nested if \u00b6 // C++ program to find if an integer is positive, negative or zero // using nested if statements #include <iostream> using namespace std ; int main () { int num ; cout << \"Enter an integer: \" ; cin >> num ; // outer if condition if ( num != 0 ) { // inner if condition if ( num > 0 ) { cout << \"The number is positive.\" << endl ; } // inner else condition else { cout << \"The number is negative.\" << endl ; } } // outer else condition else { cout << \"The number is 0 and it is neither positive nor negative.\" << endl ; } cout << \"This line is always printed.\" << endl ; return 0 ; } Run Code Output 1 Enter an integer: 35 The number is positive. This line is always printed. Output 2 Enter an integer: -35 The number is negative. This line is always printed. Output 3 Enter an integer: 0 The number is 0 and it is neither positive nor negative. This line is always printed. In the above example, We take an integer as an input from the user and store it in the variable num. We then use an if...else statement to check whether num is not equal to 0 . If true , then the inner if...else statement is executed. If false , the code inside the outer else condition is executed, which prints \"The number is 0 and it is neither positive nor negative.\" The inner if...else statement checks whether the input number is positive i.e. if num is greater than 0 . If true , then we print a statement saying that the number is positive. If false , we print that the number is negative. Note: As you can see, nested if...else makes your logic complicated. If possible, you should always try to avoid nested if...else . Body of if...else With Only One Statement \u00b6 If the body of if...else has only one statement, you can omit { } in the program. For example, you can replace int number = 5 ; if ( number > 0 ) { cout << \"The number is positive.\" << endl ; } else { cout << \"The number is negative.\" << endl ; } with int number = 5 ; if ( number > 0 ) cout << \"The number is positive.\" << endl ; else cout << \"The number is negative.\" << endl ; The output of both programs will be the same. Note: Although it's not necessary to use { } if the body of if...else has only one statement, using { } makes your code more readable. More on Decision Making \u00b6 In certain situations, a ternary operator can replace an if...else statement. To learn more, visit C++ Ternary Operator . If we need to make a choice between more than one alternatives based on a given test condition, the switch statement can be used. To learn more, visit C++ switch . Check out these examples to learn more: C++ Program to Check Whether Number is Even or Odd C++ Program to Check Whether a character is Vowel or Consonant. C++ Program to Find Largest Number Among Three Numbers C++ for Loop \u00b6 In this tutorial, we will learn about the C++ for loop and its working with the help of some examples. In computer programming, loops are used to repeat a block of code. For example, let's say we want to show a message 100 times. Then instead of writing the print statement 100 times, we can use a loop. That was just a simple example; we can achieve much more efficiency and sophistication in our programs by making effective use of loops. There are 3 types of loops in C++. for loop while loop do...while loop This tutorial focuses on C++ for loop. We will learn about the other type of loops in the upcoming tutorials. C++ for loop \u00b6 The syntax of for-loop is: for ( initialization ; condition ; update ) { // body of-loop } Here, initialization - initializes variables and is executed only once condition - if true , the body of for loop is executed if false , the for loop is terminated update - updates the value of initialized variables and again checks the condition To learn more about conditions , check out our tutorial on C++ Relational and Logical Operators . Flowchart of for Loop in C++ \u00b6 Flowchart of for loop in C++ Example 1: Printing Numbers From 1 to 5 \u00b6 #include <iostream> using namespace std ; int main () { for ( int i = 1 ; i <= 5 ; ++ i ) { cout << i << \" \" ; } return 0 ; } Run Code Output 1 2 3 4 5 Here is how this program works Iteration Variable i <= 5 Action 1 st i = 1 true 1 is printed. i is increased to 2 . 2 nd i = 2 true 2 is printed. i is increased to 3 . 3 rd i = 3 true 3 is printed. i is increased to 4 . 4 th i = 4 true 4 is printed. i is increased to 5 . 5 th i = 5 true 5 is printed. i is increased to 6 . 6 th i = 6 false The loop is terminated Example 2: Display a text 5 times \u00b6 // C++ Program to display a text 5 times #include <iostream> using namespace std ; int main () { for ( int i = 1 ; i <= 5 ; ++ i ) { cout << \"Hello World! \" << endl ; } return 0 ; } Run Code Output Hello World! Hello World! Hello World! Hello World! Hello World! Here is how this program works Iteration Variable i <= 5 Action 1 st i = 1 true Hello World! is printed and i is increased to 2 . 2 nd i = 2 true Hello World! is printed and i is increased to 3 . 3 rd i = 3 true Hello World! is printed and i is increased to 4 . 4 th i = 4 true Hello World! is printed and i is increased to 5 . 5 th i = 5 true Hello World! is printed and i is increased to 6 . 6 th i = 6 false The loop is terminated Example 3: Find the sum of first n Natural Numbers \u00b6 // C++ program to find the sum of first n natural numbers // positive integers such as 1,2,3,...n are known as natural numbers #include <iostream> using namespace std ; int main () { int num , sum ; sum = 0 ; cout << \"Enter a positive integer: \" ; cin >> num ; for ( int i = 1 ; i <= num ; ++ i ) { sum += i ; } cout << \"Sum = \" << sum << endl ; return 0 ; } Run Code Output Enter a positive integer: 10 Sum = 55 In the above example, we have two variables num and sum. The sum variable is assigned with 0 and the num variable is assigned with the value provided by the user. Note that we have used a for loop. for ( int i = 1 ; i <= num ; ++ i ) Here, int i = 1 : initializes the i variable i <= num : runs the loop as long as i is less than or equal to num ++i : increases the i variable by 1 in each iteration When i becomes 11 , the condition is false and sum will be equal to 0 + 1 + 2 + ... + 10 . Ranged Based for Loop \u00b6 In C++11, a new range-based for loop was introduced to work with collections such as arrays and vectors . Its syntax is: for ( variable : collection ) { // body of loop } Here, for every value in the collection, the for loop is executed and the value is assigned to the variable. Example 4: Range Based for Loop \u00b6 #include <iostream> using namespace std ; int main () { int num_array [] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 }; for ( int n : num_array ) { cout << n << \" \" ; } return 0 ; } Run Code Output 1 2 3 4 5 6 7 8 9 10 In the above program, we have declared and initialized an int array named num_array. It has 10 items. Here, we have used a range-based for loop to access all the items in the array. C++ Infinite for loop \u00b6 If the condition in a for loop is always true , it runs forever (until memory is full). For example, // infinite for loop for ( int i = 1 ; i > 0 ; i ++ ) { // block of code } In the above program, the condition is always true which will then run the code for infinite times. Check out these examples to learn more: C++ Program to Calculate Sum of Natural Numbers C++ Program to Find Factorial C++ Program to Generate Multiplication Table In the next tutorial, we will learn about while and do...while loop. C++ while and do...while Loop \u00b6 In this tutorial, we will learn the use of while and do...while loops in C++ programming with the help of some examples. In computer programming, loops are used to repeat a block of code. For example, let's say we want to show a message 100 times. Then instead of writing the print statement 100 times, we can use a loop. That was just a simple example; we can achieve much more efficiency and sophistication in our programs by making effective use of loops. There are 3 types of loops in C++. for loop while loop do...while loop In the previous tutorial, we learned about the C++ for loop . Here, we are going to learn about while and do...while loops. C++ while Loop \u00b6 The syntax of the while loop is: while ( condition ) { // body of the loop } Here, A while loop evaluates the condition If the condition evaluates to true , the code inside the while loop is executed. The condition is evaluated again. This process continues until the condition is false . When the condition evaluates to false , the loop terminates. To learn more about the conditions , visit C++ Relational and Logical Operators . Flowchart of while Loop \u00b6 Flowchart of C++ while loop Example 1: Display Numbers from 1 to 5 \u00b6 // C++ Program to print numbers from 1 to 5 #include <iostream> using namespace std ; int main () { int i = 1 ; // while loop from 1 to 5 while ( i <= 5 ) { cout << i << \" \" ; ++ i ; } return 0 ; } Run Code Output 1 2 3 4 5 Here is how the program works. Iteration Variable i <= 5 Action 1 st i = 1 true 1 is printed and i is increased to 2 . 2 nd i = 2 true 2 is printed and i is increased to 3 . 3 rd i = 3 true 3 is printed and i is increased to 4 4 th i = 4 true 4 is printed and i is increased to 5 . 5 th i = 5 true 5 is printed and i is increased to 6 . 6 th i = 6 false The loop is terminated Example 2: Sum of Positive Numbers Only \u00b6 // program to find the sum of positive numbers // if the user enters a negative number, the loop ends // the negative number entered is not added to the sum #include <iostream> using namespace std ; int main () { int number ; int sum = 0 ; // take input from the user cout << \"Enter a number: \" ; cin >> number ; while ( number >= 0 ) { // add all positive numbers sum += number ; // take input again if the number is positive cout << \"Enter a number: \" ; cin >> number ; } // display the sum cout << \" \\n The sum is \" << sum << endl ; return 0 ; } Run Code Output Enter a number: 6 Enter a number: 12 Enter a number: 7 Enter a number: 0 Enter a number: -2 The sum is 25 In this program, the user is prompted to enter a number, which is stored in the variable number. In order to store the sum of the numbers, we declare a variable sum and initialize it to the value of 0 . The while loop continues until the user enters a negative number. During each iteration, the number entered by the user is added to the sum variable. When the user enters a negative number, the loop terminates. Finally, the total sum is displayed. C++ do...while Loop \u00b6 The do...while loop is a variant of the while loop with one important difference: the body of do...while loop is executed once before the condition is checked. Its syntax is: do { // body of loop; } while ( condition ); Here, The body of the loop is executed at first. Then the condition is evaluated. If the condition evaluates to true , the body of the loop inside the do statement is executed again. The condition is evaluated once again. If the condition evaluates to true , the body of the loop inside the do statement is executed again. This process continues until the condition evaluates to false . Then the loop stops. Flowchart of do...while Loop \u00b6 Flowchart of C++ do...while loop Example 3: Display Numbers from 1 to 5 \u00b6 // C++ Program to print numbers from 1 to 5 #include <iostream> using namespace std ; int main () { int i = 1 ; // do...while loop from 1 to 5 do { cout << i << \" \" ; ++ i ; } while ( i <= 5 ); return 0 ; } Run Code Output 1 2 3 4 5 Here is how the program works. Iteration Variable i <= 5 Action i = 1 not checked 1 is printed and i is increased to 2 1 st i = 2 true 2 is printed and i is increased to 3 2 nd i = 3 true 3 is printed and i is increased to 4 3 rd i = 4 true 4 is printed and i is increased to 5 4 th i = 5 true 5 is printed and i is increased to 6 5 th i = 6 false The loop is terminated Example 4: Sum of Positive Numbers Only \u00b6 // program to find the sum of positive numbers // If the user enters a negative number, the loop ends // the negative number entered is not added to the sum #include <iostream> using namespace std ; int main () { int number = 0 ; int sum = 0 ; do { sum += number ; // take input from the user cout << \"Enter a number: \" ; cin >> number ; } while ( number >= 0 ); // display the sum cout << \" \\n The sum is \" << sum << endl ; return 0 ; } Run Code Output 1 Enter a number: 6 Enter a number: 12 Enter a number: 7 Enter a number: 0 Enter a number: -2 The sum is 25 Here, the do...while loop continues until the user enters a negative number. When the number is negative, the loop terminates; the negative number is not added to the sum variable. Output 2 Enter a number: -6 The sum is 0 . The body of the do...while loop runs only once if the user enters a negative number. Infinite while loop \u00b6 If the condition of a loop is always true , the loop runs for infinite times (until the memory is full). For example, // infinite while loop while ( true ) { // body of the loop } Here is an example of an infinite do...while loop. // infinite do...while loop int count = 1 ; do { // body of loop } while ( count == 1 ); In the above programs, the condition is always true . Hence, the loop body will run for infinite times. for vs while loops \u00b6 A for loop is usually used when the number of iterations is known. For example, // This loop is iterated 5 times for ( int i = 1 ; i <= 5 ; ++ i ) { // body of the loop } Here, we know that the for-loop will be executed 5 times. However, while and do...while loops are usually used when the number of iterations is unknown. For example, while ( condition ) { // body of the loop } Check out these examples to learn more: C++ Program to Display Fibonacci Series C++ Program to Find GCD C++ Program to Find LCM C++ break Statement \u00b6 In this tutorial, we will learn about the break statement and its working in loops with the help of examples. In C++, the break statement terminates the loop when it is encountered. The syntax of the break statement is: break ; Before you learn about the break statement, make sure you know about: C++ for loop C++ if...else C++ while loop Working of C++ break Statement \u00b6 Working of break statement in C++ Example 1: break with for loop \u00b6 // program to print the value of i #include <iostream> using namespace std ; int main () { for ( int i = 1 ; i <= 5 ; i ++ ) { // break condition if ( i == 3 ) { break ; } cout << i << endl ; } return 0 ; } Run Code Output 1 2 In the above program, the for loop is used to print the value of i in each iteration. Here, notice the code: if ( i == 3 ) { break ; } This means, when i is equal to 3 , the break statement terminates the loop. Hence, the output doesn't include values greater than or equal to 3. Note: The break statement is usually used with decision-making statements. Example 2: break with while loop \u00b6 // program to find the sum of positive numbers // if the user enters a negative numbers, break ends the loop // the negative number entered is not added to sum #include <iostream> using namespace std ; int main () { int number ; int sum = 0 ; while ( true ) { // take input from the user cout << \"Enter a number: \" ; cin >> number ; // break condition if ( number < 0 ) { break ; } // add all positive numbers sum += number ; } // display the sum cout << \"The sum is \" << sum << endl ; return 0 ; } Run Code Output Enter a number: 1 Enter a number: 2 Enter a number: 3 Enter a number: -5 The sum is 6 . In the above program, the user enters a number. The while loop is used to print the total sum of numbers entered by the user. Here, notice the code, if ( number < 0 ) { break ; } This means, when the user enters a negative number, the break statement terminates the loop and codes outside the loop are executed. The while loop continues until the user enters a negative number. break with Nested loop \u00b6 When break is used with nested loops, break terminates the inner loop. For example, // using break statement inside // nested for loop #include <iostream> using namespace std ; int main () { int number ; int sum = 0 ; // nested for loops // first loop for ( int i = 1 ; i <= 3 ; i ++ ) { // second loop for ( int j = 1 ; j <= 3 ; j ++ ) { if ( i == 2 ) { break ; } cout << \"i = \" << i << \", j = \" << j << endl ; } } return 0 ; } Run Code Output i = 1 , j = 1 i = 1 , j = 2 i = 1 , j = 3 i = 3 , j = 1 i = 3 , j = 2 i = 3 , j = 3 In the above program, the break statement is executed when i == 2 . It terminates the inner loop, and the control flow of the program moves to the outer loop. Hence, the value of i = 2 is never displayed in the output. The break statement is also used with the switch statement. To learn more, visit C++ switch statement . C++ continue Statement \u00b6 In this tutorial, we will learn about the continue statement and its working with loops with the help of examples. In computer programming, the continue statement is used to skip the current iteration of the loop and the control of the program goes to the next iteration. The syntax of the continue statement is: continue ; Before you learn about the continue statement, make sure you know about, C++ for loop C++ if...else C++ while loop Working of C++ continue Statement \u00b6 Working of continue statement in C++ Example 1: continue with for loop \u00b6 In a for loop, continue skips the current iteration and the control flow jumps to the update expression. // program to print the value of i #include <iostream> using namespace std ; int main () { for ( int i = 1 ; i <= 5 ; i ++ ) { // condition to continue if ( i == 3 ) { continue ; } cout << i << endl ; } return 0 ; } Run Code Output 1 2 4 5 In the above program, we have used the the for loop to print the value of i in each iteration. Here, notice the code, if ( i == 3 ) { continue ; } This means When i is equal to 3 , the continue statement skips the current iteration and starts the next iteration Then, i becomes 4 , and the condition is evaluated again. Hence, 4 and 5 are printed in the next two iterations. Note : The continue statement is almost always used with decision-making statements. Example 2: continue with while loop \u00b6 In a while loop, continue skips the current iteration and control flow of the program jumps back to the while condition . // program to calculate positive numbers till 50 only // if the user enters a negative number, // that number is skipped from the calculation // negative number -> loop terminate // numbers above 50 -> skip iteration #include <iostream> using namespace std ; int main () { int sum = 0 ; int number = 0 ; while ( number >= 0 ) { // add all positive numbers sum += number ; // take input from the user cout << \"Enter a number: \" ; cin >> number ; // continue condition if ( number > 50 ) { cout << \"The number is greater than 50 and won't be calculated.\" << endl ; number = 0 ; // the value of number is made 0 again continue ; } } // display the sum cout << \"The sum is \" << sum << endl ; return 0 ; } Run Code Output Enter a number: 12 Enter a number: 0 Enter a number: 2 Enter a number: 30 Enter a number: 50 Enter a number: 56 The number is greater than 50 and won ' t be calculated. Enter a number: 5 Enter a number: -3 The sum is 99 In the above program, the user enters a number. The while loop is used to print the total sum of positive numbers entered by the user, as long as the numbers entered are not greater than 50 . Notice the use of the continue statement. if ( number > 50 ){ continue ; } When the user enters a number greater than 50 , the continue statement skips the current iteration. Then the control flow of the program goes to the condition of while loop. When the user enters a number less than 0 , the loop terminates. Note : The continue statement works in the same way for the do...while loops. continue with Nested loop \u00b6 When continue is used with nested loops, it skips the current iteration of the inner loop. For example, // using continue statement inside // nested for loop #include <iostream> using namespace std ; int main () { int number ; int sum = 0 ; // nested for loops // first loop for ( int i = 1 ; i <= 3 ; i ++ ) { // second loop for ( int j = 1 ; j <= 3 ; j ++ ) { if ( j == 2 ) { continue ; } cout << \"i = \" << i << \", j = \" << j << endl ; } } return 0 ; } Run Code Output i = 1 , j = 1 i = 1 , j = 3 i = 2 , j = 1 i = 2 , j = 3 i = 3 , j = 1 i = 3 , j = 3 In the above program, when the continue statement executes, it skips the current iteration in the inner loop. And the control of the program moves to the update expression of the inner loop. Hence, the value of j = 2 is never displayed in the output. Note : The break statement terminates the loop entirely. However, the continue statement only skips the current iteration. C++ switch..case Statement \u00b6 In this tutorial, we will learn about switch statement and its working in C++ programming with the help of some examples. The switch statement allows us to execute a block of code among many alternatives. The syntax of the switch statement in C++ is: switch ( expression ) { case constant1 : // code to be executed if // expression is equal to constant1; break ; case constant2 : // code to be executed if // expression is equal to constant2; break ; . . . default : // code to be executed if // expression doesn't match any constant } How does the switch statement work? The expression is evaluated once and compared with the values of each case label. If there is a match, the corresponding code after the matching label is executed. For example, if the value of the variable is equal to constant2 , the code after case constant2: is executed until the break statement is encountered. If there is no match, the code after default: is executed. Note : We can do the same thing with the if...else..if ladder. However, the syntax of the switch statement is cleaner and much easier to read and write. Flowchart of switch Statement \u00b6 Flowchart of C++ switch...case statement Example: Create a Calculator using the switch Statement \u00b6 // Program to build a simple calculator using switch Statement #include <iostream> using namespace std ; int main () { char oper ; float num1 , num2 ; cout << \"Enter an operator (+, -, *, /): \" ; cin >> oper ; cout << \"Enter two numbers: \" << endl ; cin >> num1 >> num2 ; switch ( oper ) { case '+' : cout << num1 << \" + \" << num2 << \" = \" << num1 + num2 ; break ; case '-' : cout << num1 << \" - \" << num2 << \" = \" << num1 - num2 ; break ; case '*' : cout << num1 << \" * \" << num2 << \" = \" << num1 * num2 ; break ; case '/' : cout << num1 << \" / \" << num2 << \" = \" << num1 / num2 ; break ; default : // operator is doesn't match any case constant (+, -, *, /) cout << \"Error! The operator is not correct\" ; break ; } return 0 ; } Run Code Output 1 Enter an operator ( +, -, *, / ) : + Enter two numbers: 2 .3 4 .5 2 .3 + 4 .5 = 6 .8 Output 2 Enter an operator ( +, -, *, / ) : - Enter two numbers: 2 .3 4 .5 2 .3 - 4 .5 = -2.2 Output 3 Enter an operator ( +, -, *, / ) : * Enter two numbers: 2 .3 4 .5 2 .3 * 4 .5 = 10 .35 Output 4 Enter an operator ( +, -, *, / ) : / Enter two numbers: 2 .3 4 .5 2 .3 / 4 .5 = 0 .511111 Output 5 Enter an operator ( +, -, *, / ) : ? Enter two numbers: 2 .3 4 .5 Error! The operator is not correct. In the above program, we are using the switch...case statement to perform addition, subtraction, multiplication, and division. How This Program Works We first prompt the user to enter the desired operator. This input is then stored in the char variable named oper. We then prompt the user to enter two numbers, which are stored in the float variables num1 and num2. The switch statement is then used to check the operator entered by the user: If the user enters + , addition is performed on the numbers. If the user enters - , subtraction is performed on the numbers. If the user enters * , multiplication is performed on the numbers. If the user enters / , division is performed on the numbers. If the user enters any other character, the default code is printed. Notice that the break statement is used inside each case block. This terminates the switch statement. If the break statement is not used, all cases after the correct case are executed. C++ goto Statement \u00b6 In this article, you'll learn about goto statment, how it works and why should it be avoided. In C++ programming, the goto statement is used for altering the normal sequence of program execution by transferring control to some other part of the program. Syntax of goto Statement \u00b6 goto label ; ... .. ... ... .. ... ... .. ... label : statement ; ... .. ... In the syntax above, label is an identifier. When goto label; is encountered, the control of program jumps to label: and executes the code below it. Working of goto in C++ Example: goto Statement \u00b6 // This program calculates the average of numbers entered by the user. // If the user enters a negative number, it ignores the number and // calculates the average number entered before it. # include <iostream> using namespace std ; int main () { float num , average , sum = 0.0 ; int i , n ; cout << \"Maximum number of inputs: \" ; cin >> n ; for ( i = 1 ; i <= n ; ++ i ) { cout << \"Enter n\" << i << \": \" ; cin >> num ; if ( num < 0.0 ) { // Control of the program move to jump: goto jump ; } sum += num ; } jump : average = sum / ( i - 1 ); cout << \" \\n Average = \" << average ; return 0 ; } Output Maximum number of inputs: 10 Enter n1: 2 .3 Enter n2: 5 .6 Enter n3: -5.6 Average = 3 .95 You can write any C++ program without the use of goto statement and is generally considered a good idea not to use them. Reason to Avoid goto Statement \u00b6 The goto statement gives the power to jump to any part of a program but, makes the logic of the program complex and tangled. In modern programming, the goto statement is considered a harmful construct and a bad programming practice. The goto statement can be replaced in most of C++ program with the use of break and continue statements. C++ Functions \u00b6 C++ Functions \u00b6 In this tutorial, we will learn about the C++ function and function expressions with the help of examples. A function is a block of code that performs a specific task. Suppose we need to create a program to create a circle and color it. We can create two functions to solve this problem: a function to draw the circle a function to color the circle Dividing a complex problem into smaller chunks makes our program easy to understand and reusable. There are two types of function: Standard Library Functions: Predefined in C++ User-defined Function: Created by users In this tutorial, we will focus mostly on user-defined functions. C++ User-defined Function \u00b6 C++ allows the programmer to define their own function. A user-defined function groups code to perform a specific task and that group of code is given a name (identifier). When the function is invoked from any part of the program, it all executes the codes defined in the body of the function. C++ Function Declaration \u00b6 The syntax to declare a function is: returnType functionName ( parameter1 , parameter2 ,...) { // function body } Here's an example of a function declaration. // function declaration void greet () { cout << \"Hello World\" ; } Here, the name of the function is greet() the return type of the function is void the empty parentheses mean it doesn't have any parameters the function body is written inside {} Note: We will learn about returnType and parameters later in this tutorial. Calling a Function \u00b6 In the above program, we have declared a function named greet() . To use the greet() function, we need to call it. Here's how we can call the above greet() function. int main () { // calling a function greet (); } How Function works in C++ Example 1: Display a Text \u00b6 #include <iostream> using namespace std ; // declaring a function void greet () { cout << \"Hello there!\" ; } int main () { // calling the function greet (); return 0 ; } Run Code Output Hello there! Function Parameters \u00b6 As mentioned above, a function can be declared with parameters (arguments). A parameter is a value that is passed when declaring a function. For example, let us consider the function below: void printNum ( int num ) { cout << num ; } Here, the int variable num is the function parameter. We pass a value to the function parameter while calling the function. int main () { int n = 7 ; // calling the function // n is passed to the function as argument printNum ( n ); return 0 ; } Example 2: Function with Parameters \u00b6 // program to print a text #include <iostream> using namespace std ; // display a number void displayNum ( int n1 , float n2 ) { cout << \"The int number is \" << n1 ; cout << \"The double number is \" << n2 ; } int main () { int num1 = 5 ; double num2 = 5.5 ; // calling the function displayNum ( num1 , num2 ); return 0 ; } Run Code Output The int number is 5 The double number is 5 .5 In the above program, we have used a function that has one int parameter and one double parameter. We then pass num1 and num2 as arguments. These values are stored by the function parameters n1 and n2 respectively. C++ function with parameters Note: The type of the arguments passed while calling the function must match with the corresponding parameters defined in the function declaration. Return Statement \u00b6 In the above programs, we have used void in the function declaration. For example, void displayNumber () { // code } This means the function is not returning any value. It's also possible to return a value from a function. For this, we need to specify the returnType of the function during function declaration. Then, the return statement can be used to return a value from a function. For example, int add ( int a , int b ) { return ( a + b ); } Here, we have the data type int instead of void . This means that the function returns an int value. The code return (a + b); returns the sum of the two parameters as the function value. The return statement denotes that the function has ended. Any code after return inside the function is not executed. Example 3: Add Two Numbers \u00b6 // program to add two numbers using a function #include <iostream> using namespace std ; // declaring a function int add ( int a , int b ) { return ( a + b ); } int main () { int sum ; // calling the function and storing // the returned value in sum sum = add ( 100 , 78 ); cout << \"100 + 78 = \" << sum << endl ; return 0 ; } Run Code Output 100 + 78 = 178 In the above program, the add() function is used to find the sum of two numbers. We pass two int literals 100 and 78 while calling the function. We store the returned value of the function in the variable sum, and then we print it. Working of C++ Function with return statement Notice that sum is a variable of int type. This is because the return value of add() is of int type. Function Prototype \u00b6 In C++, the code of function declaration should be before the function call. However, if we want to define a function after the function call, we need to use the function prototype. For example, // function prototype void add ( int , int ); int main () { // calling the function before declaration. add ( 5 , 3 ); return 0 ; } // function definition void add ( int a , int b ) { cout << ( a + b ); } In the above code, the function prototype is: void add ( int , int ); This provides the compiler with information about the function name and its parameters. That's why we can use the code to call a function before the function has been defined. The syntax of a function prototype is: returnType functionName ( dataType1 , dataType2 , ...); Example 4: C++ Function Prototype \u00b6 // using function definition after main() function // function prototype is declared before main() #include <iostream> using namespace std ; // function prototype int add ( int , int ); int main () { int sum ; // calling the function and storing // the returned value in sum sum = add ( 100 , 78 ); cout << \"100 + 78 = \" << sum << endl ; return 0 ; } // function definition int add ( int a , int b ) { return ( a + b ); } Run Code Output 100 + 78 = 178 The above program is nearly identical to Example 3 . The only difference is that here, the function is defined after the function call. That's why we have used a function prototype in this example. Benefits of Using User-Defined Functions \u00b6 Functions make the code reusable. We can declare them once and use them multiple times. Functions make the program easier as each small task is divided into a function. Functions increase readability. C++ Library Functions \u00b6 Library functions are the built-in functions in C++ programming. Programmers can use library functions by invoking the functions directly; they don't need to write the functions themselves. Some common library functions in C++ are sqrt() , abs() , isdigit() , etc. In order to use library functions, we usually need to include the header file in which these library functions are defined. For instance, in order to use mathematical functions such as sqrt() and abs() , we need to include the header file cmath . Example 5: C++ Program to Find the Square Root of a Number \u00b6 #include <iostream> #include <cmath> using namespace std ; int main () { double number , squareRoot ; number = 25.0 ; // sqrt() is a library function to calculate the square root squareRoot = sqrt ( number ); cout << \"Square root of \" << number << \" = \" << squareRoot ; return 0 ; } Run Code Output Square root of 25 = 5 In this program, the sqrt() library function is used to calculate the square root of a number. The function declaration of sqrt() is defined in the cmath header file. That's why we need to use the code #include <cmath> to use the sqrt() function. To learn more, visit C++ Standard Library functions . C++ User-defined Function Types \u00b6 In this tutorial, you will learn about different approaches you can take to solve a single problem using functions. For better understanding of arguments and return in functions, user-defined functions can be categorised as: Function with no argument and no return value Function with no argument but return value Function with argument but no return value Function with argument and return value Consider a situation in which you have to check prime number. This problem is solved below by making user-defined function in 4 different ways as mentioned above. Example 1: No arguments passed and no return value \u00b6 # include <iostream> using namespace std ; void prime (); int main () { // No argument is passed to prime() prime (); return 0 ; } // Return type of function is void because value is not returned. void prime () { int num , i , flag = 0 ; cout << \"Enter a positive integer enter to check: \" ; cin >> num ; for ( i = 2 ; i <= num / 2 ; ++ i ) { if ( num % i == 0 ) { flag = 1 ; break ; } } if ( flag == 1 ) { cout << num << \" is not a prime number.\" ; } else { cout << num << \" is a prime number.\" ; } } In the above program, prime() is called from the main() with no arguments. prime() takes the positive number from the user and checks whether the number is a prime number or not. Since, return type of prime() is void , no value is returned from the function. Example 2: No arguments passed but a return value \u00b6 #include <iostream> using namespace std ; int prime (); int main () { int num , i , flag = 0 ; // No argument is passed to prime() num = prime (); for ( i = 2 ; i <= num / 2 ; ++ i ) { if ( num % i == 0 ) { flag = 1 ; break ; } } if ( flag == 1 ) { cout << num << \" is not a prime number.\" ; } else { cout << num << \" is a prime number.\" ; } return 0 ; } // Return type of function is int int prime () { int n ; printf ( \"Enter a positive integer to check: \" ); cin >> n ; return n ; } In the above program, prime() function is called from the main() with no arguments. prime() takes a positive integer from the user. Since, return type of the function is an int , it returns the inputted number from the user back to the calling main() function. Then, whether the number is prime or not is checked in the main() itself and printed onto the screen. Example 3: Arguments passed but no return value \u00b6 #include <iostream> using namespace std ; void prime ( int n ); int main () { int num ; cout << \"Enter a positive integer to check: \" ; cin >> num ; // Argument num is passed to the function prime() prime ( num ); return 0 ; } // There is no return value to calling function. Hence, return type of function is void. */ void prime ( int n ) { int i , flag = 0 ; for ( i = 2 ; i <= n / 2 ; ++ i ) { if ( n % i == 0 ) { flag = 1 ; break ; } } if ( flag == 1 ) { cout << n << \" is not a prime number.\" ; } else { cout << n << \" is a prime number.\" ; } } In the above program, positive number is first asked from the user which is stored in the variable num. Then, num is passed to the prime() function where, whether the number is prime or not is checked and printed. Since, the return type of prime() is a void , no value is returned from the function. Example 4: Arguments passed and a return value. \u00b6 #include <iostream> using namespace std ; int prime ( int n ); int main () { int num , flag = 0 ; cout << \"Enter positive integer to check: \" ; cin >> num ; // Argument num is passed to check() function flag = prime ( num ); if ( flag == 1 ) cout << num << \" is not a prime number.\" ; else cout << num << \" is a prime number.\" ; return 0 ; } /* This function returns integer value. */ int prime ( int n ) { int i ; for ( i = 2 ; i <= n / 2 ; ++ i ) { if ( n % i == 0 ) return 1 ; } return 0 ; } In the above program, a positive integer is asked from the user and stored in the variable num . Then, num is passed to the function prime() where, whether the number is prime or not is checked. Since, the return type of prime() is an int , 1 or 0 is returned to the main() calling function. If the number is a prime number, 1 is returned. If not, 0 is returned. Back in the main() function, the returned 1 or 0 is stored in the variable flag, and the corresponding text is printed onto the screen. Which method is better? \u00b6 All four programs above gives the same output and all are technically correct program. There is no hard and fast rule on which method should be chosen. The particular method is chosen depending upon the situation and how you want to solve a problem. C++ Function Overloading \u00b6 In this tutorial, we will learn about the function overloading in C++ with examples. In C++, two functions can have the same name if the number and/or type of arguments passed is different. These functions having the same name but different arguments are known as overloaded functions. For example: // same name different arguments int test () { } int test ( int a ) { } float test ( double a ) { } int test ( int a , double b ) { } Here, all 4 functions are overloaded functions. Notice that the return types of all these 4 functions are not the same. Overloaded functions may or may not have different return types but they must have different arguments. For example, // Error code int test ( int a ) { } double test ( int b ){ } Here, both functions have the same name, the same type, and the same number of arguments. Hence, the compiler will throw an error. Example 1: Overloading Using Different Types of Parameter \u00b6 // Program to compute absolute value // Works for both int and float #include <iostream> using namespace std ; // function with float type parameter float absolute ( float var ){ if ( var < 0.0 ) var = - var ; return var ; } // function with int type parameter int absolute ( int var ) { if ( var < 0 ) var = - var ; return var ; } int main () { // call function with int type parameter cout << \"Absolute value of -5 = \" << absolute ( -5 ) << endl ; // call function with float type parameter cout << \"Absolute value of 5.5 = \" << absolute ( 5.5f ) << endl ; return 0 ; } Run Code Output Absolute value of -5 = 5 Absolute value of 5 .5 = 5 .5 Working of overloading for the absolute() function In this program, we overload the absolute() function. Based on the type of parameter passed during the function call, the corresponding function is called. Example 2: Overloading Using Different Number of Parameters \u00b6 #include <iostream> using namespace std ; // function with 2 parameters void display ( int var1 , double var2 ) { cout << \"Integer number: \" << var1 ; cout << \" and double number: \" << var2 << endl ; } // function with double type single parameter void display ( double var ) { cout << \"Double number: \" << var << endl ; } // function with int type single parameter void display ( int var ) { cout << \"Integer number: \" << var << endl ; } int main () { int a = 5 ; double b = 5.5 ; // call function with int type parameter display ( a ); // call function with double type parameter display ( b ); // call function with 2 parameters display ( a , b ); return 0 ; } Run Code Output Integer number: 5 Float number: 5 .5 Integer number: 5 and double number: 5 .5 Here, the display() function is called three times with different arguments. Depending on the number and type of arguments passed, the corresponding display() function is called. Working of overloading for the display() function The return type of all these functions is the same but that need not be the case for function overloading. Note: In C++, many standard library functions are overloaded. For example, the sqrt() function can take double , float , int, etc. as parameters. This is possible because the sqrt() function is overloaded in C++. C++ Programming Default Arguments (Parameters) \u00b6 In this tutorial, we will learn C++ default arguments and their working with the help of examples. In C++ programming, we can provide default values for function parameters. If a function with default arguments is called without passing arguments, then the default parameters are used. However, if arguments are passed while calling the function, the default arguments are ignored. Working of default arguments \u00b6 How default arguments work in C++ We can understand the working of default arguments from the image above: When temp() is called, both the default parameters are used by the function. When temp(6) is called, the first argument becomes 6 while the default value is used for the second parameter. When temp(6, -2.3) is called, both the default parameters are overridden, resulting in i = 6 and f = -2.3 . When temp(3.4) is passed, the function behaves in an undesired way because the second argument cannot be passed without passing the first argument. Therefore, 3.4 is passed as the first argument. Since the first argument has been defined as int , the value that is actually passed is 3 . Example: Default Argument \u00b6 #include <iostream> using namespace std ; // defining the default arguments void display ( char = '*' , int = 3 ); int main () { int count = 5 ; cout << \"No argument passed: \" ; // *, 3 will be parameters display (); cout << \"First argument passed: \" ; // #, 3 will be parameters display ( '#' ); cout << \"Both arguments passed: \" ; // $, 5 will be parameters display ( '$' , count ); return 0 ; } void display ( char c , int count ) { for ( int i = 1 ; i <= count ; ++ i ) { cout << c ; } cout << endl ; } Run Code Output No argument passed: *** First argument passed: ### Both arguments passed: $$$$ $ Here is how this program works: display() is called without passing any arguments. In this case, display() uses both the default parameters c = '*' and n = 1 . display('#') is called with only one argument. In this case, the first becomes '#' . The second default parameter n = 1 is retained. display('#', count) is called with both arguments. In this case, default arguments are not used. We can also define the default parameters in the function definition itself. The program below is equivalent to the one above. #include <iostream> using namespace std ; // defining the default arguments void display ( char c = '*' , int count = 3 ) { for ( int i = 1 ; i <= count ; ++ i ) { cout << c ; } cout << endl ; } int main () { int count = 5 ; cout << \"No argument passed: \" ; // *, 3 will be parameters display (); cout << \"First argument passed: \" ; // #, 3 will be parameters display ( '#' ); cout << \"Both argument passed: \" ; // $, 5 will be parameters display ( '$' , count ); return 0 ; } \u00b6 Run Code Things to Remember \u00b6 Once we provide a default value for a parameter, all subsequent parameters must also have default values. For example, // Invalid void add ( int a , int b = 3 , int c , int d ); // Invalid void add ( int a , int b = 3 , int c , int d = 4 ); // Valid void add ( int a , int c , int b = 3 , int d = 4 ); If we are defining the default arguments in the function definition instead of the function prototype, then the function must be defined before the function call. // Invalid code int main () { // function call display (); } void display ( char c = '*' , int count = 5 ) { // code } C++ Storage Class \u00b6 In this article, you'll learn about different storage classes in C++. Namely: local, global, static local, register and thread local. Every variable in C++ has two features: type and storage class. Type specifies the type of data that can be stored in a variable. For example: int , float , char etc. And, storage class controls two different properties of a variable: lifetime (determines how long a variable can exist) and scope (determines which part of the program can access it). Depending upon the storage class of a variable, it can be divided into 4 major types: Local variable Global variable Static local variable Register Variable Thread Local Storage Local Variable \u00b6 A variable defined inside a function (defined inside function body between braces) is called a local variable or automatic variable. Its scope is only limited to the function where it is defined. In simple terms, local variable exists and can be accessed only inside a function. The life of a local variable ends (It is destroyed) when the function exits. Example 1: Local variable \u00b6 #include <iostream> using namespace std ; void test (); int main () { // local variable to main() int var = 5 ; test (); // illegal: var1 not declared inside main() var1 = 9 ; } void test () { // local variable to test() int var1 ; var1 = 6 ; // illegal: var not declared inside test() cout << var ; } The variable var cannot be used inside test() and var1 cannot be used inside main() function. Keyword auto was also used for defining local variables before as: auto int var; But, after C++11 auto has a different meaning and should not be used for defining local variables. Global Variable \u00b6 If a variable is defined outside all functions, then it is called a global variable. The scope of a global variable is the whole program. This means, It can be used and changed at any part of the program after its declaration. Likewise, its life ends only when the program ends. Example 2: Global variable \u00b6 #include <iostream> using namespace std ; // Global variable declaration int c = 12 ; void test (); int main () { ++ c ; // Outputs 13 cout << c << endl ; test (); return 0 ; } void test () { ++ c ; // Outputs 14 cout << c ; } Output 13 14 In the above program, c is a global variable. This variable is visible to both functions main() and test() in the above program. Static Local variable \u00b6 Keyword static is used for specifying a static variable. For example: ... .. ... int main () { static float a ; ... .. ... } A static local variable exists only inside a function where it is declared (similar to a local variable) but its lifetime starts when the function is called and ends only when the program ends. The main difference between local variable and static variable is that, the value of static variable persists the end of the program. Example 3: Static local variable \u00b6 #include <iostream> using namespace std ; void test () { // var is a static variable static int var = 0 ; ++ var ; cout << var << endl ; } int main () { test (); test (); return 0 ; } Output 1 2 In the above program, test() function is invoked 2 times. During the first call, variable var is declared as static variable and initialized to 0. Then 1 is added to var which is displayed in the screen. When the function test() returns, variable var still exists because it is a static variable. During second function call, no new variable var is created. The same var is increased by 1 and then displayed to the screen. Output of above program if var was not specified as static variable 1 1 Register Variable (Deprecated in C++11) \u00b6 Keyword register is used for specifying register variables. Register variables are similar to automatic variables and exists inside a particular function only. It is supposed to be faster than the local variables. If a program encounters a register variable, it stores the variable in processor's register rather than memory if available. This makes it faster than the local variables. However, this keyword was deprecated in C++11 and should not be used. Thread Local Storage \u00b6 Thread-local storage is a mechanism by which variables are allocated such that there is one instance of the variable per extant thread. Keyword thread_local is used for this purpose. Learn more about thread local storage . C++ Recursion \u00b6 In this tutorial, we will learn about recursive function in C++ and its working with the help of examples. A function that calls itself is known as a recursive function. And, this technique is known as recursion. Working of Recursion in C++ \u00b6 void recurse () { ... .. ... recurse (); ... .. ... } int main () { ... .. ... recurse (); ... .. ... } The figure below shows how recursion works by calling itself over and over again. How recursion works in C++ programming The recursion continues until some condition is met. To prevent infinite recursion, if...else statement (or similar approach) can be used where one branch makes the recursive call and the other doesn't. Example 1: Factorial of a Number Using Recursion \u00b6 // Factorial of n = 1*2*3*...*n #include <iostream> using namespace std ; int factorial ( int ); int main () { int n , result ; cout << \"Enter a non-negative number: \" ; cin >> n ; result = factorial ( n ); cout << \"Factorial of \" << n << \" = \" << result ; return 0 ; } int factorial ( int n ) { if ( n > 1 ) { return n * factorial ( n - 1 ); } else { return 1 ; } } Run Code Output Enter a non-negative number: 4 Factorial of 4 = 24 Working of Factorial Program \u00b6 How this C++ recursion program works As we can see, the factorial() function is calling itself. However, during each call, we have decreased the value of n by 1 . When n is less than 1 , the factorial() function ultimately returns the output. Advantages and Disadvantages of Recursion \u00b6 Below are the pros and cons of using recursion in C++. Advantages of C++ Recursion \u00b6 It makes our code shorter and cleaner. Recursion is required in problems concerning data structures and advanced algorithms, such as Graph and Tree Traversal. Disadvantages of C++ Recursion \u00b6 It takes a lot of stack space compared to an iterative program. It uses more processor time. It can be more difficult to debug compared to an equivalent iterative program. C++ Return by Reference \u00b6 In this article, you'll learn how to return a value by reference in a function and use it efficiently in your program. In C++ Programming, not only can you pass values by reference to a function but you can also return a value by reference. To understand this feature, you should have the knowledge of: Global variables Example: Return by Reference \u00b6 #include <iostream> using namespace std ; // global variable int num ; // function declaration int & test (); int main () { // assign 5 to num variable // equivalent to num = 5; test () = 5 ; cout << num ; return 0 ; } // function definition // returns the address of num variable int & test () { return num ; } Output 5 In program above, the return type of function test() is int& . Hence, this function returns a reference of the variable num. The return statement is return num; . Unlike return by value, this statement doesn't return value of num, instead it returns the variable itself (address). So, when the variable is returned, it can be assigned a value as done in test() = 5; This stores 5 to the variable num, which is displayed onto the screen. Important Things to Remember When Returning by Reference. \u00b6 Ordinary function returns value but this function doesn't. Hence, you cannot return a constant from the function. int & test () { return 2 ; } You cannot return a local variable from this function. int & test () { int n = 2 ; return n ; } C++ Arrays & String \u00b6 C++ Arrays \u00b6 In this tutorial, we will learn to work with arrays. We will learn to declare, initialize, and access array elements in C++ programming with the help of examples. In C++, an array is a variable that can store multiple values of the same type. For example, Suppose a class has 27 students, and we need to store the grades of all of them. Instead of creating 27 separate variables, we can simply create an array: double grade [ 27 ]; Here, grade is an array that can hold a maximum of 27 elements of double type. In C++, the size and type of arrays cannot be changed after its declaration. C++ Array Declaration \u00b6 dataType arrayName [ arraySize ]; For example, int x [ 6 ]; Here, int - type of element to be stored x - name of the array 6 - size of the array Access Elements in C++ Array \u00b6 In C++, each element in an array is associated with a number. The number is known as an array index. We can access elements of an array by using those indices. // syntax to access array elements array [ index ]; Consider the array x we have seen above. Elements of an array in C++ Few Things to Remember: \u00b6 The array indices start with 0 . Meaning x[0] is the first element stored at index 0 . If the size of an array is n , the last element is stored at index (n-1) . In this example, x[5] is the last element. Elements of an array have consecutive addresses. For example, suppose the starting address of x[0] is 2120 . Then, the address of the next element x[1] will be 2124 , the address of x[2] will be 2128 , and so on. Here, the size of each element is increased by 4 . This is because the size of int is 4 bytes. C++ Array Initialization \u00b6 In C++, it's possible to initialize an array during declaration. For example, // declare and initialize and array int x [ 6 ] = { 19 , 10 , 8 , 17 , 9 , 15 }; C++ Array elements and their data Another method to initialize array during declaration: // declare and initialize an array int x [] = { 19 , 10 , 8 , 17 , 9 , 15 }; Here, we have not mentioned the size of the array. In such cases, the compiler automatically computes the size. C++ Array With Empty Members \u00b6 In C++, if an array has a size n , we can store upto n number of elements in the array. However, what will happen if we store less than n number of elements. For example, // store only 3 elements in the array int x [ 6 ] = { 19 , 10 , 8 }; Here, the array x has a size of 6 . However, we have initialized it with only 3 elements. In such cases, the compiler assigns random values to the remaining places. Oftentimes, this random value is simply 0 . Empty array members are automatically assigned the value 0 How to insert and print array elements? \u00b6 int mark [ 5 ] = { 19 , 10 , 8 , 17 , 9 } // change 4th element to 9 mark [ 3 ] = 9 ; // take input from the user // store the value at third position cin >> mark [ 2 ]; // take input from the user // insert at ith position cin >> mark [ i -1 ]; // print first element of the array cout << mark [ 0 ]; // print ith element of the array cout >> mark [ i -1 ]; Example 1: Displaying Array Elements \u00b6 #include <iostream> using namespace std ; int main () { int numbers [ 5 ] = { 7 , 5 , 6 , 12 , 35 }; cout << \"The numbers are: \" ; // Printing array elements // using range based for loop for ( const int & n : numbers ) { cout << n << \" \" ; } cout << \" \\n The numbers are: \" ; // Printing array elements // using traditional for loop for ( int i = 0 ; i < 5 ; ++ i ) { cout << numbers [ i ] << \" \" ; } return 0 ; } Run Code Output The numbers are: 7 5 6 12 35 The numbers are: 7 5 6 12 35 Here, we have used a for loop to iterate from i = 0 to i = 4 . In each iteration, we have printed numbers[i] . We again used a range-based for loop to print out the elements of the array. To learn more about this loop, check C++ Ranged for Loop . Note: In our range-based loop, we have used the code const int &n instead of int n as the range declaration. However, the const int &n is more preferred because: Using int n simply copies the array elements to the variable n during each iteration. This is not memory-efficient. &n, however, uses the memory address of the array elements to access their data without copying them to a new variable. This is memory-efficient. We are simply printing the array elements, not modifying them. Therefore, we use const so as not to accidentally change the values of the array. Example 2: Take Inputs from User and Store Them in an Array \u00b6 #include <iostream> using namespace std ; int main () { int numbers [ 5 ]; cout << \"Enter 5 numbers: \" << endl ; // store input from user to array for ( int i = 0 ; i < 5 ; ++ i ) { cin >> numbers [ i ]; } cout << \"The numbers are: \" ; // print array elements for ( int n = 0 ; n < 5 ; ++ n ) { cout << numbers [ n ] << \" \" ; } return 0 ; } Run Code Output Enter 5 numbers: 11 12 13 14 15 The numbers are: 11 12 13 14 15 Once again, we have used a for loop to iterate from i = 0 to i = 4 . In each iteration, we took an input from the user and stored it in numbers[i] . Then, we used another for loop to print all the array elements. Example 3: Display Sum and Average of Array Elements Using for Loop \u00b6 #include <iostream> using namespace std ; int main () { // initialize an array without specifying size double numbers [] = { 7 , 5 , 6 , 12 , 35 , 27 }; double sum = 0 ; double count = 0 ; double average ; cout << \"The numbers are: \" ; // print array elements // use of range-based for loop for ( const double & n : numbers ) { cout << n << \" \" ; // calculate the sum sum += n ; // count the no. of array elements ++ count ; } // print the sum cout << \" \\n Their Sum = \" << sum << endl ; // find the average average = sum / count ; cout << \"Their Average = \" << average << endl ; return 0 ; } Run Code Output The numbers are: 7 5 6 12 35 27 Their Sum = 92 Their Average = 15 .3333 In this program: We have initialized a double array named numbers but without specifying its size. We also declared three double variables sum, count, and average. Here, sum =0 and count = 0 . Then we used a range-based for loop to print the array elements. In each iteration of the loop, we add the current array element to sum. We also increase the value of count by 1 in each iteration, so that we can get the size of the array by the end of the for loop. After printing all the elements, we print the sum and the average of all the numbers. The average of the numbers is given by average = sum / count; Note: We used a ranged for loop instead of a normal for loop. A normal for loop requires us to specify the number of iterations, which is given by the size of the array. But a ranged for loop does not require such specifications. C++ Array Out of Bounds \u00b6 If we declare an array of size 10 , then the array will contain elements from index 0 to 9 . However, if we try to access the element at index 10 or more than 10 , it will result in Undefined Behaviour. C++ Multidimensional Arrays \u00b6 In this tutorial, we'll learn about multi-dimensional arrays in C++. More specifically, how to declare them, access them, and use them efficiently in our program. In C++, we can create an array of an array, known as a multidimensional array. For example: int x [ 3 ][ 4 ]; Here, x is a two-dimensional array. It can hold a maximum of 12 elements. We can think of this array as a table with 3 rows and each row has 4 columns as shown below. Elements in two-dimensional array in C++ Programming Three-dimensional arrays also work in a similar way. For example: float x [ 2 ][ 4 ][ 3 ]; This array x can hold a maximum of 24 elements. We can find out the total number of elements in the array simply by multiplying its dimensions: 2 x 4 x 3 = 24 Multidimensional Array Initialization \u00b6 Like a normal array, we can initialize a multidimensional array in more than one way. 1. Initialization of two-dimensional array \u00b6 int test [ 2 ][ 3 ] = { 2 , 4 , 5 , 9 , 0 , 19 }; The above method is not preferred. A better way to initialize this array with the same array elements is given below: int test [ 2 ][ 3 ] = { { 2 , 4 , 5 }, { 9 , 0 , 19 }}; This array has 2 rows and 3 columns, which is why we have two rows of elements with 3 elements each. Initializing a two-dimensional array in C++ 2. Initialization of three-dimensional array \u00b6 int test [ 2 ][ 3 ][ 4 ] = { 3 , 4 , 2 , 3 , 0 , -3 , 9 , 11 , 23 , 12 , 23 , 2 , 13 , 4 , 56 , 3 , 5 , 9 , 3 , 5 , 5 , 1 , 4 , 9 }; This is not a good way of initializing a three-dimensional array. A better way to initialize this array is: int test [ 2 ][ 3 ][ 4 ] = { { { 3 , 4 , 2 , 3 }, { 0 , -3 , 9 , 11 }, { 23 , 12 , 23 , 2 } }, { { 13 , 4 , 56 , 3 }, { 5 , 9 , 3 , 5 }, { 5 , 1 , 4 , 9 } } }; Notice the dimensions of this three-dimensional array. The first dimension has the value 2 . So, the two elements comprising the first dimension are: Element 1 = { { 3 , 4 , 2 , 3 }, { 0 , -3 , 9 , 11 }, { 23 , 12 , 23 , 2 } } Element 2 = { { 13 , 4 , 56 , 3 }, { 5 , 9 , 3 , 5 }, { 5 , 1 , 4 , 9 } } The second dimension has the value 3 . Notice that each of the elements of the first dimension has three elements each: { 3 , 4 , 2 , 3 }, { 0 , -3 , 9 , 11 } and { 23 , 12 , 23 , 2 } for Element 1. { 13 , 4 , 56 , 3 }, { 5 , 9 , 3 , 5 } and { 5 , 1 , 4 , 9 } for Element 2. Finally, there are four int numbers inside each of the elements of the second dimension: { 3 , 4 , 2 , 3 } { 0 , -3 , 9 , 11 } ... .. ... ... .. ... Example 1: Two Dimensional Array \u00b6 // C++ Program to display all elements // of an initialised two dimensional array #include <iostream> using namespace std ; int main () { int test [ 3 ][ 2 ] = {{ 2 , -5 }, { 4 , 0 }, { 9 , 1 }}; // use of nested for loop // access rows of the array for ( int i = 0 ; i < 3 ; ++ i ) { // access columns of the array for ( int j = 0 ; j < 2 ; ++ j ) { cout << \"test[\" << i << \"][\" << j << \"] = \" << test [ i ][ j ] << endl ; } } return 0 ; } Run Code Output test [ 0 ][ 0 ] = 2 test [ 0 ][ 1 ] = -5 test [ 1 ][ 0 ] = 4 test [ 1 ][ 1 ] = 0 test [ 2 ][ 0 ] = 9 test [ 2 ][ 1 ] = 1 In the above example, we have initialized a two-dimensional int array named test that has 3 \"rows\" and 2 \"columns\". Here, we have used the nested for loop to display the array elements. the outer loop from i == 0 to i == 2 access the rows of the array the inner loop from j == 0 to j == 1 access the columns of the array Finally, we print the array elements in each iteration. Example 2: Taking Input for Two Dimensional Array \u00b6 #include <iostream> using namespace std ; int main () { int numbers [ 2 ][ 3 ]; cout << \"Enter 6 numbers: \" << endl ; // Storing user input in the array for ( int i = 0 ; i < 2 ; ++ i ) { for ( int j = 0 ; j < 3 ; ++ j ) { cin >> numbers [ i ][ j ]; } } cout << \"The numbers are: \" << endl ; // Printing array elements for ( int i = 0 ; i < 2 ; ++ i ) { for ( int j = 0 ; j < 3 ; ++ j ) { cout << \"numbers[\" << i << \"][\" << j << \"]: \" << numbers [ i ][ j ] << endl ; } } return 0 ; } Run Code Output Enter 6 numbers: 1 2 3 4 5 6 The numbers are: numbers [ 0 ][ 0 ] : 1 numbers [ 0 ][ 1 ] : 2 numbers [ 0 ][ 2 ] : 3 numbers [ 1 ][ 0 ] : 4 numbers [ 1 ][ 1 ] : 5 numbers [ 1 ][ 2 ] : 6 Here, we have used a nested for loop to take the input of the 2d array. Once all the input has been taken, we have used another nested for loop to print the array members. Example 3: Three Dimensional Array \u00b6 // C++ Program to Store value entered by user in // three dimensional array and display it. #include <iostream> using namespace std ; int main () { // This array can store upto 12 elements (2x3x2) int test [ 2 ][ 3 ][ 2 ] = { { { 1 , 2 }, { 3 , 4 }, { 5 , 6 } }, { { 7 , 8 }, { 9 , 10 }, { 11 , 12 } } }; // Displaying the values with proper index. for ( int i = 0 ; i < 2 ; ++ i ) { for ( int j = 0 ; j < 3 ; ++ j ) { for ( int k = 0 ; k < 2 ; ++ k ) { cout << \"test[\" << i << \"][\" << j << \"][\" << k << \"] = \" << test [ i ][ j ][ k ] << endl ; } } } return 0 ; } Run Code Output test [ 0 ][ 0 ][ 0 ] = 1 test [ 0 ][ 0 ][ 1 ] = 2 test [ 0 ][ 1 ][ 0 ] = 3 test [ 0 ][ 1 ][ 1 ] = 4 test [ 0 ][ 2 ][ 0 ] = 5 test [ 0 ][ 2 ][ 1 ] = 6 test [ 1 ][ 0 ][ 0 ] = 7 test [ 1 ][ 0 ][ 1 ] = 8 test [ 1 ][ 1 ][ 0 ] = 9 test [ 1 ][ 1 ][ 1 ] = 10 test [ 1 ][ 2 ][ 0 ] = 11 test [ 1 ][ 2 ][ 1 ] = 12 The basic concept of printing elements of a 3d array is similar to that of a 2d array. However, since we are manipulating 3 dimensions, we use a nested for loop with 3 total loops instead of just 2: the outer loop from i == 0 to i == 1 accesses the first dimension of the array the middle loop from j == 0 to j == 2 accesses the second dimension of the array the innermost loop from k == 0 to k == 1 accesses the third dimension of the array As we can see, the complexity of the array increases exponentially with the increase in dimensions. Passing Array to a Function in C++ Programming \u00b6 In this tutorial, we will learn how to pass a single-dimensional and multidimensional array as a function parameter in C++ with the help of examples. In C++, we can pass arrays as an argument to a function. And, also we can return arrays from a function. Before you learn about passing arrays as a function argument, make sure you know about C++ Arrays and C++ Functions . Syntax for Passing Arrays as Function Parameters \u00b6 The syntax for passing an array to a function is: returnType functionName ( dataType arrayName [ arraySize ]) { // code } Let's see an example, int total ( int marks [ 5 ]) { // code } Here, we have passed an int type array named marks to the function total() . The size of the array is 5. Example 1: Passing One-dimensional Array to a Function \u00b6 // C++ Program to display marks of 5 students #include <iostream> using namespace std ; // declare function to display marks // take a 1d array as parameter void display ( int m [ 5 ]) { cout << \"Displaying marks: \" << endl ; // display array elements for ( int i = 0 ; i < 5 ; ++ i ) { cout << \"Student \" << i + 1 << \": \" << m [ i ] << endl ; } } int main () { // declare and initialize an array int marks [ 5 ] = { 88 , 76 , 90 , 61 , 69 }; // call display function // pass array as argument display ( marks ); return 0 ; } Run Code Output Displaying marks: Student 1 : 88 Student 2 : 76 Student 3 : 90 Student 4 : 61 Student 5 : 69 Here, When we call a function by passing an array as the argument, only the name of the array is used. display ( marks ); Here, the argument marks represent the memory address of the first element of array marks[5]. However, notice the parameter of the display() function. void display ( int m [ 5 ]) Here, we use the full declaration of the array in the function parameter, including the square braces [] . The function parameter int m[5] converts to int* m; . This points to the same address pointed by the array marks. This means that when we manipulate m[5] in the function body, we are actually manipulating the original array marks. C++ handles passing an array to a function in this way to save memory and time. Passing Multidimensional Array to a Function \u00b6 We can also pass Multidimensional arrays as an argument to the function. For example, Example 2: Passing Multidimensional Array to a Function \u00b6 // C++ Program to display the elements of two // dimensional array by passing it to a function #include <iostream> using namespace std ; // define a function // pass a 2d array as a parameter void display ( int n [][ 2 ]) { cout << \"Displaying Values: \" << endl ; for ( int i = 0 ; i < 3 ; ++ i ) { for ( int j = 0 ; j < 2 ; ++ j ) { cout << \"num[\" << i << \"][\" << j << \"]: \" << n [ i ][ j ] << endl ; } } } int main () { // initialize 2d array int num [ 3 ][ 2 ] = { { 3 , 4 }, { 9 , 5 }, { 7 , 1 } }; // call the function // pass a 2d array as an argument display ( num ); return 0 ; } Run Code Output Displaying Values: num [ 0 ][ 0 ] : 3 num [ 0 ][ 1 ] : 4 num [ 1 ][ 0 ] : 9 num [ 1 ][ 1 ] : 5 num [ 2 ][ 0 ] : 7 num [ 2 ][ 1 ] : 1 In the above program, we have defined a function named display() . The function takes a two dimensional array, int n[][2] as its argument and prints the elements of the array. While calling the function, we only pass the name of the two dimensional array as the function argument display(num) . Note : It is not mandatory to specify the number of rows in the array. However, the number of columns should always be specified. This is why we have used int n[][2] . We can also pass arrays with more than 2 dimensions as a function argument. C++ Returning an Array From a Function \u00b6 We can also return an array from the function. However, the actual array is not returned. Instead the address of the first element of the array is returned with the help of pointers . We will learn about returning arrays from a function in the coming tutorials. C++ Strings \u00b6 In this tutorial, you'll learn to handle strings in C++. You'll learn to declare them, initialize them and use them for various input/output operations. String is a collection of characters. There are two types of strings commonly used in C++ programming language: Strings that are objects of string class (The Standard C++ Library string class) C-strings (C-style Strings) C-strings \u00b6 In C programming, the collection of characters is stored in the form of arrays. This is also supported in C++ programming. Hence it's called C-strings. C-strings are arrays of type char terminated with null character, that is, \\0 (ASCII value of null character is 0). How to define a C-string? \u00b6 char str [] = \"C++\" ; In the above code, str is a string and it holds 4 characters. Although, \" C++ \" has 3 character, the null character \\0 is added to the end of the string automatically. Alternative ways of defining a string \u00b6 char str [ 4 ] = \"C++\" ; char str [] = { 'C' , '+' , '+' , '\\0' }; char str [ 4 ] = { 'C' , '+' , '+' , '\\0' }; Like arrays, it is not necessary to use all the space allocated for the string. For example: char str [ 100 ] = \"C++\" ; Example 1: C++ String to read a word \u00b6 C++ program to display a string entered by user. #include <iostream> using namespace std ; int main () { char str [ 100 ]; cout << \"Enter a string: \" ; cin >> str ; cout << \"You entered: \" << str << endl ; cout << \" \\n Enter another string: \" ; cin >> str ; cout << \"You entered: \" << str << endl ; return 0 ; } Output Enter a string: C++ You entered: C++ Enter another string: Programming is fun. You entered: Programming Notice that, in the second example only \"Programming\" is displayed instead of \"Programming is fun\". This is because the extraction operator >> works as scanf() in C and considers a space \" \" has a terminating character. Example 2: C++ String to read a line of text \u00b6 C++ program to read and display an entire line entered by user. #include <iostream> using namespace std ; int main () { char str [ 100 ]; cout << \"Enter a string: \" ; cin . get ( str , 100 ); cout << \"You entered: \" << str << endl ; return 0 ; } Output Enter a string: Programming is fun. You entered: Programming is fun. To read the text containing blank space, cin.get function can be used. This function takes two arguments. First argument is the name of the string (address of first element of string) and second argument is the maximum size of the array. In the above program, str is the name of the string and 100 is the maximum size of the array. string Object \u00b6 In C++, you can also create a string object for holding strings. Unlike using char arrays, string objects has no fixed length, and can be extended as per your requirement. Example 3: C++ string using string data type \u00b6 #include <iostream> using namespace std ; int main () { // Declaring a string object string str ; cout << \"Enter a string: \" ; getline ( cin , str ); cout << \"You entered: \" << str << endl ; return 0 ; } Output Enter a string: Programming is fun. You entered: Programming is fun. In this program, a string str is declared. Then the string is asked from the user. Instead of using cin>> or cin.get() function, you can get the entered line of text using getline() . getline() function takes the input stream as the first parameter which is cin and str as the location of the line to be stored. Passing String to a Function \u00b6 Strings are passed to a function in a similar way arrays are passed to a function . #include <iostream> using namespace std ; void display ( char * ); void display ( string ); int main () { string str1 ; char str [ 100 ]; cout << \"Enter a string: \" ; getline ( cin , str1 ); cout << \"Enter another string: \" ; cin . get ( str , 100 , '\\n' ); display ( str1 ); display ( str ); return 0 ; } void display ( char s []) { cout << \"Entered char array is: \" << s << endl ; } void display ( string s ) { cout << \"Entered string is: \" << s << endl ; } Output Enter a string: Programming is fun. Enter another string: Really? Entered string is: Programming is fun. Entered char array is: Really? In the above program, two strings are asked to enter. These are stored in str and str1 respectively, where str is a char array and str1 is a string object. Then, we have two functions display() that outputs the string onto the string. The only difference between the two functions is the parameter. The first display() function takes char array as a parameter, while the second takes string as a parameter. This process is known as function overloading. Learn more about Function Overloading . C++ Structures \u00b6 C++ Structures \u00b6 In this article, you'll learn about structures in C++ programming; what is it, how to define it and use it in your program. Structure is a collection of variables of different data types under a single name. It is similar to a class in that, both holds a collecion of data of different data types. For example: You want to store some information about a person: his/her name, citizenship number and salary. You can easily create different variables name, citNo, salary to store these information separately. However, in the future, you would want to store information about multiple persons. Now, you'd need to create different variables for each information per person: name1, citNo1, salary1, name2, citNo2, salary2 You can easily visualize how big and messy the code would look. Also, since no relation between the variables (information) would exist, it's going to be a daunting task. A better approach will be to have a collection of all related information under a single name Person , and use it for every person. Now, the code looks much cleaner, readable and efficient as well. This collection of all related information under a single name Person is a structure. How to declare a structure in C++ programming? \u00b6 The struct keyword defines a structure type followed by an identifier (name of the structure). Then inside the curly braces, you can declare one or more members (declare variables inside curly braces) of that structure. For example: struct Person { char name [ 50 ]; int age ; float salary ; }; Here a structure person is defined which has three members: name, age and salary. When a structure is created, no memory is allocated. The structure definition is only the blueprint for the creating of variables. You can imagine it as a datatype. When you define an integer as below: int foo ; The int specifies that, variable foo can hold integer element only. Similarly, structure definition only specifies that, what property a structure variable holds when it is defined. Note: Remember to end the declaration with a semicolon (;) How to define a structure variable? \u00b6 Once you declare a structure person as above. You can define a structure variable as: Person bill; Here, a structure variable bill is defined which is of type structure P erson . When structure variable is defined, only then the required memory is allocated by the compiler. Considering you have either 32-bit or 64-bit system, the memory of float is 4 bytes, memory of int is 4 bytes and memory of char is 1 byte. Hence, 58 bytes of memory is allocated for structure variable bill. How to access members of a structure? \u00b6 The members of structure variable is accessed using a dot (.) operator. Suppose, you want to access age of structure variable bill and assign it 50 to it. You can perform this task by using following code below: bill . age = 50 ; Example: C++ Structure \u00b6 C++ Program to assign data to members of a structure variable and display it. #include <iostream> using namespace std ; struct Person { char name [ 50 ]; int age ; float salary ; }; int main () { Person p1 ; cout << \"Enter Full name: \" ; cin . get ( p1 . name , 50 ); cout << \"Enter age: \" ; cin >> p1 . age ; cout << \"Enter salary: \" ; cin >> p1 . salary ; cout << \" \\n Displaying Information.\" << endl ; cout << \"Name: \" << p1 . name << endl ; cout << \"Age: \" << p1 . age << endl ; cout << \"Salary: \" << p1 . salary ; return 0 ; } Output Enter Full name: Magdalena Dankova Enter age: 27 Enter salary: 1024 .4 Displaying Information. Name: Magdalena Dankova Age: 27 Salary: 1024 .4 Here a structure Person is declared which has three members name, age and salary. Inside main() function , a structure variable p1 is defined. Then, the user is asked to enter information and data entered by user is displayed. You should also check out these structure related tutorials: How to pass structures to functions? How to use pointers with structures? C++ Structure and Function \u00b6 In this article, you'll find relevant examples to pass structures as an argument to a function, and use them in your program. Structure variables can be passed to a function and returned in a similar way as normal arguments. Passing structure to function in C++ \u00b6 A structure variable can be passed to a function in similar way as normal argument. Consider this example: Example 1: C++ Structure and Function \u00b6 #include <iostream> using namespace std ; struct Person { char name [ 50 ]; int age ; float salary ; }; void displayData ( Person ); // Function declaration int main () { Person p ; cout << \"Enter Full name: \" ; cin . get ( p . name , 50 ); cout << \"Enter age: \" ; cin >> p . age ; cout << \"Enter salary: \" ; cin >> p . salary ; // Function call with structure variable as an argument displayData ( p ); return 0 ; } void displayData ( Person p ) { cout << \" \\n Displaying Information.\" << endl ; cout << \"Name: \" << p . name << endl ; cout << \"Age: \" << p . age << endl ; cout << \"Salary: \" << p . salary ; } Output Enter Full name: Bill Jobs Enter age: 55 Enter salary: 34233 .4 Displaying Information. Name: Bill Jobs Age: 55 Salary: 34233 .4 In this program, user is asked to enter the name, age and salary of a Person inside main() function. Then, the structure variable p is to passed to a function using. displayData(p); The return type of displayData() is void and a single argument of type structure Person is passed. Then the members of structure p is displayed from this function. Example 2: Returning structure from function in C++ \u00b6 #include <iostream> using namespace std ; struct Person { char name [ 50 ]; int age ; float salary ; }; Person getData ( Person ); void displayData ( Person ); int main () { Person p , temp ; temp = getData ( p ); p = temp ; displayData ( p ); return 0 ; } Person getData ( Person p ) { cout << \"Enter Full name: \" ; cin . get ( p . name , 50 ); cout << \"Enter age: \" ; cin >> p . age ; cout << \"Enter salary: \" ; cin >> p . salary ; return p ; } void displayData ( Person p ) { cout << \" \\n Displaying Information.\" << endl ; cout << \"Name: \" << p . name << endl ; cout << \"Age: \" << p . age << endl ; cout << \"Salary: \" << p . salary ; } The output of this program is the same as the program above. In this program, we have created two structure variables p and temp of type Person under the main() function. The structure variable p is passed to getData() function which takes input from the user which is then stored in the temp variable. temp = getData ( p ); We then assign the value of temp to p. p = temp ; Then the structure variable p is passed to displayData() function, which displays the information. Note: We don't really need to use the temp variable for most compilers and C++ versions. Instead, we can simply use the following code: p = getData ( p ); C++ Pointers to Structure \u00b6 In this article, you'll find relevant examples that will help you to work with pointers to access data within a structure. A pointer variable can be created not only for native types like ( int , float , double etc.) but they can also be created for user defined types like structure . If you do not know what pointers are, visit C++ pointers . Here is how you can create pointer for structures: #include <iostream> using namespace std ; struct temp { int i ; float f ; }; int main () { temp * ptr ; return 0 ; } This program creates a pointer ptr of type structure temp. Example: Pointers to Structure \u00b6 #include <iostream> using namespace std ; struct Distance { int feet ; float inch ; }; int main () { Distance * ptr , d ; ptr = & d ; cout << \"Enter feet: \" ; cin >> ( * ptr ). feet ; cout << \"Enter inch: \" ; cin >> ( * ptr ). inch ; cout << \"Displaying information.\" << endl ; cout << \"Distance = \" << ( * ptr ). feet << \" feet \" << ( * ptr ). inch << \" inches\" ; return 0 ; } Output Enter feet: 4 Enter inch: 3 .5 Displaying information. Distance = 4 feet 3 .5 inches In this program, a pointer variable ptr and normal variable d of type structure Distance is defined. The address of variable d is stored to pointer variable, that is, ptr is pointing to variable d. Then, the member function of variable d is accessed using pointer. Notes: Since pointer ptr is pointing to variable d in this program, (*ptr).inch and d.inch are equivalent. Similarly, (*ptr).feet and d.feet are equivalent. However, if we are using pointers, it is far more preferable to access struct members using the -> operator, since the . operator has a higher precedence than the * operator. Hence, we enclose *ptr in brackets when using (*ptr).inch . Because of this, it is easier to make mistakes if both operators are used together in a single code. ptr -> feet is same as ( * ptr ). feet ptr -> inch is same as ( * ptr ). inc C++ Enumeration \u00b6 In this article, you will learn to work with enumeration (enum). Also, you will learn where enums are commonly used in C++ programming. An enumeration is a user-defined data type that consists of integral constants. To define an enumeration, keyword enum is used. enum season { spring , summer , autumn , winter }; Here, the name of the enumeration is season. And, spring, summer and winter are values of type season. By default, spring is 0, summer is 1 and so on. You can change the default value of an enum element during declaration (if necessary). enum season { spring = 0 , summer = 4 , autumn = 8 , winter = 12 }; Enumerated Type Declaration \u00b6 When you create an enumerated type, only blueprint for the variable is created. Here's how you can create variables of enum type. enum boolean { false , true }; // inside function enum boolean check ; Here, a variable check of type enum boolean is created. Here is another way to declare same check variable using different syntax. enum boolean { false , true } check ; Example 1: Enumeration Type \u00b6 #include <iostream> using namespace std ; enum week { Sunday , Monday , Tuesday , Wednesday , Thursday , Friday , Saturday }; int main () { week today ; today = Wednesday ; cout << \"Day \" << today + 1 ; return 0 ; } Output Day 4 Example2: Changing Default Value of Enums \u00b6 #include <iostream> using namespace std ; enum seasons { spring = 34 , summer = 4 , autumn = 9 , winter = 32 }; int main () { seasons s ; s = summer ; cout << \"Summer = \" << s << endl ; return 0 ; } Output Summer = 4 Why enums are used in C++ programming? \u00b6 An enum variable takes only one value out of many possible values. Example to demonstrate it, #include <iostream> using namespace std ; enum suit { club = 0 , diamonds = 10 , hearts = 20 , spades = 3 } card ; int main () { card = club ; cout << \"Size of enum variable \" << sizeof ( card ) << \" bytes.\" ; return 0 ; } Output Size of enum variable 4 bytes. It's because the size of an integer is 4 bytes.; This makes enum a good choice to work with flags. You can accomplish the same task using C++ structures . However, working with enums gives you efficiency along with flexibility. How to use enums for flags? \u00b6 Let us take an example, enum designFlags { ITALICS = 1 , BOLD = 2 , UNDERLINE = 4 } button ; Suppose you are designing a button for Windows application. You can set flags ITALICS, BOLD and UNDERLINE to work with text. There is a reason why all the integral constants are power of 2 in above pseudocode. // In binary ITALICS = 00000001 BOLD = 00000010 UNDERLINE = 00000100 Since, the integral constants are power of 2, you can combine two or more flags at once without overlapping using bitwise OR | operator. This allows you to choose two or more flags at once. For example, #include <iostream> using namespace std ; enum designFlags { BOLD = 1 , ITALICS = 2 , UNDERLINE = 4 }; int main () { int myDesign = BOLD | UNDERLINE ; // 00000001 // | 00000100 // ___________ // 00000101 cout << myDesign ; return 0 ; } Output 5 When the output is 5, you always know that bold and underline is used. Also, you can add flag to your requirements. if ( myDesign & ITALICS ) { // code for italics } Here, we have added italics to our design. Note, only code for italics is written inside the if statement . You can accomplish almost anything in C++ programming without using enumerations. However, they can be pretty handy in certain situations. That's what differentiates good programmers from great programmers. C++ Classes and Objects \u00b6 In this tutorial, we will learn about objects and classes and how to use them in C++ with the help of examples. In previous tutorials, we learned about functions and variables. Sometimes it's desirable to put related functions and data in one place so that it's logical and easier to work with. Suppose, we need to store the length, breadth, and height of a rectangular room and calculate its area and volume. To handle this task, we can create three variables, say, length, breadth, and height along with the functions calculateArea() and calculateVolume() . However, in C++, rather than creating separate variables and functions, we can also wrap these related data and functions in a single place (by creating objects ). This programming paradigm is known as object-oriented programming. But before we can create objects and use them in C++, we first need to learn about classes . C++ Class \u00b6 A class is a blueprint for the object. We can think of a class as a sketch (prototype) of a house. It contains all the details about the floors, doors, windows, etc. Based on these descriptions we build the house. House is the object. Create a Class \u00b6 A class is defined in C++ using keyword class followed by the name of the class. The body of the class is defined inside the curly brackets and terminated by a semicolon at the end. class className { // some data // some functions }; For example, class Room { public: double length; double breadth; double height; double calculateArea(){ return length * breadth; } double calculateVolume(){ return length * breadth * height; } }; Here, we defined a class named Room . The variables length, breadth, and height declared inside the class are known as data members . And, the functions calculateArea() and calculateVolume() are known as member functions of a class. C++ Objects \u00b6 When a class is defined, only the specification for the object is defined; no memory or storage is allocated. To use the data and access functions defined in the class, we need to create objects. Syntax to Define Object in C++ \u00b6 className objectVariableName ; We can create objects of Room class (defined in the above example) as follows: // sample function void sampleFunction () { // create objects Room room1 , room2 ; } int main (){ // create objects Room room3 , room4 ; } Here, two objects room1 and room2 of the Room class are created in sampleFunction() . Similarly, the objects room3 and room4 are created in main() . As we can see, we can create objects of a class in any function of the program. We can also create objects of a class within the class itself, or in other classes. Also, we can create as many objects as we want from a single class. C++ Access Data Members and Member Functions \u00b6 We can access the data members and member functions of a class by using a . (dot) operator. For example, room2 . calculateArea (); This will call the calculateArea() function inside the Room class for object room2. Similarly, the data members can be accessed as: room1 . length = 5.5 ; In this case, it initializes the length variable of room1 to 5.5 . Example 1: Object and Class in C++ Programming \u00b6 // Program to illustrate the working of // objects and class in C++ Programming #include <iostream> using namespace std ; // create a class class Room { public : double length ; double breadth ; double height ; double calculateArea () { return length * breadth ; } double calculateVolume () { return length * breadth * height ; } }; int main () { // create object of Room class Room room1 ; // assign values to data members room1 . length = 42.5 ; room1 . breadth = 30.8 ; room1 . height = 19.2 ; // calculate and display the area and volume of the room cout << \"Area of Room = \" << room1 . calculateArea () << endl ; cout << \"Volume of Room = \" << room1 . calculateVolume () << endl ; return 0 ; } Run Code Output Area of Room = 1309 Volume of Room = 25132 .8 In this program, we have used the Room class and its object room1 to calculate the area and volume of a room. In main() , we assigned the values of length, breadth, and height with the code: room1 . length = 42.5 ; room1 . breadth = 30.8 ; room1 . height = 19.2 ; We then called the functions calculateArea() and calculateVolume() to perform the necessary calculations. Note the use of the keyword public in the program. This means the members are public and can be accessed anywhere from the program. As per our needs, we can also create private members using the private keyword. The private members of a class can only be accessed from within the class. For example, class Test { private : int a ; void function1 () { } public : int b ; void function2 () { } } Here, a and function1() are private. Thus they cannot be accessed from outside the class. On the other hand, b and function2() are accessible from everywhere in the program. To learn more about public and private keywords, please visit our C++ Class Access Modifiers tutorial. Example 2: Using public and private in C++ Class \u00b6 // Program to illustrate the working of // public and private in C++ Class #include <iostream> using namespace std ; class Room { private : double length ; double breadth ; double height ; public : // function to initialize private variables void initData ( double len , double brth , double hgt ) { length = len ; breadth = brth ; height = hgt ; } double calculateArea () { return length * breadth ; } double calculateVolume () { return length * breadth * height ; } }; int main () { // create object of Room class Room room1 ; // pass the values of private variables as arguments room1 . initData ( 42.5 , 30.8 , 19.2 ); cout << \"Area of Room = \" << room1 . calculateArea () << endl ; cout << \"Volume of Room = \" << room1 . calculateVolume () << endl ; return 0 ; } Run Code Output Area of Room = 1309 Volume of Room = 25132 .8 The above example is nearly identical to the first example, except that the class variables are now private. Since the variables are now private, we cannot access them directly from main() . Hence, using the following code would be invalid: // invalid code obj . length = 42.5 ; obj . breadth = 30.8 ; obj . height = 19.2 ; Instead, we use the public function initData() to initialize the private variables via the function parameters double len , double brth , and double hgt . To learn more on objects and classes, visit these topics: C++ Constructors How to pass and return an object from a function? C++ Constructors \u00b6 In this tutorial, we will learn about the C++ constructor and its type with the help examples. A constructor is a special type of member function that is called automatically when an object is created. In C++, a constructor has the same name as that of the class and it does not have a return type. For example, class Wall { public : // create a constructor Wall () { // code } }; Here, the function Wall() is a constructor of the class Wall . Notice that the constructor has the same name as the class, does not have a return type, and is public C++ Default Constructor \u00b6 A constructor with no parameters is known as a default constructor . In the example above, Wall() is a default constructor. Example 1: C++ Default Constructor \u00b6 // C++ program to demonstrate the use of default constructor #include <iostream> using namespace std ; // declare a class class Wall { private : double length ; public : // default constructor to initialize variable Wall () { length = 5.5 ; cout << \"Creating a wall.\" << endl ; cout << \"Length = \" << length << endl ; } }; int main () { Wall wall1 ; return 0 ; } Run Code Output Creating a Wall Length = 5 .5 Here, when the wall1 object is created, the Wall() constructor is called. This sets the length variable of the object to 5.5 . Note: If we have not defined a constructor in our class, then the C++ compiler will automatically create a default constructor with an empty code and no parameters. C++ Parameterized Constructor \u00b6 In C++, a constructor with parameters is known as a parameterized constructor. This is the preferred method to initialize member data. Example 2: C++ Parameterized Constructor \u00b6 // C++ program to calculate the area of a wall #include <iostream> using namespace std ; // declare a class class Wall { private : double length ; double height ; public : // parameterized constructor to initialize variables Wall ( double len , double hgt ) { length = len ; height = hgt ; } double calculateArea () { return length * height ; } }; int main () { // create object and initialize data members Wall wall1 ( 10.5 , 8.6 ); Wall wall2 ( 8.5 , 6.3 ); cout << \"Area of Wall 1: \" << wall1 . calculateArea () << endl ; cout << \"Area of Wall 2: \" << wall2 . calculateArea (); return 0 ; } Run Code Output Area of Wall 1 : 90 .3 Area of Wall 2 : 53 .55 Here, we have created a parameterized constructor Wall() that has 2 parameters: double len and double hgt . The values contained in these parameters are used to initialize the member variables length and height. When we create an object of the Wall class, we pass the values for the member variables as arguments. The code for this is: Wall wall1 ( 10.5 , 8.6 ); Wall wall2 ( 8.5 , 6.3 ); With the member variables thus initialized, we can now calculate the area of the wall with the calculateArea() function. C++ Copy Constructor \u00b6 The copy constructor in C++ is used to copy data of one object to another. Example 3: C++ Copy Constructor \u00b6 #include <iostream> using namespace std ; // declare a class class Wall { private : double length ; double height ; public : // initialize variables with parameterized constructor Wall ( double len , double hgt ) { length = len ; height = hgt ; } // copy constructor with a Wall object as parameter // copies data of the obj parameter Wall ( Wall & obj ) { length = obj . length ; height = obj . height ; } double calculateArea () { return length * height ; } }; int main () { // create an object of Wall class Wall wall1 ( 10.5 , 8.6 ); // copy contents of wall1 to wall2 Wall wall2 = wall1 ; // print areas of wall1 and wall2 cout << \"Area of Wall 1: \" << wall1 . calculateArea () << endl ; cout << \"Area of Wall 2: \" << wall2 . calculateArea (); return 0 ; } Run Code Output Area of Wall 1 : 90 .3 Area of Wall 2 : 90 .3 In this program, we have used a copy constructor to copy the contents of one object of the Wall class to another. The code of the copy constructor is: Wall ( Wall & obj ) { length = obj . length ; height = obj . height ; } Notice that the parameter of this constructor has the address of an object of the Wall class. We then assign the values of the variables of the obj object to the corresponding variables of the object calling the copy constructor. This is how the contents of the object are copied. In main() , we then create two objects wall1 and wall2 and then copy the contents of wall1 to wall2: // copy contents of wall1 to wall2 Wall wall2 = wall1 ; Here, the wall2 object calls its copy constructor by passing the address of the wall1 object as its argument i.e. &obj = &wall1 . Note : A constructor is primarily used to initialize objects. They are also used to run a default code when an object is created. How to pass and return object from C++ Functions? \u00b6 In this tutorial, we will learn to pass objects to a function and return an object from a function in C++ programming. In C++ programming, we can pass objects to a function in a similar manner as passing regular arguments. Example 1: C++ Pass Objects to Function \u00b6 // C++ program to calculate the average marks of two students #include <iostream> using namespace std ; class Student { public : double marks ; // constructor to initialize marks Student ( double m ) { marks = m ; } }; // function that has objects as parameters void calculateAverage ( Student s1 , Student s2 ) { // calculate the average of marks of s1 and s2 double average = ( s1 . marks + s2 . marks ) / 2 ; cout << \"Average Marks = \" << average << endl ; } int main () { Student student1 ( 88.0 ), student2 ( 56.0 ); // pass the objects as arguments calculateAverage ( student1 , student2 ); return 0 ; } Run Code Output Average Marks = 72 Here, we have passed two Student objects student1 and student2 as arguments to the calculateAverage() function. Pass objects to function in C++ Example 2: C++ Return Object from a Function \u00b6 #include <iostream> using namespace std ; class Student { public : double marks1 , marks2 ; }; // function that returns object of Student Student createStudent () { Student student ; // Initialize member variables of Student student . marks1 = 96.5 ; student . marks2 = 75.0 ; // print member variables of Student cout << \"Marks 1 = \" << student . marks1 << endl ; cout << \"Marks 2 = \" << student . marks2 << endl ; return student ; } int main () { Student student1 ; // Call function student1 = createStudent (); return 0 ; } Run Code Output Marks1 = 96 .5 Marks2 = 75 Return object from function in C++ In this program, we have created a function createStudent() that returns an object of Student class. We have called createStudent() from the main() method. // Call function student1 = createStudent (); Here, we are storing the object returned by the createStudent() method in the student1. C++ Operator Overloading \u00b6 In this tutorial, we will learn about operator overloading with the help of examples. In C++, we can change the way operators work for user-defined types like objects and structures. This is known as operator overloading . For example, Suppose we have created three objects c1, c2 and result from a class named Complex that represents complex numbers. Since operator overloading allows us to change how operators work, we can redefine how the + operator works and use it to add the complex numbers of c1 and c2 by writing the following code: result = c1 + c2 ; instead of something like result = c1 . addNumbers ( c2 ); This makes our code intuitive and easy to understand. Note: We cannot use operator overloading for fundamental data types like int , float , char and so on. Syntax for C++ Operator Overloading \u00b6 To overload an operator, we use a special operator function. We define the function inside the class or structure whose objects/variables we want the overloaded operator to work with. class className { ... .. ... public returnType operator symbol ( arguments ) { ... .. ... } ... .. ... }; Here, returnType is the return type of the function. operator is a keyword. symbol is the operator we want to overload. Like: + , < , - , ++ , etc. arguments is the arguments passed to the function. Operator Overloading in Unary Operators \u00b6 Unary operators operate on only one operand. The increment operator ++ and decrement operator -- are examples of unary operators. Example1: ++ Operator (Unary Operator) Overloading \u00b6 // Overload ++ when used as prefix #include <iostream> using namespace std ; class Count { private : int value ; public : // Constructor to initialize count to 5 Count () : value ( 5 ) {} // Overload ++ when used as prefix void operator ++ () { ++ value ; } void display () { cout << \"Count: \" << value << endl ; } }; int main () { Count count1 ; // Call the \"void operator ++ ()\" function ++ count1 ; count1 . display (); return 0 ; } Run Code Output Count: 6 Here, when we use ++count1; , the void operator ++ () is called. This increases the value attribute for the object count1 by 1. Note: When we overload operators, we can use it to work in any way we like. For example, we could have used ++ to increase value by 100. However, this makes our code confusing and difficult to understand. It's our job as a programmer to use operator overloading properly and in a consistent and intuitive way. The above example works only when ++ is used as a prefix. To make ++ work as a postfix we use this syntax. void operator ++ ( int ) { // code } Notice the int inside the parentheses. It's the syntax used for using unary operators as postfix; it's not a function parameter. Example 2: ++ Operator (Unary Operator) Overloading \u00b6 // Overload ++ when used as prefix and postfix #include <iostream> using namespace std ; class Count { private : int value ; public : // Constructor to initialize count to 5 Count () : value ( 5 ) {} // Overload ++ when used as prefix void operator ++ () { ++ value ; } // Overload ++ when used as postfix void operator ++ ( int ) { value ++ ; } void display () { cout << \"Count: \" << value << endl ; } }; int main () { Count count1 ; // Call the \"void operator ++ (int)\" function count1 ++ ; count1 . display (); // Call the \"void operator ++ ()\" function ++ count1 ; count1 . display (); return 0 ; } Run Code Output Count: 6 Count: 7 The Example 2 works when ++ is used as both prefix and postfix. However, it doesn't work if we try to do something like this: Count count1 , result ; // Error result = ++ count1 ; This is because the return type of our operator function is void . We can solve this problem by making Count as the return type of the operator function. // return Count when ++ used as prefix Count operator ++ () { // code } // return Count when ++ used as postfix Count operator ++ ( int ) { // code } Example 3: Return Value from Operator Function (++ Operator) \u00b6 #include <iostream> using namespace std ; class Count { private : int value ; public : // Constructor to initialize count to 5 Count () : value ( 5 ) {} // Overload ++ when used as prefix Count operator ++ () { Count temp ; // Here, value is the value attribute of the calling object temp . value = ++ value ; return temp ; } // Overload ++ when used as postfix Count operator ++ ( int ) { Count temp ; // Here, value is the value attribute of the calling object temp . value = value ++ ; return temp ; } void display () { cout << \"Count: \" << value << endl ; } }; int main () { Count count1 , result ; // Call the \"Count operator ++ ()\" function result = ++ count1 ; result . display (); // Call the \"Count operator ++ (int)\" function result = count1 ++ ; result . display (); return 0 ; } Run Code Output Count: 6 Count: 6 Here, we have used the following code for prefix operator overloading: // Overload ++ when used as prefix Count operator ++ () { Count temp ; // Here, value is the value attribute of the calling object temp . value = ++ value ; return temp ; } The code for the postfix operator overloading is also similar. Notice that we have created an object temp and returned its value to the operator function. Also, notice the code temp . value = ++ value ; The variable value belongs to the count1 object in main() because count1 is calling the function, while temp.value belongs to the temp object. Operator Overloading in Binary Operators \u00b6 Binary operators work on two operands. For example, result = num + 9 ; Here, + is a binary operator that works on the operands num and 9 . When we overload the binary operator for user-defined types by using the code: obj3 = obj1 + obj2 ; The operator function is called using the obj1 object and obj2 is passed as an argument to the function. Example 4: C++ Binary Operator Overloading \u00b6 // C++ program to overload the binary operator + // This program adds two complex numbers #include <iostream> using namespace std ; class Complex { private : float real ; float imag ; public : // Constructor to initialize real and imag to 0 Complex () : real ( 0 ), imag ( 0 ) {} void input () { cout << \"Enter real and imaginary parts respectively: \" ; cin >> real ; cin >> imag ; } // Overload the + operator Complex operator + ( const Complex & obj ) { Complex temp ; temp . real = real + obj . real ; temp . imag = imag + obj . imag ; return temp ; } void output () { if ( imag < 0 ) cout << \"Output Complex number: \" << real << imag << \"i\" ; else cout << \"Output Complex number: \" << real << \"+\" << imag << \"i\" ; } }; int main () { Complex complex1 , complex2 , result ; cout << \"Enter first complex number: \\n \" ; complex1 . input (); cout << \"Enter second complex number: \\n \" ; complex2 . input (); // complex1 calls the operator function // complex2 is passed as an argument to the function result = complex1 + complex2 ; result . output (); return 0 ; } Run Code Output Enter first complex number: Enter real and imaginary parts respectively: 9 5 Enter second complex number: Enter real and imaginary parts respectively: 7 6 Output Complex number: 16 +11i In this program, the operator function is: Complex operator + ( const Complex & obj ) { // code } Instead of this, we also could have written this function like: Complex operator + ( Complex obj ) { // code } However, using & makes our code efficient by referencing the complex2 object instead of making a duplicate object inside the operator function. using const is considered a good practice because it prevents the operator function from modifying complex2. Overloading binary operators in C++ Things to Remember in C++ Operator Overloading \u00b6 Two operators = and & are already overloaded by default in C++. For example, to copy objects of the same class , we can directly use the = operator. We do not need to create an operator function. Operator overloading cannot change the precedence and associativity of operators . However, if we want to change the order of evaluation, parentheses should be used. There are 4 operators that cannot be overloaded in C++. They are: :: (scope resolution) . (member selection) .* (member selection through pointer to function) ?: (ternary operator) Visit these pages to learn more on: How to overload increment operator in right way? How to overload binary operator - to subtract complex numbers? C++ Pointers \u00b6 C++ Pointers \u00b6 In this tutorial, we will learn about pointers in C++ and their working with the help of examples. In C++, pointers are variables that store the memory addresses of other variables. Address in C++ \u00b6 If we have a variable var in our program, &var will give us its address in the memory. For example, Example 1: Printing Variable Addresses in C++ \u00b6 #include <iostream> using namespace std ; int main () { // declare variables int var1 = 3 ; int var2 = 24 ; int var3 = 17 ; // print address of var1 cout << \"Address of var1: \" << & var1 << endl ; // print address of var2 cout << \"Address of var2: \" << & var2 << endl ; // print address of var3 cout << \"Address of var3: \" << & var3 << endl ; } Run Code Output Address of var1: 0x7fff5fbff8ac Address of var2: 0x7fff5fbff8a8 Address of var3: 0x7fff5fbff8a4 Here, 0x at the beginning represents the address is in the hexadecimal form. Notice that the first address differs from the second by 4 bytes and the second address differs from the third by 4 bytes. This is because the size of an int variable is 4 bytes in a 64-bit system. Note: You may not get the same results when you run the program. C++ Pointers \u00b6 As mentioned above, pointers are used to store addresses rather than values. Here is how we can declare pointers. int * pointVar ; Here, we have declared a pointer pointVar of the int type. We can also declare pointers in the following way. int * pointVar ; // preferred syntax Let's take another example of declaring pointers. int * pointVar , p ; Here, we have declared a pointer pointVar and a normal variable p. Note: The * operator is used after the data type to declare pointers. Assigning Addresses to Pointers \u00b6 Here is how we can assign addresses to pointers: int * pointVar , var ; var = 5 ; // assign address of var to pointVar pointer pointVar = & var ; Here, 5 is assigned to the variable var. And, the address of var is assigned to the pointVar pointer with the code pointVar = &var . Get the Value from the Address Using Pointers \u00b6 To get the value pointed by a pointer, we use the * operator. For example: int * pointVar , var ; var = 5 ; // assign address of var to pointVar pointVar = & var ; // access value pointed by pointVar cout << * pointVar << endl ; // Output: 5 In the above code, the address of var is assigned to pointVar. We have used the *pointVar to get the value stored in that address. When * is used with pointers, it's called the dereference operator . It operates on a pointer and gives the value pointed by the address stored in the pointer. That is, *pointVar = var . Note: In C++, pointVar and *pointVar is completely different. We cannot do something like *pointVar = &var; Example 2: Working of C++ Pointers \u00b6 #include <iostream> using namespace std ; int main () { int var = 5 ; // declare pointer variable int * pointVar ; // store address of var pointVar = & var ; // print value of var cout << \"var = \" << var << endl ; // print address of var cout << \"Address of var (&var) = \" << & var << endl << endl ; // print pointer pointVar cout << \"pointVar = \" << pointVar << endl ; // print the content of the address pointVar points to cout << \"Content of the address pointed to by pointVar (*pointVar) = \" << * pointVar << endl ; return 0 ; } Run Code Output var = 5 Address of var ( & var ) = 0x61ff08 pointVar = 0x61ff08 Content of the address pointed to by pointVar ( *pointVar ) = 5 Working of C++ pointers Changing Value Pointed by Pointers \u00b6 If pointVar points to the address of var, we can change the value of var by using *pointVar. For example, int var = 5 ; int * pointVar ; // assign address of var pointVar = & var ; // change value at address pointVar * pointVar = 1 ; cout << var << endl ; // Output: 1 Here, pointVar and &var have the same address, the value of var will also be changed when *pointVar is changed. Example 3: Changing Value Pointed by Pointers \u00b6 #include <iostream> using namespace std ; int main () { int var = 5 ; int * pointVar ; // store address of var pointVar = & var ; // print var cout << \"var = \" << var << endl ; // print *pointVar cout << \"*pointVar = \" << * pointVar << endl << endl ; cout << \"Changing value of var to 7:\" << endl ; // change value of var to 7 var = 7 ; // print var cout << \"var = \" << var << endl ; // print *pointVar cout << \"*pointVar = \" << * pointVar << endl << endl ; cout << \"Changing value of *pointVar to 16:\" << endl ; // change value of var to 16 * pointVar = 16 ; // print var cout << \"var = \" << var << endl ; // print *pointVar cout << \"*pointVar = \" << * pointVar << endl ; return 0 ; } Run Code Output var = 5 *pointVar = 5 Changing value of var to 7 : var = 7 *pointVar = 7 Changing value of *pointVar to 16 : var = 16 *pointVar = 16 Common mistakes when working with pointers \u00b6 Suppose, we want a pointer varPoint to point to the address of var. Then, int var , * varPoint ; // Wrong! // varPoint is an address but var is not varPoint = var ; // Wrong! // &var is an address // *varPoint is the value stored in &var * varPoint = & var ; // Correct! // varPoint is an address and so is &var varPoint = & var ; // Correct! // both *varPoint and var are values * varPoint = var ; Recommended Readings : How to use generic data type pointers using a void pointer? How to represent an array using a pointer? How to use pointers with functions? How to use pointers with structures? C++ Pointers and Arrays \u00b6 In this tutorial, we will learn about the relation between arrays and pointers with the help of examples. In C++, Pointers are variables that hold addresses of other variables. Not only can a pointer store the address of a single variable, it can also store the address of cells of an array . Consider this example: int * ptr ; int arr [ 5 ]; // store the address of the first // element of arr in ptr ptr = arr ; Here, ptr is a pointer variable while arr is an int array. The code ptr = arr; stores the address of the first element of the array in variable ptr. Notice that we have used arr instead of &arr[0] . This is because both are the same. So, the code below is the same as the code above. int * ptr ; int arr [ 5 ]; ptr = & arr [ 0 ]; The addresses for the rest of the array elements are given by &arr[1] , &arr[2] , &arr[3] , and &arr[4] . Point to Every Array Elements \u00b6 Suppose we need to point to the fourth element of the array using the same pointer ptr. Here, if ptr points to the first element in the above example then ptr + 3 will point to the fourth element. For example, int * ptr ; int arr [ 5 ]; ptr = arr ; ptr + 1 is equivalent to & arr [ 1 ]; ptr + 2 is equivalent to & arr [ 2 ]; ptr + 3 is equivalent to & arr [ 3 ]; ptr + 4 is equivalent to & arr [ 4 ]; Similarly, we can access the elements using the single pointer. For example, // use dereference operator * ptr == arr [ 0 ]; * ( ptr + 1 ) is equivalent to arr [ 1 ]; * ( ptr + 2 ) is equivalent to arr [ 2 ]; * ( ptr + 3 ) is equivalent to arr [ 3 ]; * ( ptr + 4 ) is equivalent to arr [ 4 ]; Suppose if we have initialized ptr = &arr[2]; then ptr - 2 is equivalent to & arr [ 0 ]; ptr - 1 is equivalent to & arr [ 1 ]; ptr + 1 is equivalent to & arr [ 3 ]; ptr + 2 is equivalent to & arr [ 4 ]; Working of C++ Pointers with Arrays Note: The address between ptr and ptr + 1 differs by 4 bytes. It is because ptr is a pointer to an int data. And, the size of int is 4 bytes in a 64-bit operating system. Similarly, if pointer ptr is pointing to char type data, then the address between ptr and ptr + 1 is 1 byte. It is because the size of a character is 1 byte. Example 1: C++ Pointers and Arrays \u00b6 // C++ Program to display address of each element of an array #include <iostream> using namespace std ; int main () { float arr [ 3 ]; // declare pointer variable float * ptr ; cout << \"Displaying address using arrays: \" << endl ; // use for loop to print addresses of all array elements for ( int i = 0 ; i < 3 ; ++ i ) { cout << \"&arr[\" << i << \"] = \" << & arr [ i ] << endl ; } // ptr = &arr[0] ptr = arr ; cout << \" \\n Displaying address using pointers: \" << endl ; // use for loop to print addresses of all array elements // using pointer notation for ( int i = 0 ; i < 3 ; ++ i ) { cout << \"ptr + \" << i << \" = \" << ptr + i << endl ; } return 0 ; } Run Code Output Displaying address using arrays: & arr [ 0 ] = 0x61fef0 & arr [ 1 ] = 0x61fef4 & arr [ 2 ] = 0x61fef8 Displaying address using pointers: ptr + 0 = 0x61fef0 ptr + 1 = 0x61fef4 ptr + 2 = 0x61fef8 In the above program, we first simply printed the addresses of the array elements without using the pointer variable ptr. Then, we used the pointer ptr to point to the address of a[0], ptr + 1 to point to the address of a[1], and so on. In most contexts, array names decay to pointers. In simple words, array names are converted to pointers. That's the reason why we can use pointers to access elements of arrays. However, we should remember that pointers and arrays are not the same. There are a few cases where array names don't decay to pointers. To learn more, visit: When does array name doesn't decay into a pointer? Example 2: Array name used as pointer \u00b6 // C++ Program to insert and display data entered by using pointer notation. #include <iostream> using namespace std ; int main () { float arr [ 5 ]; // Insert data using pointer notation cout << \"Enter 5 numbers: \" ; for ( int i = 0 ; i < 5 ; ++ i ) { // store input number in arr[i] cin >> * ( arr + i ) ; } // Display data using pointer notation cout << \"Displaying data: \" << endl ; for ( int i = 0 ; i < 5 ; ++ i ) { // display value of arr[i] cout << * ( arr + i ) << endl ; } return 0 ; } Run Code Output Enter 5 numbers: 2 .5 3 .5 4 .5 5 2 Displaying data: 2 .5 3 .5 4 .5 5 2 Here, We first used the pointer notation to store the numbers entered by the user into the array arr. cin >> * ( arr + i ) ; This code is equivalent to the code below: cin >> arr [ i ]; Notice that we haven't declared a separate pointer variable, but rather we are using the array name arr for the pointer notation. As we already know, the array name arr points to the first element of the array. So, we can think of arr as acting like a pointer. Similarly, we then used for loop to display the values of arr using pointer notation. cout << * ( arr + i ) << endl ; This code is equivalent to cout << arr [ i ] << endl ; C++ Call by Reference: Using pointers \u00b6 In this tutorial, we will learn about C++ call by reference to pass pointers as an argument to the function with the help of examples. In the C++ Functions tutorial, we learned about passing arguments to a function. This method used is called passing by value because the actual value is passed. However, there is another way of passing arguments to a function where the actual values of arguments are not passed. Instead, the reference to values is passed. For example, // function that takes value as parameter void func1 ( int numVal ) { // code } // function that takes reference as parameter // notice the & before the parameter void func2 ( int & numRef ) { // code } int main () { int num = 5 ; // pass by value func1 ( num ); // pass by reference func2 ( num ); return 0 ; } Run Code Notice the & in void func2(int &numRef) . This denotes that we are using the address of the variable as our parameter. So, when we call the func2() function in main() by passing the variable num as an argument, we are actually passing the address of num variable instead of the value 5 . C++ Pass by Value vs. Pass by Reference Example 1: Passing by reference without pointers \u00b6 #include <iostream> using namespace std ; // function definition to swap values void swap ( int & n1 , int & n2 ) { int temp ; temp = n1 ; n1 = n2 ; n2 = temp ; } int main () { // initialize variables int a = 1 , b = 2 ; cout << \"Before swapping\" << endl ; cout << \"a = \" << a << endl ; cout << \"b = \" << b << endl ; // call function to swap numbers swap ( a , b ); cout << \" \\n After swapping\" << endl ; cout << \"a = \" << a << endl ; cout << \"b = \" << b << endl ; return 0 ; } Run Code Output Before swapping a = 1 b = 2 After swapping a = 2 b = 1 In this program, we passed the variables a and b to the swap() function. Notice the function definition, void swap ( int & n1 , int & n2 ) Here, we are using & to denote that the function will accept addresses as its parameters. Hence, the compiler can identify that instead of actual values, the reference of the variables is passed to function parameters. In the swap() function, the function parameters n1 and n2 are pointing to the same value as the variables a and b respectively. Hence the swapping takes place on actual value. The same task can be done using the pointers. To learn about pointers, visit C++ Pointers . Example 2: Passing by reference using pointers \u00b6 #include <iostream> using namespace std ; // function prototype with pointer as parameters void swap ( int * , int * ); int main () { // initialize variables int a = 1 , b = 2 ; cout << \"Before swapping\" << endl ; cout << \"a = \" << a << endl ; cout << \"b = \" << b << endl ; // call function by passing variable addresses swap ( & a , & b ); cout << \" \\n After swapping\" << endl ; cout << \"a = \" << a << endl ; cout << \"b = \" << b << endl ; return 0 ; } // function definition to swap numbers void swap ( int * n1 , int * n2 ) { int temp ; temp = * n1 ; * n1 = * n2 ; * n2 = temp ; } Run Code Output Before swapping a = 1 b = 2 After swapping a = 2 b = 1 Here, we can see the output is the same as the previous example. Notice the line, // &a is address of a // &b is address of b swap ( & a , & b ); Here, the address of the variable is passed during the function call rather than the variable. Since the address is passed instead of value, a dereference operator * must be used to access the value stored in that address. temp = * n1 ; * n1 = * n2 ; * n2 = temp ; *n1 and *n2 gives the value stored at address n1 and n2 respectively. Since n1 and n2 contain the addresses of a and b, anything is done to *n1 and *n2 will change the actual values of a and b. Hence, when we print the values of a and b in the main() function, the values are changed. C++ Memory Management: new and delete \u00b6 In this tutorial, we will learn to manage memory effectively in C++ using new and delete operations with the help of examples. C++ allows us to allocate the memory of a variable or an array in run time. This is known as dynamic memory allocation. In other programming languages such as Java and Python, the compiler automatically manages the memories allocated to variables. But this is not the case in C++. In C++, we need to deallocate the dynamically allocated memory manually after we have no use for the variable. We can allocate and then deallocate memory dynamically using the new and delete operators respectively. C++ new Operator \u00b6 The new operator allocates memory to a variable. For example, // declare an int pointer int * pointVar ; // dynamically allocate memory // using the new keyword pointVar = new int ; // assign value to allocated memory * pointVar = 45 ; Here, we have dynamically allocated memory for an int variable using the new operator. Notice that we have used the pointer pointVar to allocate the memory dynamically. This is because the new operator returns the address of the memory location. In the case of an array, the new operator returns the address of the first element of the array. From the example above, we can see that the syntax for using the new operator is pointerVariable = new dataType ; delete Operator \u00b6 Once we no longer need to use a variable that we have declared dynamically, we can deallocate the memory occupied by the variable. For this, the delete operator is used. It returns the memory to the operating system. This is known as memory deallocation . The syntax for this operator is delete pointerVariable ; Consider the code: // declare an int pointer int * pointVar ; // dynamically allocate memory // for an int variable pointVar = new int ; // assign value to the variable memory * pointVar = 45 ; // print the value stored in memory cout << * pointVar ; // Output: 45 // deallocate the memory delete pointVar ; Here, we have dynamically allocated memory for an int variable using the pointer pointVar. After printing the contents of pointVar, we deallocated the memory using delete . Note : If the program uses a large amount of unwanted memory using new , the system may crash because there will be no memory available for the operating system. In this case, the delete operator can help the system from crash. Example 1: C++ Dynamic Memory Allocation \u00b6 #include <iostream> using namespace std ; int main () { // declare an int pointer int * pointInt ; // declare a float pointer float * pointFloat ; // dynamically allocate memory pointInt = new int ; pointFloat = new float ; // assigning value to the memory * pointInt = 45 ; * pointFloat = 45.45f ; cout << * pointInt << endl ; cout << * pointFloat << endl ; // deallocate the memory delete pointInt ; delete pointFloat ; return 0 ; } Run Code Output 45 45 .45 In this program, we dynamically allocated memory to two variables of int and float types. After assigning values to them and printing them, we finally deallocate the memories using the code delete pointInt ; delete pointFloat ; Note: Dynamic memory allocation can make memory management more efficient. Especially for arrays, where a lot of the times we don't know the size of the array until the run time. Example 2: C++ new and delete Operator for Arrays \u00b6 // C++ Program to store GPA of n number of students and display it // where n is the number of students entered by the user #include <iostream> using namespace std ; int main () { int num ; cout << \"Enter total number of students: \" ; cin >> num ; float * ptr ; // memory allocation of num number of floats ptr = new float [ num ]; cout << \"Enter GPA of students.\" << endl ; for ( int i = 0 ; i < num ; ++ i ) { cout << \"Student\" << i + 1 << \": \" ; cin >> * ( ptr + i ); } cout << \" \\n Displaying GPA of students.\" << endl ; for ( int i = 0 ; i < num ; ++ i ) { cout << \"Student\" << i + 1 << \": \" << * ( ptr + i ) << endl ; } // ptr memory is released delete [] ptr ; return 0 ; } Run Code Output Enter total number of students: 4 Enter GPA of students. Student1: 3 .6 Student2: 3 .1 Student3: 3 .9 Student4: 2 .9 Displaying GPA of students. Student1: 3 .6 Student2: 3 .1 Student3: 3 .9 Student4: 2 .9 In this program, we have asked the user to enter the number of students and store it in the num variable. Then, we have allocated the memory dynamically for the float array using new. We enter data into the array (and later print them) using pointer notation. After we no longer need the array, we deallocate the array memory using the code delete[] ptr; . Notice the use of [] after delete . We use the square brackets [] in order to denote that the memory deallocation is that of an array. Example 3: C++ new and delete Operator for Objects \u00b6 #include <iostream> using namespace std ; class Student { private : int age ; public : // constructor initializes age to 12 Student () : age ( 12 ) {} void getAge () { cout << \"Age = \" << age << endl ; } }; int main () { // dynamically declare Student object Student * ptr = new Student (); // call getAge() function ptr -> getAge (); // ptr memory is released delete ptr ; return 0 ; } Run Code Output Age = 12 In this program, we have created a Student class that has a private variable age. We have initialized age to 12 in the default constructor Student() and print its value with the function getAge() . In main() , we have created a Student object using the new operator and use the pointer ptr to point to its address. The moment the object is created, the Student() constructor initializes age to 12 . We then call the getAge() function using the code: ptr -> getAge (); Notice the arrow operator -> . This operator is used to access class members using pointers. C++ Inheritance \u00b6 In this tutorial, we will learn about inheritance in C++ with the help of examples. Inheritance is one of the key features of Object-oriented programming in C++. It allows us to create a new class (derived class) from an existing class (base class). The derived class inherits the features from the base class and can have additional features of its own. For example, class Animal { // eat() function // sleep() function }; class Dog : public Animal { // bark() function }; Here, the Dog class is derived from the Animal class. Since Dog is derived from Animal , members of Animal are accessible to Dog . Inheritance in C++ Notice the use of the keyword public while inheriting Dog from Animal. class Dog : public Animal {...}; We can also use the keywords private and protected instead of public . We will learn about the differences between using private , public and protected later in this tutorial. is-a relationship \u00b6 Inheritance is an is-a relationship . We use inheritance only if an is-a relationship is present between the two classes. Here are some examples: A car is a vehicle. Orange is a fruit. A surgeon is a doctor. A dog is an animal. Example 1: Simple Example of C++ Inheritance \u00b6 // C++ program to demonstrate inheritance #include <iostream> using namespace std ; // base class class Animal { public : void eat () { cout << \"I can eat!\" << endl ; } void sleep () { cout << \"I can sleep!\" << endl ; } }; // derived class class Dog : public Animal { public : void bark () { cout << \"I can bark! Woof woof!!\" << endl ; } }; int main () { // Create object of the Dog class Dog dog1 ; // Calling members of the base class dog1 . eat (); dog1 . sleep (); // Calling member of the derived class dog1 . bark (); return 0 ; } Run Code Output I can eat! I can sleep! I can bark! Woof woof!! Here, dog1 (the object of derived class Dog ) can access members of the base class Animal . It's because Dog is inherited from Animal . // Calling members of the Animal class dog1 . eat (); dog1 . sleep (); C++ protected Members \u00b6 The access modifier protected is especially relevant when it comes to C++ inheritance. Like private members, protected members are inaccessible outside of the class. However, they can be accessed by derived classes and friend classes/functions . We need protected members if we want to hide the data of a class, but still want that data to be inherited by its derived classes. To learn more about protected, refer to our C++ Access Modifiers tutorial. Example 2 : C++ protected Members \u00b6 // C++ program to demonstrate protected members #include <iostream> #include <string> using namespace std ; // base class class Animal { private : string color ; protected : string type ; public : void eat () { cout << \"I can eat!\" << endl ; } void sleep () { cout << \"I can sleep!\" << endl ; } void setColor ( string clr ) { color = clr ; } string getColor () { return color ; } }; // derived class class Dog : public Animal { public : void setType ( string tp ) { type = tp ; } void displayInfo ( string c ) { cout << \"I am a \" << type << endl ; cout << \"My color is \" << c << endl ; } void bark () { cout << \"I can bark! Woof woof!!\" << endl ; } }; int main () { // Create object of the Dog class Dog dog1 ; // Calling members of the base class dog1 . eat (); dog1 . sleep (); dog1 . setColor ( \"black\" ); // Calling member of the derived class dog1 . bark (); dog1 . setType ( \"mammal\" ); // Using getColor() of dog1 as argument // getColor() returns string data dog1 . displayInfo ( dog1 . getColor ()); return 0 ; } Run Code Output I can eat! I can sleep! I can bark! Woof woof!! I am a mammal My color is black Here, the variable type is protected and is thus accessible from the derived class Dog . We can see this as we have initialized type in the Dog class using the function setType() . On the other hand, the private variable color cannot be initialized in Dog . class Dog : public Animal { public : void setColor ( string clr ) { // Error: member \"Animal::color\" is inaccessible color = clr ; } }; Also, since the protected keyword hides data, we cannot access type directly from an object of Dog or Animal class. // Error: member \"Animal::type\" is inaccessible dog1 . type = \"mammal\" ; Access Modes in C++ Inheritance \u00b6 In our previous tutorials, we have learned about C++ access specifiers such as public, private, and protected . So far, we have used the public keyword in order to inherit a class from a previously-existing base class. However, we can also use the private and protected keywords to inherit classes. For example, class Animal { // code }; class Dog : private Animal { // code }; class Cat : protected Animal { // code }; The various ways we can derive classes are known as access modes . These access modes have the following effect: public: If a derived class is declared in public mode, then the members of the base class are inherited by the derived class just as they are. private: In this case, all the members of the base class become private members in the derived class. protected: The public members of the base class become protected members in the derived class. The private members of the base class are always private in the derived class. To learn more, visit our C++ public, private, protected inheritance tutorial. Member Function Overriding in Inheritance \u00b6 Suppose, base class and derived class have member functions with the same name and arguments. If we create an object of the derived class and try to access that member function, the member function in the derived class is invoked instead of the one in the base class. The member function of derived class overrides the member function of base class. Learn more about Function overriding in C++ . C++ Public, Protected and Private Inheritance \u00b6 In this tutorial, we will learn to use public, protected and private inheritance in C++ with the help of examples. In C++ inheritance , we can derive a child class from the base class in different access modes. For example, class Base { .... ... .... }; class Derived : public Base { .... ... .... }; Notice the keyword public in the code class Derived : public Base This means that we have created a derived class from the base class in public mode . Alternatively, we can also derive classes in protected or private modes. These 3 keywords ( public , protected , and private ) are known as access specifiers in C++ inheritance. public, protected and private inheritance in C++ \u00b6 public , protected, and private inheritance have the following features: public inheritance makes public members of the base class public in the derived class, and the protected members of the base class remain protected in the derived class. protected inheritance makes the public and protected members of the base class protected in the derived class. private inheritance makes the public and protected members of the base class private in the derived class. Note: private members of the base class are inaccessible to the derived class. class Base { public : int x ; protected : int y ; private : int z ; }; class PublicDerived : public Base { // x is public // y is protected // z is not accessible from PublicDerived }; class ProtectedDerived : protected Base { // x is protected // y is protected // z is not accessible from ProtectedDerived }; class PrivateDerived : private Base { // x is private // y is private // z is not accessible from PrivateDerived }; Example 1: C++ public Inheritance \u00b6 // C++ program to demonstrate the working of public inheritance #include <iostream> using namespace std ; class Base { private : int pvt = 1 ; protected : int prot = 2 ; public : int pub = 3 ; // function to access private member int getPVT () { return pvt ; } }; class PublicDerived : public Base { public : // function to access protected member from Base int getProt () { return prot ; } }; int main () { PublicDerived object1 ; cout << \"Private = \" << object1 . getPVT () << endl ; cout << \"Protected = \" << object1 . getProt () << endl ; cout << \"Public = \" << object1 . pub << endl ; return 0 ; } Run Code Output Private = 1 Protected = 2 Public = 3 Here, we have derived PublicDerived from Base in public mode . As a result, in PublicDerived : prot is inherited as protected . pub and getPVT() are inherited as public . pvt is inaccessible since it is private in Base . Since private and protected members are not accessible from main() , we need to create public functions getPVT() and getProt() to access them: // Error: member \"Base::pvt\" is inaccessible cout << \"Private = \" << object1 . pvt ; // Error: member \"Base::prot\" is inaccessible cout << \"Protected = \" << object1 . prot ; Notice that the getPVT() function has been defined inside Base . But the getProt() function has been defined inside PublicDerived . This is because pvt, which is private in Base , is inaccessible to PublicDerived . However, prot is accessible to PublicDerived due to public inheritance. So, getProt() can access the protected variable from within PublicDerived . Accessibility in public Inheritance \u00b6 Accessibility private members protected members public members Base Class Yes Yes Yes Derived Class No Yes Yes Example 2: C++ protected Inheritance \u00b6 // C++ program to demonstrate the working of protected inheritance #include <iostream> using namespace std ; class Base { private : int pvt = 1 ; protected : int prot = 2 ; public : int pub = 3 ; // function to access private member int getPVT () { return pvt ; } }; class ProtectedDerived : protected Base { public : // function to access protected member from Base int getProt () { return prot ; } // function to access public member from Base int getPub () { return pub ; } }; int main () { ProtectedDerived object1 ; cout << \"Private cannot be accessed.\" << endl ; cout << \"Protected = \" << object1 . getProt () << endl ; cout << \"Public = \" << object1 . getPub () << endl ; return 0 ; } Run Code Output Private cannot be accessed. Protected = 2 Public = 3 Here, we have derived ProtectedDerived from Base in protected mode . As a result, in ProtectedDerived : prot, pub and getPVT() are inherited as protected . pvt is inaccessible since it is private in Base . As we know, protected members cannot be directly accessed from outside the class. As a result, we cannot use getPVT() from ProtectedDerived . That is also why we need to create the getPub() function in ProtectedDerived in order to access the pub variable. // Error: member \"Base::getPVT()\" is inaccessible cout << \"Private = \" << object1 . getPVT (); // Error: member \"Base::pub\" is inaccessible cout << \"Public = \" << object1 . pub ; Accessibility in protected Inheritance \u00b6 Accessibility private members protected members public members Base Class Yes Yes Yes Derived Class No Yes Yes (inherited as protected variables) Example 3: C++ private Inheritance \u00b6 // C++ program to demonstrate the working of private inheritance #include <iostream> using namespace std ; class Base { private : int pvt = 1 ; protected : int prot = 2 ; public : int pub = 3 ; // function to access private member int getPVT () { return pvt ; } }; class PrivateDerived : private Base { public : // function to access protected member from Base int getProt () { return prot ; } // function to access private member int getPub () { return pub ; } }; int main () { PrivateDerived object1 ; cout << \"Private cannot be accessed.\" << endl ; cout << \"Protected = \" << object1 . getProt () << endl ; cout << \"Public = \" << object1 . getPub () << endl ; return 0 ; } Run Code Output Private cannot be accessed. Protected = 2 Public = 3 Here, we have derived PrivateDerived from Base in private mode . As a result, in PrivateDerived : prot, pub and getPVT() are inherited as private . pvt is inaccessible since it is private in Base . As we know, private members cannot be directly accessed from outside the class. As a result, we cannot use getPVT() from PrivateDerived . That is also why we need to create the getPub() function in PrivateDerived in order to access the pub variable. // Error: member \"Base::getPVT()\" is inaccessible cout << \"Private = \" << object1 . getPVT (); // Error: member \"Base::pub\" is inaccessible cout << \"Public = \" << object1 . pub ; Accessibility in private Inheritance \u00b6 Accessibility private members protected members public members Base Class Yes Yes Yes Derived Class No Yes (inherited as private variables) Yes (inherited as private variables) C++ Function Overriding \u00b6 In this tutorial, we will learn about function overriding in C++ with the help of examples. As we know, inheritance is a feature of OOP that allows us to create derived classes from a base class. The derived classes inherit features of the base class. Suppose, the same function is defined in both the derived class and the based class. Now if we call this function using the object of the derived class, the function of the derived class is executed. This is known as function overriding in C++. The function in derived class overrides the function in base class. Example 1: C++ Function Overriding \u00b6 // C++ program to demonstrate function overriding #include <iostream> using namespace std ; class Base { public : void print () { cout << \"Base Function\" << endl ; } }; class Derived : public Base { public : void print () { cout << \"Derived Function\" << endl ; } }; int main () { Derived derived1 ; derived1 . print (); return 0 ; } Output Derived Function Here, the same function print() is defined in both Base and Derived classes. So, when we call print() from the Derived object derived1, the print() from Derived is executed by overriding the function in Base . Working of function overriding in C++ As we can see, the function was overridden because we called the function from an object of the Derived class. Had we called the print() function from an object of the Base class, the function would not have been overridden. // Call function of Base class Base base1 ; base1 . print (); // Output: Base Function Access Overridden Function in C++ \u00b6 To access the overridden function of the base class, we use the scope resolution operator :: . We can also access the overridden function by using a pointer of the base class to point to an object of the derived class and then calling the function from that pointer. Example 2: C++ Access Overridden Function to the Base Class \u00b6 // C++ program to access overridden function // in main() using the scope resolution operator :: #include <iostream> using namespace std ; class Base { public : void print () { cout << \"Base Function\" << endl ; } }; class Derived : public Base { public : void print () { cout << \"Derived Function\" << endl ; } }; int main () { Derived derived1 , derived2 ; derived1 . print (); // access print() function of the Base class derived2 . Base :: print (); return 0 ; } Output Derived Function Base Function Here, this statement derived2 . Base :: print (); accesses the print() function of the Base class. Access overridden function using object of derived class in C++ Example 3: C++ Call Overridden Function From Derived Class \u00b6 // C++ program to call the overridden function // from a member function of the derived class #include <iostream> using namespace std ; class Base { public : void print () { cout << \"Base Function\" << endl ; } }; class Derived : public Base { public : void print () { cout << \"Derived Function\" << endl ; // call overridden function Base :: print (); } }; int main () { Derived derived1 ; derived1 . print (); return 0 ; } Output Derived Function Base Function In this program, we have called the overridden function inside the Derived class itself. class Derived : public Base { public : void print () { cout << \"Derived Function\" << endl ; Base :: print (); } }; Notice the code Base::print(); , which calls the overridden function inside the Derived class. Access overridden function inside derived class in C++ Example 4: C++ Call Overridden Function Using Pointer \u00b6 // C++ program to access overridden function using pointer // of Base type that points to an object of Derived class #include <iostream> using namespace std ; class Base { public : void print () { cout << \"Base Function\" << endl ; } }; class Derived : public Base { public : void print () { cout << \"Derived Function\" << endl ; } }; int main () { Derived derived1 ; // pointer of Base type that points to derived1 Base * ptr = & derived1 ; // call function of Base class using ptr ptr -> print (); return 0 ; } Output Base Function In this program, we have created a pointer of Base type named ptr. This pointer points to the Derived object derived1. // pointer of Base type that points to derived1 Base * ptr = & derived1 ; When we call the print() function using ptr, it calls the overridden function from Base . // call function of Base class using ptr ptr -> print (); This is because even though ptr points to a Derived object, it is actually of Base type. So, it calls the member function of Base . In order to override the Base function instead of accessing it, we need to use virtual functions in the Base class. C++ Multiple, Multilevel and Hierarchical Inheritance \u00b6 In this tutorial, we will learn about different models of inheritance in C++ programming: Multiple, Multilevel and Hierarchical inheritance with examples. Inheritance is one of the core feature of an object-oriented programming language. It allows software developers to derive a new class from the existing class. The derived class inherits the features of the base class (existing class). There are various models of inheritance in C++ programming. C++ Multilevel Inheritance \u00b6 In C++ programming, not only you can derive a class from the base class but you can also derive a class from the derived class. This form of inheritance is known as multilevel inheritance. class A { ... .. ... }; class B : public A { ... .. ... }; class C : public B { ... ... ... }; Here, class B is derived from the base class A and the class C is derived from the derived class B. Example 1: C++ Multilevel Inheritance \u00b6 #include <iostream> using namespace std ; class A { public : void display () { cout << \"Base class content.\" ; } }; class B : public A {}; class C : public B {}; int main () { C obj ; obj . display (); return 0 ; } Output Base class content. In this program, class C is derived from class B (which is derived from base class A). The obj object of class C is defined in the main() function. When the display() function is called, display() in class A is executed. It's because there is no display() function in class C and class B. The compiler first looks for the display() function in class C. Since the function doesn't exist there, it looks for the function in class B (as C is derived from B). The function also doesn't exist in class B, so the compiler looks for it in class A (as B is derived from A). If display() function exists in C, the compiler overrides display() of class A (because of member function overriding ). C++ Multiple Inheritance \u00b6 In C++ programming, a class can be derived from more than one parent. For example, A class Bat is derived from base classes Mammal and WingedAnimal. It makes sense because bat is a mammal as well as a winged animal. Multiple Inheritance Example 2: Multiple Inheritance in C++ Programming \u00b6 #include <iostream> using namespace std ; class Mammal { public : Mammal () { cout << \"Mammals can give direct birth.\" << endl ; } }; class WingedAnimal { public : WingedAnimal () { cout << \"Winged animal can flap.\" << endl ; } }; class Bat : public Mammal , public WingedAnimal {}; int main () { Bat b1 ; return 0 ; } Output Mammals can give direct birth. Winged animal can flap. Ambiguity in Multiple Inheritance \u00b6 The most obvious problem with multiple inheritance occurs during function overriding. Suppose, two base classes have a same function which is not overridden in derived class. If you try to call the function using the object of the derived class, compiler shows error. It's because compiler doesn't know which function to call. For example, class base1 { public : void someFunction ( ) {....} }; class base2 { void someFunction ( ) {....} }; class derived : public base1 , public base2 {}; int main () { derived obj ; obj . someFunction () // Error! } This problem can be solved using the scope resolution function to specify which function to class either base1or base2 int main () { obj . base1 :: someFunction ( ); // Function of base1 class is called obj . base2 :: someFunction (); // Function of base2 class is called. } C++ Hierarchical Inheritance \u00b6 If more than one class is inherited from the base class, it's known as hierarchical inheritance . In hierarchical inheritance, all features that are common in child classes are included in the base class. For example, Physics, Chemistry, Biology are derived from Science class. Similarly, Dog, Cat, Horse are derived from Animal class. Syntax of Hierarchical Inheritance \u00b6 class base_class { ... .. ... } class first_derived_class : public base_class { ... .. ... } class second_derived_class : public base_class { ... .. ... } class third_derived_class : public base_class { ... .. ... } Example 3: Hierarchical Inheritance in C++ Programming \u00b6 // C++ program to demonstrate hierarchical inheritance #include <iostream> using namespace std ; // base class class Animal { public : void info () { cout << \"I am an animal.\" << endl ; } }; // derived class 1 class Dog : public Animal { public : void bark () { cout << \"I am a Dog. Woof woof.\" << endl ; } }; // derived class 2 class Cat : public Animal { public : void meow () { cout << \"I am a Cat. Meow.\" << endl ; } }; int main () { // Create object of Dog class Dog dog1 ; cout << \"Dog Class:\" << endl ; dog1 . info (); // Parent Class function dog1 . bark (); // Create object of Cat class Cat cat1 ; cout << \" \\n Cat Class:\" << endl ; cat1 . info (); // Parent Class function cat1 . meow (); return 0 ; } Run Code Output Dog Class: I am an animal. I am a Dog. Woof woof. Cat Class: I am an animal. I am a Cat. Meow. Here, both the Dog and Cat classes are derived from the Animal class. As such, both the derived classes can access the info() function belonging to the Animal class. C++ friend Function and friend Classes \u00b6 In this tutorial, we will learn to create friend functions and friend classes in C++ with the help of examples. Data hiding is a fundamental concept of object-oriented programming. It restricts the access of private members from outside of the class. Similarly, protected members can only be accessed by derived classes and are inaccessible from outside. For example, class MyClass { private : int member1 ; } int main () { MyClass obj ; // Error! Cannot access private members from here. obj . member1 = 5 ; } However, there is a feature in C++ called friend functions that break this rule and allow us to access member functions from outside the class. Similarly, there is a friend class as well, which we will learn later in this tutorial. friend Function in C++ \u00b6 A friend function can access the private and protected data of a class. We declare a friend function using the friend keyword inside the body of the class. class className { ... .. ... friend returnType functionName ( arguments ); ... .. ... } Example 1: Working of friend Function \u00b6 // C++ program to demonstrate the working of friend function #include <iostream> using namespace std ; class Distance { private : int meter ; // friend function friend int addFive ( Distance ); public : Distance () : meter ( 0 ) {} }; // friend function definition int addFive ( Distance d ) { //accessing private members from the friend function d . meter += 5 ; return d . meter ; } int main () { Distance D ; cout << \"Distance: \" << addFive ( D ); return 0 ; } Run Code Output Distance: 5 Here, addFive() is a friend function that can access both private and public data members. Though this example gives us an idea about the concept of a friend function, it doesn't show any meaningful use. A more meaningful use would be operating on objects of two different classes. That's when the friend function can be very helpful. Example 2: Add Members of Two Different Classes \u00b6 // Add members of two different classes using friend functions #include <iostream> using namespace std ; // forward declaration class ClassB ; class ClassA { public : // constructor to initialize numA to 12 ClassA () : numA ( 12 ) {} private : int numA ; // friend function declaration friend int add ( ClassA , ClassB ); }; class ClassB { public : // constructor to initialize numB to 1 ClassB () : numB ( 1 ) {} private : int numB ; // friend function declaration friend int add ( ClassA , ClassB ); }; // access members of both classes int add ( ClassA objectA , ClassB objectB ) { return ( objectA . numA + objectB . numB ); } int main () { ClassA objectA ; ClassB objectB ; cout << \"Sum: \" << add ( objectA , objectB ); return 0 ; } Run Code Output Sum: 13 In this program, ClassA and ClassB have declared add() as a friend function. Thus, this function can access private data of both classes. One thing to notice here is the friend function inside ClassA is using the ClassB . However, we haven't defined ClassB at this point. // inside classA friend int add ( ClassA , ClassB ); For this to work, we need a forward declaration of ClassB in our program. // forward declaration class ClassB ; friend Class in C++ \u00b6 We can also use a friend Class in C++ using the friend keyword. For example, class ClassB ; class ClassA { // ClassB is a friend class of ClassA friend class ClassB ; ... .. ... } class ClassB { ... .. ... } When a class is declared a friend class, all the member functions of the friend class become friend functions. Since ClassB is a friend class, we can access all members of ClassA from inside ClassB . However, we cannot access members of ClassB from inside ClassA . It is because friend relation in C++ is only granted, not taken. Example 3: C++ friend Class \u00b6 // C++ program to demonstrate the working of friend class #include <iostream> using namespace std ; // forward declaration class ClassB ; class ClassA { private : int numA ; // friend class declaration friend class ClassB ; public : // constructor to initialize numA to 12 ClassA () : numA ( 12 ) {} }; class ClassB { private : int numB ; public : // constructor to initialize numB to 1 ClassB () : numB ( 1 ) {} // member function to add numA // from ClassA and numB from ClassB int add () { ClassA objectA ; return objectA . numA + numB ; } }; int main () { ClassB objectB ; cout << \"Sum: \" << objectB . add (); return 0 ; } Run Code Output Sum: 13 Here, ClassB is a friend class of ClassA . So, ClassB has access to the members of classA . In ClassB , we have created a function add() that returns the sum of numA and numB. Since ClassB is a friend class, we can create objects of ClassA inside of ClassB . C++ Virtual Functions \u00b6 In this tutorial, we will learn about C++ virtual function and its use with the help of examples. A virtual function is a member function in the base class that we expect to redefine in derived classes. Basically, a virtual function is used in the base class in order to ensure that the function is overridden . This especially applies to cases where a pointer of base class points to an object of a derived class. For example, consider the code below: class Base { public : void print () { // code } }; class Derived : public Base { public : void print () { // code } }; Later, if we create a pointer of Base type to point to an object of Derived class and call the print() function, it calls the print() function of the Base class. In other words, the member function of Base is not overridden. int main () { Derived derived1 ; Base * base1 = & derived1 ; // calls function of Base class base1 -> print (); return 0 ; } In order to avoid this, we declare the print() function of the Base class as virtual by using the virtual keyword. class Base { public : virtual void print () { // code } }; Virtual functions are an integral part of polymorphism in C++. To learn more, check our tutorial on C++ Polymorphism . Example 1: C++ virtual Function \u00b6 #include <iostream> using namespace std ; class Base { public : virtual void print () { cout << \"Base Function\" << endl ; } }; class Derived : public Base { public : void print () { cout << \"Derived Function\" << endl ; } }; int main () { Derived derived1 ; // pointer of Base type that points to derived1 Base * base1 = & derived1 ; // calls member function of Derived class base1 -> print (); return 0 ; } Run Code Output Derived Function Here, we have declared the print() function of Base as virtual . So, this function is overridden even when we use a pointer of Base type that points to the Derived object derived1. Working of virtual functions in C++ C++ override Identifier \u00b6 C++ 11 has given us a new identifier override that is very useful to avoid bugs while using virtual functions. This identifier specifies the member functions of the derived classes that override the member function of the base class. For example, class Base { public : virtual void print () { // code } }; class Derived : public Base { public : void print () override { // code } }; If we use a function prototype in Derived class and define that function outside of the class, then we use the following code: class Derived : public Base { public : // function prototype void print () override ; }; // function definition void Derived::print () { // code } Use of C++ override \u00b6 When using virtual functions, it is possible to make mistakes while declaring the member functions of the derived classes. Using the override identifier prompts the compiler to display error messages when these mistakes are made. Otherwise, the program will simply compile but the virtual function will not be overridden. Some of these possible mistakes are: Functions with incorrect names: For example, if the virtual function in the base class is named print() , but we accidentally name the overriding function in the derived class as pint() . Functions with different return types: If the virtual function is, say, of void type but the function in the derived class is of int type. Functions with different parameters: If the parameters of the virtual function and the functions in the derived classes don't match. No virtual function is declared in the base class. Use of C++ Virtual Functions \u00b6 Suppose we have a base class Animal and derived classes Dog and Cat . Suppose each class has a data member named type. Suppose these variables are initialized through their respective constructors. class Animal { private : string type ; ... .. ... public : Animal () : type ( \"Animal\" ) {} ... .. ... }; class Dog : public Animal { private : string type ; ... .. ... public : Animal () : type ( \"Dog\" ) {} ... .. ... }; class Cat : public Animal { private : string type ; ... .. ... public : Animal () : type ( \"Cat\" ) {} ... .. ... }; Now, let us suppose that our program requires us to create two public functions for each class: getType() to return the value of type print() to print the value of type We could create both these functions in each class separately and override them, which will be long and tedious. Or we could make getType() virtual in the Animal class, then create a single, separate print() function that accepts a pointer of Animal type as its argument. We can then use this single function to override the virtual function. class Animal { ... .. ... public : ... .. ... virtual string getType {...} }; ... .. ... ... .. ... void print ( Animal * ani ) { cout << \"Animal: \" << ani -> getType () << endl ; } This will make the code shorter , cleaner , and less repetitive . Example 2: C++ virtual Function Demonstration \u00b6 // C++ program to demonstrate the use of virtual function #include <iostream> #include <string> using namespace std ; class Animal { private : string type ; public : // constructor to initialize type Animal () : type ( \"Animal\" ) {} // declare virtual function virtual string getType () { return type ; } }; class Dog : public Animal { private : string type ; public : // constructor to initialize type Dog () : type ( \"Dog\" ) {} string getType () override { return type ; } }; class Cat : public Animal { private : string type ; public : // constructor to initialize type Cat () : type ( \"Cat\" ) {} string getType () override { return type ; } }; void print ( Animal * ani ) { cout << \"Animal: \" << ani -> getType () << endl ; } int main () { Animal * animal1 = new Animal (); Animal * dog1 = new Dog (); Animal * cat1 = new Cat (); print ( animal1 ); print ( dog1 ); print ( cat1 ); return 0 ; } Run Code Output Animal: Animal Animal: Dog Animal: Cat Here, we have used the virtual function getType() and an Animal pointer ani in order to avoid repeating the print() function in every class. void print ( Animal * ani ) { cout << \"Animal: \" << ani -> getType () << endl ; } In main() , we have created 3 Animal pointers to dynamically create objects of Animal , Dog and Cat classes. // dynamically create objects using Animal pointers Animal * animal1 = new Animal (); Animal * dog1 = new Dog (); Animal * cat1 = new Cat (); We then call the print() function using these pointers: When print(animal1) is called, the pointer points to an Animal object. So, the virtual function in Animal class is executed inside of print() . When print(dog1) is called, the pointer points to a Dog object. So, the virtual function is overridden and the function of Dog is executed inside of print() . When print(cat1) is called, the pointer points to a Cat object. So, the virtual function is overridden and the function of Cat is executed inside of print() . C++ Class Templates \u00b6 In this tutorial, we will learn about class templates in C++ with the help of examples. Templates are powerful features of C++ which allows us to write generic programs. There are two ways we can implement templates: Function Templates Class Templates Similar to function templates, we can use class templates to create a single class to work with different data types. Class templates come in handy as they can make our code shorter and more manageable. Class Template Declaration \u00b6 A class template starts with the keyword template followed by template parameter(s) inside <> which is followed by the class declaration. template < class T > class className { private : T var ; ... .. ... public : T functionName ( T arg ); ... .. ... }; In the above declaration, T is the template argument which is a placeholder for the data type used, and class is a keyword. Inside the class body, a member variable var and a member function functionName() are both of type T . Creating a Class Template Object \u00b6 Once we've declared and defined a class template, we can create its objects in other classes or functions (such as the main() function) with the following syntax className < dataType > classObject ; For example, className < int > classObject ; className < float > classObject ; className < string > classObject ; Example 1: C++ Class Templates \u00b6 // C++ program to demonstrate the use of class templates #include <iostream> using namespace std ; // Class template template < class T > class Number { private : // Variable of type T T num ; public : Number ( T n ) : num ( n ) {} // constructor T getNum () { return num ; } }; int main () { // create object with int type Number < int > numberInt ( 7 ); // create object with double type Number < double > numberDouble ( 7.7 ); cout << \"int Number = \" << numberInt . getNum () << endl ; cout << \"double Number = \" << numberDouble . getNum () << endl ; return 0 ; } Run Code Output int Number = 7 double Number = 7 .7 In this program. we have created a class template Number with the code template < class T > class Number { private : T num ; public : Number ( T n ) : num ( n ) {} T getNum () { return num ; } }; Notice that the variable num, the constructor argument n, and the function getNum() are of type T , or have a return type T . That means that they can be of any type. In main() , we have implemented the class template by creating its objects Number < int > numberInt ( 7 ); Number < double > numberDouble ( 7.7 ); Notice the codes Number<int> and Number<double> in the code above. This creates a class definition each for int and float , which are then used accordingly. It is compulsory to specify the type when declaring objects of class templates. Otherwise, the compiler will produce an error. //Error Number numberInt ( 7 ); Number numberDouble ( 7.7 ); Defining a Class Member Outside the Class Template \u00b6 Suppose we need to define a function outside of the class template. We can do this with the following code: template < class T > class ClassName { ... .. ... // Function prototype returnType functionName (); }; // Function definition template < class T > returnType ClassName < T >:: functionName () { // code } Notice that the code template <class T> is repeated while defining the function outside of the class. This is necessary and is part of the syntax. If we look at the code in Example 1 , we have a function getNum() that is defined inside the class template Number . We can define getNum() outside of Number with the following code: template < class T > class Number { ... .. ... // Function prototype T getnum (); }; // Function definition template < class T > T Number < T >:: getNum () { return num ; } Example 2: Simple Calculator Using Class Templates \u00b6 This program uses a class template to perform addition, subtraction, multiplication and division of two variables num1 and num2. The variables can be of any type, though we have only used int and float types in this example. #include <iostream> using namespace std ; template < class T > class Calculator { private : T num1 , num2 ; public : Calculator ( T n1 , T n2 ) { num1 = n1 ; num2 = n2 ; } void displayResult () { cout << \"Numbers: \" << num1 << \" and \" << num2 << \".\" << endl ; cout << num1 << \" + \" << num2 << \" = \" << add () << endl ; cout << num1 << \" - \" << num2 << \" = \" << subtract () << endl ; cout << num1 << \" * \" << num2 << \" = \" << multiply () << endl ; cout << num1 << \" / \" << num2 << \" = \" << divide () << endl ; } T add () { return num1 + num2 ; } T subtract () { return num1 - num2 ; } T multiply () { return num1 * num2 ; } T divide () { return num1 / num2 ; } }; int main () { Calculator < int > intCalc ( 2 , 1 ); Calculator < float > floatCalc ( 2.4 , 1.2 ); cout << \"Int results:\" << endl ; intCalc . displayResult (); cout << endl << \"Float results:\" << endl ; floatCalc . displayResult (); return 0 ; } Run Code Output Int results: Numbers: 2 and 1 . 2 + 1 = 3 2 - 1 = 1 2 * 1 = 2 2 / 1 = 2 Float results: Numbers: 2 .4 and 1 .2. 2 .4 + 1 .2 = 3 .6 2 .4 - 1 .2 = 1 .2 2 .4 * 1 .2 = 2 .88 2 .4 / 1 .2 = 2 In the above program, we have declared a class template Calculator . The class contains two private members of type T : num1 & num2, and a constructor to initialize the members. We also have add() , subtract() , multiply() , and divide() functions that have the return type T . We also have a void function displayResult() that prints out the results of the other functions. In main() , we have created two objects of Calculator : one for int data type and another for float data type. Calculator < int > intCalc ( 2 , 1 ); Calculator < float > floatCalc ( 2.4 , 1.2 ); This prompts the compiler to create two class definitions for the respective data types during compilation. C++ Class Templates With Multiple Parameters \u00b6 In C++, we can use multiple template parameters and even use default arguments for those parameters. For example, template < class T , class U , class V = int > class ClassName { private : T member1 ; U member2 ; V member3 ; ... .. ... public : ... .. ... }; Example 3: C++ Templates With Multiple Parameters \u00b6 #include <iostream> using namespace std ; // Class template with multiple and default parameters template < class T , class U , class V = char > class ClassTemplate { private : T var1 ; U var2 ; V var3 ; public : ClassTemplate ( T v1 , U v2 , V v3 ) : var1 ( v1 ), var2 ( v2 ), var3 ( v3 ) {} // constructor void printVar () { cout << \"var1 = \" << var1 << endl ; cout << \"var2 = \" << var2 << endl ; cout << \"var3 = \" << var3 << endl ; } }; int main () { // create object with int, double and char types ClassTemplate < int , double > obj1 ( 7 , 7.7 , 'c' ); cout << \"obj1 values: \" << endl ; obj1 . printVar (); // create object with int, double and bool types ClassTemplate < double , char , bool > obj2 ( 8.8 , 'a' , false ); cout << \" \\n obj2 values: \" << endl ; obj2 . printVar (); return 0 ; } Run Code Output obj1 values: var1 = 7 var2 = 7 .7 var3 = c obj2 values: var1 = 8 .8 var2 = a var3 = 0 In this program, we have created a class template, named ClassTemplate , with three parameters, with one of them being a default parameter. template < class T , class U , class V = char > class ClassTemplate { // code }; Notice the code class V = char . This means that V is a default parameter whose default type is char . Inside ClassTemplate , we declare 3 variables var1, var2 and var3, each corresponding to one of the template parameters. class ClassTemplate { private : T var1 ; U var2 ; V var3 ; ... .. ... ... .. ... }; In main() , we create two objects of ClassTemplate with the code // create object with int, double and char types ClassTemplate < int , double > obj1 ( 7 , 7.7 , 'c' ); // create object with double, char and bool types ClassTemplate < double , char , bool > obj2 ( 8 , 8.8 , false ); Here, Object T U V obj1 int double char obj2 double char bool For obj1, T = int , U = double and V = char . For obj2, T = double , U = char and V = bool . References \u00b6 Learn C++ Programming Introduction to C++ | C Plus Plus Programming Language Tutorials The C and C++ programming tutorials, hands-on approach with program examples, code samples and tons of output images using Visual C++, C++ Builder, Linux gcc and g++ compilers and IDE","title":"Week-6 (C++ Console Programming)"},{"location":"week-6-cpp/ce103-week-6-cpp/#ce103-algorithms-and-programming-i","text":"","title":"CE103 Algorithms and Programming I"},{"location":"week-6-cpp/ce103-week-6-cpp/#week-6","text":"","title":"Week-6"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-functional-console-programming","text":"Download DOC , SLIDE , PPTX","title":"C++ Functional Console Programming"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-functional-console-programming_1","text":"","title":"C++ Functional Console Programming"},{"location":"week-6-cpp/ce103-week-6-cpp/#books-and-resources","text":"free-programming-books/free-programming-books-langs.md at master \u00b7 EbookFoundation/free-programming-books \u00b7 GitHub","title":"Books and Resources"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-functional-console-programming_2","text":"","title":"C++ Functional Console Programming"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-introduction","text":"","title":"C++ Introduction"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-variables-literals-and-constants","text":"In this tutorial, we will learn about variables, literals, and constants in C++ with the help of examples.","title":"C++ Variables, Literals and Constants"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-variables","text":"In programming, a variable is a container (storage area) to hold data. To indicate the storage area, each variable should be given a unique name (identifier). For example, int age = 14 ; Here, age is a variable of the int data type, and we have assigned an integer value 14 to it. Note: The int data type suggests that the variable can only hold integers. Similarly, we can use the double data type if we have to store decimals and exponentials. We will learn about all the data types in detail in the next tutorial. The value of a variable can be changed, hence the name variable . int age = 14 ; // age is 14 age = 17 ; // age is 17","title":"C++ Variables"},{"location":"week-6-cpp/ce103-week-6-cpp/#rules-for-naming-a-variable","text":"A variable name can only have alphabets, numbers, and the underscore _ . A variable name cannot begin with a number. It is a preferred practice to begin variable names with a lowercase character. For example, name is preferable to Name. A variable name cannot be a keyword . For example, int is a keyword that is used to denote integers. A variable name can start with an underscore. However, it's not considered a good practice. Note: We should try to give meaningful names to variables. For example, first_name is a better variable name than fn.","title":"Rules for naming a variable"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-literals","text":"Literals are data used for representing fixed values. They can be used directly in the code. For example: 1 , 2.5 , 'c' etc. Here, 1 , 2.5 and 'c' are literals. Why? You cannot assign different values to these terms. Here's a list of different literals in C++ programming.","title":"C++ Literals"},{"location":"week-6-cpp/ce103-week-6-cpp/#1-integers","text":"An integer is a numeric literal(associated with numbers) without any fractional or exponential part. There are three types of integer literals in C programming: decimal (base 10) octal (base 8) hexadecimal (base 16) For example: Decimal : 0 , -9 , 22 etc Octal : 021 , 077 , 033 etc Hexadecimal : 0x7f , 0x2a , 0x521 etc In C++ programming, octal starts with a 0 , and hexadecimal starts with a 0x .","title":"1. Integers"},{"location":"week-6-cpp/ce103-week-6-cpp/#2-floating-point-literals","text":"A floating-point literal is a numeric literal that has either a fractional form or an exponent form. For example: -2.0 0.0000234 -0.22E-5 Note: E-5 = 10-5","title":"2. Floating-point Literals"},{"location":"week-6-cpp/ce103-week-6-cpp/#3-characters","text":"A character literal is created by enclosing a single character inside single quotation marks. For example: 'a' , 'm' , 'F' , '2' , '}' etc.","title":"3. Characters"},{"location":"week-6-cpp/ce103-week-6-cpp/#4-escape-sequences","text":"Sometimes, it is necessary to use characters that cannot be typed or has special meaning in C++ programming. For example, newline (enter), tab, question mark, etc. In order to use these characters, escape sequences are used. Escape Sequences Characters \\b Backspace \\f Form feed \\n Newline \\r Return \\t Horizontal tab \\v Vertical tab \\\\ Backslash \\' Single quotation mark \\\" Double quotation mark \\? Question mark \\0 Null Character","title":"4. Escape Sequences"},{"location":"week-6-cpp/ce103-week-6-cpp/#5-string-literals","text":"A string literal is a sequence of characters enclosed in double-quote marks. For example: \"good\" string constant \"\" null string constant \" \" string constant of six white space \"x\" string constant having a single character \"Earth is round\\n\" prints string with a newline We will learn about strings in detail in the C++ string tutorial.","title":"5. String Literals"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-constants","text":"In C++, we can create variables whose value cannot be changed. For that, we use the const keyword. Here's an example: const int LIGHT_SPEED = 299792458 ; LIGHT_SPEED = 2500 // Error! LIGHT_SPEED is a constant. Here, we have used the keyword const to declare a constant named LIGHT_SPEED . If we try to change the value of LIGHT_SPEED , we will get an error. A constant can also be created using the #define preprocessor directive. We will learn about it in detail in the C++ Macros tutorial.","title":"C++ Constants"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-data-types","text":"In this tutorial, we will learn about basic data types such as int, float, char, etc. in C++ programming with the help of examples. In C++, data types are declarations for variables. This determines the type and size of data associated with variables. For example, int age = 13 ; Here, age is a variable of type int . Meaning, the variable can only store integers of either 2 or 4 bytes.","title":"C++ Data Types"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-fundamental-data-types","text":"The table below shows the fundamental data types, their meaning, and their sizes (in bytes): Data Type Meaning Size (in Bytes) int Integer 2 or 4 float Floating-point 4 double Double Floating-point 8 char Character 1 wchar_t Wide Character 2 bool Boolean 1 void Empty 0 Now, let us discuss these fundamental data types in more detail.","title":"C++ Fundamental Data Types"},{"location":"week-6-cpp/ce103-week-6-cpp/#1-c-int","text":"The int keyword is used to indicate integers. Its size is usually 4 bytes. Meaning, it can store values from -2147483648 to 2147483647 . For example, int salary = 85000 ;","title":"1. C++ int"},{"location":"week-6-cpp/ce103-week-6-cpp/#2-c-float-and-double","text":"float and double are used to store floating-point numbers (decimals and exponentials). The size of float is 4 bytes and the size of double is 8 bytes. Hence, double has two times the precision of float . To learn more, visit C++ float and double. For example, float area = 64.74 ; double volume = 134.64534 ; As mentioned above, these two data types are also used for exponentials. For example, double distance = 45E12 // 45E12 is equal to 45*10^12","title":"2. C++ float and double"},{"location":"week-6-cpp/ce103-week-6-cpp/#3-c-char","text":"Keyword char is used for characters. Its size is 1 byte. Characters in C++ are enclosed inside single quotes ' ' . For example, char test = 'h' ; Note: In C++, an integer value is stored in a char variable rather than the character itself. To learn more, visit C++ characters .","title":"3. C++ char"},{"location":"week-6-cpp/ce103-week-6-cpp/#4-c-wchar_t","text":"Wide character wchar_t is similar to the char data type, except its size is 2 bytes instead of 1. It is used to represent characters that require more memory to represent them than a single char . For example, wchar_t test = L '\u05dd' // storing Hebrew character; Notice the letter L before the quotation marks. Note: There are also two other fixed-size character types char16_t and char32_t introduced in C++11.","title":"4. C++ wchar_t"},{"location":"week-6-cpp/ce103-week-6-cpp/#5-c-bool","text":"The bool data type has one of two possible values: true or false . Booleans are used in conditional statements and loops (which we will learn in later chapters). For example, bool cond = false ;","title":"5. C++ bool"},{"location":"week-6-cpp/ce103-week-6-cpp/#6-c-void","text":"The void keyword indicates an absence of data. It means \"nothing\" or \"no value\". We will use void when we learn about functions and pointers. Note: We cannot declare variables of the void type.","title":"6. C++ void"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-type-modifiers","text":"We can further modify some of the fundamental data types by using type modifiers. There are 4 type modifiers in C++. They are: signed unsigned short long We can modify the following data types with the above modifiers: int double char","title":"C++ Type Modifiers"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-modified-data-types-list","text":"Data Type Size (in Bytes) Meaning signed int 4 used for integers (equivalent to int ) unsigned int 4 can only store positive integers short 2 used for small integers (range -32768 to 32767 ) unsigned short 2 used for small positive integers (range 0 to 65,535 ) long at least 4 used for large integers (equivalent to long int ) unsigned long 4 used for large positive integers or 0 (equivalent to unsigned long int ) long long 8 used for very large integers (equivalent to long long int ). unsigned long long 8 used for very large positive integers or 0 (equivalent to unsigned long long int ) long double 12 used for large floating-point numbers signed char 1 used for characters (guaranteed range -127 to 127 ) unsigned char 1 used for characters (range 0 to 255 ) Let's see a few examples. long b = 4523232 ; long int c = 2345342 ; long double d = 233434.56343 ; short d = 3434233 ; // Error! out of range unsigned int a = -5 ; // Error! can only store positive numbers or 0","title":"C++ Modified Data Types List"},{"location":"week-6-cpp/ce103-week-6-cpp/#derived-data-types","text":"Data types that are derived from fundamental data types are derived types. For example: arrays, pointers, function types, structures, etc. We will learn about these derived data types in later tutorials.","title":"Derived Data Types"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-basic-inputoutput","text":"In this tutorial, we will learn to use the cin object to take input from the user, and the cout object to display output to the user with the help of examples.","title":"C++ Basic Input/Output"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-output","text":"In C++, cout sends formatted output to standard output devices, such as the screen. We use the cout object along with the << operator for displaying output.","title":"C++ Output"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-1-string-output","text":"#include <iostream> using namespace std ; int main () { // prints the string enclosed in double quotes cout << \"This is C++ Programming\" ; return 0 ; } Run Code Output This is C++ Programming How does this program work? We first include the iostream header file that allows us to display output. The cout object is defined inside the std namespace. To use the std namespace, we used the using namespace std; statement. Every C++ program starts with the main() function. The code execution begins from the start of the main() function. cout is an object that prints the string inside quotation marks \" \" . It is followed by the << operator. return 0; is the \"exit status\" of the main() function. The program ends with this statement, however, this statement is not mandatory. Note: If we don't include the using namespace std; statement, we need to use std::cout instead of cout . This is the preferred method as using the std namespace can create potential problems. However, we have used the std namespace in our tutorials in order to make the codes more readable. #include <iostream> int main () { // prints the string enclosed in double quotes std :: cout << \"This is C++ Programming\" ; return 0 ; } Run Code","title":"Example 1: String Output"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-2-numbers-and-characters-output","text":"To print the numbers and character variables, we use the same cout object but without using quotation marks. #include <iostream> using namespace std ; int main () { int num1 = 70 ; double num2 = 256.783 ; char ch = 'A' ; cout << num1 << endl ; // print integer cout << num2 << endl ; // print double cout << \"character: \" << ch << endl ; // print char return 0 ; } Run Code Output 70 256 .783 character: A Notes: The endl manipulator is used to insert a new line. That's why each output is displayed in a new line. The << operator can be used more than once if we want to print different variables, strings and so on in a single statement. For example: cout << \"character: \" << ch << endl ;","title":"Example 2: Numbers and Characters Output"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-input","text":"In C++, cin takes formatted input from standard input devices such as the keyboard. We use the cin object along with the >> operator for taking input.","title":"C++ Input"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-3-integer-inputoutput","text":"#include <iostream> using namespace std ; int main () { int num ; cout << \"Enter an integer: \" ; cin >> num ; // Taking input cout << \"The number is: \" << num ; return 0 ; } Run Code Output Enter an integer: 70 The number is: 70 In the program, we used cin >> num ; to take input from the user. The input is stored in the variable num. We use the >> operator with cin to take input. Note: If we don't include the using namespace std; statement, we need to use std::cin instead of cin .","title":"Example 3: Integer Input/Output"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-taking-multiple-inputs","text":"#include <iostream> using namespace std ; int main () { char a ; int num ; cout << \"Enter a character and an integer: \" ; cin >> a >> num ; cout << \"Character: \" << a << endl ; cout << \"Number: \" << num ; return 0 ; } Run Code Output Enter a character and an integer: F 23 Character: F Number: 23","title":"C++ Taking Multiple Inputs"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-type-conversion","text":"In this tutorial, we will learn about the basics of C++ type conversion with the help of examples. C++ allows us to convert data of one type to that of another. This is known as type conversion. There are two types of type conversion in C++. Implicit Conversion Explicit Conversion (also known as Type Casting)","title":"C++ Type Conversion"},{"location":"week-6-cpp/ce103-week-6-cpp/#implicit-type-conversion","text":"The type conversion that is done automatically done by the compiler is known as implicit type conversion. This type of conversion is also known as automatic conversion. Let us look at two examples of implicit type conversion.","title":"Implicit Type Conversion"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-1-conversion-from-int-to-double","text":"// Working of implicit type-conversion #include <iostream> using namespace std ; int main () { // assigning an int value to num_int int num_int = 9 ; // declaring a double type variable double num_double ; // implicit conversion // assigning int value to a double variable num_double = num_int ; cout << \"num_int = \" << num_int << endl ; cout << \"num_double = \" << num_double << endl ; return 0 ; } Run Code Output num_int = 9 num_double = 9 In the program, we have assigned an int data to a double variable. num_double = num_int ; Here, the int value is automatically converted to double by the compiler before it is assigned to the num_double variable. This is an example of implicit type conversion.","title":"Example 1: Conversion From int to double"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-2-automatic-conversion-from-double-to-int","text":"//Working of Implicit type-conversion #include <iostream> using namespace std ; int main () { int num_int ; double num_double = 9.99 ; // implicit conversion // assigning a double value to an int variable num_int = num_double ; cout << \"num_int = \" << num_int << endl ; cout << \"num_double = \" << num_double << endl ; return 0 ; } Run Code Output num_int = 9 num_double = 9 .99 In the program, we have assigned a double data to an int variable. num_int = num_double ; Here, the double value is automatically converted to int by the compiler before it is assigned to the num_int variable. This is also an example of implicit type conversion. Note: Since int cannot have a decimal part, the digits after the decimal point are truncated in the above example.","title":"Example 2: Automatic Conversion from double to int"},{"location":"week-6-cpp/ce103-week-6-cpp/#data-loss-during-conversion-narrowing-conversion","text":"As we have seen from the above example, conversion from one data type to another is prone to data loss. This happens when data of a larger type is converted to data of a smaller type. Possible Data Loss During Type Conversion","title":"Data Loss During Conversion (Narrowing Conversion)"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-explicit-conversion","text":"When the user manually changes data from one type to another, this is known as explicit conversion . This type of conversion is also known as type casting . There are three major ways in which we can use explicit conversion in C++. They are: C-style type casting (also known as cast notation ) Function notation (also known as old C++ style type casting ) Type conversion operators","title":"C++ Explicit Conversion"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-style-type-casting","text":"As the name suggests, this type of casting is favored by the C programming language . It is also known as cast notation . The syntax for this style is: ( data_type ) expression ; For example, // initializing int variable int num_int = 26 ; // declaring double variable double num_double ; // converting from int to double num_double = ( double ) num_int ;","title":"C-style Type Casting"},{"location":"week-6-cpp/ce103-week-6-cpp/#function-style-casting","text":"We can also use the function like notation to cast data from one type to another. The syntax for this style is: data_type ( expression ); For example, // initializing int variable int num_int = 26 ; // declaring double variable double num_double ; // converting from int to double num_double = double ( num_int );","title":"Function-style Casting"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-3-type-casting","text":"#include <iostream> using namespace std ; int main () { // initializing a double variable double num_double = 3.56 ; cout << \"num_double = \" << num_double << endl ; // C-style conversion from double to int int num_int1 = ( int ) num_double ; cout << \"num_int1 = \" << num_int1 << endl ; // function-style conversion from double to int int num_int2 = int ( num_double ); cout << \"num_int2 = \" << num_int2 << endl ; return 0 ; } Run Code Output num_double = 3 .56 num_int1 = 3 num_int2 = 3 We used both the C style type conversion and the function-style casting for type conversion and displayed the results. Since they perform the same task, both give us the same output.","title":"Example 3: Type Casting"},{"location":"week-6-cpp/ce103-week-6-cpp/#type-conversion-operators","text":"Besides these two type castings, C++ also has four operators for type conversion. They are known as type conversion operators . They are: static_cast dynamic_cast const_cast reinterpret_cast We will learn about these casts in later tutorials. Recommended Tutorials: C++ string to int and Vice-versa C++ string to float, double and Vice-versa","title":"Type Conversion Operators"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-operators","text":"In this tutorial, we will learn about the different types of operators in C++ with the help of examples. In programming, an operator is a symbol that operates on a value or a variable. Operators are symbols that perform operations on variables and values. For example, + is an operator used for addition, while - is an operator used for subtraction. Operators in C++ can be classified into 6 types: Arithmetic Operators Assignment Operators Relational Operators Logical Operators Bitwise Operators Other Operators","title":"C++ Operators"},{"location":"week-6-cpp/ce103-week-6-cpp/#1-c-arithmetic-operators","text":"Arithmetic operators are used to perform arithmetic operations on variables and data. For example, a + b ; Here, the + operator is used to add two variables a and b. Similarly there are various other arithmetic operators in C++. Operator Operation + Addition - Subtraction * Multiplication / Division % Modulo Operation (Remainder after division)","title":"1. C++ Arithmetic Operators"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-1-arithmetic-operators","text":"#include <iostream> using namespace std ; int main () { int a , b ; a = 7 ; b = 2 ; // printing the sum of a and b cout << \"a + b = \" << ( a + b ) << endl ; // printing the difference of a and b cout << \"a - b = \" << ( a - b ) << endl ; // printing the product of a and b cout << \"a * b = \" << ( a * b ) << endl ; // printing the division of a by b cout << \"a / b = \" << ( a / b ) << endl ; // printing the modulo of a by b cout << \"a % b = \" << ( a % b ) << endl ; return 0 ; } Run Code Output a + b = 9 a - b = 5 a * b = 14 a / b = 3 a % b = 1 Here, the operators + , - and * compute addition, subtraction, and multiplication respectively as we might have expected. / Division Operator Note the operation (a / b) in our program. The / operator is the division operator. As we can see from the above example, if an integer is divided by another integer, we will get the quotient. However, if either divisor or dividend is a floating-point number, we will get the result in decimals. In C++, 7 / 2 is 3 7.0 / 2 is 3.5 7 / 2.0 is 3.5 7.0 / 2.0 is 3.5 % Modulo Operator The modulo operator % computes the remainder. When a = 9 is divided by b = 4 , the remainder is 1 . Note: The % operator can only be used with integers.","title":"Example 1: Arithmetic Operators"},{"location":"week-6-cpp/ce103-week-6-cpp/#increment-and-decrement-operators","text":"C++ also provides increment and decrement operators: ++ and -- respectively. ++ increases the value of the operand by 1 -- decreases it by 1 For example, int num = 5 ; // increment operator ++ num ; // 6 Here, the code ++num; increases the value of num by 1 .","title":"Increment and Decrement Operators"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-2-increment-and-decrement-operators","text":"// Working of increment and decrement operators #include <iostream> using namespace std ; int main () { int a = 10 , b = 100 , result_a , result_b ; // incrementing a by 1 and storing the result in result_a result_a = ++ a ; cout << \"result_a = \" << result_a << endl ; // decrementing b by 1 and storing the result in result_b result_b = -- b ; cout << \"result_b = \" << result_b << endl ; return 0 ; } Run Code Output result_a = 11 result_b = 99 In the above program, we have used the ++ and -- operators as prefixes (++a and --b) . However, we can also use these operators as postfix (a++ and b--) . To learn more, visit increment and decrement operators .","title":"Example 2: Increment and Decrement Operators"},{"location":"week-6-cpp/ce103-week-6-cpp/#2-c-assignment-operators","text":"In C++, assignment operators are used to assign values to variables. For example, // assign 5 to a a = 5 ; Here, we have assigned a value of 5 to the variable a. Operator Example Equivalent to = a = b; a = b; += a += b; a = a + b; -= a -= b; a = a - b; *= a *= b; a = a * b; /= a /= b; a = a / b; %= a %= b; a = a % b;","title":"2. C++ Assignment Operators"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-3-assignment-operators","text":"#include <iostream> using namespace std ; int main () { int a , b ; // 2 is assigned to a a = 2 ; // 7 is assigned to b b = 7 ; cout << \"a = \" << a << endl ; cout << \"b = \" << b << endl ; cout << \" \\n After a += b;\" << endl ; // assigning the sum of a and b to a a += b ; // a = a +b cout << \"a = \" << a << endl ; return 0 ; } Run Code Output a = 2 b = 7 After a += b ; a = 9","title":"Example 3: Assignment Operators"},{"location":"week-6-cpp/ce103-week-6-cpp/#3-c-relational-operators","text":"A relational operator is used to check the relationship between two operands. For example, // checks if a is greater than b a > b ; Here, > is a relational operator. It checks if a is greater than b or not. If the relation is true , it returns 1 whereas if the relation is false , it returns 0 . Operator Meaning Example == Is Equal To 3 == 5 gives us false != Not Equal To 3 != 5 gives us true > Greater Than 3 > 5 gives us false < Less Than 3 < 5 gives us true >= Greater Than or Equal To 3 >= 5 give us false <= Less Than or Equal To 3 <= 5 gives us true","title":"3. C++ Relational Operators"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-4-relational-operators","text":"#include <iostream> using namespace std ; int main () { int a , b ; a = 3 ; b = 5 ; bool result ; result = ( a == b ); // false cout << \"3 == 5 is \" << result << endl ; result = ( a != b ); // true cout << \"3 != 5 is \" << result << endl ; result = a > b ; // false cout << \"3 > 5 is \" << result << endl ; result = a < b ; // true cout << \"3 < 5 is \" << result << endl ; result = a >= b ; // false cout << \"3 >= 5 is \" << result << endl ; result = a <= b ; // true cout << \"3 <= 5 is \" << result << endl ; return 0 ; } Run Code Output 3 == 5 is 0 3 ! = 5 is 1 3 > 5 is 0 3 < 5 is 1 3 > = 5 is 0 3 < = 5 is 1 Note : Relational operators are used in decision-making and loops.","title":"Example 4: Relational Operators"},{"location":"week-6-cpp/ce103-week-6-cpp/#4-c-logical-operators","text":"Logical operators are used to check whether an expression is true or false . If the expression is true , it returns 1 whereas if the expression is false , it returns 0 . Operator Example Meaning && expression1 && expression2 Logical AND. True only if all the operands are true. \\| expression1 | expression2 Logical OR. True if at least one of the operands is true. ! **!**expression Logical NOT. True only if the operand is false. In C++, logical operators are commonly used in decision making. To further understand the logical operators, let's see the following examples, Suppose , a = 5 b = 8 Then , ( a > 3 ) && ( b > 5 ) evaluates to true ( a > 3 ) && ( b < 5 ) evaluates to false ( a > 3 ) || ( b > 5 ) evaluates to true ( a > 3 ) || ( b < 5 ) evaluates to true ( a < 3 ) || ( b < 5 ) evaluates to false ! ( a < 3 ) evaluates to true ! ( a > 3 ) evaluates to false","title":"4. C++ Logical Operators"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-5-logical-operators","text":"#include <iostream> using namespace std ; int main () { bool result ; result = ( 3 != 5 ) && ( 3 < 5 ); // true cout << \"(3 != 5) && (3 < 5) is \" << result << endl ; result = ( 3 == 5 ) && ( 3 < 5 ); // false cout << \"(3 == 5) && (3 < 5) is \" << result << endl ; result = ( 3 == 5 ) && ( 3 > 5 ); // false cout << \"(3 == 5) && (3 > 5) is \" << result << endl ; result = ( 3 != 5 ) || ( 3 < 5 ); // true cout << \"(3 != 5) || (3 < 5) is \" << result << endl ; result = ( 3 != 5 ) || ( 3 > 5 ); // true cout << \"(3 != 5) || (3 > 5) is \" << result << endl ; result = ( 3 == 5 ) || ( 3 > 5 ); // false cout << \"(3 == 5) || (3 > 5) is \" << result << endl ; result = ! ( 5 == 2 ); // true cout << \"!(5 == 2) is \" << result << endl ; result = ! ( 5 == 5 ); // false cout << \"!(5 == 5) is \" << result << endl ; return 0 ; } Run Code Output","title":"Example 5: Logical Operators"},{"location":"week-6-cpp/ce103-week-6-cpp/#3-5-3-5-is-1-3-5-3-5-is-0-3-5-3-5-is-0-3-5-3-5-is-1-3-5-3-5-is-1-3-5-3-5-is-0-5-2-is-1-5-5-is-0","text":"Explanation of logical operator program (3 != 5) && (3 < 5) evaluates to 1 because both operands (3 != 5) and (3 < 5) are 1 (true). (3 == 5) && (3 < 5) evaluates to 0 because the operand (3 == 5) is 0 (false). (3 == 5) && (3 > 5) evaluates to 0 because both operands (3 == 5) and (3 > 5) are 0 (false). (3 != 5) || (3 < 5) evaluates to 1 because both operands (3 != 5) and (3 < 5) are 1 (true). (3 != 5) || (3 > 5) evaluates to 1 because the operand (3 != 5) is 1 (true). (3 == 5) || (3 > 5) evaluates to 0 because both operands (3 == 5) and (3 > 5) are 0 (false). !(5 == 2) evaluates to 1 because the operand (5 == 2) is 0 (false). !(5 == 5) evaluates to 0 because the operand (5 == 5) is 1 (true).","title":"(3 != 5) &amp;&amp; (3 &lt; 5) is 1\n(3 == 5) &amp;&amp; (3 &lt; 5) is 0\n(3 == 5) &amp;&amp; (3 &gt; 5) is 0\n(3 != 5) || (3 &lt; 5) is 1\n(3 != 5) || (3 &gt; 5) is 1\n(3 == 5) || (3 &gt; 5) is 0\n!(5 == 2) is 1\n!(5 == 5) is 0\n"},{"location":"week-6-cpp/ce103-week-6-cpp/#5-c-bitwise-operators","text":"In C++, bitwise operators are used to perform operations on individual bits. They can only be used alongside char and int data types. Operator Description & Binary AND \\| Binary OR ^ Binary XOR ~ Binary One's Complement << Binary Shift Left >> Binary Shift Right To learn more, visit C++ bitwise operators .","title":"5. C++ Bitwise Operators"},{"location":"week-6-cpp/ce103-week-6-cpp/#6-other-c-operators","text":"Here's a list of some other common operators available in C++. We will learn about them in later tutorials. Operator Description Example sizeof returns the size of data type sizeof(int); // 4 ?: returns value based on the condition string result = (5 > 0) ? \"even\" : \"odd\"; // \"even\" & represents memory address of the operand &num; // address of num . accesses members of struct variables or class objects s1.marks = 92; -> used with pointers to access the class or struct variables ptr->marks = 92; << prints the output value cout << 5; >> gets the input value cin >> num;","title":"6. Other C++ Operators"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-comments","text":"In this tutorial, we will learn about C++ comments, why we use them, and how to use them with the help of examples. C++ comments are hints that a programmer can add to make their code easier to read and understand. They are completely ignored by C++ compilers. There are two ways to add comments to code: // - Single Line Comments /* */ -Multi-line Comments","title":"C++ Comments"},{"location":"week-6-cpp/ce103-week-6-cpp/#single-line-comments","text":"In C++, any line that starts with // is a comment. For example, // declaring a variable int a ; // initializing the variable 'a' with the value 2 a = 2 ; Here, we have used two single-line comments: // declaring a variable // initializing the variable 'a' with the value 2 We can also use single line comment like this: int a ; // declaring a variable","title":"Single Line Comments"},{"location":"week-6-cpp/ce103-week-6-cpp/#multi-line-comments","text":"In C++, any line between /* and */ is also a comment. For example, /* declaring a variableto store salary to employees*/ int salary = 2000 ; This syntax can be used to write both single-line and multi-line comments.","title":"Multi-line comments"},{"location":"week-6-cpp/ce103-week-6-cpp/#using-comments-for-debugging","text":"Comments can also be used to disable code to prevent it from being executed. For example, #include <iostream> using namespace std ; int main () { cout << \"some code\" ; cout << '' error code ; cout << \"some other code\" ; return 0 ;} Run Code If we get an error while running the program, instead of removing the error-prone code, we can use comments to disable it from being executed; this can be a valuable debugging tool. #include <iostream> using namespace std ; int main () { cout << \"some code\" ; // cout << ''error code; cout << \"some other code\" ; return 0 ; } Run Code Pro Tip: Remember the shortcut for using comments; it can be really helpful. For most code editors, it's Ctrl + / for Windows and Cmd + / for Mac.","title":"Using Comments for Debugging"},{"location":"week-6-cpp/ce103-week-6-cpp/#why-use-comments","text":"If we write comments on our code, it will be easier for us to understand the code in the future. Also, it will be easier for your fellow developers to understand the code. Note: Comments shouldn't be the substitute for a way to explain poorly written code in English. We should always write well-structured and self-explanatory code. And, then use comments. As a general rule of thumb, use comments to explain Why you did something rather than How you did something, and you are good.","title":"Why use Comments?"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-flow-control","text":"","title":"C++ Flow Control"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-if-ifelse-and-nested-ifelse","text":"In this tutorial, we will learn about the if...else statement to create decision making programs with the help of examples. In computer programming, we use the if...else statement to run one block of code under certain conditions and another block of code under different conditions. For example, assigning grades (A, B, C) based on marks obtained by a student. if the percentage is above 90 , assign grade A if the percentage is above 75 , assign grade B if the percentage is above 65 , assign grade C There are three forms of if...else statements in C++. if statement if...else statement if...else if...else statement","title":"C++ if, if...else and Nested if...else"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-if-statement","text":"The syntax of the if statement is: if ( condition ) { // body of if statement } The if statement evaluates the condition inside the parentheses ( ) . If the condition evaluates to true , the code inside the body of if is executed. If the condition evaluates to false , the code inside the body of if is skipped. Note: The code inside { } is the body of the if statement. How if Statement Works","title":"C++ if Statement"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-1-c-if-statement","text":"// Program to print positive number entered by the user // If the user enters a negative number, it is skipped #include <iostream> using namespace std ; int main () { int number ; cout << \"Enter an integer: \" ; cin >> number ; // checks if the number is positive if ( number > 0 ) { cout << \"You entered a positive integer: \" << number << endl ; } cout << \"This statement is always executed.\" ; return 0 ; } Run Code Output 1 Enter an integer: 5 You entered a positive number: 5 This statement is always executed. When the user enters 5 , the condition number > 0 is evaluated to true and the statement inside the body of if is executed. Output 2 Enter a number: -5 This statement is always executed. When the user enters -5 , the condition number > 0 is evaluated to false and the statement inside the body of if is not executed.","title":"Example 1: C++ if Statement"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-ifelse","text":"The if statement can have an optional else clause. Its syntax is: if ( condition ) { // block of code if condition is true } else { // block of code if condition is false } The if..else statement evaluates the condition inside the parenthesis. How if...else Statement Works If the condition evaluates true , the code inside the body of if is executed the code inside the body of else is skipped from execution If the condition evaluates false , the code inside the body of else is executed the code inside the body of if is skipped from execution","title":"C++ if...else"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-2-c-ifelse-statement","text":"// Program to check whether an integer is positive or negative // This program considers 0 as a positive number #include <iostream> using namespace std ; int main () { int number ; cout << \"Enter an integer: \" ; cin >> number ; if ( number >= 0 ) { cout << \"You entered a positive integer: \" << number << endl ; } else { cout << \"You entered a negative integer: \" << number << endl ; } cout << \"This line is always printed.\" ; return 0 ; } Run Code Output 1 Enter an integer: 4 You entered a positive integer: 4 . This line is always printed. In the above program, we have the condition number >= 0 . If we enter the number greater or equal to 0, then the condition evaluates true . Here, we enter 4. So, the condition is true . Hence, the statement inside the body of if is executed. Output 2 Enter an integer: -4 You entered a negative integer: -4. This line is always printed. Here, we enter -4. So, the condition is false . Hence, the statement inside the body of else is executed.","title":"Example 2: C++ if...else Statement"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-ifelseelse-if-statement","text":"The if...else statement is used to execute a block of code among two alternatives. However, if we need to make a choice between more than two alternatives, we use the if...else if...else statement. The syntax of the if...else if...else statement is: if ( condition1 ) { // code block 1 } else if ( condition2 ){ // code block 2 } else { // code block 3 } Here, If condition1 evaluates to true , the code block 1 is executed. If condition1 evaluates to false , then condition2 is evaluated. If condition2 is true , the code block 2 is executed. If condition2 is false , the code block 3 is executed. How if...else if...else Statement Works Note: There can be more than one else if statement but only one if and else statements.","title":"C++ if...else...else if statement"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-3-c-ifelseelse-if","text":"// Program to check whether an integer is positive, negative or zero #include <iostream> using namespace std ; int main () { int number ; cout << \"Enter an integer: \" ; cin >> number ; if ( number > 0 ) { cout << \"You entered a positive integer: \" << number << endl ; } else if ( number < 0 ) { cout << \"You entered a negative integer: \" << number << endl ; } else { cout << \"You entered 0.\" << endl ; } cout << \"This line is always printed.\" ; return 0 ; } Run Code Output 1 Enter an integer: 1 You entered a positive integer: 1 . This line is always printed. Output 2 Enter an integer: -2 You entered a negative integer: -2. This line is always printed. Output 3 Enter an integer: 0 You entered 0 . This line is always printed. In this program, we take a number from the user. We then use the if...else if...else ladder to check whether the number is positive, negative, or zero. If the number is greater than 0 , the code inside the if block is executed. If the number is less than 0 , the code inside the else if block is executed. Otherwise, the code inside the else block is executed.","title":"Example 3: C++ if...else...else if"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-nested-ifelse","text":"Sometimes, we need to use an if statement inside another if statement. This is known as nested if statement. Think of it as multiple layers of if statements. There is a first, outer if statement, and inside it is another, inner if statement. Its syntax is: // outer if statement if ( condition1 ) { // statements // inner if statement if ( condition2 ) { // statements } } Notes: We can add else and else if statements to the inner if statement as required. The inner if statement can also be inserted inside the outer else or else if statements (if they exist). We can nest multiple layers of if statements.","title":"C++ Nested if...else"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-4-c-nested-if","text":"// C++ program to find if an integer is positive, negative or zero // using nested if statements #include <iostream> using namespace std ; int main () { int num ; cout << \"Enter an integer: \" ; cin >> num ; // outer if condition if ( num != 0 ) { // inner if condition if ( num > 0 ) { cout << \"The number is positive.\" << endl ; } // inner else condition else { cout << \"The number is negative.\" << endl ; } } // outer else condition else { cout << \"The number is 0 and it is neither positive nor negative.\" << endl ; } cout << \"This line is always printed.\" << endl ; return 0 ; } Run Code Output 1 Enter an integer: 35 The number is positive. This line is always printed. Output 2 Enter an integer: -35 The number is negative. This line is always printed. Output 3 Enter an integer: 0 The number is 0 and it is neither positive nor negative. This line is always printed. In the above example, We take an integer as an input from the user and store it in the variable num. We then use an if...else statement to check whether num is not equal to 0 . If true , then the inner if...else statement is executed. If false , the code inside the outer else condition is executed, which prints \"The number is 0 and it is neither positive nor negative.\" The inner if...else statement checks whether the input number is positive i.e. if num is greater than 0 . If true , then we print a statement saying that the number is positive. If false , we print that the number is negative. Note: As you can see, nested if...else makes your logic complicated. If possible, you should always try to avoid nested if...else .","title":"Example 4: C++ Nested if"},{"location":"week-6-cpp/ce103-week-6-cpp/#body-of-ifelse-with-only-one-statement","text":"If the body of if...else has only one statement, you can omit { } in the program. For example, you can replace int number = 5 ; if ( number > 0 ) { cout << \"The number is positive.\" << endl ; } else { cout << \"The number is negative.\" << endl ; } with int number = 5 ; if ( number > 0 ) cout << \"The number is positive.\" << endl ; else cout << \"The number is negative.\" << endl ; The output of both programs will be the same. Note: Although it's not necessary to use { } if the body of if...else has only one statement, using { } makes your code more readable.","title":"Body of if...else With Only One Statement"},{"location":"week-6-cpp/ce103-week-6-cpp/#more-on-decision-making","text":"In certain situations, a ternary operator can replace an if...else statement. To learn more, visit C++ Ternary Operator . If we need to make a choice between more than one alternatives based on a given test condition, the switch statement can be used. To learn more, visit C++ switch . Check out these examples to learn more: C++ Program to Check Whether Number is Even or Odd C++ Program to Check Whether a character is Vowel or Consonant. C++ Program to Find Largest Number Among Three Numbers","title":"More on Decision Making"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-for-loop","text":"In this tutorial, we will learn about the C++ for loop and its working with the help of some examples. In computer programming, loops are used to repeat a block of code. For example, let's say we want to show a message 100 times. Then instead of writing the print statement 100 times, we can use a loop. That was just a simple example; we can achieve much more efficiency and sophistication in our programs by making effective use of loops. There are 3 types of loops in C++. for loop while loop do...while loop This tutorial focuses on C++ for loop. We will learn about the other type of loops in the upcoming tutorials.","title":"C++ for Loop"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-for-loop_1","text":"The syntax of for-loop is: for ( initialization ; condition ; update ) { // body of-loop } Here, initialization - initializes variables and is executed only once condition - if true , the body of for loop is executed if false , the for loop is terminated update - updates the value of initialized variables and again checks the condition To learn more about conditions , check out our tutorial on C++ Relational and Logical Operators .","title":"C++ for loop"},{"location":"week-6-cpp/ce103-week-6-cpp/#flowchart-of-for-loop-in-c","text":"Flowchart of for loop in C++","title":"Flowchart of for Loop in C++"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-1-printing-numbers-from-1-to-5","text":"#include <iostream> using namespace std ; int main () { for ( int i = 1 ; i <= 5 ; ++ i ) { cout << i << \" \" ; } return 0 ; } Run Code Output 1 2 3 4 5 Here is how this program works Iteration Variable i <= 5 Action 1 st i = 1 true 1 is printed. i is increased to 2 . 2 nd i = 2 true 2 is printed. i is increased to 3 . 3 rd i = 3 true 3 is printed. i is increased to 4 . 4 th i = 4 true 4 is printed. i is increased to 5 . 5 th i = 5 true 5 is printed. i is increased to 6 . 6 th i = 6 false The loop is terminated","title":"Example 1: Printing Numbers From 1 to 5"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-2-display-a-text-5-times","text":"// C++ Program to display a text 5 times #include <iostream> using namespace std ; int main () { for ( int i = 1 ; i <= 5 ; ++ i ) { cout << \"Hello World! \" << endl ; } return 0 ; } Run Code Output Hello World! Hello World! Hello World! Hello World! Hello World! Here is how this program works Iteration Variable i <= 5 Action 1 st i = 1 true Hello World! is printed and i is increased to 2 . 2 nd i = 2 true Hello World! is printed and i is increased to 3 . 3 rd i = 3 true Hello World! is printed and i is increased to 4 . 4 th i = 4 true Hello World! is printed and i is increased to 5 . 5 th i = 5 true Hello World! is printed and i is increased to 6 . 6 th i = 6 false The loop is terminated","title":"Example 2: Display a text 5 times"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-3-find-the-sum-of-first-n-natural-numbers","text":"// C++ program to find the sum of first n natural numbers // positive integers such as 1,2,3,...n are known as natural numbers #include <iostream> using namespace std ; int main () { int num , sum ; sum = 0 ; cout << \"Enter a positive integer: \" ; cin >> num ; for ( int i = 1 ; i <= num ; ++ i ) { sum += i ; } cout << \"Sum = \" << sum << endl ; return 0 ; } Run Code Output Enter a positive integer: 10 Sum = 55 In the above example, we have two variables num and sum. The sum variable is assigned with 0 and the num variable is assigned with the value provided by the user. Note that we have used a for loop. for ( int i = 1 ; i <= num ; ++ i ) Here, int i = 1 : initializes the i variable i <= num : runs the loop as long as i is less than or equal to num ++i : increases the i variable by 1 in each iteration When i becomes 11 , the condition is false and sum will be equal to 0 + 1 + 2 + ... + 10 .","title":"Example 3: Find the sum of first n Natural Numbers"},{"location":"week-6-cpp/ce103-week-6-cpp/#ranged-based-for-loop","text":"In C++11, a new range-based for loop was introduced to work with collections such as arrays and vectors . Its syntax is: for ( variable : collection ) { // body of loop } Here, for every value in the collection, the for loop is executed and the value is assigned to the variable.","title":"Ranged Based for Loop"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-4-range-based-for-loop","text":"#include <iostream> using namespace std ; int main () { int num_array [] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 }; for ( int n : num_array ) { cout << n << \" \" ; } return 0 ; } Run Code Output 1 2 3 4 5 6 7 8 9 10 In the above program, we have declared and initialized an int array named num_array. It has 10 items. Here, we have used a range-based for loop to access all the items in the array.","title":"Example 4: Range Based for Loop"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-infinite-for-loop","text":"If the condition in a for loop is always true , it runs forever (until memory is full). For example, // infinite for loop for ( int i = 1 ; i > 0 ; i ++ ) { // block of code } In the above program, the condition is always true which will then run the code for infinite times. Check out these examples to learn more: C++ Program to Calculate Sum of Natural Numbers C++ Program to Find Factorial C++ Program to Generate Multiplication Table In the next tutorial, we will learn about while and do...while loop.","title":"C++ Infinite for loop"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-while-and-dowhile-loop","text":"In this tutorial, we will learn the use of while and do...while loops in C++ programming with the help of some examples. In computer programming, loops are used to repeat a block of code. For example, let's say we want to show a message 100 times. Then instead of writing the print statement 100 times, we can use a loop. That was just a simple example; we can achieve much more efficiency and sophistication in our programs by making effective use of loops. There are 3 types of loops in C++. for loop while loop do...while loop In the previous tutorial, we learned about the C++ for loop . Here, we are going to learn about while and do...while loops.","title":"C++ while and do...while Loop"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-while-loop","text":"The syntax of the while loop is: while ( condition ) { // body of the loop } Here, A while loop evaluates the condition If the condition evaluates to true , the code inside the while loop is executed. The condition is evaluated again. This process continues until the condition is false . When the condition evaluates to false , the loop terminates. To learn more about the conditions , visit C++ Relational and Logical Operators .","title":"C++ while Loop"},{"location":"week-6-cpp/ce103-week-6-cpp/#flowchart-of-while-loop","text":"Flowchart of C++ while loop","title":"Flowchart of while Loop"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-1-display-numbers-from-1-to-5","text":"// C++ Program to print numbers from 1 to 5 #include <iostream> using namespace std ; int main () { int i = 1 ; // while loop from 1 to 5 while ( i <= 5 ) { cout << i << \" \" ; ++ i ; } return 0 ; } Run Code Output 1 2 3 4 5 Here is how the program works. Iteration Variable i <= 5 Action 1 st i = 1 true 1 is printed and i is increased to 2 . 2 nd i = 2 true 2 is printed and i is increased to 3 . 3 rd i = 3 true 3 is printed and i is increased to 4 4 th i = 4 true 4 is printed and i is increased to 5 . 5 th i = 5 true 5 is printed and i is increased to 6 . 6 th i = 6 false The loop is terminated","title":"Example 1: Display Numbers from 1 to 5"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-2-sum-of-positive-numbers-only","text":"// program to find the sum of positive numbers // if the user enters a negative number, the loop ends // the negative number entered is not added to the sum #include <iostream> using namespace std ; int main () { int number ; int sum = 0 ; // take input from the user cout << \"Enter a number: \" ; cin >> number ; while ( number >= 0 ) { // add all positive numbers sum += number ; // take input again if the number is positive cout << \"Enter a number: \" ; cin >> number ; } // display the sum cout << \" \\n The sum is \" << sum << endl ; return 0 ; } Run Code Output Enter a number: 6 Enter a number: 12 Enter a number: 7 Enter a number: 0 Enter a number: -2 The sum is 25 In this program, the user is prompted to enter a number, which is stored in the variable number. In order to store the sum of the numbers, we declare a variable sum and initialize it to the value of 0 . The while loop continues until the user enters a negative number. During each iteration, the number entered by the user is added to the sum variable. When the user enters a negative number, the loop terminates. Finally, the total sum is displayed.","title":"Example 2: Sum of Positive Numbers Only"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-dowhile-loop","text":"The do...while loop is a variant of the while loop with one important difference: the body of do...while loop is executed once before the condition is checked. Its syntax is: do { // body of loop; } while ( condition ); Here, The body of the loop is executed at first. Then the condition is evaluated. If the condition evaluates to true , the body of the loop inside the do statement is executed again. The condition is evaluated once again. If the condition evaluates to true , the body of the loop inside the do statement is executed again. This process continues until the condition evaluates to false . Then the loop stops.","title":"C++ do...while Loop"},{"location":"week-6-cpp/ce103-week-6-cpp/#flowchart-of-dowhile-loop","text":"Flowchart of C++ do...while loop","title":"Flowchart of do...while Loop"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-3-display-numbers-from-1-to-5","text":"// C++ Program to print numbers from 1 to 5 #include <iostream> using namespace std ; int main () { int i = 1 ; // do...while loop from 1 to 5 do { cout << i << \" \" ; ++ i ; } while ( i <= 5 ); return 0 ; } Run Code Output 1 2 3 4 5 Here is how the program works. Iteration Variable i <= 5 Action i = 1 not checked 1 is printed and i is increased to 2 1 st i = 2 true 2 is printed and i is increased to 3 2 nd i = 3 true 3 is printed and i is increased to 4 3 rd i = 4 true 4 is printed and i is increased to 5 4 th i = 5 true 5 is printed and i is increased to 6 5 th i = 6 false The loop is terminated","title":"Example 3: Display Numbers from 1 to 5"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-4-sum-of-positive-numbers-only","text":"// program to find the sum of positive numbers // If the user enters a negative number, the loop ends // the negative number entered is not added to the sum #include <iostream> using namespace std ; int main () { int number = 0 ; int sum = 0 ; do { sum += number ; // take input from the user cout << \"Enter a number: \" ; cin >> number ; } while ( number >= 0 ); // display the sum cout << \" \\n The sum is \" << sum << endl ; return 0 ; } Run Code Output 1 Enter a number: 6 Enter a number: 12 Enter a number: 7 Enter a number: 0 Enter a number: -2 The sum is 25 Here, the do...while loop continues until the user enters a negative number. When the number is negative, the loop terminates; the negative number is not added to the sum variable. Output 2 Enter a number: -6 The sum is 0 . The body of the do...while loop runs only once if the user enters a negative number.","title":"Example 4: Sum of Positive Numbers Only"},{"location":"week-6-cpp/ce103-week-6-cpp/#infinite-while-loop","text":"If the condition of a loop is always true , the loop runs for infinite times (until the memory is full). For example, // infinite while loop while ( true ) { // body of the loop } Here is an example of an infinite do...while loop. // infinite do...while loop int count = 1 ; do { // body of loop } while ( count == 1 ); In the above programs, the condition is always true . Hence, the loop body will run for infinite times.","title":"Infinite while loop"},{"location":"week-6-cpp/ce103-week-6-cpp/#for-vs-while-loops","text":"A for loop is usually used when the number of iterations is known. For example, // This loop is iterated 5 times for ( int i = 1 ; i <= 5 ; ++ i ) { // body of the loop } Here, we know that the for-loop will be executed 5 times. However, while and do...while loops are usually used when the number of iterations is unknown. For example, while ( condition ) { // body of the loop } Check out these examples to learn more: C++ Program to Display Fibonacci Series C++ Program to Find GCD C++ Program to Find LCM","title":"for vs while loops"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-break-statement","text":"In this tutorial, we will learn about the break statement and its working in loops with the help of examples. In C++, the break statement terminates the loop when it is encountered. The syntax of the break statement is: break ; Before you learn about the break statement, make sure you know about: C++ for loop C++ if...else C++ while loop","title":"C++ break Statement"},{"location":"week-6-cpp/ce103-week-6-cpp/#working-of-c-break-statement","text":"Working of break statement in C++","title":"Working of C++ break Statement"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-1-break-with-for-loop","text":"// program to print the value of i #include <iostream> using namespace std ; int main () { for ( int i = 1 ; i <= 5 ; i ++ ) { // break condition if ( i == 3 ) { break ; } cout << i << endl ; } return 0 ; } Run Code Output 1 2 In the above program, the for loop is used to print the value of i in each iteration. Here, notice the code: if ( i == 3 ) { break ; } This means, when i is equal to 3 , the break statement terminates the loop. Hence, the output doesn't include values greater than or equal to 3. Note: The break statement is usually used with decision-making statements.","title":"Example 1: break with for loop"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-2-break-with-while-loop","text":"// program to find the sum of positive numbers // if the user enters a negative numbers, break ends the loop // the negative number entered is not added to sum #include <iostream> using namespace std ; int main () { int number ; int sum = 0 ; while ( true ) { // take input from the user cout << \"Enter a number: \" ; cin >> number ; // break condition if ( number < 0 ) { break ; } // add all positive numbers sum += number ; } // display the sum cout << \"The sum is \" << sum << endl ; return 0 ; } Run Code Output Enter a number: 1 Enter a number: 2 Enter a number: 3 Enter a number: -5 The sum is 6 . In the above program, the user enters a number. The while loop is used to print the total sum of numbers entered by the user. Here, notice the code, if ( number < 0 ) { break ; } This means, when the user enters a negative number, the break statement terminates the loop and codes outside the loop are executed. The while loop continues until the user enters a negative number.","title":"Example 2: break with while loop"},{"location":"week-6-cpp/ce103-week-6-cpp/#break-with-nested-loop","text":"When break is used with nested loops, break terminates the inner loop. For example, // using break statement inside // nested for loop #include <iostream> using namespace std ; int main () { int number ; int sum = 0 ; // nested for loops // first loop for ( int i = 1 ; i <= 3 ; i ++ ) { // second loop for ( int j = 1 ; j <= 3 ; j ++ ) { if ( i == 2 ) { break ; } cout << \"i = \" << i << \", j = \" << j << endl ; } } return 0 ; } Run Code Output i = 1 , j = 1 i = 1 , j = 2 i = 1 , j = 3 i = 3 , j = 1 i = 3 , j = 2 i = 3 , j = 3 In the above program, the break statement is executed when i == 2 . It terminates the inner loop, and the control flow of the program moves to the outer loop. Hence, the value of i = 2 is never displayed in the output. The break statement is also used with the switch statement. To learn more, visit C++ switch statement .","title":"break with Nested loop"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-continue-statement","text":"In this tutorial, we will learn about the continue statement and its working with loops with the help of examples. In computer programming, the continue statement is used to skip the current iteration of the loop and the control of the program goes to the next iteration. The syntax of the continue statement is: continue ; Before you learn about the continue statement, make sure you know about, C++ for loop C++ if...else C++ while loop","title":"C++ continue Statement"},{"location":"week-6-cpp/ce103-week-6-cpp/#working-of-c-continue-statement","text":"Working of continue statement in C++","title":"Working of C++ continue Statement"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-1-continue-with-for-loop","text":"In a for loop, continue skips the current iteration and the control flow jumps to the update expression. // program to print the value of i #include <iostream> using namespace std ; int main () { for ( int i = 1 ; i <= 5 ; i ++ ) { // condition to continue if ( i == 3 ) { continue ; } cout << i << endl ; } return 0 ; } Run Code Output 1 2 4 5 In the above program, we have used the the for loop to print the value of i in each iteration. Here, notice the code, if ( i == 3 ) { continue ; } This means When i is equal to 3 , the continue statement skips the current iteration and starts the next iteration Then, i becomes 4 , and the condition is evaluated again. Hence, 4 and 5 are printed in the next two iterations. Note : The continue statement is almost always used with decision-making statements.","title":"Example 1: continue with for loop"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-2-continue-with-while-loop","text":"In a while loop, continue skips the current iteration and control flow of the program jumps back to the while condition . // program to calculate positive numbers till 50 only // if the user enters a negative number, // that number is skipped from the calculation // negative number -> loop terminate // numbers above 50 -> skip iteration #include <iostream> using namespace std ; int main () { int sum = 0 ; int number = 0 ; while ( number >= 0 ) { // add all positive numbers sum += number ; // take input from the user cout << \"Enter a number: \" ; cin >> number ; // continue condition if ( number > 50 ) { cout << \"The number is greater than 50 and won't be calculated.\" << endl ; number = 0 ; // the value of number is made 0 again continue ; } } // display the sum cout << \"The sum is \" << sum << endl ; return 0 ; } Run Code Output Enter a number: 12 Enter a number: 0 Enter a number: 2 Enter a number: 30 Enter a number: 50 Enter a number: 56 The number is greater than 50 and won ' t be calculated. Enter a number: 5 Enter a number: -3 The sum is 99 In the above program, the user enters a number. The while loop is used to print the total sum of positive numbers entered by the user, as long as the numbers entered are not greater than 50 . Notice the use of the continue statement. if ( number > 50 ){ continue ; } When the user enters a number greater than 50 , the continue statement skips the current iteration. Then the control flow of the program goes to the condition of while loop. When the user enters a number less than 0 , the loop terminates. Note : The continue statement works in the same way for the do...while loops.","title":"Example 2: continue with while loop"},{"location":"week-6-cpp/ce103-week-6-cpp/#continue-with-nested-loop","text":"When continue is used with nested loops, it skips the current iteration of the inner loop. For example, // using continue statement inside // nested for loop #include <iostream> using namespace std ; int main () { int number ; int sum = 0 ; // nested for loops // first loop for ( int i = 1 ; i <= 3 ; i ++ ) { // second loop for ( int j = 1 ; j <= 3 ; j ++ ) { if ( j == 2 ) { continue ; } cout << \"i = \" << i << \", j = \" << j << endl ; } } return 0 ; } Run Code Output i = 1 , j = 1 i = 1 , j = 3 i = 2 , j = 1 i = 2 , j = 3 i = 3 , j = 1 i = 3 , j = 3 In the above program, when the continue statement executes, it skips the current iteration in the inner loop. And the control of the program moves to the update expression of the inner loop. Hence, the value of j = 2 is never displayed in the output. Note : The break statement terminates the loop entirely. However, the continue statement only skips the current iteration.","title":"continue with Nested loop"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-switchcase-statement","text":"In this tutorial, we will learn about switch statement and its working in C++ programming with the help of some examples. The switch statement allows us to execute a block of code among many alternatives. The syntax of the switch statement in C++ is: switch ( expression ) { case constant1 : // code to be executed if // expression is equal to constant1; break ; case constant2 : // code to be executed if // expression is equal to constant2; break ; . . . default : // code to be executed if // expression doesn't match any constant } How does the switch statement work? The expression is evaluated once and compared with the values of each case label. If there is a match, the corresponding code after the matching label is executed. For example, if the value of the variable is equal to constant2 , the code after case constant2: is executed until the break statement is encountered. If there is no match, the code after default: is executed. Note : We can do the same thing with the if...else..if ladder. However, the syntax of the switch statement is cleaner and much easier to read and write.","title":"C++ switch..case Statement"},{"location":"week-6-cpp/ce103-week-6-cpp/#flowchart-of-switch-statement","text":"Flowchart of C++ switch...case statement","title":"Flowchart of switch Statement"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-create-a-calculator-using-the-switch-statement","text":"// Program to build a simple calculator using switch Statement #include <iostream> using namespace std ; int main () { char oper ; float num1 , num2 ; cout << \"Enter an operator (+, -, *, /): \" ; cin >> oper ; cout << \"Enter two numbers: \" << endl ; cin >> num1 >> num2 ; switch ( oper ) { case '+' : cout << num1 << \" + \" << num2 << \" = \" << num1 + num2 ; break ; case '-' : cout << num1 << \" - \" << num2 << \" = \" << num1 - num2 ; break ; case '*' : cout << num1 << \" * \" << num2 << \" = \" << num1 * num2 ; break ; case '/' : cout << num1 << \" / \" << num2 << \" = \" << num1 / num2 ; break ; default : // operator is doesn't match any case constant (+, -, *, /) cout << \"Error! The operator is not correct\" ; break ; } return 0 ; } Run Code Output 1 Enter an operator ( +, -, *, / ) : + Enter two numbers: 2 .3 4 .5 2 .3 + 4 .5 = 6 .8 Output 2 Enter an operator ( +, -, *, / ) : - Enter two numbers: 2 .3 4 .5 2 .3 - 4 .5 = -2.2 Output 3 Enter an operator ( +, -, *, / ) : * Enter two numbers: 2 .3 4 .5 2 .3 * 4 .5 = 10 .35 Output 4 Enter an operator ( +, -, *, / ) : / Enter two numbers: 2 .3 4 .5 2 .3 / 4 .5 = 0 .511111 Output 5 Enter an operator ( +, -, *, / ) : ? Enter two numbers: 2 .3 4 .5 Error! The operator is not correct. In the above program, we are using the switch...case statement to perform addition, subtraction, multiplication, and division. How This Program Works We first prompt the user to enter the desired operator. This input is then stored in the char variable named oper. We then prompt the user to enter two numbers, which are stored in the float variables num1 and num2. The switch statement is then used to check the operator entered by the user: If the user enters + , addition is performed on the numbers. If the user enters - , subtraction is performed on the numbers. If the user enters * , multiplication is performed on the numbers. If the user enters / , division is performed on the numbers. If the user enters any other character, the default code is printed. Notice that the break statement is used inside each case block. This terminates the switch statement. If the break statement is not used, all cases after the correct case are executed.","title":"Example: Create a Calculator using the switch Statement"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-goto-statement","text":"In this article, you'll learn about goto statment, how it works and why should it be avoided. In C++ programming, the goto statement is used for altering the normal sequence of program execution by transferring control to some other part of the program.","title":"C++ goto Statement"},{"location":"week-6-cpp/ce103-week-6-cpp/#syntax-of-goto-statement","text":"goto label ; ... .. ... ... .. ... ... .. ... label : statement ; ... .. ... In the syntax above, label is an identifier. When goto label; is encountered, the control of program jumps to label: and executes the code below it. Working of goto in C++","title":"Syntax of goto Statement"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-goto-statement","text":"// This program calculates the average of numbers entered by the user. // If the user enters a negative number, it ignores the number and // calculates the average number entered before it. # include <iostream> using namespace std ; int main () { float num , average , sum = 0.0 ; int i , n ; cout << \"Maximum number of inputs: \" ; cin >> n ; for ( i = 1 ; i <= n ; ++ i ) { cout << \"Enter n\" << i << \": \" ; cin >> num ; if ( num < 0.0 ) { // Control of the program move to jump: goto jump ; } sum += num ; } jump : average = sum / ( i - 1 ); cout << \" \\n Average = \" << average ; return 0 ; } Output Maximum number of inputs: 10 Enter n1: 2 .3 Enter n2: 5 .6 Enter n3: -5.6 Average = 3 .95 You can write any C++ program without the use of goto statement and is generally considered a good idea not to use them.","title":"Example: goto Statement"},{"location":"week-6-cpp/ce103-week-6-cpp/#reason-to-avoid-goto-statement","text":"The goto statement gives the power to jump to any part of a program but, makes the logic of the program complex and tangled. In modern programming, the goto statement is considered a harmful construct and a bad programming practice. The goto statement can be replaced in most of C++ program with the use of break and continue statements.","title":"Reason to Avoid goto Statement"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-functions","text":"","title":"C++ Functions"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-functions_1","text":"In this tutorial, we will learn about the C++ function and function expressions with the help of examples. A function is a block of code that performs a specific task. Suppose we need to create a program to create a circle and color it. We can create two functions to solve this problem: a function to draw the circle a function to color the circle Dividing a complex problem into smaller chunks makes our program easy to understand and reusable. There are two types of function: Standard Library Functions: Predefined in C++ User-defined Function: Created by users In this tutorial, we will focus mostly on user-defined functions.","title":"C++ Functions"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-user-defined-function","text":"C++ allows the programmer to define their own function. A user-defined function groups code to perform a specific task and that group of code is given a name (identifier). When the function is invoked from any part of the program, it all executes the codes defined in the body of the function.","title":"C++ User-defined Function"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-function-declaration","text":"The syntax to declare a function is: returnType functionName ( parameter1 , parameter2 ,...) { // function body } Here's an example of a function declaration. // function declaration void greet () { cout << \"Hello World\" ; } Here, the name of the function is greet() the return type of the function is void the empty parentheses mean it doesn't have any parameters the function body is written inside {} Note: We will learn about returnType and parameters later in this tutorial.","title":"C++ Function Declaration"},{"location":"week-6-cpp/ce103-week-6-cpp/#calling-a-function","text":"In the above program, we have declared a function named greet() . To use the greet() function, we need to call it. Here's how we can call the above greet() function. int main () { // calling a function greet (); } How Function works in C++","title":"Calling a Function"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-1-display-a-text","text":"#include <iostream> using namespace std ; // declaring a function void greet () { cout << \"Hello there!\" ; } int main () { // calling the function greet (); return 0 ; } Run Code Output Hello there!","title":"Example 1: Display a Text"},{"location":"week-6-cpp/ce103-week-6-cpp/#function-parameters","text":"As mentioned above, a function can be declared with parameters (arguments). A parameter is a value that is passed when declaring a function. For example, let us consider the function below: void printNum ( int num ) { cout << num ; } Here, the int variable num is the function parameter. We pass a value to the function parameter while calling the function. int main () { int n = 7 ; // calling the function // n is passed to the function as argument printNum ( n ); return 0 ; }","title":"Function Parameters"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-2-function-with-parameters","text":"// program to print a text #include <iostream> using namespace std ; // display a number void displayNum ( int n1 , float n2 ) { cout << \"The int number is \" << n1 ; cout << \"The double number is \" << n2 ; } int main () { int num1 = 5 ; double num2 = 5.5 ; // calling the function displayNum ( num1 , num2 ); return 0 ; } Run Code Output The int number is 5 The double number is 5 .5 In the above program, we have used a function that has one int parameter and one double parameter. We then pass num1 and num2 as arguments. These values are stored by the function parameters n1 and n2 respectively. C++ function with parameters Note: The type of the arguments passed while calling the function must match with the corresponding parameters defined in the function declaration.","title":"Example 2: Function with Parameters"},{"location":"week-6-cpp/ce103-week-6-cpp/#return-statement","text":"In the above programs, we have used void in the function declaration. For example, void displayNumber () { // code } This means the function is not returning any value. It's also possible to return a value from a function. For this, we need to specify the returnType of the function during function declaration. Then, the return statement can be used to return a value from a function. For example, int add ( int a , int b ) { return ( a + b ); } Here, we have the data type int instead of void . This means that the function returns an int value. The code return (a + b); returns the sum of the two parameters as the function value. The return statement denotes that the function has ended. Any code after return inside the function is not executed.","title":"Return Statement"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-3-add-two-numbers","text":"// program to add two numbers using a function #include <iostream> using namespace std ; // declaring a function int add ( int a , int b ) { return ( a + b ); } int main () { int sum ; // calling the function and storing // the returned value in sum sum = add ( 100 , 78 ); cout << \"100 + 78 = \" << sum << endl ; return 0 ; } Run Code Output 100 + 78 = 178 In the above program, the add() function is used to find the sum of two numbers. We pass two int literals 100 and 78 while calling the function. We store the returned value of the function in the variable sum, and then we print it. Working of C++ Function with return statement Notice that sum is a variable of int type. This is because the return value of add() is of int type.","title":"Example 3: Add Two Numbers"},{"location":"week-6-cpp/ce103-week-6-cpp/#function-prototype","text":"In C++, the code of function declaration should be before the function call. However, if we want to define a function after the function call, we need to use the function prototype. For example, // function prototype void add ( int , int ); int main () { // calling the function before declaration. add ( 5 , 3 ); return 0 ; } // function definition void add ( int a , int b ) { cout << ( a + b ); } In the above code, the function prototype is: void add ( int , int ); This provides the compiler with information about the function name and its parameters. That's why we can use the code to call a function before the function has been defined. The syntax of a function prototype is: returnType functionName ( dataType1 , dataType2 , ...);","title":"Function Prototype"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-4-c-function-prototype","text":"// using function definition after main() function // function prototype is declared before main() #include <iostream> using namespace std ; // function prototype int add ( int , int ); int main () { int sum ; // calling the function and storing // the returned value in sum sum = add ( 100 , 78 ); cout << \"100 + 78 = \" << sum << endl ; return 0 ; } // function definition int add ( int a , int b ) { return ( a + b ); } Run Code Output 100 + 78 = 178 The above program is nearly identical to Example 3 . The only difference is that here, the function is defined after the function call. That's why we have used a function prototype in this example.","title":"Example 4: C++ Function Prototype"},{"location":"week-6-cpp/ce103-week-6-cpp/#benefits-of-using-user-defined-functions","text":"Functions make the code reusable. We can declare them once and use them multiple times. Functions make the program easier as each small task is divided into a function. Functions increase readability.","title":"Benefits of Using User-Defined Functions"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-library-functions","text":"Library functions are the built-in functions in C++ programming. Programmers can use library functions by invoking the functions directly; they don't need to write the functions themselves. Some common library functions in C++ are sqrt() , abs() , isdigit() , etc. In order to use library functions, we usually need to include the header file in which these library functions are defined. For instance, in order to use mathematical functions such as sqrt() and abs() , we need to include the header file cmath .","title":"C++ Library Functions"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-5-c-program-to-find-the-square-root-of-a-number","text":"#include <iostream> #include <cmath> using namespace std ; int main () { double number , squareRoot ; number = 25.0 ; // sqrt() is a library function to calculate the square root squareRoot = sqrt ( number ); cout << \"Square root of \" << number << \" = \" << squareRoot ; return 0 ; } Run Code Output Square root of 25 = 5 In this program, the sqrt() library function is used to calculate the square root of a number. The function declaration of sqrt() is defined in the cmath header file. That's why we need to use the code #include <cmath> to use the sqrt() function. To learn more, visit C++ Standard Library functions .","title":"Example 5: C++ Program to Find the Square Root of a Number"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-user-defined-function-types","text":"In this tutorial, you will learn about different approaches you can take to solve a single problem using functions. For better understanding of arguments and return in functions, user-defined functions can be categorised as: Function with no argument and no return value Function with no argument but return value Function with argument but no return value Function with argument and return value Consider a situation in which you have to check prime number. This problem is solved below by making user-defined function in 4 different ways as mentioned above.","title":"C++ User-defined Function Types"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-1-no-arguments-passed-and-no-return-value","text":"# include <iostream> using namespace std ; void prime (); int main () { // No argument is passed to prime() prime (); return 0 ; } // Return type of function is void because value is not returned. void prime () { int num , i , flag = 0 ; cout << \"Enter a positive integer enter to check: \" ; cin >> num ; for ( i = 2 ; i <= num / 2 ; ++ i ) { if ( num % i == 0 ) { flag = 1 ; break ; } } if ( flag == 1 ) { cout << num << \" is not a prime number.\" ; } else { cout << num << \" is a prime number.\" ; } } In the above program, prime() is called from the main() with no arguments. prime() takes the positive number from the user and checks whether the number is a prime number or not. Since, return type of prime() is void , no value is returned from the function.","title":"Example 1: No arguments passed and no return value"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-2-no-arguments-passed-but-a-return-value","text":"#include <iostream> using namespace std ; int prime (); int main () { int num , i , flag = 0 ; // No argument is passed to prime() num = prime (); for ( i = 2 ; i <= num / 2 ; ++ i ) { if ( num % i == 0 ) { flag = 1 ; break ; } } if ( flag == 1 ) { cout << num << \" is not a prime number.\" ; } else { cout << num << \" is a prime number.\" ; } return 0 ; } // Return type of function is int int prime () { int n ; printf ( \"Enter a positive integer to check: \" ); cin >> n ; return n ; } In the above program, prime() function is called from the main() with no arguments. prime() takes a positive integer from the user. Since, return type of the function is an int , it returns the inputted number from the user back to the calling main() function. Then, whether the number is prime or not is checked in the main() itself and printed onto the screen.","title":"Example 2: No arguments passed but a return value"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-3-arguments-passed-but-no-return-value","text":"#include <iostream> using namespace std ; void prime ( int n ); int main () { int num ; cout << \"Enter a positive integer to check: \" ; cin >> num ; // Argument num is passed to the function prime() prime ( num ); return 0 ; } // There is no return value to calling function. Hence, return type of function is void. */ void prime ( int n ) { int i , flag = 0 ; for ( i = 2 ; i <= n / 2 ; ++ i ) { if ( n % i == 0 ) { flag = 1 ; break ; } } if ( flag == 1 ) { cout << n << \" is not a prime number.\" ; } else { cout << n << \" is a prime number.\" ; } } In the above program, positive number is first asked from the user which is stored in the variable num. Then, num is passed to the prime() function where, whether the number is prime or not is checked and printed. Since, the return type of prime() is a void , no value is returned from the function.","title":"Example 3: Arguments passed but no return value"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-4-arguments-passed-and-a-return-value","text":"#include <iostream> using namespace std ; int prime ( int n ); int main () { int num , flag = 0 ; cout << \"Enter positive integer to check: \" ; cin >> num ; // Argument num is passed to check() function flag = prime ( num ); if ( flag == 1 ) cout << num << \" is not a prime number.\" ; else cout << num << \" is a prime number.\" ; return 0 ; } /* This function returns integer value. */ int prime ( int n ) { int i ; for ( i = 2 ; i <= n / 2 ; ++ i ) { if ( n % i == 0 ) return 1 ; } return 0 ; } In the above program, a positive integer is asked from the user and stored in the variable num . Then, num is passed to the function prime() where, whether the number is prime or not is checked. Since, the return type of prime() is an int , 1 or 0 is returned to the main() calling function. If the number is a prime number, 1 is returned. If not, 0 is returned. Back in the main() function, the returned 1 or 0 is stored in the variable flag, and the corresponding text is printed onto the screen.","title":"Example 4: Arguments passed and a return value."},{"location":"week-6-cpp/ce103-week-6-cpp/#which-method-is-better","text":"All four programs above gives the same output and all are technically correct program. There is no hard and fast rule on which method should be chosen. The particular method is chosen depending upon the situation and how you want to solve a problem.","title":"Which method is better?"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-function-overloading","text":"In this tutorial, we will learn about the function overloading in C++ with examples. In C++, two functions can have the same name if the number and/or type of arguments passed is different. These functions having the same name but different arguments are known as overloaded functions. For example: // same name different arguments int test () { } int test ( int a ) { } float test ( double a ) { } int test ( int a , double b ) { } Here, all 4 functions are overloaded functions. Notice that the return types of all these 4 functions are not the same. Overloaded functions may or may not have different return types but they must have different arguments. For example, // Error code int test ( int a ) { } double test ( int b ){ } Here, both functions have the same name, the same type, and the same number of arguments. Hence, the compiler will throw an error.","title":"C++ Function Overloading"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-1-overloading-using-different-types-of-parameter","text":"// Program to compute absolute value // Works for both int and float #include <iostream> using namespace std ; // function with float type parameter float absolute ( float var ){ if ( var < 0.0 ) var = - var ; return var ; } // function with int type parameter int absolute ( int var ) { if ( var < 0 ) var = - var ; return var ; } int main () { // call function with int type parameter cout << \"Absolute value of -5 = \" << absolute ( -5 ) << endl ; // call function with float type parameter cout << \"Absolute value of 5.5 = \" << absolute ( 5.5f ) << endl ; return 0 ; } Run Code Output Absolute value of -5 = 5 Absolute value of 5 .5 = 5 .5 Working of overloading for the absolute() function In this program, we overload the absolute() function. Based on the type of parameter passed during the function call, the corresponding function is called.","title":"Example 1: Overloading Using Different Types of Parameter"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-2-overloading-using-different-number-of-parameters","text":"#include <iostream> using namespace std ; // function with 2 parameters void display ( int var1 , double var2 ) { cout << \"Integer number: \" << var1 ; cout << \" and double number: \" << var2 << endl ; } // function with double type single parameter void display ( double var ) { cout << \"Double number: \" << var << endl ; } // function with int type single parameter void display ( int var ) { cout << \"Integer number: \" << var << endl ; } int main () { int a = 5 ; double b = 5.5 ; // call function with int type parameter display ( a ); // call function with double type parameter display ( b ); // call function with 2 parameters display ( a , b ); return 0 ; } Run Code Output Integer number: 5 Float number: 5 .5 Integer number: 5 and double number: 5 .5 Here, the display() function is called three times with different arguments. Depending on the number and type of arguments passed, the corresponding display() function is called. Working of overloading for the display() function The return type of all these functions is the same but that need not be the case for function overloading. Note: In C++, many standard library functions are overloaded. For example, the sqrt() function can take double , float , int, etc. as parameters. This is possible because the sqrt() function is overloaded in C++.","title":"Example 2: Overloading Using Different Number of Parameters"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-programming-default-arguments-parameters","text":"In this tutorial, we will learn C++ default arguments and their working with the help of examples. In C++ programming, we can provide default values for function parameters. If a function with default arguments is called without passing arguments, then the default parameters are used. However, if arguments are passed while calling the function, the default arguments are ignored.","title":"C++ Programming Default Arguments (Parameters)"},{"location":"week-6-cpp/ce103-week-6-cpp/#working-of-default-arguments","text":"How default arguments work in C++ We can understand the working of default arguments from the image above: When temp() is called, both the default parameters are used by the function. When temp(6) is called, the first argument becomes 6 while the default value is used for the second parameter. When temp(6, -2.3) is called, both the default parameters are overridden, resulting in i = 6 and f = -2.3 . When temp(3.4) is passed, the function behaves in an undesired way because the second argument cannot be passed without passing the first argument. Therefore, 3.4 is passed as the first argument. Since the first argument has been defined as int , the value that is actually passed is 3 .","title":"Working of default arguments"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-default-argument","text":"#include <iostream> using namespace std ; // defining the default arguments void display ( char = '*' , int = 3 ); int main () { int count = 5 ; cout << \"No argument passed: \" ; // *, 3 will be parameters display (); cout << \"First argument passed: \" ; // #, 3 will be parameters display ( '#' ); cout << \"Both arguments passed: \" ; // $, 5 will be parameters display ( '$' , count ); return 0 ; } void display ( char c , int count ) { for ( int i = 1 ; i <= count ; ++ i ) { cout << c ; } cout << endl ; } Run Code Output No argument passed: *** First argument passed: ### Both arguments passed: $$$$ $ Here is how this program works: display() is called without passing any arguments. In this case, display() uses both the default parameters c = '*' and n = 1 . display('#') is called with only one argument. In this case, the first becomes '#' . The second default parameter n = 1 is retained. display('#', count) is called with both arguments. In this case, default arguments are not used. We can also define the default parameters in the function definition itself. The program below is equivalent to the one above.","title":"Example: Default Argument"},{"location":"week-6-cpp/ce103-week-6-cpp/#include-iostream-using-namespace-std-defining-the-default-arguments-void-displaychar-c-int-count-3-forint-i-1-i-count-i-cout-c-cout-endl-int-main-int-count-5-cout-no-argument-passed-3-will-be-parameters-display-cout-first-argument-passed-3-will-be-parameters-display-cout-both-argument-passed-5-will-be-parameters-display-count-return-0","text":"Run Code","title":"#include &lt;iostream&gt;\nusing namespace std;\n\n// defining the default arguments\nvoid display(char c = &#39;*&#39;, int count = 3) {\n    for(int i = 1; i &lt;= count; ++i) {\n        cout &lt;&lt; c;\n    }\n    cout &lt;&lt; endl;\n}\n\nint main() {\n    int count = 5;\n\n    cout &lt;&lt; &quot;No argument passed: &quot;;\n    // *, 3 will be parameters\n    display(); \n\n    cout &lt;&lt; &quot;First argument passed: &quot;;\n     // #, 3 will be parameters\n    display(&#39;#&#39;); \n\n    cout &lt;&lt; &quot;Both argument passed: &quot;;\n    // $, 5 will be parameters\n    display(&#39;$&#39;, count); \n\n    return 0;\n}\n"},{"location":"week-6-cpp/ce103-week-6-cpp/#things-to-remember","text":"Once we provide a default value for a parameter, all subsequent parameters must also have default values. For example, // Invalid void add ( int a , int b = 3 , int c , int d ); // Invalid void add ( int a , int b = 3 , int c , int d = 4 ); // Valid void add ( int a , int c , int b = 3 , int d = 4 ); If we are defining the default arguments in the function definition instead of the function prototype, then the function must be defined before the function call. // Invalid code int main () { // function call display (); } void display ( char c = '*' , int count = 5 ) { // code }","title":"Things to Remember"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-storage-class","text":"In this article, you'll learn about different storage classes in C++. Namely: local, global, static local, register and thread local. Every variable in C++ has two features: type and storage class. Type specifies the type of data that can be stored in a variable. For example: int , float , char etc. And, storage class controls two different properties of a variable: lifetime (determines how long a variable can exist) and scope (determines which part of the program can access it). Depending upon the storage class of a variable, it can be divided into 4 major types: Local variable Global variable Static local variable Register Variable Thread Local Storage","title":"C++ Storage Class"},{"location":"week-6-cpp/ce103-week-6-cpp/#local-variable","text":"A variable defined inside a function (defined inside function body between braces) is called a local variable or automatic variable. Its scope is only limited to the function where it is defined. In simple terms, local variable exists and can be accessed only inside a function. The life of a local variable ends (It is destroyed) when the function exits.","title":"Local Variable"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-1-local-variable","text":"#include <iostream> using namespace std ; void test (); int main () { // local variable to main() int var = 5 ; test (); // illegal: var1 not declared inside main() var1 = 9 ; } void test () { // local variable to test() int var1 ; var1 = 6 ; // illegal: var not declared inside test() cout << var ; } The variable var cannot be used inside test() and var1 cannot be used inside main() function. Keyword auto was also used for defining local variables before as: auto int var; But, after C++11 auto has a different meaning and should not be used for defining local variables.","title":"Example 1: Local variable"},{"location":"week-6-cpp/ce103-week-6-cpp/#global-variable","text":"If a variable is defined outside all functions, then it is called a global variable. The scope of a global variable is the whole program. This means, It can be used and changed at any part of the program after its declaration. Likewise, its life ends only when the program ends.","title":"Global Variable"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-2-global-variable","text":"#include <iostream> using namespace std ; // Global variable declaration int c = 12 ; void test (); int main () { ++ c ; // Outputs 13 cout << c << endl ; test (); return 0 ; } void test () { ++ c ; // Outputs 14 cout << c ; } Output 13 14 In the above program, c is a global variable. This variable is visible to both functions main() and test() in the above program.","title":"Example 2: Global variable"},{"location":"week-6-cpp/ce103-week-6-cpp/#static-local-variable","text":"Keyword static is used for specifying a static variable. For example: ... .. ... int main () { static float a ; ... .. ... } A static local variable exists only inside a function where it is declared (similar to a local variable) but its lifetime starts when the function is called and ends only when the program ends. The main difference between local variable and static variable is that, the value of static variable persists the end of the program.","title":"Static Local variable"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-3-static-local-variable","text":"#include <iostream> using namespace std ; void test () { // var is a static variable static int var = 0 ; ++ var ; cout << var << endl ; } int main () { test (); test (); return 0 ; } Output 1 2 In the above program, test() function is invoked 2 times. During the first call, variable var is declared as static variable and initialized to 0. Then 1 is added to var which is displayed in the screen. When the function test() returns, variable var still exists because it is a static variable. During second function call, no new variable var is created. The same var is increased by 1 and then displayed to the screen. Output of above program if var was not specified as static variable 1 1","title":"Example 3: Static local variable"},{"location":"week-6-cpp/ce103-week-6-cpp/#register-variable-deprecated-in-c11","text":"Keyword register is used for specifying register variables. Register variables are similar to automatic variables and exists inside a particular function only. It is supposed to be faster than the local variables. If a program encounters a register variable, it stores the variable in processor's register rather than memory if available. This makes it faster than the local variables. However, this keyword was deprecated in C++11 and should not be used.","title":"Register Variable (Deprecated in C++11)"},{"location":"week-6-cpp/ce103-week-6-cpp/#thread-local-storage","text":"Thread-local storage is a mechanism by which variables are allocated such that there is one instance of the variable per extant thread. Keyword thread_local is used for this purpose. Learn more about thread local storage .","title":"Thread Local Storage"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-recursion","text":"In this tutorial, we will learn about recursive function in C++ and its working with the help of examples. A function that calls itself is known as a recursive function. And, this technique is known as recursion.","title":"C++ Recursion"},{"location":"week-6-cpp/ce103-week-6-cpp/#working-of-recursion-in-c","text":"void recurse () { ... .. ... recurse (); ... .. ... } int main () { ... .. ... recurse (); ... .. ... } The figure below shows how recursion works by calling itself over and over again. How recursion works in C++ programming The recursion continues until some condition is met. To prevent infinite recursion, if...else statement (or similar approach) can be used where one branch makes the recursive call and the other doesn't.","title":"Working of Recursion in C++"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-1-factorial-of-a-number-using-recursion","text":"// Factorial of n = 1*2*3*...*n #include <iostream> using namespace std ; int factorial ( int ); int main () { int n , result ; cout << \"Enter a non-negative number: \" ; cin >> n ; result = factorial ( n ); cout << \"Factorial of \" << n << \" = \" << result ; return 0 ; } int factorial ( int n ) { if ( n > 1 ) { return n * factorial ( n - 1 ); } else { return 1 ; } } Run Code Output Enter a non-negative number: 4 Factorial of 4 = 24","title":"Example 1: Factorial of a Number Using Recursion"},{"location":"week-6-cpp/ce103-week-6-cpp/#working-of-factorial-program","text":"How this C++ recursion program works As we can see, the factorial() function is calling itself. However, during each call, we have decreased the value of n by 1 . When n is less than 1 , the factorial() function ultimately returns the output.","title":"Working of Factorial Program"},{"location":"week-6-cpp/ce103-week-6-cpp/#advantages-and-disadvantages-of-recursion","text":"Below are the pros and cons of using recursion in C++.","title":"Advantages and Disadvantages of Recursion"},{"location":"week-6-cpp/ce103-week-6-cpp/#advantages-of-c-recursion","text":"It makes our code shorter and cleaner. Recursion is required in problems concerning data structures and advanced algorithms, such as Graph and Tree Traversal.","title":"Advantages of C++ Recursion"},{"location":"week-6-cpp/ce103-week-6-cpp/#disadvantages-of-c-recursion","text":"It takes a lot of stack space compared to an iterative program. It uses more processor time. It can be more difficult to debug compared to an equivalent iterative program.","title":"Disadvantages of C++ Recursion"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-return-by-reference","text":"In this article, you'll learn how to return a value by reference in a function and use it efficiently in your program. In C++ Programming, not only can you pass values by reference to a function but you can also return a value by reference. To understand this feature, you should have the knowledge of: Global variables","title":"C++ Return by Reference"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-return-by-reference","text":"#include <iostream> using namespace std ; // global variable int num ; // function declaration int & test (); int main () { // assign 5 to num variable // equivalent to num = 5; test () = 5 ; cout << num ; return 0 ; } // function definition // returns the address of num variable int & test () { return num ; } Output 5 In program above, the return type of function test() is int& . Hence, this function returns a reference of the variable num. The return statement is return num; . Unlike return by value, this statement doesn't return value of num, instead it returns the variable itself (address). So, when the variable is returned, it can be assigned a value as done in test() = 5; This stores 5 to the variable num, which is displayed onto the screen.","title":"Example: Return by Reference"},{"location":"week-6-cpp/ce103-week-6-cpp/#important-things-to-remember-when-returning-by-reference","text":"Ordinary function returns value but this function doesn't. Hence, you cannot return a constant from the function. int & test () { return 2 ; } You cannot return a local variable from this function. int & test () { int n = 2 ; return n ; }","title":"Important Things to Remember When Returning by Reference."},{"location":"week-6-cpp/ce103-week-6-cpp/#c-arrays-string","text":"","title":"C++ Arrays &amp; String"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-arrays","text":"In this tutorial, we will learn to work with arrays. We will learn to declare, initialize, and access array elements in C++ programming with the help of examples. In C++, an array is a variable that can store multiple values of the same type. For example, Suppose a class has 27 students, and we need to store the grades of all of them. Instead of creating 27 separate variables, we can simply create an array: double grade [ 27 ]; Here, grade is an array that can hold a maximum of 27 elements of double type. In C++, the size and type of arrays cannot be changed after its declaration.","title":"C++ Arrays"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-array-declaration","text":"dataType arrayName [ arraySize ]; For example, int x [ 6 ]; Here, int - type of element to be stored x - name of the array 6 - size of the array","title":"C++ Array Declaration"},{"location":"week-6-cpp/ce103-week-6-cpp/#access-elements-in-c-array","text":"In C++, each element in an array is associated with a number. The number is known as an array index. We can access elements of an array by using those indices. // syntax to access array elements array [ index ]; Consider the array x we have seen above. Elements of an array in C++","title":"Access Elements in C++ Array"},{"location":"week-6-cpp/ce103-week-6-cpp/#few-things-to-remember","text":"The array indices start with 0 . Meaning x[0] is the first element stored at index 0 . If the size of an array is n , the last element is stored at index (n-1) . In this example, x[5] is the last element. Elements of an array have consecutive addresses. For example, suppose the starting address of x[0] is 2120 . Then, the address of the next element x[1] will be 2124 , the address of x[2] will be 2128 , and so on. Here, the size of each element is increased by 4 . This is because the size of int is 4 bytes.","title":"Few Things to Remember:"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-array-initialization","text":"In C++, it's possible to initialize an array during declaration. For example, // declare and initialize and array int x [ 6 ] = { 19 , 10 , 8 , 17 , 9 , 15 }; C++ Array elements and their data Another method to initialize array during declaration: // declare and initialize an array int x [] = { 19 , 10 , 8 , 17 , 9 , 15 }; Here, we have not mentioned the size of the array. In such cases, the compiler automatically computes the size.","title":"C++ Array Initialization"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-array-with-empty-members","text":"In C++, if an array has a size n , we can store upto n number of elements in the array. However, what will happen if we store less than n number of elements. For example, // store only 3 elements in the array int x [ 6 ] = { 19 , 10 , 8 }; Here, the array x has a size of 6 . However, we have initialized it with only 3 elements. In such cases, the compiler assigns random values to the remaining places. Oftentimes, this random value is simply 0 . Empty array members are automatically assigned the value 0","title":"C++ Array With Empty Members"},{"location":"week-6-cpp/ce103-week-6-cpp/#how-to-insert-and-print-array-elements","text":"int mark [ 5 ] = { 19 , 10 , 8 , 17 , 9 } // change 4th element to 9 mark [ 3 ] = 9 ; // take input from the user // store the value at third position cin >> mark [ 2 ]; // take input from the user // insert at ith position cin >> mark [ i -1 ]; // print first element of the array cout << mark [ 0 ]; // print ith element of the array cout >> mark [ i -1 ];","title":"How to insert and print array elements?"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-1-displaying-array-elements","text":"#include <iostream> using namespace std ; int main () { int numbers [ 5 ] = { 7 , 5 , 6 , 12 , 35 }; cout << \"The numbers are: \" ; // Printing array elements // using range based for loop for ( const int & n : numbers ) { cout << n << \" \" ; } cout << \" \\n The numbers are: \" ; // Printing array elements // using traditional for loop for ( int i = 0 ; i < 5 ; ++ i ) { cout << numbers [ i ] << \" \" ; } return 0 ; } Run Code Output The numbers are: 7 5 6 12 35 The numbers are: 7 5 6 12 35 Here, we have used a for loop to iterate from i = 0 to i = 4 . In each iteration, we have printed numbers[i] . We again used a range-based for loop to print out the elements of the array. To learn more about this loop, check C++ Ranged for Loop . Note: In our range-based loop, we have used the code const int &n instead of int n as the range declaration. However, the const int &n is more preferred because: Using int n simply copies the array elements to the variable n during each iteration. This is not memory-efficient. &n, however, uses the memory address of the array elements to access their data without copying them to a new variable. This is memory-efficient. We are simply printing the array elements, not modifying them. Therefore, we use const so as not to accidentally change the values of the array.","title":"Example 1: Displaying Array Elements"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-2-take-inputs-from-user-and-store-them-in-an-array","text":"#include <iostream> using namespace std ; int main () { int numbers [ 5 ]; cout << \"Enter 5 numbers: \" << endl ; // store input from user to array for ( int i = 0 ; i < 5 ; ++ i ) { cin >> numbers [ i ]; } cout << \"The numbers are: \" ; // print array elements for ( int n = 0 ; n < 5 ; ++ n ) { cout << numbers [ n ] << \" \" ; } return 0 ; } Run Code Output Enter 5 numbers: 11 12 13 14 15 The numbers are: 11 12 13 14 15 Once again, we have used a for loop to iterate from i = 0 to i = 4 . In each iteration, we took an input from the user and stored it in numbers[i] . Then, we used another for loop to print all the array elements.","title":"Example 2: Take Inputs from User and Store Them in an Array"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-3-display-sum-and-average-of-array-elements-using-for-loop","text":"#include <iostream> using namespace std ; int main () { // initialize an array without specifying size double numbers [] = { 7 , 5 , 6 , 12 , 35 , 27 }; double sum = 0 ; double count = 0 ; double average ; cout << \"The numbers are: \" ; // print array elements // use of range-based for loop for ( const double & n : numbers ) { cout << n << \" \" ; // calculate the sum sum += n ; // count the no. of array elements ++ count ; } // print the sum cout << \" \\n Their Sum = \" << sum << endl ; // find the average average = sum / count ; cout << \"Their Average = \" << average << endl ; return 0 ; } Run Code Output The numbers are: 7 5 6 12 35 27 Their Sum = 92 Their Average = 15 .3333 In this program: We have initialized a double array named numbers but without specifying its size. We also declared three double variables sum, count, and average. Here, sum =0 and count = 0 . Then we used a range-based for loop to print the array elements. In each iteration of the loop, we add the current array element to sum. We also increase the value of count by 1 in each iteration, so that we can get the size of the array by the end of the for loop. After printing all the elements, we print the sum and the average of all the numbers. The average of the numbers is given by average = sum / count; Note: We used a ranged for loop instead of a normal for loop. A normal for loop requires us to specify the number of iterations, which is given by the size of the array. But a ranged for loop does not require such specifications.","title":"Example 3: Display Sum and Average of Array Elements Using for Loop"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-array-out-of-bounds","text":"If we declare an array of size 10 , then the array will contain elements from index 0 to 9 . However, if we try to access the element at index 10 or more than 10 , it will result in Undefined Behaviour.","title":"C++ Array Out of Bounds"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-multidimensional-arrays","text":"In this tutorial, we'll learn about multi-dimensional arrays in C++. More specifically, how to declare them, access them, and use them efficiently in our program. In C++, we can create an array of an array, known as a multidimensional array. For example: int x [ 3 ][ 4 ]; Here, x is a two-dimensional array. It can hold a maximum of 12 elements. We can think of this array as a table with 3 rows and each row has 4 columns as shown below. Elements in two-dimensional array in C++ Programming Three-dimensional arrays also work in a similar way. For example: float x [ 2 ][ 4 ][ 3 ]; This array x can hold a maximum of 24 elements. We can find out the total number of elements in the array simply by multiplying its dimensions: 2 x 4 x 3 = 24","title":"C++ Multidimensional Arrays"},{"location":"week-6-cpp/ce103-week-6-cpp/#multidimensional-array-initialization","text":"Like a normal array, we can initialize a multidimensional array in more than one way.","title":"Multidimensional Array Initialization"},{"location":"week-6-cpp/ce103-week-6-cpp/#1-initialization-of-two-dimensional-array","text":"int test [ 2 ][ 3 ] = { 2 , 4 , 5 , 9 , 0 , 19 }; The above method is not preferred. A better way to initialize this array with the same array elements is given below: int test [ 2 ][ 3 ] = { { 2 , 4 , 5 }, { 9 , 0 , 19 }}; This array has 2 rows and 3 columns, which is why we have two rows of elements with 3 elements each. Initializing a two-dimensional array in C++","title":"1. Initialization of two-dimensional array"},{"location":"week-6-cpp/ce103-week-6-cpp/#2-initialization-of-three-dimensional-array","text":"int test [ 2 ][ 3 ][ 4 ] = { 3 , 4 , 2 , 3 , 0 , -3 , 9 , 11 , 23 , 12 , 23 , 2 , 13 , 4 , 56 , 3 , 5 , 9 , 3 , 5 , 5 , 1 , 4 , 9 }; This is not a good way of initializing a three-dimensional array. A better way to initialize this array is: int test [ 2 ][ 3 ][ 4 ] = { { { 3 , 4 , 2 , 3 }, { 0 , -3 , 9 , 11 }, { 23 , 12 , 23 , 2 } }, { { 13 , 4 , 56 , 3 }, { 5 , 9 , 3 , 5 }, { 5 , 1 , 4 , 9 } } }; Notice the dimensions of this three-dimensional array. The first dimension has the value 2 . So, the two elements comprising the first dimension are: Element 1 = { { 3 , 4 , 2 , 3 }, { 0 , -3 , 9 , 11 }, { 23 , 12 , 23 , 2 } } Element 2 = { { 13 , 4 , 56 , 3 }, { 5 , 9 , 3 , 5 }, { 5 , 1 , 4 , 9 } } The second dimension has the value 3 . Notice that each of the elements of the first dimension has three elements each: { 3 , 4 , 2 , 3 }, { 0 , -3 , 9 , 11 } and { 23 , 12 , 23 , 2 } for Element 1. { 13 , 4 , 56 , 3 }, { 5 , 9 , 3 , 5 } and { 5 , 1 , 4 , 9 } for Element 2. Finally, there are four int numbers inside each of the elements of the second dimension: { 3 , 4 , 2 , 3 } { 0 , -3 , 9 , 11 } ... .. ... ... .. ...","title":"2. Initialization of three-dimensional array"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-1-two-dimensional-array","text":"// C++ Program to display all elements // of an initialised two dimensional array #include <iostream> using namespace std ; int main () { int test [ 3 ][ 2 ] = {{ 2 , -5 }, { 4 , 0 }, { 9 , 1 }}; // use of nested for loop // access rows of the array for ( int i = 0 ; i < 3 ; ++ i ) { // access columns of the array for ( int j = 0 ; j < 2 ; ++ j ) { cout << \"test[\" << i << \"][\" << j << \"] = \" << test [ i ][ j ] << endl ; } } return 0 ; } Run Code Output test [ 0 ][ 0 ] = 2 test [ 0 ][ 1 ] = -5 test [ 1 ][ 0 ] = 4 test [ 1 ][ 1 ] = 0 test [ 2 ][ 0 ] = 9 test [ 2 ][ 1 ] = 1 In the above example, we have initialized a two-dimensional int array named test that has 3 \"rows\" and 2 \"columns\". Here, we have used the nested for loop to display the array elements. the outer loop from i == 0 to i == 2 access the rows of the array the inner loop from j == 0 to j == 1 access the columns of the array Finally, we print the array elements in each iteration.","title":"Example 1: Two Dimensional Array"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-2-taking-input-for-two-dimensional-array","text":"#include <iostream> using namespace std ; int main () { int numbers [ 2 ][ 3 ]; cout << \"Enter 6 numbers: \" << endl ; // Storing user input in the array for ( int i = 0 ; i < 2 ; ++ i ) { for ( int j = 0 ; j < 3 ; ++ j ) { cin >> numbers [ i ][ j ]; } } cout << \"The numbers are: \" << endl ; // Printing array elements for ( int i = 0 ; i < 2 ; ++ i ) { for ( int j = 0 ; j < 3 ; ++ j ) { cout << \"numbers[\" << i << \"][\" << j << \"]: \" << numbers [ i ][ j ] << endl ; } } return 0 ; } Run Code Output Enter 6 numbers: 1 2 3 4 5 6 The numbers are: numbers [ 0 ][ 0 ] : 1 numbers [ 0 ][ 1 ] : 2 numbers [ 0 ][ 2 ] : 3 numbers [ 1 ][ 0 ] : 4 numbers [ 1 ][ 1 ] : 5 numbers [ 1 ][ 2 ] : 6 Here, we have used a nested for loop to take the input of the 2d array. Once all the input has been taken, we have used another nested for loop to print the array members.","title":"Example 2: Taking Input for Two Dimensional Array"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-3-three-dimensional-array","text":"// C++ Program to Store value entered by user in // three dimensional array and display it. #include <iostream> using namespace std ; int main () { // This array can store upto 12 elements (2x3x2) int test [ 2 ][ 3 ][ 2 ] = { { { 1 , 2 }, { 3 , 4 }, { 5 , 6 } }, { { 7 , 8 }, { 9 , 10 }, { 11 , 12 } } }; // Displaying the values with proper index. for ( int i = 0 ; i < 2 ; ++ i ) { for ( int j = 0 ; j < 3 ; ++ j ) { for ( int k = 0 ; k < 2 ; ++ k ) { cout << \"test[\" << i << \"][\" << j << \"][\" << k << \"] = \" << test [ i ][ j ][ k ] << endl ; } } } return 0 ; } Run Code Output test [ 0 ][ 0 ][ 0 ] = 1 test [ 0 ][ 0 ][ 1 ] = 2 test [ 0 ][ 1 ][ 0 ] = 3 test [ 0 ][ 1 ][ 1 ] = 4 test [ 0 ][ 2 ][ 0 ] = 5 test [ 0 ][ 2 ][ 1 ] = 6 test [ 1 ][ 0 ][ 0 ] = 7 test [ 1 ][ 0 ][ 1 ] = 8 test [ 1 ][ 1 ][ 0 ] = 9 test [ 1 ][ 1 ][ 1 ] = 10 test [ 1 ][ 2 ][ 0 ] = 11 test [ 1 ][ 2 ][ 1 ] = 12 The basic concept of printing elements of a 3d array is similar to that of a 2d array. However, since we are manipulating 3 dimensions, we use a nested for loop with 3 total loops instead of just 2: the outer loop from i == 0 to i == 1 accesses the first dimension of the array the middle loop from j == 0 to j == 2 accesses the second dimension of the array the innermost loop from k == 0 to k == 1 accesses the third dimension of the array As we can see, the complexity of the array increases exponentially with the increase in dimensions.","title":"Example 3: Three Dimensional Array"},{"location":"week-6-cpp/ce103-week-6-cpp/#passing-array-to-a-function-in-c-programming","text":"In this tutorial, we will learn how to pass a single-dimensional and multidimensional array as a function parameter in C++ with the help of examples. In C++, we can pass arrays as an argument to a function. And, also we can return arrays from a function. Before you learn about passing arrays as a function argument, make sure you know about C++ Arrays and C++ Functions .","title":"Passing Array to a Function in C++ Programming"},{"location":"week-6-cpp/ce103-week-6-cpp/#syntax-for-passing-arrays-as-function-parameters","text":"The syntax for passing an array to a function is: returnType functionName ( dataType arrayName [ arraySize ]) { // code } Let's see an example, int total ( int marks [ 5 ]) { // code } Here, we have passed an int type array named marks to the function total() . The size of the array is 5.","title":"Syntax for Passing Arrays as Function Parameters"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-1-passing-one-dimensional-array-to-a-function","text":"// C++ Program to display marks of 5 students #include <iostream> using namespace std ; // declare function to display marks // take a 1d array as parameter void display ( int m [ 5 ]) { cout << \"Displaying marks: \" << endl ; // display array elements for ( int i = 0 ; i < 5 ; ++ i ) { cout << \"Student \" << i + 1 << \": \" << m [ i ] << endl ; } } int main () { // declare and initialize an array int marks [ 5 ] = { 88 , 76 , 90 , 61 , 69 }; // call display function // pass array as argument display ( marks ); return 0 ; } Run Code Output Displaying marks: Student 1 : 88 Student 2 : 76 Student 3 : 90 Student 4 : 61 Student 5 : 69 Here, When we call a function by passing an array as the argument, only the name of the array is used. display ( marks ); Here, the argument marks represent the memory address of the first element of array marks[5]. However, notice the parameter of the display() function. void display ( int m [ 5 ]) Here, we use the full declaration of the array in the function parameter, including the square braces [] . The function parameter int m[5] converts to int* m; . This points to the same address pointed by the array marks. This means that when we manipulate m[5] in the function body, we are actually manipulating the original array marks. C++ handles passing an array to a function in this way to save memory and time.","title":"Example 1: Passing One-dimensional Array to a Function"},{"location":"week-6-cpp/ce103-week-6-cpp/#passing-multidimensional-array-to-a-function","text":"We can also pass Multidimensional arrays as an argument to the function. For example,","title":"Passing Multidimensional Array to a Function"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-2-passing-multidimensional-array-to-a-function","text":"// C++ Program to display the elements of two // dimensional array by passing it to a function #include <iostream> using namespace std ; // define a function // pass a 2d array as a parameter void display ( int n [][ 2 ]) { cout << \"Displaying Values: \" << endl ; for ( int i = 0 ; i < 3 ; ++ i ) { for ( int j = 0 ; j < 2 ; ++ j ) { cout << \"num[\" << i << \"][\" << j << \"]: \" << n [ i ][ j ] << endl ; } } } int main () { // initialize 2d array int num [ 3 ][ 2 ] = { { 3 , 4 }, { 9 , 5 }, { 7 , 1 } }; // call the function // pass a 2d array as an argument display ( num ); return 0 ; } Run Code Output Displaying Values: num [ 0 ][ 0 ] : 3 num [ 0 ][ 1 ] : 4 num [ 1 ][ 0 ] : 9 num [ 1 ][ 1 ] : 5 num [ 2 ][ 0 ] : 7 num [ 2 ][ 1 ] : 1 In the above program, we have defined a function named display() . The function takes a two dimensional array, int n[][2] as its argument and prints the elements of the array. While calling the function, we only pass the name of the two dimensional array as the function argument display(num) . Note : It is not mandatory to specify the number of rows in the array. However, the number of columns should always be specified. This is why we have used int n[][2] . We can also pass arrays with more than 2 dimensions as a function argument.","title":"Example 2: Passing Multidimensional Array to a Function"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-returning-an-array-from-a-function","text":"We can also return an array from the function. However, the actual array is not returned. Instead the address of the first element of the array is returned with the help of pointers . We will learn about returning arrays from a function in the coming tutorials.","title":"C++ Returning an Array From a Function"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-strings","text":"In this tutorial, you'll learn to handle strings in C++. You'll learn to declare them, initialize them and use them for various input/output operations. String is a collection of characters. There are two types of strings commonly used in C++ programming language: Strings that are objects of string class (The Standard C++ Library string class) C-strings (C-style Strings)","title":"C++ Strings"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-strings_1","text":"In C programming, the collection of characters is stored in the form of arrays. This is also supported in C++ programming. Hence it's called C-strings. C-strings are arrays of type char terminated with null character, that is, \\0 (ASCII value of null character is 0).","title":"C-strings"},{"location":"week-6-cpp/ce103-week-6-cpp/#how-to-define-a-c-string","text":"char str [] = \"C++\" ; In the above code, str is a string and it holds 4 characters. Although, \" C++ \" has 3 character, the null character \\0 is added to the end of the string automatically.","title":"How to define a C-string?"},{"location":"week-6-cpp/ce103-week-6-cpp/#alternative-ways-of-defining-a-string","text":"char str [ 4 ] = \"C++\" ; char str [] = { 'C' , '+' , '+' , '\\0' }; char str [ 4 ] = { 'C' , '+' , '+' , '\\0' }; Like arrays, it is not necessary to use all the space allocated for the string. For example: char str [ 100 ] = \"C++\" ;","title":"Alternative ways of defining a string"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-1-c-string-to-read-a-word","text":"C++ program to display a string entered by user. #include <iostream> using namespace std ; int main () { char str [ 100 ]; cout << \"Enter a string: \" ; cin >> str ; cout << \"You entered: \" << str << endl ; cout << \" \\n Enter another string: \" ; cin >> str ; cout << \"You entered: \" << str << endl ; return 0 ; } Output Enter a string: C++ You entered: C++ Enter another string: Programming is fun. You entered: Programming Notice that, in the second example only \"Programming\" is displayed instead of \"Programming is fun\". This is because the extraction operator >> works as scanf() in C and considers a space \" \" has a terminating character.","title":"Example 1: C++ String to read a word"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-2-c-string-to-read-a-line-of-text","text":"C++ program to read and display an entire line entered by user. #include <iostream> using namespace std ; int main () { char str [ 100 ]; cout << \"Enter a string: \" ; cin . get ( str , 100 ); cout << \"You entered: \" << str << endl ; return 0 ; } Output Enter a string: Programming is fun. You entered: Programming is fun. To read the text containing blank space, cin.get function can be used. This function takes two arguments. First argument is the name of the string (address of first element of string) and second argument is the maximum size of the array. In the above program, str is the name of the string and 100 is the maximum size of the array.","title":"Example 2: C++ String to read a line of text"},{"location":"week-6-cpp/ce103-week-6-cpp/#string-object","text":"In C++, you can also create a string object for holding strings. Unlike using char arrays, string objects has no fixed length, and can be extended as per your requirement.","title":"string Object"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-3-c-string-using-string-data-type","text":"#include <iostream> using namespace std ; int main () { // Declaring a string object string str ; cout << \"Enter a string: \" ; getline ( cin , str ); cout << \"You entered: \" << str << endl ; return 0 ; } Output Enter a string: Programming is fun. You entered: Programming is fun. In this program, a string str is declared. Then the string is asked from the user. Instead of using cin>> or cin.get() function, you can get the entered line of text using getline() . getline() function takes the input stream as the first parameter which is cin and str as the location of the line to be stored.","title":"Example 3: C++ string using string data type"},{"location":"week-6-cpp/ce103-week-6-cpp/#passing-string-to-a-function","text":"Strings are passed to a function in a similar way arrays are passed to a function . #include <iostream> using namespace std ; void display ( char * ); void display ( string ); int main () { string str1 ; char str [ 100 ]; cout << \"Enter a string: \" ; getline ( cin , str1 ); cout << \"Enter another string: \" ; cin . get ( str , 100 , '\\n' ); display ( str1 ); display ( str ); return 0 ; } void display ( char s []) { cout << \"Entered char array is: \" << s << endl ; } void display ( string s ) { cout << \"Entered string is: \" << s << endl ; } Output Enter a string: Programming is fun. Enter another string: Really? Entered string is: Programming is fun. Entered char array is: Really? In the above program, two strings are asked to enter. These are stored in str and str1 respectively, where str is a char array and str1 is a string object. Then, we have two functions display() that outputs the string onto the string. The only difference between the two functions is the parameter. The first display() function takes char array as a parameter, while the second takes string as a parameter. This process is known as function overloading. Learn more about Function Overloading .","title":"Passing String to a Function"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-structures","text":"","title":"C++ Structures"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-structures_1","text":"In this article, you'll learn about structures in C++ programming; what is it, how to define it and use it in your program. Structure is a collection of variables of different data types under a single name. It is similar to a class in that, both holds a collecion of data of different data types. For example: You want to store some information about a person: his/her name, citizenship number and salary. You can easily create different variables name, citNo, salary to store these information separately. However, in the future, you would want to store information about multiple persons. Now, you'd need to create different variables for each information per person: name1, citNo1, salary1, name2, citNo2, salary2 You can easily visualize how big and messy the code would look. Also, since no relation between the variables (information) would exist, it's going to be a daunting task. A better approach will be to have a collection of all related information under a single name Person , and use it for every person. Now, the code looks much cleaner, readable and efficient as well. This collection of all related information under a single name Person is a structure.","title":"C++ Structures"},{"location":"week-6-cpp/ce103-week-6-cpp/#how-to-declare-a-structure-in-c-programming","text":"The struct keyword defines a structure type followed by an identifier (name of the structure). Then inside the curly braces, you can declare one or more members (declare variables inside curly braces) of that structure. For example: struct Person { char name [ 50 ]; int age ; float salary ; }; Here a structure person is defined which has three members: name, age and salary. When a structure is created, no memory is allocated. The structure definition is only the blueprint for the creating of variables. You can imagine it as a datatype. When you define an integer as below: int foo ; The int specifies that, variable foo can hold integer element only. Similarly, structure definition only specifies that, what property a structure variable holds when it is defined. Note: Remember to end the declaration with a semicolon (;)","title":"How to declare a structure in C++ programming?"},{"location":"week-6-cpp/ce103-week-6-cpp/#how-to-define-a-structure-variable","text":"Once you declare a structure person as above. You can define a structure variable as: Person bill; Here, a structure variable bill is defined which is of type structure P erson . When structure variable is defined, only then the required memory is allocated by the compiler. Considering you have either 32-bit or 64-bit system, the memory of float is 4 bytes, memory of int is 4 bytes and memory of char is 1 byte. Hence, 58 bytes of memory is allocated for structure variable bill.","title":"How to define a structure variable?"},{"location":"week-6-cpp/ce103-week-6-cpp/#how-to-access-members-of-a-structure","text":"The members of structure variable is accessed using a dot (.) operator. Suppose, you want to access age of structure variable bill and assign it 50 to it. You can perform this task by using following code below: bill . age = 50 ;","title":"How to access members of a structure?"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-c-structure","text":"C++ Program to assign data to members of a structure variable and display it. #include <iostream> using namespace std ; struct Person { char name [ 50 ]; int age ; float salary ; }; int main () { Person p1 ; cout << \"Enter Full name: \" ; cin . get ( p1 . name , 50 ); cout << \"Enter age: \" ; cin >> p1 . age ; cout << \"Enter salary: \" ; cin >> p1 . salary ; cout << \" \\n Displaying Information.\" << endl ; cout << \"Name: \" << p1 . name << endl ; cout << \"Age: \" << p1 . age << endl ; cout << \"Salary: \" << p1 . salary ; return 0 ; } Output Enter Full name: Magdalena Dankova Enter age: 27 Enter salary: 1024 .4 Displaying Information. Name: Magdalena Dankova Age: 27 Salary: 1024 .4 Here a structure Person is declared which has three members name, age and salary. Inside main() function , a structure variable p1 is defined. Then, the user is asked to enter information and data entered by user is displayed. You should also check out these structure related tutorials: How to pass structures to functions? How to use pointers with structures?","title":"Example: C++ Structure"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-structure-and-function","text":"In this article, you'll find relevant examples to pass structures as an argument to a function, and use them in your program. Structure variables can be passed to a function and returned in a similar way as normal arguments.","title":"C++ Structure and Function"},{"location":"week-6-cpp/ce103-week-6-cpp/#passing-structure-to-function-in-c","text":"A structure variable can be passed to a function in similar way as normal argument. Consider this example:","title":"Passing structure to function in C++"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-1-c-structure-and-function","text":"#include <iostream> using namespace std ; struct Person { char name [ 50 ]; int age ; float salary ; }; void displayData ( Person ); // Function declaration int main () { Person p ; cout << \"Enter Full name: \" ; cin . get ( p . name , 50 ); cout << \"Enter age: \" ; cin >> p . age ; cout << \"Enter salary: \" ; cin >> p . salary ; // Function call with structure variable as an argument displayData ( p ); return 0 ; } void displayData ( Person p ) { cout << \" \\n Displaying Information.\" << endl ; cout << \"Name: \" << p . name << endl ; cout << \"Age: \" << p . age << endl ; cout << \"Salary: \" << p . salary ; } Output Enter Full name: Bill Jobs Enter age: 55 Enter salary: 34233 .4 Displaying Information. Name: Bill Jobs Age: 55 Salary: 34233 .4 In this program, user is asked to enter the name, age and salary of a Person inside main() function. Then, the structure variable p is to passed to a function using. displayData(p); The return type of displayData() is void and a single argument of type structure Person is passed. Then the members of structure p is displayed from this function.","title":"Example 1: C++ Structure and Function"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-2-returning-structure-from-function-in-c","text":"#include <iostream> using namespace std ; struct Person { char name [ 50 ]; int age ; float salary ; }; Person getData ( Person ); void displayData ( Person ); int main () { Person p , temp ; temp = getData ( p ); p = temp ; displayData ( p ); return 0 ; } Person getData ( Person p ) { cout << \"Enter Full name: \" ; cin . get ( p . name , 50 ); cout << \"Enter age: \" ; cin >> p . age ; cout << \"Enter salary: \" ; cin >> p . salary ; return p ; } void displayData ( Person p ) { cout << \" \\n Displaying Information.\" << endl ; cout << \"Name: \" << p . name << endl ; cout << \"Age: \" << p . age << endl ; cout << \"Salary: \" << p . salary ; } The output of this program is the same as the program above. In this program, we have created two structure variables p and temp of type Person under the main() function. The structure variable p is passed to getData() function which takes input from the user which is then stored in the temp variable. temp = getData ( p ); We then assign the value of temp to p. p = temp ; Then the structure variable p is passed to displayData() function, which displays the information. Note: We don't really need to use the temp variable for most compilers and C++ versions. Instead, we can simply use the following code: p = getData ( p );","title":"Example 2: Returning structure from function in C++"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-pointers-to-structure","text":"In this article, you'll find relevant examples that will help you to work with pointers to access data within a structure. A pointer variable can be created not only for native types like ( int , float , double etc.) but they can also be created for user defined types like structure . If you do not know what pointers are, visit C++ pointers . Here is how you can create pointer for structures: #include <iostream> using namespace std ; struct temp { int i ; float f ; }; int main () { temp * ptr ; return 0 ; } This program creates a pointer ptr of type structure temp.","title":"C++ Pointers to Structure"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-pointers-to-structure","text":"#include <iostream> using namespace std ; struct Distance { int feet ; float inch ; }; int main () { Distance * ptr , d ; ptr = & d ; cout << \"Enter feet: \" ; cin >> ( * ptr ). feet ; cout << \"Enter inch: \" ; cin >> ( * ptr ). inch ; cout << \"Displaying information.\" << endl ; cout << \"Distance = \" << ( * ptr ). feet << \" feet \" << ( * ptr ). inch << \" inches\" ; return 0 ; } Output Enter feet: 4 Enter inch: 3 .5 Displaying information. Distance = 4 feet 3 .5 inches In this program, a pointer variable ptr and normal variable d of type structure Distance is defined. The address of variable d is stored to pointer variable, that is, ptr is pointing to variable d. Then, the member function of variable d is accessed using pointer. Notes: Since pointer ptr is pointing to variable d in this program, (*ptr).inch and d.inch are equivalent. Similarly, (*ptr).feet and d.feet are equivalent. However, if we are using pointers, it is far more preferable to access struct members using the -> operator, since the . operator has a higher precedence than the * operator. Hence, we enclose *ptr in brackets when using (*ptr).inch . Because of this, it is easier to make mistakes if both operators are used together in a single code. ptr -> feet is same as ( * ptr ). feet ptr -> inch is same as ( * ptr ). inc","title":"Example: Pointers to Structure"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-enumeration","text":"In this article, you will learn to work with enumeration (enum). Also, you will learn where enums are commonly used in C++ programming. An enumeration is a user-defined data type that consists of integral constants. To define an enumeration, keyword enum is used. enum season { spring , summer , autumn , winter }; Here, the name of the enumeration is season. And, spring, summer and winter are values of type season. By default, spring is 0, summer is 1 and so on. You can change the default value of an enum element during declaration (if necessary). enum season { spring = 0 , summer = 4 , autumn = 8 , winter = 12 };","title":"C++ Enumeration"},{"location":"week-6-cpp/ce103-week-6-cpp/#enumerated-type-declaration","text":"When you create an enumerated type, only blueprint for the variable is created. Here's how you can create variables of enum type. enum boolean { false , true }; // inside function enum boolean check ; Here, a variable check of type enum boolean is created. Here is another way to declare same check variable using different syntax. enum boolean { false , true } check ;","title":"Enumerated Type Declaration"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-1-enumeration-type","text":"#include <iostream> using namespace std ; enum week { Sunday , Monday , Tuesday , Wednesday , Thursday , Friday , Saturday }; int main () { week today ; today = Wednesday ; cout << \"Day \" << today + 1 ; return 0 ; } Output Day 4","title":"Example 1: Enumeration Type"},{"location":"week-6-cpp/ce103-week-6-cpp/#example2-changing-default-value-of-enums","text":"#include <iostream> using namespace std ; enum seasons { spring = 34 , summer = 4 , autumn = 9 , winter = 32 }; int main () { seasons s ; s = summer ; cout << \"Summer = \" << s << endl ; return 0 ; } Output Summer = 4","title":"Example2: Changing Default Value of Enums"},{"location":"week-6-cpp/ce103-week-6-cpp/#why-enums-are-used-in-c-programming","text":"An enum variable takes only one value out of many possible values. Example to demonstrate it, #include <iostream> using namespace std ; enum suit { club = 0 , diamonds = 10 , hearts = 20 , spades = 3 } card ; int main () { card = club ; cout << \"Size of enum variable \" << sizeof ( card ) << \" bytes.\" ; return 0 ; } Output Size of enum variable 4 bytes. It's because the size of an integer is 4 bytes.; This makes enum a good choice to work with flags. You can accomplish the same task using C++ structures . However, working with enums gives you efficiency along with flexibility.","title":"Why enums are used in C++ programming?"},{"location":"week-6-cpp/ce103-week-6-cpp/#how-to-use-enums-for-flags","text":"Let us take an example, enum designFlags { ITALICS = 1 , BOLD = 2 , UNDERLINE = 4 } button ; Suppose you are designing a button for Windows application. You can set flags ITALICS, BOLD and UNDERLINE to work with text. There is a reason why all the integral constants are power of 2 in above pseudocode. // In binary ITALICS = 00000001 BOLD = 00000010 UNDERLINE = 00000100 Since, the integral constants are power of 2, you can combine two or more flags at once without overlapping using bitwise OR | operator. This allows you to choose two or more flags at once. For example, #include <iostream> using namespace std ; enum designFlags { BOLD = 1 , ITALICS = 2 , UNDERLINE = 4 }; int main () { int myDesign = BOLD | UNDERLINE ; // 00000001 // | 00000100 // ___________ // 00000101 cout << myDesign ; return 0 ; } Output 5 When the output is 5, you always know that bold and underline is used. Also, you can add flag to your requirements. if ( myDesign & ITALICS ) { // code for italics } Here, we have added italics to our design. Note, only code for italics is written inside the if statement . You can accomplish almost anything in C++ programming without using enumerations. However, they can be pretty handy in certain situations. That's what differentiates good programmers from great programmers.","title":"How to use enums for flags?"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-classes-and-objects","text":"In this tutorial, we will learn about objects and classes and how to use them in C++ with the help of examples. In previous tutorials, we learned about functions and variables. Sometimes it's desirable to put related functions and data in one place so that it's logical and easier to work with. Suppose, we need to store the length, breadth, and height of a rectangular room and calculate its area and volume. To handle this task, we can create three variables, say, length, breadth, and height along with the functions calculateArea() and calculateVolume() . However, in C++, rather than creating separate variables and functions, we can also wrap these related data and functions in a single place (by creating objects ). This programming paradigm is known as object-oriented programming. But before we can create objects and use them in C++, we first need to learn about classes .","title":"C++ Classes and Objects"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-class","text":"A class is a blueprint for the object. We can think of a class as a sketch (prototype) of a house. It contains all the details about the floors, doors, windows, etc. Based on these descriptions we build the house. House is the object.","title":"C++ Class"},{"location":"week-6-cpp/ce103-week-6-cpp/#create-a-class","text":"A class is defined in C++ using keyword class followed by the name of the class. The body of the class is defined inside the curly brackets and terminated by a semicolon at the end. class className { // some data // some functions }; For example, class Room { public: double length; double breadth; double height; double calculateArea(){ return length * breadth; } double calculateVolume(){ return length * breadth * height; } }; Here, we defined a class named Room . The variables length, breadth, and height declared inside the class are known as data members . And, the functions calculateArea() and calculateVolume() are known as member functions of a class.","title":"Create a Class"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-objects","text":"When a class is defined, only the specification for the object is defined; no memory or storage is allocated. To use the data and access functions defined in the class, we need to create objects.","title":"C++ Objects"},{"location":"week-6-cpp/ce103-week-6-cpp/#syntax-to-define-object-in-c","text":"className objectVariableName ; We can create objects of Room class (defined in the above example) as follows: // sample function void sampleFunction () { // create objects Room room1 , room2 ; } int main (){ // create objects Room room3 , room4 ; } Here, two objects room1 and room2 of the Room class are created in sampleFunction() . Similarly, the objects room3 and room4 are created in main() . As we can see, we can create objects of a class in any function of the program. We can also create objects of a class within the class itself, or in other classes. Also, we can create as many objects as we want from a single class.","title":"Syntax to Define Object in C++"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-access-data-members-and-member-functions","text":"We can access the data members and member functions of a class by using a . (dot) operator. For example, room2 . calculateArea (); This will call the calculateArea() function inside the Room class for object room2. Similarly, the data members can be accessed as: room1 . length = 5.5 ; In this case, it initializes the length variable of room1 to 5.5 .","title":"C++ Access Data Members and Member Functions"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-1-object-and-class-in-c-programming","text":"// Program to illustrate the working of // objects and class in C++ Programming #include <iostream> using namespace std ; // create a class class Room { public : double length ; double breadth ; double height ; double calculateArea () { return length * breadth ; } double calculateVolume () { return length * breadth * height ; } }; int main () { // create object of Room class Room room1 ; // assign values to data members room1 . length = 42.5 ; room1 . breadth = 30.8 ; room1 . height = 19.2 ; // calculate and display the area and volume of the room cout << \"Area of Room = \" << room1 . calculateArea () << endl ; cout << \"Volume of Room = \" << room1 . calculateVolume () << endl ; return 0 ; } Run Code Output Area of Room = 1309 Volume of Room = 25132 .8 In this program, we have used the Room class and its object room1 to calculate the area and volume of a room. In main() , we assigned the values of length, breadth, and height with the code: room1 . length = 42.5 ; room1 . breadth = 30.8 ; room1 . height = 19.2 ; We then called the functions calculateArea() and calculateVolume() to perform the necessary calculations. Note the use of the keyword public in the program. This means the members are public and can be accessed anywhere from the program. As per our needs, we can also create private members using the private keyword. The private members of a class can only be accessed from within the class. For example, class Test { private : int a ; void function1 () { } public : int b ; void function2 () { } } Here, a and function1() are private. Thus they cannot be accessed from outside the class. On the other hand, b and function2() are accessible from everywhere in the program. To learn more about public and private keywords, please visit our C++ Class Access Modifiers tutorial.","title":"Example 1: Object and Class in C++ Programming"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-2-using-public-and-private-in-c-class","text":"// Program to illustrate the working of // public and private in C++ Class #include <iostream> using namespace std ; class Room { private : double length ; double breadth ; double height ; public : // function to initialize private variables void initData ( double len , double brth , double hgt ) { length = len ; breadth = brth ; height = hgt ; } double calculateArea () { return length * breadth ; } double calculateVolume () { return length * breadth * height ; } }; int main () { // create object of Room class Room room1 ; // pass the values of private variables as arguments room1 . initData ( 42.5 , 30.8 , 19.2 ); cout << \"Area of Room = \" << room1 . calculateArea () << endl ; cout << \"Volume of Room = \" << room1 . calculateVolume () << endl ; return 0 ; } Run Code Output Area of Room = 1309 Volume of Room = 25132 .8 The above example is nearly identical to the first example, except that the class variables are now private. Since the variables are now private, we cannot access them directly from main() . Hence, using the following code would be invalid: // invalid code obj . length = 42.5 ; obj . breadth = 30.8 ; obj . height = 19.2 ; Instead, we use the public function initData() to initialize the private variables via the function parameters double len , double brth , and double hgt . To learn more on objects and classes, visit these topics: C++ Constructors How to pass and return an object from a function?","title":"Example 2: Using public and private in C++ Class"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-constructors","text":"In this tutorial, we will learn about the C++ constructor and its type with the help examples. A constructor is a special type of member function that is called automatically when an object is created. In C++, a constructor has the same name as that of the class and it does not have a return type. For example, class Wall { public : // create a constructor Wall () { // code } }; Here, the function Wall() is a constructor of the class Wall . Notice that the constructor has the same name as the class, does not have a return type, and is public","title":"C++ Constructors"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-default-constructor","text":"A constructor with no parameters is known as a default constructor . In the example above, Wall() is a default constructor.","title":"C++ Default Constructor"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-1-c-default-constructor","text":"// C++ program to demonstrate the use of default constructor #include <iostream> using namespace std ; // declare a class class Wall { private : double length ; public : // default constructor to initialize variable Wall () { length = 5.5 ; cout << \"Creating a wall.\" << endl ; cout << \"Length = \" << length << endl ; } }; int main () { Wall wall1 ; return 0 ; } Run Code Output Creating a Wall Length = 5 .5 Here, when the wall1 object is created, the Wall() constructor is called. This sets the length variable of the object to 5.5 . Note: If we have not defined a constructor in our class, then the C++ compiler will automatically create a default constructor with an empty code and no parameters.","title":"Example 1: C++ Default Constructor"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-parameterized-constructor","text":"In C++, a constructor with parameters is known as a parameterized constructor. This is the preferred method to initialize member data.","title":"C++ Parameterized Constructor"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-2-c-parameterized-constructor","text":"// C++ program to calculate the area of a wall #include <iostream> using namespace std ; // declare a class class Wall { private : double length ; double height ; public : // parameterized constructor to initialize variables Wall ( double len , double hgt ) { length = len ; height = hgt ; } double calculateArea () { return length * height ; } }; int main () { // create object and initialize data members Wall wall1 ( 10.5 , 8.6 ); Wall wall2 ( 8.5 , 6.3 ); cout << \"Area of Wall 1: \" << wall1 . calculateArea () << endl ; cout << \"Area of Wall 2: \" << wall2 . calculateArea (); return 0 ; } Run Code Output Area of Wall 1 : 90 .3 Area of Wall 2 : 53 .55 Here, we have created a parameterized constructor Wall() that has 2 parameters: double len and double hgt . The values contained in these parameters are used to initialize the member variables length and height. When we create an object of the Wall class, we pass the values for the member variables as arguments. The code for this is: Wall wall1 ( 10.5 , 8.6 ); Wall wall2 ( 8.5 , 6.3 ); With the member variables thus initialized, we can now calculate the area of the wall with the calculateArea() function.","title":"Example 2: C++ Parameterized Constructor"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-copy-constructor","text":"The copy constructor in C++ is used to copy data of one object to another.","title":"C++ Copy Constructor"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-3-c-copy-constructor","text":"#include <iostream> using namespace std ; // declare a class class Wall { private : double length ; double height ; public : // initialize variables with parameterized constructor Wall ( double len , double hgt ) { length = len ; height = hgt ; } // copy constructor with a Wall object as parameter // copies data of the obj parameter Wall ( Wall & obj ) { length = obj . length ; height = obj . height ; } double calculateArea () { return length * height ; } }; int main () { // create an object of Wall class Wall wall1 ( 10.5 , 8.6 ); // copy contents of wall1 to wall2 Wall wall2 = wall1 ; // print areas of wall1 and wall2 cout << \"Area of Wall 1: \" << wall1 . calculateArea () << endl ; cout << \"Area of Wall 2: \" << wall2 . calculateArea (); return 0 ; } Run Code Output Area of Wall 1 : 90 .3 Area of Wall 2 : 90 .3 In this program, we have used a copy constructor to copy the contents of one object of the Wall class to another. The code of the copy constructor is: Wall ( Wall & obj ) { length = obj . length ; height = obj . height ; } Notice that the parameter of this constructor has the address of an object of the Wall class. We then assign the values of the variables of the obj object to the corresponding variables of the object calling the copy constructor. This is how the contents of the object are copied. In main() , we then create two objects wall1 and wall2 and then copy the contents of wall1 to wall2: // copy contents of wall1 to wall2 Wall wall2 = wall1 ; Here, the wall2 object calls its copy constructor by passing the address of the wall1 object as its argument i.e. &obj = &wall1 . Note : A constructor is primarily used to initialize objects. They are also used to run a default code when an object is created.","title":"Example 3: C++ Copy Constructor"},{"location":"week-6-cpp/ce103-week-6-cpp/#how-to-pass-and-return-object-from-c-functions","text":"In this tutorial, we will learn to pass objects to a function and return an object from a function in C++ programming. In C++ programming, we can pass objects to a function in a similar manner as passing regular arguments.","title":"How to pass and return object from C++ Functions?"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-1-c-pass-objects-to-function","text":"// C++ program to calculate the average marks of two students #include <iostream> using namespace std ; class Student { public : double marks ; // constructor to initialize marks Student ( double m ) { marks = m ; } }; // function that has objects as parameters void calculateAverage ( Student s1 , Student s2 ) { // calculate the average of marks of s1 and s2 double average = ( s1 . marks + s2 . marks ) / 2 ; cout << \"Average Marks = \" << average << endl ; } int main () { Student student1 ( 88.0 ), student2 ( 56.0 ); // pass the objects as arguments calculateAverage ( student1 , student2 ); return 0 ; } Run Code Output Average Marks = 72 Here, we have passed two Student objects student1 and student2 as arguments to the calculateAverage() function. Pass objects to function in C++","title":"Example 1: C++ Pass Objects to Function"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-2-c-return-object-from-a-function","text":"#include <iostream> using namespace std ; class Student { public : double marks1 , marks2 ; }; // function that returns object of Student Student createStudent () { Student student ; // Initialize member variables of Student student . marks1 = 96.5 ; student . marks2 = 75.0 ; // print member variables of Student cout << \"Marks 1 = \" << student . marks1 << endl ; cout << \"Marks 2 = \" << student . marks2 << endl ; return student ; } int main () { Student student1 ; // Call function student1 = createStudent (); return 0 ; } Run Code Output Marks1 = 96 .5 Marks2 = 75 Return object from function in C++ In this program, we have created a function createStudent() that returns an object of Student class. We have called createStudent() from the main() method. // Call function student1 = createStudent (); Here, we are storing the object returned by the createStudent() method in the student1.","title":"Example 2: C++ Return Object from a Function"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-operator-overloading","text":"In this tutorial, we will learn about operator overloading with the help of examples. In C++, we can change the way operators work for user-defined types like objects and structures. This is known as operator overloading . For example, Suppose we have created three objects c1, c2 and result from a class named Complex that represents complex numbers. Since operator overloading allows us to change how operators work, we can redefine how the + operator works and use it to add the complex numbers of c1 and c2 by writing the following code: result = c1 + c2 ; instead of something like result = c1 . addNumbers ( c2 ); This makes our code intuitive and easy to understand. Note: We cannot use operator overloading for fundamental data types like int , float , char and so on.","title":"C++ Operator Overloading"},{"location":"week-6-cpp/ce103-week-6-cpp/#syntax-for-c-operator-overloading","text":"To overload an operator, we use a special operator function. We define the function inside the class or structure whose objects/variables we want the overloaded operator to work with. class className { ... .. ... public returnType operator symbol ( arguments ) { ... .. ... } ... .. ... }; Here, returnType is the return type of the function. operator is a keyword. symbol is the operator we want to overload. Like: + , < , - , ++ , etc. arguments is the arguments passed to the function.","title":"Syntax for C++ Operator Overloading"},{"location":"week-6-cpp/ce103-week-6-cpp/#operator-overloading-in-unary-operators","text":"Unary operators operate on only one operand. The increment operator ++ and decrement operator -- are examples of unary operators.","title":"Operator Overloading in Unary Operators"},{"location":"week-6-cpp/ce103-week-6-cpp/#example1-operator-unary-operator-overloading","text":"// Overload ++ when used as prefix #include <iostream> using namespace std ; class Count { private : int value ; public : // Constructor to initialize count to 5 Count () : value ( 5 ) {} // Overload ++ when used as prefix void operator ++ () { ++ value ; } void display () { cout << \"Count: \" << value << endl ; } }; int main () { Count count1 ; // Call the \"void operator ++ ()\" function ++ count1 ; count1 . display (); return 0 ; } Run Code Output Count: 6 Here, when we use ++count1; , the void operator ++ () is called. This increases the value attribute for the object count1 by 1. Note: When we overload operators, we can use it to work in any way we like. For example, we could have used ++ to increase value by 100. However, this makes our code confusing and difficult to understand. It's our job as a programmer to use operator overloading properly and in a consistent and intuitive way. The above example works only when ++ is used as a prefix. To make ++ work as a postfix we use this syntax. void operator ++ ( int ) { // code } Notice the int inside the parentheses. It's the syntax used for using unary operators as postfix; it's not a function parameter.","title":"Example1: ++ Operator (Unary Operator) Overloading"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-2-operator-unary-operator-overloading","text":"// Overload ++ when used as prefix and postfix #include <iostream> using namespace std ; class Count { private : int value ; public : // Constructor to initialize count to 5 Count () : value ( 5 ) {} // Overload ++ when used as prefix void operator ++ () { ++ value ; } // Overload ++ when used as postfix void operator ++ ( int ) { value ++ ; } void display () { cout << \"Count: \" << value << endl ; } }; int main () { Count count1 ; // Call the \"void operator ++ (int)\" function count1 ++ ; count1 . display (); // Call the \"void operator ++ ()\" function ++ count1 ; count1 . display (); return 0 ; } Run Code Output Count: 6 Count: 7 The Example 2 works when ++ is used as both prefix and postfix. However, it doesn't work if we try to do something like this: Count count1 , result ; // Error result = ++ count1 ; This is because the return type of our operator function is void . We can solve this problem by making Count as the return type of the operator function. // return Count when ++ used as prefix Count operator ++ () { // code } // return Count when ++ used as postfix Count operator ++ ( int ) { // code }","title":"Example 2: ++ Operator (Unary Operator) Overloading"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-3-return-value-from-operator-function-operator","text":"#include <iostream> using namespace std ; class Count { private : int value ; public : // Constructor to initialize count to 5 Count () : value ( 5 ) {} // Overload ++ when used as prefix Count operator ++ () { Count temp ; // Here, value is the value attribute of the calling object temp . value = ++ value ; return temp ; } // Overload ++ when used as postfix Count operator ++ ( int ) { Count temp ; // Here, value is the value attribute of the calling object temp . value = value ++ ; return temp ; } void display () { cout << \"Count: \" << value << endl ; } }; int main () { Count count1 , result ; // Call the \"Count operator ++ ()\" function result = ++ count1 ; result . display (); // Call the \"Count operator ++ (int)\" function result = count1 ++ ; result . display (); return 0 ; } Run Code Output Count: 6 Count: 6 Here, we have used the following code for prefix operator overloading: // Overload ++ when used as prefix Count operator ++ () { Count temp ; // Here, value is the value attribute of the calling object temp . value = ++ value ; return temp ; } The code for the postfix operator overloading is also similar. Notice that we have created an object temp and returned its value to the operator function. Also, notice the code temp . value = ++ value ; The variable value belongs to the count1 object in main() because count1 is calling the function, while temp.value belongs to the temp object.","title":"Example 3: Return Value from Operator Function (++ Operator)"},{"location":"week-6-cpp/ce103-week-6-cpp/#operator-overloading-in-binary-operators","text":"Binary operators work on two operands. For example, result = num + 9 ; Here, + is a binary operator that works on the operands num and 9 . When we overload the binary operator for user-defined types by using the code: obj3 = obj1 + obj2 ; The operator function is called using the obj1 object and obj2 is passed as an argument to the function.","title":"Operator Overloading in Binary Operators"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-4-c-binary-operator-overloading","text":"// C++ program to overload the binary operator + // This program adds two complex numbers #include <iostream> using namespace std ; class Complex { private : float real ; float imag ; public : // Constructor to initialize real and imag to 0 Complex () : real ( 0 ), imag ( 0 ) {} void input () { cout << \"Enter real and imaginary parts respectively: \" ; cin >> real ; cin >> imag ; } // Overload the + operator Complex operator + ( const Complex & obj ) { Complex temp ; temp . real = real + obj . real ; temp . imag = imag + obj . imag ; return temp ; } void output () { if ( imag < 0 ) cout << \"Output Complex number: \" << real << imag << \"i\" ; else cout << \"Output Complex number: \" << real << \"+\" << imag << \"i\" ; } }; int main () { Complex complex1 , complex2 , result ; cout << \"Enter first complex number: \\n \" ; complex1 . input (); cout << \"Enter second complex number: \\n \" ; complex2 . input (); // complex1 calls the operator function // complex2 is passed as an argument to the function result = complex1 + complex2 ; result . output (); return 0 ; } Run Code Output Enter first complex number: Enter real and imaginary parts respectively: 9 5 Enter second complex number: Enter real and imaginary parts respectively: 7 6 Output Complex number: 16 +11i In this program, the operator function is: Complex operator + ( const Complex & obj ) { // code } Instead of this, we also could have written this function like: Complex operator + ( Complex obj ) { // code } However, using & makes our code efficient by referencing the complex2 object instead of making a duplicate object inside the operator function. using const is considered a good practice because it prevents the operator function from modifying complex2. Overloading binary operators in C++","title":"Example 4: C++ Binary Operator Overloading"},{"location":"week-6-cpp/ce103-week-6-cpp/#things-to-remember-in-c-operator-overloading","text":"Two operators = and & are already overloaded by default in C++. For example, to copy objects of the same class , we can directly use the = operator. We do not need to create an operator function. Operator overloading cannot change the precedence and associativity of operators . However, if we want to change the order of evaluation, parentheses should be used. There are 4 operators that cannot be overloaded in C++. They are: :: (scope resolution) . (member selection) .* (member selection through pointer to function) ?: (ternary operator) Visit these pages to learn more on: How to overload increment operator in right way? How to overload binary operator - to subtract complex numbers?","title":"Things to Remember in C++ Operator Overloading"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-pointers","text":"","title":"C++ Pointers"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-pointers_1","text":"In this tutorial, we will learn about pointers in C++ and their working with the help of examples. In C++, pointers are variables that store the memory addresses of other variables.","title":"C++ Pointers"},{"location":"week-6-cpp/ce103-week-6-cpp/#address-in-c","text":"If we have a variable var in our program, &var will give us its address in the memory. For example,","title":"Address in C++"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-1-printing-variable-addresses-in-c","text":"#include <iostream> using namespace std ; int main () { // declare variables int var1 = 3 ; int var2 = 24 ; int var3 = 17 ; // print address of var1 cout << \"Address of var1: \" << & var1 << endl ; // print address of var2 cout << \"Address of var2: \" << & var2 << endl ; // print address of var3 cout << \"Address of var3: \" << & var3 << endl ; } Run Code Output Address of var1: 0x7fff5fbff8ac Address of var2: 0x7fff5fbff8a8 Address of var3: 0x7fff5fbff8a4 Here, 0x at the beginning represents the address is in the hexadecimal form. Notice that the first address differs from the second by 4 bytes and the second address differs from the third by 4 bytes. This is because the size of an int variable is 4 bytes in a 64-bit system. Note: You may not get the same results when you run the program.","title":"Example 1: Printing Variable Addresses in C++"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-pointers_2","text":"As mentioned above, pointers are used to store addresses rather than values. Here is how we can declare pointers. int * pointVar ; Here, we have declared a pointer pointVar of the int type. We can also declare pointers in the following way. int * pointVar ; // preferred syntax Let's take another example of declaring pointers. int * pointVar , p ; Here, we have declared a pointer pointVar and a normal variable p. Note: The * operator is used after the data type to declare pointers.","title":"C++ Pointers"},{"location":"week-6-cpp/ce103-week-6-cpp/#assigning-addresses-to-pointers","text":"Here is how we can assign addresses to pointers: int * pointVar , var ; var = 5 ; // assign address of var to pointVar pointer pointVar = & var ; Here, 5 is assigned to the variable var. And, the address of var is assigned to the pointVar pointer with the code pointVar = &var .","title":"Assigning Addresses to Pointers"},{"location":"week-6-cpp/ce103-week-6-cpp/#get-the-value-from-the-address-using-pointers","text":"To get the value pointed by a pointer, we use the * operator. For example: int * pointVar , var ; var = 5 ; // assign address of var to pointVar pointVar = & var ; // access value pointed by pointVar cout << * pointVar << endl ; // Output: 5 In the above code, the address of var is assigned to pointVar. We have used the *pointVar to get the value stored in that address. When * is used with pointers, it's called the dereference operator . It operates on a pointer and gives the value pointed by the address stored in the pointer. That is, *pointVar = var . Note: In C++, pointVar and *pointVar is completely different. We cannot do something like *pointVar = &var;","title":"Get the Value from the Address Using Pointers"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-2-working-of-c-pointers","text":"#include <iostream> using namespace std ; int main () { int var = 5 ; // declare pointer variable int * pointVar ; // store address of var pointVar = & var ; // print value of var cout << \"var = \" << var << endl ; // print address of var cout << \"Address of var (&var) = \" << & var << endl << endl ; // print pointer pointVar cout << \"pointVar = \" << pointVar << endl ; // print the content of the address pointVar points to cout << \"Content of the address pointed to by pointVar (*pointVar) = \" << * pointVar << endl ; return 0 ; } Run Code Output var = 5 Address of var ( & var ) = 0x61ff08 pointVar = 0x61ff08 Content of the address pointed to by pointVar ( *pointVar ) = 5 Working of C++ pointers","title":"Example 2: Working of C++ Pointers"},{"location":"week-6-cpp/ce103-week-6-cpp/#changing-value-pointed-by-pointers","text":"If pointVar points to the address of var, we can change the value of var by using *pointVar. For example, int var = 5 ; int * pointVar ; // assign address of var pointVar = & var ; // change value at address pointVar * pointVar = 1 ; cout << var << endl ; // Output: 1 Here, pointVar and &var have the same address, the value of var will also be changed when *pointVar is changed.","title":"Changing Value Pointed by Pointers"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-3-changing-value-pointed-by-pointers","text":"#include <iostream> using namespace std ; int main () { int var = 5 ; int * pointVar ; // store address of var pointVar = & var ; // print var cout << \"var = \" << var << endl ; // print *pointVar cout << \"*pointVar = \" << * pointVar << endl << endl ; cout << \"Changing value of var to 7:\" << endl ; // change value of var to 7 var = 7 ; // print var cout << \"var = \" << var << endl ; // print *pointVar cout << \"*pointVar = \" << * pointVar << endl << endl ; cout << \"Changing value of *pointVar to 16:\" << endl ; // change value of var to 16 * pointVar = 16 ; // print var cout << \"var = \" << var << endl ; // print *pointVar cout << \"*pointVar = \" << * pointVar << endl ; return 0 ; } Run Code Output var = 5 *pointVar = 5 Changing value of var to 7 : var = 7 *pointVar = 7 Changing value of *pointVar to 16 : var = 16 *pointVar = 16","title":"Example 3: Changing Value Pointed by Pointers"},{"location":"week-6-cpp/ce103-week-6-cpp/#common-mistakes-when-working-with-pointers","text":"Suppose, we want a pointer varPoint to point to the address of var. Then, int var , * varPoint ; // Wrong! // varPoint is an address but var is not varPoint = var ; // Wrong! // &var is an address // *varPoint is the value stored in &var * varPoint = & var ; // Correct! // varPoint is an address and so is &var varPoint = & var ; // Correct! // both *varPoint and var are values * varPoint = var ; Recommended Readings : How to use generic data type pointers using a void pointer? How to represent an array using a pointer? How to use pointers with functions? How to use pointers with structures?","title":"Common mistakes when working with pointers"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-pointers-and-arrays","text":"In this tutorial, we will learn about the relation between arrays and pointers with the help of examples. In C++, Pointers are variables that hold addresses of other variables. Not only can a pointer store the address of a single variable, it can also store the address of cells of an array . Consider this example: int * ptr ; int arr [ 5 ]; // store the address of the first // element of arr in ptr ptr = arr ; Here, ptr is a pointer variable while arr is an int array. The code ptr = arr; stores the address of the first element of the array in variable ptr. Notice that we have used arr instead of &arr[0] . This is because both are the same. So, the code below is the same as the code above. int * ptr ; int arr [ 5 ]; ptr = & arr [ 0 ]; The addresses for the rest of the array elements are given by &arr[1] , &arr[2] , &arr[3] , and &arr[4] .","title":"C++ Pointers and Arrays"},{"location":"week-6-cpp/ce103-week-6-cpp/#point-to-every-array-elements","text":"Suppose we need to point to the fourth element of the array using the same pointer ptr. Here, if ptr points to the first element in the above example then ptr + 3 will point to the fourth element. For example, int * ptr ; int arr [ 5 ]; ptr = arr ; ptr + 1 is equivalent to & arr [ 1 ]; ptr + 2 is equivalent to & arr [ 2 ]; ptr + 3 is equivalent to & arr [ 3 ]; ptr + 4 is equivalent to & arr [ 4 ]; Similarly, we can access the elements using the single pointer. For example, // use dereference operator * ptr == arr [ 0 ]; * ( ptr + 1 ) is equivalent to arr [ 1 ]; * ( ptr + 2 ) is equivalent to arr [ 2 ]; * ( ptr + 3 ) is equivalent to arr [ 3 ]; * ( ptr + 4 ) is equivalent to arr [ 4 ]; Suppose if we have initialized ptr = &arr[2]; then ptr - 2 is equivalent to & arr [ 0 ]; ptr - 1 is equivalent to & arr [ 1 ]; ptr + 1 is equivalent to & arr [ 3 ]; ptr + 2 is equivalent to & arr [ 4 ]; Working of C++ Pointers with Arrays Note: The address between ptr and ptr + 1 differs by 4 bytes. It is because ptr is a pointer to an int data. And, the size of int is 4 bytes in a 64-bit operating system. Similarly, if pointer ptr is pointing to char type data, then the address between ptr and ptr + 1 is 1 byte. It is because the size of a character is 1 byte.","title":"Point to Every Array Elements"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-1-c-pointers-and-arrays","text":"// C++ Program to display address of each element of an array #include <iostream> using namespace std ; int main () { float arr [ 3 ]; // declare pointer variable float * ptr ; cout << \"Displaying address using arrays: \" << endl ; // use for loop to print addresses of all array elements for ( int i = 0 ; i < 3 ; ++ i ) { cout << \"&arr[\" << i << \"] = \" << & arr [ i ] << endl ; } // ptr = &arr[0] ptr = arr ; cout << \" \\n Displaying address using pointers: \" << endl ; // use for loop to print addresses of all array elements // using pointer notation for ( int i = 0 ; i < 3 ; ++ i ) { cout << \"ptr + \" << i << \" = \" << ptr + i << endl ; } return 0 ; } Run Code Output Displaying address using arrays: & arr [ 0 ] = 0x61fef0 & arr [ 1 ] = 0x61fef4 & arr [ 2 ] = 0x61fef8 Displaying address using pointers: ptr + 0 = 0x61fef0 ptr + 1 = 0x61fef4 ptr + 2 = 0x61fef8 In the above program, we first simply printed the addresses of the array elements without using the pointer variable ptr. Then, we used the pointer ptr to point to the address of a[0], ptr + 1 to point to the address of a[1], and so on. In most contexts, array names decay to pointers. In simple words, array names are converted to pointers. That's the reason why we can use pointers to access elements of arrays. However, we should remember that pointers and arrays are not the same. There are a few cases where array names don't decay to pointers. To learn more, visit: When does array name doesn't decay into a pointer?","title":"Example 1: C++ Pointers and Arrays"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-2-array-name-used-as-pointer","text":"// C++ Program to insert and display data entered by using pointer notation. #include <iostream> using namespace std ; int main () { float arr [ 5 ]; // Insert data using pointer notation cout << \"Enter 5 numbers: \" ; for ( int i = 0 ; i < 5 ; ++ i ) { // store input number in arr[i] cin >> * ( arr + i ) ; } // Display data using pointer notation cout << \"Displaying data: \" << endl ; for ( int i = 0 ; i < 5 ; ++ i ) { // display value of arr[i] cout << * ( arr + i ) << endl ; } return 0 ; } Run Code Output Enter 5 numbers: 2 .5 3 .5 4 .5 5 2 Displaying data: 2 .5 3 .5 4 .5 5 2 Here, We first used the pointer notation to store the numbers entered by the user into the array arr. cin >> * ( arr + i ) ; This code is equivalent to the code below: cin >> arr [ i ]; Notice that we haven't declared a separate pointer variable, but rather we are using the array name arr for the pointer notation. As we already know, the array name arr points to the first element of the array. So, we can think of arr as acting like a pointer. Similarly, we then used for loop to display the values of arr using pointer notation. cout << * ( arr + i ) << endl ; This code is equivalent to cout << arr [ i ] << endl ;","title":"Example 2: Array name used as pointer"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-call-by-reference-using-pointers","text":"In this tutorial, we will learn about C++ call by reference to pass pointers as an argument to the function with the help of examples. In the C++ Functions tutorial, we learned about passing arguments to a function. This method used is called passing by value because the actual value is passed. However, there is another way of passing arguments to a function where the actual values of arguments are not passed. Instead, the reference to values is passed. For example, // function that takes value as parameter void func1 ( int numVal ) { // code } // function that takes reference as parameter // notice the & before the parameter void func2 ( int & numRef ) { // code } int main () { int num = 5 ; // pass by value func1 ( num ); // pass by reference func2 ( num ); return 0 ; } Run Code Notice the & in void func2(int &numRef) . This denotes that we are using the address of the variable as our parameter. So, when we call the func2() function in main() by passing the variable num as an argument, we are actually passing the address of num variable instead of the value 5 . C++ Pass by Value vs. Pass by Reference","title":"C++ Call by Reference: Using pointers"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-1-passing-by-reference-without-pointers","text":"#include <iostream> using namespace std ; // function definition to swap values void swap ( int & n1 , int & n2 ) { int temp ; temp = n1 ; n1 = n2 ; n2 = temp ; } int main () { // initialize variables int a = 1 , b = 2 ; cout << \"Before swapping\" << endl ; cout << \"a = \" << a << endl ; cout << \"b = \" << b << endl ; // call function to swap numbers swap ( a , b ); cout << \" \\n After swapping\" << endl ; cout << \"a = \" << a << endl ; cout << \"b = \" << b << endl ; return 0 ; } Run Code Output Before swapping a = 1 b = 2 After swapping a = 2 b = 1 In this program, we passed the variables a and b to the swap() function. Notice the function definition, void swap ( int & n1 , int & n2 ) Here, we are using & to denote that the function will accept addresses as its parameters. Hence, the compiler can identify that instead of actual values, the reference of the variables is passed to function parameters. In the swap() function, the function parameters n1 and n2 are pointing to the same value as the variables a and b respectively. Hence the swapping takes place on actual value. The same task can be done using the pointers. To learn about pointers, visit C++ Pointers .","title":"Example 1: Passing by reference without pointers"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-2-passing-by-reference-using-pointers","text":"#include <iostream> using namespace std ; // function prototype with pointer as parameters void swap ( int * , int * ); int main () { // initialize variables int a = 1 , b = 2 ; cout << \"Before swapping\" << endl ; cout << \"a = \" << a << endl ; cout << \"b = \" << b << endl ; // call function by passing variable addresses swap ( & a , & b ); cout << \" \\n After swapping\" << endl ; cout << \"a = \" << a << endl ; cout << \"b = \" << b << endl ; return 0 ; } // function definition to swap numbers void swap ( int * n1 , int * n2 ) { int temp ; temp = * n1 ; * n1 = * n2 ; * n2 = temp ; } Run Code Output Before swapping a = 1 b = 2 After swapping a = 2 b = 1 Here, we can see the output is the same as the previous example. Notice the line, // &a is address of a // &b is address of b swap ( & a , & b ); Here, the address of the variable is passed during the function call rather than the variable. Since the address is passed instead of value, a dereference operator * must be used to access the value stored in that address. temp = * n1 ; * n1 = * n2 ; * n2 = temp ; *n1 and *n2 gives the value stored at address n1 and n2 respectively. Since n1 and n2 contain the addresses of a and b, anything is done to *n1 and *n2 will change the actual values of a and b. Hence, when we print the values of a and b in the main() function, the values are changed.","title":"Example 2: Passing by reference using pointers"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-memory-management-new-and-delete","text":"In this tutorial, we will learn to manage memory effectively in C++ using new and delete operations with the help of examples. C++ allows us to allocate the memory of a variable or an array in run time. This is known as dynamic memory allocation. In other programming languages such as Java and Python, the compiler automatically manages the memories allocated to variables. But this is not the case in C++. In C++, we need to deallocate the dynamically allocated memory manually after we have no use for the variable. We can allocate and then deallocate memory dynamically using the new and delete operators respectively.","title":"C++ Memory Management: new and delete"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-new-operator","text":"The new operator allocates memory to a variable. For example, // declare an int pointer int * pointVar ; // dynamically allocate memory // using the new keyword pointVar = new int ; // assign value to allocated memory * pointVar = 45 ; Here, we have dynamically allocated memory for an int variable using the new operator. Notice that we have used the pointer pointVar to allocate the memory dynamically. This is because the new operator returns the address of the memory location. In the case of an array, the new operator returns the address of the first element of the array. From the example above, we can see that the syntax for using the new operator is pointerVariable = new dataType ;","title":"C++ new Operator"},{"location":"week-6-cpp/ce103-week-6-cpp/#delete-operator","text":"Once we no longer need to use a variable that we have declared dynamically, we can deallocate the memory occupied by the variable. For this, the delete operator is used. It returns the memory to the operating system. This is known as memory deallocation . The syntax for this operator is delete pointerVariable ; Consider the code: // declare an int pointer int * pointVar ; // dynamically allocate memory // for an int variable pointVar = new int ; // assign value to the variable memory * pointVar = 45 ; // print the value stored in memory cout << * pointVar ; // Output: 45 // deallocate the memory delete pointVar ; Here, we have dynamically allocated memory for an int variable using the pointer pointVar. After printing the contents of pointVar, we deallocated the memory using delete . Note : If the program uses a large amount of unwanted memory using new , the system may crash because there will be no memory available for the operating system. In this case, the delete operator can help the system from crash.","title":"delete Operator"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-1-c-dynamic-memory-allocation","text":"#include <iostream> using namespace std ; int main () { // declare an int pointer int * pointInt ; // declare a float pointer float * pointFloat ; // dynamically allocate memory pointInt = new int ; pointFloat = new float ; // assigning value to the memory * pointInt = 45 ; * pointFloat = 45.45f ; cout << * pointInt << endl ; cout << * pointFloat << endl ; // deallocate the memory delete pointInt ; delete pointFloat ; return 0 ; } Run Code Output 45 45 .45 In this program, we dynamically allocated memory to two variables of int and float types. After assigning values to them and printing them, we finally deallocate the memories using the code delete pointInt ; delete pointFloat ; Note: Dynamic memory allocation can make memory management more efficient. Especially for arrays, where a lot of the times we don't know the size of the array until the run time.","title":"Example 1: C++ Dynamic Memory Allocation"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-2-c-new-and-delete-operator-for-arrays","text":"// C++ Program to store GPA of n number of students and display it // where n is the number of students entered by the user #include <iostream> using namespace std ; int main () { int num ; cout << \"Enter total number of students: \" ; cin >> num ; float * ptr ; // memory allocation of num number of floats ptr = new float [ num ]; cout << \"Enter GPA of students.\" << endl ; for ( int i = 0 ; i < num ; ++ i ) { cout << \"Student\" << i + 1 << \": \" ; cin >> * ( ptr + i ); } cout << \" \\n Displaying GPA of students.\" << endl ; for ( int i = 0 ; i < num ; ++ i ) { cout << \"Student\" << i + 1 << \": \" << * ( ptr + i ) << endl ; } // ptr memory is released delete [] ptr ; return 0 ; } Run Code Output Enter total number of students: 4 Enter GPA of students. Student1: 3 .6 Student2: 3 .1 Student3: 3 .9 Student4: 2 .9 Displaying GPA of students. Student1: 3 .6 Student2: 3 .1 Student3: 3 .9 Student4: 2 .9 In this program, we have asked the user to enter the number of students and store it in the num variable. Then, we have allocated the memory dynamically for the float array using new. We enter data into the array (and later print them) using pointer notation. After we no longer need the array, we deallocate the array memory using the code delete[] ptr; . Notice the use of [] after delete . We use the square brackets [] in order to denote that the memory deallocation is that of an array.","title":"Example 2: C++ new and delete Operator for Arrays"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-3-c-new-and-delete-operator-for-objects","text":"#include <iostream> using namespace std ; class Student { private : int age ; public : // constructor initializes age to 12 Student () : age ( 12 ) {} void getAge () { cout << \"Age = \" << age << endl ; } }; int main () { // dynamically declare Student object Student * ptr = new Student (); // call getAge() function ptr -> getAge (); // ptr memory is released delete ptr ; return 0 ; } Run Code Output Age = 12 In this program, we have created a Student class that has a private variable age. We have initialized age to 12 in the default constructor Student() and print its value with the function getAge() . In main() , we have created a Student object using the new operator and use the pointer ptr to point to its address. The moment the object is created, the Student() constructor initializes age to 12 . We then call the getAge() function using the code: ptr -> getAge (); Notice the arrow operator -> . This operator is used to access class members using pointers.","title":"Example 3: C++ new and delete Operator for Objects"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-inheritance","text":"In this tutorial, we will learn about inheritance in C++ with the help of examples. Inheritance is one of the key features of Object-oriented programming in C++. It allows us to create a new class (derived class) from an existing class (base class). The derived class inherits the features from the base class and can have additional features of its own. For example, class Animal { // eat() function // sleep() function }; class Dog : public Animal { // bark() function }; Here, the Dog class is derived from the Animal class. Since Dog is derived from Animal , members of Animal are accessible to Dog . Inheritance in C++ Notice the use of the keyword public while inheriting Dog from Animal. class Dog : public Animal {...}; We can also use the keywords private and protected instead of public . We will learn about the differences between using private , public and protected later in this tutorial.","title":"C++ Inheritance"},{"location":"week-6-cpp/ce103-week-6-cpp/#is-a-relationship","text":"Inheritance is an is-a relationship . We use inheritance only if an is-a relationship is present between the two classes. Here are some examples: A car is a vehicle. Orange is a fruit. A surgeon is a doctor. A dog is an animal.","title":"is-a relationship"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-1-simple-example-of-c-inheritance","text":"// C++ program to demonstrate inheritance #include <iostream> using namespace std ; // base class class Animal { public : void eat () { cout << \"I can eat!\" << endl ; } void sleep () { cout << \"I can sleep!\" << endl ; } }; // derived class class Dog : public Animal { public : void bark () { cout << \"I can bark! Woof woof!!\" << endl ; } }; int main () { // Create object of the Dog class Dog dog1 ; // Calling members of the base class dog1 . eat (); dog1 . sleep (); // Calling member of the derived class dog1 . bark (); return 0 ; } Run Code Output I can eat! I can sleep! I can bark! Woof woof!! Here, dog1 (the object of derived class Dog ) can access members of the base class Animal . It's because Dog is inherited from Animal . // Calling members of the Animal class dog1 . eat (); dog1 . sleep ();","title":"Example 1: Simple Example of C++ Inheritance"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-protected-members","text":"The access modifier protected is especially relevant when it comes to C++ inheritance. Like private members, protected members are inaccessible outside of the class. However, they can be accessed by derived classes and friend classes/functions . We need protected members if we want to hide the data of a class, but still want that data to be inherited by its derived classes. To learn more about protected, refer to our C++ Access Modifiers tutorial.","title":"C++ protected Members"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-2-c-protected-members","text":"// C++ program to demonstrate protected members #include <iostream> #include <string> using namespace std ; // base class class Animal { private : string color ; protected : string type ; public : void eat () { cout << \"I can eat!\" << endl ; } void sleep () { cout << \"I can sleep!\" << endl ; } void setColor ( string clr ) { color = clr ; } string getColor () { return color ; } }; // derived class class Dog : public Animal { public : void setType ( string tp ) { type = tp ; } void displayInfo ( string c ) { cout << \"I am a \" << type << endl ; cout << \"My color is \" << c << endl ; } void bark () { cout << \"I can bark! Woof woof!!\" << endl ; } }; int main () { // Create object of the Dog class Dog dog1 ; // Calling members of the base class dog1 . eat (); dog1 . sleep (); dog1 . setColor ( \"black\" ); // Calling member of the derived class dog1 . bark (); dog1 . setType ( \"mammal\" ); // Using getColor() of dog1 as argument // getColor() returns string data dog1 . displayInfo ( dog1 . getColor ()); return 0 ; } Run Code Output I can eat! I can sleep! I can bark! Woof woof!! I am a mammal My color is black Here, the variable type is protected and is thus accessible from the derived class Dog . We can see this as we have initialized type in the Dog class using the function setType() . On the other hand, the private variable color cannot be initialized in Dog . class Dog : public Animal { public : void setColor ( string clr ) { // Error: member \"Animal::color\" is inaccessible color = clr ; } }; Also, since the protected keyword hides data, we cannot access type directly from an object of Dog or Animal class. // Error: member \"Animal::type\" is inaccessible dog1 . type = \"mammal\" ;","title":"Example 2 : C++ protected Members"},{"location":"week-6-cpp/ce103-week-6-cpp/#access-modes-in-c-inheritance","text":"In our previous tutorials, we have learned about C++ access specifiers such as public, private, and protected . So far, we have used the public keyword in order to inherit a class from a previously-existing base class. However, we can also use the private and protected keywords to inherit classes. For example, class Animal { // code }; class Dog : private Animal { // code }; class Cat : protected Animal { // code }; The various ways we can derive classes are known as access modes . These access modes have the following effect: public: If a derived class is declared in public mode, then the members of the base class are inherited by the derived class just as they are. private: In this case, all the members of the base class become private members in the derived class. protected: The public members of the base class become protected members in the derived class. The private members of the base class are always private in the derived class. To learn more, visit our C++ public, private, protected inheritance tutorial.","title":"Access Modes in C++ Inheritance"},{"location":"week-6-cpp/ce103-week-6-cpp/#member-function-overriding-in-inheritance","text":"Suppose, base class and derived class have member functions with the same name and arguments. If we create an object of the derived class and try to access that member function, the member function in the derived class is invoked instead of the one in the base class. The member function of derived class overrides the member function of base class. Learn more about Function overriding in C++ .","title":"Member Function Overriding in Inheritance"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-public-protected-and-private-inheritance","text":"In this tutorial, we will learn to use public, protected and private inheritance in C++ with the help of examples. In C++ inheritance , we can derive a child class from the base class in different access modes. For example, class Base { .... ... .... }; class Derived : public Base { .... ... .... }; Notice the keyword public in the code class Derived : public Base This means that we have created a derived class from the base class in public mode . Alternatively, we can also derive classes in protected or private modes. These 3 keywords ( public , protected , and private ) are known as access specifiers in C++ inheritance.","title":"C++ Public, Protected and Private Inheritance"},{"location":"week-6-cpp/ce103-week-6-cpp/#public-protected-and-private-inheritance-in-c","text":"public , protected, and private inheritance have the following features: public inheritance makes public members of the base class public in the derived class, and the protected members of the base class remain protected in the derived class. protected inheritance makes the public and protected members of the base class protected in the derived class. private inheritance makes the public and protected members of the base class private in the derived class. Note: private members of the base class are inaccessible to the derived class. class Base { public : int x ; protected : int y ; private : int z ; }; class PublicDerived : public Base { // x is public // y is protected // z is not accessible from PublicDerived }; class ProtectedDerived : protected Base { // x is protected // y is protected // z is not accessible from ProtectedDerived }; class PrivateDerived : private Base { // x is private // y is private // z is not accessible from PrivateDerived };","title":"public, protected and private inheritance in C++"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-1-c-public-inheritance","text":"// C++ program to demonstrate the working of public inheritance #include <iostream> using namespace std ; class Base { private : int pvt = 1 ; protected : int prot = 2 ; public : int pub = 3 ; // function to access private member int getPVT () { return pvt ; } }; class PublicDerived : public Base { public : // function to access protected member from Base int getProt () { return prot ; } }; int main () { PublicDerived object1 ; cout << \"Private = \" << object1 . getPVT () << endl ; cout << \"Protected = \" << object1 . getProt () << endl ; cout << \"Public = \" << object1 . pub << endl ; return 0 ; } Run Code Output Private = 1 Protected = 2 Public = 3 Here, we have derived PublicDerived from Base in public mode . As a result, in PublicDerived : prot is inherited as protected . pub and getPVT() are inherited as public . pvt is inaccessible since it is private in Base . Since private and protected members are not accessible from main() , we need to create public functions getPVT() and getProt() to access them: // Error: member \"Base::pvt\" is inaccessible cout << \"Private = \" << object1 . pvt ; // Error: member \"Base::prot\" is inaccessible cout << \"Protected = \" << object1 . prot ; Notice that the getPVT() function has been defined inside Base . But the getProt() function has been defined inside PublicDerived . This is because pvt, which is private in Base , is inaccessible to PublicDerived . However, prot is accessible to PublicDerived due to public inheritance. So, getProt() can access the protected variable from within PublicDerived .","title":"Example 1: C++ public Inheritance"},{"location":"week-6-cpp/ce103-week-6-cpp/#accessibility-in-public-inheritance","text":"Accessibility private members protected members public members Base Class Yes Yes Yes Derived Class No Yes Yes","title":"Accessibility in public Inheritance"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-2-c-protected-inheritance","text":"// C++ program to demonstrate the working of protected inheritance #include <iostream> using namespace std ; class Base { private : int pvt = 1 ; protected : int prot = 2 ; public : int pub = 3 ; // function to access private member int getPVT () { return pvt ; } }; class ProtectedDerived : protected Base { public : // function to access protected member from Base int getProt () { return prot ; } // function to access public member from Base int getPub () { return pub ; } }; int main () { ProtectedDerived object1 ; cout << \"Private cannot be accessed.\" << endl ; cout << \"Protected = \" << object1 . getProt () << endl ; cout << \"Public = \" << object1 . getPub () << endl ; return 0 ; } Run Code Output Private cannot be accessed. Protected = 2 Public = 3 Here, we have derived ProtectedDerived from Base in protected mode . As a result, in ProtectedDerived : prot, pub and getPVT() are inherited as protected . pvt is inaccessible since it is private in Base . As we know, protected members cannot be directly accessed from outside the class. As a result, we cannot use getPVT() from ProtectedDerived . That is also why we need to create the getPub() function in ProtectedDerived in order to access the pub variable. // Error: member \"Base::getPVT()\" is inaccessible cout << \"Private = \" << object1 . getPVT (); // Error: member \"Base::pub\" is inaccessible cout << \"Public = \" << object1 . pub ;","title":"Example 2: C++ protected Inheritance"},{"location":"week-6-cpp/ce103-week-6-cpp/#accessibility-in-protected-inheritance","text":"Accessibility private members protected members public members Base Class Yes Yes Yes Derived Class No Yes Yes (inherited as protected variables)","title":"Accessibility in protected Inheritance"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-3-c-private-inheritance","text":"// C++ program to demonstrate the working of private inheritance #include <iostream> using namespace std ; class Base { private : int pvt = 1 ; protected : int prot = 2 ; public : int pub = 3 ; // function to access private member int getPVT () { return pvt ; } }; class PrivateDerived : private Base { public : // function to access protected member from Base int getProt () { return prot ; } // function to access private member int getPub () { return pub ; } }; int main () { PrivateDerived object1 ; cout << \"Private cannot be accessed.\" << endl ; cout << \"Protected = \" << object1 . getProt () << endl ; cout << \"Public = \" << object1 . getPub () << endl ; return 0 ; } Run Code Output Private cannot be accessed. Protected = 2 Public = 3 Here, we have derived PrivateDerived from Base in private mode . As a result, in PrivateDerived : prot, pub and getPVT() are inherited as private . pvt is inaccessible since it is private in Base . As we know, private members cannot be directly accessed from outside the class. As a result, we cannot use getPVT() from PrivateDerived . That is also why we need to create the getPub() function in PrivateDerived in order to access the pub variable. // Error: member \"Base::getPVT()\" is inaccessible cout << \"Private = \" << object1 . getPVT (); // Error: member \"Base::pub\" is inaccessible cout << \"Public = \" << object1 . pub ;","title":"Example 3: C++ private Inheritance"},{"location":"week-6-cpp/ce103-week-6-cpp/#accessibility-in-private-inheritance","text":"Accessibility private members protected members public members Base Class Yes Yes Yes Derived Class No Yes (inherited as private variables) Yes (inherited as private variables)","title":"Accessibility in private Inheritance"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-function-overriding","text":"In this tutorial, we will learn about function overriding in C++ with the help of examples. As we know, inheritance is a feature of OOP that allows us to create derived classes from a base class. The derived classes inherit features of the base class. Suppose, the same function is defined in both the derived class and the based class. Now if we call this function using the object of the derived class, the function of the derived class is executed. This is known as function overriding in C++. The function in derived class overrides the function in base class.","title":"C++ Function Overriding"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-1-c-function-overriding","text":"// C++ program to demonstrate function overriding #include <iostream> using namespace std ; class Base { public : void print () { cout << \"Base Function\" << endl ; } }; class Derived : public Base { public : void print () { cout << \"Derived Function\" << endl ; } }; int main () { Derived derived1 ; derived1 . print (); return 0 ; } Output Derived Function Here, the same function print() is defined in both Base and Derived classes. So, when we call print() from the Derived object derived1, the print() from Derived is executed by overriding the function in Base . Working of function overriding in C++ As we can see, the function was overridden because we called the function from an object of the Derived class. Had we called the print() function from an object of the Base class, the function would not have been overridden. // Call function of Base class Base base1 ; base1 . print (); // Output: Base Function","title":"Example 1: C++ Function Overriding"},{"location":"week-6-cpp/ce103-week-6-cpp/#access-overridden-function-in-c","text":"To access the overridden function of the base class, we use the scope resolution operator :: . We can also access the overridden function by using a pointer of the base class to point to an object of the derived class and then calling the function from that pointer.","title":"Access Overridden Function in C++"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-2-c-access-overridden-function-to-the-base-class","text":"// C++ program to access overridden function // in main() using the scope resolution operator :: #include <iostream> using namespace std ; class Base { public : void print () { cout << \"Base Function\" << endl ; } }; class Derived : public Base { public : void print () { cout << \"Derived Function\" << endl ; } }; int main () { Derived derived1 , derived2 ; derived1 . print (); // access print() function of the Base class derived2 . Base :: print (); return 0 ; } Output Derived Function Base Function Here, this statement derived2 . Base :: print (); accesses the print() function of the Base class. Access overridden function using object of derived class in C++","title":"Example 2: C++ Access Overridden Function to the Base Class"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-3-c-call-overridden-function-from-derived-class","text":"// C++ program to call the overridden function // from a member function of the derived class #include <iostream> using namespace std ; class Base { public : void print () { cout << \"Base Function\" << endl ; } }; class Derived : public Base { public : void print () { cout << \"Derived Function\" << endl ; // call overridden function Base :: print (); } }; int main () { Derived derived1 ; derived1 . print (); return 0 ; } Output Derived Function Base Function In this program, we have called the overridden function inside the Derived class itself. class Derived : public Base { public : void print () { cout << \"Derived Function\" << endl ; Base :: print (); } }; Notice the code Base::print(); , which calls the overridden function inside the Derived class. Access overridden function inside derived class in C++","title":"Example 3: C++ Call Overridden Function From Derived Class"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-4-c-call-overridden-function-using-pointer","text":"// C++ program to access overridden function using pointer // of Base type that points to an object of Derived class #include <iostream> using namespace std ; class Base { public : void print () { cout << \"Base Function\" << endl ; } }; class Derived : public Base { public : void print () { cout << \"Derived Function\" << endl ; } }; int main () { Derived derived1 ; // pointer of Base type that points to derived1 Base * ptr = & derived1 ; // call function of Base class using ptr ptr -> print (); return 0 ; } Output Base Function In this program, we have created a pointer of Base type named ptr. This pointer points to the Derived object derived1. // pointer of Base type that points to derived1 Base * ptr = & derived1 ; When we call the print() function using ptr, it calls the overridden function from Base . // call function of Base class using ptr ptr -> print (); This is because even though ptr points to a Derived object, it is actually of Base type. So, it calls the member function of Base . In order to override the Base function instead of accessing it, we need to use virtual functions in the Base class.","title":"Example 4: C++ Call Overridden Function Using Pointer"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-multiple-multilevel-and-hierarchical-inheritance","text":"In this tutorial, we will learn about different models of inheritance in C++ programming: Multiple, Multilevel and Hierarchical inheritance with examples. Inheritance is one of the core feature of an object-oriented programming language. It allows software developers to derive a new class from the existing class. The derived class inherits the features of the base class (existing class). There are various models of inheritance in C++ programming.","title":"C++ Multiple, Multilevel and Hierarchical Inheritance"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-multilevel-inheritance","text":"In C++ programming, not only you can derive a class from the base class but you can also derive a class from the derived class. This form of inheritance is known as multilevel inheritance. class A { ... .. ... }; class B : public A { ... .. ... }; class C : public B { ... ... ... }; Here, class B is derived from the base class A and the class C is derived from the derived class B.","title":"C++ Multilevel Inheritance"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-1-c-multilevel-inheritance","text":"#include <iostream> using namespace std ; class A { public : void display () { cout << \"Base class content.\" ; } }; class B : public A {}; class C : public B {}; int main () { C obj ; obj . display (); return 0 ; } Output Base class content. In this program, class C is derived from class B (which is derived from base class A). The obj object of class C is defined in the main() function. When the display() function is called, display() in class A is executed. It's because there is no display() function in class C and class B. The compiler first looks for the display() function in class C. Since the function doesn't exist there, it looks for the function in class B (as C is derived from B). The function also doesn't exist in class B, so the compiler looks for it in class A (as B is derived from A). If display() function exists in C, the compiler overrides display() of class A (because of member function overriding ).","title":"Example 1: C++ Multilevel Inheritance"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-multiple-inheritance","text":"In C++ programming, a class can be derived from more than one parent. For example, A class Bat is derived from base classes Mammal and WingedAnimal. It makes sense because bat is a mammal as well as a winged animal. Multiple Inheritance","title":"C++ Multiple Inheritance"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-2-multiple-inheritance-in-c-programming","text":"#include <iostream> using namespace std ; class Mammal { public : Mammal () { cout << \"Mammals can give direct birth.\" << endl ; } }; class WingedAnimal { public : WingedAnimal () { cout << \"Winged animal can flap.\" << endl ; } }; class Bat : public Mammal , public WingedAnimal {}; int main () { Bat b1 ; return 0 ; } Output Mammals can give direct birth. Winged animal can flap.","title":"Example 2: Multiple Inheritance in C++ Programming"},{"location":"week-6-cpp/ce103-week-6-cpp/#ambiguity-in-multiple-inheritance","text":"The most obvious problem with multiple inheritance occurs during function overriding. Suppose, two base classes have a same function which is not overridden in derived class. If you try to call the function using the object of the derived class, compiler shows error. It's because compiler doesn't know which function to call. For example, class base1 { public : void someFunction ( ) {....} }; class base2 { void someFunction ( ) {....} }; class derived : public base1 , public base2 {}; int main () { derived obj ; obj . someFunction () // Error! } This problem can be solved using the scope resolution function to specify which function to class either base1or base2 int main () { obj . base1 :: someFunction ( ); // Function of base1 class is called obj . base2 :: someFunction (); // Function of base2 class is called. }","title":"Ambiguity in Multiple Inheritance"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-hierarchical-inheritance","text":"If more than one class is inherited from the base class, it's known as hierarchical inheritance . In hierarchical inheritance, all features that are common in child classes are included in the base class. For example, Physics, Chemistry, Biology are derived from Science class. Similarly, Dog, Cat, Horse are derived from Animal class.","title":"C++ Hierarchical Inheritance"},{"location":"week-6-cpp/ce103-week-6-cpp/#syntax-of-hierarchical-inheritance","text":"class base_class { ... .. ... } class first_derived_class : public base_class { ... .. ... } class second_derived_class : public base_class { ... .. ... } class third_derived_class : public base_class { ... .. ... }","title":"Syntax of Hierarchical Inheritance"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-3-hierarchical-inheritance-in-c-programming","text":"// C++ program to demonstrate hierarchical inheritance #include <iostream> using namespace std ; // base class class Animal { public : void info () { cout << \"I am an animal.\" << endl ; } }; // derived class 1 class Dog : public Animal { public : void bark () { cout << \"I am a Dog. Woof woof.\" << endl ; } }; // derived class 2 class Cat : public Animal { public : void meow () { cout << \"I am a Cat. Meow.\" << endl ; } }; int main () { // Create object of Dog class Dog dog1 ; cout << \"Dog Class:\" << endl ; dog1 . info (); // Parent Class function dog1 . bark (); // Create object of Cat class Cat cat1 ; cout << \" \\n Cat Class:\" << endl ; cat1 . info (); // Parent Class function cat1 . meow (); return 0 ; } Run Code Output Dog Class: I am an animal. I am a Dog. Woof woof. Cat Class: I am an animal. I am a Cat. Meow. Here, both the Dog and Cat classes are derived from the Animal class. As such, both the derived classes can access the info() function belonging to the Animal class.","title":"Example 3: Hierarchical Inheritance in C++ Programming"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-friend-function-and-friend-classes","text":"In this tutorial, we will learn to create friend functions and friend classes in C++ with the help of examples. Data hiding is a fundamental concept of object-oriented programming. It restricts the access of private members from outside of the class. Similarly, protected members can only be accessed by derived classes and are inaccessible from outside. For example, class MyClass { private : int member1 ; } int main () { MyClass obj ; // Error! Cannot access private members from here. obj . member1 = 5 ; } However, there is a feature in C++ called friend functions that break this rule and allow us to access member functions from outside the class. Similarly, there is a friend class as well, which we will learn later in this tutorial.","title":"C++ friend Function and friend Classes"},{"location":"week-6-cpp/ce103-week-6-cpp/#friend-function-in-c","text":"A friend function can access the private and protected data of a class. We declare a friend function using the friend keyword inside the body of the class. class className { ... .. ... friend returnType functionName ( arguments ); ... .. ... }","title":"friend Function in C++"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-1-working-of-friend-function","text":"// C++ program to demonstrate the working of friend function #include <iostream> using namespace std ; class Distance { private : int meter ; // friend function friend int addFive ( Distance ); public : Distance () : meter ( 0 ) {} }; // friend function definition int addFive ( Distance d ) { //accessing private members from the friend function d . meter += 5 ; return d . meter ; } int main () { Distance D ; cout << \"Distance: \" << addFive ( D ); return 0 ; } Run Code Output Distance: 5 Here, addFive() is a friend function that can access both private and public data members. Though this example gives us an idea about the concept of a friend function, it doesn't show any meaningful use. A more meaningful use would be operating on objects of two different classes. That's when the friend function can be very helpful.","title":"Example 1: Working of friend Function"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-2-add-members-of-two-different-classes","text":"// Add members of two different classes using friend functions #include <iostream> using namespace std ; // forward declaration class ClassB ; class ClassA { public : // constructor to initialize numA to 12 ClassA () : numA ( 12 ) {} private : int numA ; // friend function declaration friend int add ( ClassA , ClassB ); }; class ClassB { public : // constructor to initialize numB to 1 ClassB () : numB ( 1 ) {} private : int numB ; // friend function declaration friend int add ( ClassA , ClassB ); }; // access members of both classes int add ( ClassA objectA , ClassB objectB ) { return ( objectA . numA + objectB . numB ); } int main () { ClassA objectA ; ClassB objectB ; cout << \"Sum: \" << add ( objectA , objectB ); return 0 ; } Run Code Output Sum: 13 In this program, ClassA and ClassB have declared add() as a friend function. Thus, this function can access private data of both classes. One thing to notice here is the friend function inside ClassA is using the ClassB . However, we haven't defined ClassB at this point. // inside classA friend int add ( ClassA , ClassB ); For this to work, we need a forward declaration of ClassB in our program. // forward declaration class ClassB ;","title":"Example 2: Add Members of Two Different Classes"},{"location":"week-6-cpp/ce103-week-6-cpp/#friend-class-in-c","text":"We can also use a friend Class in C++ using the friend keyword. For example, class ClassB ; class ClassA { // ClassB is a friend class of ClassA friend class ClassB ; ... .. ... } class ClassB { ... .. ... } When a class is declared a friend class, all the member functions of the friend class become friend functions. Since ClassB is a friend class, we can access all members of ClassA from inside ClassB . However, we cannot access members of ClassB from inside ClassA . It is because friend relation in C++ is only granted, not taken.","title":"friend Class in C++"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-3-c-friend-class","text":"// C++ program to demonstrate the working of friend class #include <iostream> using namespace std ; // forward declaration class ClassB ; class ClassA { private : int numA ; // friend class declaration friend class ClassB ; public : // constructor to initialize numA to 12 ClassA () : numA ( 12 ) {} }; class ClassB { private : int numB ; public : // constructor to initialize numB to 1 ClassB () : numB ( 1 ) {} // member function to add numA // from ClassA and numB from ClassB int add () { ClassA objectA ; return objectA . numA + numB ; } }; int main () { ClassB objectB ; cout << \"Sum: \" << objectB . add (); return 0 ; } Run Code Output Sum: 13 Here, ClassB is a friend class of ClassA . So, ClassB has access to the members of classA . In ClassB , we have created a function add() that returns the sum of numA and numB. Since ClassB is a friend class, we can create objects of ClassA inside of ClassB .","title":"Example 3: C++ friend Class"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-virtual-functions","text":"In this tutorial, we will learn about C++ virtual function and its use with the help of examples. A virtual function is a member function in the base class that we expect to redefine in derived classes. Basically, a virtual function is used in the base class in order to ensure that the function is overridden . This especially applies to cases where a pointer of base class points to an object of a derived class. For example, consider the code below: class Base { public : void print () { // code } }; class Derived : public Base { public : void print () { // code } }; Later, if we create a pointer of Base type to point to an object of Derived class and call the print() function, it calls the print() function of the Base class. In other words, the member function of Base is not overridden. int main () { Derived derived1 ; Base * base1 = & derived1 ; // calls function of Base class base1 -> print (); return 0 ; } In order to avoid this, we declare the print() function of the Base class as virtual by using the virtual keyword. class Base { public : virtual void print () { // code } }; Virtual functions are an integral part of polymorphism in C++. To learn more, check our tutorial on C++ Polymorphism .","title":"C++ Virtual Functions"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-1-c-virtual-function","text":"#include <iostream> using namespace std ; class Base { public : virtual void print () { cout << \"Base Function\" << endl ; } }; class Derived : public Base { public : void print () { cout << \"Derived Function\" << endl ; } }; int main () { Derived derived1 ; // pointer of Base type that points to derived1 Base * base1 = & derived1 ; // calls member function of Derived class base1 -> print (); return 0 ; } Run Code Output Derived Function Here, we have declared the print() function of Base as virtual . So, this function is overridden even when we use a pointer of Base type that points to the Derived object derived1. Working of virtual functions in C++","title":"Example 1: C++ virtual Function"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-override-identifier","text":"C++ 11 has given us a new identifier override that is very useful to avoid bugs while using virtual functions. This identifier specifies the member functions of the derived classes that override the member function of the base class. For example, class Base { public : virtual void print () { // code } }; class Derived : public Base { public : void print () override { // code } }; If we use a function prototype in Derived class and define that function outside of the class, then we use the following code: class Derived : public Base { public : // function prototype void print () override ; }; // function definition void Derived::print () { // code }","title":"C++ override Identifier"},{"location":"week-6-cpp/ce103-week-6-cpp/#use-of-c-override","text":"When using virtual functions, it is possible to make mistakes while declaring the member functions of the derived classes. Using the override identifier prompts the compiler to display error messages when these mistakes are made. Otherwise, the program will simply compile but the virtual function will not be overridden. Some of these possible mistakes are: Functions with incorrect names: For example, if the virtual function in the base class is named print() , but we accidentally name the overriding function in the derived class as pint() . Functions with different return types: If the virtual function is, say, of void type but the function in the derived class is of int type. Functions with different parameters: If the parameters of the virtual function and the functions in the derived classes don't match. No virtual function is declared in the base class.","title":"Use of C++ override"},{"location":"week-6-cpp/ce103-week-6-cpp/#use-of-c-virtual-functions","text":"Suppose we have a base class Animal and derived classes Dog and Cat . Suppose each class has a data member named type. Suppose these variables are initialized through their respective constructors. class Animal { private : string type ; ... .. ... public : Animal () : type ( \"Animal\" ) {} ... .. ... }; class Dog : public Animal { private : string type ; ... .. ... public : Animal () : type ( \"Dog\" ) {} ... .. ... }; class Cat : public Animal { private : string type ; ... .. ... public : Animal () : type ( \"Cat\" ) {} ... .. ... }; Now, let us suppose that our program requires us to create two public functions for each class: getType() to return the value of type print() to print the value of type We could create both these functions in each class separately and override them, which will be long and tedious. Or we could make getType() virtual in the Animal class, then create a single, separate print() function that accepts a pointer of Animal type as its argument. We can then use this single function to override the virtual function. class Animal { ... .. ... public : ... .. ... virtual string getType {...} }; ... .. ... ... .. ... void print ( Animal * ani ) { cout << \"Animal: \" << ani -> getType () << endl ; } This will make the code shorter , cleaner , and less repetitive .","title":"Use of C++ Virtual Functions"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-2-c-virtual-function-demonstration","text":"// C++ program to demonstrate the use of virtual function #include <iostream> #include <string> using namespace std ; class Animal { private : string type ; public : // constructor to initialize type Animal () : type ( \"Animal\" ) {} // declare virtual function virtual string getType () { return type ; } }; class Dog : public Animal { private : string type ; public : // constructor to initialize type Dog () : type ( \"Dog\" ) {} string getType () override { return type ; } }; class Cat : public Animal { private : string type ; public : // constructor to initialize type Cat () : type ( \"Cat\" ) {} string getType () override { return type ; } }; void print ( Animal * ani ) { cout << \"Animal: \" << ani -> getType () << endl ; } int main () { Animal * animal1 = new Animal (); Animal * dog1 = new Dog (); Animal * cat1 = new Cat (); print ( animal1 ); print ( dog1 ); print ( cat1 ); return 0 ; } Run Code Output Animal: Animal Animal: Dog Animal: Cat Here, we have used the virtual function getType() and an Animal pointer ani in order to avoid repeating the print() function in every class. void print ( Animal * ani ) { cout << \"Animal: \" << ani -> getType () << endl ; } In main() , we have created 3 Animal pointers to dynamically create objects of Animal , Dog and Cat classes. // dynamically create objects using Animal pointers Animal * animal1 = new Animal (); Animal * dog1 = new Dog (); Animal * cat1 = new Cat (); We then call the print() function using these pointers: When print(animal1) is called, the pointer points to an Animal object. So, the virtual function in Animal class is executed inside of print() . When print(dog1) is called, the pointer points to a Dog object. So, the virtual function is overridden and the function of Dog is executed inside of print() . When print(cat1) is called, the pointer points to a Cat object. So, the virtual function is overridden and the function of Cat is executed inside of print() .","title":"Example 2: C++ virtual Function Demonstration"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-class-templates","text":"In this tutorial, we will learn about class templates in C++ with the help of examples. Templates are powerful features of C++ which allows us to write generic programs. There are two ways we can implement templates: Function Templates Class Templates Similar to function templates, we can use class templates to create a single class to work with different data types. Class templates come in handy as they can make our code shorter and more manageable.","title":"C++ Class Templates"},{"location":"week-6-cpp/ce103-week-6-cpp/#class-template-declaration","text":"A class template starts with the keyword template followed by template parameter(s) inside <> which is followed by the class declaration. template < class T > class className { private : T var ; ... .. ... public : T functionName ( T arg ); ... .. ... }; In the above declaration, T is the template argument which is a placeholder for the data type used, and class is a keyword. Inside the class body, a member variable var and a member function functionName() are both of type T .","title":"Class Template Declaration"},{"location":"week-6-cpp/ce103-week-6-cpp/#creating-a-class-template-object","text":"Once we've declared and defined a class template, we can create its objects in other classes or functions (such as the main() function) with the following syntax className < dataType > classObject ; For example, className < int > classObject ; className < float > classObject ; className < string > classObject ;","title":"Creating a Class Template Object"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-1-c-class-templates","text":"// C++ program to demonstrate the use of class templates #include <iostream> using namespace std ; // Class template template < class T > class Number { private : // Variable of type T T num ; public : Number ( T n ) : num ( n ) {} // constructor T getNum () { return num ; } }; int main () { // create object with int type Number < int > numberInt ( 7 ); // create object with double type Number < double > numberDouble ( 7.7 ); cout << \"int Number = \" << numberInt . getNum () << endl ; cout << \"double Number = \" << numberDouble . getNum () << endl ; return 0 ; } Run Code Output int Number = 7 double Number = 7 .7 In this program. we have created a class template Number with the code template < class T > class Number { private : T num ; public : Number ( T n ) : num ( n ) {} T getNum () { return num ; } }; Notice that the variable num, the constructor argument n, and the function getNum() are of type T , or have a return type T . That means that they can be of any type. In main() , we have implemented the class template by creating its objects Number < int > numberInt ( 7 ); Number < double > numberDouble ( 7.7 ); Notice the codes Number<int> and Number<double> in the code above. This creates a class definition each for int and float , which are then used accordingly. It is compulsory to specify the type when declaring objects of class templates. Otherwise, the compiler will produce an error. //Error Number numberInt ( 7 ); Number numberDouble ( 7.7 );","title":"Example 1: C++ Class Templates"},{"location":"week-6-cpp/ce103-week-6-cpp/#defining-a-class-member-outside-the-class-template","text":"Suppose we need to define a function outside of the class template. We can do this with the following code: template < class T > class ClassName { ... .. ... // Function prototype returnType functionName (); }; // Function definition template < class T > returnType ClassName < T >:: functionName () { // code } Notice that the code template <class T> is repeated while defining the function outside of the class. This is necessary and is part of the syntax. If we look at the code in Example 1 , we have a function getNum() that is defined inside the class template Number . We can define getNum() outside of Number with the following code: template < class T > class Number { ... .. ... // Function prototype T getnum (); }; // Function definition template < class T > T Number < T >:: getNum () { return num ; }","title":"Defining a Class Member Outside the Class Template"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-2-simple-calculator-using-class-templates","text":"This program uses a class template to perform addition, subtraction, multiplication and division of two variables num1 and num2. The variables can be of any type, though we have only used int and float types in this example. #include <iostream> using namespace std ; template < class T > class Calculator { private : T num1 , num2 ; public : Calculator ( T n1 , T n2 ) { num1 = n1 ; num2 = n2 ; } void displayResult () { cout << \"Numbers: \" << num1 << \" and \" << num2 << \".\" << endl ; cout << num1 << \" + \" << num2 << \" = \" << add () << endl ; cout << num1 << \" - \" << num2 << \" = \" << subtract () << endl ; cout << num1 << \" * \" << num2 << \" = \" << multiply () << endl ; cout << num1 << \" / \" << num2 << \" = \" << divide () << endl ; } T add () { return num1 + num2 ; } T subtract () { return num1 - num2 ; } T multiply () { return num1 * num2 ; } T divide () { return num1 / num2 ; } }; int main () { Calculator < int > intCalc ( 2 , 1 ); Calculator < float > floatCalc ( 2.4 , 1.2 ); cout << \"Int results:\" << endl ; intCalc . displayResult (); cout << endl << \"Float results:\" << endl ; floatCalc . displayResult (); return 0 ; } Run Code Output Int results: Numbers: 2 and 1 . 2 + 1 = 3 2 - 1 = 1 2 * 1 = 2 2 / 1 = 2 Float results: Numbers: 2 .4 and 1 .2. 2 .4 + 1 .2 = 3 .6 2 .4 - 1 .2 = 1 .2 2 .4 * 1 .2 = 2 .88 2 .4 / 1 .2 = 2 In the above program, we have declared a class template Calculator . The class contains two private members of type T : num1 & num2, and a constructor to initialize the members. We also have add() , subtract() , multiply() , and divide() functions that have the return type T . We also have a void function displayResult() that prints out the results of the other functions. In main() , we have created two objects of Calculator : one for int data type and another for float data type. Calculator < int > intCalc ( 2 , 1 ); Calculator < float > floatCalc ( 2.4 , 1.2 ); This prompts the compiler to create two class definitions for the respective data types during compilation.","title":"Example 2: Simple Calculator Using Class Templates"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-class-templates-with-multiple-parameters","text":"In C++, we can use multiple template parameters and even use default arguments for those parameters. For example, template < class T , class U , class V = int > class ClassName { private : T member1 ; U member2 ; V member3 ; ... .. ... public : ... .. ... };","title":"C++ Class Templates With Multiple Parameters"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-3-c-templates-with-multiple-parameters","text":"#include <iostream> using namespace std ; // Class template with multiple and default parameters template < class T , class U , class V = char > class ClassTemplate { private : T var1 ; U var2 ; V var3 ; public : ClassTemplate ( T v1 , U v2 , V v3 ) : var1 ( v1 ), var2 ( v2 ), var3 ( v3 ) {} // constructor void printVar () { cout << \"var1 = \" << var1 << endl ; cout << \"var2 = \" << var2 << endl ; cout << \"var3 = \" << var3 << endl ; } }; int main () { // create object with int, double and char types ClassTemplate < int , double > obj1 ( 7 , 7.7 , 'c' ); cout << \"obj1 values: \" << endl ; obj1 . printVar (); // create object with int, double and bool types ClassTemplate < double , char , bool > obj2 ( 8.8 , 'a' , false ); cout << \" \\n obj2 values: \" << endl ; obj2 . printVar (); return 0 ; } Run Code Output obj1 values: var1 = 7 var2 = 7 .7 var3 = c obj2 values: var1 = 8 .8 var2 = a var3 = 0 In this program, we have created a class template, named ClassTemplate , with three parameters, with one of them being a default parameter. template < class T , class U , class V = char > class ClassTemplate { // code }; Notice the code class V = char . This means that V is a default parameter whose default type is char . Inside ClassTemplate , we declare 3 variables var1, var2 and var3, each corresponding to one of the template parameters. class ClassTemplate { private : T var1 ; U var2 ; V var3 ; ... .. ... ... .. ... }; In main() , we create two objects of ClassTemplate with the code // create object with int, double and char types ClassTemplate < int , double > obj1 ( 7 , 7.7 , 'c' ); // create object with double, char and bool types ClassTemplate < double , char , bool > obj2 ( 8 , 8.8 , false ); Here, Object T U V obj1 int double char obj2 double char bool For obj1, T = int , U = double and V = char . For obj2, T = double , U = char and V = bool .","title":"Example 3: C++ Templates With Multiple Parameters"},{"location":"week-6-cpp/ce103-week-6-cpp/#references","text":"Learn C++ Programming Introduction to C++ | C Plus Plus Programming Language Tutorials The C and C++ programming tutorials, hands-on approach with program examples, code samples and tons of output images using Visual C++, C++ Builder, Linux gcc and g++ compilers and IDE","title":"References"},{"location":"week-7-csharp/ce103-week-7-csharp/","text":"section{ font-size: 25px; } CE103 Algorithms and Programming I \u00b6 Week-7 \u00b6 C# Functional Console Programming \u00b6 Download DOC , SLIDE , PPTX section{ font-size: 25px; } C# Functional Console Programming \u00b6 section{ font-size: 25px; } C# Introduction \u00b6 section{ font-size: 25px; } C# Hello World - Your First C# Program \u00b6 In this tutorial, we will learn how to write a simple \"Hello World!\" program in C#. This will get you familiar with the basic syntax and requirements of a C# program. The \u201cHello World!\u201d program is often the first program we see when we dive into a new language. It simply prints Hello World! on the output screen. The purpose of this program is to get us familiar with the basic syntax and requirements of a programming language. section{ font-size: 25px; } \"Hello World!\" in C \u00b6 // Hello World! program namespace HelloWorld { class Hello { static void Main ( string [] args ) { System . Console . WriteLine ( \"Hello World!\" ); } } } When you run the program, the output will be: Hello World! section{ font-size: 25px; } How the \"Hello World!\" program in C# works? \u00b6 Let's break down the program line by line. section{ font-size: 25px; } // Hello World! Program // indicates the beginning of a comment in C#. Comments are not executed by the C# compiler. They are intended for the developers to better understand a piece of code. To learn more about comments in C#, visit C# comments . section{ font-size: 25px; } namespace HelloWorld{...} The namespace keyword is used to define our own namespace. Here we are creating a namespace called HelloWorld . Just think of namespace as a container which consists of classes, methods and other namespaces. To get a detailed overview of namespaces, visit C# Namespaces . section{ font-size: 25px; } class Hello{...} The above statement creates a class named - Hello in C#. Since, C# is an object-oriented programming language, creating a class is mandatory for the program\u2019s execution. section{ font-size: 25px; } static void Main(string[] args){...} Main() is a method of class Hello. The execution of every C# program starts from the Main() method. So it is mandatory for a C# program to have a Main() method. The signature/syntax of the Main() method is: static void Main ( string [] args ) { ... } We\u2019ll learn more about methods in the later chapters. section{ font-size: 25px; } System.Console.WriteLine(\"Hello World!\"); For now, just remember that this is the piece of code that prints Hello World! to the output screen.You\u2019ll learn more about how it works in the later chapters. section{ font-size: 25px; } Alternative Hello World! implementation \u00b6 Here\u2019s an alternative way to write the \u201cHello World!\u201d program. // Hello World! program using System ; namespace HelloWorld { class Hello { static void Main ( string [] args ) { Console . WriteLine ( \"Hello World!\" ); } } } section{ font-size: 25px; } Notice in this case, we\u2019ve written using System; at the start of the program. By using this, we can now replace System . Console . WriteLine ( \"Hello World!\" ); with Console . WriteLine ( \"Hello World!\" ); This is a convenience we\u2019ll be using in our later chapters as well. section{ font-size: 25px; } Things to remember from this article \u00b6 Every C# program must have a class definition. The execution of program begins from the Main() method. Main() method must be inside a class definition. This is just a simple program for introducing C# to a newbie. If you did not understand certain things in this article, that's okay (even I did not when I started). As we move on with this tutorial series, everything will start to make sense. section{ font-size: 25px; } C# Keywords and Identifiers \u00b6 In this tutorial, we will learn about keywords (reserved words) and identifiers in C# programming language. section{ font-size: 25px; } C# Keywords \u00b6 Keywords are predefined sets of reserved words that have special meaning in a program. The meaning of keywords can not be changed, neither can they be directly used as identifiers in a program. section{ font-size: 25px; } For example, long mobileNum ; Here, long is a keyword and mobileNum is a variable (identifier). long has a special meaning in C# i.e. it is used to declare variables of type long and this function cannot be changed. section{ font-size: 25px; } Also, keywords like long , int , char , etc can not be used as identifiers. So, we cannot have something like: long long ; section{ font-size: 25px; } C# has a total of 79 keywords. All these keywords are in lowercase. Here is a complete list of all C# keywords. abstract as base bool break byte case catch char checked class const continue decimal default delegate do double else enum event explicit extern false finally fixed float for foreach goto if implicit in in (generic modifier) int interface internal is lock long namespace new null object operator out out (generic modifier) override params private protected public readonly ref return sbyte sealed short sizeof stackalloc static string struct switch this throw true try typeof uint ulong unchecked unsafe ushort using using static void volatile while section{ font-size: 25px; } Although keywords are reserved words, they can be used as identifiers if @ is added as prefix. For example, int @void ; The above statement will create a variable @void of type int . section{ font-size: 25px; } Contextual Keywords \u00b6 Besides regular keywords, C# has 25 contextual keywords. Contextual keywords have specific meaning in a limited program context and can be used as identifiers outside that context. They are not reserved words in C#. add alias ascending async await descending dynamic from get global group into join let orderby partial (type) partial (method) remove select set value var when (filter condition) where (generic type constraint) yield If you are interested to know the function of every keywords, I suggest you visit C# keywords (official C# docs). section{ font-size: 25px; } C# Identifiers \u00b6 Identifiers are the name given to entities such as variables, methods, classes, etc. They are tokens in a program which uniquely identify an element. For example, int value; Here, value is the name of variable. Hence it is an identifier. Reserved keywords can not be used as identifiers unless @ is added as prefix. For example, int break; This statement will generate an error in compile time. To learn more about variables, visit C# Variables . section{ font-size: 25px; } Rules for Naming an Identifier \u00b6 An identifier can not be a C# keyword. An identifier must begin with a letter, an underscore or @ symbol. The remaining part of identifier can contain letters, digits and underscore symbol. Whitespaces are not allowed. Neither it can have symbols other than letter, digits and underscore. Identifiers are case-sensitive. So, getName, GetName and getname represents 3 different identifiers. section{ font-size: 25px; } Here are some of the valid and invalid identifiers: Identifiers Remarks number Valid calculateMarks Valid hello$ Invalid (Contains $) name1 Valid @if Valid (Keyword with prefix @) if Invalid (C# Keyword) My name Invalid (Contains whitespace) _hello_hi Valid section{ font-size: 25px; } Example: Find list of keywords and identifiers in a program \u00b6 Just to clear the concept, let's find the list of keywords and identifiers in the program we wrote in C# Hello World . using System ; namespace HelloWorld { class Hello { static void Main ( string [] args ) { Console . WriteLine ( \"Hello World!\" ); } } } section{ font-size: 25px; } Keywords Identifiers using System namespace HelloWorld (namespace) class Hello (class) static Main (method) void args string Console WriteLine The \"Hello World!\" inside WriteLine method is a string literal. section{ font-size: 25px; } C# Variables and (Primitive) Data Types \u00b6 In this tutorial, we will learn about variables, how to create variables in C# and different data types that C# programming language supports. A variable is a symbolic name given to a memory location. Variables are used to store data in a computer program. section{ font-size: 25px; } How to declare variables in C#? \u00b6 Here's an example to declare a variable in C#. int age ; In this example, a variable age of type int (integer) is declared and it can only store integer values. section{ font-size: 25px; } We can assign a value to the variable later in our program like such: int age ; ... ... ... age = 24 ; section{ font-size: 25px; } However, the variable can also be initialized to some value during declaration. For example, int age = 24 ; Here, a variable age of type int is declared and initialized to 24 at the same time. section{ font-size: 25px; } Since, it\u2019s a variable, we can change the value of variables as well. For example, int age = 24 ; age = 35 ; Here, the value of age is changed to 35 from 24. section{ font-size: 25px; } Variables in C# must be declared before they can be used. This means, the name and type of variable must be known before they can be assigned a value. This is why C# is called a statically-typed language . Once declared, the datatype of a variable can not be changed within a scope. A scope can be thought as a block of code where the variable is visible or available to use. If you don\u2019t understand the previous statement, don\u2019t worry we\u2019ll learn about scopes in the later chapters. For now remember,we can not do the following in C#: int age ; age = 24 ; ... ... ... float age ; section{ font-size: 25px; } Implicitly typed variables \u00b6 Alternatively in C#, we can declare a variable without knowing its type using var keyword. Such variables are called implicitly typed local variables . Variables declared using var keyword must be initialized at the time of declaration. var value = 5; The compiler determines the type of variable from the value that is assigned to the variable. In the above example, value is of type int . This is equivalent to: int value; value = 5; You can learn more about implicitly typed local variables . section{ font-size: 25px; } Rules for Naming Variables in C \u00b6 There are certain rules we need to follow while naming a variable. The rules for naming a variable in C# are: section{ font-size: 25px; } The variable name can contain letters (uppercase and lowercase), underscore( _ ) and digits only. section{ font-size: 25px; } The variable name must start with either letter, underscore or @ symbol. For example, section{ font-size: 25px; } Rules for naming variables in C# Variable Names Remarks name Valid subject101 Valid _age Valid (Best practice for naming private member variables) @break Valid (Used if name is a reserved keyword) 101subject Invalid (Starts with digit) your_name Valid your name Invalid (Contains whitespace) section{ font-size: 25px; } C# is case sensitive. It means age and Age refers to 2 different variables. section{ font-size: 25px; } A variable name must not be a C# keyword. For example, if , for , using can not be a variable name. We will be discussing more about C# keywords in the next tutorial. section{ font-size: 25px; } Best Practices for Naming a Variable \u00b6 Choose a variable name that make sense. For example, name, age, subject makes more sense than n, a and s. Use camelCase notation (starts with lowercase letter) for naming local variables. For example, numberOfStudents, age, etc. Use PascalCase or CamelCase (starts with uppercase letter) for naming public member variables. For example, FirstName, Price, etc. Use a leading underscore (_) followed by camelCase notation for naming private member variables. For example, _bankBalance, _emailAddress, etc. section{ font-size: 25px; } You can learn more about naming conventions in C# here . Don't worry about public and private member variables. We will learn about them in later chapters. section{ font-size: 25px; } C# Primitive Data Types \u00b6 Variables in C# are broadly classified into two types: Value types and Reference types . In this tutorial we will be discussing about primitive (simple) data types which is a subclass of Value types. Reference types will be covered in later tutorials. However, if you want to know more about variable types, visit C# Types and variables (official C# docs). section{ font-size: 25px; } Boolean (bool) \u00b6 Boolean data type has two possible values: true or false Default value : false Boolean variables are generally used to check conditions such as in if statements , loops , etc. section{ font-size: 25px; } For Example: using System ; namespace DataType { class BooleanExample { public static void Main ( string [] args ) { bool isValid = true ; Console . WriteLine ( isValid ); } } } section{ font-size: 25px; } When we run the program, the output will be: True section{ font-size: 25px; } Signed Integral \u00b6 These data types hold integer values (both positive and negative). Out of the total available bits, one bit is used for sign. 1. sbyte Size : 8 bits Range : -128 to 127. Default value : 0 section{ font-size: 25px; } For example: using System ; namespace DataType { class SByteExample { public static void Main ( string [] args ) { sbyte level = 23 ; Console . WriteLine ( level ); } } } section{ font-size: 25px; } When we run the program, the output will be: 23 Try assigning values out of range i.e. less than -128 or greater than 127 and see what happens. section{ font-size: 25px; } 2. short Size : 16 bits Range : -32,768 to 32,767 Default value : 0 section{ font-size: 25px; } For example: using System ; namespace DataType { class ShortExample { public static void Main ( string [] args ) { short value = - 1109 ; Console . WriteLine ( value ); } } } section{ font-size: 25px; } When we run the program, the output will be: -1109 section{ font-size: 25px; } 3. int Size : 32 bits Range : -231 to 231-1 Default value : 0 section{ font-size: 25px; } For example: using System ; namespace DataType { class IntExample { public static void Main ( string [] args ) { int score = 51092 ; Console . WriteLine ( score ); } } } section{ font-size: 25px; } When we run the program, the output will be: 51092 section{ font-size: 25px; } 4. long Size : 64 bits Range : -263 to 263-1 Default value : 0L [L at the end represent the value is of long type] section{ font-size: 25px; } For example: using System ; namespace DataType { class LongExample { public static void Main ( string [] args ) { long range = - 7091821871L ; Console . WriteLine ( range ); } } } section{ font-size: 25px; } When we run the program, the output will be: - 7091821871 section{ font-size: 25px; } Unsigned Integral \u00b6 These data types only hold values equal to or greater than 0. We generally use these data types to store values when we are sure, we won't have negative values. 1. byte Size : 8 bits Range : 0 to 255. Default value : 0 section{ font-size: 25px; } For example: using System ; namespace DataType { class ByteExample { public static void Main ( string [] args ) { byte age = 62 ; Console . WriteLine ( level ); } } } section{ font-size: 25px; } When we run the program, the output will be: 62 section{ font-size: 25px; } 2. ushort Size : 16 bits Range : 0 to 65,535 Default value : 0 section{ font-size: 25px; } For example: using System ; namespace DataType { class UShortExample { public static void Main ( string [] args ) { ushort value = 42019 ; Console . WriteLine ( value ); } } } When we run the program, the output will be: 42019 section{ font-size: 25px; } 3. uint Size : 32 bits Range : 0 to 232-1 Default value : 0 section{ font-size: 25px; } For example: using System ; namespace DataType { class UIntExample { public static void Main ( string [] args ) { uint totalScore = 1151092 ; Console . WriteLine ( totalScore ); } } } section{ font-size: 25px; } When we run the program, the output will be: 1151092 section{ font-size: 25px; } 4. ulong Size : 64 bits Range : 0 to 264-1 Default value : 0 section{ font-size: 25px; } For example: using System ; namespace DataType { class ULongExample { public static void Main ( string [] args ) { ulong range = 17091821871L ; Console . WriteLine ( range ); } } } section{ font-size: 25px; } When we run the program, the output will be: 17091821871 section{ font-size: 25px; } Floating Point \u00b6 These data types hold floating point values i.e. numbers containing decimal values. For example, 12.36, -92.17, etc. 1. float Single-precision floating point type Size : 32 bits Range : 1.5 \u00d7 10\u221245 to 3.4 \u00d7 1038 Default value : 0.0F [F at the end represent the value is of float type] section{ font-size: 25px; } For example: using System ; namespace DataType { class FloatExample { public static void Main ( string [] args ) { float number = 43.27F ; Console . WriteLine ( number ); } } } section{ font-size: 25px; } When we run the program, the output will be: 43 .27 section{ font-size: 25px; } 2. double Double-precision floating point type. What is the difference between single and double precision floating point? Size : 64 bits Range : 5.0 \u00d7 10\u2212324 to 1.7 \u00d7 10308 Default value : 0.0D [D at the end represent the value is of double type] section{ font-size: 25px; } For example: using System ; namespace DataType { class DoubleExample { public static void Main ( string [] args ) { double value = - 11092.53D ; Console . WriteLine ( value ); } } } section{ font-size: 25px; } When we run the program, the output will be: -11092.53 section{ font-size: 25px; } Character (char) \u00b6 It represents a 16 bit unicode character. Size : 16 bits Default value : '\\0' Range : U+0000 ('\\u0000') to U+FFFF ('\\uffff') section{ font-size: 25px; } For example: using System ; namespace DataType { class CharExample { public static void Main ( string [] args ) { char ch1 = '\\ u0042 ' ; char ch2 = 'x' ; Console . WriteLine ( ch1 ); Console . WriteLine ( ch2 ); } } } section{ font-size: 25px; } When we run the program, the output will be: B x The unicode value of 'B' is '\\u0042' , hence printing ch1 will print 'B' . section{ font-size: 25px; } Decimal \u00b6 Decimal type has more precision and a smaller range as compared to floating point types (double and float). So it is appropriate for monetary calculations. Size : 128 bits Default value : 0.0M [M at the end represent the value is of decimal type] Range : (-7.9 x 1028 to 7.9 x 1028) / (100 to 28) section{ font-size: 25px; } For example: using System ; namespace DataType { class DecimalExample { public static void Main ( string [] args ) { decimal bankBalance = 53005.25 M ; Console . WriteLine ( bankBalance ); } } } section{ font-size: 25px; } When we run the program, the output will be: 53005 .25 The suffix M or m must be added at the end otherwise the value will be treated as a double and an error will be generated. section{ font-size: 25px; } C# Literals \u00b6 Let's look at the following statement: int number = 41 ; Here, int is a data type number is a variable and 41 is a literal Literals are fixed values that appear in the program. They do not require any computation. For example, 5 , false , 'w' are literals that appear in a program directly without any computation. section{ font-size: 25px; } Boolean Literals \u00b6 true and false are the available boolean literals. They are used to initialize boolean variables. For example: bool isValid = true ; bool isPresent = false ; section{ font-size: 25px; } Integer Literals \u00b6 Integer literals are used to initialize variables of integer data types i.e. sbyte , short , int , long , byte , ushort , uint and ulong . If an integer literal ends with L or l , it is of type long. For best practice use L (not l ). long value1 = 4200910L ; long value2 = - 10928190L ; section{ font-size: 25px; } If an integer literal starts with a 0x , it represents hexadecimal value. Number with no prefixes are treated as decimal value. Octal and binary representation are not allowed in C#. int decimalValue = 25 ; int hexValue = 0 x11c ; // decimal value 284 \u00b6 section{ font-size: 25px; } Floating Point Literals \u00b6 Floating point literals are used to initialize variables of float and double data types. If a floating point literal ends with a suffix f or F , it is of type float. Similarly, if it ends with d or D , it is of type double. If neither of the suffix is present, it is of type double by default . These literals contains e or E when expressed in scientific notation. double number = 24.67 ; // double by default float value = - 12.29F ; double scientificNotation = 6.21 e2 ; // equivalent to 6.21 x 102 i.e. 621 section{ font-size: 25px; } Character and String Literals \u00b6 Character literals are used to initialize variables of char data types. Character literals are enclosed in single quotes. For example, 'x' , 'p' , etc. They can be represented as character, hexadecimal escape sequence, unicode representation or integral values casted to char. char ch1 = 'R' ; // character char ch2 = '\\ x0072 ' ; // hexadecimal char ch3 = '\\ u0059 ' ; // unicode char ch4 = ( char ) 107 ; // casted from integer section{ font-size: 25px; } String literals are the collection of character literals. They are enclosed in double quotes. For example, \"Hello\", \"Easy Programming\", etc. string firstName = \"Richard\" ; string lastName = \" Feynman\" ; section{ font-size: 25px; } C# also supports escape sequence characters such as: | Character | Meaning | | --- | --- | | \\' | Single quote | | \\\" | Double quote | | \\\\ | Backslash | | \\n | Newline | | \\r | Carriage return | | \\t | Horizontal Tab | | \\a | Alert | | \\b | Backspace | section{ font-size: 25px; } C# Operators \u00b6 In this article, we will learn everything about different types of operators in C# programming language and how to use them. Operators are symbols that are used to perform operations on operands. Operands may be variables and/or constants. For example , in 2+3 , + is an operator that is used to carry out addition operation, while 2 and 3 are operands. Operators are used to manipulate variables and values in a program. C# supports a number of operators that are classified based on the type of operations they perform. section{ font-size: 25px; } 1. Basic Assignment Operator \u00b6 Basic assignment operator (=) is used to assign values to variables. For example, double x ; x = 50.05 ; Here, 50.05 is assigned to x. section{ font-size: 25px; } Example 1: Basic Assignment Operator \u00b6 using System ; namespace Operator { class AssignmentOperator { public static void Main ( string [] args ) { int firstNumber , secondNumber ; // Assigning a constant to variable firstNumber = 10 ; Console . WriteLine ( \"First Number = {0}\" , firstNumber ); // Assigning a variable to another variable secondNumber = firstNumber ; Console . WriteLine ( \"Second Number = {0}\" , secondNumber ); } } } section{ font-size: 25px; } When we run the program, the output will be: First Number = 10 Second Number = 10 This is a simple example that demonstrates the use of assignment operator. section{ font-size: 25px; } You might have noticed the use of curly brackets { } in the example. We will discuss about them in string formatting . For now, just keep in mind that {0} is replaced by the first variable that follows the string, {1} is replaced by the second variable and so on. section{ font-size: 25px; } 2. Arithmetic Operators \u00b6 Arithmetic operators are used to perform arithmetic operations such as addition, subtraction, multiplication, division, etc. For example, int x = 5 ; int y = 10 ; int z = x + y ; // z = 15 section{ font-size: 25px; } C# Arithmetic Operators Operator Operator Name Example + Addition Operator 6 + 3 evaluates to 9 - Subtraction Operator 10 - 6 evaluates to 4 * Multiplication Operator 4 * 2 evaluates to 8 / Division Operator 10 / 5 evaluates to 2 % Modulo Operator (Remainder) 16 % 3 evaluates to 1 section{ font-size: 25px; } Example 2: Arithmetic Operators \u00b6 using System ; namespace Operator { class ArithmeticOperator { public static void Main ( string [] args ) { double firstNumber = 14.40 , secondNumber = 4.60 , result ; int num1 = 26 , num2 = 4 , rem ; // Addition operator result = firstNumber + secondNumber ; Console . WriteLine ( \"{0} + {1} = {2}\" , firstNumber , secondNumber , result ); // Subtraction operator result = firstNumber - secondNumber ; Console . WriteLine ( \"{0} - {1} = {2}\" , firstNumber , secondNumber , result ); // Multiplication operator result = firstNumber * secondNumber ; Console . WriteLine ( \"{0} * {1} = {2}\" , firstNumber , secondNumber , result ); // Division operator result = firstNumber / secondNumber ; Console . WriteLine ( \"{0} / {1} = {2}\" , firstNumber , secondNumber , result ); // Modulo operator rem = num1 % num2 ; Console . WriteLine ( \"{0} % {1} = {2}\" , num1 , num2 , rem ); } } } section{ font-size: 25px; } When we run the program, the output will be: 14 .4 + 4 .6 = 19 14 .4 - 4 .6 = 9 .8 14 .4 * 4 .6 = 66 .24 14 .4 / 4 .6 = 3 .1304347826087 26 % 4 = 2 Arithmetic operations are carried out in the above example. Variables can be replaced by constants in the statements. For example, result = 4.5 + 2.7 ; // result will hold 7.2 result = firstNumber - 3.2 ; // result will hold 11.2 section{ font-size: 25px; } 3. Relational Operators \u00b6 Relational operators are used to check the relationship between two operands. If the relationship is true the result will be true , otherwise it will result in false . Relational operators are used in decision making and loops. C# Relational Operators Operator Operator Name Example == Equal to 6 == 4 evaluates to false > Greater than 3 > -1 evaluates to true < Less than 5 < 3 evaluates to false >= Greater than or equal to 4 >= 4 evaluates to true <= Less than or equal to 5 <= 3 evaluates to false != Not equal to 10 != 2 evaluates to true section{ font-size: 25px; } Example 3: Relational Operators \u00b6 using System ; namespace Operator { class RelationalOperator { public static void Main ( string [] args ) { bool result ; int firstNumber = 10 , secondNumber = 20 ; result = ( firstNumber == secondNumber ); Console . WriteLine ( \"{0} == {1} returns {2}\" , firstNumber , secondNumber , result ); result = ( firstNumber > secondNumber ); Console . WriteLine ( \"{0} > {1} returns {2}\" , firstNumber , secondNumber , result ); result = ( firstNumber < secondNumber ); Console . WriteLine ( \"{0} < {1} returns {2}\" , firstNumber , secondNumber , result ); result = ( firstNumber >= secondNumber ); Console . WriteLine ( \"{0} >= {1} returns {2}\" , firstNumber , secondNumber , result ); result = ( firstNumber <= secondNumber ); Console . WriteLine ( \"{0} <= {1} returns {2}\" , firstNumber , secondNumber , result ); result = ( firstNumber != secondNumber ); Console . WriteLine ( \"{0} != {1} returns {2}\" , firstNumber , secondNumber , result ); } } } section{ font-size: 25px; } When we run the program, the output will be: 10 == 20 returns False 10 > 20 returns False 10 < 20 returns True 10 > = 20 returns False 10 < = 20 returns True 10 ! = 20 returns True section{ font-size: 25px; } 4. Logical Operators \u00b6 Logical operators are used to perform logical operation such as and , or . Logical operators operates on boolean expressions ( true and false ) and returns boolean values. Logical operators are used in decision making and loops. Here is how the result is evaluated for logical AND and OR operators. C# Logical operators Operand 1 Operand 2 OR (|) AND (&&) true true true true true false true false false true true false false false false false In simple words, the table can be summarized as: If one of the operand is true, the OR operator will evaluate it to true . If one of the operand is false, the AND operator will evaluate it to false . section{ font-size: 25px; } Example 4: Logical Operators \u00b6 using System ; namespace Operator { class LogicalOperator { public static void Main ( string [] args ) { bool result ; int firstNumber = 10 , secondNumber = 20 ; // OR operator result = ( firstNumber == secondNumber ) || ( firstNumber > 5 ); Console . WriteLine ( result ); // AND operator result = ( firstNumber == secondNumber ) && ( firstNumber > 5 ); Console . WriteLine ( result ); } } } section{ font-size: 25px; } When we run the program, the output will be: True False section{ font-size: 25px; } 5. Unary Operators \u00b6 Unlike other operators, the unary operators operates on a single operand. C# unary operators Operator Operator Name Description + Unary Plus Leaves the sign of operand as it is - Unary Minus Inverts the sign of operand ++ Increment Increment value by 1 -- Decrement Decrement value by 1 ! Logical Negation (Not) Inverts the value of a boolean section{ font-size: 25px; } Example 5: Unary Operators \u00b6 using System ; namespace Operator { class UnaryOperator { public static void Main ( string [] args ) { int number = 10 , result ; bool flag = true ; result = + number ; Console . WriteLine ( \"+number = \" + result ); result = - number ; Console . WriteLine ( \"-number = \" + result ); result = ++ number ; Console . WriteLine ( \"++number = \" + result ); result = -- number ; Console . WriteLine ( \"--number = \" + result ); Console . WriteLine ( \"!flag = \" + (! flag )); } } } section{ font-size: 25px; } When we run the program, the output will be: +number = 10 -number = -10 ++number = 11 --number = 10 !flag = False The increment (++) and decrement (--) operators can be used as prefix and postfix. If used as prefix, the change in value of variable is seen on the same line and if used as postfix, the change in value of variable is seen on the next line. This will be clear by the example below. section{ font-size: 25px; } Example 6: Post and Pre Increment operators in C \u00b6 using System ; namespace Operator { class UnaryOperator { public static void Main ( string [] args ) { int number = 10 ; Console . WriteLine (( number ++)); Console . WriteLine (( number )); Console . WriteLine ((++ number )); Console . WriteLine (( number )); } } } section{ font-size: 25px; } When we run the program, the output will be: 10 11 12 12 section{ font-size: 25px; } We can see the effect of using ++ as prefix and postfix. When ++ is used after the operand, the value is first evaluated and then it is incremented by 1 . Hence the statement Console.WriteLine((number++)); prints 10 instead of 11 . After the value is printed, the value of number is incremented by 1 . The process is opposite when ++ is used as prefix. The value is incremented before printing. Hence the statement Console.WriteLine((++number)); prints 12 . The case is same for decrement operator (--) . section{ font-size: 25px; } 6. Ternary Operator \u00b6 The ternary operator ? : operates on three operands. It is a shorthand for if-then-else statement. Ternary operator can be used as follows: variable = Condition ? Expression1 : Expression2 ; The ternary operator works as follows: If the expression stated by Condition is true , the result of Expression1 is assigned to variable. If it is false , the result of Expression2 is assigned to variable. section{ font-size: 25px; } Example 7: Ternary Operator \u00b6 using System ; namespace Operator { class TernaryOperator { public static void Main ( string [] args ) { int number = 10 ; string result ; result = ( number % 2 == 0 )? \"Even Number\" : \"Odd Number\" ; Console . WriteLine ( \"{0} is {1}\" , number , result ); } } } section{ font-size: 25px; } When we run the program, the output will be: 10 is Even Number To learn more, visit C# ternary operator . section{ font-size: 25px; } 7. Bitwise and Bit Shift Operators \u00b6 Bitwise and bit shift operators are used to perform bit manipulation operations. C# Bitwise and Bit Shift operators Operator Operator Name ~ Bitwise Complement & Bitwise AND | Bitwise OR ^ Bitwise Exclusive OR << Bitwise Left Shift >> Bitwise Right Shift section{ font-size: 25px; } Example 8: Bitwise and Bit Shift Operator \u00b6 using System ; namespace Operator { class BitOperator { public static void Main ( string [] args ) { int firstNumber = 10 ; int secondNumber = 20 ; int result ; result = ~ firstNumber ; Console . WriteLine ( \"~{0} = {1}\" , firstNumber , result ); result = firstNumber & secondNumber ; Console . WriteLine ( \"{0} & {1} = {2}\" , firstNumber , secondNumber , result ); result = firstNumber | secondNumber ; Console . WriteLine ( \"{0} | {1} = {2}\" , firstNumber , secondNumber , result ); result = firstNumber ^ secondNumber ; Console . WriteLine ( \"{0} ^ {1} = {2}\" , firstNumber , secondNumber , result ); result = firstNumber << 2 ; Console . WriteLine ( \"{0} << 2 = {1}\" , firstNumber , result ); result = firstNumber >> 2 ; Console . WriteLine ( \"{0} >> 2 = {1}\" , firstNumber , result ); } } } section{ font-size: 25px; } When we run the program, the output will be: ~10 = -11 10 & 20 = 0 10 | 20 = 30 10 ^ 20 = 30 10 << 2 = 40 10 >> 2 = 2 To learn more, visit C# Bitwise and Bit Shift operator . section{ font-size: 25px; } 8. Compound Assignment Operators \u00b6 C# Compound Assignment Operators Operator Operator Name Example Equivalent To += Addition Assignment x += 5 x = x + 5 -= Subtraction Assignment x -= 5 x = x - 5 *= Multiplication Assignment x *= 5 x = x * 5 /= Division Assignment x /= 5 x = x / 5 %= Modulo Assignment x %= 5 x = x % 5 &= Bitwise AND Assignment x &= 5 x = x & 5 |= Bitwise OR Assignment x \\|= 5 x = x \\| 5 ^= Bitwise XOR Assignment x ^= 5 x = x ^ 5 <<= Left Shift Assignment x <<= 5 x = x << 5 >>= Right Shift Assignment x >>= 5 x = x >> 5 => Lambda Operator x => x*x Returns x*x Example 9: Compound Assignment Operator \u00b6 using System ; namespace Operator { class BitOperator { public static void Main ( string [] args ) { int number = 10 ; number += 5 ; Console . WriteLine ( number ); number -= 3 ; Console . WriteLine ( number ); number *= 2 ; Console . WriteLine ( number ); number /= 3 ; Console . WriteLine ( number ); number %= 3 ; Console . WriteLine ( number ); number &= 10 ; Console . WriteLine ( number ); number |= 14 ; Console . WriteLine ( number ); number ^= 12 ; Console . WriteLine ( number ); number <<= 2 ; Console . WriteLine ( number ); number >>= 3 ; Console . WriteLine ( number ); } } } section{ font-size: 25px; } When we run the program, the output will be: 15 12 24 8 2 2 14 2 8 1 We will discuss about Lambda operators in later tutorial. section{ font-size: 25px; } C# Operator Precedence and Associativity \u00b6 In this tutorial we you will learn about operator precedence and associativity in C#. This will give us an idea of how an expression is evaluated by the C# compiler. section{ font-size: 25px; } C# Operator Precedence \u00b6 Operator precedence is a set of rules which defines how an expression is evaluated. In C#, each C# operator has an assigned priority and based on these priorities, the expression is evaluated. section{ font-size: 25px; } For example , the precedence of multiplication (*) operator is higher than the precedence of addition (+) operator. Therefore, operation involving multiplication is carried out before addition. Take a look at the statement below. int x = 4 + 3 * 5 ; What will be the value of x after executing this statement? The operand 3 is associated with + and * . As stated earlier, multiplication has a higher precedence than addition. So, the operation 3 * 5 is carried out instead of 4 + 3 . The value of variable x will be 19 . If addition would have a higher precedence, 4 + 3 would be evaluated first and the value of x would be 35 . section{ font-size: 25px; } Operator Precedence Table \u00b6 The higher the precedence of operator is, the higher it appears in the table C# Operator Precedence Category Operators Postfix Increment and Decrement ++, -- Prefix Increment, Decrement and Unary ++, --, +, -, !, ~ Multiplicative *, /, % Additive +, - Shift <<, >> Relational <, <=, >, >= Equality ==, != Bitwise AND & Bitwise XOR ^ Bitwise OR | Logical AND && Logical OR | Ternary ? : Assignment =, +=, -=, *=, /=, %=, &=, |=, ^=, <<=, >>= section{ font-size: 25px; } The assignment operators have the lowest precedence while the postfix increment and decrement operators have the highest precedence. section{ font-size: 25px; } Example 1: Operator Precedence \u00b6 using System ; namespace Operator { class OperatorPrecedence { public static void Main ( string [] args ) { int result1 ; int a = 5 , b = 6 , c = 4 ; result1 = -- a * b - ++ c ; Console . WriteLine ( result1 ); bool result2 ; result2 = b >= c + a ; Console . WriteLine ( result2 ); } } } section{ font-size: 25px; } When we run the program, the output will be: 19 False section{ font-size: 25px; } Let's understand how the expression is evaluated in the program. The precedence of -- and ++ is higher than * , and precedence of * is higher than - . Hence the statement, result1 = -- a * b - ++ c ; is equivalent to result1 = ((-- a )* b )-(++ c ); section{ font-size: 25px; } The expression inside parentheses is always evaluated first no matter what the precedence of operators outside it is. At first, (--a) is evaluated resulting into 4 . section{ font-size: 25px; } Then (++c) is evaluated resulting into 5 . section{ font-size: 25px; } Now, (a * b) is evaluated resulting into 24 . section{ font-size: 25px; } Finally, the subtraction is carried out resulting into 19 . Hence the final value of result1 will be 19 . section{ font-size: 25px; } In the next expression, the precedence of + is higher than >= . So, c and a is added first and the sum is compared with b to produce false . section{ font-size: 25px; } Associativity of Operators in C \u00b6 In the previous section, we discussed about operator precedence. If two operators with different precedence are used, the operator with higher precedence is evaluated first. But what if both the operators have same precedence? In such case, the expression is evaluated based on the associativity of operator (left to right or right to left). section{ font-size: 25px; } For example: int a = 5 , b = 6 , c = 3 ; int result = a * b / c ; Here, both * and / have the same precedence. But since the associativity of these operators is from left to right , a * b is evaluated first and then division is carried out. The final result of this expression will be 10 . section{ font-size: 25px; } In this particular example, the associativity does not really matter. Because even if division was carried out before multiplication, the result would be unaffected. Let's take a look at another example. int a = 5 , b = 6 , c = 3 ; a = b = c ; The associativity of = operator is from right to left . So the value of c (i.e. 3 ) is assigned to b, and then the value of b is assigned to a. So after executing this statement, the values of a, b and c will be 3 . section{ font-size: 25px; } The table below shows the associativity of C# operators: C# Associativity of operators Category Operators Associativity Postfix Increment and Decrement ++, -- Left to Right Prefix Increment, Decrement and Unary ++, --, +, -, !, ~ Right to Left Multiplicative *, /, % Left to Right Additive +, - Left to Right Shift <<, >> Left to Right Relational <, <=, >, >= Left to Right Equality ==, != Left to Right Bitwise AND & Left to Right Bitwise XOR ^ Left to Right Bitwise OR | Left to Right Logical AND && Left to Right Logical OR | Left to Right Ternary ? : Right to Left Assignment =, +=, -=, *=, /=, %=, &=, |=, ^=, <<=, >>= Right to Left section{ font-size: 25px; } Almost all the operators have associativity from left to right. The operators having associativity from right to left are: Unary operators Prefix Increment and Decrement Operators Ternary Operator Assignment Operators section{ font-size: 25px; } Example 2: Associativity of Operators \u00b6 using System ; namespace Operator { class OperatorPrecedence { public static void Main ( string [] args ) { int a = 5 , b = 6 , c = 3 ; int result = a * b / c ; Console . WriteLine ( result ); a = b = c ; Console . WriteLine ( \"a = {0}, b = {1}, c = {2}\" , a , b , c ); } } } section{ font-size: 25px; } When we run the program, the output will be: 10 a = 3 , b = 3 , c = 3 section{ font-size: 25px; } C# Bitwise and Bit Shift Operators \u00b6 In this tutorial, we will learn in detail about bitwise and bit shift operators in C#. C# provides 4 bitwise and 2 bit shift operators. Bitwise and bit shift operators are used to perform bit level operations on integer (int, long, etc) and boolean data. These operators are not commonly used in real life situations. If you are interested to explore more, visit practical applications of bitwise operations . section{ font-size: 25px; } The bitwise and bit shift operators available in C# are listed below. List of C# Bitwise Operators Operator Operator Name ~ Bitwise Complement & Bitwise AND | Bitwise OR ^ Bitwise Exclusive OR (XOR) << Bitwise Left Shift >> Bitwise Right Shift section{ font-size: 25px; } Bitwise OR \u00b6 Bitwise OR operator is represented by | . It performs bitwise OR operation on the corresponding bits of two operands. If either of the bits is 1 , the result is 1 . Otherwise the result is 0 . If the operands are of type bool , the bitwise OR operation is equivalent to logical OR operation between them. section{ font-size: 25px; } For Example, 14 = 00001110 ( In Binary ) 11 = 00001011 ( In Binary ) Bitwise OR operation between 14 and 11: 00001110 00001011 -------- XOR 00001111 = 15 ( In Decimal ) section{ font-size: 25px; } Example 1: Bitwise OR \u00b6 using System ; namespace Operator { class BitWiseOR { public static void Main ( string [] args ) { int firstNumber = 14 , secondNumber = 11 , result ; result = firstNumber | secondNumber ; Console . WriteLine ( \"{0} | {1} = {2}\" , firstNumber , secondNumber , result ); } } } section{ font-size: 25px; } When we run the program, the output will be: 14 | 11 = 15 section{ font-size: 25px; } Bitwise AND \u00b6 Bitwise AND operator is represented by & . It performs bitwise AND operation on the corresponding bits of two operands. If either of the bits is 0 , the result is 0 . Otherwise the result is 1 . If the operands are of type bool , the bitwise AND operation is equivalent to logical AND operation between them. section{ font-size: 25px; } - For Example, 14 = 00001110 ( In Binary ) 11 = 00001011 ( In Binary ) Bitwise AND operation between 14 and 11: 00001110 00001011 -------- AND 00001010 = 10 ( In Decimal ) section{ font-size: 25px; } Example 2: Bitwise AND \u00b6 using System ; namespace Operator { class BitWiseAND { public static void Main ( string [] args ) { int firstNumber = 14 , secondNumber = 11 , result ; result = firstNumber & secondNumber ; Console . WriteLine ( \"{0} & {1} = {2}\" , firstNumber , secondNumber , result ); } } } section{ font-size: 25px; } When we run the program, the output will be: 14 & 11 = 10 section{ font-size: 25px; } Bitwise XOR \u00b6 Bitwise XOR operator is represented by ^ . It performs bitwise XOR operation on the corresponding bits of two operands. If the corresponding bits are same , the result is 0 . If the corresponding bits are different , the result is 1 . If the operands are of type bool , the bitwise XOR operation is equivalent to logical XOR operation between them. section{ font-size: 25px; } For Example, 14 = 00001110 ( In Binary ) 11 = 00001011 ( In Binary ) Bitwise XOR operation between 14 and 11: 00001110 00001011 -------- B - XOR 00000101 = 5 ( In Decimal ) If you want to more about the usage of Bitwise XOR, visit The Magic of XOR Example 3: Bitwise XOR \u00b6 using System ; namespace Operator { class BitWiseXOR { public static void Main ( string [] args ) { int firstNumber = 14 , secondNumber = 11 , result ; result = firstNumber ^ secondNumber ; Console . WriteLine ( \"{0} ^ {1} = {2}\" , firstNumber , secondNumber , result ); } } } section{ font-size: 25px; } When we run the program, the output will be: 14 ^ 11 = 5 section{ font-size: 25px; } Bitwise Complement \u00b6 Bitwise Complement operator is represented by ~ . It is a unary operator, i.e. operates on only one operand. The ~ operator inverts each bits i.e. changes 1 to 0 and 0 to 1. For Example, 26 = 00011010 ( In Binary ) Bitwise Complement operation on 26: ~ 00011010 = 11100101 = 229 ( In Decimal ) section{ font-size: 25px; } Example 4: Bitwise Complement \u00b6 using System ; namespace Operator { class BitWiseComplement { public static void Main ( string [] args ) { int number = 26 , result ; result = ~ number ; Console . WriteLine ( \"~{0} = {1}\" , number , result ); } } } section{ font-size: 25px; } When we run the program, the output will be: ~26 = -27 section{ font-size: 25px; } We got - 27 as output when we were expecting 229 . Why did this happen? It happens because the binary value 11100101 which we expect to be 229 is actually a 2's complement representation of -27 . Negative numbers in computer are represented in 2's complement representation. section{ font-size: 25px; } For any integer n, 2's complement of n will be -(n+1) . 2's complement Decimal Binary 2's Complement 0 00000000 -(11111111 + 1) = -00000000 = -0 (In Decimal) 1 00000001 -(11111110 + 1) = -11111111 = -256 (In Decimal) 229 11100101 -(00011010 + 1) = -00011011 = -27 Overflow values are ignored in 2's complement. The bitwise complement of 26 is 229 (in decimal) and the 2's complement of 229 is -27 . Hence the output is -27 instead of 229 . section{ font-size: 25px; } Bitwise Left Shift \u00b6 Bitwise left shift operator is represented by << . The << operator shifts a number to the left by a specified number of bits. Zeroes are added to the least significant bits. In decimal, it is equivalent to num * 2bits section{ font-size: 25px; } For Example, 42 = 101010 ( In Binary ) Bitwise Lift Shift operation on 42: 42 << 1 = 84 ( In binary 1010100 ) 42 << 2 = 168 ( In binary 10101000 ) 42 << 4 = 672 ( In binary 1010100000 ) section{ font-size: 25px; } Example 5: Bitwise Left Shift \u00b6 using System ; namespace Operator { class LeftShift { public static void Main ( string [] args ) { int number = 42 ; Console . WriteLine ( \"{0}<<1 = {1}\" , number , number << 1 ); Console . WriteLine ( \"{0}<<2 = {1}\" , number , number << 2 ); Console . WriteLine ( \"{0}<<4 = {1}\" , number , number << 4 ); } } } section{ font-size: 25px; } When we run the program, the output will be: 42 <<1 = 84 42<<2 = 1 68 42 << 4 = 672 section{ font-size: 25px; } Bitwise Right Shift \u00b6 Bitwise right shift operator is represented by >> . The >> operator shifts a number to the right by a specified number of bits. The first operand is shifted to right by the number of bits specified by second operand. In decimal, it is equivalent to floor ( num / 2 bits ) section{ font-size: 25px; } For Example, 42 = 101010 ( In Binary ) Bitwise Lift Shift operation on 42: 42 >> 1 = 21 ( In binary 010101 ) 42 >> 2 = 10 ( In binary 001010 ) 42 >> 4 = 2 ( In binary 000010 ) section{ font-size: 25px; } Example 6: Bitwise Right Shift \u00b6 using System ; namespace Operator { class LeftShift { public static void Main ( string [] args ) { int number = 42 ; Console . WriteLine ( \"{0}>>1 = {1}\" , number , number >> 1 ); Console . WriteLine ( \"{0}>>2 = {1}\" , number , number >> 2 ); Console . WriteLine ( \"{0}>>4 = {1}\" , number , number >> 4 ); } } } section{ font-size: 25px; } When we run the program, the output will be: 42 >> 1 = 21 42 >> 2 = 10 42 >> 4 = 2 section{ font-size: 25px; } C# Basic Input and Output \u00b6 In this tutorial, we will learn how to take input from user and and display output in C# using various methods section{ font-size: 25px; } C# Output \u00b6 In order to output something in C#, we can use System . Console . WriteLine () OR System . Console . Write () Here, System is a namespace , Console is a class within namespace System and WriteLine and Write are methods of class Console . Let's look at a simple example that prints a string to output screen. section{ font-size: 25px; } Example 1: Printing String using WriteLine() \u00b6 using System ; namespace Sample { class Test { public static void Main ( string [] args ) { Console . WriteLine ( \"C# is cool\" ); } } } section{ font-size: 25px; } When we run the program, the output will be C# is cool section{ font-size: 25px; } Difference between WriteLine() and Write() method \u00b6 The main difference between WriteLine() and Write() is that the Write() method only prints the string provided to it, while the WriteLine() method prints the string and moves to the start of next line as well. Let's take at a look at the example below to understand the difference between these methods. section{ font-size: 25px; } Example 2: How to use WriteLine() and Write() method? \u00b6 using System ; namespace Sample { class Test { public static void Main ( string [] args ) { Console . WriteLine ( \"Prints on \" ); Console . WriteLine ( \"New line\" ); Console . Write ( \"Prints on \" ); Console . Write ( \"Same line\" ); } } } section{ font-size: 25px; } When we run the program, the output will be Prints on New line Prints on Same line section{ font-size: 25px; } Printing Variables and Literals using WriteLine() and Write() \u00b6 The WriteLine() and Write() method can be used to print variables and literals. Here's an example. section{ font-size: 25px; } Example 3: Printing Variables and Literals \u00b6 using System ; namespace Sample { class Test { public static void Main ( string [] args ) { int value = 10 ; // Variable Console . WriteLine ( value ); // Literal Console . WriteLine ( 50.05 ); } } } section{ font-size: 25px; } When we run the program, the output will be 10 50 .05 section{ font-size: 25px; } Combining (Concatenating) two strings using + operator and printing them \u00b6 Strings can be combined/concatenated using the + operator while printing. section{ font-size: 25px; } Example 4: Printing Concatenated String using + operator \u00b6 using System ; namespace Sample { class Test { public static void Main ( string [] args ) { int val = 55 ; Console . WriteLine ( \"Hello \" + \"World\" ); Console . WriteLine ( \"Value = \" + val ); } } } section{ font-size: 25px; } When we run the program, the output will be Hello World Value = 55 section{ font-size: 25px; } Printing concatenated string using Formatted String [Better Alternative] \u00b6 A better alternative for printing concatenated string is using formatted string. Formatted string allows programmer to use placeholders for variables. section{ font-size: 25px; } For example, The following line, Console . WriteLine ( \"Value = \" + val ); can be replaced by, Console . WriteLine ( \"Value = {0}\" , val ); {0} is the placeholder for variable val which will be replaced by value of val. Since only one variable is used so there is only one placeholder. Multiple variables can be used in the formatted string. We will see that in the example below. section{ font-size: 25px; } Example 5: Printing Concatenated string using String formatting \u00b6 using System ; namespace Sample { class Test { public static void Main ( string [] args ) { int firstNumber = 5 , secondNumber = 10 , result ; result = firstNumber + secondNumber ; Console . WriteLine ( \"{0} + {1} = {2}\" , firstNumber , secondNumber , result ); } } } section{ font-size: 25px; } When we run the program, the output will be 5 + 10 = 15 Here, {0} is replaced by firstNumber, {1} is replaced by secondNumber and {2} is replaced by result. This approach of printing output is more readable and less error prone than using + operator. To know more about string formatting, visit C# string formatting . section{ font-size: 25px; } C# Input \u00b6 In C#, the simplest method to get input from the user is by using the ReadLine() method of the Console class. However, Read() and ReadKey() are also available for getting input from the user. They are also included in Console class. section{ font-size: 25px; } Example 6: Get String Input From User \u00b6 using System ; namespace Sample { class Test { public static void Main ( string [] args ) { string testString ; Console . Write ( \"Enter a string - \" ); testString = Console . ReadLine (); Console . WriteLine ( \"You entered '{0}'\" , testString ); } } } section{ font-size: 25px; } When we run the program, the output will be: Enter a string - Hello World You entered 'Hello World' section{ font-size: 25px; } Difference between ReadLine(), Read() and ReadKey() method: \u00b6 The difference between ReadLine() , Read() and ReadKey() method is: ReadLine() : The ReadLine() method reads the next line of input from the standard input stream. It returns the same string. Read() : The Read() method reads the next character from the standard input stream. It returns the ascii value of the character. ReadKey() : The ReadKey() method obtains the next key pressed by user. This method is usually used to hold the screen until user press a key. If you want to know more about these methods, here is an interesting discussion on StackOverflow on: Difference between Console.Read() and Console.ReadLine()? . section{ font-size: 25px; } Example 7: Difference between Read() and ReadKey() method \u00b6 using System ; namespace Sample { class Test { public static void Main ( string [] args ) { int userInput ; Console . WriteLine ( \"Press any key to continue...\" ); Console . ReadKey (); Console . WriteLine (); Console . Write ( \"Input using Read() - \" ); userInput = Console . Read (); Console . WriteLine ( \"Ascii Value = {0}\" , userInput ); } } } section{ font-size: 25px; } When we run the program, the output will be Press any key to continue ... x Input using Read () - Learning C# Ascii Value = 76 From this example, it must be clear how ReadKey() and Read() method works. While using ReadKey() , as soon as the key is pressed, it is displayed on the screen. When Read() is used, it takes a whole line but only returns the ASCII value of first character. Hence, 76 (ASCII value of L ) is printed. section{ font-size: 25px; } Reading numeric values (integer and floating point types) \u00b6 Reading a character or string is very simple in C#. All you need to do is call the corresponding methods as required. But, reading numeric values can be slightly tricky in C#. We\u2019ll still use the same ReadLine() method we used for getting string values. But since the ReadLine() method receives the input as string, it needs to be converted into integer or floating point type. One simple approach for converting our input is using the methods of Convert class. Example 8: Reading Numeric Values from User using Convert class \u00b6 using System ; namespace UserInput { class MyClass { public static void Main ( string [] args ) { string userInput ; int intVal ; double doubleVal ; Console . Write ( \"Enter integer value: \" ); userInput = Console . ReadLine (); /* Converts to integer type */ intVal = Convert . ToInt32 ( userInput ); Console . WriteLine ( \"You entered {0}\" , intVal ); Console . Write ( \"Enter double value: \" ); userInput = Console . ReadLine (); /* Converts to double type */ doubleVal = Convert . ToDouble ( userInput ); Console . WriteLine ( \"You entered {0}\" , doubleVal ); } } } section{ font-size: 25px; } When we run the program, the output will be Enter integer value: 101 You entered 101 Enter double value: 59 .412 You entered 59 .412 The ToInt32() and ToDouble() method of Convert class converts the string input to integer and double type respectively. Similarly we can convert the input to other types. Here is a complete list of available methods for Convert class . There are other ways to get numeric inputs from user. To learn more, visit Reading an integer from user input . section{ font-size: 25px; } C# Expressions, Statements and Blocks (With Examples) \u00b6 In this article, we will learn about C# expressions, C# statements, difference between expression and statement, and C# blocks. Expressions, statements and blocks are the building block of a C# program. We have been using them since our first \"Hello World\" program . section{ font-size: 25px; } C# Expressions \u00b6 An expression in C# is a combination of operands (variables, literals, method calls) and operators that can be evaluated to a single value. To be precise, an expression must have at least one operand but may not have any operator. section{ font-size: 25px; } Let's look at the example below: double temperature ; temperature = 42.05 ; Here, 42.05 is an expression. Also, temperature = 42.05 is an expression too. int a , b , c , sum ; sum = a + b + c ; Here, a + b + c is an expression. if ( age >= 18 && age < 58 ) Console . WriteLine ( \"Eligible to work\" ); Here, (age>=18 && age<58) is an expression that returns a boolean value. \"Eligible to work\" is also an expression. section{ font-size: 25px; } C# Statements \u00b6 A statement is a basic unit of execution of a program. A program consists of multiple statements. section{ font-size: 25px; } For example: int age = 21 ; Int marks = 90 ; In the above example, both lines above are statements. section{ font-size: 25px; } There are different types of statements in C#. In this tutorial, we\u2019ll mainly focus on two of them: Declaration Statement Expression Statement section{ font-size: 25px; } Declaration Statement \u00b6 Declaration statements are used to declare and initialize variables. section{ font-size: 25px; } For example: char ch ; int maxValue = 55 ; Both char ch; and int maxValue = 55; are declaration statements. section{ font-size: 25px; } Expression Statement \u00b6 An expression followed by a semicolon is called an expression statement. section{ font-size: 25px; } For example: /* Assignment */ area = 3.14 * radius * radius ; /* Method call is an expression*/ System . Console . WriteLine ( \"Hello\" ); Here, 3.14 * radius * radius is an expression and area = 3.14 * radius * radius; is an expression statement. Likewise, System.Console.WriteLine(\"Hello\"); is both an expression and a statement. section{ font-size: 25px; } Beside declaration and expression statement, there are: Selection Statements (if...else, switch) Iteration Statements (do, while, for, foreach) Jump Statements (break, continue, goto, return, yield) Exception Handling Statements (throw, try-catch, try-finally, try-catch-finally) section{ font-size: 25px; } These statements will be discussed in later tutorials. If you want to learn more about statements, visit C# Statements ( C# reference) section{ font-size: 25px; } C# Blocks \u00b6 A block is a combination of zero or more statements that is enclosed inside curly brackets { } . section{ font-size: 25px; } For example: Example 1: C# Blocks with statements \u00b6 using System ; namespace Blocks { class BlockExample { public static void Main ( string [] args ) { double temperature = 42.05 ; if ( temperature > 32 ) { // Start of block Console . WriteLine ( \"Current temperature = {0}\" , temperature ); Console . WriteLine ( \"It's hot\" ); } // End of block } } } section{ font-size: 25px; } When we run the program, the output will be: Current temperature = 42.05 It ' s hot Here, the two statements inside { } : Console . WriteLine ( \"Current temperature = {0}\" , temperature ); and Console . WriteLine ( \"It's hot\" ); forms a block . section{ font-size: 25px; } Example 2: C# Blocks without statements \u00b6 A block may not have any statements within it as shown in the below example. using System ; namespace Blocks { class BlockExample { public static void Main ( string [] args ) { double temperature = 42.05 ; if ( temperature > 32 ) { // Start of block // No statements } // End of block } } } Here, the curly braces { } after if(temperature > 32) contains only comments and no statements. section{ font-size: 25px; } C# Comments \u00b6 In this article, we will learn about C# comments, different style of comments, and why and how to use them in a program. Comments are used in a program to help us understand a piece of code. They are human readable words intended to make the code readable. Comments are completely ignored by the compiler. section{ font-size: 25px; } In C#, there are 3 types of comments: Single Line Comments ( // ) Multi Line Comments ( /* */ ) XML Comments ( /// ) section{ font-size: 25px; } Single Line Comments \u00b6 Single line comments start with a double slash // . The compiler ignores everything after // to the end of the line. For example, int a = 5 + 7 ; // Adding 5 and 7 Here, Adding 5 and 7 is the comment. section{ font-size: 25px; } Example 1: Using single line comment \u00b6 // Hello World Program using System ; namespace HelloWorld { class Program { public static void Main ( string [] args ) // Execution Starts from Main method { // Prints Hello World Console . WriteLine ( \"Hello World!\" ); } } } section{ font-size: 25px; } The above program contains 3 single line comments: // Hello World Program // Execution Starts from Main method and // Prints Hello World Single line comments can be written in a separate line or along with the codes in same line. However, it is recommended to use comments in a separate line. section{ font-size: 25px; } Multi Line Comments \u00b6 Multi line comments start with /* and ends with */ . Multi line comments can span over multiple lines. section{ font-size: 25px; } Example 2: Using multi line comment \u00b6 /* This is a Hello World Program in C#. This program prints Hello World.*/ using System ; namespace HelloWorld { class Program { public static void Main ( string [] args ) { /* Prints Hello World */ Console . WriteLine ( \"Hello World!\" ); } } } section{ font-size: 25px; } The above program contains 2 multi line comments: /* This is a Hello World Program in C#. This program prints Hello World. */ and /* Prints Hello World */ Here, we may have noticed that it is not compulsory for a multi line comment to span over multiple lines. /* \u2026 */ can be used instead of single line comments. section{ font-size: 25px; } XML Documentation Comments \u00b6 XML documentation comment is a special feature in C#. It starts with a triple slash /// and is used to categorically describe a piece of code.. This is done using XML tags within a comment. These comments are then, used to create a separate XML documentation file. If you are not familiar with XML, see What is XML? section{ font-size: 25px; } Example 3: Using XML documentation comment \u00b6 /// <summary> /// This is a hello world program. /// </summary> using System ; namespace HelloWorld { class Program { public static void Main ( string [] args ) { Console . WriteLine ( \"Hello World!\" ); } } } section{ font-size: 25px; } The XML comment used in the above program is /// <summary> /// This is a hello world program. /// </summary> section{ font-size: 25px; } The XML documentation (.xml file) generated will contain: <?xml version=\"1.0\"?> <doc> <assembly> <name> HelloWorld </name> </assembly> <members> </members> </doc> Visit XML Documentation Comments if you are interested in learning more. section{ font-size: 25px; } Use Comments the Right Way \u00b6 Comments are used to explain parts of code but they should not be overused . For example: // Prints Hello World Console . WriteLine ( \"Hello World\" ); section{ font-size: 25px; } Using comment in the above example is not necessary. It is obvious that the line will print Hello World. Comments should be avoided in such cases. Instead comments should be used in the program to explain complex algorithms and techniques. Comments should be short and to the point instead of a long description. As a rule of thumb, it is better to explain why instead of how , using comments. section{ font-size: 25px; } Flow Control \u00b6 section{ font-size: 25px; } C# if, if...else, if...else if and Nested if Statement \u00b6 In this article, we will learn how to use if, if...else, if...else if statement in C# to control the flow of our program\u2019s execution. Testing a condition is inevitable in programming. We will often face situations where we need to test conditions (whether it is true or false ) to control the flow of program. These conditions may be affected by user's input, time factor, current environment where the program is running, etc. In this article, we'll learn to test conditions using if statement in C#. section{ font-size: 25px; } C# if (if-then) Statement \u00b6 C# if-then statement will execute a block of code if the given condition is true. The syntax of if-then statement in C# is: if ( boolean - expression ) { // statements executed if boolean-expression is true } section{ font-size: 25px; } The boolean-expression will return either true or false . If the boolean-expression returns true , the statements inside the body of if ( inside {...} ) will be executed. If the boolean-expression returns false , the statements inside the body of if will be ignored. section{ font-size: 25px; } For example, if ( number < 5 ) { number += 5 ; } In this example, the statement number += 5 ; will be executed only if the value of number is less than 5. Remember the += operator ? section{ font-size: 25px; } How if statement works? \u00b6 section{ font-size: 25px; } Example 1: C# if Statement \u00b6 using System ; namespace Conditional { class IfStatement { public static void Main ( string [] args ) { int number = 2 ; if ( number < 5 ) { Console . WriteLine ( \"{0} is less than 5\" , number ); } Console . WriteLine ( \"This statement is always executed.\" ); } } } section{ font-size: 25px; } When we run the program, the output will be: 2 is less than 5 This statement is always executed . section{ font-size: 25px; } The value of number is initialized to 2. So the expression number < 5 is evaluated to true . Hence, the code inside the if block are executed. The code after the if statement will always be executed irrespective to the expression. Now, change the value of number to something greater than 5 , say 10 . When we run the program the output will be: This statement is always executed. The expression number < 5 will return false , hence the code inside if block won't be executed. section{ font-size: 25px; } C# if...else (if-then-else) Statement \u00b6 The if statement in C# may have an optional else statement. The block of code inside the else statement will be executed if the expression is evaluated to false . section{ font-size: 25px; } The syntax of if...else statement in C# is: if ( boolean - expression ) { // statements executed if boolean-expression is true } else { // statements executed if boolean-expression is false } section{ font-size: 25px; } For example, if ( number < 5 ) { number += 5 ; } else { number -= 5 ; } section{ font-size: 25px; } In this example, the statement number += 5 ; will be executed only if the value of number is less than 5 . The statement number -= 5 ; will be executed if the value of number is greater than or equal to 5 . section{ font-size: 25px; } How if...else Statement works? \u00b6 Working of if...else Statement section{ font-size: 25px; } Example 2: C# if...else Statement \u00b6 using System ; namespace Conditional { class IfElseStatement { public static void Main ( string [] args ) { int number = 12 ; if ( number < 5 ) { Console . WriteLine ( \"{0} is less than 5\" , number ); } else { Console . WriteLine ( \"{0} is greater than or equal to 5\" , number ); } Console . WriteLine ( \"This statement is always executed.\" ); } } } section{ font-size: 25px; } When we run the program, the output will be: 12 is greater than or equal to 5 This statement is always executed . section{ font-size: 25px; } Here, the value of number is initialized to 12 . So the expression number < 5 is evaluated to false . Hence, the code inside the else block are executed. The code after the if..else statement will always be executed irrespective to the expression. section{ font-size: 25px; } Now, change the value of number to something less than 5 , say 2 . When we run the program the output will be: 2 is less than 5 This statement is always executed . The expression number < 5 will return true, hence the code inside if block will be executed. section{ font-size: 25px; } Ternary operator in C# provides a shortcut for C# if...else statement. section{ font-size: 25px; } C# if...else if (if-then-else if) Statement \u00b6 When we have only one condition to test, if-then and if-then-else statement works fine. But what if we have a multiple condition to test and execute one of the many block of code. section{ font-size: 25px; } For such case, we can use if..else if statement in C#. The syntax for if...else if statement is: if ( boolean - expression - 1 ) { // statements executed if boolean-expression-1 is true } else if ( boolean - expression - 2 ) { // statements executed if boolean-expression-2 is true } else if ( boolean - expression - 3 ) { // statements executed if boolean-expression-3 is true } . . . else { // statements executed if all above expressions are false } section{ font-size: 25px; } The if...else if statement is executed from the top to bottom . As soon as a test expression is true , the code inside of that if ( or else if ) block is executed. Then the control jumps out of the if...else if block. If none of the expression is true , the code inside the else block is executed. Alternatively, we can use switch statement in such condition. section{ font-size: 25px; } Example 3: C# if...else if Statement \u00b6 using System ; namespace Conditional { class IfElseIfStatement { public static void Main ( string [] args ) { int number = 12 ; if ( number < 5 ) { Console . WriteLine ( \"{0} is less than 5\" , number ); } else if ( number > 5 ) { Console . WriteLine ( \"{0} is greater than 5\" , number ); } else { Console . WriteLine ( \"{0} is equal to 5\" ); } } } } section{ font-size: 25px; } When we run the program, the output will be: 12 is greater than 5 section{ font-size: 25px; } The value of number is initialized to 12 . The first test expression number < 5 is false , so the control will move to the else if block. The test expression number > 5 is true hence the block of code inside else if will be executed. Similarly, we can change the value of number to alter the flow of execution. section{ font-size: 25px; } Nested if...else Statement \u00b6 An if...else statement can exist within another if...else statement. Such statements are called nested if...else statement. The general structure of nested if...else statement is: if ( boolean - expression ){ if ( nested - expression - 1 ){ // code to be executed } else { // code to be executed } } else { if ( nested - expression - 2 ){ // code to be executed } else { // code to be executed } } section{ font-size: 25px; } Nested if statements are generally used when we have to test one condition followed by another. In a nested if statement, if the outer if statement returns true, it enters the body to check the inner if statement. section{ font-size: 25px; } Example 4: Nested if...else Statement \u00b6 The following program computes the largest number among 3 numbers using nested if...else statement. using System ; namespace Conditional { class Nested { public static void Main ( string [] args ){ int first = 7 , second = - 23 , third = 13 ; if ( first > second ){ if ( firstNumber > third ){ Console . WriteLine ( \"{0} is the largest\" , first ); } else { Console . WriteLine ( \"{0} is the largest\" , third ); } } else { if ( second > third ){ Console . WriteLine ( \"{0} is the largest\" , second ); } else { Console . WriteLine ( \"{0} is the largest\" , third ); } } } } } section{ font-size: 25px; } When we run the program, the output will be: 13 is the largest section{ font-size: 25px; } C# switch Statement \u00b6 In this article, we will learn about switch statement in C# and how to use them with examples. Switch statement can be used to replace the if...else if statement in C#. The advantage of using switch over if...else if statement is the codes will look much cleaner and readable with switch. section{ font-size: 25px; } The syntax of switch statement is: switch ( variable / expression ) { case value1 : // Statements executed if expression(or variable) = value1 break ; case value2 : // Statements executed if expression(or variable) = value1 break ; ... ... ... ... ... ... default : // Statements executed if no case matches } section{ font-size: 25px; } The switch statement evaluates the expression (or variable) and compare its value with the values (or expression) of each case (value1, value2, \u2026). When it finds the matching value, the statements inside that case are executed. section{ font-size: 25px; } But, if none of the above cases matches the expression, the statements inside default block is executed. The default statement at the end of switch is similar to the else block in if else statement. section{ font-size: 25px; } However a problem with the switch statement is, when the matching value is found, it executes all statements after it until the end of switch block. section{ font-size: 25px; } To avoid this, we use break statement at the end of each case. The break statement stops the program from executing non-matching statements by terminating the execution of switch statement. To learn more about break statement, visit C# break statement . section{ font-size: 25px; } Example 1: C# switch Statement \u00b6 using System ; namespace Conditional { class SwitchCase { public static void Main ( string [] args ) { char ch ; Console . WriteLine ( \"Enter an alphabet\" ); ch = Convert . ToChar ( Console . ReadLine ()); switch ( Char . ToLower ( ch )) { case 'a' : Console . WriteLine ( \"Vowel\" ); break ; case 'e' : Console . WriteLine ( \"Vowel\" ); break ; case 'i' : Console . WriteLine ( \"Vowel\" ); break ; case 'o' : Console . WriteLine ( \"Vowel\" ); break ; case 'u' : Console . WriteLine ( \"Vowel\" ); break ; default : Console . WriteLine ( \"Not a vowel\" ); break ; } } } } section{ font-size: 25px; } When we run the program, the output will be: Enter an alphabet X Not a vowel section{ font-size: 25px; } In this example, the user is prompted to enter an alphabet. The alphabet is converted to lowercase by using ToLower() method if it is in uppercase. Then, the switch statement checks whether the alphabet entered by user is any of a, e, i, o or u . If one of the case matches, Vowel is printed otherwise the control goes to default block and Not a vowel is printed as output. Since, the output for all vowels are the same, we can join the cases as: section{ font-size: 25px; } Example 2: C# switch Statement with grouped cases \u00b6 using System ; namespace Conditional { class SwitchCase { public static void Main ( string [] args ) { char ch ; Console . WriteLine ( \"Enter an alphabet\" ); ch = Convert . ToChar ( Console . ReadLine ()); switch ( Char . ToLower ( ch )) { case 'a' : case 'e' : case 'i' : case 'o' : case 'u' : Console . WriteLine ( \"Vowel\" ); break ; default : Console . WriteLine ( \"Not a vowel\" ); break ; } } } } section{ font-size: 25px; } The output of both programs is same. In the above program, all vowels print the output Vowel and breaks from the switch statement. section{ font-size: 25px; } Although switch statement makes the code look cleaner than if...else if statement, switch is restricted to work with limited data types. Switch statement in C# only works with: Primitive data types: bool, char and integral type Enumerated Types (Enum) String Class Nullable types of above data types section{ font-size: 25px; } Example 3: Simple calculator program using C# switch Statement \u00b6 using System ; namespace Conditional { class SwitchCase { public static void Main ( string [] args ) { char op ; double first , second , result ; Console . Write ( \"Enter first number: \" ); first = Convert . ToDouble ( Console . ReadLine ()); Console . Write ( \"Enter second number: \" ); second = Convert . ToDouble ( Console . ReadLine ()); Console . Write ( \"Enter operator (+, -, *, /): \" ); op = ( char ) Console . Read (); switch ( op ) { case '+' : result = first + second ; Console . WriteLine ( \"{0} + {1} = {2}\" , first , second , result ); break ; case '-' : result = first - second ; Console . WriteLine ( \"{0} - {1} = {2}\" , first , second , result ); break ; case '*' : result = first * second ; Console . WriteLine ( \"{0} * {1} = {2}\" , first , second , result ); break ; case '/' : result = first / second ; Console . WriteLine ( \"{0} / {1} = {2}\" , first , second , result ); break ; default : Console . WriteLine ( \"Invalid Operator\" ); break ; } } } } section{ font-size: 25px; } When we run the program, the output will be: Enter first number: -13.11 Enter second number: 2 .41 Enter operator ( +, -, *, / ) : * -13.11 * 2 .41 = -31.5951 section{ font-size: 25px; } The above program takes two operands and an operator as input from the user and performs the operation based on the operator. The inputs are taken from the user using the ReadLine() and Read() method. To learn more, visit C# Basic Input and Output . The program uses switch case statement for decision making. Alternatively, we can use if-else if ladder to perform the same operation. section{ font-size: 25px; } C# ternary (? :) Operator \u00b6 In this article, we will learn about C# ternary operator and how to use it to control the flow of program. section{ font-size: 25px; } Ternary operator are a substitute for if...else statement. So before you move any further in this tutorial, go through C# if...else statement (if you haven't). section{ font-size: 25px; } The syntax of ternary operator is: Condition ? Expression1 : Expression2 ; The ternary operator works as follows: If the expression stated by Condition is true , the result of Expression1 is returned by the ternary operator. If it is false , the result of Expression2 is returned. section{ font-size: 25px; } For example, we can replace the following code if ( number % 2 == 0 ){ isEven = true ; } else { isEven = false ; } with isEven = ( number % 2 == 0 ) ? true : false ; section{ font-size: 25px; } Why is it called ternary operator? This operator takes 3 operand , hence called ternary operator. section{ font-size: 25px; } Example 1: C# Ternary Operator \u00b6 using System ; namespace Conditional { class Ternary { public static void Main ( string [] args ) { int number = 2 ; bool isEven ; isEven = ( number % 2 == 0 ) ? true : false ; Console . WriteLine ( isEven ); } } } section{ font-size: 25px; } When we run the program, the output will be: True section{ font-size: 25px; } In the above program, 2 is assigned to a variable number. Then, the ternary operator is used to check if number is even or not. Since, 2 is even, the expression ( number % 2 == 0 ) returns true . We can also use ternary operator to return numbers, strings and characters. section{ font-size: 25px; } Instead of storing the return value in variable isEven, we can directly print the value returned by ternary operator as, Console . WriteLine (( number % 2 == 0 ) ? true : false ); section{ font-size: 25px; } When to use ternary operator? \u00b6 Ternary operator can be used to replace multi lines of code with a single line. However, we shouldn't overuse it. section{ font-size: 25px; } For example, we can replace the following if..else if code if ( a > b ){ result = \"a is greater than b\" ; } else if ( a < b ){ result = \"b is greater than a\" ; } else { result = \"a is equal to b\" ; } section{ font-size: 25px; } with a single line of code result = a > b ? \"a is greater than b\" : a < b ? \"b is greater than a\" : \"a is equal to b\" ; section{ font-size: 25px; } As we can see, the use of ternary operator may decrease the length of code but it makes us difficult to understand the logic of the code. Hence, it's better to only use ternary operator to replace simple if else statement section{ font-size: 25px; } C# for loop \u00b6 In this article, we will learn about for loop in C# and different ways to use them in a program. In programming, it is often desired to execute certain block of statements for a specified number of times. A possible solution will be to type those statements for the required number of times. However, the number of repetition may not be known in advance (during compile time) or maybe large enough (say 10000). The best solution to such problem is loop. Loops are used in programming to repeatedly execute a certain block of statements until some condition is met. In this article, we\u2019ll look at for loop in C#. section{ font-size: 25px; } C# for loop \u00b6 The for keyword is used to create for loop in C#. The syntax for for loop is: for ( initialization ; condition ; iterator ) { // body of for loop } section{ font-size: 25px; } How for loop works? \u00b6 C# for loop has three statements: initialization , condition and iterator . section{ font-size: 25px; } The initialization statement is executed at first and only once. Here, the variable is usually declared and initialized. section{ font-size: 25px; } Then, the condition is evaluated. The condition is a boolean expression, i.e. it returns either true or false . section{ font-size: 25px; } If the condition is evaluated to true : The statements inside the for loop are executed. Then, the iterator statement is executed which usually changes the value of the initialized variable. Again the condition is evaluated. The process continues until the condition is evaluated to false . section{ font-size: 25px; } If the condition is evaluated to false , the for loop terminates. section{ font-size: 25px; } for Loop Flowchart \u00b6 Working of C# for loop section{ font-size: 25px; } Example 1: C# for Loop \u00b6 using System ; namespace Loop { class ForLoop { public static void Main ( string [] args ) { for ( int i = 1 ; i <= 5 ; i ++) { Console . WriteLine ( \"C# For Loop: Iteration {0}\" , i ); } } } } section{ font-size: 25px; } When we run the program, the output will be: C# For Loop: Iteration 1 C# For Loop: Iteration 2 C# For Loop: Iteration 3 C# For Loop: Iteration 4 C# For Loop: Iteration 5 section{ font-size: 25px; } In this program, initialization statement is int i=1 condition statement is i<=5 iterator statement is i++ section{ font-size: 25px; } When the program runs, section{ font-size: 25px; } First, the variable i is declared and initialized to 1. section{ font-size: 25px; } Then, the condition ( i<=5 ) is evaluated. section{ font-size: 25px; } Since, the condition returns true , the program then executes the body of the for loop. It prints the given line with Iteration 1 (Iteration simply means repetition). section{ font-size: 25px; } Now, the iterator ( i++ ) is evaluated. This increments the value of i to 2. section{ font-size: 25px; } The condition ( i<=5 ) is evaluated again and at the end, the value of i is incremented by 1. The condition will evaluate to true for the first 5 times. section{ font-size: 25px; } When the value of i will be 6 and the condition will be false , hence the loop will terminate. section{ font-size: 25px; } Example 2: for loop to compute sum of first n natural numbers \u00b6 using System ; namespace Loop { class ForLoop { public static void Main ( string [] args ) { int n = 5 , sum = 0 ; for ( int i = 1 ; i <= n ; i ++) { // sum = sum + i; sum += i ; } Console . WriteLine ( \"Sum of first {0} natural numbers = {1}\" , n , sum ); } } } section{ font-size: 25px; } When we run the program, the output will be: Sum of first 5 natural numbers = 15 section{ font-size: 25px; } Here, the value of sum and n are initialized to 0 and 5 respectively. The iteration variable i is initialized to 1 and incremented on each iteration. Inside the for loop, value of sum is incremented by i i.e. sum = sum + i . The for loop continues until i is less than or equal to n (user's input). section{ font-size: 25px; } Let's see what happens in the given program on each iteration. Initially, i = 1, sum = 0 and n = 3 For loop execution steps Iteration Value of i i<=5 Value of sum 1 1 true 0+1 = 1 --- 2 2 true 1+2 = 3 --- 3 3 true 3+3 = 6 --- 4 4 true 6+4 = 10 --- 5 5 true 10+5 = 15 --- 6 6 false Loop terminates --- So, the final value of sum will be 15 when n = 5. section{ font-size: 25px; } Multiple expressions inside a for loop \u00b6 We can also use multiple expressions inside a for loop. It means we can have more than one initialization and/or iterator statements within a for loop. Let's see the example below. section{ font-size: 25px; } Example 3: for loop with multiple initialization and iterator expressions \u00b6 using System ; namespace Loop { class ForLoop { public static void Main ( string [] args ) { for ( int i = 0 , j = 0 ; i + j <= 5 ; i ++, j ++) { Console . WriteLine ( \"i = {0} and j = {1}\" , i , j ); } } } } section{ font-size: 25px; } When we run the program, the output will be: i = 0 and j = 0 i = 1 and j = 1 i = 2 and j = 2 section{ font-size: 25px; } In this program, we have declared and initialized two variables: i and j in the initialization statement. Also, we have two expressions in the iterator part. That means both i and j are incremented by 1 on each iteration. section{ font-size: 25px; } For loop without initialization and iterator statements \u00b6 The initialization, condition and the iterator statement are optional in a for loop. It means we can run a for loop without these statements as well. In such cases, for loop acts as a while loop . Let's see the example below. section{ font-size: 25px; } Example 4: for loop without initialization and iterator statement \u00b6 using System ; namespace Loop { class ForLoop { public static void Main ( string [] args ) { int i = 1 ; for ( ; i <= 5 ; ) { Console . WriteLine ( \"C# For Loop: Iteration {0}\" , i ); i ++; } } } } section{ font-size: 25px; } When we run the program, the output will be: C# For Loop: Iteration 1 C# For Loop: Iteration 2 C# For Loop: Iteration 3 C# For Loop: Iteration 4 C# For Loop: Iteration 5 section{ font-size: 25px; } In this example, we haven't used the initialization and iterator statement. The variable i is initialized above the for loop and its value is incremented inside the body of loop. This program is same as the one in Example 1. Similarly, the condition is also an optional statement. However if we don't use test expression, the for loop won't test any condition and will run forever (infinite loop). section{ font-size: 25px; } Infinite for loop \u00b6 If the condition in a for loop is always true, for loop will run forever. This is called infinite for loop. section{ font-size: 25px; } Example 5: Infinite for loop \u00b6 using System ; namespace Loop { class ForLoop { public static void Main ( string [] args ) { for ( int i = 1 ; i > 0 ; i ++) { Console . WriteLine ( \"C# For Loop: Iteration {0}\" , i ); } } } } section{ font-size: 25px; } Here, i is initialized to 1 and the condition is i>0 . On each iteration we are incrementing the value of i by 1, so the condition will never be false . This will cause the loop to execute infinitely. section{ font-size: 25px; } We can also create an infinite loop by replacing the condition with a blank. For example, for ( ; ; ) { // body of for loop } or for ( initialization ; ; iterator ){ // body of for loop } section{ font-size: 25px; } C# while and do...while loop \u00b6 In this article, we will learn about while and do...while loop in C#, how to use them and difference between them. In programming, it is often desired to execute certain block of statements for a specified number of times. A possible solution will be to type those statements for the required number of times. However, the number of repetition may not be known in advance (during compile time) or maybe large enough (say 10000). The best solution to such problem is loop. Loops are used in programming to repeatedly execute a certain block of statements until some condition is met. In this article, we'll learn to use while loops in C#. section{ font-size: 25px; } C# while loop \u00b6 The while keyword is used to create while loop in C#. The syntax for while loop is: while ( test - expression ){ // body of while } section{ font-size: 25px; } How while loop works? \u00b6 C# while loop consists of a test-expression . If the test-expression is evaluated to true , statements inside the while loop are executed. after execution, the test-expression is evaluated again. If the test-expression is evaluated to false , the while loop terminates. section{ font-size: 25px; } while loop Flowchart \u00b6 section{ font-size: 25px; } Example 1: while Loop \u00b6 using System ; namespace Loop { class WhileLoop { public static void Main ( string [] args ) { int i = 1 ; while ( i <= 5 ) { Console . WriteLine ( \"C# For Loop: Iteration {0}\" , i ); i ++; } } } } section{ font-size: 25px; } When we run the program, the output will be: C# For Loop: Iteration 1 C# For Loop: Iteration 2 C# For Loop: Iteration 3 C# For Loop: Iteration 4 C# For Loop: Iteration 5 section{ font-size: 25px; } Initially the value of i is 1. When the program reaches the while loop statement, the test expression i <=5 is evaluated. Since i is 1 and 1 <= 5 is true , it executes the body of the while loop. Here, the line is printed on the screen with Iteration 1, and the value of i is increased by 1 to become 2. Now, the test expression ( i <=5 ) is evaluated again. This time too, the expression returns true (2 <= 5), so the line is printed on the screen and the value of i is now incremented to 3.. This goes and the while loop executes until i becomes 6. At this point, the test-expression will evaluate to false and hence the loop terminates. section{ font-size: 25px; } Example 2: while loop to compute sum of first 5 natural numbers \u00b6 using System ; namespace Loop { class WhileLoop { public static void Main ( string [] args ) { int i = 1 , sum = 0 ; while ( i <= 5 ) { sum += i ; i ++; } Console . WriteLine ( \"Sum = {0}\" , sum ); } } } section{ font-size: 25px; } When we run the program, the output will be: Sum = 15 section{ font-size: 25px; } This program computes the sum of first 5 natural numbers. Initially the value of sum is initialized to 0. On each iteration, the value of sum is updated to sum+i and the value of i is incremented by 1. When the value of i reaches 6, the test expression i<=5 will return false and the loop terminates. section{ font-size: 25px; } Let's see what happens in the given program on each iteration. Initially, i = 1, sum = 0, While loop execution steps For loop execution steps Iteration Value of i i<=5 Value of sum 1 1 true 0+1 = 1 --- 2 2 true 1+2 = 3 --- 3 3 true 3+3 = 6 --- 4 4 true 6+4 = 10 --- 5 5 true 10+5 = 15 --- 6 6 false Loop terminates --- So, the final value of sum will be 15. section{ font-size: 25px; } C# do...while loop \u00b6 The do and while keyword is used to create a do...while loop. It is similar to a while loop, however there is a major difference between them. In while loop, the condition is checked before the body is executed. It is the exact opposite in do...while loop, i.e. condition is checked after the body is executed. This is why, the body of do...while loop will execute at least once irrespective to the test-expression. section{ font-size: 25px; } The syntax for do...while loop is: do { // body of do while loop } while ( test - expression ); section{ font-size: 25px; } How do...while loop works? \u00b6 The body of do...while loop is executed at first. Then the test-expression is evaluated. If the test-expression is true , the body of loop is executed. When the test-expression is false , do...while loop terminates. section{ font-size: 25px; } do...while loop Flowchart \u00b6 section{ font-size: 25px; } Example 3: do...while loop \u00b6 using System ; namespace Loop { class DoWhileLoop { public static void Main ( string [] args ) { int i = 1 , n = 5 , product ; do { product = n * i ; Console . WriteLine ( \"{0} * {1} = {2}\" , n , i , product ); i ++; } while ( i <= 10 ); } } } section{ font-size: 25px; } When we run the program, the output will be: 5 * 1 = 5 5 * 2 = 10 5 * 3 = 15 5 * 4 = 20 5 * 5 = 25 5 * 6 = 30 5 * 7 = 35 5 * 8 = 40 5 * 9 = 45 5 * 10 = 50 section{ font-size: 25px; } As we can see, the above program prints the multiplication table of a number (5). Initially, the value of i is 1. The program, then enters the body of do..while loop without checking any condition (as opposed to while loop). Inside the body, product is calculated and printed on the screen. The value of i is then incremented to 2. After the execution of the loop\u2019s body, the test expression i <= 10 is evaluated. In total, the do...while loop will run for 10 times. Finally, when the value of i is 11, the test-expression evaluates to false and hence terminates the loop. section{ font-size: 25px; } Infinite while and do...while loop \u00b6 If the test expression in the while and do...while loop never evaluates to false , the body of loop will run forever. Such loops are called infinite loop. section{ font-size: 25px; } For example: Infinite while loop \u00b6 while ( true ) { // body of while loop } section{ font-size: 25px; } Infinite do...while loop \u00b6 do { // body of while loop } while ( true ); section{ font-size: 25px; } The infinite loop is useful when we need a loop to run as long as our program runs. For example, if your program is an animation, you will need to constantly run it until it is stopped. In such cases, an infinite loop is necessary to keep running the animation repeatedly. section{ font-size: 25px; } Nested Loops in C#: for, while, do-while \u00b6 In this article, we will learn about nested loops in C#. We'll learn to use nested for, while and do-while loops in a program. section{ font-size: 25px; } A loop within another loop is called nested loop. This is how a nested loop looks like: Outer - Loop { // body of outer-loop Inner - Loop { // body of inner-loop } ... ... ... } section{ font-size: 25px; } As you can see, the outer loop encloses the inner loop . The inner loop is a part of the outer loop and must start and finish within the body of outer loop. On each iteration of outer loop, the inner loop is executed completely. section{ font-size: 25px; } Nested for loop \u00b6 A for loop inside another for loop is called nested for loop. section{ font-size: 25px; } For example: for ( int i = 0 ; i < 5 ; i ++) { // body of outer for loop for ( int j = 0 ; j < 5 ; j ++) { // body of inner for loop } // body of outer for loop } section{ font-size: 25px; } Example 1: Nested for Loop \u00b6 using System ; namespace Loop { class NestedForLoop { public static void Main ( string [] args ) { int outerLoop = 0 , innerLoop = 0 ; for ( int i = 1 ; i <= 5 ; i ++) { outerLoop ++; for ( int j = 1 ; j <= 5 ; j ++) { innerLoop ++; } } Console . WriteLine ( \"Outer Loop runs {0} times\" , outerLoop ); Console . WriteLine ( \"Inner Loop runs {0} times\" , innerLoop ); } } } section{ font-size: 25px; } When we run the program, the output will be: Outer Loop runs 5 times Inner Loop runs 25 times In this program, the outer loop runs for 5 times. Each time the outer loop runs, the inner loop runs for 5 times making it run 25 times altogether. section{ font-size: 25px; } Example 2: Nested for Loop to Print Pattern \u00b6 using System ; namespace Loop { class NestedForLoop { public static void Main ( string [] args ){ for ( int i = 1 ; i <= 5 ; i ++){ for ( int j = 1 ; j <= i ; j ++){ Console . Write ( j + \" \" ); } Console . WriteLine (); } } } } section{ font-size: 25px; } When we run the program, the output will be: 1 1 2 1 2 3 1 2 3 4 1 2 3 4 5 section{ font-size: 25px; } Nested while loop \u00b6 A while loop inside another while loop is called nested while loop. For example: while ( condition - 1 ) { // body of outer while loop while ( condition - 2 ) { // body of inner while loop } // body of outer while loop } section{ font-size: 25px; } Example 3: Nested while Loop \u00b6 using System ; namespace Loop { class NestedWhileLoop { public static void Main ( string [] args ) { int i = 0 ; while ( i < 2 ) { int j = 0 ; while ( j < 2 ) { Console . Write ( \"({0},{1}) \" , i , j ); j ++; } i ++; Console . WriteLine (); } } } } section{ font-size: 25px; } When we run the program, the output will be: ( 0 ,0 ) ( 0 ,1 ) ( 1 ,0 ) ( 1 ,1 ) section{ font-size: 25px; } Nested do-while loop \u00b6 A do-while loop inside another do-while loop is called nested do-while loop. For example: do { // body of outer while loop do { // body of inner while loop } while ( condition - 2 ); // body of outer while loop } while ( condition - 1 ); section{ font-size: 25px; } Example 4: Nested do-while Loop \u00b6 using System ; namespace Loop { class NestedWhileLoop { public static void Main ( string [] args ) { int i = 0 ; do { int j = 0 ; do { Console . Write ( \"({0},{1}) \" , i , j ); j ++; } while ( j < 2 ); i ++; Console . WriteLine (); } while ( i < 2 ); } } } section{ font-size: 25px; } When we run the program, the output will be: ( 0 ,0 ) ( 0 ,1 ) ( 1 ,0 ) ( 1 ,1 ) section{ font-size: 25px; } Different inner and outer nested loops \u00b6 It is not mandatory to nest same type of loop. We can put a for loop inside a while loop or a do-while loop inside a for loop. section{ font-size: 25px; } Example 5: C# Nested Loop: Different inner and outer loops \u00b6 using System ; namespace Loop { class NestedLoop { public static void Main ( string [] args ) { int i = 1 ; while ( i <= 5 ) { for ( int j = 1 ; j <= i ; j ++) { Console . Write ( i + \" \" ); } Console . WriteLine (); i ++; } } } } section{ font-size: 25px; } When we run the program, the output will be: 1 2 2 3 3 3 4 4 4 4 5 5 5 5 5 In the above program, a for loop is placed within a while loop. We can use different types of loop inside a loop. section{ font-size: 25px; } C# break Statement \u00b6 In this tutorial, you will learn about the working C# break statement with the help of examples. In C#, we use the break statement to terminate the loop. As we know, loops iterate over a block of code until the test expression is false. However, sometimes we may need to terminate the loop immediately without checking the test expression. section{ font-size: 25px; } In such cases, the break statement is used. The syntax of break statement is, break ; section{ font-size: 25px; } Before we learn about break , make sure to learn about for loop if...else while loop section{ font-size: 25px; } Example: C# break statement with for loop \u00b6 using System ; namespace CSharpBreak { class Program { static void Main ( string [] args ) { for ( int i = 1 ; i <= 4 ; ++ i ) { // terminates the loop if ( i == 3 ) { break ; } Console . WriteLine ( i ); } Console . ReadLine (); } } } section{ font-size: 25px; } Output 1 2 section{ font-size: 25px; } In the above program, our for loop runs 4 times from i = 1 to 4 . However, when i is equal to 3 , the break statement is encountered. if ( i == 3 ) { break ; } section{ font-size: 25px; } Now, the loop is terminated suddenly. So, we only get 1 and 2 as output. Note : The break statement is used with decision-making statements like if..else. section{ font-size: 25px; } Example: C# break statement with while loop \u00b6 using System ; namespace WhileBreak { class Program { static void Main ( string [] args ) { int i = 1 ; while ( i <= 5 ) { Console . WriteLine ( i ); i ++; if ( i == 4 ) { // terminates the loop break ; } } Console . ReadLine (); } } } section{ font-size: 25px; } Output 1 2 3 section{ font-size: 25px; } In the above example, we have created a while loop that is supposed to run from i = 1 to 5 . However, when i is equal to 4 , the break statement is encountered. if ( i == 4 ) { break ; } Now, the while loop is terminated. section{ font-size: 25px; } Working of break statement in C \u00b6 section{ font-size: 25px; } break Statement with Nested Loop \u00b6 We can also use the break statement with nested loops. For example, using System ; namespace NestedBreak { class Program { static void Main ( string [] args ) { int sum = 0 ; for ( int i = 1 ; i <= 3 ; i ++) { //outer loop // inner loop for ( int j = 1 ; j <= 3 ; j ++) { if ( i == 2 ) { break ; } Console . WriteLine ( \"i = \" + i + \" j = \" + j ); } } Console . ReadLine (); } } } section{ font-size: 25px; } Output i = 1 j = 1 i = 1 j = 2 i = 1 j = 3 i = 3 j = 1 i = 3 j = 2 i = 3 j = 3 section{ font-size: 25px; } In the above example, we have used the break statement inside the inner for loop. Here, the break statement is executed when i == 2 . Hence, the value of i = 2 is never printed. Note : The break statement only terminates the inner for loop. This is because we have used the break statement inside the inner loop. If you want to learn the working of nested loops, visit C# Nested Loops . section{ font-size: 25px; } break with foreach Loop \u00b6 We can also use the break statement with foreach loops. For example, using System ; namespace ForEachBreak { class Program { static void Main ( string [] args ) { int [] num = { 1 , 2 , 3 , 4 , 5 }; // use of for each loop foreach ( int number in num ) { // terminates the loop if ( number == 3 ) { break ; } Console . WriteLine ( number ); } } } } section{ font-size: 25px; } Output 1 2 section{ font-size: 25px; } In the above example, we have created an array with values: 1 , 2 , 3 , 4 , 5 . Here, we have used the foreach loop to print each element of the array. However, the loop only prints 1 and 2 . This is because when the number is equal to 3 , the break statement is executed. if ( number == 3 ) { break ; } This immediately terminates the foreach loop . section{ font-size: 25px; } break with Switch Statement \u00b6 We can also use the break statement inside a switch case statement. For example, using System ; namespace ConsoleApp1 { class Program { static void Main ( string [] args ) { char ch = 'e' ; switch ( ch ) { case 'a' : Console . WriteLine ( \"Vowel\" ); break ; case 'e' : Console . WriteLine ( \"Vowel\" ); break ; case 'i' : Console . WriteLine ( \"Vowel\" ); break ; case 'o' : Console . WriteLine ( \"Vowel\" ); break ; case 'u' : Console . WriteLine ( \"Vowel\" ); break ; default : Console . WriteLine ( \"Not a vowel\" ); } } } } section{ font-size: 25px; } Output Vowel section{ font-size: 25px; } Here, we have used the break statement inside each case. It helps us to terminate the switch statement when a matching case is found. To learn more, visit C# switch statement . section{ font-size: 25px; } C# continue Statement \u00b6 In this tutorial, you will learn about the working of C# continue statement with the help of examples. In C#, we use the continue statement to skip a current iteration of a loop. When our program encounters the continue statement, the program control moves to the end of the loop and executes the test condition (update statement in case of for loop). section{ font-size: 25px; } The syntax for continue is: continue ; section{ font-size: 25px; } Before we learn about continue, make sure to learn about for loop while loop if...else section{ font-size: 25px; } Example1: C# continue with for loop \u00b6 using System ; namespace ContinueLoop { class Program { static void Main ( string [] args ){ for ( int i = 1 ; i <= 5 ; ++ i { if ( i == 3 ) { continue ; } Console . WriteLine ( i ); } } } } section{ font-size: 25px; } Output 1 2 4 5 section{ font-size: 25px; } In the above example, we have used the for loop to print numbers from i = 1 to 5. However, the number 3 is not printed. This is because when the value of i is 3 , the continue statement is executed. // skips the condition if ( i == 3 ) { continue ; } This skips the current iteration of loop and moves the program control to the update statement. Hence, the value 3 is not printed. Note : The continue statement is usually used with the if...else statement. section{ font-size: 25px; } Example: C# continue with while loop \u00b6 using System ; namespace ContinueWhile { class Program { static void Main ( string [] args ) { int i = 0 ; while ( i < 5 ) { i ++; if ( i == 3 ) { continue ; } Console . WriteLine ( i ); } } } } section{ font-size: 25px; } Output 1 2 4 5 section{ font-size: 25px; } Here, we have used the continue statement inside the while loop. Similar to the earlier program, when the value of i is 3 , the continue statement is executed. Hence, 3 is not printed on the screen. section{ font-size: 25px; } Working of C# continue Statement \u00b6 section{ font-size: 25px; } continue with Nested Loop \u00b6 We use the continue statement with nested as well. For example: using System ; namespace ContinueNested { class Program { static void Main ( string [] args ) { int sum = 0 ; // outer loop for ( int i = 1 ; i <= 3 ; i ++) { // inner loop for ( int j = 1 ; j <= 3 ; j ++) { if ( j == 2 ) { continue ; } Console . WriteLine ( \"i = \" + i + \" j = \" + j ); } } } } } section{ font-size: 25px; } Output i = 1 j = 1 i = 1 j = 3 i = 2 j = 1 i = 2 j = 3 i = 3 j = 1 i = 3 j = 3 section{ font-size: 25px; } In the above example, we have used the continue statement inside the inner for loop. Here, the continue statement is executed when j == 2 . Hence, the value of j = 2 is ignored. If you want to learn the working of nested loops, visit C# Nested Loops . section{ font-size: 25px; } C# continue with foreach Loop \u00b6 We can also use the continue statement with foreach loops. For example, using System ; namespace ContinueForeach { class Program { static void Main ( string [] args ) { int [] num = { 1 , 2 , 3 , 4 , 5 }; foreach ( int number in num ) { // skips the iteration if ( number == 3 ) { continue ; } Console . WriteLine ( number ); } } } } section{ font-size: 25px; } Output 1 2 4 5 section{ font-size: 25px; } In the above example, we have created an array with values: 1 , 2 , 3 , 4 , 5 . Here, we have used the foreach loop to print each element of the array. However, the loop doesn't print the value 3 . This is because when the number is equal to 3 , the continue statement is executed. if ( number == 3 ) { continue ; } Hence, the print statement for this iteration is skipped. section{ font-size: 25px; } Arrays \u00b6 section{ font-size: 25px; } C# Arrays \u00b6 In this tutorial, we will learn about C# arrays. We will learn to create, initialize, and access array with the help of examples. An array is a collection of similar types of data. section{ font-size: 25px; } For example, Suppose we need to record the age of 5 students. Instead of creating 5 separate variables, we can simply create an array: section{ font-size: 25px; } Elements of an Array section{ font-size: 25px; } 1. C# Array Declaration \u00b6 In C#, here is how we can declare an array. datatype [] arrayName ; Here, dataType - data type like int , string , char , etc arrayName - it is an identifier section{ font-size: 25px; } Let's see an example, int [] age ; Here, we have created an array named age. It can store elements of int type. section{ font-size: 25px; } But how many elements can it store? To define the number of elements that an array can hold, we have to allocate memory for the array in C#. For example, // declare an array int [] age ; // allocate memory for array age = new int [ 5 ]; Here, new int[5] represents that the array can store 5 elements. We can also say the size/length of the array is 5. section{ font-size: 25px; } Note : We can also declare and allocate the memory of an array in a single line. For example, int [] age = new int [ 5 ]; section{ font-size: 25px; } 2. Array initialization in C \u00b6 In C#, we can initialize an array during the declaration. For example, int [] numbers = { 1 , 2 , 3 , 4 , 5 }; Here, we have created an array named numbers and initialized it with values 1 , 2 , 3 , 4 , and 5 inside the curly braces. section{ font-size: 25px; } Note that we have not provided the size of the array. In this case, the C# automatically specifies the size by counting the number of elements in the array (i.e. 5). In an array, we use an index number to determine the position of each array element. We can use the index number to initialize an array in C#. section{ font-size: 25px; } For example, // declare an array int [] age = new int [ 5 ]; //initializing array age [ 0 ] = 12 ; age [ 1 ] = 4 ; age [ 2 ] = 5 ; ... section{ font-size: 25px; } C# Array Initialization section{ font-size: 25px; } Note : An array index always starts at 0. That is, the first element of an array is at index 0. If the size of an array is 5, the index of the last element will be at 4 (5 - 1). section{ font-size: 25px; } 3. Access Array Elements \u00b6 We can access the elements in the array using the index of the array. For example, // access element at index 2 array [ 2 ]; // access element at index 4 array [ 4 ]; Here, array[2] - access the 3 rd element array[4] - access the 5 th element section{ font-size: 25px; } Example: C# Array \u00b6 using System ; namespace AccessArray { class Program { static void Main ( string [] args ) { // create an array int [] numbers = { 1 , 2 , 3 }; //access first element Console . WriteLine ( \"Element in first index : \" + numbers [ 0 ]); //access second element Console . WriteLine ( \"Element in second index : \" + numbers [ 1 ]); //access third element Console . WriteLine ( \"Element in third index : \" + numbers [ 2 ]); Console . ReadLine (); } } } section{ font-size: 25px; } Output Element in first index : 1 Element in second index : 2 Element in third index : 3 section{ font-size: 25px; } In the above example, we have created an array named numbers with elements 1, 2, 3 . Here, we are using the index number to access elements of the array. numbers[0] - access first element, 1 numbers[1] - access second element, 2 numbers[3] - access third element, 3 section{ font-size: 25px; } 4. Change Array Elements \u00b6 We can also change the elements of an array. To change the element, we simply assign a new value to that particular index. For example, using System ; namespace ChangeArray { class Program { static void Main ( string [] args ) { // create an array int [] numbers = { 1 , 2 , 3 }; Console . WriteLine ( \"Old Value at index 0: \" + numbers [ 0 ]); // change the value at index 0 numbers [ 0 ] = 11 ; //print new value Console . WriteLine ( \"New Value at index 0: \" + numbers [ 0 ]); Console . ReadLine (); } } } section{ font-size: 25px; } Output Old Value at index 0 : 1 New Value at index 0 : 11 section{ font-size: 25px; } In the above example, the initial value at index 0 is 1. Notice the line, //change the value at index 0 numbers [ 0 ] = 11 ; Here, we are assigning a new value of 11 to the index 0. Now, the value at index 0 is changed from 1 to 11 . section{ font-size: 25px; } 5. Iterating C# Array using Loops \u00b6 In C#, we can use loops to iterate through each element of an array. For example, section{ font-size: 25px; } Example: Using for loop \u00b6 using System ; namespace AccessArrayFor { class Program { static void Main ( string [] args ) { int [] numbers = { 1 , 2 , 3 }; for ( int i = 0 ; i < numbers . Length ; i ++) { Console . WriteLine ( \"Element in index \" + i + \": \" + numbers [ i ]); } Console . ReadLine (); } } } section{ font-size: 25px; } Output Element in index 0 : 1 Element in index 1 : 2 Element in index 2 : 3 In the above example, we have used a for loop to iterate through the elements of the array, numbers. Notice the line, numbers . Length Here, the Length property of the array gives the size of the array. We can also use a foreach loop to iterate through the elements of an array. For example, section{ font-size: 25px; } Example: Using foreach loop \u00b6 using System ; namespace AccessArrayForeach { class Program { static void Main ( string [] args ) { int [] numbers = { 1 , 2 , 3 }; Console . WriteLine ( \"Array Elements: \" ); foreach ( int num in numbers ) { Console . WriteLine ( num ); } Console . ReadLine (); } } } section{ font-size: 25px; } Output Array Elements: 1 2 3 section{ font-size: 25px; } 6. C# Array Operations using System.Linq \u00b6 In C#, we have the System.Linq namespace that provides different methods to perform various operations in an array. For example, section{ font-size: 25px; } Example: Find Minimum and Maximum Element \u00b6 using System ; // provides us various methods to use in an array using System.Linq ; namespace ArrayMinMax { class Program { static void Main ( string [] args ) { int [] numbers = { 51 , 1 , 3 , 4 , 98 }; // get the minimum element Console . WriteLine ( \"Smallest Element: \" + numbers . Min ()); // Max() returns the largest number in array Console . WriteLine ( \"Largest Element: \" + numbers . Max ()); Console . ReadLine (); } } } section{ font-size: 25px; } Output Smallest Element: 1 Largest Element: 98 In the above example, numbers.Min() - returns the smallest number in an array, 1 numbers.Max() - returns the largest number in an array, 98 section{ font-size: 25px; } Example: Find the Average of an Array \u00b6 using System ; // provides us various methods to use in an array using System.Linq ; namespace ArrayFunction { class Program { static void Main ( string [] args ) { int [] numbers = { 30 , 31 , 94 , 86 , 55 }; // get the sum of all array elements float sum = numbers . Sum (); // get the total number of elements present in the array int count = numbers . Count (); float average = sum / count ; Console . WriteLine ( \"Average : \" + average ); // compute the average Console . WriteLine ( \"Average using Average() : \" + numbers . Average ()); Console . ReadLine (); } } } section{ font-size: 25px; } Output Average : 59 .2 Average using Average () : 59 .2 section{ font-size: 25px; } In the above example, we have used numbers.Sum() to get the sum of all the elements of the array numbers.Count() to get the total number of element present inside the array section{ font-size: 25px; } We then divide the sum by count to get the average. float average = sum / count ; Here, we have also used the numbers.Average() method of the System.Linq namespace to get the average directly. Note : It is compulsory to use the System.Linq namespace while using Min() , Max() , Sum() , Count() , and Average() methods. section{ font-size: 25px; } C# Multidimensional Array \u00b6 In this tutorial, we will learn about the multidimensional array in C# using the example of two-dimensional array. Before we learn about the multidimensional arrays, make sure to know about the single-dimensional array in C# . section{ font-size: 25px; } In a multidimensional array, each element of the array is also an array. For example, int [ , ] x = { { 1 , 2 , 3 }, { 3 , 4 , 5 } }; Here, x is a multidimensional array which has two elements: {1, 2, 3} and {3, 4, 5} . And, each element of the array is also an array with 3 elements. section{ font-size: 25px; } Two-dimensional array in C \u00b6 A two-dimensional array consists of single-dimensional arrays as its elements. It can be represented as a table with a specific number of rows and columns. section{ font-size: 25px; } C# Two-dimensional array Here, rows {1, 2, 3} and {3, 4, 5} are elements of a 2D array. section{ font-size: 25px; } 1. Two-Dimensional Array Declaration \u00b6 Here's how we declare a 2D array in C#. int [ , ] x = new int [ 2 , 3 ]; Here, x is a two-dimensional array with 2 elements. And, each element is also an array with 3 elements. So, all together the array can store 6 elements ( 2 * 3 ). Note: The single comma [ , ] represents the array is 2 dimensional. section{ font-size: 25px; } 2. Two-Dimensional Array initialization \u00b6 In C#, we can initialize an array during the declaration. For example, int [ , ] x = { { 1 , 2 , 3 }, { 3 , 4 , 5 } }; Here, x is a 2D array with two elements {1, 2, 3} and {3, 4, 5} . We can see that each element of the array is also an array. section{ font-size: 25px; } We can also specify the number of rows and columns during the initialization. For example, int [ , ] x = new int [ 2 , 3 ]{ { 1 , 2 , 3 }, { 3 , 4 , 5 } }; section{ font-size: 25px; } 3. Access Elements from 2D Array \u00b6 We use the index number to access elements of a 2D array. section{ font-size: 25px; } For example, // a 2D array int [ , ] x = { { 1 , 2 , 3 }, { 3 , 4 , 5 } }; // access first element from first row x [ 0 , 0 ]; // returns 1 // access third element from second row x [ 1 , 2 ]; // returns 5 // access third element from first row x [ 0 , 2 ]; // returns 3 section{ font-size: 25px; } Elements of Two-Dimensional array in C# section{ font-size: 25px; } Example: C# 2D Array \u00b6 using System ; namespace MultiDArray { class Program { static void Main ( string [] args ) { //initializing 2D array int [ , ] numbers = {{ 2 , 3 }, { 4 , 5 }}; // access first element from the first row Console . WriteLine ( \"Element at index [0, 0] : \" + numbers [ 0 , 0 ]); // access first element from second row Console . WriteLine ( \"Element at index [1, 0] : \" + numbers [ 1 , 0 ]); } } } section{ font-size: 25px; } Output Element at index [ 0 , 0 ] : 2 Element at index [ 1 , 0 ] : 4 In the above example, we have created a 2D array named numbers with rows {2, 3} and {4, 5} . Here, we are using the index numbers to access elements of the 2D array. numbers[0, 0] - access the first element from the first row ( 2 ) numbers[1, 0] - access the first element from the second row ( 4 ) section{ font-size: 25px; } Change Array Elements \u00b6 We can also change the elements of a two-dimensional array. To change the element, we simply assign a new value to that particular index. For example, using System ; namespace MultiDArray { class Program { static void Main ( string [] args ) { int [ , ] numbers = {{ 2 , 3 }, { 4 , 5 }}; // old element Console . WriteLine ( \"Old element at index [0, 0] : \" + numbers [ 0 , 0 ]); // assigning new value numbers [ 0 , 0 ] = 222 ; // new element Console . WriteLine ( \"New element at index [0, 0] : \" + numbers [ 0 , 0 ]); } } } section{ font-size: 25px; } Output Old element at index [ 0 , 0 ] : 2 New element at index [ 0 , 0 ] : 222 In the above example, the initial value at index [0, 0] is 2 . Notice the line, // assigning new value numbers [ 0 , 0 ] = 222 ; Here, we are assigning a new value 222 at index [0, 0] . Now, the value at index [0, 0] is changed from 2 to 222 . section{ font-size: 25px; } Iterating C# Array using Loop \u00b6 using System ; namespace MultiDArray { class Program { static void Main ( string [] args ) { int [ , ] numbers = { { 2 , 3 , 9 }, { 4 , 5 , 9 } }; for ( int i = 0 ; i < numbers . GetLength ( 0 ); i ++) { Console . Write ( \"Row \" + i + \": \" ); for ( int j = 0 ; j < numbers . GetLength ( 1 ); j ++) { Console . Write ( numbers [ i , j ]+ \" \" ); } Console . WriteLine (); } } } } section{ font-size: 25px; } Output Row 0 : 2 3 9 Row 1 : 4 5 9 In the above example, we have used a nested for loop to iterate through the elements of a 2D array. Here, numbers.GetLength(0) - gives the number of rows in a 2D array numbers.GetLength(1) - gives the number of elements in the row section{ font-size: 25px; } Note : We can also create a 3D array. Technically, a 3D array is an array that has multiple two-dimensional arrays as its elements. For example, int [ , , ] numbers = { { { 1 , 3 , 5 }, { 2 , 4 , 6 } }, { { 2 , 4 , 9 }, { 5 , 7 , 11 } } }; Here, [ , , ] (2 commas) denotes the 3D array. section{ font-size: 25px; } C# Jagged Array \u00b6 In this tutorial, we will learn about the C# jagged array. We will learn to declare, initialize, and access the jagged array with the help of examples. In C#, a jagged array consists of multiple arrays as its element. However, unlike multidimensional arrays, each array inside a jagged array can be of different sizes. Before you learn about jagged array, make sure to know about C# Arrays C# Multidimensional Arrays section{ font-size: 25px; } C# Jagged Array Declaration \u00b6 Here's a syntax to declare a jagged array in C#. dataType [ ][ ] nameOfArray = new dataType [ rows ][ ]; section{ font-size: 25px; } Let's see an example, // declare jagged array int [ ][ ] jaggedArray = new int [ 2 ][ ]; Here, int - data type of the array [][] - represents jagged array jaggedArray - name of the jagged array [2][] - represents the number of elements (arrays) inside the jagged array Since we know each element of a jagged array is also an array, we can set the size of the individual array. section{ font-size: 25px; } For example, // set size of the first array as 3 jaggedArray [ 0 ] = new int [ 3 ]; // set size of second array as 2 jaggedArray [ 1 ] = new int [ 2 ]; section{ font-size: 25px; } Initializing Jagged Array \u00b6 There are different ways to initialize a jagged array. For example, section{ font-size: 25px; } 1. Using the index number Once we declare a jagged array, we can use the index number to initialize it. For example, // initialize the first array jaggedArray [ 0 ][ 0 ] = 1 ; jaggedArray [ 0 ][ 1 ] = 3 ; jaggedArray [ 0 ][ 2 ] = 5 ; // initialize the second array jaggedArray [ 1 ][ 0 ] = 2 ; jaggedArray [ 1 ][ 1 ] = 4 ; Here, index at the first square bracket represents the index of the jagged array element index at the second square bracket represents the index of the element inside each element of the jagged array section{ font-size: 25px; } 2. Initialize without setting size of array elements // declaring string jagged array int [ ][ ] jaggedArray = new int [ 2 ] [ ]; // initialize each array jaggedArray [ 0 ] = new int [] { 1 , 3 , 5 }; jaggedArray [ 1 ] = new int [] { 2 , 4 }; section{ font-size: 25px; } 3. Initialize while declaring Jagged Array int [ ][ ] jaggedArray = { new int [ ] { 10 , 20 , 30 }, new int [ ] { 11 , 22 }, new int [ ] { 88 , 99 } }; section{ font-size: 25px; } Accessing elements of a jagged array \u00b6 We can access the elements of the jagged array using the index number. For example, // access first element of second array jaggedArray [ 1 ][ 0 ]; // access second element of the second array jaggedArray [ 1 ][ 1 ]; // access second element of the first array jaggedArray [ 0 ][ 1 ]; section{ font-size: 25px; } Example: C# Jagged Array \u00b6 using System ; namespace JaggedArray { class Program { static void Main ( string [] args ) { // create a jagged array int [ ][ ] jaggedArray = { new int [] { 1 , 3 , 5 }, new int [] { 2 , 4 }, }; // print elements of jagged array Console . WriteLine ( \"jaggedArray[1][0]: \" + jaggedArray [ 1 ][ 0 ]); Console . WriteLine ( \"jaggedArray[1][1]: \" + jaggedArray [ 1 ][ 1 ]); Console . WriteLine ( \"jaggedArray[0][2]: \" + jaggedArray [ 0 ][ 2 ]); Console . ReadLine (); } } } section{ font-size: 25px; } Output jaggedArray [ 1 ][ 0 ] : 2 jaggedArray [ 1 ][ 1 ] : 4 jaggedArray [ 0 ][ 2 ] : 5 Here, inside a jagged array, - jaggedArray[1][0] - first element of the second array - jaggedArray[1][1] - second element of the second array - jaggedArray[0][2] - third element of the first array section{ font-size: 25px; } Iterating through a jagged array \u00b6 In C#, we can use loops to iterate through each element of the jagged array. For example, using System ; namespace JaggedArray { class Program { static void Main ( string [] args ) { // declare a jagged array int [][] jaggedArray = new int [ 2 ][]; // set size of Jagged Array Elements jaggedArray [ 0 ] = new int [ 3 ]; jaggedArray [ 1 ] = new int [ 2 ]; // initialize the first array jaggedArray [ 0 ][ 0 ] = 1 ; jaggedArray [ 0 ][ 1 ] = 3 ; jaggedArray [ 0 ][ 2 ] = 5 ; // initialize the second array jaggedArray [ 1 ][ 0 ] = 2 ; jaggedArray [ 1 ][ 1 ] = 2 ; // outer for loop for ( int i = 0 ; i < jaggedArray . Length ; i ++) { Console . Write ( \"Element \" + i + \": \" ); // inner for loop for ( int j = 0 ; j < jaggedArray [ i ]. Length ; j ++) { Console . Write ( jaggedArray [ i ][ j ] + \" \" ); } Console . WriteLine (); } Console . ReadLine (); } } } section{ font-size: 25px; } Output Element 0 : 1 3 5 Element 1 : 2 2 section{ font-size: 25px; } In the above example, we have used a nested for loop to iterate through the jagged array. Here, section{ font-size: 25px; } 1. Outer for loop to access the elements (arrays) of the jagged array jaggedArray.Length - gives the size of jagged array section{ font-size: 25px; } 2. Inner for loop to access the elements of the individual array inside the jagged array. jaggedArray[i].Length - gives the size of elements of the ith array inside the jagged array section{ font-size: 25px; } Jagged Array with Multidimensional Array \u00b6 In C#, we can also use multidimensional arrays as Jagged Array Elements. For example, int [ ][ , ] jaggedArrayTwoD = new int [ 2 ][ , ] { new int [,] { { 1 , 8 }, { 6 , 7 } }, new int [,] { { 0 , 3 }, { 5 , 6 }, { 9 , 10 } } }; Here, each element of the jagged array is a multidimensional array: new int[,] { {1, 8}, {6, 7} } - 2D array with 2 elements new int[ , ] { {0, 3}, {5, 6}, {9, 10} } - 2D array with 3 elements section{ font-size: 25px; } Let's see an example, using System ; namespace JaggedArray { class Program { static void Main ( string [] args ) { // declare and initialize jagged array with 2D array int [][,] jaggedArray = new int [ 3 ][ , ] { new int [ , ] { { 1 , 8 }, { 6 , 7 } }, new int [ , ] { { 0 , 3 }, { 5 , 6 }, { 9 , 10 } }, new int [ , ] { { 11 , 23 }, { 100 , 88 }, { 0 , 10 } } }; Console . WriteLine ( jaggedArray [ 0 ][ 0 , 1 ]); Console . WriteLine ( jaggedArray [ 1 ][ 2 , 1 ]); Console . WriteLine ( jaggedArray [ 2 ][ 1 , 0 ]); Console . ReadLine (); } } } section{ font-size: 25px; } Output 8 10 100 section{ font-size: 25px; } In the above example, notice the code, jaggedArray [ 0 ][ 0 , 1 ] Here, [0] - represents the first element (2D array) of the jagged array [0, 1] - represents the second element of the first array inside the 2D array section{ font-size: 25px; } C# foreach loop \u00b6 In this tutorial, we will learn about foreach loops (an alternative to for loop) and how to use them with arrays and collections. C# provides an easy to use and more readable alternative to for loop, the foreach loop when working with arrays and collections to iterate through the items of arrays/collections. The foreach loop iterates through each item, hence called foreach loop. section{ font-size: 25px; } Before moving forward with foreach loop, visit: C# for loop C# arrays C# collections section{ font-size: 25px; } Syntax of foreach loop \u00b6 foreach ( element in iterable - item ) { // body of foreach loop } Here iterable-item can be an array or a class of collection. section{ font-size: 25px; } How foreach loop works? \u00b6 section{ font-size: 25px; } The in keyword used along with foreach loop is used to iterate over the iterable-item. The in keyword selects an item from the iterable-item on each iteration and store it in the variable element. On first iteration, the first item of iterable-item is stored in element. On second iteration, the second element is selected and so on. The number of times the foreach loop will execute is equal to the number of elements in the array or collection. Here is an example of iterating through an array using the for loop: section{ font-size: 25px; } Example 1: Printing array using for loop \u00b6 using System ; namespace Loop { class ForLoop { public static void Main ( string [] args ) { char [] myArray = { 'H' , 'e' , 'l' , 'l' , 'o' }; for ( int i = 0 ; i < myArray . Length ; i ++) { Console . WriteLine ( myArray [ i ]); } } } } The same task can be done using the foreach loop. section{ font-size: 25px; } Example 2: Printing array using foreach loop \u00b6 using System ; namespace Loop { class ForEachLoop { public static void Main ( string [] args ) { char [] myArray = { 'H' , 'e' , 'l' , 'l' , 'o' }; foreach ( char ch in myArray ) { Console . WriteLine ( ch ); } } } } section{ font-size: 25px; } When we run the both program, the output will be: H e l l o section{ font-size: 25px; } In the above program, the foreach loop iterates over the array, myArray. On first iteration, the first element i.e. myArray[0] is selected and stored in ch. Similarly on the last iteration, the last element i.e. myArray[4] is selected. Inside the body of loop, the value of ch is printed. section{ font-size: 25px; } When we look at both programs, the program that uses foreach loop is more readable and easy to understand. This is because of its simple and expressive syntax. Hence, foreach loop is preferred over for loop when working with arrays and collections. section{ font-size: 25px; } Example 3: Traversing an array of gender using foreach loop \u00b6 This program computes the number of male and female candidates. using System ; namespace Loop { class ForEachLoop { public static void Main ( string [] args ){ char [] gender = { 'm' , 'f' , 'm' , 'm' , 'm' , 'f' , 'f' , 'm' , 'm' , 'f' }; int male = 0 , female = 0 ; foreach ( char g in gender ) { if ( g == 'm' ) male ++; else if ( g == 'f' ) female ++; } Console . WriteLine ( \"Number of male = {0}\" , male ); Console . WriteLine ( \"Number of female = {0}\" , female ); } } } section{ font-size: 25px; } When we run the program, the output will be: Number of male = 6 Number of female = 4 section{ font-size: 25px; } Example 4: foreach loop with List (Collection) \u00b6 This program computes the sum of elements in a List . using System ; using System.Collections.Generic ; namespace Loop { class ForEachLoop { public static void Main ( string [] args ) { var numbers = new List < int >() { 5 , - 8 , 3 , 14 , 9 , 17 , 0 , 4 }; int sum = 0 ; foreach ( int number in numbers ) { sum += number ; } Console . WriteLine ( \"Sum = {0}\" , sum ); Console . ReadLine (); } } } section{ font-size: 25px; } When we run the program, the output will be: Sum = 44 In this program, foreach loop is used to traverse through a collection. Traversing a collection is similar to traversing through an array. The first element of collection is selected on the first iteration, second element on second iteration and so on till the last element. section{ font-size: 25px; } C# Class and Object - OOP (I) \u00b6 section{ font-size: 25px; } C# Class and Object \u00b6 In this tutorial, you will learn about the concept of classes and objects in C# with the help of examples. section{ font-size: 25px; } C# is an object-oriented program. In object-oriented programming(OOP), we solve complex problems by dividing them into objects. section{ font-size: 25px; } To work with objects, we need to perform the following activities: create a class create objects from the class section{ font-size: 25px; } C# Class \u00b6 Before we learn about objects, we need to understand the working of classes. Class is the blueprint for the object. section{ font-size: 25px; } We can think of the class as a sketch (prototype) of a house . It contains all the details about the floors, doors, windows, etc. We can build a house based on these descriptions. House is the object. Like many houses can be made from the sketch, we can create many objects from a class. section{ font-size: 25px; } Create a class in C# We use the class keyword to create an object. For example, class ClassName { } section{ font-size: 25px; } Here, we have created a class named ClassName. A class can contain fields - variables to store data methods - functions to perform specific tasks section{ font-size: 25px; } Let's see an example, class Dog { //field string breed ; //method public void bark () { } } section{ font-size: 25px; } In the above example, Dog - class name breed - field bark() - method Note : In C#, fields and methods inside a class are called members of a class. section{ font-size: 25px; } C# Objects \u00b6 An object is an instance of a class. Suppose, we have a class Dog. Bulldog, German Shepherd, Pug are objects of the class. section{ font-size: 25px; } Creating an Object of a class In C#, here's how we create an object of the class. ClassName obj = new ClassName (); Here, we have used the new keyword to create an object of the class. And, obj is the name of the object. Now, let us create an object from the Dog class. Dog bullDog = new Dog (); Now, the bullDog object can access the fields and methods of the Dog class. section{ font-size: 25px; } Access Class Members using Object \u00b6 We use the name of objects along with the . operator to access members of a class. For example, section{ font-size: 25px; } using System ; namespace ClassObject { class Dog { string breed ; public void bark () { Console . WriteLine ( \"Bark Bark !!\" ); } static void Main ( string [] args ) { // create Dog object Dog bullDog = new Dog (); // access breed of the Dog bullDog . breed = \"Bull Dog\" ; Console . WriteLine ( bullDog . breed ); // access method of the Dog bullDog . bark (); Console . ReadLine (); } } } -- Output Bull Dog Bark Bark !! section{ font-size: 25px; } In the above program, we have created an object named bullDog from the Dog class. Notice that we have used the object name and the . (dot operator) to access the breed field // access breed of the Dog bullDog . breed = \"Bull Dog\" ; and the bark() method // access method of the Dog bullDog . bark (); section{ font-size: 25px; } Creating Multiple Objects of a Class \u00b6 We can create multiple objects from the same class. For example, using System ; namespace ClassObject { class Employee { string department ; static void Main ( string [] args ) { // create Employee object Employee sheeran = new Employee (); // set department for sheeran sheeran . department = \"Development\" ; Console . WriteLine ( \"Sheeran: \" + sheeran . department ); // create second object of Employee Employee taylor = new Employee (); // set department for taylor taylor . department = \"Content Writing\" ; Console . WriteLine ( \"Taylor: \" + taylor . department ); Console . ReadLine (); } } } section{ font-size: 25px; } Output Sheeran : Development Taylor : Content Writing section{ font-size: 25px; } In the above example, we have created two objects: sheeran and taylor from the Employee class. Here, you can see both the objects have their own version of the department field with different values. section{ font-size: 25px; } Creating objects in a different class \u00b6 In C#, we can also create an object of a class in another class. section{ font-size: 25px; } For example, using System ; namespace ClassObject { class Employee { public string name ; public void work ( string work ) { Console . WriteLine ( \"Work: \" + work ); } } class EmployeeDrive { static void Main ( string [] args ) { // create Employee object Employee e1 = new Employee (); Console . WriteLine ( \"Employee 1\" ); // set name of the Employee e1 . name = \"Gloria\" ; Console . WriteLine ( \"Name: \" + e1 . name ); //call method of the Employee e1 . work ( \"Coding\" ); Console . ReadLine (); } } } section{ font-size: 25px; } Output Employee 1 Name : Gloria Work : Coding section{ font-size: 25px; } In the above example, we have two classes: Employee and EmployeeDrive. Here, we are creating an object e1 of the Employee class in the EmployeeDrive class. We have used the e1 object to access the members of the Employee class from EmployeeDrive. This is possible because the members in the Employee class are public . Here, public is an access specifier that means the class members are accessible from any other classes. To learn more, visit C# Access Modifiers . section{ font-size: 25px; } Why Objects and Classes? \u00b6 Objects and classes help us to divide a large project into smaller sub-problems. section{ font-size: 25px; } Suppose you want to create a game that has hundreds of enemies and each of them has fields like health, ammo, and methods like shoot() and run(). section{ font-size: 25px; } With OOP we can create a single Enemy class with required fields and methods. section{ font-size: 25px; } Then, we can create multiple enemy objects from it. section{ font-size: 25px; } Each of the enemy objects will have its own version of health and ammo fields. And, they can use the common shoot() and run() methods. section{ font-size: 25px; } Now, instead of thinking of projects in terms of variables and methods, we can think of them in terms of objects. section{ font-size: 25px; } This helps to manage complexity as well as make our code reusable. section{ font-size: 25px; } C# Method \u00b6 In this tutorial, we will learn about the C# method with the help of examples. section{ font-size: 25px; } A method is a block of code that performs a specific task. Suppose you need to create a program to create a circle and color it. You can create two methods to solve this problem: a method to draw the circle a method to color the circle section{ font-size: 25px; } Dividing a complex problem into smaller chunks makes your program easy to understand and reusable. section{ font-size: 25px; } Declaring a Method in C \u00b6 Here's the syntax to declare a method in C#. returnType methodName () { // method body } section{ font-size: 25px; } Here, returnType - It specifies what type of value a method returns. For example, if a method has an int return type then it returns an int value. If the method does not return a value, its return type is void . methodName - It is an identifier that is used to refer to the particular method in a program. method body - It includes the programming statements that are used to perform some tasks. The method body is enclosed inside the curly braces { } section{ font-size: 25px; } Let's see an example, void display () { // code } Here, the name of the method is display(). And, the return type is void. section{ font-size: 25px; } Calling a Method in C \u00b6 In the above example, we have declared a method named display(). Now, to use the method, we need to call it. Here's how we can call the display() method. // calls the method display (); section{ font-size: 25px; } Working of C# method call section{ font-size: 25px; } Example: C# Method \u00b6 using System ; namespace Method { class Program { // method declaration public void display () { Console . WriteLine ( \"Hello World\" ); } static void Main ( string [] args ) { // create class object Program p1 = new Program (); //call method p1 . display (); Console . ReadLine (); } } } section{ font-size: 25px; } Output Hello World section{ font-size: 25px; } In the above example, we have created a method named display() . We have created an object p1 of the Program class. Notice the line, p1 . display (); Here, we are using the object to call the display() method. section{ font-size: 25px; } C# Method Return Type \u00b6 A C# method may or may not return a value. If the method doesn't return any value, we use the void keyword (shown in the above example). If the method returns any value, we use the return statement to return any value. For example, int addNumbers () { ... return sum ; } section{ font-size: 25px; } Here, we are returning the variable sum. One thing you should always remember is that the return type of the method and the returned value should be of the same type. In our code, the return type is int . Hence, the data type of sum should be of int as well. section{ font-size: 25px; } Example: Method Return Type \u00b6 using System ; namespace Method { class Program { // method declaration static int addNumbers () { int sum = 5 + 14 ; return sum ; } static void Main ( string [] args ) { // call method int sum = addNumbers (); Console . WriteLine ( sum ); Console . ReadLine (); } } } section{ font-size: 25px; } Output 19 section{ font-size: 25px; } In the above example, we have a method named addNumbers() with the int return type. int sum = addNumbers (); Here, we are storing the returned value from the addNumbers() to sum. We have used int data type to store the value because the method returns an int value. Note : As the method is static we do not create a class object before calling the method. The static method belongs to the class rather than the object of a class. section{ font-size: 25px; } C# Methods Parameters \u00b6 In C#, we can also create a method that accepts some value. These values are called method parameters. For example, int addNumber ( int a , int b ) { //code } Here, a and b are two parameters passed to the addNumber() function. section{ font-size: 25px; } If a method is created with parameters, we need to pass the corresponding values(arguments) while calling the method. For example, // call the method addNumber ( 100 , 100 ); section{ font-size: 25px; } Representation of the C# method returning a value Here, We have passed 2 arguments (100, 100). section{ font-size: 25px; } Example 1: C# Methods with Parameters \u00b6 using System ; namespace Method { class Program { int addNumber ( int a , int b ) { int sum = a + b ; return sum ; } static void Main ( string [] args ) { // create class object Program p1 = new Program (); //call method int sum = p1 . addNumber ( 100 , 100 ); Console . WriteLine ( \"Sum: \" + sum ); Console . ReadLine (); } } } section{ font-size: 25px; } Output Sum: 200 section{ font-size: 25px; } C# Methods with Single Parameter \u00b6 In C#, we can also create a method with a single parameter. For example, using System ; namespace Method { class Program { string work ( string work ) { return work ; } static void Main ( string [] args ) { // create class object Program p1 = new Program (); //call method string work = p1 . work ( \"Cleaning\" ); ; Console . WriteLine ( \"Work: \" + work ); Console . ReadLine (); } } } section{ font-size: 25px; } Output Work: Cleaning Here, the work() method has a single parameter work. section{ font-size: 25px; } Built-in methods \u00b6 So far we have defined our own methods. These are called user-defined methods . However, in C#, there are various methods that can be directly used in our program. They are called built-in methods . For example, Sqrt() - computes the square root of a number ToUpper() - converts a string to uppercase section{ font-size: 25px; } Example: Math.Sqrt() Method \u00b6 using System ; namespace Method { class Program { static void Main ( string [] args ) { // Built in method double a = Math . Sqrt ( 9 ); Console . WriteLine ( \"Square root of 9: \" + a ); } } } section{ font-size: 25px; } Output Square root of 9 : 3 section{ font-size: 25px; } In the above program, we have used double a = Math . Sqrt ( 9 ); to compute the square root of 9. Here, the Sqrt() is a built-in method that is defined inside the Math class. We can simply use built-in methods in our program without writing the method definition. To learn more, visit C# built-in methods . section{ font-size: 25px; } Method Overloading in C \u00b6 In C#, we can create two or more methods with the same name. It is known as method overloading. section{ font-size: 25px; } For example, using System ; namespace MethodOverload { class Program { // method with one parameter void display ( int a ) { Console . WriteLine ( \"Arguments: \" + a ); } // method with two parameters void display ( int a , int b ) { Console . WriteLine ( \"Arguments: \" + a + \" and \" + b ); } static void Main ( string [] args ) { Program p1 = new Program (); p1 . display ( 100 ); p1 . display ( 100 , 200 ); Console . ReadLine (); } } } section{ font-size: 25px; } Output Arguments : 100 Arguments : 100 and 200 section{ font-size: 25px; } In the above example, we have overloaded the display() method. It is possible because: one method has one parameter another has two parameter To know more visit C# Method Overloading section{ font-size: 25px; } C# Access Modifiers \u00b6 In this tutorial, we will learn about the public, private, protected, and internal access modifiers in C# with the help of examples. In C#, access modifiers specify the accessibility of types (classes, interfaces, etc) and type members (fields, methods, etc). For example, class Student { public string name ; private int num ; } Here, name - public field that can be accessed from anywhere num - private field can only be accessed within the Student class section{ font-size: 25px; } Types of Access Modifiers In C#, there are 4 basic types of access modifiers. public private protected internal section{ font-size: 25px; } 1. public access modifier \u00b6 When we declare a type or type member public , it can be accessed from anywhere. For example, using System ; namespace MyApplication { class Student { public string name = \"Sheeran\" ; public void print () { Console . WriteLine ( \"Hello from Student class\" ); } } class Program { static void Main ( string [] args ) { // creating object of Student class Student student1 = new Student (); // accessing name field and printing it Console . WriteLine ( \"Name: \" + student1 . name ); // accessing print method from Student student1 . print (); Console . ReadLine (); } } } section{ font-size: 25px; } Output Name: Sheeran Hello from Student class section{ font-size: 25px; } In the above example, we have created a class named Student with a field name and a method print(). // accessing name field and printing it Console . WriteLine ( \"Name: \" + student1 . name ); // accessing print method from Student student1 . print (); section{ font-size: 25px; } Since the field and method are public, we are able to access them from the Program class. Note : We have used the object student1 of the Student class to access its members. To learn more, visit the C# class and objects . section{ font-size: 25px; } 2. private access modifier \u00b6 When we declare a type member with the private access modifier, it can only be accessed within the same class or struct . For example, using System ; namespace MyApplication { class Student { private string name = \"Sheeran\" ; private void print () { Console . WriteLine ( \"Hello from Student class\" ); } } class Program { static void Main ( string [] args ) { // creating object of Student class Student student1 = new Student (); // accessing name field and printing it Console . WriteLine ( \"Name: \" + student1 . name ); // accessing print method from Student student1 . print (); Console . ReadLine (); } } } section{ font-size: 25px; } In the above example, we have created a class named Student with a field name and a method print(). // accessing name field and printing it Console . WriteLine ( \"Name: \" + student1 . name ); // accessing print method from Student student1 . print (); section{ font-size: 25px; } Since the field and method are private, we are not able to access them from the Program class. Here, the code will generate the following error. Error CS0122 'Student.name' is inaccessible due to its protection level Error CS0122 'Student.print()' is inaccessible due to its protection level section{ font-size: 25px; } 3. protected access modifier \u00b6 When we declare a type member as protected , it can only be accessed from the same class and its derived classes. For example, using System ; namespace MyApplication { class Student { protected string name = \"Sheeran\" ; } class Program { static void Main ( string [] args ) { // creating object of student class Student student1 = new Student (); // accessing name field and printing it Console . WriteLine ( \"Name: \" + student1 . name ); Console . ReadLine (); } } } section{ font-size: 25px; } In the above example, we have created a class named Student with a field name. Since the field is protected, we are not able to access it from the Program class. Here, the code will generate the following error. Error CS0122 ' Student . name ' is inaccessible due to its protection level section{ font-size: 25px; } Now, let's try to access the protected member from a derived class. using System ; namespace MyApplication { class Student { protected string name = \"Sheeran\" ; } // derived class class Program : Student { static void Main ( string [] args ) { // creating object of derived class Program program = new Program (); // accessing name field and printing it Console . WriteLine ( \"Name: \" + program . name ); Console . ReadLine (); } } } section{ font-size: 25px; } Output Name: Sheeran section{ font-size: 25px; } In the above example, we have created a class Student with a protected field name. Notice that we have inherited the Program class from the Student class. // accessing name field and printing it Console . WriteLine ( \"Name: \" + program . name ); Since the protected member can be accessed from derived classes, we are able to access name from the Program class. section{ font-size: 25px; } 4. internal access modifier \u00b6 When we declare a type or type member as internal , it can be accessed only within the same assembly. An assembly is a collection of types (classes, interfaces, etc) and resources (data). They are built to work together and form a logical unit of functionality. That's why when we run an assembly all classes and interfaces inside the assembly run together. To learn more, visit the C# Assembly . section{ font-size: 25px; } Example: internal within the same Assembly \u00b6 using System ; namespace Assembly { class Student { internal string name = \"Sheeran\" ; } class Program { static void Main ( string [] args ) { // creating object of Student class Student theStudent = new Student (); // accessing name field and printing it Console . WriteLine ( \"Name: \" + theStudent . name ); Console . ReadLine (); } } } section{ font-size: 25px; } Output Name: Sheeran section{ font-size: 25px; } In the above example, we have created a class named Student with a field name. Since the field is internal , we are able to access it from the Program class as they are in the same assembly. If we use internal within a single assembly, it works just like the public access modifier. section{ font-size: 25px; } Example: internal in different Assembly \u00b6 Let's create one assembly first. // Code on Assembly1 using System ; namespace Assembly1 { public class StudentName { internal string name = \"Sheeran\" ; } class Program { static void Main ( string [] args ) { } } } section{ font-size: 25px; } Here, this code is in Assembly1 . We have created an internal field name inside the class StudentName. Now, this field can only be accessed from the same assembly Assembly1 . Now, let's create another assembly. // Code on Assembly2 using System ; // access Assembly1 using Assembly1 ; namespace Assembly2 { class Program { static void Main ( string [] args ) { StudentName student = new StudentName (); // accessing name field from Assembly1 Console . Write ( student . name ); Console . ReadLine (); } } } section{ font-size: 25px; } Here, this code is in Assembly2 . We are trying to access the name field of the StudentName class( Assembly1 ). To access fields from Assembly1 , we first need to set the reference of Assembly1 in Assembly2 . Now the code using Assembly1 ; allows us to use the code from Assembly1 to Assembly2 . section{ font-size: 25px; } Here, when we try to access the name field from Assembly2 , we get an error. Error CS0122 'StudentName.name' is inaccessible due to its protection level This is because name is an internal field present in Assembly1 . section{ font-size: 25px; } 5. protected internal access modifier \u00b6 The protected internal is a combination of protected and internal access modifiers. When we declare a member protected internal , it can be accessed from the same assembly and the derived class of the containing class from any other assembly. // Code on Assembly1 using System ; namespace Assembly1 { public class Greet { protected internal string msg = \"Hello\" ; } class Program { static void Main ( string [] args ) { Greet greet = new Greet (); Console . WriteLine ( greet . msg ); Console . ReadLine (); } } } section{ font-size: 25px; } Output Hello section{ font-size: 25px; } The above code is in Assembly1 . In the above example, we have created a class named Greet with a field msg. Since the field is protected internal, we are able to access it from the Program class as they are in the same assembly. section{ font-size: 25px; } Let's derive a class from Greet in another assembly and try to access the protected internal field msg from it. // Code on Assembly2 using System ; // access Assembly1 using Assembly1 ; namespace Assembly2 { // derived class of Greet class Program : Greet { static void Main ( string [] args ) { Program greet = new Program (); // accessing name field from Assembly1 Console . Write ( greet . msg ); Console . ReadLine (); } } } section{ font-size: 25px; } Output Hello section{ font-size: 25px; } The above code is in Assembly2 . In the above example, we have inherited the Program class from the Greet class(from Assembly1 ). // accessing name field from Assembly1 Console . Write ( greet . msg ); We are able to access the msg from the Greet class of Assembly1 from Assembly2 . This is because the msg is a protected internal field and we are trying to access it from the child class of Greet. section{ font-size: 25px; } 6. private protected access modifier \u00b6 The private protected access modifier is a combination of private and protected . It is available from the C# version 7.2 and later. When we declare a member private protected , it can only be accessed within the same class, and its derived class within the same assembly. For example, // Code in Assembly1 using System ; namespace Assembly1 { public class StudentName { private protected string name = \"Sheeran\" ; } //derived class of StudentName class class Program1 : StudentName { static void Main ( string [] args ) { Program1 student = new Program1 (); // accessing name field from base class Console . Write ( student . name ); Console . ReadLine (); } } } section{ font-size: 25px; } Output Sheeran section{ font-size: 25px; } The above code is in Assembly1 In the above example, we have created a class StudentName with a private protected field name. section{ font-size: 25px; } Notice that we have inherited the Program1 class from the StudentName class. section{ font-size: 25px; } Since the private protected member can be accessed from derived classes within the same assembly, we are able to access name from the Program1 class. Let's derive a class from StudentName in another assembly and try to access the private protected field name from it. section{ font-size: 25px; } For example, // Code in Assembly2 using System ; //access Assembly1 using Assembly1 ; namespace Assembly2 { //derived class of StudentName class Program : StudentName { static void Main ( string [] args ) { Program student = new Program (); // accessing name field from Assembly1 Console . Write ( student . name ); Console . ReadLine (); } } } The above code is in Assembly2 section{ font-size: 25px; } In the above example, when we try to access the name field from the derived class of StudentName, we get an error. Error CS0122 'StudentName.name' is inaccessible due to its protection level This is because the name field is in Assembly1 and the derived class is in Assembly2 . Note : We can also use access modifiers with types (classes, interface, etc). However, we can only use types with public and internal access modifiers. section{ font-size: 25px; } C# Variable Scope \u00b6 In this tutorial, you will learn about variable scope in C# with the help of examples. A variable scope refers to the availability of variables in certain parts of the code. In C#, a variable has three types of scope: Class Level Scope Method Level Scope Block Level Scope section{ font-size: 25px; } C# Class Level Variable Scope \u00b6 In C#, when we declare a variable inside a class, the variable can be accessed within the class. This is known as class level variable scope . Class level variables are known as fields and they are declared outside of methods, constructors, and blocks of the class. For example, using System ; namespace VariableScope { class Program { // class level variable string str = \"Class Level\" ; public void display () { Console . WriteLine ( str ); } static void Main ( string [] args ) { Program ps = new Program (); ps . display (); Console . ReadLine (); } } } section{ font-size: 25px; } Output Class Level section{ font-size: 25px; } In the above example, we have initialized a variable named str inside the Program class. Since it is a class level variable, we can access it from a method present inside the class. public void display () { Console . WriteLine ( str ); } This is because the class level variable is accessible throughout the class. section{ font-size: 25px; } Note : We cannot access the class level variable through static methods. For example, suppose we have a static method inside the Program class. static void display2 () { // Access class level variable // Cause an Error Console . WriteLine ( str ); } section{ font-size: 25px; } Method Level Variable Scope \u00b6 When we declare a variable inside a method, the variable cannot be accessed outside of the method. This is known as method level variable scope . For example, using System ; namespace VariableScope { class Program { public void method1 () { // display variable inside method string str = \"method level\" ; } public void method2 () { // accessing str from method2() Console . WriteLine ( str ); } static void Main ( string [] args ) { Program ps = new Program (); ps . method2 (); Console . ReadLine (); } } } section{ font-size: 25px; } In the above example, we have created a variable named str inside method1() . // Inside method1() string str = \"method level\" ; Here, str is a method level variable. So, it cannot be accessed outside method1() . However, when we try to access the str variable from the method2() // Inside method2 Console . WriteLine ( str ); // Error code section{ font-size: 25px; } we get an error. Error CS0103 The name 'str' does not exist in the current context This is because method level variables have scope inside the method where they are created. section{ font-size: 25px; } For example, using System ; namespace VariableScope { class Program { public void display () { string str = \"inside method\" ; // accessing method level variable Console . WriteLine ( str ); } static void Main ( string [] args ) { Program ps = new Program (); ps . display (); Console . ReadLine (); } } } section{ font-size: 25px; } Output inside method section{ font-size: 25px; } Here, we have created the str variable and accessed it within the same method display() . Hence, the code runs without any error. section{ font-size: 25px; } Block Level Variable Scope in C \u00b6 When we declare a variable inside a block ( for loop , while loop , if..else ), the variable can only be accessed within the block. This is known as block level variable scope . section{ font-size: 25px; } For example, using System ; namespace VariableScope { class Program { public void display () { for ( int i = 0 ; i <= 3 ; i ++) { } Console . WriteLine ( i ); } static void Main ( string [] args ) { Program ps = new Program (); ps . display (); Console . ReadLine (); } } } section{ font-size: 25px; } In the above program, we have initialized a block level variable i inside the for loop. for ( int i = 0 ; i <= 3 ; i ++) { } section{ font-size: 25px; } Since i is a block level variable, when we try to access the variable outside the for loop, // Outside for loop Console . WriteLine ( i ); we get an error. Error CS0103 The name 'i' does not exist in the current context section{ font-size: 25px; } C# Constructor \u00b6 In this tutorial, we will learn about the C# constructors and their types with the help of examples. In C#, a constructor is similar to a method that is invoked when an object of the class is created. However, unlike methods, a constructor: has the same name as that of the class does not have any return type section{ font-size: 25px; } Create a C# constructor \u00b6 Here's how we create a constructor in C# class Car { // constructor Car () { //code } } Here, Car() is a constructor. It has the same name as its class. section{ font-size: 25px; } Call a constructor Once we create a constructor, we can call it using the new keyword. For example, new Car (); In C#, a constructor is called when we try to create an object of a class. For example, Car car1 = new Car (); Here, we are calling the Car() constructor to create an object car1. To learn more about objects, visit C# Class and Objects . section{ font-size: 25px; } Types of Constructors \u00b6 There are the following types of constructors: Parameterless Constructor Parameterized Constructor Default Constructor section{ font-size: 25px; } 1. Parameterless Constructor \u00b6 When we create a constructor without parameters, it is known as a parameterless constructor. For example, using System ; namespace Constructor { class Car { // parameterless constructor Car () { Console . WriteLine ( \"Car Constructor\" ); } static void Main ( string [] args ) { // call constructor new Car (); Console . ReadLine (); } } } section{ font-size: 25px; } Output Car Constructor section{ font-size: 25px; } In the above example, we have created a constructor named Car(). new Car (); section{ font-size: 25px; } We can call a constructor by adding a new keyword to the constructor name. section{ font-size: 25px; } 2. C# Parameterized Constructor \u00b6 In C#, a constructor can also accept parameters. It is called a parameterized constructor. For example, using System ; namespace Constructor { class Car { string brand ; int price ; // parameterized constructor Car ( string theBrand , int thePrice ) { brand = theBrand ; price = thePrice ; } static void Main ( string [] args ) { // call parameterized constructor Car car1 = new Car ( \"Bugatti\" , 50000 ); Console . WriteLine ( \"Brand: \" + car1 . brand ); Console . WriteLine ( \"Price: \" + car1 . price ); Console . ReadLine (); } } } section{ font-size: 25px; } Output Brand: Bugatti Price: 50000 section{ font-size: 25px; } In the above example, we have created a constructor named Car() . The constructor takes two parameters: theBrand and thePrice. Notice the statement, Car car1 = new Car ( \"Bugatti\" , 50000 ); Here, we are passing the two values to the constructor. The values passed to the constructor are called arguments. We must pass the same number and type of values as parameters. section{ font-size: 25px; } 3. Default Constructor \u00b6 If we have not defined a constructor in our class, then the C# will automatically create a default constructor with an empty code and no parameters. For example, using System ; namespace Constructor { class Program { int a ; static void Main ( string [] args ) { // call default constructor Program p1 = new Program (); Console . WriteLine ( \"Default value of a: \" + p1 . a ); Console . ReadLine (); } } } section{ font-size: 25px; } Output Default value of a : 0 section{ font-size: 25px; } In the above example, we have not created any constructor in the Program class. However, while creating an object, we are calling the constructor. Program p1 = new Program(); Here, C# automatically creates a default constructor. The default constructor initializes any uninitialized variable with the default value. Hence, we get 0 as the value of the int variable a. Note : In the default constructor, all the numeric fields are initialized to 0, whereas string and object are initialized as null. section{ font-size: 25px; } 4. Copy Constructor in C \u00b6 We use a copy constructor to create an object by copying data from another object. For example, using System ; namespace Constructor { class Car { string brand ; // constructor Car ( string theBrand ) { brand = theBrand ; } // copy constructor Car ( Car c1 ) { brand = c1 . brand ; } static void Main ( string [] args ) { // call constructor Car car1 = new Car ( \"Bugatti\" ); Console . WriteLine ( \"Brand of car1: \" + car1 . brand ); // call the copy constructor Car car2 = new Car ( car1 ); Console . WriteLine ( \"Brand of car2: \" + car2 . brand ); Console . ReadLine (); } } } section{ font-size: 25px; } Output Brand of car1: Bugatti Brand of car2: Bugatti In the above program, we have used a copy constructor. section{ font-size: 25px; } Car ( Car c1 ) { brand = c1 . brand ; } Here, this constructor accepts an object of Car as its parameter. So, when creating the car2 object, we have passed the car1 object as an argument to the copy constructor. section{ font-size: 25px; } Car car2 = new Car ( car1 ); Inside the copy constructor, we have assigned the value of the brand for car1 object to the brand variable for car2 object. Hence, both objects have the same value of the brand. section{ font-size: 25px; } 5. Private Constructor \u00b6 We can create a private constructor using the private access specifier . This is known as a private constructor in C#. Once the constructor is declared private, we cannot create objects of the class in other classes. section{ font-size: 25px; } Example 1: Private Constructor \u00b6 using System ; namespace Constructor { class Car { // private constructor private Car () { Console . WriteLine ( \"Private Constructor\" ); } } class CarDrive { static void Main ( string [] args ) { // call private constructor Car car1 = new Car (); Console . ReadLine (); } } } section{ font-size: 25px; } In the above example, we have created a private constructor Car(). Since private members are not accessed outside of the class, when we try to create an object of Car // inside CarDrive class Car car1 = new Car (); section{ font-size: 25px; } we get an error error CS0122: 'Car.Car()' is inaccessible due to its protection level Note : If a constructor is private, we cannot create objects of the class. Hence, all fields and methods of the class should be declared static, so that they can be accessed using the class name. section{ font-size: 25px; } 6. C# Static Constructor \u00b6 In C#, we can also make our constructor static. We use the static keyword to create a static constructor. For example, using System ; namespace Constructor { class Car { // static constructor static Car () { Console . WriteLine ( \"Static Constructor\" ); } // parameterless constructor Car () { Console . WriteLine ( \"Default Constructor\" ); } static void Main ( string [] args ) { Car car1 = new Car (); // call parameterless constructor Car car2 = new Car (); // call parameterless constructor again Console . ReadLine (); } } } section{ font-size: 25px; } In the above example, we have created a static constructor. static Car () { Console . WriteLine ( \"Static Constructor\" ); } We cannot call a static constructor directly. However, when we call a regular constructor, the static constructor gets called automatically. section{ font-size: 25px; } Car car1 = new Car (); Here, we are calling the Car() constructor. You can see that the static constructor is also called along with the regular constructor. section{ font-size: 25px; } Output Static Constructor Default Constructor Default Constructor section{ font-size: 25px; } The static constructor is called only once during the execution of the program. That's why when we call the constructor again, only the regular constructor is called. Note : We can have only one static constructor in a class. It cannot have any parameters or access modifiers. section{ font-size: 25px; } C# Constructor Overloading \u00b6 In C#, we can create two or more constructor in a class. It is known as constructor overloading. section{ font-size: 25px; } For example, using System ; namespace ConstructorOverload { class Car { // constructor with no parameter Car () { Console . WriteLine ( \"Car constructor\" ); } // constructor with one parameter Car ( string brand ) { Console . WriteLine ( \"Car constructor with one parameter\" ); Console . WriteLine ( \"Brand: \" + brand ); } static void Main ( string [] args ) { // call constructor with no parameter Car car = new Car (); Console . WriteLine (); // call constructor with parameter Car car2 = new Car ( \"Bugatti\" ); Console . ReadLine (); } } } section{ font-size: 25px; } Output Car constructor Car constructor with one parameter Brand : Bugatti section{ font-size: 25px; } In the above example, we have overloaded the Car constructor: one constructor has one parameter another has two parameter section{ font-size: 25px; } Based on the number of the argument passed during the constructor call, the corresponding constructor is called. Here, Object car - calls constructor with one parameter Object car2 - calls constructor with two parameter To learn more visit C# Constructor Overloading . section{ font-size: 25px; } C# this Keyword \u00b6 In this article, we will learn about this keyword in C# with the help of examples. In C#, this keyword refers to the current instance of a class. section{ font-size: 25px; } For example, using System ; namespace ThisKeyword { class Test { int num ; Test ( int num ) { // this.num refers to the instance field this . num = num ; Console . WriteLine ( \"object of this: \" + this ); } static void Main ( string [] args ) { Test t1 = new Test ( 4 ); Console . WriteLine ( \"object of t1: \" + t1 ); Console . ReadLine (); } } } section{ font-size: 25px; } Output object of this: ThisKeyword.Test object of t1: ThisKeyword.Test section{ font-size: 25px; } In the above example, we have created an object named t1 of the class Test. We have printed the name of the object t1 and this keyword of the class. Here, we can see the name of both t1 and this is the same. This is because this keyword refers to the current instance of the class which is t1. section{ font-size: 25px; } Here are some of the major uses of this keyword in C#. section{ font-size: 25px; } C# this with Same Name Variables \u00b6 We cannot declare two or more variables with the same name inside a scope (class or method). However, instance variables and parameters may have the same name. For example, using System ; namespace ThisKeyword { class Test { int num ; Test ( int num ) { num = num ; } static void Main ( string [] args ) { Test t1 = new Test ( 4 ); Console . WriteLine ( \"value of num: \" + t1 . num ); Console . ReadLine (); } } } section{ font-size: 25px; } Output 0 section{ font-size: 25px; } In the above program, the instance variable and the parameter have the same name: num. We have passed 4 as a value to the constructor. However, we are getting 0 as an output. This is because the C# gets confused because the names of the instance variable and the parameter are the same. We can solve this issue by using this . section{ font-size: 25px; } Example: this with Same Name Variables \u00b6 using System ; namespace ThisKeyword { class Test { int num ; Test ( int num ) { // this.num refers to the instance field this . num = num ; } static void Main ( string [] args ) { Test t1 = new Test ( 4 ); Console . WriteLine ( \"value of num: \" + t1 . num ); Console . ReadLine (); } } } section{ font-size: 25px; } Output value of num: 4 section{ font-size: 25px; } Now, we are getting the expected output that is 4 . It is because this.num refers to the instance variable of the class. So, there is no confusion between the names of the instance variable and the parameter. section{ font-size: 25px; } Invoke Constructor of the Same Class Using this \u00b6 While working with constructor overloading, we might have to invoke one constructor from another constructor. In this case, we can use this keyword. For example, using System ; namespace ThisKeyword { class Test { Test ( int num1 , int num2 ) { Console . WriteLine ( \"Constructor with two parameter\" ); } // invokes the constructor with 2 parameters Test ( int num ) : this ( 33 , 22 ) { Console . WriteLine ( \"Constructor with one parameter\" ); } public static void Main ( String [] args ) { Test t1 = new Test ( 11 ); Console . ReadLine (); } } } section{ font-size: 25px; } Output Constructor with two parameter Constructor with one parameter section{ font-size: 25px; } In the above example, we have used : followed by this keyword to call constructor Test(int num1, num2) from the constructor Test(int num) . When we call the Test(int num) constructor the Test(int num1, int num2) constructor executes first. Note : Calling one constructor from another constructor is known as constructor chaining. section{ font-size: 25px; } C# this as an object argument \u00b6 We can use this keyword to pass the current object as an argument to a method. For example, using System ; namespace ThisKeyword { class Test { int num1 ; int num2 ; Test () { num1 = 22 ; num2 = 33 ; } // method that accepts this as argument void passParameter ( Test t1 ) { Console . WriteLine ( \"num1: \" + num1 ); Console . WriteLine ( \"num2: \" + num2 ); } void display () { // passing this as a parameter passParameter ( this ); } public static void Main ( String [] args ) { Test t1 = new Test (); t1 . display (); Console . ReadLine (); } } } section{ font-size: 25px; } Output num1: 22 num2: 33 In the above program, we have a method passParameter(). It accepts the object of the class as an argument. section{ font-size: 25px; } passParameter ( this ); Here, we have passed this to the passParameter() method. As this refers to the instance of the class, we are able to access the value of num1 and num2. section{ font-size: 25px; } this to declare a C# indexer \u00b6 Indexers allow objects of a class to be indexed just like arrays. We use this keyword to declare an indexer in C#. For example, using System ; namespace ThisKeyword { class Student { private string [] name = new string [ 3 ]; // declaring an indexer public string this [ int index ] { // returns value of array element get { return name [ index ]; } // sets value of array element set { name [ index ] = value ; } } } class Program { public static void Main () { Student s1 = new Student (); s1 [ 0 ] = \"Ram\" ; s1 [ 1 ] = \"Shyam\" ; s1 [ 2 ] = \"Gopal\" ; for ( int i = 0 ; i < 3 ; i ++) { Console . WriteLine ( s1 [ i ] + \" \" ); } } } } section{ font-size: 25px; } Output Ram Shyam Gopal In the above program, we have created an indexer using this keyword. section{ font-size: 25px; } The array name[] is private. So, we cannot access it from the Program class. Now, to access and set the value of the array, we use an indexer. Student s1 = new Student (); s1 [ 0 ] = \"Ram\" ; s1 [ 1 ] = \"Shyam\" ; s1 [ 2 ] = \"Gopal\" ; As we have used this to create an indexer, we must use the object of the Student class to access the indexer. To know more about the indexer, visit C# indexer. section{ font-size: 25px; } C# static Keyword \u00b6 In this tutorial, we will learn about the static keyword in C# with the help of examples. In C#, if we use a static keyword with class members, then there will be a single copy of the type member. And, all objects of the class share a single copy instead of creating individual copies. section{ font-size: 25px; } C# Static Variables \u00b6 If a variable is declared static , we can access the variable using the class name. For example, using System ; namespace StaticKeyword { class Student { // static variable public static string department = \"Computer Science\" ; } class Program { static void Main ( string [] argos ) { // access static variable Console . WriteLine ( \"Department: \" + Student . department ); Console . ReadLine (); } } } section{ font-size: 25px; } Output Department: Computer Science In the above example, we have created a static variable named department. Since the variable is static, we have used the class name Student to access the variable. section{ font-size: 25px; } Static Variables Vs Instance Variables \u00b6 In C#, every object of a class will have its own copy of instance variables. For example, class Student { // instance variable public string studentName ; } class Program { static void Main ( string [] args ) { Student s1 = new Student (); Student s2 = new Student (); } } Here, both the objects s1 and s2 will have separate copies of the variable studentName. And, they are different from each other. section{ font-size: 25px; } However, if we declare a variable static, all objects of the class share the same static variable. And, we don't need to create objects of the class to access the static variables. section{ font-size: 25px; } Example: C# Static Variable Vs. Instance Variable \u00b6 using System ; namespace StaticKeyword { class Student { static public string schoolName = \"Programiz School\" ; public string studentName ; } class Program { static void Main ( string [] args ) { Student s1 = new Student (); s1 . studentName = \"Ram\" ; // calls instance variable Console . WriteLine ( \"Name: \" + s1 . studentName ); // calls static variable Console . WriteLine ( \"School: \" + Student . schoolName ); Student s2 = new Student (); s2 . studentName = \"Shyam\" ; // calls instance variable Console . WriteLine ( \"Name: \" + s2 . studentName ); // calls static variable Console . WriteLine ( \"School: \" + Student . schoolName ); Console . ReadLine (); } } } section{ font-size: 25px; } Output Name: Ram School: Programiz School Name: Shyam School: Programiz School In the above program, the Student class has a non-static variable named studentName and a static variable named schoolName. section{ font-size: 25px; } Inside the Program class, s1.studentName / s2.studentName - calls the non-static variable using objects s1 and s2 respectively Student.schoolName - calls the static variable by using the class name Since the schoolName is the same for all students, it is good to make the schoolName static. It saves memory and makes the program more efficient. section{ font-size: 25px; } C# Static Methods \u00b6 Just like static variables, we can call the static methods using the class name. class Test { public static void display () {....} } class Program { static void Main ( string [] args ) { Test . display (); } } section{ font-size: 25px; } Here, we have accessed the static method directly from Program classes using the class name. When we declare a method static, all objects of the class share the same static method. section{ font-size: 25px; } Example: C# Static and Non-static Methods \u00b6 using System ; namespace StaticKeyword { class Test { public void display1 () { Console . WriteLine ( \"Non static method\" ); } public static void display2 () { Console . WriteLine ( \"Static method\" ); } } class Program { static void Main ( string [] args ) { Test t1 = new Test (); t1 . display1 (); Test . display2 (); Console . ReadLine (); } } } section{ font-size: 25px; } Output Non static method Static method section{ font-size: 25px; } In the above program, we have declared a non-static method named display1() and a static method named display2() inside the class Test. Inside the Program class, t1.display1() - access the non-static method using s1 object Test.display2() - access the static method using the class name Test Note : In C#, the Main method is static. So, we can call it without creating the object. section{ font-size: 25px; } C# Static Class \u00b6 In C#, when we declare a class as static, we cannot create objects of the class. For example, using System ; namespace StaticKeyword { static class Test { static int a = 5 ; static void display () { Console . WriteLine ( \"Static method\" ); } static void Main ( string [] args ) { // creating object of Test Test t1 = new Test (); Console . WriteLine ( a ); display (); } } } section{ font-size: 25px; } In the above example, we have a static class Test. We have created an object t1 of the class Test. Since we cannot make an object of the static class, we get the following error: error CS0723: Cannot declare a variable of static type 'Test' error CS0712: Cannot create an instance of the static class Notice the field and method of the static class are also static because we can only have static members inside the static class. section{ font-size: 25px; } Note : We cannot inherit a static class in C#. For example, static class A { ... } // Error Code class B : A { ... } section{ font-size: 25px; } Access static Members within the Class \u00b6 If we are accessing the static variables and methods inside the same class, we can directly access them without using the class name. For example, using System ; namespace StaticKeyword { class Test { static int age = 25 ; public static void display () { Console . WriteLine ( \"Static method\" ); } static void Main ( string [] args ) { Console . WriteLine ( age ); display (); Console . ReadLine (); } } } section{ font-size: 25px; } Output 25 Static method Here, we are accessing the static field age and static method display() without using the class name. section{ font-size: 25px; } C# String \u00b6 In this tutorial, we will learn about C# string and its methods with the help of examples. In C#, a string is a sequence of characters. For example, \"hello\" is a string containing a sequence of characters 'h' , 'e' , 'l' , 'l' , and 'o' . section{ font-size: 25px; } We use the string keyword to create a string. For example, // create a string string str = \"C# Programming\" ; Here, we have created a string named str and assigned the text \"C# Programming\" . We use double quotes to represent strings in C#. section{ font-size: 25px; } Example: Create string in C \u00b6 using System ; namespace CsharpString { class Test { public static void Main ( string [] args ) { // create string string str1 = \"C# Programming\" ; string str2 = \"Programiz\" ; // print string Console . WriteLine ( str1 ); Console . WriteLine ( str2 ); Console . ReadLine (); } } } section{ font-size: 25px; } Output C # Programming Programiz In the above example, we have created two strings named str1 and str2 and printed them. Note : A string variable in C# is not of primitive types like int , char , etc. Instead, it is an object of the String class. section{ font-size: 25px; } String Operations \u00b6 C# string provides various methods to perform different operations on strings. We will look into some of the commonly used string operations. section{ font-size: 25px; } 1. Get the Length of a string \u00b6 To find the length of a string, we use the Length property. For example, using System ; namespace CsharpString { class Test { public static void Main ( string [] args ) { // create string string str = \"C# Programming\" ; Console . WriteLine ( \"string: \" + str ); // get length of str int length = str . Length ; Console . WriteLine ( \"Length: \" + length ); Console . ReadLine (); } } } section{ font-size: 25px; } Output string: C# Programming Length: 14 In the above example, the Length property calculates the total number of characters in the string and returns it. section{ font-size: 25px; } 2. Join two strings in C \u00b6 We can join two strings in C# using the Concat() method. For example, using System ; namespace CsharpString { class Test { public static void Main ( string [] args ) { // create string string str1 = \"C# \" ; Console . WriteLine ( \"string str1: \" + str1 ); // create string string str2 = \"Programming\" ; Console . WriteLine ( \"string str2: \" + str2 ); // join two strings string joinedString = string . Concat ( str1 , str2 ); Console . WriteLine ( \"Joined string: \" + joinedString ); Console . ReadLine (); } } } section{ font-size: 25px; } Output string str1: C# string str2: Programming Joined string: C# Programming In the above example, we have created two strings named str1 and str2. Notice the statement, section{ font-size: 25px; } string joinedString = string . Concat ( str1 , str2 ); Here, the Concat() method joins str1 and str2 and assigns it to the joinedString variable. We can also join two strings using the + operator in C#. To learn more, visit C# string Concat . section{ font-size: 25px; } 3. C# compare two strings \u00b6 In C#, we can make comparisons between two strings using the Equals() method. The Equals() method checks if two strings are equal or not. For example, using System ; namespace CsharpString { class Test { public static void Main ( string [] args ) { // create string string str1 = \"C# Programming\" ; string str2 = \"C# Programming\" ; string str3 = \"Programiz\" ; // compare str1 and str2 Boolean result1 = str1 . Equals ( str2 ); Console . WriteLine ( \"string str1 and str2 are equal: \" + result1 ); //compare str1 and str3 Boolean result2 = str1 . Equals ( str3 ); Console . WriteLine ( \"string str1 and str3 are equal: \" + result2 ); Console . ReadLine (); } } } section{ font-size: 25px; } Output string str1 and str2 are equal: True string str1 and str3 are equal: False In the above example, we have created 3 strings named str1, str2, and str3. Here, we are using the Equals() method to check if one string is equal to another. section{ font-size: 25px; } Immutability of String Objects \u00b6 In C#, strings are immutable. This means, once we create a string, we cannot change that string. To understand it, consider an example: // create string string str = \"Hello \" ; Here, we have created a string variable named str. The variable holds the string \"Hello \" . section{ font-size: 25px; } Now suppose we want to change the string str. // add another string \"World\" // to the previous string example str = string . Concat ( str , \"World\" ); Here, we are using the Concat() method to add the string \"World\" to the previous string str. But how are we able to modify the string when they are immutable? section{ font-size: 25px; } Let's see what has happened here, C# takes the value of the string \"Hello \" . Creates a new string by adding \"World\" to the string \"Hello \" . Creates a new string object, gives it a value \"Hello World\" , and stores it in str. The original string, \"Hello \" , that was assigned to str is released for garbage collection because no other variable holds a reference to it. section{ font-size: 25px; } String Escape Sequences \u00b6 The escape character is used to escape some of the characters present inside a string. In other words, we use escape sequences to insert special characters inside the string. Suppose we need to include double quotes inside a string. // include double quote string str = \"This is the \" String \" class\" ; section{ font-size: 25px; } Since strings are represented by double quotes, the compiler will treat \"This is the \" as the string. And the above code will cause an error. To solve this issue, we use the escape character \\\" in C#. For example, // use the escape character string str = \"This is the \\\"String\\\" class.\" ; Now by using \\ before double quote \" , we can include it in the string. section{ font-size: 25px; } Some of the escape sequences in C# are as follows: Escape Sequence Character Name \\' single quote \\\" double quote \\\\ backslash \\0 null \\n new line \\t horizontal tab section{ font-size: 25px; } String interpolation \u00b6 In C#, we can use string interpolation to insert variables inside a string. For string interpolation, the string literal must begin with the $ character. For example, using System ; namespace CsharpString { class Test { public static void Main ( string [] args ) { // create string string name = \"Programiz\" ; // string interpolation string message = $\"Welcome to {name}\" ; Console . WriteLine ( message ); Console . ReadLine (); } } } section{ font-size: 25px; } Output Welcome to Programiz In the above example, we are using the name variable inside the message string. section{ font-size: 25px; } string message = $\"Welcome to {name}\" ; Notice that, the string literal starts with $ the name variable is placed inside the curly braces {} section{ font-size: 25px; } Methods of C# string \u00b6 There are various string methods in C#. Some of them are as follows: Methods Description Format() returns a formatted string Split() splits the string into substring Substring() returns substring of a string Compare() compares string objects Replace() replaces the specified old character with the specified new character Contains() checks whether the string contains a substring Join() joins the given strings using the specified separator Trim() removes any leading and trailing whitespaces EndsWith() checks if the string ends with the given string IndexOf() returns the position of the specified character in the string Remove() returns characters from a string ToUpper() converts the string to uppercase ToLower() converts the string to lowercase PadLeft() returns string padded with spaces or with a specified Unicode character on the left PadRight() returns string padded with spaces or with a specified Unicode character on the right StartsWith() checks if the string begins with the given string ToCharArray() converts the string to a char array LastIndexOf() returns index of the last occurrence of a specified string section{ font-size: 25px; } C# Inheritance - OOP (II) \u00b6 section{ font-size: 25px; } C# Inheritance \u00b6 In this tutorial, we will learn about C# inheritance and its types with the help of examples. In C#, inheritance allows us to create a new class from an existing class. It is a key feature of Object-Oriented Programming (OOP). The class from which a new class is created is known as the base class (parent or superclass). And, the new class is called derived class (child or subclass) The derived class inherits the fields and methods of the base class. This helps with the code reusability in C#. section{ font-size: 25px; } How to perform inheritance in C#? \u00b6 In C#, we use the : symbol to perform inheritance. For example, class Animal { // fields and methods } // Dog inherits from Animal class Dog : Animal { // fields and methods of Animal // fields and methods of Dog } Here, we are inheriting the derived class Dog from the base class Animal. The Dog class can now access the fields and methods of Animal class. section{ font-size: 25px; } C# Inheritance section{ font-size: 25px; } Example: C# Inheritance \u00b6 using System ; namespace Inheritance { // base class class Animal { public string name ; public void display () { Console . WriteLine ( \"I am an animal\" ); } } // derived class of Animal class Dog : Animal { public void getName () { Console . WriteLine ( \"My name is \" + name ); } } class Program { static void Main ( string [] args ) { // object of derived class Dog labrador = new Dog (); // access field and method of base class labrador . name = \"Rohu\" ; labrador . display (); // access method from own class labrador . getName (); Console . ReadLine (); } } } section{ font-size: 25px; } Output I am an animal My name is Rohu In the above example, we have derived a subclass Dog from the superclass Animal. Notice the statements, section{ font-size: 25px; } labrador . name = \"Rohu\" ; labrador . getName (); Here, we are using labrador (object of Dog) to access the name and display() of the Animal class. This is possible because the derived class inherits all fields and methods of the base class. Also, we have accessed the name field inside the method of the Dog class. section{ font-size: 25px; } is-a relationship \u00b6 In C#, inheritance is an is-a relationship. We use inheritance only if there is an is-a relationship between two classes. For example, Dog is an Animal Apple is a Fruit Car is a Vehicle We can derive Dog from Animal class. Similarly, Apple from Fruit class and Car from Vehicle class. section{ font-size: 25px; } protected Members in C# Inheritance \u00b6 When we declare a field or method as protected , it can only be accessed from the same class and its derived classes. section{ font-size: 25px; } Example: protected Members in Inheritance \u00b6 using System ; namespace Inheritance { // base class class Animal { protected void eat () { Console . WriteLine ( \"I can eat\" ); } } // derived class of Animal class Dog : Animal { static void Main ( string [] args ) { Dog labrador = new Dog (); // access protected method from base class labrador . eat (); Console . ReadLine (); } } } section{ font-size: 25px; } Output I can eat In the above example, we have created a class named Animal. The class includes a protected method eat(). section{ font-size: 25px; } We have derived the Dog class from the Animal class. Notice the statement, labrador . eat (); Since the protected method can be accessed from derived classes, we are able to access the eat() method from the Dog class. section{ font-size: 25px; } Types of inheritance \u00b6 There are the following types of inheritance: section{ font-size: 25px; } 1. Single Inheritance \u00b6 In single inheritance, a single derived class inherits from a single base class. section{ font-size: 25px; } 2. Multilevel Inheritance \u00b6 In multilevel inheritance, a derived class inherits from a base and then the same derived class acts as a base class for another class. section{ font-size: 25px; } 3. Hierarchical Inheritance \u00b6 In hierarchical inheritance, multiple derived classes inherit from a single base class. section{ font-size: 25px; } 4. Multiple Inheritance \u00b6 In multiple inheritance, a single derived class inherits from multiple base classes. C# doesn't support multiple inheritance. However, we can achieve multiple inheritance through interfaces. section{ font-size: 25px; } 5. Hybrid Inheritance \u00b6 Hybrid inheritance is a combination of two or more types of inheritance. The combination of multilevel and hierarchical inheritance is an example of Hybrid inheritance. section{ font-size: 25px; } Method Overriding in C# Inheritance \u00b6 If the same method is present in both the base class and the derived class, the method in the derived class overrides the method in the base class. This is called method overriding in C#. For example, using System ; namespace Inheritance { // base class class Animal { public virtual void eat () { Console . WriteLine ( \"I eat food\" ); } } // derived class of Animal class Dog : Animal { // overriding method from Animal public override void eat () { Console . WriteLine ( \"I eat Dog food\" ); } } class Program { static void Main ( string [] args ) { // object of derived class Dog labrador = new Dog (); // accesses overridden method labrador . eat (); } } } section{ font-size: 25px; } Output I eat Dog food In the above example, the eat() method is present in both the base class and derived class. section{ font-size: 25px; } When we call eat() using the Dog object labrador, labrador . eat (); the method inside Dog is called. This is because the method inside Dog overrides the same method inside Animal. section{ font-size: 25px; } Notice, we have used virtual and override with methods of the base class and derived class respectively. Here, virtual - allows the method to be overridden by the derived class override - indicates the method is overriding the method from the base class section{ font-size: 25px; } base Keyword in C# Inheritance \u00b6 In the previous example, we saw that the method in the derived class overrides the method in the base class. However, what if we want to call the method of the base class as well? In that case, we use the base keyword to call the method of the base class from the derived class. section{ font-size: 25px; } Example: base keyword in C# inheritance \u00b6 using System ; namespace Inheritance { // base class class Animal { public virtual void eat () { Console . WriteLine ( \"Animals eat food.\" ); } } // derived class of Animal class Dog : Animal { // overriding method from Animal public override void eat () { // call method from Animal class base . eat (); Console . WriteLine ( \"Dogs eat Dog food.\" ); } } class Program { static void Main ( string [] args ) { Dog labrador = new Dog (); labrador . eat (); } } } section{ font-size: 25px; } Output Animals eat food. Dogs eat Dog food. In the above example, the eat() method is present in both the base class Animal and the derived class Dog. Notice the statement, base . eat (); Here, we have used the base keyword to access the method of Animal class from the Dog class. section{ font-size: 25px; } Importance of Inheritance in C \u00b6 To understand the importance of Inheritance, let's consider a situation. Suppose we are working with regular polygons such as squares, rectangles, and so on. And, we have to find the perimeter of these polygons based on the input. section{ font-size: 25px; } 1. Since the formula to calculate perimeter is common for all regular polygons, we can create a RegularPolygon class and a method calculatePerimeter() to calculate perimeter. class RegularPolygon { calculatePerimeter () { // code to compute perimeter } } section{ font-size: 25px; } 2. And inherit Square and Rectangle classes from the RegularPolygon class. Each of these classes will have properties to store the length and number of sides because they are different for all polygons. class Square : RegularPolygon { int length = 0 ; int sides = 0 ; } section{ font-size: 25px; } We pass the value of the length and sides to calculateperimeter() to compute the perimeter. This is how inheritance makes our code reusable and more intuitive. section{ font-size: 25px; } Example: Importance of Inheritance \u00b6 using System ; namespace Inheritance { class RegularPolygon { public void calculatePerimeter ( int length , int sides ) { int result = length * sides ; Console . WriteLine ( \"Perimeter: \" + result ); } } class Square : RegularPolygon { public int length = 200 ; public int sides = 4 ; public void calculateArea () { int area = length * length ; Console . WriteLine ( \"Area of Square: \" + area ); } } class Rectangle : RegularPolygon { public int length = 100 ; public int breadth = 200 ; public int sides = 4 ; public void calculateArea () { int area = length * breadth ; Console . WriteLine ( \"Area of Rectangle: \" + area ); } } class Program { static void Main ( string [] args ) { Square s1 = new Square (); s1 . calculateArea (); s1 . calculatePerimeter ( s1 . length , s1 . sides ); Rectangle t1 = new Rectangle (); t1 . calculateArea (); t1 . calculatePerimeter ( t1 . length , t1 . sides ); } } } section{ font-size: 25px; } Output Area of Square: 40000 Perimeter: 800 Area of Rectangle: 20000 Perimeter: 400 In the above example, we have created a RegularPolygon class that has a method to calculate the perimeter of the regular polygon. section{ font-size: 25px; } Here, the Square and Rectangle inherit from RegularPolygon. The formula to calculate the perimeter is common for all, so we have reused the calculatePerimeter() method of the base class. And since the formula to calculate the area is different for different shapes, we have created a separate method inside the derived class to calculate the area. section{ font-size: 25px; } C# abstract class and method \u00b6 In this tutorial, we will learn about C# abstract class and method with the help of examples. section{ font-size: 25px; } Abstract Class \u00b6 In C#, we cannot create objects of an abstract class. We use the abstract keyword to create an abstract class. For example, // create an abstract class abstract class Language { // fields and methods } ... // try to create an object Language // throws an error Language obj = new Language (); section{ font-size: 25px; } An abstract class can have both abstract methods (method without body) and non-abstract methods (method with the body). For example, abstract class Language { // abstract method public abstract void display1 (); // non-abstract method public void display2 () { Console . WriteLine ( \"Non abstract method\" ); } } Before moving forward, make sure to know about C# inheritance . section{ font-size: 25px; } Inheriting Abstract Class \u00b6 As we cannot create objects of an abstract class, we must create a derived class from it. So that we can access members of the abstract class using the object of the derived class. For example, using System ; namespace AbstractClass { abstract class Language { // non-abstract method public void display () { Console . WriteLine ( \"Non abstract method\" ); } } // inheriting from abstract class class Program : Language { static void Main ( string [] args ) { // object of Program class Program obj = new Program (); // access method of an abstract class obj . display (); Console . ReadLine (); } } } section{ font-size: 25px; } Output Non abstract method In the above example, we have created an abstract class named Language. The class contains a non-abstract method display(). section{ font-size: 25px; } We have created the Program class that inherits the abstract class. Notice the statement, obj . display (); Here, obj is the object of the derived class Program. We are calling the method of the abstract class using the object obj. Note : We can use abstract class only as a base class. This is why abstract classes cannot be sealed. To know more, visit C# sealed class and method. section{ font-size: 25px; } C# Abstract Method \u00b6 A method that does not have a body is known as an abstract method. We use the abstract keyword to create abstract methods. For example, public abstract void display (); Here, display() is an abstract method. An abstract method can only be present inside an abstract class. When a non-abstract class inherits an abstract class, it should provide an implementation of the abstract methods. section{ font-size: 25px; } Example: Implementation of the abstract method \u00b6 using System ; namespace AbstractClass { abstract class Animal { // abstract method public abstract void makeSound (); } // inheriting from abstract class class Dog : Animal { // provide implementation of abstract method public override void makeSound () { Console . WriteLine ( \"Bark Bark\" ); } } class Program { static void Main ( string [] args ) { // create an object of Dog class Dog obj = new Dog (); obj . makeSound (); Console . ReadLine (); } } } section{ font-size: 25px; } Output Bark Bark In the above example, we have created an abstract class named Animal. We have an abstract method makeSound() inside the class. section{ font-size: 25px; } We have a Dog class that inherits from the Animal class. Dog class provides the implementation of the abstract method makeSound(). // provide implementation of abstract method public override void makeSound () { Console . WriteLine ( \"Bark Bark\" ); } section{ font-size: 25px; } Notice, we have used override with the makeSound() method. This indicates the method is overriding the method from the base class. We then used the object of the Dog class to access makeSound(). If the Dog class had not provided the implementation of the abstract method makeSound(), Dog class should have been marked abstract as well. Note : Unlike the C# inheritance, we cannot use virtual with the abstract methods of the base class. This is because an abstract class is implicitly virtual. section{ font-size: 25px; } Abstract class with get and set accessors \u00b6 We can mark get and set accessors as abstract. For example, using System ; namespace AbstractClass { abstract class Animal { protected string name ; // abstract method public abstract string Name { get ; set ; } } // inheriting from abstract class class Dog : Animal { // provide implementation of abstract method public override string Name { get { return name ;} set { name = value ; } } } class Program { static void Main ( string [] args ) { // create an object of Dog class Dog obj = new Dog (); obj . Name = \"Tom\" ; Console . WriteLine ( \"Name: \" + obj . Name ); Console . ReadLine (); } } } section{ font-size: 25px; } Output Name: Tom In the above example, we have marked the get and set accessor as abstract. section{ font-size: 25px; } obj . Name = \"Tom\" ; Console . WriteLine ( \"Name: \" + obj . Name ); We are setting and getting the value of the name field of the abstract class Animal using the object of the derived class Dog. section{ font-size: 25px; } Access Constructor of Abstract Classes \u00b6 An abstract class can have constructors as well. For example, using System ; namespace AbstractClass { abstract class Animal { public Animal () { Console . WriteLine ( \"Animal Constructor\" ); } } class Dog : Animal { public Dog () { Console . WriteLine ( \"Dog Constructor\" ); } } class Program { static void Main ( string [] args ) { // create an object of Dog class Dog d1 = new Dog (); Console . ReadLine (); } } } section{ font-size: 25px; } Output Animal Constructor Dog Constructor In the above example, we have created a constructor inside the abstract class Animal. Dog d1 = new Dog () ; Here, when we create an object of the derived class Dog the constructor of the abstract class Animal gets called as well. Note : We can also use destructors inside the abstract class. section{ font-size: 25px; } C# Abstraction \u00b6 The abstract classes are used to achieve abstraction in C#. Abstraction is one of the important concepts of object-oriented programming. It allows us to hide unnecessary details and only show the needed information. This helps us to manage complexity by hiding details with a simpler, higher-level idea. A practical example of abstraction can be motorbike brakes. We know what a brake does. When we apply the brake, the motorbike will stop. However, the working of the brake is kept hidden from us. The major advantage of hiding the working of the brake is that now the manufacturer can implement brakes differently for different motorbikes. However, what brake does will be the same. section{ font-size: 25px; } Example: C# Abstraction \u00b6 using System ; namespace AbstractClass { abstract class MotorBike { public abstract void brake (); } class SportsBike : MotorBike { // provide implementation of abstract method public override void brake () { Console . WriteLine ( \"Sports Bike Brake\" ); } } class MountainBike : MotorBike { // provide implementation of abstract method public override void brake () { Console . WriteLine ( \"Mountain Bike Brake\" ); } } class Program { static void Main ( string [] args ) { // create an object of SportsBike class SportsBike s1 = new SportsBike (); s1 . brake (); // create an object of MountainBike class MountainBike m1 = new MountainBike (); m1 . brake (); Console . ReadLine (); } } } section{ font-size: 25px; } Output Sports Bike Brake Mountain Bike Brake In the above example, we have created an abstract class MotorBike. It has an abstract method brake(). section{ font-size: 25px; } As brake() is an abstract method the implementation of brake() in MotorBike is kept hidden. Every motorbike has a different implementation of the brake. This is why SportsBike makes its own implementation of brake() and MountainBike makes its own implementation of brake(). Note : We use interfaces to achieve complete abstraction in C#. To learn more, visit C# Interface . section{ font-size: 25px; } C# Nested Class \u00b6 In this tutorial, you will learn about the nested class in C# with the help of examples. In C#, we can define a class within another class. It is known as a nested class. section{ font-size: 25px; } For example, class OuterClass { ... class InnerClass { ... } } Here, we have created the class InnerClass inside the class OuterClass . The InnerClass is called the nested class. section{ font-size: 25px; } Access Members \u00b6 To access members of the nested classes we first need to create their objects. section{ font-size: 25px; } 1.Create object of Outer class OuterClass obj1 = new OuterClass (); Here, we have created the obj1 object of the class OuterClass . section{ font-size: 25px; } 2. Create object of Inner Class OuterClass . InnerClass obj2 = new OuterClass . InnerClass (); You can see that we have used OuterClass.InnerClass to create the obj2 object of the inner class. This is because InnerClass is the nested class of OuterClass . section{ font-size: 25px; } Once we have created the object of individual classes, we can use the object name and dot operator to access members of each class. section{ font-size: 25px; } Example: C# Nested Class \u00b6 using System ; namespace CsharpNestedClass { // outer class public class Car { public void displayCar () { Console . WriteLine ( \"Car: Bugatti\" ); } // inner class public class Engine { public void displayEngine () { Console . WriteLine ( \"Engine: Petrol Engine\" ); } } } class Program { static void Main ( string [] args ) { // create object of outer class Car sportsCar = new Car (); // access method of outer class sportsCar . displayCar (); // create object of inner class Car . Engine petrolEngine = new Car . Engine (); // access member of inner class petrolEngine . displayEngine (); Console . ReadLine (); } } } section{ font-size: 25px; } Output Car: Bugatti Engine: Petrol Engine In the above program, we have nested the Engine class inside the Car class. section{ font-size: 25px; } Inside the Program class, we have created objects of both the outer class and the inner class. // object of outer class Car sportsCar = new Car (); // object of nested class Car . Engine petrolEngine = new Car . Engine (); section{ font-size: 25px; } We then used these objects to access methods of each class. sportsCar.displayCar() - access outer class method using the object of Car petrolEngine.displayEngine() - access inner class method using the object of Engine section{ font-size: 25px; } Note : We cannot access the members of the inner class using the object of the outer class. For example, // error code sportsCar . displayEngine (); Here, we cannot access the displayEngine() method of the inner class Engine using the sportsCar object of the outer class. section{ font-size: 25px; } Access Outer Class Members Inside Inner Class \u00b6 We can access members of the outer class inside the inner class. For this we use an object of the outer class. For example, using System ; namespace CsharpNestedClass { // outer class public class Car { public string brand = \"Bugatti\" ; // nested class public class Engine { public void displayCar () { // object of outer class Car sportsCar = new Car (); Console . WriteLine ( \"Brand: \" + sportsCar . brand ); } } } class Program { static void Main ( string [] args ) { // object of inner class Car . Engine engineObj = new Car . Engine (); engineObj . displayCar (); Console . ReadLine (); } } } section{ font-size: 25px; } Output Brand: Bugatti In the above example, we have nested the Engine class inside the Car class. Notice the line, section{ font-size: 25px; } // inside Engine class Car sportsCar = new Car (); Console . WriteLine ( \"Brand: \" + sportsCar . brand ); Here, we have used the object of the class Car to access field brand. section{ font-size: 25px; } Access static Members of Outer Class Inside Inner Class \u00b6 If we need to access static members of the outer class, we don't need to create its object. Instead, we can directly use the name of the outer class. For example, using System ; namespace CsharpNestedClass { // outer class public class Car { //static member of outer class public static string brand = \"Bugatti\" ; // nested class public class Engine { public void display () { // access static member of outer class Console . WriteLine ( \"Brand: \" + Car . brand ); } } } class Program { static void Main ( string [] args ) { // object of inner class Car . Engine obj = new Car . Engine (); obj . display (); Console . ReadLine (); } } } section{ font-size: 25px; } Output Brand: Bugatti In the above example, we have nested the Engine class inside the Car class. Car has a static field brand. section{ font-size: 25px; } Here, we have accessed the static field brand inside the inner class ( Engine ) using the name of the outer class ( Car ). Console . WriteLine ( \"Brand: \" + Car . brand ); section{ font-size: 25px; } Inheriting Outer Class \u00b6 Like a regular class, we can also inherit the outer class. For example, using System ; namespace CsharpNestedClass { // outer class class Computer { public void display () { Console . WriteLine ( \"Method of Computer class\" ); } // nested class public class CPU { } } class Laptop : Computer { } class Program { static void Main ( string [] args ) { // object of derived class Laptop obj = new Laptop (); obj . display (); Console . ReadLine (); } } } section{ font-size: 25px; } Output Method of Computer class In the above example, we have derived the class Laptop from the outer class Computer . Because of this we are able to access the display() method of class Computer using the object of the class Laptop . section{ font-size: 25px; } Inheriting inner class \u00b6 In C#, we can inherit the inner class as well. For example, using System ; namespace CsharpNestedClass { // outer class class Computer { // nested class public class CPU { public void display () { Console . WriteLine ( \"Method of CPU class\" ); } } } // inheriting inner class class Laptop : Computer . CPU { } class Program { static void Main ( string [] args ) { // object of derived class Laptop obj = new Laptop (); obj . display (); Console . ReadLine (); } } } section{ font-size: 25px; } Output Method of CPU class In the above example, we have derived the Laptop class from the inner class CPU . section{ font-size: 25px; } Notice that we have used the name of the outer class along with the nested class to inherit the inner class. class Laptop : Computer . CPU {} section{ font-size: 25px; } C# Partial Class and Partial Method \u00b6 In this article we are going to learn about how and why partial class and partial methods be implemented in C# . There are many situations when you might need to split a class definition, such as when working on a large scale projects, multiple developers and programmers might need to work on the same class at the same time. In this case we can use a feature called Partial Class . section{ font-size: 25px; } Introduction to Partial Class \u00b6 While programming in C# (or OOP), we can split the definition of a class over two or more source files. The source files contains a section of the definition of class, and all parts are combined when the application is compiled. For splitting a class definition, we need to use the partial keyword. section{ font-size: 25px; } Example 1: \u00b6 We have a project named as HeightWeightInfo which shows height and weight. We have a file named as File1.cs with a partial class named as Record. It has two integer variables h & w and a method/constructor named as Record which is assigning the values of h & w. section{ font-size: 25px; } namespace HeightWeightInfo { class File1 { } public partial class Record { private int h ; private int w ; public Record ( int h , int w ) { this . h = h ; this . w = w ; } } } Here is another file named as File2.cs with the same partial class Record which has only the method PrintRecord. This method will display the values of h & w. section{ font-size: 25px; } namespace HeightWeightInfo { class File2 { } public partial class Record { public void PrintRecord () { Console . WriteLine ( \"Height:\" + h ); Console . WriteLine ( \"Weight:\" + w ); } } } section{ font-size: 25px; } Here now we can see the main method of the project: namespace HeightWeightInfo { class Program { static void Main ( string [] args ) { Record myRecord = new Record ( 10 , 15 ); myRecord . PrintRecord (); Console . ReadLine (); } } } section{ font-size: 25px; } Here we have the object of the class Record as myRecord which is passing the parameter values as 10 and 15 to h and w respectively to the method defined in File1.cs . The method PrintRecord is called by the object myRecord which is defined in the File2.cs . This shows that the partial keyword helps to combine all the attributes of a class defined in various files to work as a single class. section{ font-size: 25px; } Places where partial class can be used: While working on a larger projects with more than one developer, it helps the developers to work on the same class simultaneously. Codes can be added or modified to the class without re-creating source files which are automatically generated by the IDE (i.e. Visual Studio). section{ font-size: 25px; } Things to Remember about Partial Class \u00b6 The partial keyword specify that other parts of the class can be defined in the namespace. It is mandatory to use the partial keyword if we are trying to make a class partial. All the parts of the class should be in the same namespace and available at compile time to form the final type. All the parts must have same access modifier i.e. private, public, or so on. section{ font-size: 25px; } If any part is declared abstract, then the whole type is considered abstract. If any part is declared sealed, then the whole type is considered sealed. If any part declares a base type, then the whole type inherits that class. Any class member declared in a partial definition are available to all other parts. All parts of a partial class should be in the same namespace. ****Note:** The partial modifier is not available on delegate or enumeration declarations section{ font-size: 25px; } Introduction to Partial Methods \u00b6 A partial class may contain a partial method. One part of the class contains the signature of the method. An optional implementation may be defined in the same part or another part. If the implementation is not supplied, then the method and all calls are removed at compile time. section{ font-size: 25px; } Example 2: \u00b6 Let's take an example as a partial class Car defined in file1.cs which has three methods InitializeCar(), BuildRim() and BuildWheels(). Among those methods, InitializeCar is defined as partial . section{ font-size: 25px; } public partial class Car { partial void InitializeCar (); public void BuildRim () { } public void BuildWheels () { } } section{ font-size: 25px; } And we have another file named as file2.cs which has two methods BuildEngine and InitializeCar. The method InitializeCar is partial method which is also defined in file1.cs . section{ font-size: 25px; } public partial class Car { public void BuildEngine () { } partial void InitializeCar () { string str = \"Car\" ; } } section{ font-size: 25px; } A partial method declaration consists of two parts: The definition as in file1.cs . The implementation as in file2.cs . They may be in separate parts of the partial class, or in the same part. section{ font-size: 25px; } Things to remember about Partial Method \u00b6 partial keyword. return type void . implicitly private . and cannot be virtual . section{ font-size: 25px; } C# sealed class and method \u00b6 In this tutorial, we will learn about the sealed class and method in C# with the help of examples. section{ font-size: 25px; } Sealed Class \u00b6 In C#, when we don't want a class to be inherited by another class, we can declare the class as a sealed class . A sealed class cannot have a derived class. We use the sealed keyword to create a sealed class. section{ font-size: 25px; } For example, using System ; namespace SealedClass { sealed class Animal { } // trying to inherit sealed class // Error Code class Dog : Animal { } class Program { static void Main ( string [] args ) { // create an object of Dog class Dog d1 = new Dog (); Console . ReadLine (); } } } section{ font-size: 25px; } In the above example, we have created a sealed class Animal. Here, we are trying to derive Dog class from the Animal class. section{ font-size: 25px; } Since a sealed class cannot be inherited, the program generates the following error: error CS0509: 'Dog' : cannot derive from sealed type 'Animal' section{ font-size: 25px; } Sealed Method \u00b6 During method overriding, if we don't want an overridden method to be further overridden by another class, we can declare it as a sealed method . We use a sealed keyword with an overridden method to create a sealed method. section{ font-size: 25px; } For example, using System ; namespace SealedClass { class Animal { public virtual void makeSound () { Console . WriteLine ( \"Animal Sound\" ); } } class Dog : Animal { // sealed method sealed public override void makeSound () { Console . WriteLine ( \"Dog Sound\" ); } } class Puppy : Dog { // trying to override sealed method public override void makeSound () { Console . WriteLine ( \"Puppy Sound\" ); } } class Program { static void Main ( string [] args ) { // create an object of Puppy class Puppy d1 = new Puppy (); Console . ReadLine (); } } } section{ font-size: 25px; } In the above example, we have overridden the makeSound() method inside the Dog class. section{ font-size: 25px; } // Inside the Dog class sealed public override void makeSound () { Console . WriteLine ( \"Dog Sound\" ); } Notice that we have used the sealed keyword with makeSound(). This means the Puppy class that inherits the Dog class is not allowed to override makeSound(). section{ font-size: 25px; } Hence, we get an error error CS0239: 'Puppy.makeSound()' : cannot override inherited member 'Dog.makeSound()' because it is sealed when we try to further override the makeSound() method inside the Puppy class. Note : Sealing an overridden method prevents method overriding in multilevel inheritance. section{ font-size: 25px; } Why Sealed Class? \u00b6 We use sealed classes to prevent inheritance. As we cannot inherit from a sealed class, the methods in the sealed class cannot be manipulated from other classes. It helps to prevent security issues. section{ font-size: 25px; } For example, sealed class A { ... } // error code class B : A { ... } section{ font-size: 25px; } As class A cannot be inherited, class B cannot override and manipulate the methods of class A. section{ font-size: 25px; } One of the best uses of sealed classes is when you have a class with static members. The Pens class of the System.Drawing namespace is one of the examples of the sealed class. The Pens class has static members that represent the pens with standard colors. Pens.Blue represents a pen with blue color. section{ font-size: 25px; } C# interface \u00b6 In this tutorial, we will learn about the C# interface with the help of examples. In C#, an interface is similar to abstract class. However, unlike abstract classes, all methods of an interface are fully abstract (method without body). We use the interface keyword to create an interface. section{ font-size: 25px; } For example, interface IPolygon { // method without body void calculateArea (); } section{ font-size: 25px; } Here, IPolygon is the name of the interface. By convention, interface starts with I so that we can identify it just by seeing its name. We cannot use access modifiers inside an interface. All members of an interface are public by default. An interface doesn't allow fields. section{ font-size: 25px; } Implementing an Interface \u00b6 We cannot create objects of an interface. To use an interface, other classes must implement it. Same as in C# Inheritance , we use : symbol to implement an interface. section{ font-size: 25px; } For example, using System ; namespace CsharpInterface { interface IPolygon { // method without body void calculateArea ( int l , int b ); } class Rectangle : IPolygon { // implementation of methods inside interface public void calculateArea ( int l , int b ) { int area = l * b ; Console . WriteLine ( \"Area of Rectangle: \" + area ); } } class Program { static void Main ( string [] args ) { Rectangle r1 = new Rectangle (); r1 . calculateArea ( 100 , 200 ); } } } section{ font-size: 25px; } Output Area of Rectangle: 20000 section{ font-size: 25px; } In the above example, we have created an interface named IPolygon. The interface contains a method calculateArea(int a, int b) without implementation. Here, the Rectangle class implements IPolygon. And, provides the implementation of the calculateArea(int a, int b) method. Note : We must provide the implementation of all the methods of interface inside the class that implements it. section{ font-size: 25px; } Implementing Multiple Interfaces \u00b6 Unlike inheritance, a class can implement multiple interfaces. For example, using System ; namespace CsharpInterface { interface IPolygon { // method without body void calculateArea ( int a , int b ); } interface IColor { void getColor (); } // implements two interface class Rectangle : IPolygon , IColor { // implementation of IPolygon interface public void calculateArea ( int a , int b ) { int area = a * b ; Console . WriteLine ( \"Area of Rectangle: \" + area ); } // implementation of IColor interface public void getColor () { Console . WriteLine ( \"Red Rectangle\" ); } } class Program { static void Main ( string [] args ) { Rectangle r1 = new Rectangle (); r1 . calculateArea ( 100 , 200 ); r1 . getColor (); } } } section{ font-size: 25px; } Output Area of Rectangle: 20000 Red Rectangle In the above example, we have two interfaces, IPolygon and IColor. section{ font-size: 25px; } class Rectangle : IPolygon , IColor { ... } We have implemented both interfaces in the Rectangle class separated by , . Now, Rectangle has to implement the method of both interfaces. section{ font-size: 25px; } Using reference variable of an interface \u00b6 We can use the reference variable of an interface. For example, using System ; namespace CsharpInterface { interface IPolygon { // method without body void calculateArea ( int l , int b ); } class Rectangle : IPolygon { // implementation of methods inside interface public void calculateArea ( int l , int b ) { int area = l * b ; Console . WriteLine ( \"Area of Rectangle: \" + area ); } } class Program { static void Main ( string [] args ) { // using reference variable of interface IPolygon r1 = new Rectangle (); r1 . calculateArea ( 100 , 200 ); } } } section{ font-size: 25px; } Output Area of Rectangle: 20000 In the above example, we have created an interface named IPolygon. The interface contains a method calculateArea(int l, int b) without implementation. section{ font-size: 25px; } IPolygon r1 = new Rectangle (); Notice, we have used the reference variable of interface IPolygon. It points to the class Rectangle that implements it. Though we cannot create objects of an interface, we can still use the reference variable of the interface that points to its implemented class. section{ font-size: 25px; } Practical Example of Interface \u00b6 Let's see a more practical example of C# Interface. using System ; namespace CsharpInterface { interface IPolygon { // method without body void calculateArea (); } // implements interface class Rectangle : IPolygon { // implementation of IPolygon interface public void calculateArea () { int l = 30 ; int b = 90 ; int area = l * b ; Console . WriteLine ( \"Area of Rectangle: \" + area ); } } class Square : IPolygon { // implementation of IPolygon interface public void calculateArea () { int l = 30 ; int area = l * l ; Console . WriteLine ( \"Area of Square: \" + area ); } } class Program { static void Main ( string [] args ) { Rectangle r1 = new Rectangle (); r1 . calculateArea (); Square s1 = new Square (); s1 . calculateArea (); } } } section{ font-size: 25px; } Output Area of Rectangle: 2700 Area of Square: 900 In the above program, we have created an interface named IPolygon. It has an abstract method calculateArea() . section{ font-size: 25px; } We have two classes Square and Rectangle that implement the IPolygon interface. The rule for calculating the area is different for each polygon. Hence, calculateArea() is included without implementation. Any class that implements IPolygon must provide an implementation of calculateArea() . Hence, implementation of the method in class Rectangle is independent of the method in class Square. section{ font-size: 25px; } Advantages of C# interface \u00b6 Now that we know what interfaces are, let's learn about why interfaces are used in C#. section{ font-size: 25px; } Similar to abstract classes, interfaces help us to achieve abstraction in C# . Here, the method calculateArea() inside the interface, does not have a body. Thus, it hides the implementation details of the method. section{ font-size: 25px; } Interfaces provide specifications that a class (which implements it) must follow. In our previous example, we have used calculateArea() as a specification inside the interface IPolygon. This is like setting a rule that we should calculate the area of every polygon. Now any class that implements the IPolygon interface must provide an implementation for the calculateArea() method. section{ font-size: 25px; } Interfaces are used to achieve multiple inheritance in C#. section{ font-size: 25px; } Interfaces provide loose coupling (having no or least effect on other parts of code when we change one part of a code). In our previous example, if we change the implementation of calculateArea() in the Square class it does not affect the Rectangle class. section{ font-size: 25px; } C# Method Overloading \u00b6 In this article, you\u2019ll learn about method overloading in C# with the help of examples. In C#, there might be two or more methods in a class with the same name but different numbers, types, and order of parameters, it is called method overloading. section{ font-size: 25px; } For example: void display () { ... } void display ( int a ) { ... } float display ( double a ) { ... } float display ( int a , float b ) { ... } Here, the display() method is overloaded. These methods have the same name but accept different arguments. section{ font-size: 25px; } Note : The return types of the above methods are not the same. It is because method overloading is not associated with return types. Overloaded methods may have the same or different return types, but they must have different parameters. section{ font-size: 25px; } We can perform method overloading in the following ways: section{ font-size: 25px; } 1. By changing the Number of Parameters \u00b6 We can overload the method if the number of parameters in the methods is different. void display ( int a ) { ... } ... void display ( int a , int b ) { ... } section{ font-size: 25px; } Here, we have two methods in a class with the same name - display(). It is possible to have more than one method with the same name because the number of parameters in methods is different. section{ font-size: 25px; } For example, using System ; namespace MethodOverload { class Program { // method with one parameter void display ( int a ) { Console . WriteLine ( \"Arguments: \" + a ); } // method with two parameters void display ( int a , int b ) { Console . WriteLine ( \"Arguments: \" + a + \" and \" + b ); } static void Main ( string [] args ) { Program p1 = new Program (); p1 . display ( 100 ); p1 . display ( 100 , 200 ); Console . ReadLine (); } } } section{ font-size: 25px; } Output Arguments: 100 Arguments: 100 and 200 section{ font-size: 25px; } In the above example, we have overloaded the display() method: one method has one parameter another has two parameter Based on the number of the argument passed during the method call, the corresponding method is called. p1.display(100) - calls the method with single parameter p1.display(100, 200) - calls the method with two parameters section{ font-size: 25px; } 2. By changing the Data types of the parameters \u00b6 void display ( int a ) { ... } ... void display ( string b ) { ... } Here, we have two methods - display() with the same number of parameters. It is possible to have more than one display() method with the same number of parameters because the data type of parameters in methods is different. section{ font-size: 25px; } For example, using System ; namespace MethodOverload { class Program { // method with int parameter void display ( int a ) { Console . WriteLine ( \"int type: \" + a ); } // method with string parameter void display ( string b ) { Console . WriteLine ( \"string type: \" + b ); } static void Main ( string [] args ) { Program p1 = new Program (); p1 . display ( 100 ); p1 . display ( \"Programiz\" ); Console . ReadLine (); } } } section{ font-size: 25px; } Output int type: 100 string type: Programiz In the above program, we have overloaded the display() method with different types of parameters. section{ font-size: 25px; } Based on the type of arguments passed during the method call, the corresponding method is called. p1.display(100) - calls method with int type parameter p1.display(\"Programiz\") - calls method with string type parameter section{ font-size: 25px; } 3. By changing the Order of the parameters \u00b6 void display ( int a , string b ) { ... } ... void display ( string b , int a ) { ... } Here, we have two methods - display(). It is possible to have more than one display() method with the same number and type of parameter because the order of data type of parameters in methods is different. section{ font-size: 25px; } For example, using System ; namespace MethodOverload { class Program { // method with int and string parameters void display ( int a , string b ) { Console . WriteLine ( \"int: \" + a ); Console . WriteLine ( \"string: \" + b ); } // method with string andint parameter void display ( string b , int a ) { Console . WriteLine ( \"string: \" + b ); Console . WriteLine ( \"int: \" + a ); } static void Main ( string [] args ) { Program p1 = new Program (); p1 . display ( 100 , \"Programming\" ); p1 . display ( \"Programiz\" , 400 ); Console . ReadLine (); } } } section{ font-size: 25px; } Output int: 100 string: Programming string: Programiz int: 400 In the above program, we have overloaded the display() method with different orders of parameters. section{ font-size: 25px; } Based on the order of arguments passed during the method call, the corresponding method is called. p1.display(100, \"Programming\") - calls method with int and string parameter respectively p1.display(\"Programiz\", 400) - calls method with string and int parameter respectively section{ font-size: 25px; } C# Constructor Overloading \u00b6 In this article, you\u2019ll learn about constructor overloading in C# with the help of examples. In C#, similar to method overloading , we can also overload constructors. For constructor overloading, there must be two or more constructors with the same name but different number of parameters types of parameters order of parameters Before you learn about constructor overloading, make sure to know about C# constructors . section{ font-size: 25px; } We can perform constructor overloading in the following ways: section{ font-size: 25px; } 1. Different number of parameters \u00b6 We can overload the constructor if the number of parameters in a constructor are different. class Car { Car () { ... } Car ( string brand ) { ... } Car ( string brand , int price ) { ... } } Here, we have three constructors in class Car. It is possible to have more than one constructor because the number of parameters in constructors is different. section{ font-size: 25px; } Notice that, Car() { } - has no parameter Car(string brand) { } - has one parameter Car(string brand, int price) { } - has two parameters section{ font-size: 25px; } Example: Constructor Overloading with different number of parameter \u00b6 using System ; namespace ConstructorOverload { class Car { // constructor with no parameter Car () { Console . WriteLine ( \"Car constructor\" ); } // constructor with one parameter Car ( string brand ) { Console . WriteLine ( \"Car constructor with one parameter\" ); Console . WriteLine ( \"Brand: \" + brand ); } static void Main ( string [] args ) { // call with no parameter Car car = new Car (); Console . WriteLine (); // call with one parameter Car car2 = new Car ( \"Bugatti\" ); Console . ReadLine (); } } } section{ font-size: 25px; } Output Car constructor Car constructor with one parameter Brand: Bugatti section{ font-size: 25px; } In the above example, we have overloaded the Car constructor: one constructor has one parameter another has two parameter Based on the number of the argument passed during the constructor call, the corresponding constructor is called. section{ font-size: 25px; } Here, Object car - calls constructor with one parameter Object car2 - calls constructor with two parameter section{ font-size: 25px; } 2. Different types of parameters \u00b6 class Car { Car ( string brand ) { ... } Car ( int price ) { ... } } section{ font-size: 25px; } Here, we have two Car constructors with the same number of parameters. We are able to create constructors with the same parameters because the data type inside the parameters is different. Notice that, Car(string brand) { } - has parameter of string type Car(int price) { } - has parameter of int type section{ font-size: 25px; } Example: Constructor overloading with different types of parameters \u00b6 using System ; namespace ConstructorOverload { class Car { // constructor with string parameter Car ( string brand ) { Console . WriteLine ( \"Brand: \" + brand ); } // constructor with int parameter Car ( int price ) { Console . WriteLine ( \"Price: \" + price ); } static void Main ( string [] args ) { // call constructor with string parameter Car car = new Car ( \"Lamborghini\" ); Console . WriteLine (); // call constructor with int parameter Car car2 = new Car ( 50000 ); Console . ReadLine (); } } } section{ font-size: 25px; } Output Brand: Lamborghini Price: 50000 In the above program, we have overloaded the constructor with different types of parameters. section{ font-size: 25px; } Here, Object car - calls constructor with string type parameter Object car2 - calls constructor with int type parameter section{ font-size: 25px; } 3. Different order of parameters \u00b6 Car { Car ( string brand , int price ) { ... } Car ( int speed , string color ) { ... } } section{ font-size: 25px; } Here, we have two constructors with the same number of parameters. This is possible because the order of data type in parameters is different. Notice that, Car(string brand, int price) { } - string data type comes before int Car(int speed, string color) { } - int data type comes before string section{ font-size: 25px; } Example: Constructor overloading with different order of parameters \u00b6 using System ; namespace ConstructorOverload { class Car { // constructor with string and int parameter Car ( string brand , int price ) { Console . WriteLine ( \"Brand: \" + brand ); Console . WriteLine ( \"Price: \" + price ); } // constructor with int and string parameter Car ( int speed , string color ) { Console . WriteLine ( \"Speed: \" + speed + \" km/hr\" ); Console . WriteLine ( \"Color: \" + color ); } static void Main ( string [] args ) { // call constructor with string and int parameter Car car = new Car ( \"Bugatti\" , 50000 ); Console . WriteLine (); // call constructor with int and string parameter Car car2 = new Car ( 60 , \"Red\" ); Console . ReadLine (); } } } section{ font-size: 25px; } Output Brand: Bugatti Price: 50000 Speed: 60 km/hr Color: Red In the above program, we have overloaded the constructors with different orders of parameters. section{ font-size: 25px; } Here, Object car - calls constructor with string and int parameter respectively Object car2 - calls constructor with int and string parameter respectively section{ font-size: 25px; } Additional Topics \u00b6 section{ font-size: 25px; } C# using \u00b6 In this tutorial, we will learn about C# using and using static to import external resources in a program with the help of examples. In C#, we use the using keyword to import external resources (namespaces, classes, etc) inside a program. section{ font-size: 25px; } For example, // using System namespace using System ; namespace Program { class Program1 { static void Main ( string [] args ) { Console . WriteLine ( \"Hello World!\" ); } } } section{ font-size: 25px; } Output Hello World! In the above example, notice the line section{ font-size: 25px; } using System ; Here, we are importing the System namespace inside our program. This helps us to directly use the classes present in the System namespace. Also, because of this, we don't have to write the fully qualified name of the print statement. // full print statement System . Console . WriteLine ( \"Hello World!\" ); // print statement with using System; Console . WriteLine ( \"Hello World!\" ); To learn more about the namespace, visit C# namespaces . section{ font-size: 25px; } C# using to create an alias \u00b6 We can also create aliases with the help of using in C#. For example, // creating alias for System.Console using Programiz = System . Console ; namespace HelloWorld { class Program { static void Main ( string [] args ) { // using Programiz alias instead of System.Console Programiz . WriteLine ( \"Hello World!\" ); } } } section{ font-size: 25px; } Output Hello World! In the above program, we have created an alias for System.Console . section{ font-size: 25px; } using Programiz = System . Console ; This allows us to use the alias Programiz instead of System.Console . Programiz . WriteLine ( \"Hello World!\" ); Here, Programiz will work just like System.Console . section{ font-size: 25px; } C# using static directive \u00b6 In C#, we can also import classes in our program. Once we import these classes, we can use the static members (fields, methods) of the class. We use the using static directive to import classes in our program. section{ font-size: 25px; } Example: C# using static with System.Math \u00b6 using System ; // using static directive using static System . Math ; namespace Program { class Program1 { public static void Main ( string [] args ) { double n = Sqrt ( 9 ); Console . WriteLine ( \"Square root of 9 is \" + n ); } } } section{ font-size: 25px; } Output Square root of 9 is 3 In the above example, notice the line, section{ font-size: 25px; } using static System . Math ; Here, this line helps us to directly access the methods of the Math class. double n = Sqrt ( 9 ); We have used the Sqrt() method directly without specifying the Math class. If we don't use the using static System.Math in our program, we have to include the class name Math while using Sqrt() . section{ font-size: 25px; } For example, using System ; namespace Program { class Program1 { public static void Main ( string [] args ) { // using the class name Math double n = Math . Sqrt ( 9 ); Console . WriteLine ( \"Square root of 9 is \" + n ); } } } section{ font-size: 25px; } Output Square root of 9 is 3 In the above example, notice the line, double n = Math . Sqrt ( 9 ); Here, we are using Math.Sqrt() to compute the square root of 9 . This is because we haven't imported the System.Math in this program. section{ font-size: 25px; } C# Type Conversion \u00b6 In this tutorial, we will learn about the C# type conversion and its types with the help of examples. The process of converting the value of one type (int, float, double, etc.) to another type is known as type conversion. section{ font-size: 25px; } In C#, there are two basic types of type conversion: Implicit Type Conversions Explicit Type Conversions section{ font-size: 25px; } 1. Implicit Type Conversion in C \u00b6 In implicit type conversion, the C# compiler automatically converts one type to another. Generally, smaller types like int (having less memory size) are automatically converted to larger types like double (having larger memory size). section{ font-size: 25px; } Example: Implicit Type Conversion \u00b6 using System ; namespace MyApplication { class Program { static void Main ( string [] args ) { int numInt = 500 ; // get type of numInt Type n = numInt . GetType (); // Implicit Conversion double numDouble = numInt ; // get type of numDouble Type n1 = numDouble . GetType (); // Value before conversion Console . WriteLine ( \"numInt value: \" + numInt ); Console . WriteLine ( \"numInt Type: \" + n ); // Value after conversion Console . WriteLine ( \"numDouble value: \" + numDouble ); Console . WriteLine ( \"numDouble Type: \" + n1 ); Console . ReadLine (); } } } section{ font-size: 25px; } Output numInt value : 500 numInt Type : System . Int32 numDouble value : 500 numDouble Type : System . Double In the above example, we have created an int type variable named numInt. section{ font-size: 25px; } Notice the line, // Implicit Conversion double numDouble = numInt ; Here, we are assigning the int type variable to a double type variable. section{ font-size: 25px; } In this case, the C# compiler automatically converts the int type value to double . Notice that we have used the GetType() method to check the type of numInt and numDouble variables. Note : In implicit type conversion, smaller types are converted to larger types. Hence, there is no loss of data during the conversion. section{ font-size: 25px; } 2. C# Explicit Type Conversion \u00b6 In explicit type conversion, we explicitly convert one type to another. Generally, larger types like double (having large memory size) are converted to smaller types like int (having small memory size). section{ font-size: 25px; } Example: Explicit Type Conversion \u00b6 using System ; namespace MyApplication { class Program { static void Main ( string [] args ) { double numDouble = 1.23 ; // Explicit casting int numInt = ( int ) numDouble ; // Value before conversion Console . WriteLine ( \"Original double Value: \" + numDouble ); // Value before conversion Console . WriteLine ( \"Converted int Value: \" + numInt ); Console . ReadLine (); } } } section{ font-size: 25px; } Output Original double value: 1 .23 Converted int value: 1 In the above example, we have created a double variable named numDouble. Notice the line, section{ font-size: 25px; } // Explicit casting int numInt = ( int ) numDouble ; Here, (int) is a cast expression that explicitly converts the double type to int type. We can see the original value is 1.23 whereas the converted value is 1 . Here, some data is lost during the type conversion. This is because we are explicitly converting the larger data type double to a smaller type int . Note : The explicit type conversion is also called type casting. section{ font-size: 25px; } C# Type Conversion using Parse() \u00b6 In C#, we can also use the Parse() method to perform type conversion. Generally, while performing type conversion between non-compatible types like int and string , we use Parse() . section{ font-size: 25px; } Example: Type Conversion using Parse() \u00b6 using System ; namespace Conversion { class Program { static void Main ( string [] args ) { string n = \"100\" ; // converting string to int type int a = int . Parse ( n ); Console . WriteLine ( \"Original string value: \" + n ); Console . WriteLine ( \"Converted int value: \" + a ); Console . ReadLine (); } } } section{ font-size: 25px; } Output Original string value: 100 Converted int value: 100 In the above example, we have converted a string type to an int type. section{ font-size: 25px; } // converting string to int type int a = int . Parse ( n ); Here, the Parse() method converts the numeric string 100 to an integer value. Note : We cannot use Parse() to convert a textual string like \"test\" to an int . For example, String str = \"test\" ; int a = int . Parse ( str ); // Error Code section{ font-size: 25px; } C# Type Conversion using Convert Class \u00b6 In C#, we can use the Convert class to perform type conversion. The Convert class provides various methods to convert one type to another. Method Description ToBoolean() converts a type to a Boolean value ToChar() converts a type to a char type ToDouble() converts a type to a double type ToInt16() converts a type to a 16-bit int type ToString() converts a type to a string Let us look at some examples: section{ font-size: 25px; } Example: Convert int to String and Double \u00b6 using System ; using System ; namespace Conversion { class Program { static void Main ( string [] args ) { // create int variable int num = 100 ; Console . WriteLine ( \"int value: \" + num ); // convert int to string string str = Convert . ToString ( num ); Console . WriteLine ( \"string value: \" + str ); // convert int to Double Double doubleNum = Convert . ToDouble ( num ); Console . WriteLine ( \"Double value: \" + doubleNum ); Console . ReadLine (); } } } section{ font-size: 25px; } Output int value: 100 string value: 100 Double value: 100 section{ font-size: 25px; } In the above example, Convert.ToString(a) - converts an int type num to string Convert.ToDouble(a) - converts num to the Double type section{ font-size: 25px; } Example: Convert string to Double and vice-versa \u00b6 using System ; namespace Conversion { class Program { static void Main ( string [] args ) { // create string variable string str = \"99.99\" ; Console . WriteLine ( \"Original string value: \" + str ); // convert string to double Double newDouble = Convert . ToDouble ( str ); Console . WriteLine ( \"Converted Double value: \" + newDouble ); // create double variable double num = 88.9 ; Console . WriteLine ( \"Original double value: \" + num ); // converting double to string string newString = Convert . ToString ( num ); Console . WriteLine ( \"Converted string value: \" + newString ); Console . ReadLine (); } } } section{ font-size: 25px; } Output Original string value: 99 .99 Converted Double value: 99 .99 Original double value: 88 .9 Converted string value: 88 .9 section{ font-size: 25px; } In the above example, Convert.ToDouble(str) - converts a string type str to Double Convert.ToString(num) - converts a double type num to the string section{ font-size: 25px; } Example 3: Convert int to Boolean \u00b6 using System ; namespace Conversion { class Program { static void Main ( string [] args ) { // create int variables int num1 = 0 ; int num2 = 1 ; // convert int to Boolean Boolean bool1 = Convert . ToBoolean ( num1 ); Boolean bool2 = Convert . ToBoolean ( num2 ); Console . WriteLine ( \"Boolean value of 0 is: \" + bool1 ); Console . WriteLine ( \"Boolean value of 1 is: \" + bool2 ); Console . ReadLine (); } } } section{ font-size: 25px; } Output Boolean value of 0 is: False Boolean value of 1 is: True section{ font-size: 25px; } In the above example, we have created two integer variables: num1 and num2 with values 0 and 1 respectively. Here, Convert.ToBoolean(num1) - converts 0 to a Boolean value False Convert.ToBoolean(num2) - converts 1 to a Boolean value True Note : In C#, the integer value 0 is considered False and all other values are considered True . section{ font-size: 25px; } C# Preprocessor directives \u00b6 In this tutorial, we\u2019ll learn about Preprocessor Directives, available directives in C#, and when, why and how why they are used. As the name justifies, preprocessor directives are a block of statements that gets processed before the actual compilation starts. C# preprocessor directives are the commands for the compiler that affects the compilation process. section{ font-size: 25px; } These commands specifies which sections of the code to compile or how to handle specific errors and warnings. section{ font-size: 25px; } C# preprocessor directive begins with a # (hash) symbol and all preprocessor directives last for one line. Preprocessor directives are terminated by new line rather than semicolon . section{ font-size: 25px; } The preprocessor directives available in C# are: | Preprocessor Directive | Description | Syntax | | --- | --- | --- | | #if | Checks if a preprocessor expression is true or not | #if preprocessor-expression code to compile #endif | | #elif | Used along with #if to check multiple preprocessor expressions | #if preprocessor-expression-1 code to compile #elif preprocessor-expression-2 code to compile #endif | | #else | Used along with #if to create compound conditional directive. | #if preprocessor-expression code to compile #elif code to compile #endif | | #endif | Used along with #if to indicate the end of a conditional directive | #if preprocessor-expression code to compile #endif | | #define | Used to define a symbol | #define SYMBOL | | #undef | Used to undefine a symbol | #undef SYMBOL | | #warning | Allows us to generate level 1 warning from our code | #warning warning-message | | #error | Allows us to generate error from our code | #error error-message | | #line | Allows us to modify the compiler's line number and filename to display errors and warnings | #line line-number file-name | | #region | Allows us to create a region that can be expanded or collapsed when using a Visual Studio Code Editor | #region region-description codes #endregion | | #endregion | Indicates the end of a region | #region region-description codes #endregion | | #pragma | Gives the compiler special instructions for the compilation of the file in which it appears. | #pragma pragma-name pragma-arguments | section{ font-size: 25px; } #define directive \u00b6 The #define directive allows us to define a symbol. Symbols that are defined when used along with #if directive will evaluate to true. section{ font-size: 25px; } These symbols can be used to specify conditions for compilation. Syntax: #define SYMBOL For example: #define TESTING Here, TESTING is a symbol. section{ font-size: 25px; } #undef directive \u00b6 The #undef directive allows us to undefine a symbol. Undefined symbols when used along with #if directive will evaluate to false. Syntax: #undef SYMBOL For example: #undef TESTING Here, TESTING is a symbol. section{ font-size: 25px; } #if directive \u00b6 The #if directive are used to test the preprocessor expression. A preprocessor expression may consists of a symbol only or combination of symbols along with operators like && (AND), || (OR), ! (NOT). #if directive is followed by an #endif directive. The codes inside the #if directive is compiled only if the expression tested with #if evaluates to true. Syntax: #if preprocessor-expression code to compile < #endif For example: #if TESTING Console . WriteLine ( \"Currently Testing\" ); #endif section{ font-size: 25px; } Example 1: How to use #if directive? \u00b6 #define CSHARP using System ; namespace Directive { class ConditionalDirective { public static void Main ( string [] args ) { #if (CSHARP) Console . WriteLine ( \"CSHARP is defined\" ); #endif } } } section{ font-size: 25px; } When we run the program, the output will be: CSHARP is defined section{ font-size: 25px; } In the above program, CSHARP symbol is defined using the #define directive at the beginning of program. Inside the Main() method, #if directive is used to test whether CSHARP is true or not. The block of code inside #if directive is compiled only if CSHARP is defined. section{ font-size: 25px; } #elif directive \u00b6 The #elif directive is used along with #if directive that lets us create a compound conditional directive. It is used when testing multiple preprocessor expression. The codes inside the #elif directive is compiled only if the expression tested with that #elif evaluates to true. section{ font-size: 25px; } Syntax: #if preprocessor-expression-1 code to compile #elif preprocessor-expression-2 code - to - compile #endif section{ font-size: 25px; } For example: #if TESTING Console . WriteLine ( \"Currently Testing\" ); #elif TRAINING Console . WriteLine ( \"Currently Training\" ); #endif \u00b6 section{ font-size: 25px; } #else directive \u00b6 The #else directive is used along with #if directive. If none of the expression in the preceding #if and #elif (if present) directives are true, the codes inside the #else directive will be compiled. section{ font-size: 25px; } Syntax: #if preprocessor-expression-1 code to compile #elif preprocessor-expression-2 code - to - compile #else code - to - compile #endif section{ font-size: 25px; } For example: #if TESTING Console . WriteLine ( \"Currently Testing\" ); #elif TRAINING Console . WriteLine ( \"Currently Training\" ); #else Console . WriteLine ( \"Neither Testing nor Training\" ); #endif section{ font-size: 25px; } #endif directive \u00b6 The #endif directive is used along with #if directive to indicate the end of #if directive. Syntax: #if preprocessor-expression-1 code to compile #endif section{ font-size: 25px; } For example: #if TESTING Console . WriteLine ( \"Currently Testing\" ); #endif section{ font-size: 25px; } Example 2: How to use conditional directive (if, elif, else, endif) ? \u00b6 #define CSHARP #undef PYTHON using System ; namespace Directive { class ConditionalDirective { static void Main ( string [] args ) { #if (CSHARP && PYTHON) Console . WriteLine ( \"CSHARP and PYTHON are defined\" ); #elif (CSHARP && !PYTHON) Console . WriteLine ( \"CSHARP is defined, PYTHON is undefined\" ); #elif (!CSHARP && PYTHON) Console . WriteLine ( \"PYTHON is defined, CSHARP is undefined\" ); #else Console . WriteLine ( \"CSHARP and PYTHON are undefined\" ); #endif } } } section{ font-size: 25px; } When we run the program, the output will be: CSHARP is defined, PYTHON is undefined section{ font-size: 25px; } In this example, we can see the use of #elif and #else directive. These directive are used when there are multiple conditions to be tested. Also, symbols can be combined using logical operators to form a preprocessor expression. section{ font-size: 25px; } #warning directive \u00b6 The #warning directive allows us to generate a user-defined level one warning from our code. Syntax: #warning warning-message section{ font-size: 25px; } For example: #warning This is a warning message section{ font-size: 25px; } Example 3: How to use #warning directive? \u00b6 using System ; namespace Directives { class WarningDirective { public static void Main ( string [] args ) { #if (!CSHARP) #warning CSHARP is undefined #endif Console . WriteLine ( \"#warning directive example\" ); } } } section{ font-size: 25px; } When we run the program, the output will be: section{ font-size: 25px; } Program.cs ( 10 ,26 ) : warning CS1030: #warning: 'CSHARP is undefined' [/home/myuser/csharp/directives-project/directives-project.csproj] #warning directive example section{ font-size: 25px; } After running the above program, we will see the output as above. The text represents a warning message. Here, we are generating a user-defined warning message using the #warning directive. Note that the statements after the #warning directive are also executed. It means that the #warning directive does not terminate the program but just throws a warning. section{ font-size: 25px; } #error directive \u00b6 The #error directive allows us to generate a user-defined error from our code. Syntax: #error error-message section{ font-size: 25px; } For example: #error This is an error message section{ font-size: 25px; } Example 4: How to use #error directive? \u00b6 using System ; namespace Directive { class Error { public static void Main ( string [] args ) { #if (!CSHARP) #error CSHARP is undefined #endif Console . WriteLine ( \"#error directive example\" ); } } } section{ font-size: 25px; } When we run the program, the output will be: Program.cs ( 10 ,24 ) : error CS1029: #error: 'CSHARP is undefined' [/home/myuser/csharp/directives-project/directives-project.csproj] The build failed. Please fix the build errors and run again. section{ font-size: 25px; } We will see some errors, probably like above. Here we are generating a user-defined error. Another thing to note here is the program will be terminated and the line #error directive example won't be printed as it was in the #warning directive. section{ font-size: 25px; } #line directive \u00b6 The #line directive allows us to modify the line number and the filename for errors and warnings. Syntax: #line line-number file-name section{ font-size: 25px; } For example: #line 50 \"fakeprogram.cs\" section{ font-size: 25px; } Example 5: How to use #line directive? \u00b6 using System ; namespace Directive { class Error { public static void Main ( string [] args ) { #line 200 \"AnotherProgram.cs\" #warning Actual Warning generated by Program.cs on line 10 } } } section{ font-size: 25px; } When we run the program, the output will be: AnotherProgram . cs ( 200 , 22 ): warning CS1030 : #warning: 'Actual Warning generated by Program.cs on line 10' [/home/myuser/csh arp / directive - project / directive - project . csproj ] We have saved the above example as Program.cs . The warning was actually generated at line 10 by Program.cs . Using the #line directive, we have changed the line number to 200 and the filename to AnotherProgram.cs that generated the error. section{ font-size: 25px; } #region and #endregion directive \u00b6 The #region directive allows us to create a region that can be expanded or collapsed when using a Visual Studio Code Editor. This directive is simply used to organize the code. The #region block can not overlap with a #if block. However, a #region block can be included within a #if block and a #if block can overlap with a #region block. #endregion directive indicates the end of a #region block. section{ font-size: 25px; } Syntax: #region region-description codes #endregion section{ font-size: 25px; } Example 6: How to use #region directive? \u00b6 using System ; namespace Directive { class Region { public static void Main ( string [] args ) { #region Hello Console . WriteLine ( \"Hello\" ); Console . WriteLine ( \"Hello\" ); Console . WriteLine ( \"Hello\" ); Console . WriteLine ( \"Hello\" ); Console . WriteLine ( \"Hello\" ); #endregion } } } section{ font-size: 25px; } When we run the program, the output will be: Hello Hello Hello Hello Hello section{ font-size: 25px; } #pragma directive \u00b6 The #pragma directive is used to give the compiler some special instructions for the compilation of the file in which it appears. The instruction may include disabling or enabling some warnings. C# supports two #pragma instructions: #pragma warning : Used for disabling or enabling warnings #pragma checksum : It generates checksums for source files which will be used for debugging. section{ font-size: 25px; } Syntax: #pragma pragma-name pragma-arguments section{ font-size: 25px; } For example: #pragma warning disable section{ font-size: 25px; } Example 7: How to use #pragma directive? \u00b6 using System ; namespace Directive { class Error { public static void Main ( string [] args ) { #pragma warning disable #warning This is a warning 1 #pragma warning restore #warning This is a warning 2 } } } section{ font-size: 25px; } When we run the program, the output will be: Program.cs ( 12 ,22 ) : warning CS1030: #warning: 'This is a warning 2' [/home/myuser/csharp/directive-project/directive-project.csproj] section{ font-size: 25px; } We can see that only the second warning is displayed on the output screen. This is because, we initially disabled all warnings before the first warning and restored them only before the second warning. This is the reason why the first warning was hidden. We can also disable specific warning instead of all warning. To learn more about #pragma , visit #pragma (C# reference) . section{ font-size: 25px; } Namespaces in C# Programming \u00b6 In this tutorial, we will learn about Namespaces, how to define it, access its members, and use it in a C# program. Namespaces are used in C# to organize and provide a level of separation of codes. They can be considered as a container which consists of other namespaces, classes, etc. section{ font-size: 25px; } A namespace can have following types as its members: Namespaces (Nested Namespace) Classes Interfaces Structures Delegates section{ font-size: 25px; } We will discuss about these topics in later tutorials. For now we will stick with classes and namespaces. Namespaces are not mandatory in a C# program, but they do play an important role in writing cleaner codes and managing larger projects. Let's understand the concept of namespace with a real life scenario. We have a large number of files and folders in our computer. section{ font-size: 25px; } Imagine how difficult it would be to manage them if they are placed in a single directory. This is why we put related files and folders in a separate directory. This helps us to manage our data properly. section{ font-size: 25px; } The concept of namespace is similar in C#. It helps us to organize different members by putting related members in the same namespace. Namespace also solves the problem of naming conflict . Two or more classes when put into different namespaces can have same name. section{ font-size: 25px; } Defining Namespace in C \u00b6 We can define a namespace in C# using the namespace keyword as: namespace Namespace - Name { //Body of namespace } section{ font-size: 25px; } For example: namespace MyNamespace { class MyClass { public void MyMethod () { System . Console . WriteLine ( \"Creating my namespace\" ); } } } section{ font-size: 25px; } In the above example, a namespace MyNamespace is created. It consists of a class MyClass as its member. MyMethod is a method of class MyClass . section{ font-size: 25px; } Accessing Members of Namespace in C \u00b6 The members of a namespace can be accessed using the dot(.) operator. The syntax for accessing the member of namespace is, Namespace - Name . Member - Name For example, if we need to create an object of MyClass, it can be done as, MyNamespace . MyClass myClass = new MyNamespace . MyClass (); We will discuss about creating objects in later tutorials. For now just focus on how the class MyClass is accessed. section{ font-size: 25px; } Example 1: Introducing Namespace in C# Program \u00b6 using System ; namespace MyNamespace { public class SampleClass { public static void myMethod () { Console . WriteLine ( \"Creating my namespace\" ); } } } namespace MyProgram { public class MyClass { public static void Main () { MyNamespace . SampleClass . myMethod (); } } } section{ font-size: 25px; } When we run the program, the output will be: Creating my namespace section{ font-size: 25px; } In the above program, we have created our own namespace MyNamespace and accessed its members from Main() method inside MyClass . As said earlier, the dot (.) operator is used to access the member of namespace. In the Main() method, myMethod() method is called using the dot (.) operator. section{ font-size: 25px; } Using a Namespace in C# [The using Keyword] \u00b6 A namespace can be included in a program using the using keyword. The syntax is, using Namespace - Name ; section{ font-size: 25px; } For example, using System ; section{ font-size: 25px; } The advantage of this approach is we don't have to specify the fully qualified name of the members of that namespace every time we are accessing it. Once the line using System ; is included at the top of the program. We can write Console . WriteLine ( \"Hello World!\" ); Instead of the fully qualified name i.e. System . Console . WriteLine ( \"Hello World!\" ); section{ font-size: 25px; } Nested Namespace in C \u00b6 A namespace can contain another namespace. It is called nested namespace. The nested namespace and its members can also be accessed using the dot (.) operator. section{ font-size: 25px; } The syntax for creating nested namespace is as follows: namespace MyNamespace { namespace NestedNamespace { // Body of nested namespace } } section{ font-size: 25px; } Example 2: Nested Namespace in C \u00b6 using System ; // Nested Namespace namespace MyNamespace { namespace Nested { public class SampleClass { public static void myMethod () { Console . WriteLine ( \"Nested Namespace Example\" ); } } } } namespace MyProgram { public class MyClass { public static void Main () { MyNamespace . Nested . SampleClass . myMethod (); } } } section{ font-size: 25px; } When we run the program, the output will be: Nested Namespace Example section{ font-size: 25px; } This example illustrates how nested namespace can be implemented in C#. Here, we now have an extra namespace inside MyNamespace called Nested . So, instead of using MyNamespace.SampleClass.myMethod() , we have to use MyNamespace.Nested.SampleClass.myMethod() . section{ font-size: 25px; } C# struct \u00b6 In this tutorial, you will learn about structs in C# with the help of examples. The struct (structure) is like a class in C# that is used to store data. However, unlike classes, a struct is a value type. Suppose we want to store the name and age of a person. We can create two variables: name and age and store value. However, suppose we want to store the same information of multiple people. In this case, creating variables for an individual person might be a tedious task. To overcome this we can create a struct that stores name and age. Now, this struct can be used for every person. section{ font-size: 25px; } Define struct in C \u00b6 In C#, we use the struct keyword to define a struct. For example, struct Employee { public int id ; } Here, id is a field inside the struct. A struct can include methods, indexers, etc as well. section{ font-size: 25px; } Declare struct variable \u00b6 Before we use a struct, we first need to create a struct variable. We use a struct name with a variable to declare a struct variable. For example, struct Employee { public int id ; } ... // declare emp of struct Employee Employee emp ; In the above example, we have created a struct named Employee. Here, we have declared a variable emp of the struct Employee. section{ font-size: 25px; } Access C# struct \u00b6 We use the struct variable along with the . operator to access members of a struct. For example, struct Employee { public int id ; } ... // declare emp of struct Employee Employee emp ; // access member of struct emp . id = 1 ; section{ font-size: 25px; } Here, we have used variable emp of a struct Employee with . operator to access members of the Employee. emp . id = 1 ; This accesses the id field of struct Employee. Note : Primitive data types like int , bool , float are pre-defined structs in C#. section{ font-size: 25px; } Example: C# Struct \u00b6 using System ; namespace CsharpStruct { // defining struct struct Employee { public int id ; public void getId ( int id ) { Console . WriteLine ( \"Employee Id: \" + id ); } } class Program { static void Main ( string [] args ) { // declare emp of struct Employee Employee emp ; // accesses and sets struct field emp . id = 1 ; // accesses struct methods emp . getId ( emp . id ); Console . ReadLine (); } } } section{ font-size: 25px; } Output Employee Id: 1 In the above program, we have created a struct named Employee. It contains a field id and a method getId(). Inside the Program class, we have declared a variable emp of struct Employee. We then used the emp variable to access fields and methods of the class. section{ font-size: 25px; } Note : We can also instantiate a struct using the new keyword. For example, Employee emp = new Employee (); Here, this line calls the parameterless constructor of the struct and initializes all the members with default values. section{ font-size: 25px; } Constructors in C# struct \u00b6 In C#, a struct can also include constructors. For example, struct Employee { public int id ; // constructor public Employee ( int employeeId ) { id = employeeId } } section{ font-size: 25px; } Here, we have created a parameterized constructor Employee() with parameter employeeId. Note : We cannot create parameterless constructors in C# version 9.0 or below. section{ font-size: 25px; } Example: Constructor in C# structs \u00b6 using System ; namespace CsharpStruct { // defining struct struct Employee { public int id ; public string name ; // parameterized constructor public Employee ( int employeeId , string employeeName ) { id = employeeId ; name = employeeName ; } } class Program { static void Main ( string [] args ) { // calls constructor of struct Employee emp = new Employee ( 1 , \"Brian\" ); Console . WriteLine ( \"Employee Name: \" + emp . name ); Console . WriteLine ( \"Employee Id: \" + emp . id ); Console . ReadLine (); } } } section{ font-size: 25px; } Output Employee Name : Brian Employee Id : 1 section{ font-size: 25px; } In the above example, we have created a parameterized constructor inside the Employee struct. Inside the constructor, we have assigned the values of fields: id and name. Notice the line, Employee emp = new Employee ( 1 , \"Brian\" ); section{ font-size: 25px; } Like in C# classes, we are using the new keyword to call the constructor. Here, 1 and \"Brian\" are arguments passed to the constructor, where they are assigned to the parameters employeeID and employeeName respectively.\" section{ font-size: 25px; } Note : We must assign the value for every field of struct inside the parameterized constructor. For example, // error code public Employee ( int employeeID , employeeName ) { id = employeeID ; } Here, we have not assigned the value for the name field. So the code will generate an error. section{ font-size: 25px; } Properties in C# struct \u00b6 We can also use properties inside a C# struct. For example, using System ; namespace CsharpStruct { // defining struct struct Employee { public int id ; // creates property public int Id { // returns id field get { return id ; } // sets id field set { id = value ; } } } class Program { static void Main ( string [] args ) { // calls the constructor of struct Employee emp = new Employee (); emp . Id = 1 ; Console . WriteLine ( \"Employee Id: \" + emp . Id ); Console . ReadLine (); } } } section{ font-size: 25px; } Output Employee Id: 1 section{ font-size: 25px; } In the above example, we have Id property inside the Employee struct. The get method returns the id field and the set method assigns the value to the id field. section{ font-size: 25px; } Difference between class and struct in C \u00b6 In C# classes and structs look similar. However, there are some differences between them. A class is a reference type whereas a struct is a value type. For example, using System ; namespace CsharpStruct { // defining class class Employee { public string name ; } class Program { static void Main ( string [] args ) { Employee emp1 = new Employee (); emp1 . name = \"John\" ; // assign emp1 to emp2 Employee emp2 = emp1 ; emp2 . name = \"Ed\" ; Console . WriteLine ( \"Employee1 name: \" + emp1 . name ); Console . ReadLine (); } } } Output Employee1 name: Ed In the above example, we have assigned the value of emp1 to emp2. The emp2 object refers to the same object as emp1. So, an update in emp2 updates the value of emp1 automatically. This is why a class is a reference type . Contrary to classes, when we assign one struct variable to another, the value of the struct gets copied to the assigned variable. So updating one struct variable doesn't affect the other. For example, using System ; namespace CsharpStruct { // defining struct struct Employee { public string name ; } class Program { static void Main ( string [] args ) { Employee emp1 = new Employee (); emp1 . name = \"John\" ; // assign emp1 to emp2 Employee emp2 = emp1 ; emp2 . name = \"Ed\" ; Console . WriteLine ( \"Employee1 name: \" + emp1 . name ); Console . ReadLine (); } } } section{ font-size: 25px; } Output Employee1 name: John When we assign the value of emp1 to emp2, a new value emp2 is created. Here, the value of emp1 is copied to emp2. So, change in emp2 does not affect emp1. This is why struct is a value type . Moreover, inheritance is not possible in the structs whereas it is an important feature of the C# classes. section{ font-size: 25px; } References \u00b6 Learn C# Programming Free C# Programming Book free-programming-books/free-programming-books-langs.md at master \u00b7 EbookFoundation/free-programming-books \u00b7 GitHub section{ font-size: 25px; } Extras \u00b6 Creating a Simple Dynamic-Link Library - Win32 apps | Microsoft Docs Dynamic-Link Library Creation - Win32 apps | Microsoft Docs Exporting from a DLL | Microsoft Docs Exporting from a DLL Using DEF Files | Microsoft Docs How to create a DLL library in C and then use it with C# - CodeProject section{ font-size: 25px; } Extras \u00b6 DLL - How to Write DLL - Dynamic Link Library in C - Steps to Create and Use https://www.codementor.io/@a_hathon/building-and-using-dlls-in-c-d7rrd4caz DLL Injection - free code corner GitHub - dennisbabkin/InjectAll: Tutorial that demonstrates how to code a Windows driver to inject a custom DLL into all running processes. I coded it from start to finish using C++ and x86/x64 Assembly language in Microsoft Visual Studio. The solution includes a kernel driver project, a DLL project and a C++ test console project. Coding Windows Kernel Driver - InjectAll - Making the Visual Studio solution for DLL injection into all running processes. Others \u00b6 std::dec, std::hex, std::oct - cppreference.com std::setbase - cppreference.com C++ Tutorial: Multi-Threaded Programming - Thread for Win32 - 2020","title":"Week-7 (C# Console Programming)"},{"location":"week-7-csharp/ce103-week-7-csharp/#ce103-algorithms-and-programming-i","text":"","title":"CE103 Algorithms and Programming I"},{"location":"week-7-csharp/ce103-week-7-csharp/#week-7","text":"","title":"Week-7"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-functional-console-programming","text":"Download DOC , SLIDE , PPTX section{ font-size: 25px; }","title":"C# Functional Console Programming"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-functional-console-programming_1","text":"section{ font-size: 25px; }","title":"C# Functional Console Programming"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-introduction","text":"section{ font-size: 25px; }","title":"C# Introduction"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-hello-world-your-first-c-program","text":"In this tutorial, we will learn how to write a simple \"Hello World!\" program in C#. This will get you familiar with the basic syntax and requirements of a C# program. The \u201cHello World!\u201d program is often the first program we see when we dive into a new language. It simply prints Hello World! on the output screen. The purpose of this program is to get us familiar with the basic syntax and requirements of a programming language. section{ font-size: 25px; }","title":"C# Hello World - Your First C# Program"},{"location":"week-7-csharp/ce103-week-7-csharp/#hello-world-in-c","text":"// Hello World! program namespace HelloWorld { class Hello { static void Main ( string [] args ) { System . Console . WriteLine ( \"Hello World!\" ); } } } When you run the program, the output will be: Hello World! section{ font-size: 25px; }","title":"\"Hello World!\" in C"},{"location":"week-7-csharp/ce103-week-7-csharp/#how-the-hello-world-program-in-c-works","text":"Let's break down the program line by line. section{ font-size: 25px; } // Hello World! Program // indicates the beginning of a comment in C#. Comments are not executed by the C# compiler. They are intended for the developers to better understand a piece of code. To learn more about comments in C#, visit C# comments . section{ font-size: 25px; } namespace HelloWorld{...} The namespace keyword is used to define our own namespace. Here we are creating a namespace called HelloWorld . Just think of namespace as a container which consists of classes, methods and other namespaces. To get a detailed overview of namespaces, visit C# Namespaces . section{ font-size: 25px; } class Hello{...} The above statement creates a class named - Hello in C#. Since, C# is an object-oriented programming language, creating a class is mandatory for the program\u2019s execution. section{ font-size: 25px; } static void Main(string[] args){...} Main() is a method of class Hello. The execution of every C# program starts from the Main() method. So it is mandatory for a C# program to have a Main() method. The signature/syntax of the Main() method is: static void Main ( string [] args ) { ... } We\u2019ll learn more about methods in the later chapters. section{ font-size: 25px; } System.Console.WriteLine(\"Hello World!\"); For now, just remember that this is the piece of code that prints Hello World! to the output screen.You\u2019ll learn more about how it works in the later chapters. section{ font-size: 25px; }","title":"How the \"Hello World!\" program in C# works?"},{"location":"week-7-csharp/ce103-week-7-csharp/#alternative-hello-world-implementation","text":"Here\u2019s an alternative way to write the \u201cHello World!\u201d program. // Hello World! program using System ; namespace HelloWorld { class Hello { static void Main ( string [] args ) { Console . WriteLine ( \"Hello World!\" ); } } } section{ font-size: 25px; } Notice in this case, we\u2019ve written using System; at the start of the program. By using this, we can now replace System . Console . WriteLine ( \"Hello World!\" ); with Console . WriteLine ( \"Hello World!\" ); This is a convenience we\u2019ll be using in our later chapters as well. section{ font-size: 25px; }","title":"Alternative Hello World! implementation"},{"location":"week-7-csharp/ce103-week-7-csharp/#things-to-remember-from-this-article","text":"Every C# program must have a class definition. The execution of program begins from the Main() method. Main() method must be inside a class definition. This is just a simple program for introducing C# to a newbie. If you did not understand certain things in this article, that's okay (even I did not when I started). As we move on with this tutorial series, everything will start to make sense. section{ font-size: 25px; }","title":"Things to remember from this article"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-keywords-and-identifiers","text":"In this tutorial, we will learn about keywords (reserved words) and identifiers in C# programming language. section{ font-size: 25px; }","title":"C# Keywords and Identifiers"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-keywords","text":"Keywords are predefined sets of reserved words that have special meaning in a program. The meaning of keywords can not be changed, neither can they be directly used as identifiers in a program. section{ font-size: 25px; } For example, long mobileNum ; Here, long is a keyword and mobileNum is a variable (identifier). long has a special meaning in C# i.e. it is used to declare variables of type long and this function cannot be changed. section{ font-size: 25px; } Also, keywords like long , int , char , etc can not be used as identifiers. So, we cannot have something like: long long ; section{ font-size: 25px; } C# has a total of 79 keywords. All these keywords are in lowercase. Here is a complete list of all C# keywords. abstract as base bool break byte case catch char checked class const continue decimal default delegate do double else enum event explicit extern false finally fixed float for foreach goto if implicit in in (generic modifier) int interface internal is lock long namespace new null object operator out out (generic modifier) override params private protected public readonly ref return sbyte sealed short sizeof stackalloc static string struct switch this throw true try typeof uint ulong unchecked unsafe ushort using using static void volatile while section{ font-size: 25px; } Although keywords are reserved words, they can be used as identifiers if @ is added as prefix. For example, int @void ; The above statement will create a variable @void of type int . section{ font-size: 25px; }","title":"C# Keywords"},{"location":"week-7-csharp/ce103-week-7-csharp/#contextual-keywords","text":"Besides regular keywords, C# has 25 contextual keywords. Contextual keywords have specific meaning in a limited program context and can be used as identifiers outside that context. They are not reserved words in C#. add alias ascending async await descending dynamic from get global group into join let orderby partial (type) partial (method) remove select set value var when (filter condition) where (generic type constraint) yield If you are interested to know the function of every keywords, I suggest you visit C# keywords (official C# docs). section{ font-size: 25px; }","title":"Contextual Keywords"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-identifiers","text":"Identifiers are the name given to entities such as variables, methods, classes, etc. They are tokens in a program which uniquely identify an element. For example, int value; Here, value is the name of variable. Hence it is an identifier. Reserved keywords can not be used as identifiers unless @ is added as prefix. For example, int break; This statement will generate an error in compile time. To learn more about variables, visit C# Variables . section{ font-size: 25px; }","title":"C# Identifiers"},{"location":"week-7-csharp/ce103-week-7-csharp/#rules-for-naming-an-identifier","text":"An identifier can not be a C# keyword. An identifier must begin with a letter, an underscore or @ symbol. The remaining part of identifier can contain letters, digits and underscore symbol. Whitespaces are not allowed. Neither it can have symbols other than letter, digits and underscore. Identifiers are case-sensitive. So, getName, GetName and getname represents 3 different identifiers. section{ font-size: 25px; } Here are some of the valid and invalid identifiers: Identifiers Remarks number Valid calculateMarks Valid hello$ Invalid (Contains $) name1 Valid @if Valid (Keyword with prefix @) if Invalid (C# Keyword) My name Invalid (Contains whitespace) _hello_hi Valid section{ font-size: 25px; }","title":"Rules for Naming an Identifier"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-find-list-of-keywords-and-identifiers-in-a-program","text":"Just to clear the concept, let's find the list of keywords and identifiers in the program we wrote in C# Hello World . using System ; namespace HelloWorld { class Hello { static void Main ( string [] args ) { Console . WriteLine ( \"Hello World!\" ); } } } section{ font-size: 25px; } Keywords Identifiers using System namespace HelloWorld (namespace) class Hello (class) static Main (method) void args string Console WriteLine The \"Hello World!\" inside WriteLine method is a string literal. section{ font-size: 25px; }","title":"Example: Find list of keywords and identifiers in a program"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-variables-and-primitive-data-types","text":"In this tutorial, we will learn about variables, how to create variables in C# and different data types that C# programming language supports. A variable is a symbolic name given to a memory location. Variables are used to store data in a computer program. section{ font-size: 25px; }","title":"C# Variables and (Primitive) Data Types"},{"location":"week-7-csharp/ce103-week-7-csharp/#how-to-declare-variables-in-c","text":"Here's an example to declare a variable in C#. int age ; In this example, a variable age of type int (integer) is declared and it can only store integer values. section{ font-size: 25px; } We can assign a value to the variable later in our program like such: int age ; ... ... ... age = 24 ; section{ font-size: 25px; } However, the variable can also be initialized to some value during declaration. For example, int age = 24 ; Here, a variable age of type int is declared and initialized to 24 at the same time. section{ font-size: 25px; } Since, it\u2019s a variable, we can change the value of variables as well. For example, int age = 24 ; age = 35 ; Here, the value of age is changed to 35 from 24. section{ font-size: 25px; } Variables in C# must be declared before they can be used. This means, the name and type of variable must be known before they can be assigned a value. This is why C# is called a statically-typed language . Once declared, the datatype of a variable can not be changed within a scope. A scope can be thought as a block of code where the variable is visible or available to use. If you don\u2019t understand the previous statement, don\u2019t worry we\u2019ll learn about scopes in the later chapters. For now remember,we can not do the following in C#: int age ; age = 24 ; ... ... ... float age ; section{ font-size: 25px; }","title":"How to declare variables in C#?"},{"location":"week-7-csharp/ce103-week-7-csharp/#implicitly-typed-variables","text":"Alternatively in C#, we can declare a variable without knowing its type using var keyword. Such variables are called implicitly typed local variables . Variables declared using var keyword must be initialized at the time of declaration. var value = 5; The compiler determines the type of variable from the value that is assigned to the variable. In the above example, value is of type int . This is equivalent to: int value; value = 5; You can learn more about implicitly typed local variables . section{ font-size: 25px; }","title":"Implicitly typed variables"},{"location":"week-7-csharp/ce103-week-7-csharp/#rules-for-naming-variables-in-c","text":"There are certain rules we need to follow while naming a variable. The rules for naming a variable in C# are: section{ font-size: 25px; } The variable name can contain letters (uppercase and lowercase), underscore( _ ) and digits only. section{ font-size: 25px; } The variable name must start with either letter, underscore or @ symbol. For example, section{ font-size: 25px; } Rules for naming variables in C# Variable Names Remarks name Valid subject101 Valid _age Valid (Best practice for naming private member variables) @break Valid (Used if name is a reserved keyword) 101subject Invalid (Starts with digit) your_name Valid your name Invalid (Contains whitespace) section{ font-size: 25px; } C# is case sensitive. It means age and Age refers to 2 different variables. section{ font-size: 25px; } A variable name must not be a C# keyword. For example, if , for , using can not be a variable name. We will be discussing more about C# keywords in the next tutorial. section{ font-size: 25px; }","title":"Rules for Naming Variables in C"},{"location":"week-7-csharp/ce103-week-7-csharp/#best-practices-for-naming-a-variable","text":"Choose a variable name that make sense. For example, name, age, subject makes more sense than n, a and s. Use camelCase notation (starts with lowercase letter) for naming local variables. For example, numberOfStudents, age, etc. Use PascalCase or CamelCase (starts with uppercase letter) for naming public member variables. For example, FirstName, Price, etc. Use a leading underscore (_) followed by camelCase notation for naming private member variables. For example, _bankBalance, _emailAddress, etc. section{ font-size: 25px; } You can learn more about naming conventions in C# here . Don't worry about public and private member variables. We will learn about them in later chapters. section{ font-size: 25px; }","title":"Best Practices for Naming a Variable"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-primitive-data-types","text":"Variables in C# are broadly classified into two types: Value types and Reference types . In this tutorial we will be discussing about primitive (simple) data types which is a subclass of Value types. Reference types will be covered in later tutorials. However, if you want to know more about variable types, visit C# Types and variables (official C# docs). section{ font-size: 25px; }","title":"C# Primitive Data Types"},{"location":"week-7-csharp/ce103-week-7-csharp/#boolean-bool","text":"Boolean data type has two possible values: true or false Default value : false Boolean variables are generally used to check conditions such as in if statements , loops , etc. section{ font-size: 25px; } For Example: using System ; namespace DataType { class BooleanExample { public static void Main ( string [] args ) { bool isValid = true ; Console . WriteLine ( isValid ); } } } section{ font-size: 25px; } When we run the program, the output will be: True section{ font-size: 25px; }","title":"Boolean (bool)"},{"location":"week-7-csharp/ce103-week-7-csharp/#signed-integral","text":"These data types hold integer values (both positive and negative). Out of the total available bits, one bit is used for sign. 1. sbyte Size : 8 bits Range : -128 to 127. Default value : 0 section{ font-size: 25px; } For example: using System ; namespace DataType { class SByteExample { public static void Main ( string [] args ) { sbyte level = 23 ; Console . WriteLine ( level ); } } } section{ font-size: 25px; } When we run the program, the output will be: 23 Try assigning values out of range i.e. less than -128 or greater than 127 and see what happens. section{ font-size: 25px; } 2. short Size : 16 bits Range : -32,768 to 32,767 Default value : 0 section{ font-size: 25px; } For example: using System ; namespace DataType { class ShortExample { public static void Main ( string [] args ) { short value = - 1109 ; Console . WriteLine ( value ); } } } section{ font-size: 25px; } When we run the program, the output will be: -1109 section{ font-size: 25px; } 3. int Size : 32 bits Range : -231 to 231-1 Default value : 0 section{ font-size: 25px; } For example: using System ; namespace DataType { class IntExample { public static void Main ( string [] args ) { int score = 51092 ; Console . WriteLine ( score ); } } } section{ font-size: 25px; } When we run the program, the output will be: 51092 section{ font-size: 25px; } 4. long Size : 64 bits Range : -263 to 263-1 Default value : 0L [L at the end represent the value is of long type] section{ font-size: 25px; } For example: using System ; namespace DataType { class LongExample { public static void Main ( string [] args ) { long range = - 7091821871L ; Console . WriteLine ( range ); } } } section{ font-size: 25px; } When we run the program, the output will be: - 7091821871 section{ font-size: 25px; }","title":"Signed Integral"},{"location":"week-7-csharp/ce103-week-7-csharp/#unsigned-integral","text":"These data types only hold values equal to or greater than 0. We generally use these data types to store values when we are sure, we won't have negative values. 1. byte Size : 8 bits Range : 0 to 255. Default value : 0 section{ font-size: 25px; } For example: using System ; namespace DataType { class ByteExample { public static void Main ( string [] args ) { byte age = 62 ; Console . WriteLine ( level ); } } } section{ font-size: 25px; } When we run the program, the output will be: 62 section{ font-size: 25px; } 2. ushort Size : 16 bits Range : 0 to 65,535 Default value : 0 section{ font-size: 25px; } For example: using System ; namespace DataType { class UShortExample { public static void Main ( string [] args ) { ushort value = 42019 ; Console . WriteLine ( value ); } } } When we run the program, the output will be: 42019 section{ font-size: 25px; } 3. uint Size : 32 bits Range : 0 to 232-1 Default value : 0 section{ font-size: 25px; } For example: using System ; namespace DataType { class UIntExample { public static void Main ( string [] args ) { uint totalScore = 1151092 ; Console . WriteLine ( totalScore ); } } } section{ font-size: 25px; } When we run the program, the output will be: 1151092 section{ font-size: 25px; } 4. ulong Size : 64 bits Range : 0 to 264-1 Default value : 0 section{ font-size: 25px; } For example: using System ; namespace DataType { class ULongExample { public static void Main ( string [] args ) { ulong range = 17091821871L ; Console . WriteLine ( range ); } } } section{ font-size: 25px; } When we run the program, the output will be: 17091821871 section{ font-size: 25px; }","title":"Unsigned Integral"},{"location":"week-7-csharp/ce103-week-7-csharp/#floating-point","text":"These data types hold floating point values i.e. numbers containing decimal values. For example, 12.36, -92.17, etc. 1. float Single-precision floating point type Size : 32 bits Range : 1.5 \u00d7 10\u221245 to 3.4 \u00d7 1038 Default value : 0.0F [F at the end represent the value is of float type] section{ font-size: 25px; } For example: using System ; namespace DataType { class FloatExample { public static void Main ( string [] args ) { float number = 43.27F ; Console . WriteLine ( number ); } } } section{ font-size: 25px; } When we run the program, the output will be: 43 .27 section{ font-size: 25px; } 2. double Double-precision floating point type. What is the difference between single and double precision floating point? Size : 64 bits Range : 5.0 \u00d7 10\u2212324 to 1.7 \u00d7 10308 Default value : 0.0D [D at the end represent the value is of double type] section{ font-size: 25px; } For example: using System ; namespace DataType { class DoubleExample { public static void Main ( string [] args ) { double value = - 11092.53D ; Console . WriteLine ( value ); } } } section{ font-size: 25px; } When we run the program, the output will be: -11092.53 section{ font-size: 25px; }","title":"Floating Point"},{"location":"week-7-csharp/ce103-week-7-csharp/#character-char","text":"It represents a 16 bit unicode character. Size : 16 bits Default value : '\\0' Range : U+0000 ('\\u0000') to U+FFFF ('\\uffff') section{ font-size: 25px; } For example: using System ; namespace DataType { class CharExample { public static void Main ( string [] args ) { char ch1 = '\\ u0042 ' ; char ch2 = 'x' ; Console . WriteLine ( ch1 ); Console . WriteLine ( ch2 ); } } } section{ font-size: 25px; } When we run the program, the output will be: B x The unicode value of 'B' is '\\u0042' , hence printing ch1 will print 'B' . section{ font-size: 25px; }","title":"Character (char)"},{"location":"week-7-csharp/ce103-week-7-csharp/#decimal","text":"Decimal type has more precision and a smaller range as compared to floating point types (double and float). So it is appropriate for monetary calculations. Size : 128 bits Default value : 0.0M [M at the end represent the value is of decimal type] Range : (-7.9 x 1028 to 7.9 x 1028) / (100 to 28) section{ font-size: 25px; } For example: using System ; namespace DataType { class DecimalExample { public static void Main ( string [] args ) { decimal bankBalance = 53005.25 M ; Console . WriteLine ( bankBalance ); } } } section{ font-size: 25px; } When we run the program, the output will be: 53005 .25 The suffix M or m must be added at the end otherwise the value will be treated as a double and an error will be generated. section{ font-size: 25px; }","title":"Decimal"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-literals","text":"Let's look at the following statement: int number = 41 ; Here, int is a data type number is a variable and 41 is a literal Literals are fixed values that appear in the program. They do not require any computation. For example, 5 , false , 'w' are literals that appear in a program directly without any computation. section{ font-size: 25px; }","title":"C# Literals"},{"location":"week-7-csharp/ce103-week-7-csharp/#boolean-literals","text":"true and false are the available boolean literals. They are used to initialize boolean variables. For example: bool isValid = true ; bool isPresent = false ; section{ font-size: 25px; }","title":"Boolean Literals"},{"location":"week-7-csharp/ce103-week-7-csharp/#integer-literals","text":"Integer literals are used to initialize variables of integer data types i.e. sbyte , short , int , long , byte , ushort , uint and ulong . If an integer literal ends with L or l , it is of type long. For best practice use L (not l ). long value1 = 4200910L ; long value2 = - 10928190L ; section{ font-size: 25px; } If an integer literal starts with a 0x , it represents hexadecimal value. Number with no prefixes are treated as decimal value. Octal and binary representation are not allowed in C#.","title":"Integer Literals"},{"location":"week-7-csharp/ce103-week-7-csharp/#int-decimalvalue-25-int-hexvalue-0x11c-decimal-value-284","text":"section{ font-size: 25px; }","title":"  int decimalValue = 25;\n  int hexValue = 0x11c;// decimal value 284\n"},{"location":"week-7-csharp/ce103-week-7-csharp/#floating-point-literals","text":"Floating point literals are used to initialize variables of float and double data types. If a floating point literal ends with a suffix f or F , it is of type float. Similarly, if it ends with d or D , it is of type double. If neither of the suffix is present, it is of type double by default . These literals contains e or E when expressed in scientific notation. double number = 24.67 ; // double by default float value = - 12.29F ; double scientificNotation = 6.21 e2 ; // equivalent to 6.21 x 102 i.e. 621 section{ font-size: 25px; }","title":"Floating Point Literals"},{"location":"week-7-csharp/ce103-week-7-csharp/#character-and-string-literals","text":"Character literals are used to initialize variables of char data types. Character literals are enclosed in single quotes. For example, 'x' , 'p' , etc. They can be represented as character, hexadecimal escape sequence, unicode representation or integral values casted to char. char ch1 = 'R' ; // character char ch2 = '\\ x0072 ' ; // hexadecimal char ch3 = '\\ u0059 ' ; // unicode char ch4 = ( char ) 107 ; // casted from integer section{ font-size: 25px; } String literals are the collection of character literals. They are enclosed in double quotes. For example, \"Hello\", \"Easy Programming\", etc. string firstName = \"Richard\" ; string lastName = \" Feynman\" ; section{ font-size: 25px; } C# also supports escape sequence characters such as: | Character | Meaning | | --- | --- | | \\' | Single quote | | \\\" | Double quote | | \\\\ | Backslash | | \\n | Newline | | \\r | Carriage return | | \\t | Horizontal Tab | | \\a | Alert | | \\b | Backspace | section{ font-size: 25px; }","title":"Character and String Literals"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-operators","text":"In this article, we will learn everything about different types of operators in C# programming language and how to use them. Operators are symbols that are used to perform operations on operands. Operands may be variables and/or constants. For example , in 2+3 , + is an operator that is used to carry out addition operation, while 2 and 3 are operands. Operators are used to manipulate variables and values in a program. C# supports a number of operators that are classified based on the type of operations they perform. section{ font-size: 25px; }","title":"C# Operators"},{"location":"week-7-csharp/ce103-week-7-csharp/#1-basic-assignment-operator","text":"Basic assignment operator (=) is used to assign values to variables. For example, double x ; x = 50.05 ; Here, 50.05 is assigned to x. section{ font-size: 25px; }","title":"1. Basic Assignment Operator"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-1-basic-assignment-operator","text":"using System ; namespace Operator { class AssignmentOperator { public static void Main ( string [] args ) { int firstNumber , secondNumber ; // Assigning a constant to variable firstNumber = 10 ; Console . WriteLine ( \"First Number = {0}\" , firstNumber ); // Assigning a variable to another variable secondNumber = firstNumber ; Console . WriteLine ( \"Second Number = {0}\" , secondNumber ); } } } section{ font-size: 25px; } When we run the program, the output will be: First Number = 10 Second Number = 10 This is a simple example that demonstrates the use of assignment operator. section{ font-size: 25px; } You might have noticed the use of curly brackets { } in the example. We will discuss about them in string formatting . For now, just keep in mind that {0} is replaced by the first variable that follows the string, {1} is replaced by the second variable and so on. section{ font-size: 25px; }","title":"Example 1: Basic Assignment Operator"},{"location":"week-7-csharp/ce103-week-7-csharp/#2-arithmetic-operators","text":"Arithmetic operators are used to perform arithmetic operations such as addition, subtraction, multiplication, division, etc. For example, int x = 5 ; int y = 10 ; int z = x + y ; // z = 15 section{ font-size: 25px; } C# Arithmetic Operators Operator Operator Name Example + Addition Operator 6 + 3 evaluates to 9 - Subtraction Operator 10 - 6 evaluates to 4 * Multiplication Operator 4 * 2 evaluates to 8 / Division Operator 10 / 5 evaluates to 2 % Modulo Operator (Remainder) 16 % 3 evaluates to 1 section{ font-size: 25px; }","title":"2. Arithmetic Operators"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-2-arithmetic-operators","text":"using System ; namespace Operator { class ArithmeticOperator { public static void Main ( string [] args ) { double firstNumber = 14.40 , secondNumber = 4.60 , result ; int num1 = 26 , num2 = 4 , rem ; // Addition operator result = firstNumber + secondNumber ; Console . WriteLine ( \"{0} + {1} = {2}\" , firstNumber , secondNumber , result ); // Subtraction operator result = firstNumber - secondNumber ; Console . WriteLine ( \"{0} - {1} = {2}\" , firstNumber , secondNumber , result ); // Multiplication operator result = firstNumber * secondNumber ; Console . WriteLine ( \"{0} * {1} = {2}\" , firstNumber , secondNumber , result ); // Division operator result = firstNumber / secondNumber ; Console . WriteLine ( \"{0} / {1} = {2}\" , firstNumber , secondNumber , result ); // Modulo operator rem = num1 % num2 ; Console . WriteLine ( \"{0} % {1} = {2}\" , num1 , num2 , rem ); } } } section{ font-size: 25px; } When we run the program, the output will be: 14 .4 + 4 .6 = 19 14 .4 - 4 .6 = 9 .8 14 .4 * 4 .6 = 66 .24 14 .4 / 4 .6 = 3 .1304347826087 26 % 4 = 2 Arithmetic operations are carried out in the above example. Variables can be replaced by constants in the statements. For example, result = 4.5 + 2.7 ; // result will hold 7.2 result = firstNumber - 3.2 ; // result will hold 11.2 section{ font-size: 25px; }","title":"Example 2: Arithmetic Operators"},{"location":"week-7-csharp/ce103-week-7-csharp/#3-relational-operators","text":"Relational operators are used to check the relationship between two operands. If the relationship is true the result will be true , otherwise it will result in false . Relational operators are used in decision making and loops. C# Relational Operators Operator Operator Name Example == Equal to 6 == 4 evaluates to false > Greater than 3 > -1 evaluates to true < Less than 5 < 3 evaluates to false >= Greater than or equal to 4 >= 4 evaluates to true <= Less than or equal to 5 <= 3 evaluates to false != Not equal to 10 != 2 evaluates to true section{ font-size: 25px; }","title":"3. Relational Operators"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-3-relational-operators","text":"using System ; namespace Operator { class RelationalOperator { public static void Main ( string [] args ) { bool result ; int firstNumber = 10 , secondNumber = 20 ; result = ( firstNumber == secondNumber ); Console . WriteLine ( \"{0} == {1} returns {2}\" , firstNumber , secondNumber , result ); result = ( firstNumber > secondNumber ); Console . WriteLine ( \"{0} > {1} returns {2}\" , firstNumber , secondNumber , result ); result = ( firstNumber < secondNumber ); Console . WriteLine ( \"{0} < {1} returns {2}\" , firstNumber , secondNumber , result ); result = ( firstNumber >= secondNumber ); Console . WriteLine ( \"{0} >= {1} returns {2}\" , firstNumber , secondNumber , result ); result = ( firstNumber <= secondNumber ); Console . WriteLine ( \"{0} <= {1} returns {2}\" , firstNumber , secondNumber , result ); result = ( firstNumber != secondNumber ); Console . WriteLine ( \"{0} != {1} returns {2}\" , firstNumber , secondNumber , result ); } } } section{ font-size: 25px; } When we run the program, the output will be: 10 == 20 returns False 10 > 20 returns False 10 < 20 returns True 10 > = 20 returns False 10 < = 20 returns True 10 ! = 20 returns True section{ font-size: 25px; }","title":"Example 3: Relational Operators"},{"location":"week-7-csharp/ce103-week-7-csharp/#4-logical-operators","text":"Logical operators are used to perform logical operation such as and , or . Logical operators operates on boolean expressions ( true and false ) and returns boolean values. Logical operators are used in decision making and loops. Here is how the result is evaluated for logical AND and OR operators. C# Logical operators Operand 1 Operand 2 OR (|) AND (&&) true true true true true false true false false true true false false false false false In simple words, the table can be summarized as: If one of the operand is true, the OR operator will evaluate it to true . If one of the operand is false, the AND operator will evaluate it to false . section{ font-size: 25px; }","title":"4. Logical Operators"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-4-logical-operators","text":"using System ; namespace Operator { class LogicalOperator { public static void Main ( string [] args ) { bool result ; int firstNumber = 10 , secondNumber = 20 ; // OR operator result = ( firstNumber == secondNumber ) || ( firstNumber > 5 ); Console . WriteLine ( result ); // AND operator result = ( firstNumber == secondNumber ) && ( firstNumber > 5 ); Console . WriteLine ( result ); } } } section{ font-size: 25px; } When we run the program, the output will be: True False section{ font-size: 25px; }","title":"Example 4: Logical Operators"},{"location":"week-7-csharp/ce103-week-7-csharp/#5-unary-operators","text":"Unlike other operators, the unary operators operates on a single operand. C# unary operators Operator Operator Name Description + Unary Plus Leaves the sign of operand as it is - Unary Minus Inverts the sign of operand ++ Increment Increment value by 1 -- Decrement Decrement value by 1 ! Logical Negation (Not) Inverts the value of a boolean section{ font-size: 25px; }","title":"5. Unary Operators"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-5-unary-operators","text":"using System ; namespace Operator { class UnaryOperator { public static void Main ( string [] args ) { int number = 10 , result ; bool flag = true ; result = + number ; Console . WriteLine ( \"+number = \" + result ); result = - number ; Console . WriteLine ( \"-number = \" + result ); result = ++ number ; Console . WriteLine ( \"++number = \" + result ); result = -- number ; Console . WriteLine ( \"--number = \" + result ); Console . WriteLine ( \"!flag = \" + (! flag )); } } } section{ font-size: 25px; } When we run the program, the output will be: +number = 10 -number = -10 ++number = 11 --number = 10 !flag = False The increment (++) and decrement (--) operators can be used as prefix and postfix. If used as prefix, the change in value of variable is seen on the same line and if used as postfix, the change in value of variable is seen on the next line. This will be clear by the example below. section{ font-size: 25px; }","title":"Example 5: Unary Operators"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-6-post-and-pre-increment-operators-in-c","text":"using System ; namespace Operator { class UnaryOperator { public static void Main ( string [] args ) { int number = 10 ; Console . WriteLine (( number ++)); Console . WriteLine (( number )); Console . WriteLine ((++ number )); Console . WriteLine (( number )); } } } section{ font-size: 25px; } When we run the program, the output will be: 10 11 12 12 section{ font-size: 25px; } We can see the effect of using ++ as prefix and postfix. When ++ is used after the operand, the value is first evaluated and then it is incremented by 1 . Hence the statement Console.WriteLine((number++)); prints 10 instead of 11 . After the value is printed, the value of number is incremented by 1 . The process is opposite when ++ is used as prefix. The value is incremented before printing. Hence the statement Console.WriteLine((++number)); prints 12 . The case is same for decrement operator (--) . section{ font-size: 25px; }","title":"Example 6: Post and Pre Increment operators in C"},{"location":"week-7-csharp/ce103-week-7-csharp/#6-ternary-operator","text":"The ternary operator ? : operates on three operands. It is a shorthand for if-then-else statement. Ternary operator can be used as follows: variable = Condition ? Expression1 : Expression2 ; The ternary operator works as follows: If the expression stated by Condition is true , the result of Expression1 is assigned to variable. If it is false , the result of Expression2 is assigned to variable. section{ font-size: 25px; }","title":"6. Ternary Operator"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-7-ternary-operator","text":"using System ; namespace Operator { class TernaryOperator { public static void Main ( string [] args ) { int number = 10 ; string result ; result = ( number % 2 == 0 )? \"Even Number\" : \"Odd Number\" ; Console . WriteLine ( \"{0} is {1}\" , number , result ); } } } section{ font-size: 25px; } When we run the program, the output will be: 10 is Even Number To learn more, visit C# ternary operator . section{ font-size: 25px; }","title":"Example 7: Ternary Operator"},{"location":"week-7-csharp/ce103-week-7-csharp/#7-bitwise-and-bit-shift-operators","text":"Bitwise and bit shift operators are used to perform bit manipulation operations. C# Bitwise and Bit Shift operators Operator Operator Name ~ Bitwise Complement & Bitwise AND | Bitwise OR ^ Bitwise Exclusive OR << Bitwise Left Shift >> Bitwise Right Shift section{ font-size: 25px; }","title":"7. Bitwise and Bit Shift Operators"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-8-bitwise-and-bit-shift-operator","text":"using System ; namespace Operator { class BitOperator { public static void Main ( string [] args ) { int firstNumber = 10 ; int secondNumber = 20 ; int result ; result = ~ firstNumber ; Console . WriteLine ( \"~{0} = {1}\" , firstNumber , result ); result = firstNumber & secondNumber ; Console . WriteLine ( \"{0} & {1} = {2}\" , firstNumber , secondNumber , result ); result = firstNumber | secondNumber ; Console . WriteLine ( \"{0} | {1} = {2}\" , firstNumber , secondNumber , result ); result = firstNumber ^ secondNumber ; Console . WriteLine ( \"{0} ^ {1} = {2}\" , firstNumber , secondNumber , result ); result = firstNumber << 2 ; Console . WriteLine ( \"{0} << 2 = {1}\" , firstNumber , result ); result = firstNumber >> 2 ; Console . WriteLine ( \"{0} >> 2 = {1}\" , firstNumber , result ); } } } section{ font-size: 25px; } When we run the program, the output will be: ~10 = -11 10 & 20 = 0 10 | 20 = 30 10 ^ 20 = 30 10 << 2 = 40 10 >> 2 = 2 To learn more, visit C# Bitwise and Bit Shift operator . section{ font-size: 25px; }","title":"Example 8: Bitwise and Bit Shift Operator"},{"location":"week-7-csharp/ce103-week-7-csharp/#8-compound-assignment-operators","text":"C# Compound Assignment Operators Operator Operator Name Example Equivalent To += Addition Assignment x += 5 x = x + 5 -= Subtraction Assignment x -= 5 x = x - 5 *= Multiplication Assignment x *= 5 x = x * 5 /= Division Assignment x /= 5 x = x / 5 %= Modulo Assignment x %= 5 x = x % 5 &= Bitwise AND Assignment x &= 5 x = x & 5 |= Bitwise OR Assignment x \\|= 5 x = x \\| 5 ^= Bitwise XOR Assignment x ^= 5 x = x ^ 5 <<= Left Shift Assignment x <<= 5 x = x << 5 >>= Right Shift Assignment x >>= 5 x = x >> 5 => Lambda Operator x => x*x Returns x*x","title":"8. Compound Assignment Operators"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-9-compound-assignment-operator","text":"using System ; namespace Operator { class BitOperator { public static void Main ( string [] args ) { int number = 10 ; number += 5 ; Console . WriteLine ( number ); number -= 3 ; Console . WriteLine ( number ); number *= 2 ; Console . WriteLine ( number ); number /= 3 ; Console . WriteLine ( number ); number %= 3 ; Console . WriteLine ( number ); number &= 10 ; Console . WriteLine ( number ); number |= 14 ; Console . WriteLine ( number ); number ^= 12 ; Console . WriteLine ( number ); number <<= 2 ; Console . WriteLine ( number ); number >>= 3 ; Console . WriteLine ( number ); } } } section{ font-size: 25px; } When we run the program, the output will be: 15 12 24 8 2 2 14 2 8 1 We will discuss about Lambda operators in later tutorial. section{ font-size: 25px; }","title":"Example 9: Compound Assignment Operator"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-operator-precedence-and-associativity","text":"In this tutorial we you will learn about operator precedence and associativity in C#. This will give us an idea of how an expression is evaluated by the C# compiler. section{ font-size: 25px; }","title":"C# Operator Precedence and Associativity"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-operator-precedence","text":"Operator precedence is a set of rules which defines how an expression is evaluated. In C#, each C# operator has an assigned priority and based on these priorities, the expression is evaluated. section{ font-size: 25px; } For example , the precedence of multiplication (*) operator is higher than the precedence of addition (+) operator. Therefore, operation involving multiplication is carried out before addition. Take a look at the statement below. int x = 4 + 3 * 5 ; What will be the value of x after executing this statement? The operand 3 is associated with + and * . As stated earlier, multiplication has a higher precedence than addition. So, the operation 3 * 5 is carried out instead of 4 + 3 . The value of variable x will be 19 . If addition would have a higher precedence, 4 + 3 would be evaluated first and the value of x would be 35 . section{ font-size: 25px; }","title":"C# Operator Precedence"},{"location":"week-7-csharp/ce103-week-7-csharp/#operator-precedence-table","text":"The higher the precedence of operator is, the higher it appears in the table C# Operator Precedence Category Operators Postfix Increment and Decrement ++, -- Prefix Increment, Decrement and Unary ++, --, +, -, !, ~ Multiplicative *, /, % Additive +, - Shift <<, >> Relational <, <=, >, >= Equality ==, != Bitwise AND & Bitwise XOR ^ Bitwise OR | Logical AND && Logical OR | Ternary ? : Assignment =, +=, -=, *=, /=, %=, &=, |=, ^=, <<=, >>= section{ font-size: 25px; } The assignment operators have the lowest precedence while the postfix increment and decrement operators have the highest precedence. section{ font-size: 25px; }","title":"Operator Precedence Table"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-1-operator-precedence","text":"using System ; namespace Operator { class OperatorPrecedence { public static void Main ( string [] args ) { int result1 ; int a = 5 , b = 6 , c = 4 ; result1 = -- a * b - ++ c ; Console . WriteLine ( result1 ); bool result2 ; result2 = b >= c + a ; Console . WriteLine ( result2 ); } } } section{ font-size: 25px; } When we run the program, the output will be: 19 False section{ font-size: 25px; } Let's understand how the expression is evaluated in the program. The precedence of -- and ++ is higher than * , and precedence of * is higher than - . Hence the statement, result1 = -- a * b - ++ c ; is equivalent to result1 = ((-- a )* b )-(++ c ); section{ font-size: 25px; } The expression inside parentheses is always evaluated first no matter what the precedence of operators outside it is. At first, (--a) is evaluated resulting into 4 . section{ font-size: 25px; } Then (++c) is evaluated resulting into 5 . section{ font-size: 25px; } Now, (a * b) is evaluated resulting into 24 . section{ font-size: 25px; } Finally, the subtraction is carried out resulting into 19 . Hence the final value of result1 will be 19 . section{ font-size: 25px; } In the next expression, the precedence of + is higher than >= . So, c and a is added first and the sum is compared with b to produce false . section{ font-size: 25px; }","title":"Example 1: Operator Precedence"},{"location":"week-7-csharp/ce103-week-7-csharp/#associativity-of-operators-in-c","text":"In the previous section, we discussed about operator precedence. If two operators with different precedence are used, the operator with higher precedence is evaluated first. But what if both the operators have same precedence? In such case, the expression is evaluated based on the associativity of operator (left to right or right to left). section{ font-size: 25px; } For example: int a = 5 , b = 6 , c = 3 ; int result = a * b / c ; Here, both * and / have the same precedence. But since the associativity of these operators is from left to right , a * b is evaluated first and then division is carried out. The final result of this expression will be 10 . section{ font-size: 25px; } In this particular example, the associativity does not really matter. Because even if division was carried out before multiplication, the result would be unaffected. Let's take a look at another example. int a = 5 , b = 6 , c = 3 ; a = b = c ; The associativity of = operator is from right to left . So the value of c (i.e. 3 ) is assigned to b, and then the value of b is assigned to a. So after executing this statement, the values of a, b and c will be 3 . section{ font-size: 25px; } The table below shows the associativity of C# operators: C# Associativity of operators Category Operators Associativity Postfix Increment and Decrement ++, -- Left to Right Prefix Increment, Decrement and Unary ++, --, +, -, !, ~ Right to Left Multiplicative *, /, % Left to Right Additive +, - Left to Right Shift <<, >> Left to Right Relational <, <=, >, >= Left to Right Equality ==, != Left to Right Bitwise AND & Left to Right Bitwise XOR ^ Left to Right Bitwise OR | Left to Right Logical AND && Left to Right Logical OR | Left to Right Ternary ? : Right to Left Assignment =, +=, -=, *=, /=, %=, &=, |=, ^=, <<=, >>= Right to Left section{ font-size: 25px; } Almost all the operators have associativity from left to right. The operators having associativity from right to left are: Unary operators Prefix Increment and Decrement Operators Ternary Operator Assignment Operators section{ font-size: 25px; }","title":"Associativity of Operators in C"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-2-associativity-of-operators","text":"using System ; namespace Operator { class OperatorPrecedence { public static void Main ( string [] args ) { int a = 5 , b = 6 , c = 3 ; int result = a * b / c ; Console . WriteLine ( result ); a = b = c ; Console . WriteLine ( \"a = {0}, b = {1}, c = {2}\" , a , b , c ); } } } section{ font-size: 25px; } When we run the program, the output will be: 10 a = 3 , b = 3 , c = 3 section{ font-size: 25px; }","title":"Example 2: Associativity of Operators"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-bitwise-and-bit-shift-operators","text":"In this tutorial, we will learn in detail about bitwise and bit shift operators in C#. C# provides 4 bitwise and 2 bit shift operators. Bitwise and bit shift operators are used to perform bit level operations on integer (int, long, etc) and boolean data. These operators are not commonly used in real life situations. If you are interested to explore more, visit practical applications of bitwise operations . section{ font-size: 25px; } The bitwise and bit shift operators available in C# are listed below. List of C# Bitwise Operators Operator Operator Name ~ Bitwise Complement & Bitwise AND | Bitwise OR ^ Bitwise Exclusive OR (XOR) << Bitwise Left Shift >> Bitwise Right Shift section{ font-size: 25px; }","title":"C# Bitwise and Bit Shift Operators"},{"location":"week-7-csharp/ce103-week-7-csharp/#bitwise-or","text":"Bitwise OR operator is represented by | . It performs bitwise OR operation on the corresponding bits of two operands. If either of the bits is 1 , the result is 1 . Otherwise the result is 0 . If the operands are of type bool , the bitwise OR operation is equivalent to logical OR operation between them. section{ font-size: 25px; } For Example, 14 = 00001110 ( In Binary ) 11 = 00001011 ( In Binary ) Bitwise OR operation between 14 and 11: 00001110 00001011 -------- XOR 00001111 = 15 ( In Decimal ) section{ font-size: 25px; }","title":"Bitwise OR"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-1-bitwise-or","text":"using System ; namespace Operator { class BitWiseOR { public static void Main ( string [] args ) { int firstNumber = 14 , secondNumber = 11 , result ; result = firstNumber | secondNumber ; Console . WriteLine ( \"{0} | {1} = {2}\" , firstNumber , secondNumber , result ); } } } section{ font-size: 25px; } When we run the program, the output will be: 14 | 11 = 15 section{ font-size: 25px; }","title":"Example 1: Bitwise OR"},{"location":"week-7-csharp/ce103-week-7-csharp/#bitwise-and","text":"Bitwise AND operator is represented by & . It performs bitwise AND operation on the corresponding bits of two operands. If either of the bits is 0 , the result is 0 . Otherwise the result is 1 . If the operands are of type bool , the bitwise AND operation is equivalent to logical AND operation between them. section{ font-size: 25px; } - For Example, 14 = 00001110 ( In Binary ) 11 = 00001011 ( In Binary ) Bitwise AND operation between 14 and 11: 00001110 00001011 -------- AND 00001010 = 10 ( In Decimal ) section{ font-size: 25px; }","title":"Bitwise AND"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-2-bitwise-and","text":"using System ; namespace Operator { class BitWiseAND { public static void Main ( string [] args ) { int firstNumber = 14 , secondNumber = 11 , result ; result = firstNumber & secondNumber ; Console . WriteLine ( \"{0} & {1} = {2}\" , firstNumber , secondNumber , result ); } } } section{ font-size: 25px; } When we run the program, the output will be: 14 & 11 = 10 section{ font-size: 25px; }","title":"Example 2: Bitwise AND"},{"location":"week-7-csharp/ce103-week-7-csharp/#bitwise-xor","text":"Bitwise XOR operator is represented by ^ . It performs bitwise XOR operation on the corresponding bits of two operands. If the corresponding bits are same , the result is 0 . If the corresponding bits are different , the result is 1 . If the operands are of type bool , the bitwise XOR operation is equivalent to logical XOR operation between them. section{ font-size: 25px; } For Example, 14 = 00001110 ( In Binary ) 11 = 00001011 ( In Binary ) Bitwise XOR operation between 14 and 11: 00001110 00001011 -------- B - XOR 00000101 = 5 ( In Decimal ) If you want to more about the usage of Bitwise XOR, visit The Magic of XOR","title":"Bitwise XOR"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-3-bitwise-xor","text":"using System ; namespace Operator { class BitWiseXOR { public static void Main ( string [] args ) { int firstNumber = 14 , secondNumber = 11 , result ; result = firstNumber ^ secondNumber ; Console . WriteLine ( \"{0} ^ {1} = {2}\" , firstNumber , secondNumber , result ); } } } section{ font-size: 25px; } When we run the program, the output will be: 14 ^ 11 = 5 section{ font-size: 25px; }","title":"Example 3: Bitwise XOR"},{"location":"week-7-csharp/ce103-week-7-csharp/#bitwise-complement","text":"Bitwise Complement operator is represented by ~ . It is a unary operator, i.e. operates on only one operand. The ~ operator inverts each bits i.e. changes 1 to 0 and 0 to 1. For Example, 26 = 00011010 ( In Binary ) Bitwise Complement operation on 26: ~ 00011010 = 11100101 = 229 ( In Decimal ) section{ font-size: 25px; }","title":"Bitwise Complement"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-4-bitwise-complement","text":"using System ; namespace Operator { class BitWiseComplement { public static void Main ( string [] args ) { int number = 26 , result ; result = ~ number ; Console . WriteLine ( \"~{0} = {1}\" , number , result ); } } } section{ font-size: 25px; } When we run the program, the output will be: ~26 = -27 section{ font-size: 25px; } We got - 27 as output when we were expecting 229 . Why did this happen? It happens because the binary value 11100101 which we expect to be 229 is actually a 2's complement representation of -27 . Negative numbers in computer are represented in 2's complement representation. section{ font-size: 25px; } For any integer n, 2's complement of n will be -(n+1) . 2's complement Decimal Binary 2's Complement 0 00000000 -(11111111 + 1) = -00000000 = -0 (In Decimal) 1 00000001 -(11111110 + 1) = -11111111 = -256 (In Decimal) 229 11100101 -(00011010 + 1) = -00011011 = -27 Overflow values are ignored in 2's complement. The bitwise complement of 26 is 229 (in decimal) and the 2's complement of 229 is -27 . Hence the output is -27 instead of 229 . section{ font-size: 25px; }","title":"Example 4: Bitwise Complement"},{"location":"week-7-csharp/ce103-week-7-csharp/#bitwise-left-shift","text":"Bitwise left shift operator is represented by << . The << operator shifts a number to the left by a specified number of bits. Zeroes are added to the least significant bits. In decimal, it is equivalent to num * 2bits section{ font-size: 25px; } For Example, 42 = 101010 ( In Binary ) Bitwise Lift Shift operation on 42: 42 << 1 = 84 ( In binary 1010100 ) 42 << 2 = 168 ( In binary 10101000 ) 42 << 4 = 672 ( In binary 1010100000 ) section{ font-size: 25px; }","title":"Bitwise Left Shift"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-5-bitwise-left-shift","text":"using System ; namespace Operator { class LeftShift { public static void Main ( string [] args ) { int number = 42 ; Console . WriteLine ( \"{0}<<1 = {1}\" , number , number << 1 ); Console . WriteLine ( \"{0}<<2 = {1}\" , number , number << 2 ); Console . WriteLine ( \"{0}<<4 = {1}\" , number , number << 4 ); } } } section{ font-size: 25px; } When we run the program, the output will be: 42 <<1 = 84 42<<2 = 1 68 42 << 4 = 672 section{ font-size: 25px; }","title":"Example 5: Bitwise Left Shift"},{"location":"week-7-csharp/ce103-week-7-csharp/#bitwise-right-shift","text":"Bitwise right shift operator is represented by >> . The >> operator shifts a number to the right by a specified number of bits. The first operand is shifted to right by the number of bits specified by second operand. In decimal, it is equivalent to floor ( num / 2 bits ) section{ font-size: 25px; } For Example, 42 = 101010 ( In Binary ) Bitwise Lift Shift operation on 42: 42 >> 1 = 21 ( In binary 010101 ) 42 >> 2 = 10 ( In binary 001010 ) 42 >> 4 = 2 ( In binary 000010 ) section{ font-size: 25px; }","title":"Bitwise Right Shift"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-6-bitwise-right-shift","text":"using System ; namespace Operator { class LeftShift { public static void Main ( string [] args ) { int number = 42 ; Console . WriteLine ( \"{0}>>1 = {1}\" , number , number >> 1 ); Console . WriteLine ( \"{0}>>2 = {1}\" , number , number >> 2 ); Console . WriteLine ( \"{0}>>4 = {1}\" , number , number >> 4 ); } } } section{ font-size: 25px; } When we run the program, the output will be: 42 >> 1 = 21 42 >> 2 = 10 42 >> 4 = 2 section{ font-size: 25px; }","title":"Example 6: Bitwise Right Shift"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-basic-input-and-output","text":"In this tutorial, we will learn how to take input from user and and display output in C# using various methods section{ font-size: 25px; }","title":"C# Basic Input and Output"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-output","text":"In order to output something in C#, we can use System . Console . WriteLine () OR System . Console . Write () Here, System is a namespace , Console is a class within namespace System and WriteLine and Write are methods of class Console . Let's look at a simple example that prints a string to output screen. section{ font-size: 25px; }","title":"C# Output"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-1-printing-string-using-writeline","text":"using System ; namespace Sample { class Test { public static void Main ( string [] args ) { Console . WriteLine ( \"C# is cool\" ); } } } section{ font-size: 25px; } When we run the program, the output will be C# is cool section{ font-size: 25px; }","title":"Example 1: Printing String using WriteLine()"},{"location":"week-7-csharp/ce103-week-7-csharp/#difference-between-writeline-and-write-method","text":"The main difference between WriteLine() and Write() is that the Write() method only prints the string provided to it, while the WriteLine() method prints the string and moves to the start of next line as well. Let's take at a look at the example below to understand the difference between these methods. section{ font-size: 25px; }","title":"Difference between WriteLine() and Write() method"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-2-how-to-use-writeline-and-write-method","text":"using System ; namespace Sample { class Test { public static void Main ( string [] args ) { Console . WriteLine ( \"Prints on \" ); Console . WriteLine ( \"New line\" ); Console . Write ( \"Prints on \" ); Console . Write ( \"Same line\" ); } } } section{ font-size: 25px; } When we run the program, the output will be Prints on New line Prints on Same line section{ font-size: 25px; }","title":"Example 2: How to use WriteLine() and Write() method?"},{"location":"week-7-csharp/ce103-week-7-csharp/#printing-variables-and-literals-using-writeline-and-write","text":"The WriteLine() and Write() method can be used to print variables and literals. Here's an example. section{ font-size: 25px; }","title":"Printing Variables and Literals using WriteLine() and Write()"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-3-printing-variables-and-literals","text":"using System ; namespace Sample { class Test { public static void Main ( string [] args ) { int value = 10 ; // Variable Console . WriteLine ( value ); // Literal Console . WriteLine ( 50.05 ); } } } section{ font-size: 25px; } When we run the program, the output will be 10 50 .05 section{ font-size: 25px; }","title":"Example 3: Printing Variables and Literals"},{"location":"week-7-csharp/ce103-week-7-csharp/#combining-concatenating-two-strings-using-operator-and-printing-them","text":"Strings can be combined/concatenated using the + operator while printing. section{ font-size: 25px; }","title":"Combining (Concatenating) two strings using + operator and printing them"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-4-printing-concatenated-string-using-operator","text":"using System ; namespace Sample { class Test { public static void Main ( string [] args ) { int val = 55 ; Console . WriteLine ( \"Hello \" + \"World\" ); Console . WriteLine ( \"Value = \" + val ); } } } section{ font-size: 25px; } When we run the program, the output will be Hello World Value = 55 section{ font-size: 25px; }","title":"Example 4: Printing Concatenated String using + operator"},{"location":"week-7-csharp/ce103-week-7-csharp/#printing-concatenated-string-using-formatted-string-better-alternative","text":"A better alternative for printing concatenated string is using formatted string. Formatted string allows programmer to use placeholders for variables. section{ font-size: 25px; } For example, The following line, Console . WriteLine ( \"Value = \" + val ); can be replaced by, Console . WriteLine ( \"Value = {0}\" , val ); {0} is the placeholder for variable val which will be replaced by value of val. Since only one variable is used so there is only one placeholder. Multiple variables can be used in the formatted string. We will see that in the example below. section{ font-size: 25px; }","title":"Printing concatenated string using Formatted String [Better Alternative]"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-5-printing-concatenated-string-using-string-formatting","text":"using System ; namespace Sample { class Test { public static void Main ( string [] args ) { int firstNumber = 5 , secondNumber = 10 , result ; result = firstNumber + secondNumber ; Console . WriteLine ( \"{0} + {1} = {2}\" , firstNumber , secondNumber , result ); } } } section{ font-size: 25px; } When we run the program, the output will be 5 + 10 = 15 Here, {0} is replaced by firstNumber, {1} is replaced by secondNumber and {2} is replaced by result. This approach of printing output is more readable and less error prone than using + operator. To know more about string formatting, visit C# string formatting . section{ font-size: 25px; }","title":"Example 5: Printing Concatenated string using String formatting"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-input","text":"In C#, the simplest method to get input from the user is by using the ReadLine() method of the Console class. However, Read() and ReadKey() are also available for getting input from the user. They are also included in Console class. section{ font-size: 25px; }","title":"C# Input"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-6-get-string-input-from-user","text":"using System ; namespace Sample { class Test { public static void Main ( string [] args ) { string testString ; Console . Write ( \"Enter a string - \" ); testString = Console . ReadLine (); Console . WriteLine ( \"You entered '{0}'\" , testString ); } } } section{ font-size: 25px; } When we run the program, the output will be: Enter a string - Hello World You entered 'Hello World' section{ font-size: 25px; }","title":"Example 6: Get String Input From User"},{"location":"week-7-csharp/ce103-week-7-csharp/#difference-between-readline-read-and-readkey-method","text":"The difference between ReadLine() , Read() and ReadKey() method is: ReadLine() : The ReadLine() method reads the next line of input from the standard input stream. It returns the same string. Read() : The Read() method reads the next character from the standard input stream. It returns the ascii value of the character. ReadKey() : The ReadKey() method obtains the next key pressed by user. This method is usually used to hold the screen until user press a key. If you want to know more about these methods, here is an interesting discussion on StackOverflow on: Difference between Console.Read() and Console.ReadLine()? . section{ font-size: 25px; }","title":"Difference between ReadLine(), Read() and ReadKey() method:"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-7-difference-between-read-and-readkey-method","text":"using System ; namespace Sample { class Test { public static void Main ( string [] args ) { int userInput ; Console . WriteLine ( \"Press any key to continue...\" ); Console . ReadKey (); Console . WriteLine (); Console . Write ( \"Input using Read() - \" ); userInput = Console . Read (); Console . WriteLine ( \"Ascii Value = {0}\" , userInput ); } } } section{ font-size: 25px; } When we run the program, the output will be Press any key to continue ... x Input using Read () - Learning C# Ascii Value = 76 From this example, it must be clear how ReadKey() and Read() method works. While using ReadKey() , as soon as the key is pressed, it is displayed on the screen. When Read() is used, it takes a whole line but only returns the ASCII value of first character. Hence, 76 (ASCII value of L ) is printed. section{ font-size: 25px; }","title":"Example 7: Difference between Read() and ReadKey() method"},{"location":"week-7-csharp/ce103-week-7-csharp/#reading-numeric-values-integer-and-floating-point-types","text":"Reading a character or string is very simple in C#. All you need to do is call the corresponding methods as required. But, reading numeric values can be slightly tricky in C#. We\u2019ll still use the same ReadLine() method we used for getting string values. But since the ReadLine() method receives the input as string, it needs to be converted into integer or floating point type. One simple approach for converting our input is using the methods of Convert class.","title":"Reading numeric values (integer and floating point types)"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-8-reading-numeric-values-from-user-using-convert-class","text":"using System ; namespace UserInput { class MyClass { public static void Main ( string [] args ) { string userInput ; int intVal ; double doubleVal ; Console . Write ( \"Enter integer value: \" ); userInput = Console . ReadLine (); /* Converts to integer type */ intVal = Convert . ToInt32 ( userInput ); Console . WriteLine ( \"You entered {0}\" , intVal ); Console . Write ( \"Enter double value: \" ); userInput = Console . ReadLine (); /* Converts to double type */ doubleVal = Convert . ToDouble ( userInput ); Console . WriteLine ( \"You entered {0}\" , doubleVal ); } } } section{ font-size: 25px; } When we run the program, the output will be Enter integer value: 101 You entered 101 Enter double value: 59 .412 You entered 59 .412 The ToInt32() and ToDouble() method of Convert class converts the string input to integer and double type respectively. Similarly we can convert the input to other types. Here is a complete list of available methods for Convert class . There are other ways to get numeric inputs from user. To learn more, visit Reading an integer from user input . section{ font-size: 25px; }","title":"Example 8: Reading Numeric Values from User using Convert class"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-expressions-statements-and-blocks-with-examples","text":"In this article, we will learn about C# expressions, C# statements, difference between expression and statement, and C# blocks. Expressions, statements and blocks are the building block of a C# program. We have been using them since our first \"Hello World\" program . section{ font-size: 25px; }","title":"C# Expressions, Statements and Blocks (With Examples)"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-expressions","text":"An expression in C# is a combination of operands (variables, literals, method calls) and operators that can be evaluated to a single value. To be precise, an expression must have at least one operand but may not have any operator. section{ font-size: 25px; } Let's look at the example below: double temperature ; temperature = 42.05 ; Here, 42.05 is an expression. Also, temperature = 42.05 is an expression too. int a , b , c , sum ; sum = a + b + c ; Here, a + b + c is an expression. if ( age >= 18 && age < 58 ) Console . WriteLine ( \"Eligible to work\" ); Here, (age>=18 && age<58) is an expression that returns a boolean value. \"Eligible to work\" is also an expression. section{ font-size: 25px; }","title":"C# Expressions"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-statements","text":"A statement is a basic unit of execution of a program. A program consists of multiple statements. section{ font-size: 25px; } For example: int age = 21 ; Int marks = 90 ; In the above example, both lines above are statements. section{ font-size: 25px; } There are different types of statements in C#. In this tutorial, we\u2019ll mainly focus on two of them: Declaration Statement Expression Statement section{ font-size: 25px; }","title":"C# Statements"},{"location":"week-7-csharp/ce103-week-7-csharp/#declaration-statement","text":"Declaration statements are used to declare and initialize variables. section{ font-size: 25px; } For example: char ch ; int maxValue = 55 ; Both char ch; and int maxValue = 55; are declaration statements. section{ font-size: 25px; }","title":"Declaration Statement"},{"location":"week-7-csharp/ce103-week-7-csharp/#expression-statement","text":"An expression followed by a semicolon is called an expression statement. section{ font-size: 25px; } For example: /* Assignment */ area = 3.14 * radius * radius ; /* Method call is an expression*/ System . Console . WriteLine ( \"Hello\" ); Here, 3.14 * radius * radius is an expression and area = 3.14 * radius * radius; is an expression statement. Likewise, System.Console.WriteLine(\"Hello\"); is both an expression and a statement. section{ font-size: 25px; } Beside declaration and expression statement, there are: Selection Statements (if...else, switch) Iteration Statements (do, while, for, foreach) Jump Statements (break, continue, goto, return, yield) Exception Handling Statements (throw, try-catch, try-finally, try-catch-finally) section{ font-size: 25px; } These statements will be discussed in later tutorials. If you want to learn more about statements, visit C# Statements ( C# reference) section{ font-size: 25px; }","title":"Expression Statement"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-blocks","text":"A block is a combination of zero or more statements that is enclosed inside curly brackets { } . section{ font-size: 25px; } For example:","title":"C# Blocks"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-1-c-blocks-with-statements","text":"using System ; namespace Blocks { class BlockExample { public static void Main ( string [] args ) { double temperature = 42.05 ; if ( temperature > 32 ) { // Start of block Console . WriteLine ( \"Current temperature = {0}\" , temperature ); Console . WriteLine ( \"It's hot\" ); } // End of block } } } section{ font-size: 25px; } When we run the program, the output will be: Current temperature = 42.05 It ' s hot Here, the two statements inside { } : Console . WriteLine ( \"Current temperature = {0}\" , temperature ); and Console . WriteLine ( \"It's hot\" ); forms a block . section{ font-size: 25px; }","title":"Example 1: C# Blocks with statements"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-2-c-blocks-without-statements","text":"A block may not have any statements within it as shown in the below example. using System ; namespace Blocks { class BlockExample { public static void Main ( string [] args ) { double temperature = 42.05 ; if ( temperature > 32 ) { // Start of block // No statements } // End of block } } } Here, the curly braces { } after if(temperature > 32) contains only comments and no statements. section{ font-size: 25px; }","title":"Example 2: C# Blocks without statements"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-comments","text":"In this article, we will learn about C# comments, different style of comments, and why and how to use them in a program. Comments are used in a program to help us understand a piece of code. They are human readable words intended to make the code readable. Comments are completely ignored by the compiler. section{ font-size: 25px; } In C#, there are 3 types of comments: Single Line Comments ( // ) Multi Line Comments ( /* */ ) XML Comments ( /// ) section{ font-size: 25px; }","title":"C# Comments"},{"location":"week-7-csharp/ce103-week-7-csharp/#single-line-comments","text":"Single line comments start with a double slash // . The compiler ignores everything after // to the end of the line. For example, int a = 5 + 7 ; // Adding 5 and 7 Here, Adding 5 and 7 is the comment. section{ font-size: 25px; }","title":"Single Line Comments"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-1-using-single-line-comment","text":"// Hello World Program using System ; namespace HelloWorld { class Program { public static void Main ( string [] args ) // Execution Starts from Main method { // Prints Hello World Console . WriteLine ( \"Hello World!\" ); } } } section{ font-size: 25px; } The above program contains 3 single line comments: // Hello World Program // Execution Starts from Main method and // Prints Hello World Single line comments can be written in a separate line or along with the codes in same line. However, it is recommended to use comments in a separate line. section{ font-size: 25px; }","title":"Example 1: Using single line comment"},{"location":"week-7-csharp/ce103-week-7-csharp/#multi-line-comments","text":"Multi line comments start with /* and ends with */ . Multi line comments can span over multiple lines. section{ font-size: 25px; }","title":"Multi Line Comments"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-2-using-multi-line-comment","text":"/* This is a Hello World Program in C#. This program prints Hello World.*/ using System ; namespace HelloWorld { class Program { public static void Main ( string [] args ) { /* Prints Hello World */ Console . WriteLine ( \"Hello World!\" ); } } } section{ font-size: 25px; } The above program contains 2 multi line comments: /* This is a Hello World Program in C#. This program prints Hello World. */ and /* Prints Hello World */ Here, we may have noticed that it is not compulsory for a multi line comment to span over multiple lines. /* \u2026 */ can be used instead of single line comments. section{ font-size: 25px; }","title":"Example 2: Using multi line comment"},{"location":"week-7-csharp/ce103-week-7-csharp/#xml-documentation-comments","text":"XML documentation comment is a special feature in C#. It starts with a triple slash /// and is used to categorically describe a piece of code.. This is done using XML tags within a comment. These comments are then, used to create a separate XML documentation file. If you are not familiar with XML, see What is XML? section{ font-size: 25px; }","title":"XML Documentation Comments"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-3-using-xml-documentation-comment","text":"/// <summary> /// This is a hello world program. /// </summary> using System ; namespace HelloWorld { class Program { public static void Main ( string [] args ) { Console . WriteLine ( \"Hello World!\" ); } } } section{ font-size: 25px; } The XML comment used in the above program is /// <summary> /// This is a hello world program. /// </summary> section{ font-size: 25px; } The XML documentation (.xml file) generated will contain: <?xml version=\"1.0\"?> <doc> <assembly> <name> HelloWorld </name> </assembly> <members> </members> </doc> Visit XML Documentation Comments if you are interested in learning more. section{ font-size: 25px; }","title":"Example 3: Using XML documentation comment"},{"location":"week-7-csharp/ce103-week-7-csharp/#use-comments-the-right-way","text":"Comments are used to explain parts of code but they should not be overused . For example: // Prints Hello World Console . WriteLine ( \"Hello World\" ); section{ font-size: 25px; } Using comment in the above example is not necessary. It is obvious that the line will print Hello World. Comments should be avoided in such cases. Instead comments should be used in the program to explain complex algorithms and techniques. Comments should be short and to the point instead of a long description. As a rule of thumb, it is better to explain why instead of how , using comments. section{ font-size: 25px; }","title":"Use Comments the Right Way"},{"location":"week-7-csharp/ce103-week-7-csharp/#flow-control","text":"section{ font-size: 25px; }","title":"Flow Control"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-if-ifelse-ifelse-if-and-nested-if-statement","text":"In this article, we will learn how to use if, if...else, if...else if statement in C# to control the flow of our program\u2019s execution. Testing a condition is inevitable in programming. We will often face situations where we need to test conditions (whether it is true or false ) to control the flow of program. These conditions may be affected by user's input, time factor, current environment where the program is running, etc. In this article, we'll learn to test conditions using if statement in C#. section{ font-size: 25px; }","title":"C# if, if...else, if...else if and Nested if Statement"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-if-if-then-statement","text":"C# if-then statement will execute a block of code if the given condition is true. The syntax of if-then statement in C# is: if ( boolean - expression ) { // statements executed if boolean-expression is true } section{ font-size: 25px; } The boolean-expression will return either true or false . If the boolean-expression returns true , the statements inside the body of if ( inside {...} ) will be executed. If the boolean-expression returns false , the statements inside the body of if will be ignored. section{ font-size: 25px; } For example, if ( number < 5 ) { number += 5 ; } In this example, the statement number += 5 ; will be executed only if the value of number is less than 5. Remember the += operator ? section{ font-size: 25px; }","title":"C# if (if-then) Statement"},{"location":"week-7-csharp/ce103-week-7-csharp/#how-if-statement-works","text":"section{ font-size: 25px; }","title":"How if statement works?"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-1-c-if-statement","text":"using System ; namespace Conditional { class IfStatement { public static void Main ( string [] args ) { int number = 2 ; if ( number < 5 ) { Console . WriteLine ( \"{0} is less than 5\" , number ); } Console . WriteLine ( \"This statement is always executed.\" ); } } } section{ font-size: 25px; } When we run the program, the output will be: 2 is less than 5 This statement is always executed . section{ font-size: 25px; } The value of number is initialized to 2. So the expression number < 5 is evaluated to true . Hence, the code inside the if block are executed. The code after the if statement will always be executed irrespective to the expression. Now, change the value of number to something greater than 5 , say 10 . When we run the program the output will be: This statement is always executed. The expression number < 5 will return false , hence the code inside if block won't be executed. section{ font-size: 25px; }","title":"Example 1: C# if Statement"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-ifelse-if-then-else-statement","text":"The if statement in C# may have an optional else statement. The block of code inside the else statement will be executed if the expression is evaluated to false . section{ font-size: 25px; } The syntax of if...else statement in C# is: if ( boolean - expression ) { // statements executed if boolean-expression is true } else { // statements executed if boolean-expression is false } section{ font-size: 25px; } For example, if ( number < 5 ) { number += 5 ; } else { number -= 5 ; } section{ font-size: 25px; } In this example, the statement number += 5 ; will be executed only if the value of number is less than 5 . The statement number -= 5 ; will be executed if the value of number is greater than or equal to 5 . section{ font-size: 25px; }","title":"C# if...else (if-then-else) Statement"},{"location":"week-7-csharp/ce103-week-7-csharp/#how-ifelse-statement-works","text":"Working of if...else Statement section{ font-size: 25px; }","title":"How if...else Statement works?"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-2-c-ifelse-statement","text":"using System ; namespace Conditional { class IfElseStatement { public static void Main ( string [] args ) { int number = 12 ; if ( number < 5 ) { Console . WriteLine ( \"{0} is less than 5\" , number ); } else { Console . WriteLine ( \"{0} is greater than or equal to 5\" , number ); } Console . WriteLine ( \"This statement is always executed.\" ); } } } section{ font-size: 25px; } When we run the program, the output will be: 12 is greater than or equal to 5 This statement is always executed . section{ font-size: 25px; } Here, the value of number is initialized to 12 . So the expression number < 5 is evaluated to false . Hence, the code inside the else block are executed. The code after the if..else statement will always be executed irrespective to the expression. section{ font-size: 25px; } Now, change the value of number to something less than 5 , say 2 . When we run the program the output will be: 2 is less than 5 This statement is always executed . The expression number < 5 will return true, hence the code inside if block will be executed. section{ font-size: 25px; } Ternary operator in C# provides a shortcut for C# if...else statement. section{ font-size: 25px; }","title":"Example 2: C# if...else Statement"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-ifelse-if-if-then-else-if-statement","text":"When we have only one condition to test, if-then and if-then-else statement works fine. But what if we have a multiple condition to test and execute one of the many block of code. section{ font-size: 25px; } For such case, we can use if..else if statement in C#. The syntax for if...else if statement is: if ( boolean - expression - 1 ) { // statements executed if boolean-expression-1 is true } else if ( boolean - expression - 2 ) { // statements executed if boolean-expression-2 is true } else if ( boolean - expression - 3 ) { // statements executed if boolean-expression-3 is true } . . . else { // statements executed if all above expressions are false } section{ font-size: 25px; } The if...else if statement is executed from the top to bottom . As soon as a test expression is true , the code inside of that if ( or else if ) block is executed. Then the control jumps out of the if...else if block. If none of the expression is true , the code inside the else block is executed. Alternatively, we can use switch statement in such condition. section{ font-size: 25px; }","title":"C# if...else if (if-then-else if) Statement"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-3-c-ifelse-if-statement","text":"using System ; namespace Conditional { class IfElseIfStatement { public static void Main ( string [] args ) { int number = 12 ; if ( number < 5 ) { Console . WriteLine ( \"{0} is less than 5\" , number ); } else if ( number > 5 ) { Console . WriteLine ( \"{0} is greater than 5\" , number ); } else { Console . WriteLine ( \"{0} is equal to 5\" ); } } } } section{ font-size: 25px; } When we run the program, the output will be: 12 is greater than 5 section{ font-size: 25px; } The value of number is initialized to 12 . The first test expression number < 5 is false , so the control will move to the else if block. The test expression number > 5 is true hence the block of code inside else if will be executed. Similarly, we can change the value of number to alter the flow of execution. section{ font-size: 25px; }","title":"Example 3: C# if...else if Statement"},{"location":"week-7-csharp/ce103-week-7-csharp/#nested-ifelse-statement","text":"An if...else statement can exist within another if...else statement. Such statements are called nested if...else statement. The general structure of nested if...else statement is: if ( boolean - expression ){ if ( nested - expression - 1 ){ // code to be executed } else { // code to be executed } } else { if ( nested - expression - 2 ){ // code to be executed } else { // code to be executed } } section{ font-size: 25px; } Nested if statements are generally used when we have to test one condition followed by another. In a nested if statement, if the outer if statement returns true, it enters the body to check the inner if statement. section{ font-size: 25px; }","title":"Nested if...else Statement"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-4-nested-ifelse-statement","text":"The following program computes the largest number among 3 numbers using nested if...else statement. using System ; namespace Conditional { class Nested { public static void Main ( string [] args ){ int first = 7 , second = - 23 , third = 13 ; if ( first > second ){ if ( firstNumber > third ){ Console . WriteLine ( \"{0} is the largest\" , first ); } else { Console . WriteLine ( \"{0} is the largest\" , third ); } } else { if ( second > third ){ Console . WriteLine ( \"{0} is the largest\" , second ); } else { Console . WriteLine ( \"{0} is the largest\" , third ); } } } } } section{ font-size: 25px; } When we run the program, the output will be: 13 is the largest section{ font-size: 25px; }","title":"Example 4: Nested if...else Statement"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-switch-statement","text":"In this article, we will learn about switch statement in C# and how to use them with examples. Switch statement can be used to replace the if...else if statement in C#. The advantage of using switch over if...else if statement is the codes will look much cleaner and readable with switch. section{ font-size: 25px; } The syntax of switch statement is: switch ( variable / expression ) { case value1 : // Statements executed if expression(or variable) = value1 break ; case value2 : // Statements executed if expression(or variable) = value1 break ; ... ... ... ... ... ... default : // Statements executed if no case matches } section{ font-size: 25px; } The switch statement evaluates the expression (or variable) and compare its value with the values (or expression) of each case (value1, value2, \u2026). When it finds the matching value, the statements inside that case are executed. section{ font-size: 25px; } But, if none of the above cases matches the expression, the statements inside default block is executed. The default statement at the end of switch is similar to the else block in if else statement. section{ font-size: 25px; } However a problem with the switch statement is, when the matching value is found, it executes all statements after it until the end of switch block. section{ font-size: 25px; } To avoid this, we use break statement at the end of each case. The break statement stops the program from executing non-matching statements by terminating the execution of switch statement. To learn more about break statement, visit C# break statement . section{ font-size: 25px; }","title":"C# switch Statement"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-1-c-switch-statement","text":"using System ; namespace Conditional { class SwitchCase { public static void Main ( string [] args ) { char ch ; Console . WriteLine ( \"Enter an alphabet\" ); ch = Convert . ToChar ( Console . ReadLine ()); switch ( Char . ToLower ( ch )) { case 'a' : Console . WriteLine ( \"Vowel\" ); break ; case 'e' : Console . WriteLine ( \"Vowel\" ); break ; case 'i' : Console . WriteLine ( \"Vowel\" ); break ; case 'o' : Console . WriteLine ( \"Vowel\" ); break ; case 'u' : Console . WriteLine ( \"Vowel\" ); break ; default : Console . WriteLine ( \"Not a vowel\" ); break ; } } } } section{ font-size: 25px; } When we run the program, the output will be: Enter an alphabet X Not a vowel section{ font-size: 25px; } In this example, the user is prompted to enter an alphabet. The alphabet is converted to lowercase by using ToLower() method if it is in uppercase. Then, the switch statement checks whether the alphabet entered by user is any of a, e, i, o or u . If one of the case matches, Vowel is printed otherwise the control goes to default block and Not a vowel is printed as output. Since, the output for all vowels are the same, we can join the cases as: section{ font-size: 25px; }","title":"Example 1: C# switch Statement"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-2-c-switch-statement-with-grouped-cases","text":"using System ; namespace Conditional { class SwitchCase { public static void Main ( string [] args ) { char ch ; Console . WriteLine ( \"Enter an alphabet\" ); ch = Convert . ToChar ( Console . ReadLine ()); switch ( Char . ToLower ( ch )) { case 'a' : case 'e' : case 'i' : case 'o' : case 'u' : Console . WriteLine ( \"Vowel\" ); break ; default : Console . WriteLine ( \"Not a vowel\" ); break ; } } } } section{ font-size: 25px; } The output of both programs is same. In the above program, all vowels print the output Vowel and breaks from the switch statement. section{ font-size: 25px; } Although switch statement makes the code look cleaner than if...else if statement, switch is restricted to work with limited data types. Switch statement in C# only works with: Primitive data types: bool, char and integral type Enumerated Types (Enum) String Class Nullable types of above data types section{ font-size: 25px; }","title":"Example 2: C# switch Statement with grouped cases"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-3-simple-calculator-program-using-c-switch-statement","text":"using System ; namespace Conditional { class SwitchCase { public static void Main ( string [] args ) { char op ; double first , second , result ; Console . Write ( \"Enter first number: \" ); first = Convert . ToDouble ( Console . ReadLine ()); Console . Write ( \"Enter second number: \" ); second = Convert . ToDouble ( Console . ReadLine ()); Console . Write ( \"Enter operator (+, -, *, /): \" ); op = ( char ) Console . Read (); switch ( op ) { case '+' : result = first + second ; Console . WriteLine ( \"{0} + {1} = {2}\" , first , second , result ); break ; case '-' : result = first - second ; Console . WriteLine ( \"{0} - {1} = {2}\" , first , second , result ); break ; case '*' : result = first * second ; Console . WriteLine ( \"{0} * {1} = {2}\" , first , second , result ); break ; case '/' : result = first / second ; Console . WriteLine ( \"{0} / {1} = {2}\" , first , second , result ); break ; default : Console . WriteLine ( \"Invalid Operator\" ); break ; } } } } section{ font-size: 25px; } When we run the program, the output will be: Enter first number: -13.11 Enter second number: 2 .41 Enter operator ( +, -, *, / ) : * -13.11 * 2 .41 = -31.5951 section{ font-size: 25px; } The above program takes two operands and an operator as input from the user and performs the operation based on the operator. The inputs are taken from the user using the ReadLine() and Read() method. To learn more, visit C# Basic Input and Output . The program uses switch case statement for decision making. Alternatively, we can use if-else if ladder to perform the same operation. section{ font-size: 25px; }","title":"Example 3: Simple calculator program using C# switch Statement"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-ternary-operator","text":"In this article, we will learn about C# ternary operator and how to use it to control the flow of program. section{ font-size: 25px; } Ternary operator are a substitute for if...else statement. So before you move any further in this tutorial, go through C# if...else statement (if you haven't). section{ font-size: 25px; } The syntax of ternary operator is: Condition ? Expression1 : Expression2 ; The ternary operator works as follows: If the expression stated by Condition is true , the result of Expression1 is returned by the ternary operator. If it is false , the result of Expression2 is returned. section{ font-size: 25px; } For example, we can replace the following code if ( number % 2 == 0 ){ isEven = true ; } else { isEven = false ; } with isEven = ( number % 2 == 0 ) ? true : false ; section{ font-size: 25px; } Why is it called ternary operator? This operator takes 3 operand , hence called ternary operator. section{ font-size: 25px; }","title":"C# ternary (? :) Operator"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-1-c-ternary-operator","text":"using System ; namespace Conditional { class Ternary { public static void Main ( string [] args ) { int number = 2 ; bool isEven ; isEven = ( number % 2 == 0 ) ? true : false ; Console . WriteLine ( isEven ); } } } section{ font-size: 25px; } When we run the program, the output will be: True section{ font-size: 25px; } In the above program, 2 is assigned to a variable number. Then, the ternary operator is used to check if number is even or not. Since, 2 is even, the expression ( number % 2 == 0 ) returns true . We can also use ternary operator to return numbers, strings and characters. section{ font-size: 25px; } Instead of storing the return value in variable isEven, we can directly print the value returned by ternary operator as, Console . WriteLine (( number % 2 == 0 ) ? true : false ); section{ font-size: 25px; }","title":"Example 1: C# Ternary Operator"},{"location":"week-7-csharp/ce103-week-7-csharp/#when-to-use-ternary-operator","text":"Ternary operator can be used to replace multi lines of code with a single line. However, we shouldn't overuse it. section{ font-size: 25px; } For example, we can replace the following if..else if code if ( a > b ){ result = \"a is greater than b\" ; } else if ( a < b ){ result = \"b is greater than a\" ; } else { result = \"a is equal to b\" ; } section{ font-size: 25px; } with a single line of code result = a > b ? \"a is greater than b\" : a < b ? \"b is greater than a\" : \"a is equal to b\" ; section{ font-size: 25px; } As we can see, the use of ternary operator may decrease the length of code but it makes us difficult to understand the logic of the code. Hence, it's better to only use ternary operator to replace simple if else statement section{ font-size: 25px; }","title":"When to use ternary operator?"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-for-loop","text":"In this article, we will learn about for loop in C# and different ways to use them in a program. In programming, it is often desired to execute certain block of statements for a specified number of times. A possible solution will be to type those statements for the required number of times. However, the number of repetition may not be known in advance (during compile time) or maybe large enough (say 10000). The best solution to such problem is loop. Loops are used in programming to repeatedly execute a certain block of statements until some condition is met. In this article, we\u2019ll look at for loop in C#. section{ font-size: 25px; }","title":"C# for loop"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-for-loop_1","text":"The for keyword is used to create for loop in C#. The syntax for for loop is: for ( initialization ; condition ; iterator ) { // body of for loop } section{ font-size: 25px; }","title":"C# for loop"},{"location":"week-7-csharp/ce103-week-7-csharp/#how-for-loop-works","text":"C# for loop has three statements: initialization , condition and iterator . section{ font-size: 25px; } The initialization statement is executed at first and only once. Here, the variable is usually declared and initialized. section{ font-size: 25px; } Then, the condition is evaluated. The condition is a boolean expression, i.e. it returns either true or false . section{ font-size: 25px; } If the condition is evaluated to true : The statements inside the for loop are executed. Then, the iterator statement is executed which usually changes the value of the initialized variable. Again the condition is evaluated. The process continues until the condition is evaluated to false . section{ font-size: 25px; } If the condition is evaluated to false , the for loop terminates. section{ font-size: 25px; }","title":"How for loop works?"},{"location":"week-7-csharp/ce103-week-7-csharp/#for-loop-flowchart","text":"Working of C# for loop section{ font-size: 25px; }","title":"for Loop Flowchart"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-1-c-for-loop","text":"using System ; namespace Loop { class ForLoop { public static void Main ( string [] args ) { for ( int i = 1 ; i <= 5 ; i ++) { Console . WriteLine ( \"C# For Loop: Iteration {0}\" , i ); } } } } section{ font-size: 25px; } When we run the program, the output will be: C# For Loop: Iteration 1 C# For Loop: Iteration 2 C# For Loop: Iteration 3 C# For Loop: Iteration 4 C# For Loop: Iteration 5 section{ font-size: 25px; } In this program, initialization statement is int i=1 condition statement is i<=5 iterator statement is i++ section{ font-size: 25px; } When the program runs, section{ font-size: 25px; } First, the variable i is declared and initialized to 1. section{ font-size: 25px; } Then, the condition ( i<=5 ) is evaluated. section{ font-size: 25px; } Since, the condition returns true , the program then executes the body of the for loop. It prints the given line with Iteration 1 (Iteration simply means repetition). section{ font-size: 25px; } Now, the iterator ( i++ ) is evaluated. This increments the value of i to 2. section{ font-size: 25px; } The condition ( i<=5 ) is evaluated again and at the end, the value of i is incremented by 1. The condition will evaluate to true for the first 5 times. section{ font-size: 25px; } When the value of i will be 6 and the condition will be false , hence the loop will terminate. section{ font-size: 25px; }","title":"Example 1: C# for Loop"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-2-for-loop-to-compute-sum-of-first-n-natural-numbers","text":"using System ; namespace Loop { class ForLoop { public static void Main ( string [] args ) { int n = 5 , sum = 0 ; for ( int i = 1 ; i <= n ; i ++) { // sum = sum + i; sum += i ; } Console . WriteLine ( \"Sum of first {0} natural numbers = {1}\" , n , sum ); } } } section{ font-size: 25px; } When we run the program, the output will be: Sum of first 5 natural numbers = 15 section{ font-size: 25px; } Here, the value of sum and n are initialized to 0 and 5 respectively. The iteration variable i is initialized to 1 and incremented on each iteration. Inside the for loop, value of sum is incremented by i i.e. sum = sum + i . The for loop continues until i is less than or equal to n (user's input). section{ font-size: 25px; } Let's see what happens in the given program on each iteration. Initially, i = 1, sum = 0 and n = 3 For loop execution steps Iteration Value of i i<=5 Value of sum 1 1 true 0+1 = 1 --- 2 2 true 1+2 = 3 --- 3 3 true 3+3 = 6 --- 4 4 true 6+4 = 10 --- 5 5 true 10+5 = 15 --- 6 6 false Loop terminates --- So, the final value of sum will be 15 when n = 5. section{ font-size: 25px; }","title":"Example 2: for loop to compute sum of first n natural numbers"},{"location":"week-7-csharp/ce103-week-7-csharp/#multiple-expressions-inside-a-for-loop","text":"We can also use multiple expressions inside a for loop. It means we can have more than one initialization and/or iterator statements within a for loop. Let's see the example below. section{ font-size: 25px; }","title":"Multiple expressions inside a for loop"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-3-for-loop-with-multiple-initialization-and-iterator-expressions","text":"using System ; namespace Loop { class ForLoop { public static void Main ( string [] args ) { for ( int i = 0 , j = 0 ; i + j <= 5 ; i ++, j ++) { Console . WriteLine ( \"i = {0} and j = {1}\" , i , j ); } } } } section{ font-size: 25px; } When we run the program, the output will be: i = 0 and j = 0 i = 1 and j = 1 i = 2 and j = 2 section{ font-size: 25px; } In this program, we have declared and initialized two variables: i and j in the initialization statement. Also, we have two expressions in the iterator part. That means both i and j are incremented by 1 on each iteration. section{ font-size: 25px; }","title":"Example 3: for loop with multiple initialization and iterator expressions"},{"location":"week-7-csharp/ce103-week-7-csharp/#for-loop-without-initialization-and-iterator-statements","text":"The initialization, condition and the iterator statement are optional in a for loop. It means we can run a for loop without these statements as well. In such cases, for loop acts as a while loop . Let's see the example below. section{ font-size: 25px; }","title":"For loop without initialization and iterator statements"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-4-for-loop-without-initialization-and-iterator-statement","text":"using System ; namespace Loop { class ForLoop { public static void Main ( string [] args ) { int i = 1 ; for ( ; i <= 5 ; ) { Console . WriteLine ( \"C# For Loop: Iteration {0}\" , i ); i ++; } } } } section{ font-size: 25px; } When we run the program, the output will be: C# For Loop: Iteration 1 C# For Loop: Iteration 2 C# For Loop: Iteration 3 C# For Loop: Iteration 4 C# For Loop: Iteration 5 section{ font-size: 25px; } In this example, we haven't used the initialization and iterator statement. The variable i is initialized above the for loop and its value is incremented inside the body of loop. This program is same as the one in Example 1. Similarly, the condition is also an optional statement. However if we don't use test expression, the for loop won't test any condition and will run forever (infinite loop). section{ font-size: 25px; }","title":"Example 4: for loop without initialization and iterator statement"},{"location":"week-7-csharp/ce103-week-7-csharp/#infinite-for-loop","text":"If the condition in a for loop is always true, for loop will run forever. This is called infinite for loop. section{ font-size: 25px; }","title":"Infinite for loop"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-5-infinite-for-loop","text":"using System ; namespace Loop { class ForLoop { public static void Main ( string [] args ) { for ( int i = 1 ; i > 0 ; i ++) { Console . WriteLine ( \"C# For Loop: Iteration {0}\" , i ); } } } } section{ font-size: 25px; } Here, i is initialized to 1 and the condition is i>0 . On each iteration we are incrementing the value of i by 1, so the condition will never be false . This will cause the loop to execute infinitely. section{ font-size: 25px; } We can also create an infinite loop by replacing the condition with a blank. For example, for ( ; ; ) { // body of for loop } or for ( initialization ; ; iterator ){ // body of for loop } section{ font-size: 25px; }","title":"Example 5: Infinite for loop"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-while-and-dowhile-loop","text":"In this article, we will learn about while and do...while loop in C#, how to use them and difference between them. In programming, it is often desired to execute certain block of statements for a specified number of times. A possible solution will be to type those statements for the required number of times. However, the number of repetition may not be known in advance (during compile time) or maybe large enough (say 10000). The best solution to such problem is loop. Loops are used in programming to repeatedly execute a certain block of statements until some condition is met. In this article, we'll learn to use while loops in C#. section{ font-size: 25px; }","title":"C# while and do...while loop"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-while-loop","text":"The while keyword is used to create while loop in C#. The syntax for while loop is: while ( test - expression ){ // body of while } section{ font-size: 25px; }","title":"C# while loop"},{"location":"week-7-csharp/ce103-week-7-csharp/#how-while-loop-works","text":"C# while loop consists of a test-expression . If the test-expression is evaluated to true , statements inside the while loop are executed. after execution, the test-expression is evaluated again. If the test-expression is evaluated to false , the while loop terminates. section{ font-size: 25px; }","title":"How while loop works?"},{"location":"week-7-csharp/ce103-week-7-csharp/#while-loop-flowchart","text":"section{ font-size: 25px; }","title":"while loop Flowchart"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-1-while-loop","text":"using System ; namespace Loop { class WhileLoop { public static void Main ( string [] args ) { int i = 1 ; while ( i <= 5 ) { Console . WriteLine ( \"C# For Loop: Iteration {0}\" , i ); i ++; } } } } section{ font-size: 25px; } When we run the program, the output will be: C# For Loop: Iteration 1 C# For Loop: Iteration 2 C# For Loop: Iteration 3 C# For Loop: Iteration 4 C# For Loop: Iteration 5 section{ font-size: 25px; } Initially the value of i is 1. When the program reaches the while loop statement, the test expression i <=5 is evaluated. Since i is 1 and 1 <= 5 is true , it executes the body of the while loop. Here, the line is printed on the screen with Iteration 1, and the value of i is increased by 1 to become 2. Now, the test expression ( i <=5 ) is evaluated again. This time too, the expression returns true (2 <= 5), so the line is printed on the screen and the value of i is now incremented to 3.. This goes and the while loop executes until i becomes 6. At this point, the test-expression will evaluate to false and hence the loop terminates. section{ font-size: 25px; }","title":"Example 1: while Loop"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-2-while-loop-to-compute-sum-of-first-5-natural-numbers","text":"using System ; namespace Loop { class WhileLoop { public static void Main ( string [] args ) { int i = 1 , sum = 0 ; while ( i <= 5 ) { sum += i ; i ++; } Console . WriteLine ( \"Sum = {0}\" , sum ); } } } section{ font-size: 25px; } When we run the program, the output will be: Sum = 15 section{ font-size: 25px; } This program computes the sum of first 5 natural numbers. Initially the value of sum is initialized to 0. On each iteration, the value of sum is updated to sum+i and the value of i is incremented by 1. When the value of i reaches 6, the test expression i<=5 will return false and the loop terminates. section{ font-size: 25px; } Let's see what happens in the given program on each iteration. Initially, i = 1, sum = 0, While loop execution steps For loop execution steps Iteration Value of i i<=5 Value of sum 1 1 true 0+1 = 1 --- 2 2 true 1+2 = 3 --- 3 3 true 3+3 = 6 --- 4 4 true 6+4 = 10 --- 5 5 true 10+5 = 15 --- 6 6 false Loop terminates --- So, the final value of sum will be 15. section{ font-size: 25px; }","title":"Example 2: while loop to compute sum of first 5 natural numbers"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-dowhile-loop","text":"The do and while keyword is used to create a do...while loop. It is similar to a while loop, however there is a major difference between them. In while loop, the condition is checked before the body is executed. It is the exact opposite in do...while loop, i.e. condition is checked after the body is executed. This is why, the body of do...while loop will execute at least once irrespective to the test-expression. section{ font-size: 25px; } The syntax for do...while loop is: do { // body of do while loop } while ( test - expression ); section{ font-size: 25px; }","title":"C# do...while loop"},{"location":"week-7-csharp/ce103-week-7-csharp/#how-dowhile-loop-works","text":"The body of do...while loop is executed at first. Then the test-expression is evaluated. If the test-expression is true , the body of loop is executed. When the test-expression is false , do...while loop terminates. section{ font-size: 25px; }","title":"How do...while loop works?"},{"location":"week-7-csharp/ce103-week-7-csharp/#dowhile-loop-flowchart","text":"section{ font-size: 25px; }","title":"do...while loop Flowchart"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-3-dowhile-loop","text":"using System ; namespace Loop { class DoWhileLoop { public static void Main ( string [] args ) { int i = 1 , n = 5 , product ; do { product = n * i ; Console . WriteLine ( \"{0} * {1} = {2}\" , n , i , product ); i ++; } while ( i <= 10 ); } } } section{ font-size: 25px; } When we run the program, the output will be: 5 * 1 = 5 5 * 2 = 10 5 * 3 = 15 5 * 4 = 20 5 * 5 = 25 5 * 6 = 30 5 * 7 = 35 5 * 8 = 40 5 * 9 = 45 5 * 10 = 50 section{ font-size: 25px; } As we can see, the above program prints the multiplication table of a number (5). Initially, the value of i is 1. The program, then enters the body of do..while loop without checking any condition (as opposed to while loop). Inside the body, product is calculated and printed on the screen. The value of i is then incremented to 2. After the execution of the loop\u2019s body, the test expression i <= 10 is evaluated. In total, the do...while loop will run for 10 times. Finally, when the value of i is 11, the test-expression evaluates to false and hence terminates the loop. section{ font-size: 25px; }","title":"Example 3: do...while loop"},{"location":"week-7-csharp/ce103-week-7-csharp/#infinite-while-and-dowhile-loop","text":"If the test expression in the while and do...while loop never evaluates to false , the body of loop will run forever. Such loops are called infinite loop. section{ font-size: 25px; } For example:","title":"Infinite while and do...while loop"},{"location":"week-7-csharp/ce103-week-7-csharp/#infinite-while-loop","text":"while ( true ) { // body of while loop } section{ font-size: 25px; }","title":"Infinite while loop"},{"location":"week-7-csharp/ce103-week-7-csharp/#infinite-dowhile-loop","text":"do { // body of while loop } while ( true ); section{ font-size: 25px; } The infinite loop is useful when we need a loop to run as long as our program runs. For example, if your program is an animation, you will need to constantly run it until it is stopped. In such cases, an infinite loop is necessary to keep running the animation repeatedly. section{ font-size: 25px; }","title":"Infinite do...while loop"},{"location":"week-7-csharp/ce103-week-7-csharp/#nested-loops-in-c-for-while-do-while","text":"In this article, we will learn about nested loops in C#. We'll learn to use nested for, while and do-while loops in a program. section{ font-size: 25px; } A loop within another loop is called nested loop. This is how a nested loop looks like: Outer - Loop { // body of outer-loop Inner - Loop { // body of inner-loop } ... ... ... } section{ font-size: 25px; } As you can see, the outer loop encloses the inner loop . The inner loop is a part of the outer loop and must start and finish within the body of outer loop. On each iteration of outer loop, the inner loop is executed completely. section{ font-size: 25px; }","title":"Nested Loops in C#: for, while, do-while"},{"location":"week-7-csharp/ce103-week-7-csharp/#nested-for-loop","text":"A for loop inside another for loop is called nested for loop. section{ font-size: 25px; } For example: for ( int i = 0 ; i < 5 ; i ++) { // body of outer for loop for ( int j = 0 ; j < 5 ; j ++) { // body of inner for loop } // body of outer for loop } section{ font-size: 25px; }","title":"Nested for loop"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-1-nested-for-loop","text":"using System ; namespace Loop { class NestedForLoop { public static void Main ( string [] args ) { int outerLoop = 0 , innerLoop = 0 ; for ( int i = 1 ; i <= 5 ; i ++) { outerLoop ++; for ( int j = 1 ; j <= 5 ; j ++) { innerLoop ++; } } Console . WriteLine ( \"Outer Loop runs {0} times\" , outerLoop ); Console . WriteLine ( \"Inner Loop runs {0} times\" , innerLoop ); } } } section{ font-size: 25px; } When we run the program, the output will be: Outer Loop runs 5 times Inner Loop runs 25 times In this program, the outer loop runs for 5 times. Each time the outer loop runs, the inner loop runs for 5 times making it run 25 times altogether. section{ font-size: 25px; }","title":"Example 1: Nested for Loop"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-2-nested-for-loop-to-print-pattern","text":"using System ; namespace Loop { class NestedForLoop { public static void Main ( string [] args ){ for ( int i = 1 ; i <= 5 ; i ++){ for ( int j = 1 ; j <= i ; j ++){ Console . Write ( j + \" \" ); } Console . WriteLine (); } } } } section{ font-size: 25px; } When we run the program, the output will be: 1 1 2 1 2 3 1 2 3 4 1 2 3 4 5 section{ font-size: 25px; }","title":"Example 2: Nested for Loop to Print Pattern"},{"location":"week-7-csharp/ce103-week-7-csharp/#nested-while-loop","text":"A while loop inside another while loop is called nested while loop. For example: while ( condition - 1 ) { // body of outer while loop while ( condition - 2 ) { // body of inner while loop } // body of outer while loop } section{ font-size: 25px; }","title":"Nested while loop"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-3-nested-while-loop","text":"using System ; namespace Loop { class NestedWhileLoop { public static void Main ( string [] args ) { int i = 0 ; while ( i < 2 ) { int j = 0 ; while ( j < 2 ) { Console . Write ( \"({0},{1}) \" , i , j ); j ++; } i ++; Console . WriteLine (); } } } } section{ font-size: 25px; } When we run the program, the output will be: ( 0 ,0 ) ( 0 ,1 ) ( 1 ,0 ) ( 1 ,1 ) section{ font-size: 25px; }","title":"Example 3: Nested while Loop"},{"location":"week-7-csharp/ce103-week-7-csharp/#nested-do-while-loop","text":"A do-while loop inside another do-while loop is called nested do-while loop. For example: do { // body of outer while loop do { // body of inner while loop } while ( condition - 2 ); // body of outer while loop } while ( condition - 1 ); section{ font-size: 25px; }","title":"Nested do-while loop"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-4-nested-do-while-loop","text":"using System ; namespace Loop { class NestedWhileLoop { public static void Main ( string [] args ) { int i = 0 ; do { int j = 0 ; do { Console . Write ( \"({0},{1}) \" , i , j ); j ++; } while ( j < 2 ); i ++; Console . WriteLine (); } while ( i < 2 ); } } } section{ font-size: 25px; } When we run the program, the output will be: ( 0 ,0 ) ( 0 ,1 ) ( 1 ,0 ) ( 1 ,1 ) section{ font-size: 25px; }","title":"Example 4: Nested do-while Loop"},{"location":"week-7-csharp/ce103-week-7-csharp/#different-inner-and-outer-nested-loops","text":"It is not mandatory to nest same type of loop. We can put a for loop inside a while loop or a do-while loop inside a for loop. section{ font-size: 25px; }","title":"Different inner and outer nested loops"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-5-c-nested-loop-different-inner-and-outer-loops","text":"using System ; namespace Loop { class NestedLoop { public static void Main ( string [] args ) { int i = 1 ; while ( i <= 5 ) { for ( int j = 1 ; j <= i ; j ++) { Console . Write ( i + \" \" ); } Console . WriteLine (); i ++; } } } } section{ font-size: 25px; } When we run the program, the output will be: 1 2 2 3 3 3 4 4 4 4 5 5 5 5 5 In the above program, a for loop is placed within a while loop. We can use different types of loop inside a loop. section{ font-size: 25px; }","title":"Example 5: C# Nested Loop: Different inner and outer loops"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-break-statement","text":"In this tutorial, you will learn about the working C# break statement with the help of examples. In C#, we use the break statement to terminate the loop. As we know, loops iterate over a block of code until the test expression is false. However, sometimes we may need to terminate the loop immediately without checking the test expression. section{ font-size: 25px; } In such cases, the break statement is used. The syntax of break statement is, break ; section{ font-size: 25px; } Before we learn about break , make sure to learn about for loop if...else while loop section{ font-size: 25px; }","title":"C# break Statement"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-c-break-statement-with-for-loop","text":"using System ; namespace CSharpBreak { class Program { static void Main ( string [] args ) { for ( int i = 1 ; i <= 4 ; ++ i ) { // terminates the loop if ( i == 3 ) { break ; } Console . WriteLine ( i ); } Console . ReadLine (); } } } section{ font-size: 25px; } Output 1 2 section{ font-size: 25px; } In the above program, our for loop runs 4 times from i = 1 to 4 . However, when i is equal to 3 , the break statement is encountered. if ( i == 3 ) { break ; } section{ font-size: 25px; } Now, the loop is terminated suddenly. So, we only get 1 and 2 as output. Note : The break statement is used with decision-making statements like if..else. section{ font-size: 25px; }","title":"Example: C# break statement with for loop"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-c-break-statement-with-while-loop","text":"using System ; namespace WhileBreak { class Program { static void Main ( string [] args ) { int i = 1 ; while ( i <= 5 ) { Console . WriteLine ( i ); i ++; if ( i == 4 ) { // terminates the loop break ; } } Console . ReadLine (); } } } section{ font-size: 25px; } Output 1 2 3 section{ font-size: 25px; } In the above example, we have created a while loop that is supposed to run from i = 1 to 5 . However, when i is equal to 4 , the break statement is encountered. if ( i == 4 ) { break ; } Now, the while loop is terminated. section{ font-size: 25px; }","title":"Example: C# break statement with while loop"},{"location":"week-7-csharp/ce103-week-7-csharp/#working-of-break-statement-in-c","text":"section{ font-size: 25px; }","title":"Working of break statement in C"},{"location":"week-7-csharp/ce103-week-7-csharp/#break-statement-with-nested-loop","text":"We can also use the break statement with nested loops. For example, using System ; namespace NestedBreak { class Program { static void Main ( string [] args ) { int sum = 0 ; for ( int i = 1 ; i <= 3 ; i ++) { //outer loop // inner loop for ( int j = 1 ; j <= 3 ; j ++) { if ( i == 2 ) { break ; } Console . WriteLine ( \"i = \" + i + \" j = \" + j ); } } Console . ReadLine (); } } } section{ font-size: 25px; } Output i = 1 j = 1 i = 1 j = 2 i = 1 j = 3 i = 3 j = 1 i = 3 j = 2 i = 3 j = 3 section{ font-size: 25px; } In the above example, we have used the break statement inside the inner for loop. Here, the break statement is executed when i == 2 . Hence, the value of i = 2 is never printed. Note : The break statement only terminates the inner for loop. This is because we have used the break statement inside the inner loop. If you want to learn the working of nested loops, visit C# Nested Loops . section{ font-size: 25px; }","title":"break Statement with Nested Loop"},{"location":"week-7-csharp/ce103-week-7-csharp/#break-with-foreach-loop","text":"We can also use the break statement with foreach loops. For example, using System ; namespace ForEachBreak { class Program { static void Main ( string [] args ) { int [] num = { 1 , 2 , 3 , 4 , 5 }; // use of for each loop foreach ( int number in num ) { // terminates the loop if ( number == 3 ) { break ; } Console . WriteLine ( number ); } } } } section{ font-size: 25px; } Output 1 2 section{ font-size: 25px; } In the above example, we have created an array with values: 1 , 2 , 3 , 4 , 5 . Here, we have used the foreach loop to print each element of the array. However, the loop only prints 1 and 2 . This is because when the number is equal to 3 , the break statement is executed. if ( number == 3 ) { break ; } This immediately terminates the foreach loop . section{ font-size: 25px; }","title":"break with foreach Loop"},{"location":"week-7-csharp/ce103-week-7-csharp/#break-with-switch-statement","text":"We can also use the break statement inside a switch case statement. For example, using System ; namespace ConsoleApp1 { class Program { static void Main ( string [] args ) { char ch = 'e' ; switch ( ch ) { case 'a' : Console . WriteLine ( \"Vowel\" ); break ; case 'e' : Console . WriteLine ( \"Vowel\" ); break ; case 'i' : Console . WriteLine ( \"Vowel\" ); break ; case 'o' : Console . WriteLine ( \"Vowel\" ); break ; case 'u' : Console . WriteLine ( \"Vowel\" ); break ; default : Console . WriteLine ( \"Not a vowel\" ); } } } } section{ font-size: 25px; } Output Vowel section{ font-size: 25px; } Here, we have used the break statement inside each case. It helps us to terminate the switch statement when a matching case is found. To learn more, visit C# switch statement . section{ font-size: 25px; }","title":"break with Switch Statement"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-continue-statement","text":"In this tutorial, you will learn about the working of C# continue statement with the help of examples. In C#, we use the continue statement to skip a current iteration of a loop. When our program encounters the continue statement, the program control moves to the end of the loop and executes the test condition (update statement in case of for loop). section{ font-size: 25px; } The syntax for continue is: continue ; section{ font-size: 25px; } Before we learn about continue, make sure to learn about for loop while loop if...else section{ font-size: 25px; }","title":"C# continue Statement"},{"location":"week-7-csharp/ce103-week-7-csharp/#example1-c-continue-with-for-loop","text":"using System ; namespace ContinueLoop { class Program { static void Main ( string [] args ){ for ( int i = 1 ; i <= 5 ; ++ i { if ( i == 3 ) { continue ; } Console . WriteLine ( i ); } } } } section{ font-size: 25px; } Output 1 2 4 5 section{ font-size: 25px; } In the above example, we have used the for loop to print numbers from i = 1 to 5. However, the number 3 is not printed. This is because when the value of i is 3 , the continue statement is executed. // skips the condition if ( i == 3 ) { continue ; } This skips the current iteration of loop and moves the program control to the update statement. Hence, the value 3 is not printed. Note : The continue statement is usually used with the if...else statement. section{ font-size: 25px; }","title":"Example1: C# continue with for loop"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-c-continue-with-while-loop","text":"using System ; namespace ContinueWhile { class Program { static void Main ( string [] args ) { int i = 0 ; while ( i < 5 ) { i ++; if ( i == 3 ) { continue ; } Console . WriteLine ( i ); } } } } section{ font-size: 25px; } Output 1 2 4 5 section{ font-size: 25px; } Here, we have used the continue statement inside the while loop. Similar to the earlier program, when the value of i is 3 , the continue statement is executed. Hence, 3 is not printed on the screen. section{ font-size: 25px; }","title":"Example: C# continue with while loop"},{"location":"week-7-csharp/ce103-week-7-csharp/#working-of-c-continue-statement","text":"section{ font-size: 25px; }","title":"Working of C# continue Statement"},{"location":"week-7-csharp/ce103-week-7-csharp/#continue-with-nested-loop","text":"We use the continue statement with nested as well. For example: using System ; namespace ContinueNested { class Program { static void Main ( string [] args ) { int sum = 0 ; // outer loop for ( int i = 1 ; i <= 3 ; i ++) { // inner loop for ( int j = 1 ; j <= 3 ; j ++) { if ( j == 2 ) { continue ; } Console . WriteLine ( \"i = \" + i + \" j = \" + j ); } } } } } section{ font-size: 25px; } Output i = 1 j = 1 i = 1 j = 3 i = 2 j = 1 i = 2 j = 3 i = 3 j = 1 i = 3 j = 3 section{ font-size: 25px; } In the above example, we have used the continue statement inside the inner for loop. Here, the continue statement is executed when j == 2 . Hence, the value of j = 2 is ignored. If you want to learn the working of nested loops, visit C# Nested Loops . section{ font-size: 25px; }","title":"continue with Nested Loop"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-continue-with-foreach-loop","text":"We can also use the continue statement with foreach loops. For example, using System ; namespace ContinueForeach { class Program { static void Main ( string [] args ) { int [] num = { 1 , 2 , 3 , 4 , 5 }; foreach ( int number in num ) { // skips the iteration if ( number == 3 ) { continue ; } Console . WriteLine ( number ); } } } } section{ font-size: 25px; } Output 1 2 4 5 section{ font-size: 25px; } In the above example, we have created an array with values: 1 , 2 , 3 , 4 , 5 . Here, we have used the foreach loop to print each element of the array. However, the loop doesn't print the value 3 . This is because when the number is equal to 3 , the continue statement is executed. if ( number == 3 ) { continue ; } Hence, the print statement for this iteration is skipped. section{ font-size: 25px; }","title":"C# continue with foreach Loop"},{"location":"week-7-csharp/ce103-week-7-csharp/#arrays","text":"section{ font-size: 25px; }","title":"Arrays"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-arrays","text":"In this tutorial, we will learn about C# arrays. We will learn to create, initialize, and access array with the help of examples. An array is a collection of similar types of data. section{ font-size: 25px; } For example, Suppose we need to record the age of 5 students. Instead of creating 5 separate variables, we can simply create an array: section{ font-size: 25px; } Elements of an Array section{ font-size: 25px; }","title":"C# Arrays"},{"location":"week-7-csharp/ce103-week-7-csharp/#1-c-array-declaration","text":"In C#, here is how we can declare an array. datatype [] arrayName ; Here, dataType - data type like int , string , char , etc arrayName - it is an identifier section{ font-size: 25px; } Let's see an example, int [] age ; Here, we have created an array named age. It can store elements of int type. section{ font-size: 25px; } But how many elements can it store? To define the number of elements that an array can hold, we have to allocate memory for the array in C#. For example, // declare an array int [] age ; // allocate memory for array age = new int [ 5 ]; Here, new int[5] represents that the array can store 5 elements. We can also say the size/length of the array is 5. section{ font-size: 25px; } Note : We can also declare and allocate the memory of an array in a single line. For example, int [] age = new int [ 5 ]; section{ font-size: 25px; }","title":"1. C# Array Declaration"},{"location":"week-7-csharp/ce103-week-7-csharp/#2-array-initialization-in-c","text":"In C#, we can initialize an array during the declaration. For example, int [] numbers = { 1 , 2 , 3 , 4 , 5 }; Here, we have created an array named numbers and initialized it with values 1 , 2 , 3 , 4 , and 5 inside the curly braces. section{ font-size: 25px; } Note that we have not provided the size of the array. In this case, the C# automatically specifies the size by counting the number of elements in the array (i.e. 5). In an array, we use an index number to determine the position of each array element. We can use the index number to initialize an array in C#. section{ font-size: 25px; } For example, // declare an array int [] age = new int [ 5 ]; //initializing array age [ 0 ] = 12 ; age [ 1 ] = 4 ; age [ 2 ] = 5 ; ... section{ font-size: 25px; } C# Array Initialization section{ font-size: 25px; } Note : An array index always starts at 0. That is, the first element of an array is at index 0. If the size of an array is 5, the index of the last element will be at 4 (5 - 1). section{ font-size: 25px; }","title":"2. Array initialization in C"},{"location":"week-7-csharp/ce103-week-7-csharp/#3-access-array-elements","text":"We can access the elements in the array using the index of the array. For example, // access element at index 2 array [ 2 ]; // access element at index 4 array [ 4 ]; Here, array[2] - access the 3 rd element array[4] - access the 5 th element section{ font-size: 25px; }","title":"3. Access Array Elements"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-c-array","text":"using System ; namespace AccessArray { class Program { static void Main ( string [] args ) { // create an array int [] numbers = { 1 , 2 , 3 }; //access first element Console . WriteLine ( \"Element in first index : \" + numbers [ 0 ]); //access second element Console . WriteLine ( \"Element in second index : \" + numbers [ 1 ]); //access third element Console . WriteLine ( \"Element in third index : \" + numbers [ 2 ]); Console . ReadLine (); } } } section{ font-size: 25px; } Output Element in first index : 1 Element in second index : 2 Element in third index : 3 section{ font-size: 25px; } In the above example, we have created an array named numbers with elements 1, 2, 3 . Here, we are using the index number to access elements of the array. numbers[0] - access first element, 1 numbers[1] - access second element, 2 numbers[3] - access third element, 3 section{ font-size: 25px; }","title":"Example: C# Array"},{"location":"week-7-csharp/ce103-week-7-csharp/#4-change-array-elements","text":"We can also change the elements of an array. To change the element, we simply assign a new value to that particular index. For example, using System ; namespace ChangeArray { class Program { static void Main ( string [] args ) { // create an array int [] numbers = { 1 , 2 , 3 }; Console . WriteLine ( \"Old Value at index 0: \" + numbers [ 0 ]); // change the value at index 0 numbers [ 0 ] = 11 ; //print new value Console . WriteLine ( \"New Value at index 0: \" + numbers [ 0 ]); Console . ReadLine (); } } } section{ font-size: 25px; } Output Old Value at index 0 : 1 New Value at index 0 : 11 section{ font-size: 25px; } In the above example, the initial value at index 0 is 1. Notice the line, //change the value at index 0 numbers [ 0 ] = 11 ; Here, we are assigning a new value of 11 to the index 0. Now, the value at index 0 is changed from 1 to 11 . section{ font-size: 25px; }","title":"4. Change Array Elements"},{"location":"week-7-csharp/ce103-week-7-csharp/#5-iterating-c-array-using-loops","text":"In C#, we can use loops to iterate through each element of an array. For example, section{ font-size: 25px; }","title":"5. Iterating C# Array using Loops"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-using-for-loop","text":"using System ; namespace AccessArrayFor { class Program { static void Main ( string [] args ) { int [] numbers = { 1 , 2 , 3 }; for ( int i = 0 ; i < numbers . Length ; i ++) { Console . WriteLine ( \"Element in index \" + i + \": \" + numbers [ i ]); } Console . ReadLine (); } } } section{ font-size: 25px; } Output Element in index 0 : 1 Element in index 1 : 2 Element in index 2 : 3 In the above example, we have used a for loop to iterate through the elements of the array, numbers. Notice the line, numbers . Length Here, the Length property of the array gives the size of the array. We can also use a foreach loop to iterate through the elements of an array. For example, section{ font-size: 25px; }","title":"Example: Using for loop"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-using-foreach-loop","text":"using System ; namespace AccessArrayForeach { class Program { static void Main ( string [] args ) { int [] numbers = { 1 , 2 , 3 }; Console . WriteLine ( \"Array Elements: \" ); foreach ( int num in numbers ) { Console . WriteLine ( num ); } Console . ReadLine (); } } } section{ font-size: 25px; } Output Array Elements: 1 2 3 section{ font-size: 25px; }","title":"Example: Using foreach loop"},{"location":"week-7-csharp/ce103-week-7-csharp/#6-c-array-operations-using-systemlinq","text":"In C#, we have the System.Linq namespace that provides different methods to perform various operations in an array. For example, section{ font-size: 25px; }","title":"6. C# Array Operations using System.Linq"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-find-minimum-and-maximum-element","text":"using System ; // provides us various methods to use in an array using System.Linq ; namespace ArrayMinMax { class Program { static void Main ( string [] args ) { int [] numbers = { 51 , 1 , 3 , 4 , 98 }; // get the minimum element Console . WriteLine ( \"Smallest Element: \" + numbers . Min ()); // Max() returns the largest number in array Console . WriteLine ( \"Largest Element: \" + numbers . Max ()); Console . ReadLine (); } } } section{ font-size: 25px; } Output Smallest Element: 1 Largest Element: 98 In the above example, numbers.Min() - returns the smallest number in an array, 1 numbers.Max() - returns the largest number in an array, 98 section{ font-size: 25px; }","title":"Example: Find Minimum and Maximum Element"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-find-the-average-of-an-array","text":"using System ; // provides us various methods to use in an array using System.Linq ; namespace ArrayFunction { class Program { static void Main ( string [] args ) { int [] numbers = { 30 , 31 , 94 , 86 , 55 }; // get the sum of all array elements float sum = numbers . Sum (); // get the total number of elements present in the array int count = numbers . Count (); float average = sum / count ; Console . WriteLine ( \"Average : \" + average ); // compute the average Console . WriteLine ( \"Average using Average() : \" + numbers . Average ()); Console . ReadLine (); } } } section{ font-size: 25px; } Output Average : 59 .2 Average using Average () : 59 .2 section{ font-size: 25px; } In the above example, we have used numbers.Sum() to get the sum of all the elements of the array numbers.Count() to get the total number of element present inside the array section{ font-size: 25px; } We then divide the sum by count to get the average. float average = sum / count ; Here, we have also used the numbers.Average() method of the System.Linq namespace to get the average directly. Note : It is compulsory to use the System.Linq namespace while using Min() , Max() , Sum() , Count() , and Average() methods. section{ font-size: 25px; }","title":"Example: Find the Average of an Array"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-multidimensional-array","text":"In this tutorial, we will learn about the multidimensional array in C# using the example of two-dimensional array. Before we learn about the multidimensional arrays, make sure to know about the single-dimensional array in C# . section{ font-size: 25px; } In a multidimensional array, each element of the array is also an array. For example, int [ , ] x = { { 1 , 2 , 3 }, { 3 , 4 , 5 } }; Here, x is a multidimensional array which has two elements: {1, 2, 3} and {3, 4, 5} . And, each element of the array is also an array with 3 elements. section{ font-size: 25px; }","title":"C# Multidimensional Array"},{"location":"week-7-csharp/ce103-week-7-csharp/#two-dimensional-array-in-c","text":"A two-dimensional array consists of single-dimensional arrays as its elements. It can be represented as a table with a specific number of rows and columns. section{ font-size: 25px; } C# Two-dimensional array Here, rows {1, 2, 3} and {3, 4, 5} are elements of a 2D array. section{ font-size: 25px; }","title":"Two-dimensional array in C"},{"location":"week-7-csharp/ce103-week-7-csharp/#1-two-dimensional-array-declaration","text":"Here's how we declare a 2D array in C#. int [ , ] x = new int [ 2 , 3 ]; Here, x is a two-dimensional array with 2 elements. And, each element is also an array with 3 elements. So, all together the array can store 6 elements ( 2 * 3 ). Note: The single comma [ , ] represents the array is 2 dimensional. section{ font-size: 25px; }","title":"1. Two-Dimensional Array Declaration"},{"location":"week-7-csharp/ce103-week-7-csharp/#2-two-dimensional-array-initialization","text":"In C#, we can initialize an array during the declaration. For example, int [ , ] x = { { 1 , 2 , 3 }, { 3 , 4 , 5 } }; Here, x is a 2D array with two elements {1, 2, 3} and {3, 4, 5} . We can see that each element of the array is also an array. section{ font-size: 25px; } We can also specify the number of rows and columns during the initialization. For example, int [ , ] x = new int [ 2 , 3 ]{ { 1 , 2 , 3 }, { 3 , 4 , 5 } }; section{ font-size: 25px; }","title":"2. Two-Dimensional Array initialization"},{"location":"week-7-csharp/ce103-week-7-csharp/#3-access-elements-from-2d-array","text":"We use the index number to access elements of a 2D array. section{ font-size: 25px; } For example, // a 2D array int [ , ] x = { { 1 , 2 , 3 }, { 3 , 4 , 5 } }; // access first element from first row x [ 0 , 0 ]; // returns 1 // access third element from second row x [ 1 , 2 ]; // returns 5 // access third element from first row x [ 0 , 2 ]; // returns 3 section{ font-size: 25px; } Elements of Two-Dimensional array in C# section{ font-size: 25px; }","title":"3. Access Elements from 2D Array"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-c-2d-array","text":"using System ; namespace MultiDArray { class Program { static void Main ( string [] args ) { //initializing 2D array int [ , ] numbers = {{ 2 , 3 }, { 4 , 5 }}; // access first element from the first row Console . WriteLine ( \"Element at index [0, 0] : \" + numbers [ 0 , 0 ]); // access first element from second row Console . WriteLine ( \"Element at index [1, 0] : \" + numbers [ 1 , 0 ]); } } } section{ font-size: 25px; } Output Element at index [ 0 , 0 ] : 2 Element at index [ 1 , 0 ] : 4 In the above example, we have created a 2D array named numbers with rows {2, 3} and {4, 5} . Here, we are using the index numbers to access elements of the 2D array. numbers[0, 0] - access the first element from the first row ( 2 ) numbers[1, 0] - access the first element from the second row ( 4 ) section{ font-size: 25px; }","title":"Example: C# 2D Array"},{"location":"week-7-csharp/ce103-week-7-csharp/#change-array-elements","text":"We can also change the elements of a two-dimensional array. To change the element, we simply assign a new value to that particular index. For example, using System ; namespace MultiDArray { class Program { static void Main ( string [] args ) { int [ , ] numbers = {{ 2 , 3 }, { 4 , 5 }}; // old element Console . WriteLine ( \"Old element at index [0, 0] : \" + numbers [ 0 , 0 ]); // assigning new value numbers [ 0 , 0 ] = 222 ; // new element Console . WriteLine ( \"New element at index [0, 0] : \" + numbers [ 0 , 0 ]); } } } section{ font-size: 25px; } Output Old element at index [ 0 , 0 ] : 2 New element at index [ 0 , 0 ] : 222 In the above example, the initial value at index [0, 0] is 2 . Notice the line, // assigning new value numbers [ 0 , 0 ] = 222 ; Here, we are assigning a new value 222 at index [0, 0] . Now, the value at index [0, 0] is changed from 2 to 222 . section{ font-size: 25px; }","title":"Change Array Elements"},{"location":"week-7-csharp/ce103-week-7-csharp/#iterating-c-array-using-loop","text":"using System ; namespace MultiDArray { class Program { static void Main ( string [] args ) { int [ , ] numbers = { { 2 , 3 , 9 }, { 4 , 5 , 9 } }; for ( int i = 0 ; i < numbers . GetLength ( 0 ); i ++) { Console . Write ( \"Row \" + i + \": \" ); for ( int j = 0 ; j < numbers . GetLength ( 1 ); j ++) { Console . Write ( numbers [ i , j ]+ \" \" ); } Console . WriteLine (); } } } } section{ font-size: 25px; } Output Row 0 : 2 3 9 Row 1 : 4 5 9 In the above example, we have used a nested for loop to iterate through the elements of a 2D array. Here, numbers.GetLength(0) - gives the number of rows in a 2D array numbers.GetLength(1) - gives the number of elements in the row section{ font-size: 25px; } Note : We can also create a 3D array. Technically, a 3D array is an array that has multiple two-dimensional arrays as its elements. For example, int [ , , ] numbers = { { { 1 , 3 , 5 }, { 2 , 4 , 6 } }, { { 2 , 4 , 9 }, { 5 , 7 , 11 } } }; Here, [ , , ] (2 commas) denotes the 3D array. section{ font-size: 25px; }","title":"Iterating C# Array using Loop"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-jagged-array","text":"In this tutorial, we will learn about the C# jagged array. We will learn to declare, initialize, and access the jagged array with the help of examples. In C#, a jagged array consists of multiple arrays as its element. However, unlike multidimensional arrays, each array inside a jagged array can be of different sizes. Before you learn about jagged array, make sure to know about C# Arrays C# Multidimensional Arrays section{ font-size: 25px; }","title":"C# Jagged Array"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-jagged-array-declaration","text":"Here's a syntax to declare a jagged array in C#. dataType [ ][ ] nameOfArray = new dataType [ rows ][ ]; section{ font-size: 25px; } Let's see an example, // declare jagged array int [ ][ ] jaggedArray = new int [ 2 ][ ]; Here, int - data type of the array [][] - represents jagged array jaggedArray - name of the jagged array [2][] - represents the number of elements (arrays) inside the jagged array Since we know each element of a jagged array is also an array, we can set the size of the individual array. section{ font-size: 25px; } For example, // set size of the first array as 3 jaggedArray [ 0 ] = new int [ 3 ]; // set size of second array as 2 jaggedArray [ 1 ] = new int [ 2 ]; section{ font-size: 25px; }","title":"C# Jagged Array Declaration"},{"location":"week-7-csharp/ce103-week-7-csharp/#initializing-jagged-array","text":"There are different ways to initialize a jagged array. For example, section{ font-size: 25px; } 1. Using the index number Once we declare a jagged array, we can use the index number to initialize it. For example, // initialize the first array jaggedArray [ 0 ][ 0 ] = 1 ; jaggedArray [ 0 ][ 1 ] = 3 ; jaggedArray [ 0 ][ 2 ] = 5 ; // initialize the second array jaggedArray [ 1 ][ 0 ] = 2 ; jaggedArray [ 1 ][ 1 ] = 4 ; Here, index at the first square bracket represents the index of the jagged array element index at the second square bracket represents the index of the element inside each element of the jagged array section{ font-size: 25px; } 2. Initialize without setting size of array elements // declaring string jagged array int [ ][ ] jaggedArray = new int [ 2 ] [ ]; // initialize each array jaggedArray [ 0 ] = new int [] { 1 , 3 , 5 }; jaggedArray [ 1 ] = new int [] { 2 , 4 }; section{ font-size: 25px; } 3. Initialize while declaring Jagged Array int [ ][ ] jaggedArray = { new int [ ] { 10 , 20 , 30 }, new int [ ] { 11 , 22 }, new int [ ] { 88 , 99 } }; section{ font-size: 25px; }","title":"Initializing Jagged Array"},{"location":"week-7-csharp/ce103-week-7-csharp/#accessing-elements-of-a-jagged-array","text":"We can access the elements of the jagged array using the index number. For example, // access first element of second array jaggedArray [ 1 ][ 0 ]; // access second element of the second array jaggedArray [ 1 ][ 1 ]; // access second element of the first array jaggedArray [ 0 ][ 1 ]; section{ font-size: 25px; }","title":"Accessing elements of a jagged array"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-c-jagged-array","text":"using System ; namespace JaggedArray { class Program { static void Main ( string [] args ) { // create a jagged array int [ ][ ] jaggedArray = { new int [] { 1 , 3 , 5 }, new int [] { 2 , 4 }, }; // print elements of jagged array Console . WriteLine ( \"jaggedArray[1][0]: \" + jaggedArray [ 1 ][ 0 ]); Console . WriteLine ( \"jaggedArray[1][1]: \" + jaggedArray [ 1 ][ 1 ]); Console . WriteLine ( \"jaggedArray[0][2]: \" + jaggedArray [ 0 ][ 2 ]); Console . ReadLine (); } } } section{ font-size: 25px; } Output jaggedArray [ 1 ][ 0 ] : 2 jaggedArray [ 1 ][ 1 ] : 4 jaggedArray [ 0 ][ 2 ] : 5 Here, inside a jagged array, - jaggedArray[1][0] - first element of the second array - jaggedArray[1][1] - second element of the second array - jaggedArray[0][2] - third element of the first array section{ font-size: 25px; }","title":"Example: C# Jagged Array"},{"location":"week-7-csharp/ce103-week-7-csharp/#iterating-through-a-jagged-array","text":"In C#, we can use loops to iterate through each element of the jagged array. For example, using System ; namespace JaggedArray { class Program { static void Main ( string [] args ) { // declare a jagged array int [][] jaggedArray = new int [ 2 ][]; // set size of Jagged Array Elements jaggedArray [ 0 ] = new int [ 3 ]; jaggedArray [ 1 ] = new int [ 2 ]; // initialize the first array jaggedArray [ 0 ][ 0 ] = 1 ; jaggedArray [ 0 ][ 1 ] = 3 ; jaggedArray [ 0 ][ 2 ] = 5 ; // initialize the second array jaggedArray [ 1 ][ 0 ] = 2 ; jaggedArray [ 1 ][ 1 ] = 2 ; // outer for loop for ( int i = 0 ; i < jaggedArray . Length ; i ++) { Console . Write ( \"Element \" + i + \": \" ); // inner for loop for ( int j = 0 ; j < jaggedArray [ i ]. Length ; j ++) { Console . Write ( jaggedArray [ i ][ j ] + \" \" ); } Console . WriteLine (); } Console . ReadLine (); } } } section{ font-size: 25px; } Output Element 0 : 1 3 5 Element 1 : 2 2 section{ font-size: 25px; } In the above example, we have used a nested for loop to iterate through the jagged array. Here, section{ font-size: 25px; } 1. Outer for loop to access the elements (arrays) of the jagged array jaggedArray.Length - gives the size of jagged array section{ font-size: 25px; } 2. Inner for loop to access the elements of the individual array inside the jagged array. jaggedArray[i].Length - gives the size of elements of the ith array inside the jagged array section{ font-size: 25px; }","title":"Iterating through a jagged array"},{"location":"week-7-csharp/ce103-week-7-csharp/#jagged-array-with-multidimensional-array","text":"In C#, we can also use multidimensional arrays as Jagged Array Elements. For example, int [ ][ , ] jaggedArrayTwoD = new int [ 2 ][ , ] { new int [,] { { 1 , 8 }, { 6 , 7 } }, new int [,] { { 0 , 3 }, { 5 , 6 }, { 9 , 10 } } }; Here, each element of the jagged array is a multidimensional array: new int[,] { {1, 8}, {6, 7} } - 2D array with 2 elements new int[ , ] { {0, 3}, {5, 6}, {9, 10} } - 2D array with 3 elements section{ font-size: 25px; } Let's see an example, using System ; namespace JaggedArray { class Program { static void Main ( string [] args ) { // declare and initialize jagged array with 2D array int [][,] jaggedArray = new int [ 3 ][ , ] { new int [ , ] { { 1 , 8 }, { 6 , 7 } }, new int [ , ] { { 0 , 3 }, { 5 , 6 }, { 9 , 10 } }, new int [ , ] { { 11 , 23 }, { 100 , 88 }, { 0 , 10 } } }; Console . WriteLine ( jaggedArray [ 0 ][ 0 , 1 ]); Console . WriteLine ( jaggedArray [ 1 ][ 2 , 1 ]); Console . WriteLine ( jaggedArray [ 2 ][ 1 , 0 ]); Console . ReadLine (); } } } section{ font-size: 25px; } Output 8 10 100 section{ font-size: 25px; } In the above example, notice the code, jaggedArray [ 0 ][ 0 , 1 ] Here, [0] - represents the first element (2D array) of the jagged array [0, 1] - represents the second element of the first array inside the 2D array section{ font-size: 25px; }","title":"Jagged Array with Multidimensional Array"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-foreach-loop","text":"In this tutorial, we will learn about foreach loops (an alternative to for loop) and how to use them with arrays and collections. C# provides an easy to use and more readable alternative to for loop, the foreach loop when working with arrays and collections to iterate through the items of arrays/collections. The foreach loop iterates through each item, hence called foreach loop. section{ font-size: 25px; } Before moving forward with foreach loop, visit: C# for loop C# arrays C# collections section{ font-size: 25px; }","title":"C# foreach loop"},{"location":"week-7-csharp/ce103-week-7-csharp/#syntax-of-foreach-loop","text":"foreach ( element in iterable - item ) { // body of foreach loop } Here iterable-item can be an array or a class of collection. section{ font-size: 25px; }","title":"Syntax of foreach loop"},{"location":"week-7-csharp/ce103-week-7-csharp/#how-foreach-loop-works","text":"section{ font-size: 25px; } The in keyword used along with foreach loop is used to iterate over the iterable-item. The in keyword selects an item from the iterable-item on each iteration and store it in the variable element. On first iteration, the first item of iterable-item is stored in element. On second iteration, the second element is selected and so on. The number of times the foreach loop will execute is equal to the number of elements in the array or collection. Here is an example of iterating through an array using the for loop: section{ font-size: 25px; }","title":"How foreach loop works?"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-1-printing-array-using-for-loop","text":"using System ; namespace Loop { class ForLoop { public static void Main ( string [] args ) { char [] myArray = { 'H' , 'e' , 'l' , 'l' , 'o' }; for ( int i = 0 ; i < myArray . Length ; i ++) { Console . WriteLine ( myArray [ i ]); } } } } The same task can be done using the foreach loop. section{ font-size: 25px; }","title":"Example 1: Printing array using for loop"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-2-printing-array-using-foreach-loop","text":"using System ; namespace Loop { class ForEachLoop { public static void Main ( string [] args ) { char [] myArray = { 'H' , 'e' , 'l' , 'l' , 'o' }; foreach ( char ch in myArray ) { Console . WriteLine ( ch ); } } } } section{ font-size: 25px; } When we run the both program, the output will be: H e l l o section{ font-size: 25px; } In the above program, the foreach loop iterates over the array, myArray. On first iteration, the first element i.e. myArray[0] is selected and stored in ch. Similarly on the last iteration, the last element i.e. myArray[4] is selected. Inside the body of loop, the value of ch is printed. section{ font-size: 25px; } When we look at both programs, the program that uses foreach loop is more readable and easy to understand. This is because of its simple and expressive syntax. Hence, foreach loop is preferred over for loop when working with arrays and collections. section{ font-size: 25px; }","title":"Example 2: Printing array using foreach loop"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-3-traversing-an-array-of-gender-using-foreach-loop","text":"This program computes the number of male and female candidates. using System ; namespace Loop { class ForEachLoop { public static void Main ( string [] args ){ char [] gender = { 'm' , 'f' , 'm' , 'm' , 'm' , 'f' , 'f' , 'm' , 'm' , 'f' }; int male = 0 , female = 0 ; foreach ( char g in gender ) { if ( g == 'm' ) male ++; else if ( g == 'f' ) female ++; } Console . WriteLine ( \"Number of male = {0}\" , male ); Console . WriteLine ( \"Number of female = {0}\" , female ); } } } section{ font-size: 25px; } When we run the program, the output will be: Number of male = 6 Number of female = 4 section{ font-size: 25px; }","title":"Example 3: Traversing an array of gender using foreach loop"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-4-foreach-loop-with-list-collection","text":"This program computes the sum of elements in a List . using System ; using System.Collections.Generic ; namespace Loop { class ForEachLoop { public static void Main ( string [] args ) { var numbers = new List < int >() { 5 , - 8 , 3 , 14 , 9 , 17 , 0 , 4 }; int sum = 0 ; foreach ( int number in numbers ) { sum += number ; } Console . WriteLine ( \"Sum = {0}\" , sum ); Console . ReadLine (); } } } section{ font-size: 25px; } When we run the program, the output will be: Sum = 44 In this program, foreach loop is used to traverse through a collection. Traversing a collection is similar to traversing through an array. The first element of collection is selected on the first iteration, second element on second iteration and so on till the last element. section{ font-size: 25px; }","title":"Example 4: foreach loop with List (Collection)"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-class-and-object-oop-i","text":"section{ font-size: 25px; }","title":"C# Class and Object - OOP (I)"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-class-and-object","text":"In this tutorial, you will learn about the concept of classes and objects in C# with the help of examples. section{ font-size: 25px; } C# is an object-oriented program. In object-oriented programming(OOP), we solve complex problems by dividing them into objects. section{ font-size: 25px; } To work with objects, we need to perform the following activities: create a class create objects from the class section{ font-size: 25px; }","title":"C# Class and Object"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-class","text":"Before we learn about objects, we need to understand the working of classes. Class is the blueprint for the object. section{ font-size: 25px; } We can think of the class as a sketch (prototype) of a house . It contains all the details about the floors, doors, windows, etc. We can build a house based on these descriptions. House is the object. Like many houses can be made from the sketch, we can create many objects from a class. section{ font-size: 25px; } Create a class in C# We use the class keyword to create an object. For example, class ClassName { } section{ font-size: 25px; } Here, we have created a class named ClassName. A class can contain fields - variables to store data methods - functions to perform specific tasks section{ font-size: 25px; } Let's see an example, class Dog { //field string breed ; //method public void bark () { } } section{ font-size: 25px; } In the above example, Dog - class name breed - field bark() - method Note : In C#, fields and methods inside a class are called members of a class. section{ font-size: 25px; }","title":"C# Class"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-objects","text":"An object is an instance of a class. Suppose, we have a class Dog. Bulldog, German Shepherd, Pug are objects of the class. section{ font-size: 25px; } Creating an Object of a class In C#, here's how we create an object of the class. ClassName obj = new ClassName (); Here, we have used the new keyword to create an object of the class. And, obj is the name of the object. Now, let us create an object from the Dog class. Dog bullDog = new Dog (); Now, the bullDog object can access the fields and methods of the Dog class. section{ font-size: 25px; }","title":"C# Objects"},{"location":"week-7-csharp/ce103-week-7-csharp/#access-class-members-using-object","text":"We use the name of objects along with the . operator to access members of a class. For example, section{ font-size: 25px; } using System ; namespace ClassObject { class Dog { string breed ; public void bark () { Console . WriteLine ( \"Bark Bark !!\" ); } static void Main ( string [] args ) { // create Dog object Dog bullDog = new Dog (); // access breed of the Dog bullDog . breed = \"Bull Dog\" ; Console . WriteLine ( bullDog . breed ); // access method of the Dog bullDog . bark (); Console . ReadLine (); } } } -- Output Bull Dog Bark Bark !! section{ font-size: 25px; } In the above program, we have created an object named bullDog from the Dog class. Notice that we have used the object name and the . (dot operator) to access the breed field // access breed of the Dog bullDog . breed = \"Bull Dog\" ; and the bark() method // access method of the Dog bullDog . bark (); section{ font-size: 25px; }","title":"Access Class Members using Object"},{"location":"week-7-csharp/ce103-week-7-csharp/#creating-multiple-objects-of-a-class","text":"We can create multiple objects from the same class. For example, using System ; namespace ClassObject { class Employee { string department ; static void Main ( string [] args ) { // create Employee object Employee sheeran = new Employee (); // set department for sheeran sheeran . department = \"Development\" ; Console . WriteLine ( \"Sheeran: \" + sheeran . department ); // create second object of Employee Employee taylor = new Employee (); // set department for taylor taylor . department = \"Content Writing\" ; Console . WriteLine ( \"Taylor: \" + taylor . department ); Console . ReadLine (); } } } section{ font-size: 25px; } Output Sheeran : Development Taylor : Content Writing section{ font-size: 25px; } In the above example, we have created two objects: sheeran and taylor from the Employee class. Here, you can see both the objects have their own version of the department field with different values. section{ font-size: 25px; }","title":"Creating Multiple Objects of a Class"},{"location":"week-7-csharp/ce103-week-7-csharp/#creating-objects-in-a-different-class","text":"In C#, we can also create an object of a class in another class. section{ font-size: 25px; } For example, using System ; namespace ClassObject { class Employee { public string name ; public void work ( string work ) { Console . WriteLine ( \"Work: \" + work ); } } class EmployeeDrive { static void Main ( string [] args ) { // create Employee object Employee e1 = new Employee (); Console . WriteLine ( \"Employee 1\" ); // set name of the Employee e1 . name = \"Gloria\" ; Console . WriteLine ( \"Name: \" + e1 . name ); //call method of the Employee e1 . work ( \"Coding\" ); Console . ReadLine (); } } } section{ font-size: 25px; } Output Employee 1 Name : Gloria Work : Coding section{ font-size: 25px; } In the above example, we have two classes: Employee and EmployeeDrive. Here, we are creating an object e1 of the Employee class in the EmployeeDrive class. We have used the e1 object to access the members of the Employee class from EmployeeDrive. This is possible because the members in the Employee class are public . Here, public is an access specifier that means the class members are accessible from any other classes. To learn more, visit C# Access Modifiers . section{ font-size: 25px; }","title":"Creating objects in a different class"},{"location":"week-7-csharp/ce103-week-7-csharp/#why-objects-and-classes","text":"Objects and classes help us to divide a large project into smaller sub-problems. section{ font-size: 25px; } Suppose you want to create a game that has hundreds of enemies and each of them has fields like health, ammo, and methods like shoot() and run(). section{ font-size: 25px; } With OOP we can create a single Enemy class with required fields and methods. section{ font-size: 25px; } Then, we can create multiple enemy objects from it. section{ font-size: 25px; } Each of the enemy objects will have its own version of health and ammo fields. And, they can use the common shoot() and run() methods. section{ font-size: 25px; } Now, instead of thinking of projects in terms of variables and methods, we can think of them in terms of objects. section{ font-size: 25px; } This helps to manage complexity as well as make our code reusable. section{ font-size: 25px; }","title":"Why Objects and Classes?"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-method","text":"In this tutorial, we will learn about the C# method with the help of examples. section{ font-size: 25px; } A method is a block of code that performs a specific task. Suppose you need to create a program to create a circle and color it. You can create two methods to solve this problem: a method to draw the circle a method to color the circle section{ font-size: 25px; } Dividing a complex problem into smaller chunks makes your program easy to understand and reusable. section{ font-size: 25px; }","title":"C# Method"},{"location":"week-7-csharp/ce103-week-7-csharp/#declaring-a-method-in-c","text":"Here's the syntax to declare a method in C#. returnType methodName () { // method body } section{ font-size: 25px; } Here, returnType - It specifies what type of value a method returns. For example, if a method has an int return type then it returns an int value. If the method does not return a value, its return type is void . methodName - It is an identifier that is used to refer to the particular method in a program. method body - It includes the programming statements that are used to perform some tasks. The method body is enclosed inside the curly braces { } section{ font-size: 25px; } Let's see an example, void display () { // code } Here, the name of the method is display(). And, the return type is void. section{ font-size: 25px; }","title":"Declaring a Method in C"},{"location":"week-7-csharp/ce103-week-7-csharp/#calling-a-method-in-c","text":"In the above example, we have declared a method named display(). Now, to use the method, we need to call it. Here's how we can call the display() method. // calls the method display (); section{ font-size: 25px; } Working of C# method call section{ font-size: 25px; }","title":"Calling a Method in C"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-c-method","text":"using System ; namespace Method { class Program { // method declaration public void display () { Console . WriteLine ( \"Hello World\" ); } static void Main ( string [] args ) { // create class object Program p1 = new Program (); //call method p1 . display (); Console . ReadLine (); } } } section{ font-size: 25px; } Output Hello World section{ font-size: 25px; } In the above example, we have created a method named display() . We have created an object p1 of the Program class. Notice the line, p1 . display (); Here, we are using the object to call the display() method. section{ font-size: 25px; }","title":"Example: C# Method"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-method-return-type","text":"A C# method may or may not return a value. If the method doesn't return any value, we use the void keyword (shown in the above example). If the method returns any value, we use the return statement to return any value. For example, int addNumbers () { ... return sum ; } section{ font-size: 25px; } Here, we are returning the variable sum. One thing you should always remember is that the return type of the method and the returned value should be of the same type. In our code, the return type is int . Hence, the data type of sum should be of int as well. section{ font-size: 25px; }","title":"C# Method Return Type"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-method-return-type","text":"using System ; namespace Method { class Program { // method declaration static int addNumbers () { int sum = 5 + 14 ; return sum ; } static void Main ( string [] args ) { // call method int sum = addNumbers (); Console . WriteLine ( sum ); Console . ReadLine (); } } } section{ font-size: 25px; } Output 19 section{ font-size: 25px; } In the above example, we have a method named addNumbers() with the int return type. int sum = addNumbers (); Here, we are storing the returned value from the addNumbers() to sum. We have used int data type to store the value because the method returns an int value. Note : As the method is static we do not create a class object before calling the method. The static method belongs to the class rather than the object of a class. section{ font-size: 25px; }","title":"Example: Method Return Type"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-methods-parameters","text":"In C#, we can also create a method that accepts some value. These values are called method parameters. For example, int addNumber ( int a , int b ) { //code } Here, a and b are two parameters passed to the addNumber() function. section{ font-size: 25px; } If a method is created with parameters, we need to pass the corresponding values(arguments) while calling the method. For example, // call the method addNumber ( 100 , 100 ); section{ font-size: 25px; } Representation of the C# method returning a value Here, We have passed 2 arguments (100, 100). section{ font-size: 25px; }","title":"C# Methods Parameters"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-1-c-methods-with-parameters","text":"using System ; namespace Method { class Program { int addNumber ( int a , int b ) { int sum = a + b ; return sum ; } static void Main ( string [] args ) { // create class object Program p1 = new Program (); //call method int sum = p1 . addNumber ( 100 , 100 ); Console . WriteLine ( \"Sum: \" + sum ); Console . ReadLine (); } } } section{ font-size: 25px; } Output Sum: 200 section{ font-size: 25px; }","title":"Example 1: C# Methods with Parameters"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-methods-with-single-parameter","text":"In C#, we can also create a method with a single parameter. For example, using System ; namespace Method { class Program { string work ( string work ) { return work ; } static void Main ( string [] args ) { // create class object Program p1 = new Program (); //call method string work = p1 . work ( \"Cleaning\" ); ; Console . WriteLine ( \"Work: \" + work ); Console . ReadLine (); } } } section{ font-size: 25px; } Output Work: Cleaning Here, the work() method has a single parameter work. section{ font-size: 25px; }","title":"C# Methods with Single Parameter"},{"location":"week-7-csharp/ce103-week-7-csharp/#built-in-methods","text":"So far we have defined our own methods. These are called user-defined methods . However, in C#, there are various methods that can be directly used in our program. They are called built-in methods . For example, Sqrt() - computes the square root of a number ToUpper() - converts a string to uppercase section{ font-size: 25px; }","title":"Built-in methods"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-mathsqrt-method","text":"using System ; namespace Method { class Program { static void Main ( string [] args ) { // Built in method double a = Math . Sqrt ( 9 ); Console . WriteLine ( \"Square root of 9: \" + a ); } } } section{ font-size: 25px; } Output Square root of 9 : 3 section{ font-size: 25px; } In the above program, we have used double a = Math . Sqrt ( 9 ); to compute the square root of 9. Here, the Sqrt() is a built-in method that is defined inside the Math class. We can simply use built-in methods in our program without writing the method definition. To learn more, visit C# built-in methods . section{ font-size: 25px; }","title":"Example: Math.Sqrt() Method"},{"location":"week-7-csharp/ce103-week-7-csharp/#method-overloading-in-c","text":"In C#, we can create two or more methods with the same name. It is known as method overloading. section{ font-size: 25px; } For example, using System ; namespace MethodOverload { class Program { // method with one parameter void display ( int a ) { Console . WriteLine ( \"Arguments: \" + a ); } // method with two parameters void display ( int a , int b ) { Console . WriteLine ( \"Arguments: \" + a + \" and \" + b ); } static void Main ( string [] args ) { Program p1 = new Program (); p1 . display ( 100 ); p1 . display ( 100 , 200 ); Console . ReadLine (); } } } section{ font-size: 25px; } Output Arguments : 100 Arguments : 100 and 200 section{ font-size: 25px; } In the above example, we have overloaded the display() method. It is possible because: one method has one parameter another has two parameter To know more visit C# Method Overloading section{ font-size: 25px; }","title":"Method Overloading in C"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-access-modifiers","text":"In this tutorial, we will learn about the public, private, protected, and internal access modifiers in C# with the help of examples. In C#, access modifiers specify the accessibility of types (classes, interfaces, etc) and type members (fields, methods, etc). For example, class Student { public string name ; private int num ; } Here, name - public field that can be accessed from anywhere num - private field can only be accessed within the Student class section{ font-size: 25px; } Types of Access Modifiers In C#, there are 4 basic types of access modifiers. public private protected internal section{ font-size: 25px; }","title":"C# Access Modifiers"},{"location":"week-7-csharp/ce103-week-7-csharp/#1-public-access-modifier","text":"When we declare a type or type member public , it can be accessed from anywhere. For example, using System ; namespace MyApplication { class Student { public string name = \"Sheeran\" ; public void print () { Console . WriteLine ( \"Hello from Student class\" ); } } class Program { static void Main ( string [] args ) { // creating object of Student class Student student1 = new Student (); // accessing name field and printing it Console . WriteLine ( \"Name: \" + student1 . name ); // accessing print method from Student student1 . print (); Console . ReadLine (); } } } section{ font-size: 25px; } Output Name: Sheeran Hello from Student class section{ font-size: 25px; } In the above example, we have created a class named Student with a field name and a method print(). // accessing name field and printing it Console . WriteLine ( \"Name: \" + student1 . name ); // accessing print method from Student student1 . print (); section{ font-size: 25px; } Since the field and method are public, we are able to access them from the Program class. Note : We have used the object student1 of the Student class to access its members. To learn more, visit the C# class and objects . section{ font-size: 25px; }","title":"1. public access modifier"},{"location":"week-7-csharp/ce103-week-7-csharp/#2-private-access-modifier","text":"When we declare a type member with the private access modifier, it can only be accessed within the same class or struct . For example, using System ; namespace MyApplication { class Student { private string name = \"Sheeran\" ; private void print () { Console . WriteLine ( \"Hello from Student class\" ); } } class Program { static void Main ( string [] args ) { // creating object of Student class Student student1 = new Student (); // accessing name field and printing it Console . WriteLine ( \"Name: \" + student1 . name ); // accessing print method from Student student1 . print (); Console . ReadLine (); } } } section{ font-size: 25px; } In the above example, we have created a class named Student with a field name and a method print(). // accessing name field and printing it Console . WriteLine ( \"Name: \" + student1 . name ); // accessing print method from Student student1 . print (); section{ font-size: 25px; } Since the field and method are private, we are not able to access them from the Program class. Here, the code will generate the following error. Error CS0122 'Student.name' is inaccessible due to its protection level Error CS0122 'Student.print()' is inaccessible due to its protection level section{ font-size: 25px; }","title":"2. private access modifier"},{"location":"week-7-csharp/ce103-week-7-csharp/#3-protected-access-modifier","text":"When we declare a type member as protected , it can only be accessed from the same class and its derived classes. For example, using System ; namespace MyApplication { class Student { protected string name = \"Sheeran\" ; } class Program { static void Main ( string [] args ) { // creating object of student class Student student1 = new Student (); // accessing name field and printing it Console . WriteLine ( \"Name: \" + student1 . name ); Console . ReadLine (); } } } section{ font-size: 25px; } In the above example, we have created a class named Student with a field name. Since the field is protected, we are not able to access it from the Program class. Here, the code will generate the following error. Error CS0122 ' Student . name ' is inaccessible due to its protection level section{ font-size: 25px; } Now, let's try to access the protected member from a derived class. using System ; namespace MyApplication { class Student { protected string name = \"Sheeran\" ; } // derived class class Program : Student { static void Main ( string [] args ) { // creating object of derived class Program program = new Program (); // accessing name field and printing it Console . WriteLine ( \"Name: \" + program . name ); Console . ReadLine (); } } } section{ font-size: 25px; } Output Name: Sheeran section{ font-size: 25px; } In the above example, we have created a class Student with a protected field name. Notice that we have inherited the Program class from the Student class. // accessing name field and printing it Console . WriteLine ( \"Name: \" + program . name ); Since the protected member can be accessed from derived classes, we are able to access name from the Program class. section{ font-size: 25px; }","title":"3. protected access modifier"},{"location":"week-7-csharp/ce103-week-7-csharp/#4-internal-access-modifier","text":"When we declare a type or type member as internal , it can be accessed only within the same assembly. An assembly is a collection of types (classes, interfaces, etc) and resources (data). They are built to work together and form a logical unit of functionality. That's why when we run an assembly all classes and interfaces inside the assembly run together. To learn more, visit the C# Assembly . section{ font-size: 25px; }","title":"4. internal access modifier"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-internal-within-the-same-assembly","text":"using System ; namespace Assembly { class Student { internal string name = \"Sheeran\" ; } class Program { static void Main ( string [] args ) { // creating object of Student class Student theStudent = new Student (); // accessing name field and printing it Console . WriteLine ( \"Name: \" + theStudent . name ); Console . ReadLine (); } } } section{ font-size: 25px; } Output Name: Sheeran section{ font-size: 25px; } In the above example, we have created a class named Student with a field name. Since the field is internal , we are able to access it from the Program class as they are in the same assembly. If we use internal within a single assembly, it works just like the public access modifier. section{ font-size: 25px; }","title":"Example: internal within the same Assembly"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-internal-in-different-assembly","text":"Let's create one assembly first. // Code on Assembly1 using System ; namespace Assembly1 { public class StudentName { internal string name = \"Sheeran\" ; } class Program { static void Main ( string [] args ) { } } } section{ font-size: 25px; } Here, this code is in Assembly1 . We have created an internal field name inside the class StudentName. Now, this field can only be accessed from the same assembly Assembly1 . Now, let's create another assembly. // Code on Assembly2 using System ; // access Assembly1 using Assembly1 ; namespace Assembly2 { class Program { static void Main ( string [] args ) { StudentName student = new StudentName (); // accessing name field from Assembly1 Console . Write ( student . name ); Console . ReadLine (); } } } section{ font-size: 25px; } Here, this code is in Assembly2 . We are trying to access the name field of the StudentName class( Assembly1 ). To access fields from Assembly1 , we first need to set the reference of Assembly1 in Assembly2 . Now the code using Assembly1 ; allows us to use the code from Assembly1 to Assembly2 . section{ font-size: 25px; } Here, when we try to access the name field from Assembly2 , we get an error. Error CS0122 'StudentName.name' is inaccessible due to its protection level This is because name is an internal field present in Assembly1 . section{ font-size: 25px; }","title":"Example: internal in different Assembly"},{"location":"week-7-csharp/ce103-week-7-csharp/#5-protected-internal-access-modifier","text":"The protected internal is a combination of protected and internal access modifiers. When we declare a member protected internal , it can be accessed from the same assembly and the derived class of the containing class from any other assembly. // Code on Assembly1 using System ; namespace Assembly1 { public class Greet { protected internal string msg = \"Hello\" ; } class Program { static void Main ( string [] args ) { Greet greet = new Greet (); Console . WriteLine ( greet . msg ); Console . ReadLine (); } } } section{ font-size: 25px; } Output Hello section{ font-size: 25px; } The above code is in Assembly1 . In the above example, we have created a class named Greet with a field msg. Since the field is protected internal, we are able to access it from the Program class as they are in the same assembly. section{ font-size: 25px; } Let's derive a class from Greet in another assembly and try to access the protected internal field msg from it. // Code on Assembly2 using System ; // access Assembly1 using Assembly1 ; namespace Assembly2 { // derived class of Greet class Program : Greet { static void Main ( string [] args ) { Program greet = new Program (); // accessing name field from Assembly1 Console . Write ( greet . msg ); Console . ReadLine (); } } } section{ font-size: 25px; } Output Hello section{ font-size: 25px; } The above code is in Assembly2 . In the above example, we have inherited the Program class from the Greet class(from Assembly1 ). // accessing name field from Assembly1 Console . Write ( greet . msg ); We are able to access the msg from the Greet class of Assembly1 from Assembly2 . This is because the msg is a protected internal field and we are trying to access it from the child class of Greet. section{ font-size: 25px; }","title":"5. protected internal access modifier"},{"location":"week-7-csharp/ce103-week-7-csharp/#6-private-protected-access-modifier","text":"The private protected access modifier is a combination of private and protected . It is available from the C# version 7.2 and later. When we declare a member private protected , it can only be accessed within the same class, and its derived class within the same assembly. For example, // Code in Assembly1 using System ; namespace Assembly1 { public class StudentName { private protected string name = \"Sheeran\" ; } //derived class of StudentName class class Program1 : StudentName { static void Main ( string [] args ) { Program1 student = new Program1 (); // accessing name field from base class Console . Write ( student . name ); Console . ReadLine (); } } } section{ font-size: 25px; } Output Sheeran section{ font-size: 25px; } The above code is in Assembly1 In the above example, we have created a class StudentName with a private protected field name. section{ font-size: 25px; } Notice that we have inherited the Program1 class from the StudentName class. section{ font-size: 25px; } Since the private protected member can be accessed from derived classes within the same assembly, we are able to access name from the Program1 class. Let's derive a class from StudentName in another assembly and try to access the private protected field name from it. section{ font-size: 25px; } For example, // Code in Assembly2 using System ; //access Assembly1 using Assembly1 ; namespace Assembly2 { //derived class of StudentName class Program : StudentName { static void Main ( string [] args ) { Program student = new Program (); // accessing name field from Assembly1 Console . Write ( student . name ); Console . ReadLine (); } } } The above code is in Assembly2 section{ font-size: 25px; } In the above example, when we try to access the name field from the derived class of StudentName, we get an error. Error CS0122 'StudentName.name' is inaccessible due to its protection level This is because the name field is in Assembly1 and the derived class is in Assembly2 . Note : We can also use access modifiers with types (classes, interface, etc). However, we can only use types with public and internal access modifiers. section{ font-size: 25px; }","title":"6. private protected access modifier"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-variable-scope","text":"In this tutorial, you will learn about variable scope in C# with the help of examples. A variable scope refers to the availability of variables in certain parts of the code. In C#, a variable has three types of scope: Class Level Scope Method Level Scope Block Level Scope section{ font-size: 25px; }","title":"C# Variable Scope"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-class-level-variable-scope","text":"In C#, when we declare a variable inside a class, the variable can be accessed within the class. This is known as class level variable scope . Class level variables are known as fields and they are declared outside of methods, constructors, and blocks of the class. For example, using System ; namespace VariableScope { class Program { // class level variable string str = \"Class Level\" ; public void display () { Console . WriteLine ( str ); } static void Main ( string [] args ) { Program ps = new Program (); ps . display (); Console . ReadLine (); } } } section{ font-size: 25px; } Output Class Level section{ font-size: 25px; } In the above example, we have initialized a variable named str inside the Program class. Since it is a class level variable, we can access it from a method present inside the class. public void display () { Console . WriteLine ( str ); } This is because the class level variable is accessible throughout the class. section{ font-size: 25px; } Note : We cannot access the class level variable through static methods. For example, suppose we have a static method inside the Program class. static void display2 () { // Access class level variable // Cause an Error Console . WriteLine ( str ); } section{ font-size: 25px; }","title":"C# Class Level Variable Scope"},{"location":"week-7-csharp/ce103-week-7-csharp/#method-level-variable-scope","text":"When we declare a variable inside a method, the variable cannot be accessed outside of the method. This is known as method level variable scope . For example, using System ; namespace VariableScope { class Program { public void method1 () { // display variable inside method string str = \"method level\" ; } public void method2 () { // accessing str from method2() Console . WriteLine ( str ); } static void Main ( string [] args ) { Program ps = new Program (); ps . method2 (); Console . ReadLine (); } } } section{ font-size: 25px; } In the above example, we have created a variable named str inside method1() . // Inside method1() string str = \"method level\" ; Here, str is a method level variable. So, it cannot be accessed outside method1() . However, when we try to access the str variable from the method2() // Inside method2 Console . WriteLine ( str ); // Error code section{ font-size: 25px; } we get an error. Error CS0103 The name 'str' does not exist in the current context This is because method level variables have scope inside the method where they are created. section{ font-size: 25px; } For example, using System ; namespace VariableScope { class Program { public void display () { string str = \"inside method\" ; // accessing method level variable Console . WriteLine ( str ); } static void Main ( string [] args ) { Program ps = new Program (); ps . display (); Console . ReadLine (); } } } section{ font-size: 25px; } Output inside method section{ font-size: 25px; } Here, we have created the str variable and accessed it within the same method display() . Hence, the code runs without any error. section{ font-size: 25px; }","title":"Method Level Variable Scope"},{"location":"week-7-csharp/ce103-week-7-csharp/#block-level-variable-scope-in-c","text":"When we declare a variable inside a block ( for loop , while loop , if..else ), the variable can only be accessed within the block. This is known as block level variable scope . section{ font-size: 25px; } For example, using System ; namespace VariableScope { class Program { public void display () { for ( int i = 0 ; i <= 3 ; i ++) { } Console . WriteLine ( i ); } static void Main ( string [] args ) { Program ps = new Program (); ps . display (); Console . ReadLine (); } } } section{ font-size: 25px; } In the above program, we have initialized a block level variable i inside the for loop. for ( int i = 0 ; i <= 3 ; i ++) { } section{ font-size: 25px; } Since i is a block level variable, when we try to access the variable outside the for loop, // Outside for loop Console . WriteLine ( i ); we get an error. Error CS0103 The name 'i' does not exist in the current context section{ font-size: 25px; }","title":"Block Level Variable Scope in C"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-constructor","text":"In this tutorial, we will learn about the C# constructors and their types with the help of examples. In C#, a constructor is similar to a method that is invoked when an object of the class is created. However, unlike methods, a constructor: has the same name as that of the class does not have any return type section{ font-size: 25px; }","title":"C# Constructor"},{"location":"week-7-csharp/ce103-week-7-csharp/#create-a-c-constructor","text":"Here's how we create a constructor in C# class Car { // constructor Car () { //code } } Here, Car() is a constructor. It has the same name as its class. section{ font-size: 25px; } Call a constructor Once we create a constructor, we can call it using the new keyword. For example, new Car (); In C#, a constructor is called when we try to create an object of a class. For example, Car car1 = new Car (); Here, we are calling the Car() constructor to create an object car1. To learn more about objects, visit C# Class and Objects . section{ font-size: 25px; }","title":"Create a C# constructor"},{"location":"week-7-csharp/ce103-week-7-csharp/#types-of-constructors","text":"There are the following types of constructors: Parameterless Constructor Parameterized Constructor Default Constructor section{ font-size: 25px; }","title":"Types of Constructors"},{"location":"week-7-csharp/ce103-week-7-csharp/#1-parameterless-constructor","text":"When we create a constructor without parameters, it is known as a parameterless constructor. For example, using System ; namespace Constructor { class Car { // parameterless constructor Car () { Console . WriteLine ( \"Car Constructor\" ); } static void Main ( string [] args ) { // call constructor new Car (); Console . ReadLine (); } } } section{ font-size: 25px; } Output Car Constructor section{ font-size: 25px; } In the above example, we have created a constructor named Car(). new Car (); section{ font-size: 25px; } We can call a constructor by adding a new keyword to the constructor name. section{ font-size: 25px; }","title":"1. Parameterless Constructor"},{"location":"week-7-csharp/ce103-week-7-csharp/#2-c-parameterized-constructor","text":"In C#, a constructor can also accept parameters. It is called a parameterized constructor. For example, using System ; namespace Constructor { class Car { string brand ; int price ; // parameterized constructor Car ( string theBrand , int thePrice ) { brand = theBrand ; price = thePrice ; } static void Main ( string [] args ) { // call parameterized constructor Car car1 = new Car ( \"Bugatti\" , 50000 ); Console . WriteLine ( \"Brand: \" + car1 . brand ); Console . WriteLine ( \"Price: \" + car1 . price ); Console . ReadLine (); } } } section{ font-size: 25px; } Output Brand: Bugatti Price: 50000 section{ font-size: 25px; } In the above example, we have created a constructor named Car() . The constructor takes two parameters: theBrand and thePrice. Notice the statement, Car car1 = new Car ( \"Bugatti\" , 50000 ); Here, we are passing the two values to the constructor. The values passed to the constructor are called arguments. We must pass the same number and type of values as parameters. section{ font-size: 25px; }","title":"2. C# Parameterized Constructor"},{"location":"week-7-csharp/ce103-week-7-csharp/#3-default-constructor","text":"If we have not defined a constructor in our class, then the C# will automatically create a default constructor with an empty code and no parameters. For example, using System ; namespace Constructor { class Program { int a ; static void Main ( string [] args ) { // call default constructor Program p1 = new Program (); Console . WriteLine ( \"Default value of a: \" + p1 . a ); Console . ReadLine (); } } } section{ font-size: 25px; } Output Default value of a : 0 section{ font-size: 25px; } In the above example, we have not created any constructor in the Program class. However, while creating an object, we are calling the constructor. Program p1 = new Program(); Here, C# automatically creates a default constructor. The default constructor initializes any uninitialized variable with the default value. Hence, we get 0 as the value of the int variable a. Note : In the default constructor, all the numeric fields are initialized to 0, whereas string and object are initialized as null. section{ font-size: 25px; }","title":"3. Default Constructor"},{"location":"week-7-csharp/ce103-week-7-csharp/#4-copy-constructor-in-c","text":"We use a copy constructor to create an object by copying data from another object. For example, using System ; namespace Constructor { class Car { string brand ; // constructor Car ( string theBrand ) { brand = theBrand ; } // copy constructor Car ( Car c1 ) { brand = c1 . brand ; } static void Main ( string [] args ) { // call constructor Car car1 = new Car ( \"Bugatti\" ); Console . WriteLine ( \"Brand of car1: \" + car1 . brand ); // call the copy constructor Car car2 = new Car ( car1 ); Console . WriteLine ( \"Brand of car2: \" + car2 . brand ); Console . ReadLine (); } } } section{ font-size: 25px; } Output Brand of car1: Bugatti Brand of car2: Bugatti In the above program, we have used a copy constructor. section{ font-size: 25px; } Car ( Car c1 ) { brand = c1 . brand ; } Here, this constructor accepts an object of Car as its parameter. So, when creating the car2 object, we have passed the car1 object as an argument to the copy constructor. section{ font-size: 25px; } Car car2 = new Car ( car1 ); Inside the copy constructor, we have assigned the value of the brand for car1 object to the brand variable for car2 object. Hence, both objects have the same value of the brand. section{ font-size: 25px; }","title":"4. Copy Constructor in C"},{"location":"week-7-csharp/ce103-week-7-csharp/#5-private-constructor","text":"We can create a private constructor using the private access specifier . This is known as a private constructor in C#. Once the constructor is declared private, we cannot create objects of the class in other classes. section{ font-size: 25px; }","title":"5. Private Constructor"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-1-private-constructor","text":"using System ; namespace Constructor { class Car { // private constructor private Car () { Console . WriteLine ( \"Private Constructor\" ); } } class CarDrive { static void Main ( string [] args ) { // call private constructor Car car1 = new Car (); Console . ReadLine (); } } } section{ font-size: 25px; } In the above example, we have created a private constructor Car(). Since private members are not accessed outside of the class, when we try to create an object of Car // inside CarDrive class Car car1 = new Car (); section{ font-size: 25px; } we get an error error CS0122: 'Car.Car()' is inaccessible due to its protection level Note : If a constructor is private, we cannot create objects of the class. Hence, all fields and methods of the class should be declared static, so that they can be accessed using the class name. section{ font-size: 25px; }","title":"Example 1: Private Constructor"},{"location":"week-7-csharp/ce103-week-7-csharp/#6-c-static-constructor","text":"In C#, we can also make our constructor static. We use the static keyword to create a static constructor. For example, using System ; namespace Constructor { class Car { // static constructor static Car () { Console . WriteLine ( \"Static Constructor\" ); } // parameterless constructor Car () { Console . WriteLine ( \"Default Constructor\" ); } static void Main ( string [] args ) { Car car1 = new Car (); // call parameterless constructor Car car2 = new Car (); // call parameterless constructor again Console . ReadLine (); } } } section{ font-size: 25px; } In the above example, we have created a static constructor. static Car () { Console . WriteLine ( \"Static Constructor\" ); } We cannot call a static constructor directly. However, when we call a regular constructor, the static constructor gets called automatically. section{ font-size: 25px; } Car car1 = new Car (); Here, we are calling the Car() constructor. You can see that the static constructor is also called along with the regular constructor. section{ font-size: 25px; } Output Static Constructor Default Constructor Default Constructor section{ font-size: 25px; } The static constructor is called only once during the execution of the program. That's why when we call the constructor again, only the regular constructor is called. Note : We can have only one static constructor in a class. It cannot have any parameters or access modifiers. section{ font-size: 25px; }","title":"6. C# Static Constructor"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-constructor-overloading","text":"In C#, we can create two or more constructor in a class. It is known as constructor overloading. section{ font-size: 25px; } For example, using System ; namespace ConstructorOverload { class Car { // constructor with no parameter Car () { Console . WriteLine ( \"Car constructor\" ); } // constructor with one parameter Car ( string brand ) { Console . WriteLine ( \"Car constructor with one parameter\" ); Console . WriteLine ( \"Brand: \" + brand ); } static void Main ( string [] args ) { // call constructor with no parameter Car car = new Car (); Console . WriteLine (); // call constructor with parameter Car car2 = new Car ( \"Bugatti\" ); Console . ReadLine (); } } } section{ font-size: 25px; } Output Car constructor Car constructor with one parameter Brand : Bugatti section{ font-size: 25px; } In the above example, we have overloaded the Car constructor: one constructor has one parameter another has two parameter section{ font-size: 25px; } Based on the number of the argument passed during the constructor call, the corresponding constructor is called. Here, Object car - calls constructor with one parameter Object car2 - calls constructor with two parameter To learn more visit C# Constructor Overloading . section{ font-size: 25px; }","title":"C# Constructor Overloading"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-this-keyword","text":"In this article, we will learn about this keyword in C# with the help of examples. In C#, this keyword refers to the current instance of a class. section{ font-size: 25px; } For example, using System ; namespace ThisKeyword { class Test { int num ; Test ( int num ) { // this.num refers to the instance field this . num = num ; Console . WriteLine ( \"object of this: \" + this ); } static void Main ( string [] args ) { Test t1 = new Test ( 4 ); Console . WriteLine ( \"object of t1: \" + t1 ); Console . ReadLine (); } } } section{ font-size: 25px; } Output object of this: ThisKeyword.Test object of t1: ThisKeyword.Test section{ font-size: 25px; } In the above example, we have created an object named t1 of the class Test. We have printed the name of the object t1 and this keyword of the class. Here, we can see the name of both t1 and this is the same. This is because this keyword refers to the current instance of the class which is t1. section{ font-size: 25px; } Here are some of the major uses of this keyword in C#. section{ font-size: 25px; }","title":"C# this Keyword"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-this-with-same-name-variables","text":"We cannot declare two or more variables with the same name inside a scope (class or method). However, instance variables and parameters may have the same name. For example, using System ; namespace ThisKeyword { class Test { int num ; Test ( int num ) { num = num ; } static void Main ( string [] args ) { Test t1 = new Test ( 4 ); Console . WriteLine ( \"value of num: \" + t1 . num ); Console . ReadLine (); } } } section{ font-size: 25px; } Output 0 section{ font-size: 25px; } In the above program, the instance variable and the parameter have the same name: num. We have passed 4 as a value to the constructor. However, we are getting 0 as an output. This is because the C# gets confused because the names of the instance variable and the parameter are the same. We can solve this issue by using this . section{ font-size: 25px; }","title":"C# this with Same Name Variables"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-this-with-same-name-variables","text":"using System ; namespace ThisKeyword { class Test { int num ; Test ( int num ) { // this.num refers to the instance field this . num = num ; } static void Main ( string [] args ) { Test t1 = new Test ( 4 ); Console . WriteLine ( \"value of num: \" + t1 . num ); Console . ReadLine (); } } } section{ font-size: 25px; } Output value of num: 4 section{ font-size: 25px; } Now, we are getting the expected output that is 4 . It is because this.num refers to the instance variable of the class. So, there is no confusion between the names of the instance variable and the parameter. section{ font-size: 25px; }","title":"Example: this with Same Name Variables"},{"location":"week-7-csharp/ce103-week-7-csharp/#invoke-constructor-of-the-same-class-using-this","text":"While working with constructor overloading, we might have to invoke one constructor from another constructor. In this case, we can use this keyword. For example, using System ; namespace ThisKeyword { class Test { Test ( int num1 , int num2 ) { Console . WriteLine ( \"Constructor with two parameter\" ); } // invokes the constructor with 2 parameters Test ( int num ) : this ( 33 , 22 ) { Console . WriteLine ( \"Constructor with one parameter\" ); } public static void Main ( String [] args ) { Test t1 = new Test ( 11 ); Console . ReadLine (); } } } section{ font-size: 25px; } Output Constructor with two parameter Constructor with one parameter section{ font-size: 25px; } In the above example, we have used : followed by this keyword to call constructor Test(int num1, num2) from the constructor Test(int num) . When we call the Test(int num) constructor the Test(int num1, int num2) constructor executes first. Note : Calling one constructor from another constructor is known as constructor chaining. section{ font-size: 25px; }","title":"Invoke Constructor of the Same Class Using this"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-this-as-an-object-argument","text":"We can use this keyword to pass the current object as an argument to a method. For example, using System ; namespace ThisKeyword { class Test { int num1 ; int num2 ; Test () { num1 = 22 ; num2 = 33 ; } // method that accepts this as argument void passParameter ( Test t1 ) { Console . WriteLine ( \"num1: \" + num1 ); Console . WriteLine ( \"num2: \" + num2 ); } void display () { // passing this as a parameter passParameter ( this ); } public static void Main ( String [] args ) { Test t1 = new Test (); t1 . display (); Console . ReadLine (); } } } section{ font-size: 25px; } Output num1: 22 num2: 33 In the above program, we have a method passParameter(). It accepts the object of the class as an argument. section{ font-size: 25px; } passParameter ( this ); Here, we have passed this to the passParameter() method. As this refers to the instance of the class, we are able to access the value of num1 and num2. section{ font-size: 25px; }","title":"C# this as an object argument"},{"location":"week-7-csharp/ce103-week-7-csharp/#this-to-declare-a-c-indexer","text":"Indexers allow objects of a class to be indexed just like arrays. We use this keyword to declare an indexer in C#. For example, using System ; namespace ThisKeyword { class Student { private string [] name = new string [ 3 ]; // declaring an indexer public string this [ int index ] { // returns value of array element get { return name [ index ]; } // sets value of array element set { name [ index ] = value ; } } } class Program { public static void Main () { Student s1 = new Student (); s1 [ 0 ] = \"Ram\" ; s1 [ 1 ] = \"Shyam\" ; s1 [ 2 ] = \"Gopal\" ; for ( int i = 0 ; i < 3 ; i ++) { Console . WriteLine ( s1 [ i ] + \" \" ); } } } } section{ font-size: 25px; } Output Ram Shyam Gopal In the above program, we have created an indexer using this keyword. section{ font-size: 25px; } The array name[] is private. So, we cannot access it from the Program class. Now, to access and set the value of the array, we use an indexer. Student s1 = new Student (); s1 [ 0 ] = \"Ram\" ; s1 [ 1 ] = \"Shyam\" ; s1 [ 2 ] = \"Gopal\" ; As we have used this to create an indexer, we must use the object of the Student class to access the indexer. To know more about the indexer, visit C# indexer. section{ font-size: 25px; }","title":"this to declare a C# indexer"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-static-keyword","text":"In this tutorial, we will learn about the static keyword in C# with the help of examples. In C#, if we use a static keyword with class members, then there will be a single copy of the type member. And, all objects of the class share a single copy instead of creating individual copies. section{ font-size: 25px; }","title":"C# static Keyword"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-static-variables","text":"If a variable is declared static , we can access the variable using the class name. For example, using System ; namespace StaticKeyword { class Student { // static variable public static string department = \"Computer Science\" ; } class Program { static void Main ( string [] argos ) { // access static variable Console . WriteLine ( \"Department: \" + Student . department ); Console . ReadLine (); } } } section{ font-size: 25px; } Output Department: Computer Science In the above example, we have created a static variable named department. Since the variable is static, we have used the class name Student to access the variable. section{ font-size: 25px; }","title":"C# Static Variables"},{"location":"week-7-csharp/ce103-week-7-csharp/#static-variables-vs-instance-variables","text":"In C#, every object of a class will have its own copy of instance variables. For example, class Student { // instance variable public string studentName ; } class Program { static void Main ( string [] args ) { Student s1 = new Student (); Student s2 = new Student (); } } Here, both the objects s1 and s2 will have separate copies of the variable studentName. And, they are different from each other. section{ font-size: 25px; } However, if we declare a variable static, all objects of the class share the same static variable. And, we don't need to create objects of the class to access the static variables. section{ font-size: 25px; }","title":"Static Variables Vs Instance Variables"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-c-static-variable-vs-instance-variable","text":"using System ; namespace StaticKeyword { class Student { static public string schoolName = \"Programiz School\" ; public string studentName ; } class Program { static void Main ( string [] args ) { Student s1 = new Student (); s1 . studentName = \"Ram\" ; // calls instance variable Console . WriteLine ( \"Name: \" + s1 . studentName ); // calls static variable Console . WriteLine ( \"School: \" + Student . schoolName ); Student s2 = new Student (); s2 . studentName = \"Shyam\" ; // calls instance variable Console . WriteLine ( \"Name: \" + s2 . studentName ); // calls static variable Console . WriteLine ( \"School: \" + Student . schoolName ); Console . ReadLine (); } } } section{ font-size: 25px; } Output Name: Ram School: Programiz School Name: Shyam School: Programiz School In the above program, the Student class has a non-static variable named studentName and a static variable named schoolName. section{ font-size: 25px; } Inside the Program class, s1.studentName / s2.studentName - calls the non-static variable using objects s1 and s2 respectively Student.schoolName - calls the static variable by using the class name Since the schoolName is the same for all students, it is good to make the schoolName static. It saves memory and makes the program more efficient. section{ font-size: 25px; }","title":"Example: C# Static Variable Vs. Instance Variable"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-static-methods","text":"Just like static variables, we can call the static methods using the class name. class Test { public static void display () {....} } class Program { static void Main ( string [] args ) { Test . display (); } } section{ font-size: 25px; } Here, we have accessed the static method directly from Program classes using the class name. When we declare a method static, all objects of the class share the same static method. section{ font-size: 25px; }","title":"C# Static Methods"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-c-static-and-non-static-methods","text":"using System ; namespace StaticKeyword { class Test { public void display1 () { Console . WriteLine ( \"Non static method\" ); } public static void display2 () { Console . WriteLine ( \"Static method\" ); } } class Program { static void Main ( string [] args ) { Test t1 = new Test (); t1 . display1 (); Test . display2 (); Console . ReadLine (); } } } section{ font-size: 25px; } Output Non static method Static method section{ font-size: 25px; } In the above program, we have declared a non-static method named display1() and a static method named display2() inside the class Test. Inside the Program class, t1.display1() - access the non-static method using s1 object Test.display2() - access the static method using the class name Test Note : In C#, the Main method is static. So, we can call it without creating the object. section{ font-size: 25px; }","title":"Example: C# Static and Non-static Methods"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-static-class","text":"In C#, when we declare a class as static, we cannot create objects of the class. For example, using System ; namespace StaticKeyword { static class Test { static int a = 5 ; static void display () { Console . WriteLine ( \"Static method\" ); } static void Main ( string [] args ) { // creating object of Test Test t1 = new Test (); Console . WriteLine ( a ); display (); } } } section{ font-size: 25px; } In the above example, we have a static class Test. We have created an object t1 of the class Test. Since we cannot make an object of the static class, we get the following error: error CS0723: Cannot declare a variable of static type 'Test' error CS0712: Cannot create an instance of the static class Notice the field and method of the static class are also static because we can only have static members inside the static class. section{ font-size: 25px; } Note : We cannot inherit a static class in C#. For example, static class A { ... } // Error Code class B : A { ... } section{ font-size: 25px; }","title":"C# Static Class"},{"location":"week-7-csharp/ce103-week-7-csharp/#access-static-members-within-the-class","text":"If we are accessing the static variables and methods inside the same class, we can directly access them without using the class name. For example, using System ; namespace StaticKeyword { class Test { static int age = 25 ; public static void display () { Console . WriteLine ( \"Static method\" ); } static void Main ( string [] args ) { Console . WriteLine ( age ); display (); Console . ReadLine (); } } } section{ font-size: 25px; } Output 25 Static method Here, we are accessing the static field age and static method display() without using the class name. section{ font-size: 25px; }","title":"Access static Members within the Class"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-string","text":"In this tutorial, we will learn about C# string and its methods with the help of examples. In C#, a string is a sequence of characters. For example, \"hello\" is a string containing a sequence of characters 'h' , 'e' , 'l' , 'l' , and 'o' . section{ font-size: 25px; } We use the string keyword to create a string. For example, // create a string string str = \"C# Programming\" ; Here, we have created a string named str and assigned the text \"C# Programming\" . We use double quotes to represent strings in C#. section{ font-size: 25px; }","title":"C# String"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-create-string-in-c","text":"using System ; namespace CsharpString { class Test { public static void Main ( string [] args ) { // create string string str1 = \"C# Programming\" ; string str2 = \"Programiz\" ; // print string Console . WriteLine ( str1 ); Console . WriteLine ( str2 ); Console . ReadLine (); } } } section{ font-size: 25px; } Output C # Programming Programiz In the above example, we have created two strings named str1 and str2 and printed them. Note : A string variable in C# is not of primitive types like int , char , etc. Instead, it is an object of the String class. section{ font-size: 25px; }","title":"Example: Create string in C"},{"location":"week-7-csharp/ce103-week-7-csharp/#string-operations","text":"C# string provides various methods to perform different operations on strings. We will look into some of the commonly used string operations. section{ font-size: 25px; }","title":"String Operations"},{"location":"week-7-csharp/ce103-week-7-csharp/#1-get-the-length-of-a-string","text":"To find the length of a string, we use the Length property. For example, using System ; namespace CsharpString { class Test { public static void Main ( string [] args ) { // create string string str = \"C# Programming\" ; Console . WriteLine ( \"string: \" + str ); // get length of str int length = str . Length ; Console . WriteLine ( \"Length: \" + length ); Console . ReadLine (); } } } section{ font-size: 25px; } Output string: C# Programming Length: 14 In the above example, the Length property calculates the total number of characters in the string and returns it. section{ font-size: 25px; }","title":"1. Get the Length of a string"},{"location":"week-7-csharp/ce103-week-7-csharp/#2-join-two-strings-in-c","text":"We can join two strings in C# using the Concat() method. For example, using System ; namespace CsharpString { class Test { public static void Main ( string [] args ) { // create string string str1 = \"C# \" ; Console . WriteLine ( \"string str1: \" + str1 ); // create string string str2 = \"Programming\" ; Console . WriteLine ( \"string str2: \" + str2 ); // join two strings string joinedString = string . Concat ( str1 , str2 ); Console . WriteLine ( \"Joined string: \" + joinedString ); Console . ReadLine (); } } } section{ font-size: 25px; } Output string str1: C# string str2: Programming Joined string: C# Programming In the above example, we have created two strings named str1 and str2. Notice the statement, section{ font-size: 25px; } string joinedString = string . Concat ( str1 , str2 ); Here, the Concat() method joins str1 and str2 and assigns it to the joinedString variable. We can also join two strings using the + operator in C#. To learn more, visit C# string Concat . section{ font-size: 25px; }","title":"2. Join two strings in C"},{"location":"week-7-csharp/ce103-week-7-csharp/#3-c-compare-two-strings","text":"In C#, we can make comparisons between two strings using the Equals() method. The Equals() method checks if two strings are equal or not. For example, using System ; namespace CsharpString { class Test { public static void Main ( string [] args ) { // create string string str1 = \"C# Programming\" ; string str2 = \"C# Programming\" ; string str3 = \"Programiz\" ; // compare str1 and str2 Boolean result1 = str1 . Equals ( str2 ); Console . WriteLine ( \"string str1 and str2 are equal: \" + result1 ); //compare str1 and str3 Boolean result2 = str1 . Equals ( str3 ); Console . WriteLine ( \"string str1 and str3 are equal: \" + result2 ); Console . ReadLine (); } } } section{ font-size: 25px; } Output string str1 and str2 are equal: True string str1 and str3 are equal: False In the above example, we have created 3 strings named str1, str2, and str3. Here, we are using the Equals() method to check if one string is equal to another. section{ font-size: 25px; }","title":"3. C# compare two strings"},{"location":"week-7-csharp/ce103-week-7-csharp/#immutability-of-string-objects","text":"In C#, strings are immutable. This means, once we create a string, we cannot change that string. To understand it, consider an example: // create string string str = \"Hello \" ; Here, we have created a string variable named str. The variable holds the string \"Hello \" . section{ font-size: 25px; } Now suppose we want to change the string str. // add another string \"World\" // to the previous string example str = string . Concat ( str , \"World\" ); Here, we are using the Concat() method to add the string \"World\" to the previous string str. But how are we able to modify the string when they are immutable? section{ font-size: 25px; } Let's see what has happened here, C# takes the value of the string \"Hello \" . Creates a new string by adding \"World\" to the string \"Hello \" . Creates a new string object, gives it a value \"Hello World\" , and stores it in str. The original string, \"Hello \" , that was assigned to str is released for garbage collection because no other variable holds a reference to it. section{ font-size: 25px; }","title":"Immutability of String Objects"},{"location":"week-7-csharp/ce103-week-7-csharp/#string-escape-sequences","text":"The escape character is used to escape some of the characters present inside a string. In other words, we use escape sequences to insert special characters inside the string. Suppose we need to include double quotes inside a string. // include double quote string str = \"This is the \" String \" class\" ; section{ font-size: 25px; } Since strings are represented by double quotes, the compiler will treat \"This is the \" as the string. And the above code will cause an error. To solve this issue, we use the escape character \\\" in C#. For example, // use the escape character string str = \"This is the \\\"String\\\" class.\" ; Now by using \\ before double quote \" , we can include it in the string. section{ font-size: 25px; } Some of the escape sequences in C# are as follows: Escape Sequence Character Name \\' single quote \\\" double quote \\\\ backslash \\0 null \\n new line \\t horizontal tab section{ font-size: 25px; }","title":"String Escape Sequences"},{"location":"week-7-csharp/ce103-week-7-csharp/#string-interpolation","text":"In C#, we can use string interpolation to insert variables inside a string. For string interpolation, the string literal must begin with the $ character. For example, using System ; namespace CsharpString { class Test { public static void Main ( string [] args ) { // create string string name = \"Programiz\" ; // string interpolation string message = $\"Welcome to {name}\" ; Console . WriteLine ( message ); Console . ReadLine (); } } } section{ font-size: 25px; } Output Welcome to Programiz In the above example, we are using the name variable inside the message string. section{ font-size: 25px; } string message = $\"Welcome to {name}\" ; Notice that, the string literal starts with $ the name variable is placed inside the curly braces {} section{ font-size: 25px; }","title":"String interpolation"},{"location":"week-7-csharp/ce103-week-7-csharp/#methods-of-c-string","text":"There are various string methods in C#. Some of them are as follows: Methods Description Format() returns a formatted string Split() splits the string into substring Substring() returns substring of a string Compare() compares string objects Replace() replaces the specified old character with the specified new character Contains() checks whether the string contains a substring Join() joins the given strings using the specified separator Trim() removes any leading and trailing whitespaces EndsWith() checks if the string ends with the given string IndexOf() returns the position of the specified character in the string Remove() returns characters from a string ToUpper() converts the string to uppercase ToLower() converts the string to lowercase PadLeft() returns string padded with spaces or with a specified Unicode character on the left PadRight() returns string padded with spaces or with a specified Unicode character on the right StartsWith() checks if the string begins with the given string ToCharArray() converts the string to a char array LastIndexOf() returns index of the last occurrence of a specified string section{ font-size: 25px; }","title":"Methods of C# string"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-inheritance-oop-ii","text":"section{ font-size: 25px; }","title":"C# Inheritance  -  OOP (II)"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-inheritance","text":"In this tutorial, we will learn about C# inheritance and its types with the help of examples. In C#, inheritance allows us to create a new class from an existing class. It is a key feature of Object-Oriented Programming (OOP). The class from which a new class is created is known as the base class (parent or superclass). And, the new class is called derived class (child or subclass) The derived class inherits the fields and methods of the base class. This helps with the code reusability in C#. section{ font-size: 25px; }","title":"C# Inheritance"},{"location":"week-7-csharp/ce103-week-7-csharp/#how-to-perform-inheritance-in-c","text":"In C#, we use the : symbol to perform inheritance. For example, class Animal { // fields and methods } // Dog inherits from Animal class Dog : Animal { // fields and methods of Animal // fields and methods of Dog } Here, we are inheriting the derived class Dog from the base class Animal. The Dog class can now access the fields and methods of Animal class. section{ font-size: 25px; } C# Inheritance section{ font-size: 25px; }","title":"How to perform inheritance in C#?"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-c-inheritance","text":"using System ; namespace Inheritance { // base class class Animal { public string name ; public void display () { Console . WriteLine ( \"I am an animal\" ); } } // derived class of Animal class Dog : Animal { public void getName () { Console . WriteLine ( \"My name is \" + name ); } } class Program { static void Main ( string [] args ) { // object of derived class Dog labrador = new Dog (); // access field and method of base class labrador . name = \"Rohu\" ; labrador . display (); // access method from own class labrador . getName (); Console . ReadLine (); } } } section{ font-size: 25px; } Output I am an animal My name is Rohu In the above example, we have derived a subclass Dog from the superclass Animal. Notice the statements, section{ font-size: 25px; } labrador . name = \"Rohu\" ; labrador . getName (); Here, we are using labrador (object of Dog) to access the name and display() of the Animal class. This is possible because the derived class inherits all fields and methods of the base class. Also, we have accessed the name field inside the method of the Dog class. section{ font-size: 25px; }","title":"Example: C# Inheritance"},{"location":"week-7-csharp/ce103-week-7-csharp/#is-a-relationship","text":"In C#, inheritance is an is-a relationship. We use inheritance only if there is an is-a relationship between two classes. For example, Dog is an Animal Apple is a Fruit Car is a Vehicle We can derive Dog from Animal class. Similarly, Apple from Fruit class and Car from Vehicle class. section{ font-size: 25px; }","title":"is-a relationship"},{"location":"week-7-csharp/ce103-week-7-csharp/#protected-members-in-c-inheritance","text":"When we declare a field or method as protected , it can only be accessed from the same class and its derived classes. section{ font-size: 25px; }","title":"protected Members in C# Inheritance"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-protected-members-in-inheritance","text":"using System ; namespace Inheritance { // base class class Animal { protected void eat () { Console . WriteLine ( \"I can eat\" ); } } // derived class of Animal class Dog : Animal { static void Main ( string [] args ) { Dog labrador = new Dog (); // access protected method from base class labrador . eat (); Console . ReadLine (); } } } section{ font-size: 25px; } Output I can eat In the above example, we have created a class named Animal. The class includes a protected method eat(). section{ font-size: 25px; } We have derived the Dog class from the Animal class. Notice the statement, labrador . eat (); Since the protected method can be accessed from derived classes, we are able to access the eat() method from the Dog class. section{ font-size: 25px; }","title":"Example: protected Members in Inheritance"},{"location":"week-7-csharp/ce103-week-7-csharp/#types-of-inheritance","text":"There are the following types of inheritance: section{ font-size: 25px; }","title":"Types of inheritance"},{"location":"week-7-csharp/ce103-week-7-csharp/#1-single-inheritance","text":"In single inheritance, a single derived class inherits from a single base class. section{ font-size: 25px; }","title":"1. Single Inheritance"},{"location":"week-7-csharp/ce103-week-7-csharp/#2-multilevel-inheritance","text":"In multilevel inheritance, a derived class inherits from a base and then the same derived class acts as a base class for another class. section{ font-size: 25px; }","title":"2. Multilevel Inheritance"},{"location":"week-7-csharp/ce103-week-7-csharp/#3-hierarchical-inheritance","text":"In hierarchical inheritance, multiple derived classes inherit from a single base class. section{ font-size: 25px; }","title":"3. Hierarchical Inheritance"},{"location":"week-7-csharp/ce103-week-7-csharp/#4-multiple-inheritance","text":"In multiple inheritance, a single derived class inherits from multiple base classes. C# doesn't support multiple inheritance. However, we can achieve multiple inheritance through interfaces. section{ font-size: 25px; }","title":"4. Multiple Inheritance"},{"location":"week-7-csharp/ce103-week-7-csharp/#5-hybrid-inheritance","text":"Hybrid inheritance is a combination of two or more types of inheritance. The combination of multilevel and hierarchical inheritance is an example of Hybrid inheritance. section{ font-size: 25px; }","title":"5. Hybrid Inheritance"},{"location":"week-7-csharp/ce103-week-7-csharp/#method-overriding-in-c-inheritance","text":"If the same method is present in both the base class and the derived class, the method in the derived class overrides the method in the base class. This is called method overriding in C#. For example, using System ; namespace Inheritance { // base class class Animal { public virtual void eat () { Console . WriteLine ( \"I eat food\" ); } } // derived class of Animal class Dog : Animal { // overriding method from Animal public override void eat () { Console . WriteLine ( \"I eat Dog food\" ); } } class Program { static void Main ( string [] args ) { // object of derived class Dog labrador = new Dog (); // accesses overridden method labrador . eat (); } } } section{ font-size: 25px; } Output I eat Dog food In the above example, the eat() method is present in both the base class and derived class. section{ font-size: 25px; } When we call eat() using the Dog object labrador, labrador . eat (); the method inside Dog is called. This is because the method inside Dog overrides the same method inside Animal. section{ font-size: 25px; } Notice, we have used virtual and override with methods of the base class and derived class respectively. Here, virtual - allows the method to be overridden by the derived class override - indicates the method is overriding the method from the base class section{ font-size: 25px; }","title":"Method Overriding in C# Inheritance"},{"location":"week-7-csharp/ce103-week-7-csharp/#base-keyword-in-c-inheritance","text":"In the previous example, we saw that the method in the derived class overrides the method in the base class. However, what if we want to call the method of the base class as well? In that case, we use the base keyword to call the method of the base class from the derived class. section{ font-size: 25px; }","title":"base Keyword in C# Inheritance"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-base-keyword-in-c-inheritance","text":"using System ; namespace Inheritance { // base class class Animal { public virtual void eat () { Console . WriteLine ( \"Animals eat food.\" ); } } // derived class of Animal class Dog : Animal { // overriding method from Animal public override void eat () { // call method from Animal class base . eat (); Console . WriteLine ( \"Dogs eat Dog food.\" ); } } class Program { static void Main ( string [] args ) { Dog labrador = new Dog (); labrador . eat (); } } } section{ font-size: 25px; } Output Animals eat food. Dogs eat Dog food. In the above example, the eat() method is present in both the base class Animal and the derived class Dog. Notice the statement, base . eat (); Here, we have used the base keyword to access the method of Animal class from the Dog class. section{ font-size: 25px; }","title":"Example: base keyword in C# inheritance"},{"location":"week-7-csharp/ce103-week-7-csharp/#importance-of-inheritance-in-c","text":"To understand the importance of Inheritance, let's consider a situation. Suppose we are working with regular polygons such as squares, rectangles, and so on. And, we have to find the perimeter of these polygons based on the input. section{ font-size: 25px; } 1. Since the formula to calculate perimeter is common for all regular polygons, we can create a RegularPolygon class and a method calculatePerimeter() to calculate perimeter. class RegularPolygon { calculatePerimeter () { // code to compute perimeter } } section{ font-size: 25px; } 2. And inherit Square and Rectangle classes from the RegularPolygon class. Each of these classes will have properties to store the length and number of sides because they are different for all polygons. class Square : RegularPolygon { int length = 0 ; int sides = 0 ; } section{ font-size: 25px; } We pass the value of the length and sides to calculateperimeter() to compute the perimeter. This is how inheritance makes our code reusable and more intuitive. section{ font-size: 25px; }","title":"Importance of Inheritance in C"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-importance-of-inheritance","text":"using System ; namespace Inheritance { class RegularPolygon { public void calculatePerimeter ( int length , int sides ) { int result = length * sides ; Console . WriteLine ( \"Perimeter: \" + result ); } } class Square : RegularPolygon { public int length = 200 ; public int sides = 4 ; public void calculateArea () { int area = length * length ; Console . WriteLine ( \"Area of Square: \" + area ); } } class Rectangle : RegularPolygon { public int length = 100 ; public int breadth = 200 ; public int sides = 4 ; public void calculateArea () { int area = length * breadth ; Console . WriteLine ( \"Area of Rectangle: \" + area ); } } class Program { static void Main ( string [] args ) { Square s1 = new Square (); s1 . calculateArea (); s1 . calculatePerimeter ( s1 . length , s1 . sides ); Rectangle t1 = new Rectangle (); t1 . calculateArea (); t1 . calculatePerimeter ( t1 . length , t1 . sides ); } } } section{ font-size: 25px; } Output Area of Square: 40000 Perimeter: 800 Area of Rectangle: 20000 Perimeter: 400 In the above example, we have created a RegularPolygon class that has a method to calculate the perimeter of the regular polygon. section{ font-size: 25px; } Here, the Square and Rectangle inherit from RegularPolygon. The formula to calculate the perimeter is common for all, so we have reused the calculatePerimeter() method of the base class. And since the formula to calculate the area is different for different shapes, we have created a separate method inside the derived class to calculate the area. section{ font-size: 25px; }","title":"Example: Importance of Inheritance"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-abstract-class-and-method","text":"In this tutorial, we will learn about C# abstract class and method with the help of examples. section{ font-size: 25px; }","title":"C# abstract class and method"},{"location":"week-7-csharp/ce103-week-7-csharp/#abstract-class","text":"In C#, we cannot create objects of an abstract class. We use the abstract keyword to create an abstract class. For example, // create an abstract class abstract class Language { // fields and methods } ... // try to create an object Language // throws an error Language obj = new Language (); section{ font-size: 25px; } An abstract class can have both abstract methods (method without body) and non-abstract methods (method with the body). For example, abstract class Language { // abstract method public abstract void display1 (); // non-abstract method public void display2 () { Console . WriteLine ( \"Non abstract method\" ); } } Before moving forward, make sure to know about C# inheritance . section{ font-size: 25px; }","title":"Abstract Class"},{"location":"week-7-csharp/ce103-week-7-csharp/#inheriting-abstract-class","text":"As we cannot create objects of an abstract class, we must create a derived class from it. So that we can access members of the abstract class using the object of the derived class. For example, using System ; namespace AbstractClass { abstract class Language { // non-abstract method public void display () { Console . WriteLine ( \"Non abstract method\" ); } } // inheriting from abstract class class Program : Language { static void Main ( string [] args ) { // object of Program class Program obj = new Program (); // access method of an abstract class obj . display (); Console . ReadLine (); } } } section{ font-size: 25px; } Output Non abstract method In the above example, we have created an abstract class named Language. The class contains a non-abstract method display(). section{ font-size: 25px; } We have created the Program class that inherits the abstract class. Notice the statement, obj . display (); Here, obj is the object of the derived class Program. We are calling the method of the abstract class using the object obj. Note : We can use abstract class only as a base class. This is why abstract classes cannot be sealed. To know more, visit C# sealed class and method. section{ font-size: 25px; }","title":"Inheriting Abstract Class"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-abstract-method","text":"A method that does not have a body is known as an abstract method. We use the abstract keyword to create abstract methods. For example, public abstract void display (); Here, display() is an abstract method. An abstract method can only be present inside an abstract class. When a non-abstract class inherits an abstract class, it should provide an implementation of the abstract methods. section{ font-size: 25px; }","title":"C# Abstract Method"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-implementation-of-the-abstract-method","text":"using System ; namespace AbstractClass { abstract class Animal { // abstract method public abstract void makeSound (); } // inheriting from abstract class class Dog : Animal { // provide implementation of abstract method public override void makeSound () { Console . WriteLine ( \"Bark Bark\" ); } } class Program { static void Main ( string [] args ) { // create an object of Dog class Dog obj = new Dog (); obj . makeSound (); Console . ReadLine (); } } } section{ font-size: 25px; } Output Bark Bark In the above example, we have created an abstract class named Animal. We have an abstract method makeSound() inside the class. section{ font-size: 25px; } We have a Dog class that inherits from the Animal class. Dog class provides the implementation of the abstract method makeSound(). // provide implementation of abstract method public override void makeSound () { Console . WriteLine ( \"Bark Bark\" ); } section{ font-size: 25px; } Notice, we have used override with the makeSound() method. This indicates the method is overriding the method from the base class. We then used the object of the Dog class to access makeSound(). If the Dog class had not provided the implementation of the abstract method makeSound(), Dog class should have been marked abstract as well. Note : Unlike the C# inheritance, we cannot use virtual with the abstract methods of the base class. This is because an abstract class is implicitly virtual. section{ font-size: 25px; }","title":"Example: Implementation of the abstract method"},{"location":"week-7-csharp/ce103-week-7-csharp/#abstract-class-with-get-and-set-accessors","text":"We can mark get and set accessors as abstract. For example, using System ; namespace AbstractClass { abstract class Animal { protected string name ; // abstract method public abstract string Name { get ; set ; } } // inheriting from abstract class class Dog : Animal { // provide implementation of abstract method public override string Name { get { return name ;} set { name = value ; } } } class Program { static void Main ( string [] args ) { // create an object of Dog class Dog obj = new Dog (); obj . Name = \"Tom\" ; Console . WriteLine ( \"Name: \" + obj . Name ); Console . ReadLine (); } } } section{ font-size: 25px; } Output Name: Tom In the above example, we have marked the get and set accessor as abstract. section{ font-size: 25px; } obj . Name = \"Tom\" ; Console . WriteLine ( \"Name: \" + obj . Name ); We are setting and getting the value of the name field of the abstract class Animal using the object of the derived class Dog. section{ font-size: 25px; }","title":"Abstract class with get and set accessors"},{"location":"week-7-csharp/ce103-week-7-csharp/#access-constructor-of-abstract-classes","text":"An abstract class can have constructors as well. For example, using System ; namespace AbstractClass { abstract class Animal { public Animal () { Console . WriteLine ( \"Animal Constructor\" ); } } class Dog : Animal { public Dog () { Console . WriteLine ( \"Dog Constructor\" ); } } class Program { static void Main ( string [] args ) { // create an object of Dog class Dog d1 = new Dog (); Console . ReadLine (); } } } section{ font-size: 25px; } Output Animal Constructor Dog Constructor In the above example, we have created a constructor inside the abstract class Animal. Dog d1 = new Dog () ; Here, when we create an object of the derived class Dog the constructor of the abstract class Animal gets called as well. Note : We can also use destructors inside the abstract class. section{ font-size: 25px; }","title":"Access Constructor of Abstract Classes"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-abstraction","text":"The abstract classes are used to achieve abstraction in C#. Abstraction is one of the important concepts of object-oriented programming. It allows us to hide unnecessary details and only show the needed information. This helps us to manage complexity by hiding details with a simpler, higher-level idea. A practical example of abstraction can be motorbike brakes. We know what a brake does. When we apply the brake, the motorbike will stop. However, the working of the brake is kept hidden from us. The major advantage of hiding the working of the brake is that now the manufacturer can implement brakes differently for different motorbikes. However, what brake does will be the same. section{ font-size: 25px; }","title":"C# Abstraction"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-c-abstraction","text":"using System ; namespace AbstractClass { abstract class MotorBike { public abstract void brake (); } class SportsBike : MotorBike { // provide implementation of abstract method public override void brake () { Console . WriteLine ( \"Sports Bike Brake\" ); } } class MountainBike : MotorBike { // provide implementation of abstract method public override void brake () { Console . WriteLine ( \"Mountain Bike Brake\" ); } } class Program { static void Main ( string [] args ) { // create an object of SportsBike class SportsBike s1 = new SportsBike (); s1 . brake (); // create an object of MountainBike class MountainBike m1 = new MountainBike (); m1 . brake (); Console . ReadLine (); } } } section{ font-size: 25px; } Output Sports Bike Brake Mountain Bike Brake In the above example, we have created an abstract class MotorBike. It has an abstract method brake(). section{ font-size: 25px; } As brake() is an abstract method the implementation of brake() in MotorBike is kept hidden. Every motorbike has a different implementation of the brake. This is why SportsBike makes its own implementation of brake() and MountainBike makes its own implementation of brake(). Note : We use interfaces to achieve complete abstraction in C#. To learn more, visit C# Interface . section{ font-size: 25px; }","title":"Example: C# Abstraction"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-nested-class","text":"In this tutorial, you will learn about the nested class in C# with the help of examples. In C#, we can define a class within another class. It is known as a nested class. section{ font-size: 25px; } For example, class OuterClass { ... class InnerClass { ... } } Here, we have created the class InnerClass inside the class OuterClass . The InnerClass is called the nested class. section{ font-size: 25px; }","title":"C# Nested Class"},{"location":"week-7-csharp/ce103-week-7-csharp/#access-members","text":"To access members of the nested classes we first need to create their objects. section{ font-size: 25px; } 1.Create object of Outer class OuterClass obj1 = new OuterClass (); Here, we have created the obj1 object of the class OuterClass . section{ font-size: 25px; } 2. Create object of Inner Class OuterClass . InnerClass obj2 = new OuterClass . InnerClass (); You can see that we have used OuterClass.InnerClass to create the obj2 object of the inner class. This is because InnerClass is the nested class of OuterClass . section{ font-size: 25px; } Once we have created the object of individual classes, we can use the object name and dot operator to access members of each class. section{ font-size: 25px; }","title":"Access Members"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-c-nested-class","text":"using System ; namespace CsharpNestedClass { // outer class public class Car { public void displayCar () { Console . WriteLine ( \"Car: Bugatti\" ); } // inner class public class Engine { public void displayEngine () { Console . WriteLine ( \"Engine: Petrol Engine\" ); } } } class Program { static void Main ( string [] args ) { // create object of outer class Car sportsCar = new Car (); // access method of outer class sportsCar . displayCar (); // create object of inner class Car . Engine petrolEngine = new Car . Engine (); // access member of inner class petrolEngine . displayEngine (); Console . ReadLine (); } } } section{ font-size: 25px; } Output Car: Bugatti Engine: Petrol Engine In the above program, we have nested the Engine class inside the Car class. section{ font-size: 25px; } Inside the Program class, we have created objects of both the outer class and the inner class. // object of outer class Car sportsCar = new Car (); // object of nested class Car . Engine petrolEngine = new Car . Engine (); section{ font-size: 25px; } We then used these objects to access methods of each class. sportsCar.displayCar() - access outer class method using the object of Car petrolEngine.displayEngine() - access inner class method using the object of Engine section{ font-size: 25px; } Note : We cannot access the members of the inner class using the object of the outer class. For example, // error code sportsCar . displayEngine (); Here, we cannot access the displayEngine() method of the inner class Engine using the sportsCar object of the outer class. section{ font-size: 25px; }","title":"Example: C# Nested Class"},{"location":"week-7-csharp/ce103-week-7-csharp/#access-outer-class-members-inside-inner-class","text":"We can access members of the outer class inside the inner class. For this we use an object of the outer class. For example, using System ; namespace CsharpNestedClass { // outer class public class Car { public string brand = \"Bugatti\" ; // nested class public class Engine { public void displayCar () { // object of outer class Car sportsCar = new Car (); Console . WriteLine ( \"Brand: \" + sportsCar . brand ); } } } class Program { static void Main ( string [] args ) { // object of inner class Car . Engine engineObj = new Car . Engine (); engineObj . displayCar (); Console . ReadLine (); } } } section{ font-size: 25px; } Output Brand: Bugatti In the above example, we have nested the Engine class inside the Car class. Notice the line, section{ font-size: 25px; } // inside Engine class Car sportsCar = new Car (); Console . WriteLine ( \"Brand: \" + sportsCar . brand ); Here, we have used the object of the class Car to access field brand. section{ font-size: 25px; }","title":"Access Outer Class Members Inside Inner Class"},{"location":"week-7-csharp/ce103-week-7-csharp/#access-static-members-of-outer-class-inside-inner-class","text":"If we need to access static members of the outer class, we don't need to create its object. Instead, we can directly use the name of the outer class. For example, using System ; namespace CsharpNestedClass { // outer class public class Car { //static member of outer class public static string brand = \"Bugatti\" ; // nested class public class Engine { public void display () { // access static member of outer class Console . WriteLine ( \"Brand: \" + Car . brand ); } } } class Program { static void Main ( string [] args ) { // object of inner class Car . Engine obj = new Car . Engine (); obj . display (); Console . ReadLine (); } } } section{ font-size: 25px; } Output Brand: Bugatti In the above example, we have nested the Engine class inside the Car class. Car has a static field brand. section{ font-size: 25px; } Here, we have accessed the static field brand inside the inner class ( Engine ) using the name of the outer class ( Car ). Console . WriteLine ( \"Brand: \" + Car . brand ); section{ font-size: 25px; }","title":"Access static Members of Outer Class Inside Inner Class"},{"location":"week-7-csharp/ce103-week-7-csharp/#inheriting-outer-class","text":"Like a regular class, we can also inherit the outer class. For example, using System ; namespace CsharpNestedClass { // outer class class Computer { public void display () { Console . WriteLine ( \"Method of Computer class\" ); } // nested class public class CPU { } } class Laptop : Computer { } class Program { static void Main ( string [] args ) { // object of derived class Laptop obj = new Laptop (); obj . display (); Console . ReadLine (); } } } section{ font-size: 25px; } Output Method of Computer class In the above example, we have derived the class Laptop from the outer class Computer . Because of this we are able to access the display() method of class Computer using the object of the class Laptop . section{ font-size: 25px; }","title":"Inheriting Outer Class"},{"location":"week-7-csharp/ce103-week-7-csharp/#inheriting-inner-class","text":"In C#, we can inherit the inner class as well. For example, using System ; namespace CsharpNestedClass { // outer class class Computer { // nested class public class CPU { public void display () { Console . WriteLine ( \"Method of CPU class\" ); } } } // inheriting inner class class Laptop : Computer . CPU { } class Program { static void Main ( string [] args ) { // object of derived class Laptop obj = new Laptop (); obj . display (); Console . ReadLine (); } } } section{ font-size: 25px; } Output Method of CPU class In the above example, we have derived the Laptop class from the inner class CPU . section{ font-size: 25px; } Notice that we have used the name of the outer class along with the nested class to inherit the inner class. class Laptop : Computer . CPU {} section{ font-size: 25px; }","title":"Inheriting inner class"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-partial-class-and-partial-method","text":"In this article we are going to learn about how and why partial class and partial methods be implemented in C# . There are many situations when you might need to split a class definition, such as when working on a large scale projects, multiple developers and programmers might need to work on the same class at the same time. In this case we can use a feature called Partial Class . section{ font-size: 25px; }","title":"C# Partial Class and Partial Method"},{"location":"week-7-csharp/ce103-week-7-csharp/#introduction-to-partial-class","text":"While programming in C# (or OOP), we can split the definition of a class over two or more source files. The source files contains a section of the definition of class, and all parts are combined when the application is compiled. For splitting a class definition, we need to use the partial keyword. section{ font-size: 25px; }","title":"Introduction to Partial Class"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-1","text":"We have a project named as HeightWeightInfo which shows height and weight. We have a file named as File1.cs with a partial class named as Record. It has two integer variables h & w and a method/constructor named as Record which is assigning the values of h & w. section{ font-size: 25px; } namespace HeightWeightInfo { class File1 { } public partial class Record { private int h ; private int w ; public Record ( int h , int w ) { this . h = h ; this . w = w ; } } } Here is another file named as File2.cs with the same partial class Record which has only the method PrintRecord. This method will display the values of h & w. section{ font-size: 25px; } namespace HeightWeightInfo { class File2 { } public partial class Record { public void PrintRecord () { Console . WriteLine ( \"Height:\" + h ); Console . WriteLine ( \"Weight:\" + w ); } } } section{ font-size: 25px; } Here now we can see the main method of the project: namespace HeightWeightInfo { class Program { static void Main ( string [] args ) { Record myRecord = new Record ( 10 , 15 ); myRecord . PrintRecord (); Console . ReadLine (); } } } section{ font-size: 25px; } Here we have the object of the class Record as myRecord which is passing the parameter values as 10 and 15 to h and w respectively to the method defined in File1.cs . The method PrintRecord is called by the object myRecord which is defined in the File2.cs . This shows that the partial keyword helps to combine all the attributes of a class defined in various files to work as a single class. section{ font-size: 25px; } Places where partial class can be used: While working on a larger projects with more than one developer, it helps the developers to work on the same class simultaneously. Codes can be added or modified to the class without re-creating source files which are automatically generated by the IDE (i.e. Visual Studio). section{ font-size: 25px; }","title":"Example 1:"},{"location":"week-7-csharp/ce103-week-7-csharp/#things-to-remember-about-partial-class","text":"The partial keyword specify that other parts of the class can be defined in the namespace. It is mandatory to use the partial keyword if we are trying to make a class partial. All the parts of the class should be in the same namespace and available at compile time to form the final type. All the parts must have same access modifier i.e. private, public, or so on. section{ font-size: 25px; } If any part is declared abstract, then the whole type is considered abstract. If any part is declared sealed, then the whole type is considered sealed. If any part declares a base type, then the whole type inherits that class. Any class member declared in a partial definition are available to all other parts. All parts of a partial class should be in the same namespace. ****Note:** The partial modifier is not available on delegate or enumeration declarations section{ font-size: 25px; }","title":"Things to Remember about Partial Class"},{"location":"week-7-csharp/ce103-week-7-csharp/#introduction-to-partial-methods","text":"A partial class may contain a partial method. One part of the class contains the signature of the method. An optional implementation may be defined in the same part or another part. If the implementation is not supplied, then the method and all calls are removed at compile time. section{ font-size: 25px; }","title":"Introduction to Partial Methods"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-2","text":"Let's take an example as a partial class Car defined in file1.cs which has three methods InitializeCar(), BuildRim() and BuildWheels(). Among those methods, InitializeCar is defined as partial . section{ font-size: 25px; } public partial class Car { partial void InitializeCar (); public void BuildRim () { } public void BuildWheels () { } } section{ font-size: 25px; } And we have another file named as file2.cs which has two methods BuildEngine and InitializeCar. The method InitializeCar is partial method which is also defined in file1.cs . section{ font-size: 25px; } public partial class Car { public void BuildEngine () { } partial void InitializeCar () { string str = \"Car\" ; } } section{ font-size: 25px; } A partial method declaration consists of two parts: The definition as in file1.cs . The implementation as in file2.cs . They may be in separate parts of the partial class, or in the same part. section{ font-size: 25px; }","title":"Example 2:"},{"location":"week-7-csharp/ce103-week-7-csharp/#things-to-remember-about-partial-method","text":"partial keyword. return type void . implicitly private . and cannot be virtual . section{ font-size: 25px; }","title":"Things to remember about Partial Method"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-sealed-class-and-method","text":"In this tutorial, we will learn about the sealed class and method in C# with the help of examples. section{ font-size: 25px; }","title":"C# sealed class and method"},{"location":"week-7-csharp/ce103-week-7-csharp/#sealed-class","text":"In C#, when we don't want a class to be inherited by another class, we can declare the class as a sealed class . A sealed class cannot have a derived class. We use the sealed keyword to create a sealed class. section{ font-size: 25px; } For example, using System ; namespace SealedClass { sealed class Animal { } // trying to inherit sealed class // Error Code class Dog : Animal { } class Program { static void Main ( string [] args ) { // create an object of Dog class Dog d1 = new Dog (); Console . ReadLine (); } } } section{ font-size: 25px; } In the above example, we have created a sealed class Animal. Here, we are trying to derive Dog class from the Animal class. section{ font-size: 25px; } Since a sealed class cannot be inherited, the program generates the following error: error CS0509: 'Dog' : cannot derive from sealed type 'Animal' section{ font-size: 25px; }","title":"Sealed Class"},{"location":"week-7-csharp/ce103-week-7-csharp/#sealed-method","text":"During method overriding, if we don't want an overridden method to be further overridden by another class, we can declare it as a sealed method . We use a sealed keyword with an overridden method to create a sealed method. section{ font-size: 25px; } For example, using System ; namespace SealedClass { class Animal { public virtual void makeSound () { Console . WriteLine ( \"Animal Sound\" ); } } class Dog : Animal { // sealed method sealed public override void makeSound () { Console . WriteLine ( \"Dog Sound\" ); } } class Puppy : Dog { // trying to override sealed method public override void makeSound () { Console . WriteLine ( \"Puppy Sound\" ); } } class Program { static void Main ( string [] args ) { // create an object of Puppy class Puppy d1 = new Puppy (); Console . ReadLine (); } } } section{ font-size: 25px; } In the above example, we have overridden the makeSound() method inside the Dog class. section{ font-size: 25px; } // Inside the Dog class sealed public override void makeSound () { Console . WriteLine ( \"Dog Sound\" ); } Notice that we have used the sealed keyword with makeSound(). This means the Puppy class that inherits the Dog class is not allowed to override makeSound(). section{ font-size: 25px; } Hence, we get an error error CS0239: 'Puppy.makeSound()' : cannot override inherited member 'Dog.makeSound()' because it is sealed when we try to further override the makeSound() method inside the Puppy class. Note : Sealing an overridden method prevents method overriding in multilevel inheritance. section{ font-size: 25px; }","title":"Sealed Method"},{"location":"week-7-csharp/ce103-week-7-csharp/#why-sealed-class","text":"We use sealed classes to prevent inheritance. As we cannot inherit from a sealed class, the methods in the sealed class cannot be manipulated from other classes. It helps to prevent security issues. section{ font-size: 25px; } For example, sealed class A { ... } // error code class B : A { ... } section{ font-size: 25px; } As class A cannot be inherited, class B cannot override and manipulate the methods of class A. section{ font-size: 25px; } One of the best uses of sealed classes is when you have a class with static members. The Pens class of the System.Drawing namespace is one of the examples of the sealed class. The Pens class has static members that represent the pens with standard colors. Pens.Blue represents a pen with blue color. section{ font-size: 25px; }","title":"Why Sealed Class?"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-interface","text":"In this tutorial, we will learn about the C# interface with the help of examples. In C#, an interface is similar to abstract class. However, unlike abstract classes, all methods of an interface are fully abstract (method without body). We use the interface keyword to create an interface. section{ font-size: 25px; } For example, interface IPolygon { // method without body void calculateArea (); } section{ font-size: 25px; } Here, IPolygon is the name of the interface. By convention, interface starts with I so that we can identify it just by seeing its name. We cannot use access modifiers inside an interface. All members of an interface are public by default. An interface doesn't allow fields. section{ font-size: 25px; }","title":"C# interface"},{"location":"week-7-csharp/ce103-week-7-csharp/#implementing-an-interface","text":"We cannot create objects of an interface. To use an interface, other classes must implement it. Same as in C# Inheritance , we use : symbol to implement an interface. section{ font-size: 25px; } For example, using System ; namespace CsharpInterface { interface IPolygon { // method without body void calculateArea ( int l , int b ); } class Rectangle : IPolygon { // implementation of methods inside interface public void calculateArea ( int l , int b ) { int area = l * b ; Console . WriteLine ( \"Area of Rectangle: \" + area ); } } class Program { static void Main ( string [] args ) { Rectangle r1 = new Rectangle (); r1 . calculateArea ( 100 , 200 ); } } } section{ font-size: 25px; } Output Area of Rectangle: 20000 section{ font-size: 25px; } In the above example, we have created an interface named IPolygon. The interface contains a method calculateArea(int a, int b) without implementation. Here, the Rectangle class implements IPolygon. And, provides the implementation of the calculateArea(int a, int b) method. Note : We must provide the implementation of all the methods of interface inside the class that implements it. section{ font-size: 25px; }","title":"Implementing an Interface"},{"location":"week-7-csharp/ce103-week-7-csharp/#implementing-multiple-interfaces","text":"Unlike inheritance, a class can implement multiple interfaces. For example, using System ; namespace CsharpInterface { interface IPolygon { // method without body void calculateArea ( int a , int b ); } interface IColor { void getColor (); } // implements two interface class Rectangle : IPolygon , IColor { // implementation of IPolygon interface public void calculateArea ( int a , int b ) { int area = a * b ; Console . WriteLine ( \"Area of Rectangle: \" + area ); } // implementation of IColor interface public void getColor () { Console . WriteLine ( \"Red Rectangle\" ); } } class Program { static void Main ( string [] args ) { Rectangle r1 = new Rectangle (); r1 . calculateArea ( 100 , 200 ); r1 . getColor (); } } } section{ font-size: 25px; } Output Area of Rectangle: 20000 Red Rectangle In the above example, we have two interfaces, IPolygon and IColor. section{ font-size: 25px; } class Rectangle : IPolygon , IColor { ... } We have implemented both interfaces in the Rectangle class separated by , . Now, Rectangle has to implement the method of both interfaces. section{ font-size: 25px; }","title":"Implementing Multiple Interfaces"},{"location":"week-7-csharp/ce103-week-7-csharp/#using-reference-variable-of-an-interface","text":"We can use the reference variable of an interface. For example, using System ; namespace CsharpInterface { interface IPolygon { // method without body void calculateArea ( int l , int b ); } class Rectangle : IPolygon { // implementation of methods inside interface public void calculateArea ( int l , int b ) { int area = l * b ; Console . WriteLine ( \"Area of Rectangle: \" + area ); } } class Program { static void Main ( string [] args ) { // using reference variable of interface IPolygon r1 = new Rectangle (); r1 . calculateArea ( 100 , 200 ); } } } section{ font-size: 25px; } Output Area of Rectangle: 20000 In the above example, we have created an interface named IPolygon. The interface contains a method calculateArea(int l, int b) without implementation. section{ font-size: 25px; } IPolygon r1 = new Rectangle (); Notice, we have used the reference variable of interface IPolygon. It points to the class Rectangle that implements it. Though we cannot create objects of an interface, we can still use the reference variable of the interface that points to its implemented class. section{ font-size: 25px; }","title":"Using reference variable of an interface"},{"location":"week-7-csharp/ce103-week-7-csharp/#practical-example-of-interface","text":"Let's see a more practical example of C# Interface. using System ; namespace CsharpInterface { interface IPolygon { // method without body void calculateArea (); } // implements interface class Rectangle : IPolygon { // implementation of IPolygon interface public void calculateArea () { int l = 30 ; int b = 90 ; int area = l * b ; Console . WriteLine ( \"Area of Rectangle: \" + area ); } } class Square : IPolygon { // implementation of IPolygon interface public void calculateArea () { int l = 30 ; int area = l * l ; Console . WriteLine ( \"Area of Square: \" + area ); } } class Program { static void Main ( string [] args ) { Rectangle r1 = new Rectangle (); r1 . calculateArea (); Square s1 = new Square (); s1 . calculateArea (); } } } section{ font-size: 25px; } Output Area of Rectangle: 2700 Area of Square: 900 In the above program, we have created an interface named IPolygon. It has an abstract method calculateArea() . section{ font-size: 25px; } We have two classes Square and Rectangle that implement the IPolygon interface. The rule for calculating the area is different for each polygon. Hence, calculateArea() is included without implementation. Any class that implements IPolygon must provide an implementation of calculateArea() . Hence, implementation of the method in class Rectangle is independent of the method in class Square. section{ font-size: 25px; }","title":"Practical Example of Interface"},{"location":"week-7-csharp/ce103-week-7-csharp/#advantages-of-c-interface","text":"Now that we know what interfaces are, let's learn about why interfaces are used in C#. section{ font-size: 25px; } Similar to abstract classes, interfaces help us to achieve abstraction in C# . Here, the method calculateArea() inside the interface, does not have a body. Thus, it hides the implementation details of the method. section{ font-size: 25px; } Interfaces provide specifications that a class (which implements it) must follow. In our previous example, we have used calculateArea() as a specification inside the interface IPolygon. This is like setting a rule that we should calculate the area of every polygon. Now any class that implements the IPolygon interface must provide an implementation for the calculateArea() method. section{ font-size: 25px; } Interfaces are used to achieve multiple inheritance in C#. section{ font-size: 25px; } Interfaces provide loose coupling (having no or least effect on other parts of code when we change one part of a code). In our previous example, if we change the implementation of calculateArea() in the Square class it does not affect the Rectangle class. section{ font-size: 25px; }","title":"Advantages of C# interface"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-method-overloading","text":"In this article, you\u2019ll learn about method overloading in C# with the help of examples. In C#, there might be two or more methods in a class with the same name but different numbers, types, and order of parameters, it is called method overloading. section{ font-size: 25px; } For example: void display () { ... } void display ( int a ) { ... } float display ( double a ) { ... } float display ( int a , float b ) { ... } Here, the display() method is overloaded. These methods have the same name but accept different arguments. section{ font-size: 25px; } Note : The return types of the above methods are not the same. It is because method overloading is not associated with return types. Overloaded methods may have the same or different return types, but they must have different parameters. section{ font-size: 25px; } We can perform method overloading in the following ways: section{ font-size: 25px; }","title":"C# Method Overloading"},{"location":"week-7-csharp/ce103-week-7-csharp/#1-by-changing-the-number-of-parameters","text":"We can overload the method if the number of parameters in the methods is different. void display ( int a ) { ... } ... void display ( int a , int b ) { ... } section{ font-size: 25px; } Here, we have two methods in a class with the same name - display(). It is possible to have more than one method with the same name because the number of parameters in methods is different. section{ font-size: 25px; } For example, using System ; namespace MethodOverload { class Program { // method with one parameter void display ( int a ) { Console . WriteLine ( \"Arguments: \" + a ); } // method with two parameters void display ( int a , int b ) { Console . WriteLine ( \"Arguments: \" + a + \" and \" + b ); } static void Main ( string [] args ) { Program p1 = new Program (); p1 . display ( 100 ); p1 . display ( 100 , 200 ); Console . ReadLine (); } } } section{ font-size: 25px; } Output Arguments: 100 Arguments: 100 and 200 section{ font-size: 25px; } In the above example, we have overloaded the display() method: one method has one parameter another has two parameter Based on the number of the argument passed during the method call, the corresponding method is called. p1.display(100) - calls the method with single parameter p1.display(100, 200) - calls the method with two parameters section{ font-size: 25px; }","title":"1. By changing the Number of Parameters"},{"location":"week-7-csharp/ce103-week-7-csharp/#2-by-changing-the-data-types-of-the-parameters","text":"void display ( int a ) { ... } ... void display ( string b ) { ... } Here, we have two methods - display() with the same number of parameters. It is possible to have more than one display() method with the same number of parameters because the data type of parameters in methods is different. section{ font-size: 25px; } For example, using System ; namespace MethodOverload { class Program { // method with int parameter void display ( int a ) { Console . WriteLine ( \"int type: \" + a ); } // method with string parameter void display ( string b ) { Console . WriteLine ( \"string type: \" + b ); } static void Main ( string [] args ) { Program p1 = new Program (); p1 . display ( 100 ); p1 . display ( \"Programiz\" ); Console . ReadLine (); } } } section{ font-size: 25px; } Output int type: 100 string type: Programiz In the above program, we have overloaded the display() method with different types of parameters. section{ font-size: 25px; } Based on the type of arguments passed during the method call, the corresponding method is called. p1.display(100) - calls method with int type parameter p1.display(\"Programiz\") - calls method with string type parameter section{ font-size: 25px; }","title":"2. By changing the Data types of the parameters"},{"location":"week-7-csharp/ce103-week-7-csharp/#3-by-changing-the-order-of-the-parameters","text":"void display ( int a , string b ) { ... } ... void display ( string b , int a ) { ... } Here, we have two methods - display(). It is possible to have more than one display() method with the same number and type of parameter because the order of data type of parameters in methods is different. section{ font-size: 25px; } For example, using System ; namespace MethodOverload { class Program { // method with int and string parameters void display ( int a , string b ) { Console . WriteLine ( \"int: \" + a ); Console . WriteLine ( \"string: \" + b ); } // method with string andint parameter void display ( string b , int a ) { Console . WriteLine ( \"string: \" + b ); Console . WriteLine ( \"int: \" + a ); } static void Main ( string [] args ) { Program p1 = new Program (); p1 . display ( 100 , \"Programming\" ); p1 . display ( \"Programiz\" , 400 ); Console . ReadLine (); } } } section{ font-size: 25px; } Output int: 100 string: Programming string: Programiz int: 400 In the above program, we have overloaded the display() method with different orders of parameters. section{ font-size: 25px; } Based on the order of arguments passed during the method call, the corresponding method is called. p1.display(100, \"Programming\") - calls method with int and string parameter respectively p1.display(\"Programiz\", 400) - calls method with string and int parameter respectively section{ font-size: 25px; }","title":"3. By changing the Order of the parameters"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-constructor-overloading_1","text":"In this article, you\u2019ll learn about constructor overloading in C# with the help of examples. In C#, similar to method overloading , we can also overload constructors. For constructor overloading, there must be two or more constructors with the same name but different number of parameters types of parameters order of parameters Before you learn about constructor overloading, make sure to know about C# constructors . section{ font-size: 25px; } We can perform constructor overloading in the following ways: section{ font-size: 25px; }","title":"C# Constructor Overloading"},{"location":"week-7-csharp/ce103-week-7-csharp/#1-different-number-of-parameters","text":"We can overload the constructor if the number of parameters in a constructor are different. class Car { Car () { ... } Car ( string brand ) { ... } Car ( string brand , int price ) { ... } } Here, we have three constructors in class Car. It is possible to have more than one constructor because the number of parameters in constructors is different. section{ font-size: 25px; } Notice that, Car() { } - has no parameter Car(string brand) { } - has one parameter Car(string brand, int price) { } - has two parameters section{ font-size: 25px; }","title":"1. Different number of parameters"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-constructor-overloading-with-different-number-of-parameter","text":"using System ; namespace ConstructorOverload { class Car { // constructor with no parameter Car () { Console . WriteLine ( \"Car constructor\" ); } // constructor with one parameter Car ( string brand ) { Console . WriteLine ( \"Car constructor with one parameter\" ); Console . WriteLine ( \"Brand: \" + brand ); } static void Main ( string [] args ) { // call with no parameter Car car = new Car (); Console . WriteLine (); // call with one parameter Car car2 = new Car ( \"Bugatti\" ); Console . ReadLine (); } } } section{ font-size: 25px; } Output Car constructor Car constructor with one parameter Brand: Bugatti section{ font-size: 25px; } In the above example, we have overloaded the Car constructor: one constructor has one parameter another has two parameter Based on the number of the argument passed during the constructor call, the corresponding constructor is called. section{ font-size: 25px; } Here, Object car - calls constructor with one parameter Object car2 - calls constructor with two parameter section{ font-size: 25px; }","title":"Example: Constructor Overloading with different number of parameter"},{"location":"week-7-csharp/ce103-week-7-csharp/#2-different-types-of-parameters","text":"class Car { Car ( string brand ) { ... } Car ( int price ) { ... } } section{ font-size: 25px; } Here, we have two Car constructors with the same number of parameters. We are able to create constructors with the same parameters because the data type inside the parameters is different. Notice that, Car(string brand) { } - has parameter of string type Car(int price) { } - has parameter of int type section{ font-size: 25px; }","title":"2. Different types of parameters"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-constructor-overloading-with-different-types-of-parameters","text":"using System ; namespace ConstructorOverload { class Car { // constructor with string parameter Car ( string brand ) { Console . WriteLine ( \"Brand: \" + brand ); } // constructor with int parameter Car ( int price ) { Console . WriteLine ( \"Price: \" + price ); } static void Main ( string [] args ) { // call constructor with string parameter Car car = new Car ( \"Lamborghini\" ); Console . WriteLine (); // call constructor with int parameter Car car2 = new Car ( 50000 ); Console . ReadLine (); } } } section{ font-size: 25px; } Output Brand: Lamborghini Price: 50000 In the above program, we have overloaded the constructor with different types of parameters. section{ font-size: 25px; } Here, Object car - calls constructor with string type parameter Object car2 - calls constructor with int type parameter section{ font-size: 25px; }","title":"Example: Constructor overloading with different types of parameters"},{"location":"week-7-csharp/ce103-week-7-csharp/#3-different-order-of-parameters","text":"Car { Car ( string brand , int price ) { ... } Car ( int speed , string color ) { ... } } section{ font-size: 25px; } Here, we have two constructors with the same number of parameters. This is possible because the order of data type in parameters is different. Notice that, Car(string brand, int price) { } - string data type comes before int Car(int speed, string color) { } - int data type comes before string section{ font-size: 25px; }","title":"3. Different order of parameters"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-constructor-overloading-with-different-order-of-parameters","text":"using System ; namespace ConstructorOverload { class Car { // constructor with string and int parameter Car ( string brand , int price ) { Console . WriteLine ( \"Brand: \" + brand ); Console . WriteLine ( \"Price: \" + price ); } // constructor with int and string parameter Car ( int speed , string color ) { Console . WriteLine ( \"Speed: \" + speed + \" km/hr\" ); Console . WriteLine ( \"Color: \" + color ); } static void Main ( string [] args ) { // call constructor with string and int parameter Car car = new Car ( \"Bugatti\" , 50000 ); Console . WriteLine (); // call constructor with int and string parameter Car car2 = new Car ( 60 , \"Red\" ); Console . ReadLine (); } } } section{ font-size: 25px; } Output Brand: Bugatti Price: 50000 Speed: 60 km/hr Color: Red In the above program, we have overloaded the constructors with different orders of parameters. section{ font-size: 25px; } Here, Object car - calls constructor with string and int parameter respectively Object car2 - calls constructor with int and string parameter respectively section{ font-size: 25px; }","title":"Example: Constructor overloading with different order of parameters"},{"location":"week-7-csharp/ce103-week-7-csharp/#additional-topics","text":"section{ font-size: 25px; }","title":"Additional Topics"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-using","text":"In this tutorial, we will learn about C# using and using static to import external resources in a program with the help of examples. In C#, we use the using keyword to import external resources (namespaces, classes, etc) inside a program. section{ font-size: 25px; } For example, // using System namespace using System ; namespace Program { class Program1 { static void Main ( string [] args ) { Console . WriteLine ( \"Hello World!\" ); } } } section{ font-size: 25px; } Output Hello World! In the above example, notice the line section{ font-size: 25px; } using System ; Here, we are importing the System namespace inside our program. This helps us to directly use the classes present in the System namespace. Also, because of this, we don't have to write the fully qualified name of the print statement. // full print statement System . Console . WriteLine ( \"Hello World!\" ); // print statement with using System; Console . WriteLine ( \"Hello World!\" ); To learn more about the namespace, visit C# namespaces . section{ font-size: 25px; }","title":"C# using"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-using-to-create-an-alias","text":"We can also create aliases with the help of using in C#. For example, // creating alias for System.Console using Programiz = System . Console ; namespace HelloWorld { class Program { static void Main ( string [] args ) { // using Programiz alias instead of System.Console Programiz . WriteLine ( \"Hello World!\" ); } } } section{ font-size: 25px; } Output Hello World! In the above program, we have created an alias for System.Console . section{ font-size: 25px; } using Programiz = System . Console ; This allows us to use the alias Programiz instead of System.Console . Programiz . WriteLine ( \"Hello World!\" ); Here, Programiz will work just like System.Console . section{ font-size: 25px; }","title":"C# using to create an alias"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-using-static-directive","text":"In C#, we can also import classes in our program. Once we import these classes, we can use the static members (fields, methods) of the class. We use the using static directive to import classes in our program. section{ font-size: 25px; }","title":"C# using static directive"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-c-using-static-with-systemmath","text":"using System ; // using static directive using static System . Math ; namespace Program { class Program1 { public static void Main ( string [] args ) { double n = Sqrt ( 9 ); Console . WriteLine ( \"Square root of 9 is \" + n ); } } } section{ font-size: 25px; } Output Square root of 9 is 3 In the above example, notice the line, section{ font-size: 25px; } using static System . Math ; Here, this line helps us to directly access the methods of the Math class. double n = Sqrt ( 9 ); We have used the Sqrt() method directly without specifying the Math class. If we don't use the using static System.Math in our program, we have to include the class name Math while using Sqrt() . section{ font-size: 25px; } For example, using System ; namespace Program { class Program1 { public static void Main ( string [] args ) { // using the class name Math double n = Math . Sqrt ( 9 ); Console . WriteLine ( \"Square root of 9 is \" + n ); } } } section{ font-size: 25px; } Output Square root of 9 is 3 In the above example, notice the line, double n = Math . Sqrt ( 9 ); Here, we are using Math.Sqrt() to compute the square root of 9 . This is because we haven't imported the System.Math in this program. section{ font-size: 25px; }","title":"Example: C# using static with System.Math"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-type-conversion","text":"In this tutorial, we will learn about the C# type conversion and its types with the help of examples. The process of converting the value of one type (int, float, double, etc.) to another type is known as type conversion. section{ font-size: 25px; } In C#, there are two basic types of type conversion: Implicit Type Conversions Explicit Type Conversions section{ font-size: 25px; }","title":"C# Type Conversion"},{"location":"week-7-csharp/ce103-week-7-csharp/#1-implicit-type-conversion-in-c","text":"In implicit type conversion, the C# compiler automatically converts one type to another. Generally, smaller types like int (having less memory size) are automatically converted to larger types like double (having larger memory size). section{ font-size: 25px; }","title":"1. Implicit Type Conversion in C"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-implicit-type-conversion","text":"using System ; namespace MyApplication { class Program { static void Main ( string [] args ) { int numInt = 500 ; // get type of numInt Type n = numInt . GetType (); // Implicit Conversion double numDouble = numInt ; // get type of numDouble Type n1 = numDouble . GetType (); // Value before conversion Console . WriteLine ( \"numInt value: \" + numInt ); Console . WriteLine ( \"numInt Type: \" + n ); // Value after conversion Console . WriteLine ( \"numDouble value: \" + numDouble ); Console . WriteLine ( \"numDouble Type: \" + n1 ); Console . ReadLine (); } } } section{ font-size: 25px; } Output numInt value : 500 numInt Type : System . Int32 numDouble value : 500 numDouble Type : System . Double In the above example, we have created an int type variable named numInt. section{ font-size: 25px; } Notice the line, // Implicit Conversion double numDouble = numInt ; Here, we are assigning the int type variable to a double type variable. section{ font-size: 25px; } In this case, the C# compiler automatically converts the int type value to double . Notice that we have used the GetType() method to check the type of numInt and numDouble variables. Note : In implicit type conversion, smaller types are converted to larger types. Hence, there is no loss of data during the conversion. section{ font-size: 25px; }","title":"Example: Implicit Type Conversion"},{"location":"week-7-csharp/ce103-week-7-csharp/#2-c-explicit-type-conversion","text":"In explicit type conversion, we explicitly convert one type to another. Generally, larger types like double (having large memory size) are converted to smaller types like int (having small memory size). section{ font-size: 25px; }","title":"2. C# Explicit Type Conversion"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-explicit-type-conversion","text":"using System ; namespace MyApplication { class Program { static void Main ( string [] args ) { double numDouble = 1.23 ; // Explicit casting int numInt = ( int ) numDouble ; // Value before conversion Console . WriteLine ( \"Original double Value: \" + numDouble ); // Value before conversion Console . WriteLine ( \"Converted int Value: \" + numInt ); Console . ReadLine (); } } } section{ font-size: 25px; } Output Original double value: 1 .23 Converted int value: 1 In the above example, we have created a double variable named numDouble. Notice the line, section{ font-size: 25px; } // Explicit casting int numInt = ( int ) numDouble ; Here, (int) is a cast expression that explicitly converts the double type to int type. We can see the original value is 1.23 whereas the converted value is 1 . Here, some data is lost during the type conversion. This is because we are explicitly converting the larger data type double to a smaller type int . Note : The explicit type conversion is also called type casting. section{ font-size: 25px; }","title":"Example: Explicit Type Conversion"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-type-conversion-using-parse","text":"In C#, we can also use the Parse() method to perform type conversion. Generally, while performing type conversion between non-compatible types like int and string , we use Parse() . section{ font-size: 25px; }","title":"C# Type Conversion using Parse()"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-type-conversion-using-parse","text":"using System ; namespace Conversion { class Program { static void Main ( string [] args ) { string n = \"100\" ; // converting string to int type int a = int . Parse ( n ); Console . WriteLine ( \"Original string value: \" + n ); Console . WriteLine ( \"Converted int value: \" + a ); Console . ReadLine (); } } } section{ font-size: 25px; } Output Original string value: 100 Converted int value: 100 In the above example, we have converted a string type to an int type. section{ font-size: 25px; } // converting string to int type int a = int . Parse ( n ); Here, the Parse() method converts the numeric string 100 to an integer value. Note : We cannot use Parse() to convert a textual string like \"test\" to an int . For example, String str = \"test\" ; int a = int . Parse ( str ); // Error Code section{ font-size: 25px; }","title":"Example: Type Conversion using Parse()"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-type-conversion-using-convert-class","text":"In C#, we can use the Convert class to perform type conversion. The Convert class provides various methods to convert one type to another. Method Description ToBoolean() converts a type to a Boolean value ToChar() converts a type to a char type ToDouble() converts a type to a double type ToInt16() converts a type to a 16-bit int type ToString() converts a type to a string Let us look at some examples: section{ font-size: 25px; }","title":"C# Type Conversion using Convert Class"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-convert-int-to-string-and-double","text":"using System ; using System ; namespace Conversion { class Program { static void Main ( string [] args ) { // create int variable int num = 100 ; Console . WriteLine ( \"int value: \" + num ); // convert int to string string str = Convert . ToString ( num ); Console . WriteLine ( \"string value: \" + str ); // convert int to Double Double doubleNum = Convert . ToDouble ( num ); Console . WriteLine ( \"Double value: \" + doubleNum ); Console . ReadLine (); } } } section{ font-size: 25px; } Output int value: 100 string value: 100 Double value: 100 section{ font-size: 25px; } In the above example, Convert.ToString(a) - converts an int type num to string Convert.ToDouble(a) - converts num to the Double type section{ font-size: 25px; }","title":"Example: Convert int to String and Double"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-convert-string-to-double-and-vice-versa","text":"using System ; namespace Conversion { class Program { static void Main ( string [] args ) { // create string variable string str = \"99.99\" ; Console . WriteLine ( \"Original string value: \" + str ); // convert string to double Double newDouble = Convert . ToDouble ( str ); Console . WriteLine ( \"Converted Double value: \" + newDouble ); // create double variable double num = 88.9 ; Console . WriteLine ( \"Original double value: \" + num ); // converting double to string string newString = Convert . ToString ( num ); Console . WriteLine ( \"Converted string value: \" + newString ); Console . ReadLine (); } } } section{ font-size: 25px; } Output Original string value: 99 .99 Converted Double value: 99 .99 Original double value: 88 .9 Converted string value: 88 .9 section{ font-size: 25px; } In the above example, Convert.ToDouble(str) - converts a string type str to Double Convert.ToString(num) - converts a double type num to the string section{ font-size: 25px; }","title":"Example: Convert string to Double and vice-versa"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-3-convert-int-to-boolean","text":"using System ; namespace Conversion { class Program { static void Main ( string [] args ) { // create int variables int num1 = 0 ; int num2 = 1 ; // convert int to Boolean Boolean bool1 = Convert . ToBoolean ( num1 ); Boolean bool2 = Convert . ToBoolean ( num2 ); Console . WriteLine ( \"Boolean value of 0 is: \" + bool1 ); Console . WriteLine ( \"Boolean value of 1 is: \" + bool2 ); Console . ReadLine (); } } } section{ font-size: 25px; } Output Boolean value of 0 is: False Boolean value of 1 is: True section{ font-size: 25px; } In the above example, we have created two integer variables: num1 and num2 with values 0 and 1 respectively. Here, Convert.ToBoolean(num1) - converts 0 to a Boolean value False Convert.ToBoolean(num2) - converts 1 to a Boolean value True Note : In C#, the integer value 0 is considered False and all other values are considered True . section{ font-size: 25px; }","title":"Example 3: Convert int to Boolean"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-preprocessor-directives","text":"In this tutorial, we\u2019ll learn about Preprocessor Directives, available directives in C#, and when, why and how why they are used. As the name justifies, preprocessor directives are a block of statements that gets processed before the actual compilation starts. C# preprocessor directives are the commands for the compiler that affects the compilation process. section{ font-size: 25px; } These commands specifies which sections of the code to compile or how to handle specific errors and warnings. section{ font-size: 25px; } C# preprocessor directive begins with a # (hash) symbol and all preprocessor directives last for one line. Preprocessor directives are terminated by new line rather than semicolon . section{ font-size: 25px; } The preprocessor directives available in C# are: | Preprocessor Directive | Description | Syntax | | --- | --- | --- | | #if | Checks if a preprocessor expression is true or not | #if preprocessor-expression code to compile #endif | | #elif | Used along with #if to check multiple preprocessor expressions | #if preprocessor-expression-1 code to compile #elif preprocessor-expression-2 code to compile #endif | | #else | Used along with #if to create compound conditional directive. | #if preprocessor-expression code to compile #elif code to compile #endif | | #endif | Used along with #if to indicate the end of a conditional directive | #if preprocessor-expression code to compile #endif | | #define | Used to define a symbol | #define SYMBOL | | #undef | Used to undefine a symbol | #undef SYMBOL | | #warning | Allows us to generate level 1 warning from our code | #warning warning-message | | #error | Allows us to generate error from our code | #error error-message | | #line | Allows us to modify the compiler's line number and filename to display errors and warnings | #line line-number file-name | | #region | Allows us to create a region that can be expanded or collapsed when using a Visual Studio Code Editor | #region region-description codes #endregion | | #endregion | Indicates the end of a region | #region region-description codes #endregion | | #pragma | Gives the compiler special instructions for the compilation of the file in which it appears. | #pragma pragma-name pragma-arguments | section{ font-size: 25px; }","title":"C# Preprocessor directives"},{"location":"week-7-csharp/ce103-week-7-csharp/#define-directive","text":"The #define directive allows us to define a symbol. Symbols that are defined when used along with #if directive will evaluate to true. section{ font-size: 25px; } These symbols can be used to specify conditions for compilation. Syntax: #define SYMBOL For example: #define TESTING Here, TESTING is a symbol. section{ font-size: 25px; }","title":"#define directive"},{"location":"week-7-csharp/ce103-week-7-csharp/#undef-directive","text":"The #undef directive allows us to undefine a symbol. Undefined symbols when used along with #if directive will evaluate to false. Syntax: #undef SYMBOL For example: #undef TESTING Here, TESTING is a symbol. section{ font-size: 25px; }","title":"#undef directive"},{"location":"week-7-csharp/ce103-week-7-csharp/#if-directive","text":"The #if directive are used to test the preprocessor expression. A preprocessor expression may consists of a symbol only or combination of symbols along with operators like && (AND), || (OR), ! (NOT). #if directive is followed by an #endif directive. The codes inside the #if directive is compiled only if the expression tested with #if evaluates to true. Syntax: #if preprocessor-expression code to compile < #endif For example: #if TESTING Console . WriteLine ( \"Currently Testing\" ); #endif section{ font-size: 25px; }","title":"#if directive"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-1-how-to-use-if-directive","text":"#define CSHARP using System ; namespace Directive { class ConditionalDirective { public static void Main ( string [] args ) { #if (CSHARP) Console . WriteLine ( \"CSHARP is defined\" ); #endif } } } section{ font-size: 25px; } When we run the program, the output will be: CSHARP is defined section{ font-size: 25px; } In the above program, CSHARP symbol is defined using the #define directive at the beginning of program. Inside the Main() method, #if directive is used to test whether CSHARP is true or not. The block of code inside #if directive is compiled only if CSHARP is defined. section{ font-size: 25px; }","title":"Example 1: How to use #if directive?"},{"location":"week-7-csharp/ce103-week-7-csharp/#elif-directive","text":"The #elif directive is used along with #if directive that lets us create a compound conditional directive. It is used when testing multiple preprocessor expression. The codes inside the #elif directive is compiled only if the expression tested with that #elif evaluates to true. section{ font-size: 25px; } Syntax: #if preprocessor-expression-1 code to compile #elif preprocessor-expression-2 code - to - compile #endif section{ font-size: 25px; } For example:","title":"#elif directive"},{"location":"week-7-csharp/ce103-week-7-csharp/#if-testing-consolewritelinecurrently-testing-elif-training-consolewritelinecurrently-training-endif","text":"section{ font-size: 25px; }","title":"  #if TESTING\n    Console.WriteLine(&quot;Currently Testing&quot;);\n  #elif TRAINING\n    Console.WriteLine(&quot;Currently Training&quot;);\n  #endif\n"},{"location":"week-7-csharp/ce103-week-7-csharp/#else-directive","text":"The #else directive is used along with #if directive. If none of the expression in the preceding #if and #elif (if present) directives are true, the codes inside the #else directive will be compiled. section{ font-size: 25px; } Syntax: #if preprocessor-expression-1 code to compile #elif preprocessor-expression-2 code - to - compile #else code - to - compile #endif section{ font-size: 25px; } For example: #if TESTING Console . WriteLine ( \"Currently Testing\" ); #elif TRAINING Console . WriteLine ( \"Currently Training\" ); #else Console . WriteLine ( \"Neither Testing nor Training\" ); #endif section{ font-size: 25px; }","title":"#else directive"},{"location":"week-7-csharp/ce103-week-7-csharp/#endif-directive","text":"The #endif directive is used along with #if directive to indicate the end of #if directive. Syntax: #if preprocessor-expression-1 code to compile #endif section{ font-size: 25px; } For example: #if TESTING Console . WriteLine ( \"Currently Testing\" ); #endif section{ font-size: 25px; }","title":"#endif directive"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-2-how-to-use-conditional-directive-if-elif-else-endif","text":"#define CSHARP #undef PYTHON using System ; namespace Directive { class ConditionalDirective { static void Main ( string [] args ) { #if (CSHARP && PYTHON) Console . WriteLine ( \"CSHARP and PYTHON are defined\" ); #elif (CSHARP && !PYTHON) Console . WriteLine ( \"CSHARP is defined, PYTHON is undefined\" ); #elif (!CSHARP && PYTHON) Console . WriteLine ( \"PYTHON is defined, CSHARP is undefined\" ); #else Console . WriteLine ( \"CSHARP and PYTHON are undefined\" ); #endif } } } section{ font-size: 25px; } When we run the program, the output will be: CSHARP is defined, PYTHON is undefined section{ font-size: 25px; } In this example, we can see the use of #elif and #else directive. These directive are used when there are multiple conditions to be tested. Also, symbols can be combined using logical operators to form a preprocessor expression. section{ font-size: 25px; }","title":"Example 2: How to use conditional directive (if, elif, else, endif) ?"},{"location":"week-7-csharp/ce103-week-7-csharp/#warning-directive","text":"The #warning directive allows us to generate a user-defined level one warning from our code. Syntax: #warning warning-message section{ font-size: 25px; } For example: #warning This is a warning message section{ font-size: 25px; }","title":"#warning directive"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-3-how-to-use-warning-directive","text":"using System ; namespace Directives { class WarningDirective { public static void Main ( string [] args ) { #if (!CSHARP) #warning CSHARP is undefined #endif Console . WriteLine ( \"#warning directive example\" ); } } } section{ font-size: 25px; } When we run the program, the output will be: section{ font-size: 25px; } Program.cs ( 10 ,26 ) : warning CS1030: #warning: 'CSHARP is undefined' [/home/myuser/csharp/directives-project/directives-project.csproj] #warning directive example section{ font-size: 25px; } After running the above program, we will see the output as above. The text represents a warning message. Here, we are generating a user-defined warning message using the #warning directive. Note that the statements after the #warning directive are also executed. It means that the #warning directive does not terminate the program but just throws a warning. section{ font-size: 25px; }","title":"Example 3: How to use #warning directive?"},{"location":"week-7-csharp/ce103-week-7-csharp/#error-directive","text":"The #error directive allows us to generate a user-defined error from our code. Syntax: #error error-message section{ font-size: 25px; } For example: #error This is an error message section{ font-size: 25px; }","title":"#error directive"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-4-how-to-use-error-directive","text":"using System ; namespace Directive { class Error { public static void Main ( string [] args ) { #if (!CSHARP) #error CSHARP is undefined #endif Console . WriteLine ( \"#error directive example\" ); } } } section{ font-size: 25px; } When we run the program, the output will be: Program.cs ( 10 ,24 ) : error CS1029: #error: 'CSHARP is undefined' [/home/myuser/csharp/directives-project/directives-project.csproj] The build failed. Please fix the build errors and run again. section{ font-size: 25px; } We will see some errors, probably like above. Here we are generating a user-defined error. Another thing to note here is the program will be terminated and the line #error directive example won't be printed as it was in the #warning directive. section{ font-size: 25px; }","title":"Example 4: How to use #error directive?"},{"location":"week-7-csharp/ce103-week-7-csharp/#line-directive","text":"The #line directive allows us to modify the line number and the filename for errors and warnings. Syntax: #line line-number file-name section{ font-size: 25px; } For example: #line 50 \"fakeprogram.cs\" section{ font-size: 25px; }","title":"#line directive"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-5-how-to-use-line-directive","text":"using System ; namespace Directive { class Error { public static void Main ( string [] args ) { #line 200 \"AnotherProgram.cs\" #warning Actual Warning generated by Program.cs on line 10 } } } section{ font-size: 25px; } When we run the program, the output will be: AnotherProgram . cs ( 200 , 22 ): warning CS1030 : #warning: 'Actual Warning generated by Program.cs on line 10' [/home/myuser/csh arp / directive - project / directive - project . csproj ] We have saved the above example as Program.cs . The warning was actually generated at line 10 by Program.cs . Using the #line directive, we have changed the line number to 200 and the filename to AnotherProgram.cs that generated the error. section{ font-size: 25px; }","title":"Example 5: How to use #line directive?"},{"location":"week-7-csharp/ce103-week-7-csharp/#region-and-endregion-directive","text":"The #region directive allows us to create a region that can be expanded or collapsed when using a Visual Studio Code Editor. This directive is simply used to organize the code. The #region block can not overlap with a #if block. However, a #region block can be included within a #if block and a #if block can overlap with a #region block. #endregion directive indicates the end of a #region block. section{ font-size: 25px; } Syntax: #region region-description codes #endregion section{ font-size: 25px; }","title":"#region and #endregion directive"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-6-how-to-use-region-directive","text":"using System ; namespace Directive { class Region { public static void Main ( string [] args ) { #region Hello Console . WriteLine ( \"Hello\" ); Console . WriteLine ( \"Hello\" ); Console . WriteLine ( \"Hello\" ); Console . WriteLine ( \"Hello\" ); Console . WriteLine ( \"Hello\" ); #endregion } } } section{ font-size: 25px; } When we run the program, the output will be: Hello Hello Hello Hello Hello section{ font-size: 25px; }","title":"Example 6: How to use #region directive?"},{"location":"week-7-csharp/ce103-week-7-csharp/#pragma-directive","text":"The #pragma directive is used to give the compiler some special instructions for the compilation of the file in which it appears. The instruction may include disabling or enabling some warnings. C# supports two #pragma instructions: #pragma warning : Used for disabling or enabling warnings #pragma checksum : It generates checksums for source files which will be used for debugging. section{ font-size: 25px; } Syntax: #pragma pragma-name pragma-arguments section{ font-size: 25px; } For example: #pragma warning disable section{ font-size: 25px; }","title":"#pragma directive"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-7-how-to-use-pragma-directive","text":"using System ; namespace Directive { class Error { public static void Main ( string [] args ) { #pragma warning disable #warning This is a warning 1 #pragma warning restore #warning This is a warning 2 } } } section{ font-size: 25px; } When we run the program, the output will be: Program.cs ( 12 ,22 ) : warning CS1030: #warning: 'This is a warning 2' [/home/myuser/csharp/directive-project/directive-project.csproj] section{ font-size: 25px; } We can see that only the second warning is displayed on the output screen. This is because, we initially disabled all warnings before the first warning and restored them only before the second warning. This is the reason why the first warning was hidden. We can also disable specific warning instead of all warning. To learn more about #pragma , visit #pragma (C# reference) . section{ font-size: 25px; }","title":"Example 7: How to use #pragma directive?"},{"location":"week-7-csharp/ce103-week-7-csharp/#namespaces-in-c-programming","text":"In this tutorial, we will learn about Namespaces, how to define it, access its members, and use it in a C# program. Namespaces are used in C# to organize and provide a level of separation of codes. They can be considered as a container which consists of other namespaces, classes, etc. section{ font-size: 25px; } A namespace can have following types as its members: Namespaces (Nested Namespace) Classes Interfaces Structures Delegates section{ font-size: 25px; } We will discuss about these topics in later tutorials. For now we will stick with classes and namespaces. Namespaces are not mandatory in a C# program, but they do play an important role in writing cleaner codes and managing larger projects. Let's understand the concept of namespace with a real life scenario. We have a large number of files and folders in our computer. section{ font-size: 25px; } Imagine how difficult it would be to manage them if they are placed in a single directory. This is why we put related files and folders in a separate directory. This helps us to manage our data properly. section{ font-size: 25px; } The concept of namespace is similar in C#. It helps us to organize different members by putting related members in the same namespace. Namespace also solves the problem of naming conflict . Two or more classes when put into different namespaces can have same name. section{ font-size: 25px; }","title":"Namespaces in C# Programming"},{"location":"week-7-csharp/ce103-week-7-csharp/#defining-namespace-in-c","text":"We can define a namespace in C# using the namespace keyword as: namespace Namespace - Name { //Body of namespace } section{ font-size: 25px; } For example: namespace MyNamespace { class MyClass { public void MyMethod () { System . Console . WriteLine ( \"Creating my namespace\" ); } } } section{ font-size: 25px; } In the above example, a namespace MyNamespace is created. It consists of a class MyClass as its member. MyMethod is a method of class MyClass . section{ font-size: 25px; }","title":"Defining Namespace in C"},{"location":"week-7-csharp/ce103-week-7-csharp/#accessing-members-of-namespace-in-c","text":"The members of a namespace can be accessed using the dot(.) operator. The syntax for accessing the member of namespace is, Namespace - Name . Member - Name For example, if we need to create an object of MyClass, it can be done as, MyNamespace . MyClass myClass = new MyNamespace . MyClass (); We will discuss about creating objects in later tutorials. For now just focus on how the class MyClass is accessed. section{ font-size: 25px; }","title":"Accessing Members of Namespace in C"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-1-introducing-namespace-in-c-program","text":"using System ; namespace MyNamespace { public class SampleClass { public static void myMethod () { Console . WriteLine ( \"Creating my namespace\" ); } } } namespace MyProgram { public class MyClass { public static void Main () { MyNamespace . SampleClass . myMethod (); } } } section{ font-size: 25px; } When we run the program, the output will be: Creating my namespace section{ font-size: 25px; } In the above program, we have created our own namespace MyNamespace and accessed its members from Main() method inside MyClass . As said earlier, the dot (.) operator is used to access the member of namespace. In the Main() method, myMethod() method is called using the dot (.) operator. section{ font-size: 25px; }","title":"Example 1: Introducing Namespace in C# Program"},{"location":"week-7-csharp/ce103-week-7-csharp/#using-a-namespace-in-c-the-using-keyword","text":"A namespace can be included in a program using the using keyword. The syntax is, using Namespace - Name ; section{ font-size: 25px; } For example, using System ; section{ font-size: 25px; } The advantage of this approach is we don't have to specify the fully qualified name of the members of that namespace every time we are accessing it. Once the line using System ; is included at the top of the program. We can write Console . WriteLine ( \"Hello World!\" ); Instead of the fully qualified name i.e. System . Console . WriteLine ( \"Hello World!\" ); section{ font-size: 25px; }","title":"Using a Namespace in C# [The using Keyword]"},{"location":"week-7-csharp/ce103-week-7-csharp/#nested-namespace-in-c","text":"A namespace can contain another namespace. It is called nested namespace. The nested namespace and its members can also be accessed using the dot (.) operator. section{ font-size: 25px; } The syntax for creating nested namespace is as follows: namespace MyNamespace { namespace NestedNamespace { // Body of nested namespace } } section{ font-size: 25px; }","title":"Nested Namespace in C"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-2-nested-namespace-in-c","text":"using System ; // Nested Namespace namespace MyNamespace { namespace Nested { public class SampleClass { public static void myMethod () { Console . WriteLine ( \"Nested Namespace Example\" ); } } } } namespace MyProgram { public class MyClass { public static void Main () { MyNamespace . Nested . SampleClass . myMethod (); } } } section{ font-size: 25px; } When we run the program, the output will be: Nested Namespace Example section{ font-size: 25px; } This example illustrates how nested namespace can be implemented in C#. Here, we now have an extra namespace inside MyNamespace called Nested . So, instead of using MyNamespace.SampleClass.myMethod() , we have to use MyNamespace.Nested.SampleClass.myMethod() . section{ font-size: 25px; }","title":"Example 2: Nested Namespace in C"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-struct","text":"In this tutorial, you will learn about structs in C# with the help of examples. The struct (structure) is like a class in C# that is used to store data. However, unlike classes, a struct is a value type. Suppose we want to store the name and age of a person. We can create two variables: name and age and store value. However, suppose we want to store the same information of multiple people. In this case, creating variables for an individual person might be a tedious task. To overcome this we can create a struct that stores name and age. Now, this struct can be used for every person. section{ font-size: 25px; }","title":"C# struct"},{"location":"week-7-csharp/ce103-week-7-csharp/#define-struct-in-c","text":"In C#, we use the struct keyword to define a struct. For example, struct Employee { public int id ; } Here, id is a field inside the struct. A struct can include methods, indexers, etc as well. section{ font-size: 25px; }","title":"Define struct in C"},{"location":"week-7-csharp/ce103-week-7-csharp/#declare-struct-variable","text":"Before we use a struct, we first need to create a struct variable. We use a struct name with a variable to declare a struct variable. For example, struct Employee { public int id ; } ... // declare emp of struct Employee Employee emp ; In the above example, we have created a struct named Employee. Here, we have declared a variable emp of the struct Employee. section{ font-size: 25px; }","title":"Declare struct variable"},{"location":"week-7-csharp/ce103-week-7-csharp/#access-c-struct","text":"We use the struct variable along with the . operator to access members of a struct. For example, struct Employee { public int id ; } ... // declare emp of struct Employee Employee emp ; // access member of struct emp . id = 1 ; section{ font-size: 25px; } Here, we have used variable emp of a struct Employee with . operator to access members of the Employee. emp . id = 1 ; This accesses the id field of struct Employee. Note : Primitive data types like int , bool , float are pre-defined structs in C#. section{ font-size: 25px; }","title":"Access C# struct"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-c-struct","text":"using System ; namespace CsharpStruct { // defining struct struct Employee { public int id ; public void getId ( int id ) { Console . WriteLine ( \"Employee Id: \" + id ); } } class Program { static void Main ( string [] args ) { // declare emp of struct Employee Employee emp ; // accesses and sets struct field emp . id = 1 ; // accesses struct methods emp . getId ( emp . id ); Console . ReadLine (); } } } section{ font-size: 25px; } Output Employee Id: 1 In the above program, we have created a struct named Employee. It contains a field id and a method getId(). Inside the Program class, we have declared a variable emp of struct Employee. We then used the emp variable to access fields and methods of the class. section{ font-size: 25px; } Note : We can also instantiate a struct using the new keyword. For example, Employee emp = new Employee (); Here, this line calls the parameterless constructor of the struct and initializes all the members with default values. section{ font-size: 25px; }","title":"Example: C# Struct"},{"location":"week-7-csharp/ce103-week-7-csharp/#constructors-in-c-struct","text":"In C#, a struct can also include constructors. For example, struct Employee { public int id ; // constructor public Employee ( int employeeId ) { id = employeeId } } section{ font-size: 25px; } Here, we have created a parameterized constructor Employee() with parameter employeeId. Note : We cannot create parameterless constructors in C# version 9.0 or below. section{ font-size: 25px; }","title":"Constructors in C# struct"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-constructor-in-c-structs","text":"using System ; namespace CsharpStruct { // defining struct struct Employee { public int id ; public string name ; // parameterized constructor public Employee ( int employeeId , string employeeName ) { id = employeeId ; name = employeeName ; } } class Program { static void Main ( string [] args ) { // calls constructor of struct Employee emp = new Employee ( 1 , \"Brian\" ); Console . WriteLine ( \"Employee Name: \" + emp . name ); Console . WriteLine ( \"Employee Id: \" + emp . id ); Console . ReadLine (); } } } section{ font-size: 25px; } Output Employee Name : Brian Employee Id : 1 section{ font-size: 25px; } In the above example, we have created a parameterized constructor inside the Employee struct. Inside the constructor, we have assigned the values of fields: id and name. Notice the line, Employee emp = new Employee ( 1 , \"Brian\" ); section{ font-size: 25px; } Like in C# classes, we are using the new keyword to call the constructor. Here, 1 and \"Brian\" are arguments passed to the constructor, where they are assigned to the parameters employeeID and employeeName respectively.\" section{ font-size: 25px; } Note : We must assign the value for every field of struct inside the parameterized constructor. For example, // error code public Employee ( int employeeID , employeeName ) { id = employeeID ; } Here, we have not assigned the value for the name field. So the code will generate an error. section{ font-size: 25px; }","title":"Example: Constructor in C# structs"},{"location":"week-7-csharp/ce103-week-7-csharp/#properties-in-c-struct","text":"We can also use properties inside a C# struct. For example, using System ; namespace CsharpStruct { // defining struct struct Employee { public int id ; // creates property public int Id { // returns id field get { return id ; } // sets id field set { id = value ; } } } class Program { static void Main ( string [] args ) { // calls the constructor of struct Employee emp = new Employee (); emp . Id = 1 ; Console . WriteLine ( \"Employee Id: \" + emp . Id ); Console . ReadLine (); } } } section{ font-size: 25px; } Output Employee Id: 1 section{ font-size: 25px; } In the above example, we have Id property inside the Employee struct. The get method returns the id field and the set method assigns the value to the id field. section{ font-size: 25px; }","title":"Properties in C# struct"},{"location":"week-7-csharp/ce103-week-7-csharp/#difference-between-class-and-struct-in-c","text":"In C# classes and structs look similar. However, there are some differences between them. A class is a reference type whereas a struct is a value type. For example, using System ; namespace CsharpStruct { // defining class class Employee { public string name ; } class Program { static void Main ( string [] args ) { Employee emp1 = new Employee (); emp1 . name = \"John\" ; // assign emp1 to emp2 Employee emp2 = emp1 ; emp2 . name = \"Ed\" ; Console . WriteLine ( \"Employee1 name: \" + emp1 . name ); Console . ReadLine (); } } } Output Employee1 name: Ed In the above example, we have assigned the value of emp1 to emp2. The emp2 object refers to the same object as emp1. So, an update in emp2 updates the value of emp1 automatically. This is why a class is a reference type . Contrary to classes, when we assign one struct variable to another, the value of the struct gets copied to the assigned variable. So updating one struct variable doesn't affect the other. For example, using System ; namespace CsharpStruct { // defining struct struct Employee { public string name ; } class Program { static void Main ( string [] args ) { Employee emp1 = new Employee (); emp1 . name = \"John\" ; // assign emp1 to emp2 Employee emp2 = emp1 ; emp2 . name = \"Ed\" ; Console . WriteLine ( \"Employee1 name: \" + emp1 . name ); Console . ReadLine (); } } } section{ font-size: 25px; } Output Employee1 name: John When we assign the value of emp1 to emp2, a new value emp2 is created. Here, the value of emp1 is copied to emp2. So, change in emp2 does not affect emp1. This is why struct is a value type . Moreover, inheritance is not possible in the structs whereas it is an important feature of the C# classes. section{ font-size: 25px; }","title":"Difference between class and struct in C"},{"location":"week-7-csharp/ce103-week-7-csharp/#references","text":"Learn C# Programming Free C# Programming Book free-programming-books/free-programming-books-langs.md at master \u00b7 EbookFoundation/free-programming-books \u00b7 GitHub section{ font-size: 25px; }","title":"References"},{"location":"week-7-csharp/ce103-week-7-csharp/#extras","text":"Creating a Simple Dynamic-Link Library - Win32 apps | Microsoft Docs Dynamic-Link Library Creation - Win32 apps | Microsoft Docs Exporting from a DLL | Microsoft Docs Exporting from a DLL Using DEF Files | Microsoft Docs How to create a DLL library in C and then use it with C# - CodeProject section{ font-size: 25px; }","title":"Extras"},{"location":"week-7-csharp/ce103-week-7-csharp/#extras_1","text":"DLL - How to Write DLL - Dynamic Link Library in C - Steps to Create and Use https://www.codementor.io/@a_hathon/building-and-using-dlls-in-c-d7rrd4caz DLL Injection - free code corner GitHub - dennisbabkin/InjectAll: Tutorial that demonstrates how to code a Windows driver to inject a custom DLL into all running processes. I coded it from start to finish using C++ and x86/x64 Assembly language in Microsoft Visual Studio. The solution includes a kernel driver project, a DLL project and a C++ test console project. Coding Windows Kernel Driver - InjectAll - Making the Visual Studio solution for DLL injection into all running processes.","title":"Extras"},{"location":"week-7-csharp/ce103-week-7-csharp/#others","text":"std::dec, std::hex, std::oct - cppreference.com std::setbase - cppreference.com C++ Tutorial: Multi-Threaded Programming - Thread for Win32 - 2020","title":"Others"},{"location":"week-8-midterm/ce103-week-8-midterm/","text":"CE103 Algorithms and Programming I \u00b6 Week-8 (Midterm) \u00b6 Fall Semester, 2021-2022 \u00b6 Download DOC , SLIDE , PPTX Midterm \u00b6","title":"Week-8 (Midterm)"},{"location":"week-8-midterm/ce103-week-8-midterm/#ce103-algorithms-and-programming-i","text":"","title":"CE103 Algorithms and Programming I"},{"location":"week-8-midterm/ce103-week-8-midterm/#week-8-midterm","text":"","title":"Week-8 (Midterm)"},{"location":"week-8-midterm/ce103-week-8-midterm/#fall-semester-2021-2022","text":"Download DOC , SLIDE , PPTX","title":"Fall Semester, 2021-2022"},{"location":"week-8-midterm/ce103-week-8-midterm/#midterm","text":"","title":"Midterm"},{"location":"week-9-java-I/ce103-week-9-java-I/","text":"CE103 Algorithms and Programming I \u00b6 Week-9 (Java Functional Console Programming-I) \u00b6 Fall Semester, 2021-2022 \u00b6 Download DOC , SLIDE , PPTX Java Functional Console Programming-I \u00b6 Java Programming a. Java Introduction i. Java Hello World ii. Java JVM, JRE, and JDK iii. Java Variables iv. Java Data Types v. Java Operators vi. Java Input and Output vii. Java Expressions & Blocks viii. Java Comment b. Java Flow Control i. Java if..else ii. Java switch statement iii. Java for loop iv. Java for-each loop v. Java while loop vi. Java break statement vii. Java continue statement c. Java Arrays i. Java Arrays ii. Multidimensional Array Java Copy Array","title":"Week-9 (Java Console Programming-I)"},{"location":"week-9-java-I/ce103-week-9-java-I/#ce103-algorithms-and-programming-i","text":"","title":"CE103 Algorithms and Programming I"},{"location":"week-9-java-I/ce103-week-9-java-I/#week-9-java-functional-console-programming-i","text":"","title":"Week-9 (Java Functional Console Programming-I)"},{"location":"week-9-java-I/ce103-week-9-java-I/#fall-semester-2021-2022","text":"Download DOC , SLIDE , PPTX","title":"Fall Semester, 2021-2022"},{"location":"week-9-java-I/ce103-week-9-java-I/#java-functional-console-programming-i","text":"Java Programming a. Java Introduction i. Java Hello World ii. Java JVM, JRE, and JDK iii. Java Variables iv. Java Data Types v. Java Operators vi. Java Input and Output vii. Java Expressions & Blocks viii. Java Comment b. Java Flow Control i. Java if..else ii. Java switch statement iii. Java for loop iv. Java for-each loop v. Java while loop vi. Java break statement vii. Java continue statement c. Java Arrays i. Java Arrays ii. Multidimensional Array Java Copy Array","title":"Java Functional Console Programming-I"},{"location":"tr/resume/","text":"\u00d6zge\u00e7mi\u015f \u00b6 \u0130ndir \u00d6zge\u00e7mi\u015f-\u0130ngilizce \u00d6zge\u00e7mi\u015f-T\u00fcrk\u00e7e \u0130ngilizce T\u00fcrk\u00e7e","title":"Resume"},{"location":"tr/resume/#ozgecmis","text":"\u0130ndir \u00d6zge\u00e7mi\u015f-\u0130ngilizce \u00d6zge\u00e7mi\u015f-T\u00fcrk\u00e7e \u0130ngilizce T\u00fcrk\u00e7e","title":"\u00d6zge\u00e7mi\u015f"},{"location":"tr/syllabus/syllabus/","text":"Recep Tayyip Erdogan University \u00b6 Faculty of Engineering and Architecture \u00b6 Computer Engineering \u00b6 CE103 Algorithms and Programming-I \u00b6 Syllabus \u00b6 Fall Semester, 2021-2022 \u00b6 Download DOC , SLIDE , PPTX Download WORD , PDF Instructor Asst. Prof. Dr. U\u011fur CORUH Contact Information ugur.coruh@erdogan.edu.tr Office No F-301 Google Classroom Code 3ipdtws Lecture Hours and Days Monday 13:00 - 15:30 (Theory) / Wednesday 13:00 - 14:30 (Lab) Lecture Classroom \u0130BBF 402 Level-4 Office Hours Meetings will be scheduled over Google Meet with your university account and email and performed via demand emails. Please send emails with the subject starting with [CE103] tag for the fast response and write formal, clear, and short emails Lecture and Communication Language English Theory/Laboratory Course Hour Per Week 3/2 Hours Credit 4 Prerequisite TBD Corequisite TBD Requirement TBD *TBD: To Be Defined. A. Course Description \u00b6 This course goal is to develop algorithm and programming expertise from scratch in a powerful way to provide a high-quality career path for students. The lecture will be based on expertise sharing and guiding students to find learning methods and practice for algorithm and programming topics. By making programming applications and projects in the courses, the learning process will be strengthened by practicing rather than theory. This course provides functional programming for C, C++, C#, and Java with up-to-date development environments. B. Course Learning Outcomes \u00b6 After completing this course satisfactorily, a student will be able to: Understand a software developer's road map and qualifications. Use different types of development environments to build applications. Understand the relation between real-life problems and their programming practices. Use language features in C, C++, C#, and Java for functional programming and evaluate their relative benefits. Understand application generation flows and outputs in detail, such as binaries and executables. Use the source code, version management systems, and portals based on GIT Work on the remote systems with remote connection tools. Use common developer tools that help application developers Create application libraries such as static, shared libraries for code reusability and functional packaging. Create unit tests for their applications to automate tests for their algorithms. Create console and GUI-based applications for their solutions. Create documentation for their applications. C. Course Topics \u00b6 Developer Road Map Algorithm Design and Basics Basic Operating System Information for Development Requirement Basic Remote Connection and Working Know-How Source Code Version Management Systems (GIT) Integrated Development Environments Application Test Automation Application Debugging and Bugfixing Functional Programming (C,C++, C#, Java) Continues Integration and Continues Development Processes Software Development Principles Application Documentation Automation Shared and Static Library Development and Test in Cross-Environment D. Textbooks and Required Hardware or Equipment \u00b6 This course does not require a coursebook. If necessary, you can use the following books and open-source online resources. Paul Deitel and Harvey Deitel. 2012. C How to Program (7 th . ed.). Prentice Hall Press, USA. Intro to Java Programming, Comprehensive Version (10 th Edition) 10 th Edition by Y. Daniel Liang Introduction to Algorithms, Third Edition By Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, and Clifford Stein Problem Solving and Program Design in C, J.R. Hanly, and E.B. Koffman, 6 th Edition. Robert Sedgewick and Kevin Wayne. 2011. Algorithms (4 th . ed.). Addison-Wesley Professional. Harvey M. Deitel and Paul J. Deitel. 2001. Java How to Program (4 th . ed.). Prentice Hall PTR, USA. Paul Deitel and Harvey Deitel. 2016. Visual C# How to Program (6 th . ed.). Pearson. Additional Books TBD During this course, you should have a laptop for programming practices. You will have your development environment, and you will use this for examination and assignments also classroom practices. E. Grading System \u00b6 Midterm and Final grades will be calculated with the weighted average of the project or homework-based examinations. Midterm grades will be calculated between term beginning to the midterm week, and Final grades will be calculated between Midterm and Final week homeworks or projects as follow \\[ a_n=\\text{Homework or Project Weight} \\] \\[ HW_n=\\text{Homework or Project Points} \\] \\[ n=\\text{Number of Homework or Project} \\] \\[ Grade=(a_1HW_1+a_2HW_2+...+a_nHW_n)/n \\] Homework Weight Midterm %40 Final %60 \\[ \\text{Passing Grade}=(40*Midterm_{Grade}+60*Final_{Grade})/100 \\] F. Instructional Strategies and Methods \u00b6 The basic teaching method of this course will be planned to be face-to-face in the classroom, and support resources, homeworks, and announcements will be shared over google classroom. Students are expected to be in the university. This responsibility is very important to complete this course with success. If pandemic situation changes and distance education is required during this course, this course will be done using synchronous and asynchronous distance education methods. In this scenario, students are expected to be in the online platform, zoom, or meet at the time specified in the course schedule. Attendance will be taken. G. Late Homework \u00b6 Throughout the semester, assignments must be submitted as specified by the announced deadline. Your grade will be reduced by 10% of the full points for each calendar day for overdue assignments. Overdue assignments will not be accepted after three (3) days. Unexpected situations must be reported to the instructor for late homeworks by students. H. Course Platform and Communication \u00b6 Google Classroom will be used as a course learning management system. All electronic resources and announcements about the course will be shared on this platform. It is very important to check the course page daily, access the necessary resources and announcements, and communicate with the instructor as you needed to complete the course with success I. Academic Integrity, Plagiarism & Cheating \u00b6 Academic Integrity is one of the most important principles of RTE\u00dc University. Anyone who breaches the principles of academic honesty is severely punished. It is natural to interact with classmates and others to \"study together\". It may also be the case where a student asks to help from someone else, paid or unpaid, better understand a difficult topic or a whole course. However, what is the borderline between \"studying together\" or \"taking private lessons\" and \"academic dishonesty\"? When is it plagiarism, when is it cheating? It is obvious that looking at another student's paper or any source other than what is allowed during the exam is cheating and will be punished. However, it is known that many students come to university with very little experience concerning what is acceptable and what counts as \"copying\", especially for assignments. The following are attempted as guidelines for the Faculty of Engineering and Architecture students to highlight the philosophy of academic honesty for assignments for which the student will be graded. Should a situation arise which is not described below, the student is advised to ask the instructor or assistant of the course whether what they intend to do would remain within the framework of academic honesty or not. a. What is acceptable when preparing an assignment? \u00b6 Communicating with classmates about the assignment to understand it better Putting ideas, quotes, paragraphs, small pieces of code (snippets) that you find online or elsewhere into your assignment, provided that these are not themselves the whole solution to the assignment, you cite the origins of these Asking sources for help in guiding you for the English language content of your assignment. Sharing small pieces of your assignment in the classroom to create a class discussion on some controversial topics. Turning to the web or elsewhere for instructions, references, and solutions to technical difficulties, but not for direct answers to the assignment Discuss solutions to assignments with others using diagrams or summarized statements but not actual text or code. Working with (and even paying) a tutor to help you with the course, provided the tutor does not do your assignment for you. b. What is not acceptable? \u00b6 Ask a classmate to see their solution to a problem before submitting your own. Failing to cite the origins of any text (or code for programming courses) that you discover outside of the course's lessons and integrate into your work Giving or showing a classmate your solution to a problem when the classmate is struggling to solve it. J. Expectations \u00b6 You are expected to attend classes on time by completing weekly course requirements (readings and assignments) during the semester. The main communication channel between the instructor and the students will be emailed. Please send your questions to the instructor's email address about the course via the email address provided to you by the university. Ensure that you include the course name in the subject field of your message and your name in the text field . In addition, the instructor will contact you via email if necessary. For this reason, it is very important to check your email address every day for healthy communication. K. Lecture Content and Syllabus Updates \u00b6 If deemed necessary, changes in the lecture content or course schedule can be made. If any changes are made in the scope of this document, the instructor will inform you about this. Course Schedule Overview \u00b6 Weeks Dates Subjects Other Tasks Week 1 04.10.2021 06.10.2021 Course Plan and Communication,Grading System, Assignments, and Exams,Computer Engineering Job Qualifications and Road Map,Google Search Basics,Programming Introduction (Operating System Basics, Computer Network Basics, Numerical System Basics, Character Sets) TBD Week 2 11.10.2021 13.10.2021 Algorithm Basics, Flowgorithm, Pseudocode, Programming Environment Setup and Configuration for C, C++, Java, and C#, Common Developer Tools, Online Programming Envoriments TBD Week 3 18.10.2021 20.10.2021 Source Code Sharing and Version Management. TBD Week 4 25.10.2021 27.10.2021 Shared Library Development and Application Test Automation for C, C++, C# and Java, TDD (Test Driven Development) TBD Week 5 01.11.2021 03.11.2021 C Functional Console Programming Week-6 08.11.2021 10.11.2021 C++ Functional Console Programming TBD Week-7 15.11.2021 17.11.2021 C# Functional Console Programming TBD Week-8 20.11.2021 28.11.2021 Midterm TBD Week-9 29.11.2021 01.12.2021 Java Functional Console Programming-I TBD Week-10 06.12.2021 08.12.2021 Java Functional Console Programming-II TBD Week-11 13.12.2021 16.12.2021 Java Functional Console Programming-III TBD Week-12 20.12.2021 22.12.2021 C / C++ Graphical User Interface (GUI) Programming TBD Week-13 27.12.2021 29.12.2021 C# Graphical User Interface (GUI) Programming-I TBD Week-14 03.01.2022 05.01.2022 C# Graphical User Interface (GUI) Programming-II TBD Week-15 10.01.2022 12.01.2022 Java Graphical User Interface Programming TBD Week-16 17.01.2022 30.01.2022 Final . TBD Bologna Bilgileri \u00b6 \\(CE103-Ders-\u0130zlencesi-Sonu\\)","title":"Syllabus"},{"location":"tr/syllabus/syllabus/#bologna-bilgileri","text":"\\(CE103-Ders-\u0130zlencesi-Sonu\\)","title":"Bologna Bilgileri"},{"location":"tr/week-1-intro/ce103-week-1-intro/","text":"CE103 Algorithms and Programming I \u00b6 Week-1 (Intro) \u00b6 Fall Semester, 2021-2022 \u00b6 Download DOC , SLIDE , PPTX Brief Description of Course and Rules \u00b6 We will first talk about, Course Plan and Communication Grading System, Homework,s and Exams please read the syllabus carefully. Computer Engineering Roles \u00b6 Software Development Hardware Development Network Organization and Management Database Organization and Management Hardware and Software Testing Audit (Cyber Security, Policy etc.) Etc. Computer Engineering Areas \u00b6 Computer Vision Social Analytics Mobility IoT Security Web-Scale IT Cloud Smart Machines Pervasive Fintech Etc. Our focus is Software Development \u00b6 for this reason, we will focus on software-based road-maps we can use common developer road maps from https://roadmap.sh/ What will you see in the roadmap? \u00b6 Frontend Backend DevOps DBA and more Also, you need soft skills \u00b6 Excellent written and oral communication skills, including public speaking and presenting Decisiveness under pressure and strong critical thinking skills Willingness to work off-core-hours, when necessary, to deploy software or upgrade hardware If you need more information about your profession \u00b6 Visit Job Search Web Portals and Look at Requirements to Understand What is Real Life Need https://www.kariyer.net/ https://www.yenibiris.com/ https://www.secretcv.com/ https://www.linkedin.com/ Etc. Using Google \u00b6 Operating System List \u00b6 Operating System Architecture \u00b6 reference Operating Systems Key Comparing Factor \u00b6 reference Operating System Comparisons \u00b6 reference Intro to the Internet \u00b6 What is IP Address? \u00b6 What is Port? \u00b6 In computer networking , a port is a communication endpoint. At the software level, within an operating system , a port is a logical construct that identifies a specific process or a type of network service . A port is identified for each transport protocol and address combination by a 16-bit unsigned number , known as the port number. The most common transport protocols that use port numbers are the Transmission Control Protocol (TCP) and the User Datagram Protocol (UDP). reference What is Port Forwarding and NAT \u00b6 https://www.networkantics.com/sonicwall-port-forwarding/ https://en.wikipedia.org/wiki/Network_address_translation What is Internet Packet (IP) \u00b6 What is Domain Name Server (DNS)? \u00b6 The Submarine Cable Map \u00b6 https://www.submarinecablemap.com/ Introduction to the command line interface \u00b6 Reference Books Bash Notes For Professionals Linux Notes For Professionals PowerShell Notes For Professionals What is the command line? \u00b6 The window, which is usually called the command line or command-line interface , is a text-based application for viewing, handling, and manipulating files on your computer. It's much like Windows Explorer or Finder on the Mac, but without the graphical interface. Other names for the command line are: cmd, CLI, prompt, console or terminal While there are many commands you can use with CLI, they all fall into two categories : The commands that handle the processes The commands that handle the files reference Why Would You Use CLI over GUI? \u00b6 Less Resource It is not a secret that the text-based program needs very little resources of your computer. This means that with CLI you can do similar tasks with minimum resources. High Precision You can use a specific command to target specific destinations with ease. As long as you don\u2019t type the wrong command, it will work like a charm. Once you learn the basics, writing syntax is not as hard as you might think. Repetitive Tasks Friendly GUI has developed well over the years. But, the operating system may not give you all the menus and buttons to perform all tasks. One of the reasons is safety. This leaves you overwhelmed if you have to do repetitive tasks. For example, when you have to handle hundreds of files within a folder, CLI enables you to use a single command to do automate the repetition easily. Powerful Most operating systems today prevent you from messing up the system\u2019s core process. Windows has system protection and MacOS has SIP (System Integrity Protection). You won\u2019t be able to perform certain tasks which are system protected. However, with CLI, you will have full control over your system. Open the command-line interface (Windows) \u00b6 Go to the Start menu or screen, and enter \"Command Prompt\" in the search field. Go to Start menu \u2192 Windows System \u2192 Command Prompt. Go to Start menu \u2192 All Programs \u2192 Accessories \u2192 Command Prompt. Go to the Start screen, hover your mouse in the lower-left corner of the screen, and click the down arrow that appears (on a touch screen, instead flick up from the bottom of the screen). The Apps page should open. Click on Command Prompt in the Windows System section. Hold the special Windows key on your keyboard and press the \"X\" key. Choose \"Command Prompt\" from the pop-up menu. Hold the Windows key and press the \"R\" key to get a \"Run\" window. Type \"cmd\" in the box, and click the OK key. Open the command-line interface (Linux) \u00b6 It's probably under Applications \u2192 Accessories \u2192 Terminal, or Applications \u2192 System \u2192 Terminal, but that may depend on your system. If it's not there, you can try to Google it. :) Open the command-line interface (MacOS) \u00b6 Go to Applications \u2192 Utilities \u2192 Terminal Reference \u00b6 Network_address_translation GitHub - kamranahmedse/developer-roadmap: Roadmap to becoming a web developer in 2021 GitHub - jwasham/coding-interview-university: A complete computer science study plan to become a software engineer. GitHub - sindresorhus/awesome: \ud83d\ude0e Awesome lists about all kinds of interesting topics","title":"Week-1 (Intro and Developer Roadmap)"},{"location":"tr/week-1-intro/ce103-week-1-intro/#week-1-intro","text":"","title":"Week-1 (Intro)"},{"location":"tr/week-1-intro/ce103-week-1-intro/#what-will-you-see-in-the-roadmap","text":"Frontend Backend DevOps DBA and more","title":"What will you see in the roadmap?"},{"location":"tr/week-1-intro/ce103-week-1-intro/#using-google","text":"","title":"Using Google"},{"location":"tr/week-1-intro/ce103-week-1-intro/#why-would-you-use-cli-over-gui","text":"Less Resource It is not a secret that the text-based program needs very little resources of your computer. This means that with CLI you can do similar tasks with minimum resources. High Precision You can use a specific command to target specific destinations with ease. As long as you don\u2019t type the wrong command, it will work like a charm. Once you learn the basics, writing syntax is not as hard as you might think. Repetitive Tasks Friendly GUI has developed well over the years. But, the operating system may not give you all the menus and buttons to perform all tasks. One of the reasons is safety. This leaves you overwhelmed if you have to do repetitive tasks. For example, when you have to handle hundreds of files within a folder, CLI enables you to use a single command to do automate the repetition easily. Powerful Most operating systems today prevent you from messing up the system\u2019s core process. Windows has system protection and MacOS has SIP (System Integrity Protection). You won\u2019t be able to perform certain tasks which are system protected. However, with CLI, you will have full control over your system.","title":"Why Would You Use CLI over GUI?"},{"location":"tr/week-1-intro/ce103-week-1-intro/#open-the-command-line-interface-windows","text":"Go to the Start menu or screen, and enter \"Command Prompt\" in the search field. Go to Start menu \u2192 Windows System \u2192 Command Prompt. Go to Start menu \u2192 All Programs \u2192 Accessories \u2192 Command Prompt. Go to the Start screen, hover your mouse in the lower-left corner of the screen, and click the down arrow that appears (on a touch screen, instead flick up from the bottom of the screen). The Apps page should open. Click on Command Prompt in the Windows System section. Hold the special Windows key on your keyboard and press the \"X\" key. Choose \"Command Prompt\" from the pop-up menu. Hold the Windows key and press the \"R\" key to get a \"Run\" window. Type \"cmd\" in the box, and click the OK key.","title":"Open the command-line interface (Windows)"},{"location":"tr/week-1-intro/ce103-week-1-intro/#reference","text":"Network_address_translation GitHub - kamranahmedse/developer-roadmap: Roadmap to becoming a web developer in 2021 GitHub - jwasham/coding-interview-university: A complete computer science study plan to become a software engineer. GitHub - sindresorhus/awesome: \ud83d\ude0e Awesome lists about all kinds of interesting topics","title":"Reference"},{"location":"tr/week-2-setup/ce103-week-2-setup/","text":"CE103 Algorithms and Programming I \u00b6 Week-2 \u00b6 Fall Semester, 2021-2022 \u00b6 Download DOC , SLIDE , PPTX Algorithm Basics \u00b6 Flowgorithm \u00b6 http://www.flowgorithm.org/ Pseudocode \u00b6 Pseudocode - Wikipedia Pseudocode Examples How to write a Pseudo Code? - GeeksforGeeks Introduction to Analysis of Algorithms \u00b6 In this course we will learn how to code with several development environments and next term we will see analysis of algorithms in details. This topic is covered in the following link : CE100 Introduction to Analysis of Algorithms Programming Environment Setup and Configuration \u00b6 Programming life is not about only learning how to code. Mostly you need to use several code development environments and you need to learn how to use them efficiently. C / C++ Environment and Development \u00b6 DevCpp (Install / Compile / Run / Debug) (1) \u00b6 Download DevC++ IDE from following link https://www.bloodshed.net/ DevCpp (Install / Compile / Run / Debug) (2) \u00b6 Open DevC++ IDE for C Project Generation Open File->New->Project DevCpp (Install / Compile / Run / Debug) (3) \u00b6 Select Console Application from Basic tab and with C Project Option and write a project name such as \" Hello \" then press OK Select a folder and save Hello.dev project file. DevCpp (Install / Compile / Run / Debug) (4) \u00b6 You will see a sample main with empty body DevCpp (Install / Compile / Run / Debug) (5) \u00b6 #include <stdio.h> #include <stdlib.h> /* run this program using the console pauser or add your own getch, s,ystem(\"pause\") or input loop */ int main ( int argc , char * argv []) { retAdd 0 ; } DevCpp (Install / Compile / Run / Debug) (6) \u00b6 add the following line in main function. This will write \"Hello, World!\" on the screen and then wait a keypress to exit from application #include <stdio.h> #include <stdlib.h> /* run this program using the console pauser or add your own getch, system(\"pause\") or input loop */ int main ( int argc , char * argv []) { printf ( \"Hello, World!\" ); getchar (); return 0 ; } DevCpp (Install / Compile / Run / Debug) (7) \u00b6 Then save the file DevCpp (Install / Compile / Run / Debug) (8) \u00b6 Use from menu Execute->Compile F5 to generate Hello.exe DevCpp (Install / Compile / Run / Debug) (9) \u00b6 You can find the generated Hello.exe path from Compile.log as follow. Check the Output Filename Compiling project changes... -------- - Project Filename: E:\\UgurCoruh\\RTEU\\Lectures\\2021-2022 G\u00fcz CE103 - Algorithms and Programming I\\Lectures\\ce103-algorithms-and-programming-I\\Week-2\\devcpp-hello-world-apps\\Hello.dev - Compiler Name: TDM-GCC 4.9.2 64-bit Release Building makefile... -------- - Filename: E:\\UgurCoruh\\RTEU\\Lectures\\2021-2022 G\u00fcz CE103 - Algorithms and Programming I\\Lectures\\ce103-algorithms-and-programming-I\\Week-2\\devcpp-hello-world-apps\\Makefile.win Processing makefile... -------- - Makefile Processor: C:\\Program Files (x86)\\Dev-Cpp\\MinGW64\\bin\\mingw32-make.exe - Command: mingw32-make.exe -f \"E:\\UgurCoruh\\RTEU\\Lectures\\2021-2022 G\u00fcz CE103 - Algorithms and Programming I\\Lectures\\ce103-algorithms-and-programming-I\\Week-2\\devcpp-hello-world-apps\\Makefile.win\" all gcc.exe -c main.c -o main.o -I \"C:/Program Files (x86)/Dev-Cpp/MinGW64/include\" -I \"C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include\" -I \"C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include\" gcc.exe main.o -o Hello.exe -L \"C:/Program Files (x86)/Dev-Cpp/MinGW64/lib\" -L \"C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/lib\" -static-libgcc Compilation results... -------- - Errors: 0 - Warnings: 0 - Output Filename: E:\\UgurCoruh\\RTEU\\Lectures\\2021-2022 G\u00fcz CE103 - Algorithms and Programming I\\Lectures\\ce103-algorithms-and-programming-I\\Week-2\\devcpp-hello-world-apps\\Hello.exe - Output Size: 128,103515625 KiB - Compilation Time: 2,13s DevCpp (Install / Compile / Run / Debug) (10) \u00b6 Then you can run with Execute->Run F10 or Directly Compile&Run F11 DevCpp (Install / Compile / Run / Debug) (11) \u00b6 for debugging operations, just change the code and add more statements as follow #include <stdio.h> #include <stdlib.h> /* run this program using the console pauser or add your getch, system(\",pause\") or input loop */ int main ( int argc , char * argv []) { printf ( \"Hello, World! Step-1 \\n \" ); printf ( \"Hello, World! Step-2 \\n \" ); printf ( \"Hello, World! Step-3 \\n \" ); printf ( \"Hello, World! Step-4 \\n \" ); printf ( \"Hello, World! Step-5 \\n \" ); printf ( \"Hello, World! Step-6 \\n \" ); getchar (); return 0 ; } DevCpp (Install / Compile / Run / Debug) (12) \u00b6 Click on line numbers and add breakpoints for debugger. This red point will be debugger stop points DevCpp (Install / Compile / Run / Debug) (13) \u00b6 In the ,menu section select compiler with debug option DevCpp (Install / Compile / Run / Debug) (14) \u00b6 Compile application with debug setting and in Execute Section use Debug F5 to start debugging DevCpp (Install / Compile / Run / Debug) (15) \u00b6 Debugger will stop at breakpoint at the debug point (blue line) DevCpp (Install / Compile / Run / Debug) (16) \u00b6 Moving to next statement can be done via control buttons or shortcuts DevCpp (Install / Compile / Run / Debug) (17) \u00b6 Press F8 to step-by-step continue Then go to Project Options - Compiler - Linker and set Generate debugging information to \"yes\", and make sure you are not using any optimization options (they're not good for debug mode). Also check the Parameters tab, make sure you don't have any optimization options (like -O2 or -O3, but -O0 is ok because it means no optimization) or strip option (-s). DevCpp (Install / Compile / Run / Debug) (18) \u00b6 After that, do a full rebuild (Ctrl-F11), then set breakpoint(s) where you want the debugger to stop (otherwise it will just run the program). To set a breakpoint on a line, just click on the gutter (the gray band on the left), or press Ctrl-F5. DevCpp (Install / Compile / Run / Debug) (19) \u00b6 Now you are ready to launch the debugger, by pressing F8 or clicking the debug button. If everything goes well, the program will start, and then stop at the first breakpoint. Then you can step through the code, entering function calls, by pressing Shift-F7 or the \"step into\" button, or stepping over the function calls, by pressing F7 or the \"next step\" button. You can press Ctrl-F7 or the \"continue\" button to continue execution till the next breakpoint. At any time, you can add or remove breakpoints. DevCpp (Install / Compile / Run / Debug) (20) \u00b6 When the program stopped at a breakpoint and you are stepping through the code, you can display the values of various variables in your program by putting your mouse over them, or you can display variables and expressions by pressing F4 or the \"add watch\" button and typing the expression. DevCpp (Install / Compile / Run / Debug) (21) \u00b6 How do I debug using Dev-C++ Code Blocks (Install / Compile / Run / Debug) (1) \u00b6 Download Code Blocks from the following link Binary releases - Code::Blocks Code Blocks (Install / Compile / Run / Debug) (2) \u00b6 Open Code Blocks and Select File->New->Project Code Blocks (Install / Compile / Run / Debug) (3) \u00b6 Select Console Application Click Next from Opening Window Code Blocks (Install / Compile / Run / Debug) (4) \u00b6 Select C for Sample Project Code Blocks (Install / Compile / Run / Debug) (5) \u00b6 Write a project name and title also set a project folder Code Blocks (Install / Compile / Run / Debug) (6) \u00b6 Select complier for this project we selected GCC but you can select C compliers from list. Set Debug and Release executable output folders. Code Blocks (Install / Compile / Run / Debug) (7) \u00b6 After this wizard you will have the following code #include <stdio.h> #include <stdlib.h> int main () { printf ( \"Hello world! \\n \" ); return 0 ; } Code Blocks (Install / Compile / Run / Debug) (8) \u00b6 Select Debug Build from menu Code Blocks (Install / Compile / Run / Debug) (9) \u00b6 Run with Build and Run F9 Code Blocks (Install / Compile / Run / Debug) (10) \u00b6 You should see the following output Code Blocks (Install / Compile / Run / Debug) (11) \u00b6 Add the following lines to your source code for debugging #include <stdio.h> #include <stdlib.h> int main () { printf ( \"Hello world! Step-1 \\n \" ); printf ( \"Hello world! Step-2 \\n \" ); printf ( \"Hello world! Step-3 \\n \" ); printf ( \"Hello world! Step-4 \\n \" ); printf ( \"Hello world! Step-5 \\n \" ); printf ( \"Hello world! Step-6 \\n \" ); return 0 ; } Code Blocks (Install / Compile / Run / Debug) (12) \u00b6 and add break points with F5 or mouse click Code Blocks (Install / Compile / Run / Debug) (13) \u00b6 select Debug->Start/Continue to start debugger Code Blocks (Install / Compile / Run / Debug) (14) \u00b6 If you see the following error this is related with long or turkish character including path. Just move project to a shorter path and try again Setting breakpoints Debugger name and version: GNU gdb (GDB) 8.1 Starting the debuggee failed: No executable specified, use `target exec'. Debugger finished with status 0 Code Blocks (Install / Compile / Run / Debug) (15) \u00b6 You will see the following yellow pointer for debugger Code Blocks (Install / Compile / Run / Debug) (16) \u00b6 You can use the following menu or shortcuts for step-by-step debugging. GCC/G++ Complier (MinGW) / Clang-cl (LLVM) (1) \u00b6 Download and install MinGW or LLVM compiler (if you downloded then skip this step) MinGW installer (clang) Download MinGW-w64 - for 32 and 64 bit Windows from SourceForge.net LLVM installer (gcc / g++) Download LLVM releases Also use the following notes https://llvm.org/devmtg/2014-04/PDFs/Talks/clang-cl.pdf GCC/G++ Complier (MinGW) / Clang-cl (LLVM) (2) \u00b6 Open a console with \"cmd\" and test the following commands if commands are not recognized then set the system environment variable add gcc and g++ exe paths to path variable (add to both system and user path variable) gcc --version g++ --version C : \\Users\\ugur.coruh >gcc --version gcc (x86_64-win32-seh-rev0, Built by MinGW-W64 project) 8.1.0 Copyright (C) 2018 Free Software Foundation, Inc. This is free software; see the source for copying conditions. There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. clang --version GCC/G++ Complier (MinGW) / Clang-cl (LLVM) (3) \u00b6 for gcc.exe, g++.exe and gdb.exe C: \\P rogram Files \\m ingw-w64 \\x 86_64-8.1.0-win32-seh-rt_v6-rev0 \\m ingw64 \\b in for clang.exe , lldb.exe C : \\Program Files\\LLVM\\bin This folder paths changes according to your setup VSCode (Install / Compile / Run / Debug) (1) \u00b6 Download Visual Studio Code from the following link Download Visual Studio Code - Mac, Linux, Windows VSCode (Install / Compile / Run / Debug) (2) \u00b6 In this sample you will find MinGW and LLVM compiler combinations for C and C++ Create a folder and enter this folder then open this folder with vscode by right click VSCode (Install / Compile / Run / Debug) (3) \u00b6 or enter the folder via console write code . VSCode (Install / Compile / Run / Debug) (4) \u00b6 This will open vscode for current folder . dot present current folder. You will see a empty folder in the right window VSCode (Install / Compile / Run / Debug) (5) \u00b6 VSCode (Install / Compile / Run / Debug) (6) \u00b6 Create a hello.c file and write following content #include <stdio.h> int main () { // printf() displays the string inside quotation printf ( \"Hello, World!\" ); return 0 ; } VSCode (Install / Compile / Run / Debug) (7) \u00b6 use CTRL+SHIFT+B (you should be on source code section) to build file VSCode (Install / Compile / Run / Debug) (8) \u00b6 Select GCC or CLANG for this sample we can use GCC You will see output generated Hello.exe VSCode (Install / Compile / Run / Debug) (9) \u00b6 for debugging just put breakpoint and build again VSCode (Install / Compile / Run / Debug) (10) \u00b6 after build for debug press CTRL+SHIFT+D (you should be on source code section)and in the right window select create launch.json VSCode (Install / Compile / Run / Debug) (11) \u00b6 from opening window select C++ GDB/LLDB VSCode (Install / Compile / Run / Debug) (12) \u00b6 from next opening menu select mingw-w64 gcc.exe VSCode (Install / Compile / Run / Debug) (13) \u00b6 this will run debugger and you will see debug points activated VSCode (Install / Compile / Run / Debug) (14) \u00b6 then you can step-by-step debug your code. the following task.json and launch.json automatically generated with your selections VSCode (Install / Compile / Run / Debug) (15) \u00b6 launch.json { // Olas\u0131 \u00f6znitelikler hakk\u0131nda bilgi edinmek i\u00e7in IntelliSense kullan\u0131n. // Mevcut \u00f6zniteliklerin a\u00e7\u0131klamalar\u0131n\u0131 g\u00f6r\u00fcnt\u00fclemek i\u00e7in \u00fczerine gelin. // Daha fazla bilgi i\u00e7in \u015fu adresi ziyaret edin: https://go.microsoft.com/fwlink/?linkid=830387 \"version\" : \"0.2.0\" , \"configurations\" : [ { \"name\" : \"gcc.exe - Etkin dosyay\u0131 derle ve dosyada hata ay\u0131kla\" , \"type\" : \"cppdbg\" , \"request\" : \"launch\" , \"program\" : \"${fileDirname}\\\\${fileBasenameNoExtension}.exe\" , \"args\" : [], \"stopAtEntry\" : false , \"cwd\" : \"${fileDirname}\" , \"environment\" : [], \"externalConsole\" : false , \"MIMode\" : \"gdb\" , \"miDebuggerPath\" : \"C:\\\\Program Files\\\\mingw-w64\\\\x86_64-8.1.0-win32-seh-rt_v6-rev0\\\\mingw64\\\\bin\\\\gdb.exe\" , \"setupCommands\" : [ { \"description\" : \"gdb i\u00e7in d\u00fczg\u00fcn yazd\u0131rmay\u0131 etkinle\u015ftir\" , \"text\" : \"-enable-pretty-printing\" , \"ignoreFailures\" : true } ], \"preLaunchTask\" : \"C/C++: gcc.exe etkin dosyay\u0131 derle\" } ] } VSCode (Install / Compile / Run / Debug) (16) \u00b6 task.json { \"tasks\" : [ { \"type\" : \"cppbuild\" , \"label\" : \"C/C++: gcc.exe etkin dosyay\u0131 derle\" , \"command\" : \"C:\\\\Program Files\\\\mingw-w64\\\\x86_64-8.1.0-win32-seh-rt_v6-rev0\\\\mingw64\\\\bin\\\\gcc.exe\" , \"args\" : [ \"-fdiagnostics-color=always\" , \"-g\" , \"${file}\" , \"-o\" , \"${fileDirname}\\\\${fileBasenameNoExtension}.exe\" ], \"options\" : { \"cwd\" : \"${fileDirname}\" }, \"problemMatcher\" : [ \"$gcc\" ], \"group\" : { \"kind\" : \"build\" , \"isDefault\" : true }, \"detail\" : \"Hata Ay\u0131klay\u0131c\u0131s\u0131 taraf\u0131ndan olu\u015fturulan g\u00f6rev.\" } ], \"version\" : \"2.0.0\" } VSCode (Install / Compile / Run / Debug) (17) \u00b6 you can do the same thing for other compilers and c++ source codes. LLVM do not support debug on vscode now. for C++ VsCode you can check the following links for Windows https://code.visualstudio.com/docs/cpp/config-mingw for Linux https://code.visualstudio.com/docs/cpp/config-linux for WSL https://code.visualstudio.com/docs/cpp/config-wsl VSCode (Install / Compile / Run / Debug) (18) \u00b6 in the launch file if you start debugging with F5 (you can select debugger with CTRL+SHIFT+P and then writing Debug and Selecting Configure Debugger Option) VSCode (Install / Compile / Run / Debug) (19) \u00b6 following line will be your debugging application path if you start debugging with F5 in Hello.c file this will set <Hello.c base path>/Hello.exe VSCode (Install / Compile / Run / Debug) (20) \u00b6 You should set this correct for both LLVM and GCC configuration in launch.json \"program\": \"${fileDirname}\\\\${fileBasenameNoExtension}.exe\", Also you should set your installed debugger paths for GCC \"miDebuggerPath\": \"C:\\\\Program Files\\\\mingw-w64\\\\x86_64-8.1.0-win32-seh-rt_v6-rev0\\\\mingw64\\\\bin\\\\gdb.exe\", for LLVM \"miDebuggerPath\": \"C:\\\\Program Files\\\\LLVM\\\\bin\\\\lldb.exe\", for more details please check the sample source codes. Visual Studio Community Edition (Install / Compile / Run / Debug) \u00b6 //TODO// Notepad++ (Install / Compile ) (1) \u00b6 Please download Notepad++ from the following link Downloads | Notepad++ Notepad++ (Install / Compile ) (2) \u00b6 Download and install MinGW or LLVM compiler (if you downloded then skip this step) MinGW installer (clang) Download MinGW-w64 - for 32 and 64 bit Windows from SourceForge.net LLVM installer (gcc / g++) Download LLVM releases Also use the following notes https://llvm.org/devmtg/2014-04/PDFs/Talks/clang-cl.pdf Notepad++ (Install / Compile ) (3) \u00b6 Open a console with \"cmd\" and test the following commands if commands are not recognized then set the system environment variable add gcc and g++ exe paths to path variable (add to both system and user path variable) gcc --version g++ --version C : \\Users\\ugur.coruh >gcc --version gcc (x86_64-win32-seh-rev0, Built by MinGW-W64 project) 8.1.0 Copyright (C) 2018 Free Software Foundation, Inc. This is free software; see the source for copying conditions. There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. Notepad++ (Install / Compile ) (4) \u00b6 Notepad++ (Install / Compile ) (5) \u00b6 Notepad++ (Install / Compile ) (6) \u00b6 Notepad++ (Install / Compile ) (7) \u00b6 Notepad++ (Install / Compile ) (8) \u00b6 Notepad++ (Install / Compile ) (9) \u00b6 Notepad++ (Install / Compile ) (10) \u00b6 for gcc.exe, g++.exe and gdb.exe C: \\P rogram Files \\m ingw-w64 \\x 86_64-8.1.0-win32-seh-rt_v6-rev0 \\m ingw64 \\b in Notepad++ (Install / Compile ) (11) \u00b6 for clang.exe , lldb.exe C : \\Program Files\\LLVM\\bin Notepad++ (Install / Compile ) (12) \u00b6 This folder paths changes according to your setup Open NppExec extension (install from extension manager if not exist) Notepad++ (Install / Compile ) (13) \u00b6 write the following commands in box NPP_SAVE // save current file cd $(CURRENT_DIRECTORY) // go to directory of the current file gcc -Wall -Wextra -Wpedantic -std=c++11 -o \"$(NAME_PART)\" \"$(FILE_NAME)\" Notepad++ (Install / Compile ) (14) \u00b6 save script as gcc-build and for more information check the following link How To Setup Notepad for Writing C++ Programs You can modify or add multiple scripts for another tasks. Vi/Vim (C/C++) \u00b6 //TODO// Eclipse (C/C++) \u00b6 //TODO// Netbeans (C/C++) \u00b6 //TODO// Turbo C++/C \u00b6 //TODO// Cmake (C++/C) (1) \u00b6 CMake ( http://www.cmake.org/ ) is a program which generates the Makefiles used by Make . Cmake (C++/C) (2) \u00b6 Why use CMake ? Eases Make use but the same way of thinking generate the Makefile Separate the compilation from the sources Multi-platfoms Very flexible Cmake (C++/C) (3) \u00b6 Check if the libraries/programs are available on your system File generator ( configure_file ) Calling programs or scripts ( doxygen ) One of the new standards Cmake (C++/C) (4) (Download and Install) \u00b6 use the following link for download Download | CMake Cmake (C++/C) (5) (WSL and Linux Environment) \u00b6 Hello world with CMake Cmake (C++/C) (6) (Windows Environment) \u00b6 main.c #include <stdio.h> int main () { char name [ 20 ]; printf ( \"Enter name: \" ); scanf ( \"%s\" , name ); printf ( \"Your name is %s.\" , name ); return 0 ; } CMakeLists.txt cmake_minimum_required ( VERSION 3.7.2 ) project ( scanf-sample ) add_executable ( scanf-sample main.c ) Cmake (C++/C) (7) (Windows Environment) \u00b6 put main.c and CMakeLists.txt file in sample-scanf folder and from command line run the following cmake command with dot (.) to create solution file for c project C : \\Users\\ugur.coruh\\Desktop\\sample-scanf >cmake . Cmake (C++/C) (8) (Windows Environment) \u00b6 I have Visual Studio 2022 Community Edition Installed on My Computer, for these reason build tools are selected for visual studio environment and the following outputs are generated C : \\Users\\ugur.coruh\\Desktop\\sample-scanf >cmake . -- Building for: Visual Studio 17 2022 -- Selecting Windows SDK version 10.0.22000.0 to target Windows 10.0.19043. -- The C compiler identification is MSVC 19.30.30704.0 -- The CXX compiler identification is MSVC 19.30.30704.0 -- Detecting C compiler ABI info -- Detecting C compiler ABI info - done -- Check for working C compiler: C:/Program Files/Microsoft Visual Studio/2022/Community/VC/Tools/MSVC/14.30.30704/bin/Hostx64/x64/cl.exe - skipped -- Detecting C compile features -- Detecting C compile features - done -- Detecting CXX compiler ABI info -- Detecting CXX compiler ABI info - done -- Check for working CXX compiler: C:/Program Files/Microsoft Visual Studio/2022/Community/VC/Tools/MSVC/14.30.30704/bin/Hostx64/x64/cl.exe - skipped -- Detecting CXX compile features -- Detecting CXX compile features - done -- Configuring done -- Generating done -- Build files have been written to: C:/Users/ugur.coruh/Desktop/sample-scanf C : \\Users\\ugur.coruh\\Desktop\\sample-scanf > Cmake (C++/C) (9) (Windows Environment) \u00b6 also following files are generated Cmake (C++/C) (10) (Windows Environment) \u00b6 if we open scanf-sample.sln file we will have automated generated project files Cmake (C++/C) (11) (Windows Environment) \u00b6 you can make scanf-sample with startup project with right click and then run on visual studio. if you want to configure for another build tool you can use Cmake-GUI installed with setup on your computer Cmake (C++/C) (12) (Windows Environment) \u00b6 Open GUI and Select File-> Delete Cache Cmake (C++/C) (13) (Windows Environment) \u00b6 then you can click \"Configure\" to select build tool Cmake (C++/C) (14) (Windows Environment) \u00b6 Cmake (C++/C) (15) (Windows Environment) \u00b6 if you click \"Configure\" twice it will generate the visual studio solution in build folder for more detailed examples that include also docker and travis-ci sample you can check the following repo GitHub - ttroy50/cmake-examples: Useful CMake Examples Make (1) \u00b6 Sample hello.c #include <stdio.h> int main ( void ) { printf ( \"hello, world \\n \" ); } Make (2) \u00b6 Makefile # This is the default target, which will be built when # you invoke make .PHONY : all all : hello # This rule tells make how to build hello from hello.cpp hello : hello . c g++ -o hello hello.c # This rule tells make to copy hello to the binaries subdirectory, # creating it if necessary .PHONY : install install : mkdir -p binaries cp -p hello binaries # This rule tells make to delete hello and hello.o .PHONY : clean clean : rm -f hello Make (3) \u00b6 compile.bat make all . will create hello.exe check hello-make sample JAVA Environment and Development \u00b6 //TODO// JDK and JRE Setup \u00b6 //TODO// System Environments and Paths for Java \u00b6 //TODO// Netbeans (Java) \u00b6 //TODO// Eclipse (Java) \u00b6 //TODO// Intellij Idea (Jet Brains) (Java) \u00b6 //TODO// VSCode (Java) \u00b6 //TODO// Notepad++ (Java) \u00b6 //TODO// Cmake (Java) \u00b6 ASTERICS_HPC C# Environment and Development \u00b6 Visual Studio Community Edition (C#) \u00b6 //TODO// Notepad++ (C#) \u00b6 //TODO// Cmake (C#) \u00b6 Outline Common Tools and Platforms \u00b6 Fatih Kalem \u00b6 https://cdnvideo.eba.gov.tr/fatihkalem/fatihkalem_portable.zip https://cdnvideo.eba.gov.tr/fatihkalem/fatihkalem_setup.exe Notepad++ (Notepad for Source Code) \u00b6 Downloads | Notepad++ HxD (Hex Editor) \u00b6 HxD - Freeware Hex Editor and Disk Editor | mh-nexus Marktext (Markdown Syntax Editor) \u00b6 https://marktext.app/ Cygwin (Linux environment for Windows) \u00b6 https://www.cygwin.com/ Dependency Walker (32-bit or 64-bit Windows module dependency checker) \u00b6 https://www.dependencywalker.com/ Doxygen (Code Documentation) \u00b6 Doxygen: Doxygen Sonarlint (Code Quality and Code Security Extension) \u00b6 https://www.sonarlint.org/ Codepen.io (online code sharing) \u00b6 https://codepen.io/ Credit Card Sample https://codepen.io/quinlo/pen/YONMEa Codeshare.io (real time code sharing) \u00b6 https://codeshare.io/ Codebeautify.org (online data conversion tools) \u00b6 https://codebeautify.org/ AsciiFlow.com (ASCII drawing tool) \u00b6 //TODO// Freemind (opensource mindmap application) \u00b6 //TODO// Wireflow (user flow designer) \u00b6 //TODO// PlantUML (software designer) \u00b6 //TODO// Drawio (drawing tool) \u00b6 //TODO// Putty (Remote Connection) \u00b6 //TODO// MobaXterm (Remote Connection) \u00b6 //TODO// Teamviewer (Remote Connection) \u00b6 //TODO// Paletton.com (Color Chooser) \u00b6 //TODO// \u00b6 Understand (Static Code Analysis) \u00b6 //TODO// JD Project (Java Decompiler) \u00b6 //TODO// Cutter (Multi-Platform Reverse Engineering Tool) \u00b6 //TODO// IDA Pro / Freeware (Native Reverse Engineering Tool) \u00b6 //TODO// Code Visualization (Python, C , C++ , Java) \u00b6 https://pythontutor.com/ //TODO// Assembly of C Code \u00b6 https://godbolt.org/ //TODO// Mobile Device Screen Sharing for Demo \u00b6 GitHub - Genymobile/scrcpy: Display and control your Android device Travis-CI \u00b6 Travis.yml //TODO// Jenkins \u00b6 //TODO// Valgrind \u00b6 //TODO// Docker \u00b6 - https://www.youtube.com/watch?v=nBwJm0onzeo&ab_channel=GaryExplains Dockerfile DockerHub Docker Compose Yaml Dockerrun.aws.json (AWS) //TODO// Nuget Packages \u00b6 //TODO// Vim for Windows \u00b6 vim/vim-wim32-installer (windows vim installer) //TODO// SCV Cryptomanager \u00b6 //TODO// Addario CryptoBench \u00b6 //TODO// Raymond's MD5 & SHA Checksum Utility \u00b6 //TODO// SlavaSoft HashCalc \u00b6 //TODO// Portable PGP \u00b6 //TODO// Online Programming Envoriments \u00b6 i. Hackerrank ii. CS50 Sandbox iii. Programiz C Online Complier //TODO//","title":"Week-2 (Development Environments)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#flowgorithm","text":"http://www.flowgorithm.org/","title":"Flowgorithm"},{"location":"tr/week-2-setup/ce103-week-2-setup/#pseudocode","text":"Pseudocode - Wikipedia Pseudocode Examples How to write a Pseudo Code? - GeeksforGeeks","title":"Pseudocode"},{"location":"tr/week-2-setup/ce103-week-2-setup/#introduction-to-analysis-of-algorithms","text":"In this course we will learn how to code with several development environments and next term we will see analysis of algorithms in details. This topic is covered in the following link : CE100 Introduction to Analysis of Algorithms","title":"Introduction to Analysis of Algorithms"},{"location":"tr/week-2-setup/ce103-week-2-setup/#programming-environment-setup-and-configuration","text":"Programming life is not about only learning how to code. Mostly you need to use several code development environments and you need to learn how to use them efficiently.","title":"Programming Environment Setup and Configuration"},{"location":"tr/week-2-setup/ce103-week-2-setup/#c-c-environment-and-development","text":"","title":"C / C++ Environment and Development"},{"location":"tr/week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-1","text":"Download DevC++ IDE from following link https://www.bloodshed.net/","title":"DevCpp (Install / Compile / Run / Debug) (1)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-2","text":"Open DevC++ IDE for C Project Generation Open File->New->Project","title":"DevCpp (Install / Compile / Run / Debug) (2)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-3","text":"Select Console Application from Basic tab and with C Project Option and write a project name such as \" Hello \" then press OK Select a folder and save Hello.dev project file.","title":"DevCpp (Install / Compile / Run / Debug) (3)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-4","text":"You will see a sample main with empty body","title":"DevCpp (Install / Compile / Run / Debug) (4)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-5","text":"#include <stdio.h> #include <stdlib.h> /* run this program using the console pauser or add your own getch, s,ystem(\"pause\") or input loop */ int main ( int argc , char * argv []) { retAdd 0 ; }","title":"DevCpp (Install / Compile / Run / Debug) (5)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-6","text":"add the following line in main function. This will write \"Hello, World!\" on the screen and then wait a keypress to exit from application #include <stdio.h> #include <stdlib.h> /* run this program using the console pauser or add your own getch, system(\"pause\") or input loop */ int main ( int argc , char * argv []) { printf ( \"Hello, World!\" ); getchar (); return 0 ; }","title":"DevCpp (Install / Compile / Run / Debug) (6)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-7","text":"Then save the file","title":"DevCpp (Install / Compile / Run / Debug) (7)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-8","text":"Use from menu Execute->Compile F5 to generate Hello.exe","title":"DevCpp (Install / Compile / Run / Debug) (8)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-9","text":"You can find the generated Hello.exe path from Compile.log as follow. Check the Output Filename Compiling project changes... -------- - Project Filename: E:\\UgurCoruh\\RTEU\\Lectures\\2021-2022 G\u00fcz CE103 - Algorithms and Programming I\\Lectures\\ce103-algorithms-and-programming-I\\Week-2\\devcpp-hello-world-apps\\Hello.dev - Compiler Name: TDM-GCC 4.9.2 64-bit Release Building makefile... -------- - Filename: E:\\UgurCoruh\\RTEU\\Lectures\\2021-2022 G\u00fcz CE103 - Algorithms and Programming I\\Lectures\\ce103-algorithms-and-programming-I\\Week-2\\devcpp-hello-world-apps\\Makefile.win Processing makefile... -------- - Makefile Processor: C:\\Program Files (x86)\\Dev-Cpp\\MinGW64\\bin\\mingw32-make.exe - Command: mingw32-make.exe -f \"E:\\UgurCoruh\\RTEU\\Lectures\\2021-2022 G\u00fcz CE103 - Algorithms and Programming I\\Lectures\\ce103-algorithms-and-programming-I\\Week-2\\devcpp-hello-world-apps\\Makefile.win\" all gcc.exe -c main.c -o main.o -I \"C:/Program Files (x86)/Dev-Cpp/MinGW64/include\" -I \"C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include\" -I \"C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include\" gcc.exe main.o -o Hello.exe -L \"C:/Program Files (x86)/Dev-Cpp/MinGW64/lib\" -L \"C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/lib\" -static-libgcc Compilation results... -------- - Errors: 0 - Warnings: 0 - Output Filename: E:\\UgurCoruh\\RTEU\\Lectures\\2021-2022 G\u00fcz CE103 - Algorithms and Programming I\\Lectures\\ce103-algorithms-and-programming-I\\Week-2\\devcpp-hello-world-apps\\Hello.exe - Output Size: 128,103515625 KiB - Compilation Time: 2,13s","title":"DevCpp (Install / Compile / Run / Debug) (9)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-11","text":"for debugging operations, just change the code and add more statements as follow #include <stdio.h> #include <stdlib.h> /* run this program using the console pauser or add your getch, system(\",pause\") or input loop */ int main ( int argc , char * argv []) { printf ( \"Hello, World! Step-1 \\n \" ); printf ( \"Hello, World! Step-2 \\n \" ); printf ( \"Hello, World! Step-3 \\n \" ); printf ( \"Hello, World! Step-4 \\n \" ); printf ( \"Hello, World! Step-5 \\n \" ); printf ( \"Hello, World! Step-6 \\n \" ); getchar (); return 0 ; }","title":"DevCpp (Install / Compile / Run / Debug) (11)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-12","text":"Click on line numbers and add breakpoints for debugger. This red point will be debugger stop points","title":"DevCpp (Install / Compile / Run / Debug) (12)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-13","text":"In the ,menu section select compiler with debug option","title":"DevCpp (Install / Compile / Run / Debug) (13)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-14","text":"Compile application with debug setting and in Execute Section use Debug F5 to start debugging","title":"DevCpp (Install / Compile / Run / Debug) (14)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-15","text":"Debugger will stop at breakpoint at the debug point (blue line)","title":"DevCpp (Install / Compile / Run / Debug) (15)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-16","text":"Moving to next statement can be done via control buttons or shortcuts","title":"DevCpp (Install / Compile / Run / Debug) (16)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-17","text":"Press F8 to step-by-step continue Then go to Project Options - Compiler - Linker and set Generate debugging information to \"yes\", and make sure you are not using any optimization options (they're not good for debug mode). Also check the Parameters tab, make sure you don't have any optimization options (like -O2 or -O3, but -O0 is ok because it means no optimization) or strip option (-s).","title":"DevCpp (Install / Compile / Run / Debug) (17)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-18","text":"After that, do a full rebuild (Ctrl-F11), then set breakpoint(s) where you want the debugger to stop (otherwise it will just run the program). To set a breakpoint on a line, just click on the gutter (the gray band on the left), or press Ctrl-F5.","title":"DevCpp (Install / Compile / Run / Debug) (18)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-19","text":"Now you are ready to launch the debugger, by pressing F8 or clicking the debug button. If everything goes well, the program will start, and then stop at the first breakpoint. Then you can step through the code, entering function calls, by pressing Shift-F7 or the \"step into\" button, or stepping over the function calls, by pressing F7 or the \"next step\" button. You can press Ctrl-F7 or the \"continue\" button to continue execution till the next breakpoint. At any time, you can add or remove breakpoints.","title":"DevCpp (Install / Compile / Run / Debug) (19)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-20","text":"When the program stopped at a breakpoint and you are stepping through the code, you can display the values of various variables in your program by putting your mouse over them, or you can display variables and expressions by pressing F4 or the \"add watch\" button and typing the expression.","title":"DevCpp (Install / Compile / Run / Debug) (20)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-21","text":"How do I debug using Dev-C++","title":"DevCpp (Install / Compile / Run / Debug) (21)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-1","text":"Download Code Blocks from the following link Binary releases - Code::Blocks","title":"Code Blocks (Install / Compile / Run / Debug) (1)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-2","text":"Open Code Blocks and Select File->New->Project","title":"Code Blocks (Install / Compile / Run / Debug) (2)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-3","text":"Select Console Application Click Next from Opening Window","title":"Code Blocks (Install / Compile / Run / Debug) (3)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-4","text":"Select C for Sample Project","title":"Code Blocks (Install / Compile / Run / Debug) (4)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-5","text":"Write a project name and title also set a project folder","title":"Code Blocks (Install / Compile / Run / Debug) (5)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-6","text":"Select complier for this project we selected GCC but you can select C compliers from list. Set Debug and Release executable output folders.","title":"Code Blocks (Install / Compile / Run / Debug) (6)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-7","text":"After this wizard you will have the following code #include <stdio.h> #include <stdlib.h> int main () { printf ( \"Hello world! \\n \" ); return 0 ; }","title":"Code Blocks (Install / Compile / Run / Debug) (7)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-8","text":"Select Debug Build from menu","title":"Code Blocks (Install / Compile / Run / Debug) (8)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-9","text":"Run with Build and Run F9","title":"Code Blocks (Install / Compile / Run / Debug) (9)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-10","text":"You should see the following output","title":"Code Blocks (Install / Compile / Run / Debug) (10)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-11","text":"Add the following lines to your source code for debugging #include <stdio.h> #include <stdlib.h> int main () { printf ( \"Hello world! Step-1 \\n \" ); printf ( \"Hello world! Step-2 \\n \" ); printf ( \"Hello world! Step-3 \\n \" ); printf ( \"Hello world! Step-4 \\n \" ); printf ( \"Hello world! Step-5 \\n \" ); printf ( \"Hello world! Step-6 \\n \" ); return 0 ; }","title":"Code Blocks (Install / Compile / Run / Debug) (11)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-12","text":"and add break points with F5 or mouse click","title":"Code Blocks (Install / Compile / Run / Debug) (12)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-13","text":"select Debug->Start/Continue to start debugger","title":"Code Blocks (Install / Compile / Run / Debug) (13)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-14","text":"If you see the following error this is related with long or turkish character including path. Just move project to a shorter path and try again Setting breakpoints Debugger name and version: GNU gdb (GDB) 8.1 Starting the debuggee failed: No executable specified, use `target exec'. Debugger finished with status 0","title":"Code Blocks (Install / Compile / Run / Debug) (14)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-15","text":"You will see the following yellow pointer for debugger","title":"Code Blocks (Install / Compile / Run / Debug) (15)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-16","text":"You can use the following menu or shortcuts for step-by-step debugging.","title":"Code Blocks (Install / Compile / Run / Debug) (16)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#gccg-complier-mingw-clang-cl-llvm-1","text":"Download and install MinGW or LLVM compiler (if you downloded then skip this step) MinGW installer (clang) Download MinGW-w64 - for 32 and 64 bit Windows from SourceForge.net LLVM installer (gcc / g++) Download LLVM releases Also use the following notes https://llvm.org/devmtg/2014-04/PDFs/Talks/clang-cl.pdf","title":"GCC/G++ Complier (MinGW) / Clang-cl (LLVM) (1)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#gccg-complier-mingw-clang-cl-llvm-2","text":"Open a console with \"cmd\" and test the following commands if commands are not recognized then set the system environment variable add gcc and g++ exe paths to path variable (add to both system and user path variable) gcc --version g++ --version C : \\Users\\ugur.coruh >gcc --version gcc (x86_64-win32-seh-rev0, Built by MinGW-W64 project) 8.1.0 Copyright (C) 2018 Free Software Foundation, Inc. This is free software; see the source for copying conditions. There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. clang --version","title":"GCC/G++ Complier (MinGW) / Clang-cl (LLVM) (2)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#gccg-complier-mingw-clang-cl-llvm-3","text":"for gcc.exe, g++.exe and gdb.exe C: \\P rogram Files \\m ingw-w64 \\x 86_64-8.1.0-win32-seh-rt_v6-rev0 \\m ingw64 \\b in for clang.exe , lldb.exe C : \\Program Files\\LLVM\\bin This folder paths changes according to your setup","title":"GCC/G++ Complier (MinGW) / Clang-cl (LLVM) (3)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-1","text":"Download Visual Studio Code from the following link Download Visual Studio Code - Mac, Linux, Windows","title":"VSCode (Install / Compile / Run / Debug) (1)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-2","text":"In this sample you will find MinGW and LLVM compiler combinations for C and C++ Create a folder and enter this folder then open this folder with vscode by right click","title":"VSCode (Install / Compile / Run / Debug) (2)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-3","text":"or enter the folder via console write code .","title":"VSCode (Install / Compile / Run / Debug) (3)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-4","text":"This will open vscode for current folder . dot present current folder. You will see a empty folder in the right window","title":"VSCode (Install / Compile / Run / Debug) (4)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-5","text":"","title":"VSCode (Install / Compile / Run / Debug) (5)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-6","text":"Create a hello.c file and write following content #include <stdio.h> int main () { // printf() displays the string inside quotation printf ( \"Hello, World!\" ); return 0 ; }","title":"VSCode (Install / Compile / Run / Debug) (6)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-7","text":"use CTRL+SHIFT+B (you should be on source code section) to build file","title":"VSCode (Install / Compile / Run / Debug) (7)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-8","text":"Select GCC or CLANG for this sample we can use GCC You will see output generated Hello.exe","title":"VSCode (Install / Compile / Run / Debug) (8)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-9","text":"for debugging just put breakpoint and build again","title":"VSCode (Install / Compile / Run / Debug) (9)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-10","text":"after build for debug press CTRL+SHIFT+D (you should be on source code section)and in the right window select create launch.json","title":"VSCode (Install / Compile / Run / Debug) (10)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-11","text":"from opening window select C++ GDB/LLDB","title":"VSCode (Install / Compile / Run / Debug) (11)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-12","text":"from next opening menu select mingw-w64 gcc.exe","title":"VSCode (Install / Compile / Run / Debug) (12)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-13","text":"this will run debugger and you will see debug points activated","title":"VSCode (Install / Compile / Run / Debug) (13)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-14","text":"then you can step-by-step debug your code. the following task.json and launch.json automatically generated with your selections","title":"VSCode (Install / Compile / Run / Debug) (14)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-15","text":"launch.json { // Olas\u0131 \u00f6znitelikler hakk\u0131nda bilgi edinmek i\u00e7in IntelliSense kullan\u0131n. // Mevcut \u00f6zniteliklerin a\u00e7\u0131klamalar\u0131n\u0131 g\u00f6r\u00fcnt\u00fclemek i\u00e7in \u00fczerine gelin. // Daha fazla bilgi i\u00e7in \u015fu adresi ziyaret edin: https://go.microsoft.com/fwlink/?linkid=830387 \"version\" : \"0.2.0\" , \"configurations\" : [ { \"name\" : \"gcc.exe - Etkin dosyay\u0131 derle ve dosyada hata ay\u0131kla\" , \"type\" : \"cppdbg\" , \"request\" : \"launch\" , \"program\" : \"${fileDirname}\\\\${fileBasenameNoExtension}.exe\" , \"args\" : [], \"stopAtEntry\" : false , \"cwd\" : \"${fileDirname}\" , \"environment\" : [], \"externalConsole\" : false , \"MIMode\" : \"gdb\" , \"miDebuggerPath\" : \"C:\\\\Program Files\\\\mingw-w64\\\\x86_64-8.1.0-win32-seh-rt_v6-rev0\\\\mingw64\\\\bin\\\\gdb.exe\" , \"setupCommands\" : [ { \"description\" : \"gdb i\u00e7in d\u00fczg\u00fcn yazd\u0131rmay\u0131 etkinle\u015ftir\" , \"text\" : \"-enable-pretty-printing\" , \"ignoreFailures\" : true } ], \"preLaunchTask\" : \"C/C++: gcc.exe etkin dosyay\u0131 derle\" } ] }","title":"VSCode (Install / Compile / Run / Debug) (15)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-16","text":"task.json { \"tasks\" : [ { \"type\" : \"cppbuild\" , \"label\" : \"C/C++: gcc.exe etkin dosyay\u0131 derle\" , \"command\" : \"C:\\\\Program Files\\\\mingw-w64\\\\x86_64-8.1.0-win32-seh-rt_v6-rev0\\\\mingw64\\\\bin\\\\gcc.exe\" , \"args\" : [ \"-fdiagnostics-color=always\" , \"-g\" , \"${file}\" , \"-o\" , \"${fileDirname}\\\\${fileBasenameNoExtension}.exe\" ], \"options\" : { \"cwd\" : \"${fileDirname}\" }, \"problemMatcher\" : [ \"$gcc\" ], \"group\" : { \"kind\" : \"build\" , \"isDefault\" : true }, \"detail\" : \"Hata Ay\u0131klay\u0131c\u0131s\u0131 taraf\u0131ndan olu\u015fturulan g\u00f6rev.\" } ], \"version\" : \"2.0.0\" }","title":"VSCode (Install / Compile / Run / Debug) (16)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-17","text":"you can do the same thing for other compilers and c++ source codes. LLVM do not support debug on vscode now. for C++ VsCode you can check the following links for Windows https://code.visualstudio.com/docs/cpp/config-mingw for Linux https://code.visualstudio.com/docs/cpp/config-linux for WSL https://code.visualstudio.com/docs/cpp/config-wsl","title":"VSCode (Install / Compile / Run / Debug) (17)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-18","text":"in the launch file if you start debugging with F5 (you can select debugger with CTRL+SHIFT+P and then writing Debug and Selecting Configure Debugger Option)","title":"VSCode (Install / Compile / Run / Debug) (18)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-19","text":"following line will be your debugging application path if you start debugging with F5 in Hello.c file this will set <Hello.c base path>/Hello.exe","title":"VSCode (Install / Compile / Run / Debug) (19)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-20","text":"You should set this correct for both LLVM and GCC configuration in launch.json \"program\": \"${fileDirname}\\\\${fileBasenameNoExtension}.exe\", Also you should set your installed debugger paths for GCC \"miDebuggerPath\": \"C:\\\\Program Files\\\\mingw-w64\\\\x86_64-8.1.0-win32-seh-rt_v6-rev0\\\\mingw64\\\\bin\\\\gdb.exe\", for LLVM \"miDebuggerPath\": \"C:\\\\Program Files\\\\LLVM\\\\bin\\\\lldb.exe\", for more details please check the sample source codes.","title":"VSCode (Install / Compile / Run / Debug) (20)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#visual-studio-community-edition-install-compile-run-debug","text":"//TODO//","title":"Visual Studio Community Edition (Install / Compile / Run / Debug)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#notepad-install-compile-1","text":"Please download Notepad++ from the following link Downloads | Notepad++","title":"Notepad++ (Install / Compile ) (1)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#notepad-install-compile-2","text":"Download and install MinGW or LLVM compiler (if you downloded then skip this step) MinGW installer (clang) Download MinGW-w64 - for 32 and 64 bit Windows from SourceForge.net LLVM installer (gcc / g++) Download LLVM releases Also use the following notes https://llvm.org/devmtg/2014-04/PDFs/Talks/clang-cl.pdf","title":"Notepad++ (Install / Compile ) (2)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#notepad-install-compile-3","text":"Open a console with \"cmd\" and test the following commands if commands are not recognized then set the system environment variable add gcc and g++ exe paths to path variable (add to both system and user path variable) gcc --version g++ --version C : \\Users\\ugur.coruh >gcc --version gcc (x86_64-win32-seh-rev0, Built by MinGW-W64 project) 8.1.0 Copyright (C) 2018 Free Software Foundation, Inc. This is free software; see the source for copying conditions. There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.","title":"Notepad++ (Install / Compile ) (3)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#notepad-install-compile-4","text":"","title":"Notepad++ (Install / Compile ) (4)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#notepad-install-compile-5","text":"","title":"Notepad++ (Install / Compile ) (5)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#notepad-install-compile-6","text":"","title":"Notepad++ (Install / Compile ) (6)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#notepad-install-compile-7","text":"","title":"Notepad++ (Install / Compile ) (7)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#notepad-install-compile-8","text":"","title":"Notepad++ (Install / Compile ) (8)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#notepad-install-compile-9","text":"","title":"Notepad++ (Install / Compile ) (9)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#notepad-install-compile-10","text":"for gcc.exe, g++.exe and gdb.exe C: \\P rogram Files \\m ingw-w64 \\x 86_64-8.1.0-win32-seh-rt_v6-rev0 \\m ingw64 \\b in","title":"Notepad++ (Install / Compile ) (10)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#notepad-install-compile-11","text":"for clang.exe , lldb.exe C : \\Program Files\\LLVM\\bin","title":"Notepad++ (Install / Compile ) (11)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#notepad-install-compile-12","text":"This folder paths changes according to your setup Open NppExec extension (install from extension manager if not exist)","title":"Notepad++ (Install / Compile ) (12)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#notepad-install-compile-13","text":"write the following commands in box NPP_SAVE // save current file cd $(CURRENT_DIRECTORY) // go to directory of the current file gcc -Wall -Wextra -Wpedantic -std=c++11 -o \"$(NAME_PART)\" \"$(FILE_NAME)\"","title":"Notepad++ (Install / Compile ) (13)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#notepad-install-compile-14","text":"save script as gcc-build and for more information check the following link How To Setup Notepad for Writing C++ Programs You can modify or add multiple scripts for another tasks.","title":"Notepad++ (Install / Compile ) (14)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#vivim-cc","text":"//TODO//","title":"Vi/Vim (C/C++)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#eclipse-cc","text":"//TODO//","title":"Eclipse (C/C++)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#netbeans-cc","text":"//TODO//","title":"Netbeans (C/C++)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#turbo-cc","text":"//TODO//","title":"Turbo C++/C"},{"location":"tr/week-2-setup/ce103-week-2-setup/#cmake-cc-1","text":"CMake ( http://www.cmake.org/ ) is a program which generates the Makefiles used by Make .","title":"Cmake (C++/C) (1)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#cmake-cc-2","text":"Why use CMake ? Eases Make use but the same way of thinking generate the Makefile Separate the compilation from the sources Multi-platfoms Very flexible","title":"Cmake (C++/C) (2)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#cmake-cc-3","text":"Check if the libraries/programs are available on your system File generator ( configure_file ) Calling programs or scripts ( doxygen ) One of the new standards","title":"Cmake (C++/C) (3)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#cmake-cc-4-download-and-install","text":"use the following link for download Download | CMake","title":"Cmake (C++/C) (4) (Download and Install)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#cmake-cc-5-wsl-and-linux-environment","text":"Hello world with CMake","title":"Cmake (C++/C) (5) (WSL and Linux Environment)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#cmake-cc-6-windows-environment","text":"main.c #include <stdio.h> int main () { char name [ 20 ]; printf ( \"Enter name: \" ); scanf ( \"%s\" , name ); printf ( \"Your name is %s.\" , name ); return 0 ; } CMakeLists.txt cmake_minimum_required ( VERSION 3.7.2 ) project ( scanf-sample ) add_executable ( scanf-sample main.c )","title":"Cmake (C++/C) (6) (Windows Environment)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#cmake-cc-7-windows-environment","text":"put main.c and CMakeLists.txt file in sample-scanf folder and from command line run the following cmake command with dot (.) to create solution file for c project C : \\Users\\ugur.coruh\\Desktop\\sample-scanf >cmake .","title":"Cmake (C++/C) (7) (Windows Environment)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#cmake-cc-8-windows-environment","text":"I have Visual Studio 2022 Community Edition Installed on My Computer, for these reason build tools are selected for visual studio environment and the following outputs are generated C : \\Users\\ugur.coruh\\Desktop\\sample-scanf >cmake . -- Building for: Visual Studio 17 2022 -- Selecting Windows SDK version 10.0.22000.0 to target Windows 10.0.19043. -- The C compiler identification is MSVC 19.30.30704.0 -- The CXX compiler identification is MSVC 19.30.30704.0 -- Detecting C compiler ABI info -- Detecting C compiler ABI info - done -- Check for working C compiler: C:/Program Files/Microsoft Visual Studio/2022/Community/VC/Tools/MSVC/14.30.30704/bin/Hostx64/x64/cl.exe - skipped -- Detecting C compile features -- Detecting C compile features - done -- Detecting CXX compiler ABI info -- Detecting CXX compiler ABI info - done -- Check for working CXX compiler: C:/Program Files/Microsoft Visual Studio/2022/Community/VC/Tools/MSVC/14.30.30704/bin/Hostx64/x64/cl.exe - skipped -- Detecting CXX compile features -- Detecting CXX compile features - done -- Configuring done -- Generating done -- Build files have been written to: C:/Users/ugur.coruh/Desktop/sample-scanf C : \\Users\\ugur.coruh\\Desktop\\sample-scanf >","title":"Cmake (C++/C) (8) (Windows Environment)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#cmake-cc-9-windows-environment","text":"also following files are generated","title":"Cmake (C++/C) (9) (Windows Environment)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#cmake-cc-10-windows-environment","text":"if we open scanf-sample.sln file we will have automated generated project files","title":"Cmake (C++/C) (10) (Windows Environment)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#cmake-cc-11-windows-environment","text":"you can make scanf-sample with startup project with right click and then run on visual studio. if you want to configure for another build tool you can use Cmake-GUI installed with setup on your computer","title":"Cmake (C++/C) (11) (Windows Environment)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#cmake-cc-12-windows-environment","text":"Open GUI and Select File-> Delete Cache","title":"Cmake (C++/C) (12) (Windows Environment)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#cmake-cc-13-windows-environment","text":"then you can click \"Configure\" to select build tool","title":"Cmake (C++/C) (13) (Windows Environment)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#cmake-cc-14-windows-environment","text":"","title":"Cmake (C++/C) (14) (Windows Environment)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#cmake-cc-15-windows-environment","text":"if you click \"Configure\" twice it will generate the visual studio solution in build folder for more detailed examples that include also docker and travis-ci sample you can check the following repo GitHub - ttroy50/cmake-examples: Useful CMake Examples","title":"Cmake (C++/C) (15) (Windows Environment)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#make-1","text":"Sample hello.c #include <stdio.h> int main ( void ) { printf ( \"hello, world \\n \" ); }","title":"Make (1)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#make-2","text":"Makefile # This is the default target, which will be built when # you invoke make .PHONY : all all : hello # This rule tells make how to build hello from hello.cpp hello : hello . c g++ -o hello hello.c # This rule tells make to copy hello to the binaries subdirectory, # creating it if necessary .PHONY : install install : mkdir -p binaries cp -p hello binaries # This rule tells make to delete hello and hello.o .PHONY : clean clean : rm -f hello","title":"Make (2)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#make-3","text":"compile.bat make all . will create hello.exe check hello-make sample","title":"Make (3)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#java-environment-and-development","text":"//TODO//","title":"JAVA Environment and Development"},{"location":"tr/week-2-setup/ce103-week-2-setup/#jdk-and-jre-setup","text":"//TODO//","title":"JDK and JRE Setup"},{"location":"tr/week-2-setup/ce103-week-2-setup/#system-environments-and-paths-for-java","text":"//TODO//","title":"System Environments and Paths for Java"},{"location":"tr/week-2-setup/ce103-week-2-setup/#netbeans-java","text":"//TODO//","title":"Netbeans (Java)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#eclipse-java","text":"//TODO//","title":"Eclipse (Java)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#intellij-idea-jet-brains-java","text":"//TODO//","title":"Intellij Idea (Jet Brains) (Java)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#vscode-java","text":"//TODO//","title":"VSCode (Java)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#notepad-java","text":"//TODO//","title":"Notepad++ (Java)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#cmake-java","text":"ASTERICS_HPC","title":"Cmake (Java)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#c-environment-and-development","text":"","title":"C# Environment and Development"},{"location":"tr/week-2-setup/ce103-week-2-setup/#visual-studio-community-edition-c","text":"//TODO//","title":"Visual Studio Community Edition (C#)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#notepad-c","text":"//TODO//","title":"Notepad++ (C#)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#cmake-c","text":"Outline","title":"Cmake (C#)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#common-tools-and-platforms","text":"","title":"Common Tools and Platforms"},{"location":"tr/week-2-setup/ce103-week-2-setup/#fatih-kalem","text":"https://cdnvideo.eba.gov.tr/fatihkalem/fatihkalem_portable.zip https://cdnvideo.eba.gov.tr/fatihkalem/fatihkalem_setup.exe","title":"Fatih Kalem"},{"location":"tr/week-2-setup/ce103-week-2-setup/#notepad-notepad-for-source-code","text":"Downloads | Notepad++","title":"Notepad++ (Notepad for Source Code)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#hxd-hex-editor","text":"HxD - Freeware Hex Editor and Disk Editor | mh-nexus","title":"HxD (Hex Editor)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#marktext-markdown-syntax-editor","text":"https://marktext.app/","title":"Marktext (Markdown Syntax Editor)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#cygwin-linux-environment-for-windows","text":"https://www.cygwin.com/","title":"Cygwin (Linux environment for Windows)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#dependency-walker-32-bit-or-64-bit-windows-module-dependency-checker","text":"https://www.dependencywalker.com/","title":"Dependency Walker (32-bit or 64-bit Windows module dependency checker)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#doxygen-code-documentation","text":"Doxygen: Doxygen","title":"Doxygen (Code Documentation)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#sonarlint-code-quality-and-code-security-extension","text":"https://www.sonarlint.org/","title":"Sonarlint (Code Quality and Code Security Extension)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#codepenio-online-code-sharing","text":"https://codepen.io/ Credit Card Sample https://codepen.io/quinlo/pen/YONMEa","title":"Codepen.io (online code sharing)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#codeshareio-real-time-code-sharing","text":"https://codeshare.io/","title":"Codeshare.io (real time code sharing)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#codebeautifyorg-online-data-conversion-tools","text":"https://codebeautify.org/","title":"Codebeautify.org (online data conversion tools)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#asciiflowcom-ascii-drawing-tool","text":"//TODO//","title":"AsciiFlow.com (ASCII drawing tool)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#freemind-opensource-mindmap-application","text":"//TODO//","title":"Freemind (opensource mindmap application)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#wireflow-user-flow-designer","text":"//TODO//","title":"Wireflow (user flow designer)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#plantuml-software-designer","text":"//TODO//","title":"PlantUML (software designer)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#drawio-drawing-tool","text":"//TODO//","title":"Drawio (drawing tool)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#putty-remote-connection","text":"//TODO//","title":"Putty (Remote Connection)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#mobaxterm-remote-connection","text":"//TODO//","title":"MobaXterm (Remote Connection)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#teamviewer-remote-connection","text":"//TODO//","title":"Teamviewer (Remote Connection)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#palettoncom-color-chooser","text":"//TODO//","title":"Paletton.com (Color Chooser)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#_1","text":"","title":""},{"location":"tr/week-2-setup/ce103-week-2-setup/#understand-static-code-analysis","text":"//TODO//","title":"Understand (Static Code Analysis)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#jd-project-java-decompiler","text":"//TODO//","title":"JD Project (Java Decompiler)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#cutter-multi-platform-reverse-engineering-tool","text":"//TODO//","title":"Cutter (Multi-Platform Reverse Engineering Tool)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#ida-pro-freeware-native-reverse-engineering-tool","text":"//TODO//","title":"IDA Pro / Freeware (Native Reverse Engineering Tool)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#code-visualization-python-c-c-java","text":"https://pythontutor.com/ //TODO//","title":"Code Visualization (Python, C , C++ , Java)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#assembly-of-c-code","text":"https://godbolt.org/ //TODO//","title":"Assembly of C Code"},{"location":"tr/week-2-setup/ce103-week-2-setup/#mobile-device-screen-sharing-for-demo","text":"GitHub - Genymobile/scrcpy: Display and control your Android device","title":"Mobile Device Screen Sharing for Demo"},{"location":"tr/week-2-setup/ce103-week-2-setup/#travis-ci","text":"Travis.yml //TODO//","title":"Travis-CI"},{"location":"tr/week-2-setup/ce103-week-2-setup/#jenkins","text":"//TODO//","title":"Jenkins"},{"location":"tr/week-2-setup/ce103-week-2-setup/#valgrind","text":"//TODO//","title":"Valgrind"},{"location":"tr/week-2-setup/ce103-week-2-setup/#docker","text":"- https://www.youtube.com/watch?v=nBwJm0onzeo&ab_channel=GaryExplains Dockerfile DockerHub Docker Compose Yaml Dockerrun.aws.json (AWS) //TODO//","title":"Docker"},{"location":"tr/week-2-setup/ce103-week-2-setup/#nuget-packages","text":"//TODO//","title":"Nuget Packages"},{"location":"tr/week-2-setup/ce103-week-2-setup/#vim-for-windows","text":"vim/vim-wim32-installer (windows vim installer) //TODO//","title":"Vim for Windows"},{"location":"tr/week-2-setup/ce103-week-2-setup/#scv-cryptomanager","text":"//TODO//","title":"SCV Cryptomanager"},{"location":"tr/week-2-setup/ce103-week-2-setup/#addario-cryptobench","text":"//TODO//","title":"Addario CryptoBench"},{"location":"tr/week-2-setup/ce103-week-2-setup/#raymonds-md5-sha-checksum-utility","text":"//TODO//","title":"Raymond's MD5 &amp; SHA Checksum Utility"},{"location":"tr/week-2-setup/ce103-week-2-setup/#slavasoft-hashcalc","text":"//TODO//","title":"SlavaSoft HashCalc"},{"location":"tr/week-2-setup/ce103-week-2-setup/#portable-pgp","text":"//TODO//","title":"Portable PGP"},{"location":"tr/week-2-setup/ce103-week-2-setup/#online-programming-envoriments","text":"i. Hackerrank ii. CS50 Sandbox iii. Programiz C Online Complier //TODO//","title":"Online Programming Envoriments"},{"location":"tr/week-3-git/ce103-week-3-git/","text":"CE103 Algorithms and Programming I \u00b6 Week-3 \u00b6 Fall Semester, 2021-2022 \u00b6 Download DOC , SLIDE , PPTX Introduction to Source Code Management Systems \u00b6 Git, Github, Gitlab, Bitbucket, Maven, SVN, TFS \u00b6 Source code management (SCM) is used to track modifications to a source code repository. SCM tracks a running history of changes to a code base and helps resolve conflicts when merging updates from multiple contributors. SCM is also synonymous with Version control. As software projects grow in lines of code and contributor head count, the costs of communication overhead and management complexity also grow. SCM is a critical tool to alleviate the organizational strain of growing development costs. Features of Source Code Management Systems \u00b6 Authenticated access for commits Revision history on files Atomic commits of multiple files Versioning/Tagging Why Do We Need Source Code Management Systems? (1) \u00b6 We can save the file with a different name if it\u2019s our school project or one-time papers but for a well-equipped software development? Not a chance. Why Do We Need Source Code Management Systems? (2) \u00b6 Big projects need a version control system to track the changes and avoid misunderstanding. A good SCM does the following: Backup and Restore Synchronization Short-Term Undo Long-Term Undo Track Changes Ownership Branching and Merging Why Do We Need Source Code Management Systems? (3) \u00b6 Backup and Restore \u2013 Files can be saved at any moment and can be restored from the last saved. Why Do We Need Source Code Management Systems? (4) \u00b6 Synchronization \u2013 Programmers can get the latest code and fetch the up-to-date codes from the repository. Why Do We Need Source Code Management Systems? (5) \u00b6 Short-Term Undo \u2013 Working with a file and messed it up. We can do a short-term undo to the last known version. Why Do We Need Source Code Management Systems? (6) \u00b6 Long-Term Undo \u2013 It helps when we have to make a release version rollback. Something like going to the last version which was created a year Why Do We Need Source Code Management Systems? (7) \u00b6 Track Changes \u2013 We can track the changes as when anyone is making any change, he can leave a commit message as for why the change was done. Why Do We Need Source Code Management Systems? (8) \u00b6 Ownership \u2013 With every commit made to the master branch, it will ask the owner permission to merge it. Why Do We Need Source Code Management Systems? (9) \u00b6 Branching and Merging \u2013 You can create a branch of your source code and create the changes. Once the changes are approved, you can merge it with the master branch. Why Do We Need Source Code Management Systems? (10) \u00b6 Types of Version Control Systems \u00b6 Centralized Version Control (TFS, Subversion) Distributed Version Control (Git and Mercurial) Centralized Version Control (TFS, Subversion) (1) \u00b6 The main concept of Centralized Version Control is that it works in a client and server relationship. The repository is located in one place and allows access to multiple clients. Centralized Version Control (TFS, Subversion) (2) \u00b6 Centralized Version Control (TFS, Subversion) (3) \u00b6 Centralized Version Control (TFS, Subversion) (4) \u00b6 It\u2019s very similar to FTP where you have FTP clients which connect to FTP server. Here all the user changes and commits have to pass through the central server. For Ex: Subversion. Centralized Version Control (TFS, Subversion) (5) \u00b6 The benefits of centralized version control are: It\u2019s easy to understand. There are more GUI and IDE clients. You have more control over the users and access. Centralized Version Control (TFS, Subversion) (6) \u00b6 We do have drawbacks also: It is dependent on the access to the server. It can be slower because every command from the client has to pass the server. Branching and merging strategies are difficult to use. Distributed Version Control (Git and Mercurial) (1) \u00b6 These systems are newer to use. In Distributed Version Control, each user has their own copy of the entire repository as well as the files and history. For Ex: Git and Mercurial Distributed Version Control (Git and Mercurial) (2) \u00b6 Distributed Version Control (Git and Mercurial) (3) \u00b6 Distributed Version Control (Git and Mercurial) (4) \u00b6 The benefits of distributed version control are: More powerful and easy change tracking. No need of a centralized server. Most of the functionalities work in offline mode also apart from sharing the repositories. Branching and Merging strategies are more easy and reliable. It\u2019s faster than the other one. List of Source Code Version Management Tools (1) \u00b6 List of Source Code Version Management Tools (2) \u00b6 Github GitLab BitBucket SourceForge Beanstalk List of Source Code Version Management Tools (3) \u00b6 Apache Allura AWS CodeCommit Launchpad Phabricator GitBucket GIT (Distributed Source Code Management) (1) \u00b6 GIT (Distributed Source Code Management) (2) \u00b6 GIT (Distributed Source Code Management) (3) \u00b6 GIT (Distributed Source Code Management) (4) \u00b6 GIT (Distributed Source Code Management) (5) \u00b6 A Basic Overview of How Git Works (1) \u00b6 Create a \u201crepository\u201d (project) with a git hosting tool (like Bitbucket) Copy (or clone) the repository to your local machine Add a file to your local repo and \u201ccommit\u201d (save) the changes \u201cPush\u201d your changes to your master branch GIT (Distributed Source Code Management) (6) \u00b6 A Basic Overview of How Git Works (2) \u00b6 Make a change to your file with a git hosting tool and commit \u201cPull\u201d the changes to your local machine Create a \u201cbranch\u201d (version), make a change, commit the change Open a \u201cpull request\u201d. \u201cMerge\u201d your branch to the master branch GIT (Distributed Source Code Management) (7) \u00b6 Some of The Basic Operations in GIT are \u00b6 Initialize Add Commit Pull Push GIT (Distributed Source Code Management) (8) \u00b6 Some of The Basic Operations in GIT are \u00b6 GIT (Distributed Source Code Management) (9) \u00b6 Some of The Basic Operations in GIT are \u00b6 Branching Merging Rebasing GIT (Distributed Source Code Management) (10) \u00b6 Some of The Basic Operations in GIT are \u00b6 GIT (Distributed Source Code Management) (8) \u00b6 A brief idea about how these operations work with the Git repositories (1) \u00b6 GIT (Distributed Source Code Management) (9) \u00b6 A brief idea about how these operations work with the Git repositories (2) \u00b6 GIT (Distributed Source Code Management) (10) \u00b6 A brief idea about how these operations work with the Git repositories (3) \u00b6 For more detailed cheetsheat please check the following interactive map NDP Software :: Git Cheatsheet Installation of GIT (1) \u00b6 Check Installation Already Completed git --version Installation of GIT (2) \u00b6 If your console gives error about git command follow the steps in the link Install Git | Atlassian Git Tutorial In this link you will should download following setup according to your operating system Installation of GIT (3) \u00b6 GIT Setup Files \u00b6 Download git for OSX Download git for Windows Download git for Linux Installation of GIT (4) \u00b6 Download and install GIT from the following links (both have same github release path) Git - Downloads Installation of GIT (5) \u00b6 After running setup follow the steps below Installation of GIT (6) \u00b6 Installation of GIT (7) \u00b6 Installation of GIT (8) \u00b6 Installation of GIT (9) \u00b6 Installation of GIT (10) \u00b6 Installation of GIT Extension (Windows) (1) \u00b6 You can install Git GUI from https://git-scm.com/downloads/guis I prefer to use git extension https://gitextensions.github.io/ and https://tortoisegit.org/ Also Download KDiff3 KDiff3 - Browse Files at SourceForge.net These extensions provide GUI for git operations to make process easier. Configuration of GIT Extension (Windows) (1) \u00b6 Configuration of GIT Extension (Windows) (2) \u00b6 If you install git everything should be green and this configuration is stored on .gitconfig on your home C:/Windows/Users/<user>/.gitconfig Configuration of GIT Extension (Windows) (3) \u00b6 [core] editor = \\ \"C:/Program Files (x86)/GitExtensions/GitExtensions.exe\\\" fileeditor autocrlf = true quotePath = false commitGraph = true longpaths = true [user] email = xxxxxxx@gmail.com name = xxxx xxxxxx [filter \"lfs\" ] clean = git-lfs clean -- %f smudge = git-lfs smudge -- %f process = git-lfs filter-process required = true [pull] rebase = false [fetch] prune = false [rebase] autoStash = false [credential] helper = manager [diff] guitool = kdiff3 [difftool \"kdiff3\" ] path = C:/Program Files/KDiff3/kdiff3.exe cmd = \\ \"C:/Program Files/KDiff3/kdiff3.exe\\\" \\ \"$LOCAL\\\" \\ \"$REMOTE\\\" [merge] guitool = tortoisemerge [mergetool \"tortoisemerge\" ] path = C:/Program Files/TortoiseGit/bin/TortoiseGitMerge.exe cmd = \\ \"C:/Program Files/TortoiseGit/bin/TortoiseGitMerge.exe\\\" -base:\\ \"$BASE\\\" -mine:\\ \"$LOCAL\\\" -theirs:\\ \"$REMOTE\\\" -merged:\\ \"$MERGED\\\" [receive] advertisePushOptions = true [gc] writeCommitGraph = true Configuration of GIT Extension (Windows) (4) \u00b6 Also in extension you can see similar settings Configuration of GIT Extension (Windows) (5) \u00b6 Samples MergeTool tortoisemerge Path to mergetool C:/Program Files/TortoiseGit/bin/TortoiseGitMerge.exe Mergetool command \"C:/Program Files/TortoiseGit/bin/TortoiseGitMerge.exe\" -base:\"$BASE\" -mine:\"$LOCAL\" -theirs:\"$REMOTE\" -merged:\"$MERGED\" Configuration of GIT Extension (Windows) (6) \u00b6 Difftool kdiff3 Path to difftool C:/Program Files/KDiff3/kdiff3.exe Difftool command \"C:/Program Files/KDiff3/kdiff3.exe\" \"$LOCAL\" \"$REMOTE\" Configuration of GIT Extension (Windows) (7) \u00b6 If you see something as merge and diff tool is not configured, follow the similar settings above on your computer. If you installed kdiff3, tortoisegit and extension you will have same diff and merge tools This topic also help you Git: How can I configure KDiff3 as a merge tool and diff tool? - Stack Overflow Configuration of GIT Extension (Windows) (8) \u00b6 Configuration of GIT Extension (Windows) (9) \u00b6 Open Git->Config, in your settings you will see path to mergetool and difftool will be empty fill settings like that below find executables in your computer and copy paths to here. Configuration of GIT Extension (Windows) (10) \u00b6 Configuration of GIT Extension (Windows) (11) \u00b6 Also if we want to change and use different diff and merge tool then we can do this with gitbash console as below C : \\Program Files\\TortoiseGit\\bin Find TortoiseGitIDiff.exe and TortoiseGitMerge.exe Configuration of GIT Extension (Windows) (12) \u00b6 Copy path of this applications C : \\Program Files\\TortoiseGit\\bin\\TortoiseGitMerge.exe C : \\Program Files\\TortoiseGit\\bin\\TortoiseGitIDiff.exe Configuration of GIT Extension (Windows) (13) \u00b6 open a gitbash console and run following commands git config --global merge.tool TortoiseGitMerge git config --global mergetool.TortoiseGitMerge.path \"C:/Program Files/TortoiseGit/bin/TortoiseGitMerge.exe\" git config --global mergetool.TortoiseGitMerge.trustExitCode false git config --global diff.guitool TortoiseGitIDiff git config --global difftool.TortoiseGitIDiff.path \"C:/Program Files/TortoiseGit/bin/TortoiseGitIDiff.exe\" git config --global difftool.TortoiseGitIDiff.trustExitCode false This updates will be stored on .gitconfig Using the GIT Extension (1) \u00b6 right click in the git folder and use Git Extension menu for operations. for sample commit click \"Commit\" Using the GIT Extension (1) \u00b6 from opening window first stage related files and then write a good commit message finally click commit to local. You can also commit&push it to remote repository. GIT Installation Completed.. \u00b6 Installation of gig (git ignore creator) (1) \u00b6 Requirements Python >= 3.6 Internet connection https://github.com/sloria/gig pip install -U gig Installation of gig (git ignore creator) (2) \u00b6 Installation of gig (git ignore creator) (3) \u00b6 gig --version Usage of gig (1) \u00b6 List all gitignore templates gig list gig list -global Usage of gig (2) \u00b6 Sample gitignore for C Java and Visual Studio gig C Java VisualStudio > .gitignore Usage of gig (3) \u00b6 There is a portal for this also by Toptal \u2022 gitignore.io - Create Useful .gitignore Files For Your Project Usage of gig (4) \u00b6 for samples you can check the following links. https://github.com/github/gitignore https://dev.to/shihanng/gig-a-gitignore-generator-opc Configuration of GIT (1) \u00b6 It is important to configure your Git because any commits that you make are associated with your configuration details. configuring Git with your username and email. In order to do that, type the following commands in your Git Bash: git config - - global user.name \"<your name>\" git config - - global user.email \"<your email>\" Configuration of GIT (2) \u00b6 Configuration of GIT (3) \u00b6 git configuration files are located on the user folder Configuration of GIT (4) \u00b6 If you want to view all your configuration details, use the command below git config --list Using .gitignore files with git-extension (1) \u00b6 with gitignore file Using .gitignore files with git-extension (2) \u00b6 without gitignore file (just move to another location) Github Create Repo \u00b6 Initilization of Repo (not existing in github) \u00b6 git init \u00b6 In order to do that, we use the command git init . git init creates an empty Git repository or re-initializes an existing one. It basically creates a .git directory with sub directories and template files. Running a git init in an existing repository will not overwrite things that are already there. It rather picks up the newly added templates. git init git init \u00b6 Adding Initiated Repo Remote Upstream Repo (Link with Github Repo) (1) \u00b6 If you enter following command in the git folder you will see nothing git remote -v That mean this repository do not have a remote upstream repository such as a github or bitbucket repo. Adding Initiated Repo Remote Upstream Repo (Link with Github Repo) (2) \u00b6 Open the github and bitbucket repository and copy project path from Adding Initiated Repo Remote Upstream Repo (Link with Github Repo) (3) \u00b6 you will see the following sample from github code button https://github.com/ucoruh/ce103-sample-text.git Adding Initiated Repo Remote Upstream Repo (Link with Github Repo) (4) \u00b6 copy link and use with following command git remote add origin https://github.com/ucoruh/ce103-sample-text.git Adding Initiated Repo Remote Upstream Repo (Link with Github Repo) (5) \u00b6 then you can check your remote setting with $ git remote -v origin https://github.com/ucoruh/ce103-sample-text.git (fetch) origin https://github.com/ucoruh/ce103-sample-text.git (push) Adding Initiated Repo Remote Upstream Repo (Link with Github Repo) (6) \u00b6 you can check the following sample How to Add a New Remote to your Git Repo | Assembla Help Center Now you can push your local changes to remote repository \u00b6 If you see a repository on Github then you can download with following operation \u00b6 Checkout a Repository (1) \u00b6 create a working copy of a local repository by running the command git clone /path/to/repository Checkout a Repository (2) \u00b6 Sample clone command git clone https://github.com/ucoruh/ce103-sample-text.git Checkout a Repository (3) \u00b6 when using a remote server, your command will be git clone username@host:/path/to/repository Checking Repository Status (1) \u00b6 git status \u00b6 The git status command lists all the modified files which are ready to be added to the local repository. git status Checking Repository Status (2) \u00b6 git status \u00b6 Adding Files to Index (1) \u00b6 git add \u00b6 This command updates the index using the current content found in the working tree and then prepares the content in the staging area for the next commit. git add < directory> git add < file> git add * Adding Files to Index (1) \u00b6 git add \u00b6 Created two more files edureka3.txt and edureka4.txt. Let us add the files using the command git add -A. This command will add all the files to the index which are in the directory but not updated in the index yet. Commit Changes (1) \u00b6 git commit \u00b6 \u2022It refers to recording snapshots of the repository at a given time. Committed snapshots will never change unless done explicitly. Commit Changes (2) \u00b6 git commit \u00b6 Let me explain how commit works with the diagram below Here, C1 is the initial commit, i.e. the snapshot of the first change from which another snapshot is created with changes named C2. Note that the master points to the latest commit. Now, when I commit again, another snapshot C3 is created and now the master points to C3 instead of C2. Commit Changes (3) \u00b6 git commit \u00b6 Commands: git commit -m \"<message>\" Now, if you want to commit a snapshot of all the changes in the working directory at once, you can use the command below Commit Changes (4) \u00b6 git commit \u00b6 Please check writing good commit messages article below How to write a good commit message - DEV Community Writing Good Commit Messages (1) \u00b6 type: subject body (optional) footer (optional) Writing Good Commit Messages (2) \u00b6 1. Type \u00b6 feat - a new feature fix - a bug fix docs - changes in documentation style - everything related to styling refactor - code changes that neither fixes a bug or adds a feature test - everything related to testing chore - updating build tasks, package manager configs, etc Writing Good Commit Messages (3) \u00b6 2. Subject \u00b6 This contains a short description of the changes made. It shouldn't be greater than 50 characters, should begin with a capital letter and written in the imperative eg. Add instead of Added or Adds. Writing Good Commit Messages (4) \u00b6 3. Body \u00b6 The body is used to explain what changes you made and why you made them. Not all commits are complex enough that they need a body, especially if you are working on a personal project alone, and as such writing a body is optional. A blank line between the body and the subject is required and each line should have no more than 72 characters. Writing Good Commit Messages (5) \u00b6 4.Footer \u00b6 The footer is also optional and mainly used when you are using an issue tracker to reference the issue ID. Writing Good Commit Messages (6) \u00b6 Example Commit Message \u00b6 feat: Summarize changes in around 50 characters or less More detailed explanatory text, if necessary. Wrap it to about 72 characters or so. In some contexts, the first line is treated as the subject of the commit and the rest of the text as the body. The blank line separating the summary from the body is critical (unless you omit the body entirely); various tools like `log`, `shortlog` and `rebase` can get confused if you run the two together. Explain the problem that this commit is solving. Focus on why you are making this change as opposed to how (the code explains that). Are there side effects or other unintuitive consequences of this change? Here's the place to explain them. Further paragraphs come after blank lines. - Bullet points are okay, too - Typically a hyphen or asterisk is used for the bullet, preceded by a single space, with blank lines in between, but conventions vary here If you use an issue tracker, put references to them at the bottom, like this: Resolves: #123 See also: #456, #789 Writing Good Commit Messages (7) \u00b6 git commit -a Add Files to Index (1) \u00b6 I have created two more text files in my working directory viz. edureka5.txt and edureka6.txt but they are not added to the index yet. I am adding edureka5.txt using the command git add edureka5.txt Add Files to Index (2) \u00b6 Add Files to Index (3) \u00b6 I have added edureka5.txt to the index explicitly but not edureka6.txt and made changes in the previous files. I want to commit all changes in the directory at once. Add Files to Index (4) \u00b6 This command will commit a snapshot of all changes in the working directory but only includes modifications to tracked files i.e. the files that have been added with git add at some point in their history. Hence, edureka6.txt was not committed because it was not added to the index yet. But changes in all previous files present in the repository were committed, i.e. edureka1.txt, edureka2.txt, edureka3.txt, edureka4.txt and edureka5.txt. Now I have made my desired commits in my local repository Add Files to Index (5) \u00b6 your local repository consists of three \"trees\" maintained by git. the first one is your Working Directory which holds the actual files. the second one is the Index which acts as a staging area and finally the HEAD which points to the last commit you've made Add Files to Index (6) \u00b6 Update local repo before sending (1) \u00b6 Fetching \u00b6 If we have a remote Git branch, for example a branch on Github, it can happen that the remote branch has commits that the current branch doesn't have! Maybe another branch got merged, your colleague pushed a quick fix, and so on. Update local repo before sending (2) \u00b6 Fetching \u00b6 We can get these changes locally, by performing a git fetch on the remote branch! It doesn't affect your local branch in any way: a fetch simply downloads new data. Update local repo before sending (3) \u00b6 Fetching \u00b6 Update local repo before sending (4) \u00b6 Fetching \u00b6 We can now see all the changes that have been made since we last pushed! We can decide what we want to do with the new data now that we have it locally. Update local repo before sending (5) \u00b6 Pulling \u00b6 Although a git fetch is very useful in order to get the remote information of a branch, we can also perform a git pull . A git pull is actually two commands in one: a git fetch , and a git merge . When we're pulling changes from the origin, we're first fetching all the data like we did with a git fetch , after which the latest changes are automatically merged into the local branch Update local repo before sending (6) \u00b6 Pulling \u00b6 Update local repo before sending (7) \u00b6 Pulling \u00b6 Awesome, we're now perfectly in sync with the remote branch and have all the latest changes! Update local repo before sending (8) \u00b6 Pulling \u00b6 git pull \u00b6 Note that before you affect changes to the central repository you should always pull changes from the central repository to your local repository to get updated with the work of all the collaborators that have been contributing in the central repository. For that we will use the pull command. Update local repo before sending (9) \u00b6 Pulling \u00b6 git pull \u00b6 But first, you need to set your central repository as origin using the command git remote add origin < link of your central repository> Update local repo before sending (10) \u00b6 Pulling / git pull \u00b6 Now that my origin is set Update local repo before sending (11) \u00b6 Pulling / git pull \u00b6 let us extract files from the origin using pull. For that use the command git pull origin master Update local repo before sending (12) \u00b6 Pulling / git pull \u00b6 This command will copy all the files from the master branch of remote repository to your local repository. Update local repo before sending (13) \u00b6 Pulling / git pull \u00b6 Since my local repository was already updated with files from master branch, hence the message is Already up-to-date. Refer to the screen shot above Update local repo before sending (14) \u00b6 Pulling / git pull \u00b6 One can also try pulling files from a different branch using the following command: git pull origin < branch-name> Update local repo before sending (15) \u00b6 Pulling / git pull \u00b6 Your local Git repository is now updated with all the recent changes. It is time you make changes in the central repository by using the push command. Send Changes to Remote Repo (1) \u00b6 git push \u00b6 This command transfers commits from your local repository to your remote repository. It is the opposite of pull operation. Send Changes to Remote Repo (2) \u00b6 git push \u00b6 Pulling imports commits to local repositories whereas pushing exports commits to the remote repositories Send Changes to Remote Repo (3) \u00b6 git push \u00b6 The use of git push is to publish your local changes to a central repository. After you\u2019ve accumulated several local commits and are ready to share them with the rest of the team, Send Changes to Remote Repo (4) \u00b6 git push \u00b6 you can then push them to the central repository by using the following command git push < remote> Send Changes to Remote Repo (5) \u00b6 git push \u00b6 This remote refers to the remote repository which had been set before using the pull command. Send Changes to Remote Repo (6) \u00b6 git push \u00b6 This pushes the changes from the local repository to the remote repository along with all the necessary commits and internal objects. This creates a local branch in the destination repository Send Changes to Remote Repo (7) \u00b6 git push \u00b6 The below files are the files which we have already committed previously in the commit section and they are all \u201cpush-ready\u201c. Send Changes to Remote Repo (8) \u00b6 git push \u00b6 I will use the command git push origin master to reflect these files in the master branch of my central repository. Send Changes to Remote Repo (9) \u00b6 git push \u00b6 Send Changes to Remote Repo (10) \u00b6 git push \u00b6 Send Changes to Remote Repo (11) \u00b6 git push \u00b6 Send Changes to Remote Repo (12) \u00b6 git push \u00b6 To prevent overwriting, Git does not allow push when it results in a non-fast forward merge in the destination repository. Send Changes to Remote Repo (13) \u00b6 git push \u00b6 A non-fast forward merge means an upstream merge i.e. merging with ancestor or parent branches from a child branch To enable such merge, use the command below git push < remote > -force The above command forces the push operation even if it results in a non-fast forward merge Branching (1) \u00b6 git branch \u00b6 Branches in Git are nothing but pointers to a specific commit. Git generally prefers to keep its branches as lightweight as possible. Branching (2) \u00b6 git branch \u00b6 There are basically two types of branches viz. local branches remote tracking branches. Branching (3) \u00b6 git branch \u00b6 A local branch is just another path of your working tree. On the other hand, remote tracking branches have special purposes. Some of them are: They link your work from the local repository to the work on central repository. Branching (4) \u00b6 git branch \u00b6 They automatically detect which remote branches to get changes from, when you use git pull. Branching (5) \u00b6 Learn current branch \u00b6 You can check what your current branch is by using the command git branch The one mantra that you should always be chanting while branching is \u201cbranch early, and branch often\u201d Branching (6) \u00b6 List Local Branches \u00b6 git branch -l Branching (7) \u00b6 List Remote Branches \u00b6 git branch -r Branching (8) \u00b6 List All Local and Remote Branches \u00b6 git branch -a Branching (9) \u00b6 Removing merged git branches (after pull-request action in github) If you merged your branch to base branch in github and delete it on github your local branch list will not be updated by it self. You have to use the following command to update local and remote branch lists. Use the following command to syncronize your repository with remote upstream repo. git remote update --prune Branching (10) \u00b6 Create Branch \u00b6 To create a new branch we use the following command git branch < branch-name> The diagram below shows the workflow when a new branch is created. When we create a new branch it originates from the master branch itself. Branching (11) \u00b6 Create Branch \u00b6 Branching (12) \u00b6 Create Branch \u00b6 Since there is no storage/memory overhead with making many branches, it is easier to logically divide up your work rather than have big chunky branches You can create and change branch with following command, create a new branch named \"feature_x\" and switch to it using git checkout -b feature_x Branching (13) \u00b6 Change Branch \u00b6 git checkout < branch-name> git checkout master Branching (14) \u00b6 Change Branch \u00b6 Branching includes the work of a particular commit along with all parent commits. As you can see in the diagram above, the newBranch has detached itself from the master and hence will create a different path Branching (15) \u00b6 Delete Local Branch \u00b6 and delete the branch again, before doing this switch to main or master branches. git branch -d feature_x Branching (16) \u00b6 Delete Remote Branch \u00b6 and delete the branch again, before doing this switch to main or master branches. git push origin --delete feature_x How to delete remote branches in Git Branching (17) \u00b6 Push Specific Branch to Remote \u00b6 A branch is not available to others unless you push the branch to your remote repository git push origin < branch> Branching (18) \u00b6 Update & Merge (Conflicts) \u00b6 to update your local repository to the newest commit, execute git pull in your working directory to fetch and merge remote changes. to merge another branch into your active branch (e.g. master), use git merge <branch> Branching (19) \u00b6 Update & Merge (Conflicts) \u00b6 in both cases git tries to auto-merge changes. Unfortunately, this is not always possible and results in conflicts. You are responsible to merge those conflicts manually by editing the files shown by git. After changing, you need to mark them as merged with git add <filename> before merging changes, you can also preview them by using git diff <source_branch> <target_branch> Git merge conflicts | Atlassian Git Tutorial Branching (20) \u00b6 Update & Merge (Conflicts) \u00b6 There are two types of merges Git can perform: a fast-forward , or a no-fast-forward Branching (21) \u00b6 Update & Merge (Conflicts) \u00b6 Fast-forward ( --ff ) \u00b6 A fast-forward merge can happen when the current branch has no extra commits compared to the branch we\u2019re merging. Git is... lazy and will first try to perform the easiest option: the fast-forward! This type of merge doesn\u2019t create a new commit, but rather merges the commit(s) on the branch we\u2019re merging right in the current branch Branching (22) \u00b6 Update & Merge (Conflicts) \u00b6 Fast-forward ( --ff ) \u00b6 Branching (23) \u00b6 Update & Merge (Conflicts) \u00b6 Perfect! We now have all the changes that were made on the dev branch available on the master branch. So, what's the no-fast-forward all about? Branching (24) \u00b6 Update & Merge (Conflicts) \u00b6 No-fast-foward ( --no-ff ) \u00b6 It's great if your current branch doesn't have any extra commits compared to the branch that you want to merge, but unfortunately that's rarely the case! If we committed changes on the current branch that the branch we want to merge doesn't have, git will perform a no-fast-forward merge. Branching (25) \u00b6 Update & Merge (Conflicts) \u00b6 No-fast-foward ( --no-ff ) \u00b6 With a no-fast-forward merge, Git creates a new merging commit on the active branch. The commit's parent commits point to both the active branch and the branch that we want to merge! Branching (26) \u00b6 Update & Merge (Conflicts) \u00b6 No-fast-foward ( --no-ff ) \u00b6 Branching (27) \u00b6 Update & Merge (Conflicts) \u00b6 No-fast-foward ( --no-ff ) \u00b6 No big deal, a perfect merge! The master branch now contains all the changes that we've made on the dev branch. Branching (28) \u00b6 Merge Conflicts \u00b6 Although Git is good at deciding how to merge branches and add changes to files, it cannot always make this decision all by itself This can happen when the two branches we're trying to merge have changes on the same line in the same file, or if one branch deleted a file that another branch modified, and so on. Branching (29) \u00b6 Merge Conflicts \u00b6 In that case, Git will ask you to help decide which of the two options we want to keep! Let's say that on both branches, we edited the first line in the README.md . Branching (30) \u00b6 Merge Conflicts \u00b6 If we want to merge dev into master , this will end up in a merge conflict: would you like the title to be Hello! or Hey! ? Branching (31) \u00b6 Merge Conflicts \u00b6 When trying to merge the branches, Git will show you where the conflict happens. We can manually remove the changes we don't want to keep, save the changes, add the changed file again, and commit the changes Branching (32) \u00b6 Merge Conflicts \u00b6 Although merge conflicts are often quite annoying, it makes total sense: Git shouldn't just assume which change we want to keep Branching (33) \u00b6 Sample Conflict -1 \u00b6 participants.txt ( I added a hyphen before each name ) Finance team Charles Lisa John Stacy Alexander git init git add . git commit \u2013m 'Initial list for finance team' Branching (34) \u00b6 Sample Conflict -1 \u00b6 Create a new branch called marketing using the following syntax git checkout \u2013b marketing Branching (35) \u00b6 Sample Conflict -1 \u00b6 Now open the participants.txt file and start entering the names for the marketing department below the finance team list, as follows: ( I added a hyphen before each name ) Marketing team Collins Linda Patricia Morgan git add . git commit \u2013m 'Unfinished list of marketing team' git checkout master Branching (36) \u00b6 Sample Conflict -1 \u00b6 Open the file and delete the names Alexander and Stacy , save, close, add the changes, and commit with the commit message Final list from Finance team git add . git commit \u2013m \"Final list from Finance team\" git checkout marketing Branching (37) \u00b6 Sample Conflict -1 \u00b6 Open the file and add the fifth name, Amanda , for the marketing team, save, add, and commit git add . git commit \u2013m \"Initial list of marketing team\" names entered for marketing have been confirmed; now we need to merge these two lists, which can be done by the following command git merge master Branching (38) \u00b6 Sample Conflict -1 \u00b6 Auto-merging participants.txt CONFLICT (content): Merge conflict in participants.txt Automatic merge failed; fix conflicts and then commit the result. Branching (39) \u00b6 Sample Conflict -1 \u00b6 Finance team -Charles -Lisa -John <<<<<<< HEAD -Stacy -Alexander Marketing team - Collins - Linda - Patricia - Morgan - Amanda ======= >>>>>>> master Branching (40) \u00b6 Sample Conflict -1 \u00b6 <<<<<<< Changes made on the branch that is being merged into. In most cases, this is the branch that I have currently checked out (i.e. HEAD). ||||||| The common ancestor version. ======= Changes made on the branch that is being merged in. This is often a feature/topic branch. >>>>>>> Branching (41) \u00b6 Sample Conflict -1 \u00b6 remove them keep the lines you want to see in the final version of the file add and commit Branching (42) \u00b6 Sample Conflict -1 \u00b6 If we want to save all to our version git checkout --ours . # checkout our local version of all files git add -u # mark all conflicted files as merged git commit # commit the merge Branching (43) \u00b6 Sample Conflict -1 \u00b6 If we want to discard all our revision git checkout --theirs . # checkout remote version of all files git add -u # mark all conflicted files as merged git commit # commit the merge Branching (44) \u00b6 Sample Conflict -2 \u00b6 You're going to pull some changes, but oops, you're not up to date: git fetch origin git pull origin master From ssh://gitosis@example.com:22/projectname * branch master - > FETCH_HEAD Updating a030c3a..ee25213 error: Entry 'filename.c' not uptodate. Cannot merge. Branching (45) \u00b6 Sample Conflict -2 \u00b6 So you get up-to-date and try again, but have a conflict: git add filename.c git commit -m \"made some wild and crazy changes\" git pull origin master From ssh://gitosis@example.com:22/projectname * branch master - > FETCH_HEAD Auto-merging filename.c CONFLICT (content): Merge conflict in filename.c Automatic merge failed; fix conflicts and then commit the result. Branching (46) \u00b6 Sample Conflict -2 \u00b6 So you decide to take a look at the changes: git mergetool Oh my, oh my, upstream changed some things, but just to use my changes...no...their changes... git checkout --ours filename.c git checkout --theirs filename.c git add filename.c git commit -m \"using theirs\" Branching (47) \u00b6 Sample Conflict -2 \u00b6 And then we try a final time git pull origin master From ssh://gitosis@example.com:22/projectname * branch master - > FETCH_HEAD Already up-to-date. Tagging \u00b6 it's recommended to create tags for software releases. this is a known concept, which also exists in SVN. You can create a new tag named 1.0.0 by executing git tag 1.0.0 1b2e1d63ff the 1b2e1d63ff stands for the first 10 characters of the commit id you want to reference with your tag. You can get the commit id by looking at the... Log (1) \u00b6 in its simplest form, you can study repository history using.. git log You can add a lot of parameters to make the log look like what you want. To see only the commits of a certain author: git log --author=bob Log (2) \u00b6 To see a very compressed log where each commit is one line: git log --pretty=oneline Log (3) \u00b6 Or maybe you want to see an ASCII art tree of all the branches, decorated with the names of tags and branches: git log --graph --oneline --decorate --all Log (4) \u00b6 See only which files have changed: git log --name-status Log (5) \u00b6 These are just a few of the possible parameters you can use. For more, see git log --help Replace Local Changes (1) \u00b6 In case you did something wrong, which for sure never happens ;), you can replace local changes using the command git checkout -- < filename> this replaces the changes in your working tree with the last content in HEAD. Changes already added to the index, as well as new files, will be kept. Replace Local Changes (2) \u00b6 if you use dot (.) then all local changes will be rollbacked. git checkout -- . Replace Local Changes (3) \u00b6 If you instead want to drop all your local changes and commits, fetch the latest history from the server and point your local master branch at it like this git fetch origin git reset --hard origin/master Reflog (1) \u00b6 Everyone makes mistakes, and that's totally okay! Sometimes it may feel like you've corrupt your git repo so badly that you just want to delete it entirely. Reflog (2) \u00b6 git reflog is a very useful command in order to show a log of all the actions that have been taken! This includes merges, resets, reverts: basically any alteration to your branch. Reflog (3) \u00b6 Reflog (4) \u00b6 If you made a mistake, you can easily redo this by resetting HEAD based on the information that reflog gives us! Say that we actually didn't want to merge the origin branch. When we execute the git reflog command, we see that the state of the repo before the merge is at HEAD@{1} . Let's perform a git reset to point HEAD back to where it was on HEAD@{1} ! Reflog (5) \u00b6 We can see that the latest action has been pushed to the reflog Resetting (1) \u00b6 It can happen that we committed changes that we didn't want later on. Maybe it's a WIP commit, or maybe a commit that introduced bugs! In that case, we can perform a git reset . Resetting (2) \u00b6 A git reset gets rid of all the current staged files and gives us control over where HEAD should point to. Soft Reset (1) \u00b6 A soft reset moves HEAD to the specified commit (or the index of the commit compared to HEAD ), without getting rid of the changes that were introduced on the commits afterward! Soft Reset (2) \u00b6 Let's say that we don't want to keep the commit 9e78i which added a style.css file, and we also don't want to keep the commit 035cc which added an index.js file. However, we do want to keep the newly added style.css and index.js file! A perfect use case for a soft reset. Soft Reset (3) \u00b6 Soft Reset (2) \u00b6 When typing git status , you'll see that we still have access to all the changes that were made on the previous commits. This is great, as this means that we can fix the contents of these files and commit them again later on! Hard reset (1) \u00b6 Sometimes, we don't want to keep the changes that were introduced by certain commits. Unlike a soft reset, we shouldn't need to have access to them any more. Git should simply reset its state back to where it was on the specified commit: this even includes the changes in your working directory and staged files! Hard reset (2) \u00b6 Git has discarded the changes that were introduced on 9e78i and 035cc , and reset its state to where it was on commit ec5be . Reverting (1) \u00b6 Another way of undoing changes is by performing a git revert . By reverting a certain commit, we create a new commit that contains the reverted changes! Reverting (2) \u00b6 Let's say that ec5be added an index.js file. Later on, we actually realize we didn't want this change introduced by this commit anymore! Let's revert the ec5be commit. Perfect! Commit 9e78i reverted the changes that were introduced by the ec5be commit. Reverting (3) \u00b6 Performing a git revert is very useful in order to undo a certain commit, without modifying the history of the branch. Cherry-picking (1) \u00b6 When a certain branch contains a commit that introduced changes we need on our active branch, we can cherry-pick that command! By cherry-pick ing a commit, we create a new commit on our active branch that contains the changes that were introduced by the cherry-pick ed commit. Cherry-picking (1) \u00b6 Say that commit 76d12 on the dev branch added a change to the index.js file that we want in our master branch. We don't want the entire we just care about this one single commit! Cool, the master branch now contains the changes that 76d12 introduced Rebasing (1) \u00b6 We just saw how we could apply changes from one branch to another by performing a git merge . Another way of adding changes from one branch to another is by performing a git rebase . Rebasing (2) \u00b6 A git rebase copies the commits from the current branch, and puts these copied commits on top of the specified branch. Perfect, we now have all the changes that were made on the master branch available on the dev branch! Rebasing (3) \u00b6 A big difference compared to merging, is that Git won't try to find out which files to keep and not keep. The branch that we're rebasing always has the latest changes that we want to keep! You won't run into any merging conflicts this way, and keeps a nice linear Git history. Rebasing (4) \u00b6 This example shows rebasing on the master branch. In bigger projects, however, you usually don't want to do that. A git rebase changes the history of the project as new hashes are created for the copied commits! Rebasing (5) \u00b6 Rebasing is great whenever you're working on a feature branch, and the master branch has been updated. You can get all the updates on your branch, which would prevent future merging conflicts! Interactive Rebase (1) \u00b6 Before rebasing the commits, we can modify them! We can do so with an interactive rebase . An interactive rebase can also be useful on the branch you're currently working on, and want to modify some commits. Interactive Rebase (2) \u00b6 There are 6 actions we can perform on the commits we're rebasing: reword : Change the commit message edit : Amend this commit squash : Meld commit into the previous commit fixup : Meld commit into the previous commit, without keeping the commit's log message exec : Run a command on each commit we want to rebase drop : Remove the commit Interactive Rebase (3) \u00b6 Awesome! This way, we can have full control over our commits. If we want to remove a commit, we can just drop it. Interactive Rebase (4) \u00b6 Or if we want to squash multiple commits together to get a cleaner history, no problem! Interactive rebasing gives you a lot of control over the commits you're trying to rebase, even on the current active branch Useful Hints (1) \u00b6 built-in git GUI gitk Useful Hints (2) \u00b6 use colorful git output git config color.ui true Useful Hints (3) \u00b6 show log on just one line per commit git config format.pretty oneline Useful Hints (4) \u00b6 use interactive adding git add -i HEAD~2 // previous two commits fro head HEAD~~ // previous two commits from head HEAD@{2} // reflog order 18fe5 // previous commit hash GIT Flow \u00b6 A successful Git branching model \u00bb nvie.com Hotfix \u00b6 OneFlow \u2013 a Git branching model and workflow | End of Line Blog a simple git branching model \u00b7 GitHub GIT Decision Tree \u00b6 http://justinhileman.info/article/git-pretty/git-pretty.png GIT in action (1) \u00b6 GIT in action (2) \u00b6 GIT in action (3) \u00b6 GIT in action (4) \u00b6 GIT in action (5) \u00b6 GIT in action (6) \u00b6 GIT in action (7) \u00b6 Gource \u00b6 https://gource.io/ References (1) \u00b6 Source Code Management | Atlassian Git Tutorial . What is Source Code Management or Version Control ? - The Linux Juggernaut https://www.edureka.co/blog/how-to-use-github/ https://www.edureka.co/blog/git-tutorial/ https://www.edureka.co/blog/install-git/ References (2) \u00b6 git - the simple guide - no deep shit! GitHub - rogerdudler/git-guide: git - the simple guide https://dev.to/lydiahallie/cs-visualized-useful-git-commands-37p1#merge How to write a good commit message - DEV Community https://blog.xebialabs.com/2016/06/14/periodic-table-devops-tools-v-2/ References (3) \u00b6 https://harness.io/2018/01/devops-tools-lifecycle-mesh-2018/ https://medium.com/swlh/how-to-become-an-devops-engineer-in-2020-80b8740d5a52 https://www.lucidchart.com/blog/devops-process-flow https://www.researchgate.net/publication/262450962_Rugby_An_Agile_Process_Model_Based_on_Continuous_Delivery References (4) \u00b6 git - the simple guide - no deep shit! Git Tutorial | Commands And Operations In Git | Edureka How to write a good commit message - DEV Community An Introduction to Git and GitHub by Brian Yu - YouTube References (5) \u00b6 https://education.github.com/git-cheat-sheet-education.pdf NDP Software :: Git Cheatsheet ; Learn Git Branching https://guides.github.com/introduction/git-handbook/","title":"Week-3 (Git Version Management)"},{"location":"tr/week-3-git/ce103-week-3-git/#introduction-to-source-code-management-systems","text":"","title":"Introduction to Source Code Management Systems"},{"location":"tr/week-3-git/ce103-week-3-git/#git-github-gitlab-bitbucket-maven-svn-tfs","text":"Source code management (SCM) is used to track modifications to a source code repository. SCM tracks a running history of changes to a code base and helps resolve conflicts when merging updates from multiple contributors. SCM is also synonymous with Version control. As software projects grow in lines of code and contributor head count, the costs of communication overhead and management complexity also grow. SCM is a critical tool to alleviate the organizational strain of growing development costs.","title":"Git, Github, Gitlab, Bitbucket, Maven, SVN, TFS"},{"location":"tr/week-3-git/ce103-week-3-git/#features-of-source-code-management-systems","text":"Authenticated access for commits Revision history on files Atomic commits of multiple files Versioning/Tagging","title":"Features of Source Code Management Systems"},{"location":"tr/week-3-git/ce103-week-3-git/#why-do-we-need-source-code-management-systems-1","text":"We can save the file with a different name if it\u2019s our school project or one-time papers but for a well-equipped software development? Not a chance.","title":"Why Do We Need Source Code Management Systems? (1)"},{"location":"tr/week-3-git/ce103-week-3-git/#why-do-we-need-source-code-management-systems-2","text":"Big projects need a version control system to track the changes and avoid misunderstanding. A good SCM does the following: Backup and Restore Synchronization Short-Term Undo Long-Term Undo Track Changes Ownership Branching and Merging","title":"Why Do We Need Source Code Management Systems? (2)"},{"location":"tr/week-3-git/ce103-week-3-git/#why-do-we-need-source-code-management-systems-3","text":"Backup and Restore \u2013 Files can be saved at any moment and can be restored from the last saved.","title":"Why Do We Need Source Code Management Systems? (3)"},{"location":"tr/week-3-git/ce103-week-3-git/#why-do-we-need-source-code-management-systems-4","text":"Synchronization \u2013 Programmers can get the latest code and fetch the up-to-date codes from the repository.","title":"Why Do We Need Source Code Management Systems? (4)"},{"location":"tr/week-3-git/ce103-week-3-git/#why-do-we-need-source-code-management-systems-5","text":"Short-Term Undo \u2013 Working with a file and messed it up. We can do a short-term undo to the last known version.","title":"Why Do We Need Source Code Management Systems? (5)"},{"location":"tr/week-3-git/ce103-week-3-git/#why-do-we-need-source-code-management-systems-6","text":"Long-Term Undo \u2013 It helps when we have to make a release version rollback. Something like going to the last version which was created a year","title":"Why Do We Need Source Code Management Systems? (6)"},{"location":"tr/week-3-git/ce103-week-3-git/#why-do-we-need-source-code-management-systems-7","text":"Track Changes \u2013 We can track the changes as when anyone is making any change, he can leave a commit message as for why the change was done.","title":"Why Do We Need Source Code Management Systems? (7)"},{"location":"tr/week-3-git/ce103-week-3-git/#why-do-we-need-source-code-management-systems-8","text":"Ownership \u2013 With every commit made to the master branch, it will ask the owner permission to merge it.","title":"Why Do We Need Source Code Management Systems? (8)"},{"location":"tr/week-3-git/ce103-week-3-git/#why-do-we-need-source-code-management-systems-9","text":"Branching and Merging \u2013 You can create a branch of your source code and create the changes. Once the changes are approved, you can merge it with the master branch.","title":"Why Do We Need Source Code Management Systems? (9)"},{"location":"tr/week-3-git/ce103-week-3-git/#types-of-version-control-systems","text":"Centralized Version Control (TFS, Subversion) Distributed Version Control (Git and Mercurial)","title":"Types of Version Control Systems"},{"location":"tr/week-3-git/ce103-week-3-git/#centralized-version-control-tfs-subversion-1","text":"The main concept of Centralized Version Control is that it works in a client and server relationship. The repository is located in one place and allows access to multiple clients.","title":"Centralized Version Control (TFS, Subversion) (1)"},{"location":"tr/week-3-git/ce103-week-3-git/#centralized-version-control-tfs-subversion-2","text":"","title":"Centralized Version Control (TFS, Subversion) (2)"},{"location":"tr/week-3-git/ce103-week-3-git/#centralized-version-control-tfs-subversion-3","text":"","title":"Centralized Version Control (TFS, Subversion) (3)"},{"location":"tr/week-3-git/ce103-week-3-git/#centralized-version-control-tfs-subversion-4","text":"It\u2019s very similar to FTP where you have FTP clients which connect to FTP server. Here all the user changes and commits have to pass through the central server. For Ex: Subversion.","title":"Centralized Version Control (TFS, Subversion) (4)"},{"location":"tr/week-3-git/ce103-week-3-git/#centralized-version-control-tfs-subversion-5","text":"The benefits of centralized version control are: It\u2019s easy to understand. There are more GUI and IDE clients. You have more control over the users and access.","title":"Centralized Version Control (TFS, Subversion) (5)"},{"location":"tr/week-3-git/ce103-week-3-git/#centralized-version-control-tfs-subversion-6","text":"We do have drawbacks also: It is dependent on the access to the server. It can be slower because every command from the client has to pass the server. Branching and merging strategies are difficult to use.","title":"Centralized Version Control (TFS, Subversion) (6)"},{"location":"tr/week-3-git/ce103-week-3-git/#distributed-version-control-git-and-mercurial-1","text":"These systems are newer to use. In Distributed Version Control, each user has their own copy of the entire repository as well as the files and history. For Ex: Git and Mercurial","title":"Distributed Version Control (Git and Mercurial) (1)"},{"location":"tr/week-3-git/ce103-week-3-git/#distributed-version-control-git-and-mercurial-2","text":"","title":"Distributed Version Control (Git and Mercurial) (2)"},{"location":"tr/week-3-git/ce103-week-3-git/#distributed-version-control-git-and-mercurial-3","text":"","title":"Distributed Version Control (Git and Mercurial) (3)"},{"location":"tr/week-3-git/ce103-week-3-git/#distributed-version-control-git-and-mercurial-4","text":"The benefits of distributed version control are: More powerful and easy change tracking. No need of a centralized server. Most of the functionalities work in offline mode also apart from sharing the repositories. Branching and Merging strategies are more easy and reliable. It\u2019s faster than the other one.","title":"Distributed Version Control (Git and Mercurial) (4)"},{"location":"tr/week-3-git/ce103-week-3-git/#list-of-source-code-version-management-tools-1","text":"","title":"List of Source Code Version Management Tools (1)"},{"location":"tr/week-3-git/ce103-week-3-git/#list-of-source-code-version-management-tools-2","text":"Github GitLab BitBucket SourceForge Beanstalk","title":"List of Source Code Version Management Tools (2)"},{"location":"tr/week-3-git/ce103-week-3-git/#list-of-source-code-version-management-tools-3","text":"Apache Allura AWS CodeCommit Launchpad Phabricator GitBucket","title":"List of Source Code Version Management Tools (3)"},{"location":"tr/week-3-git/ce103-week-3-git/#git-distributed-source-code-management-1","text":"","title":"GIT (Distributed Source Code Management) (1)"},{"location":"tr/week-3-git/ce103-week-3-git/#git-distributed-source-code-management-2","text":"","title":"GIT (Distributed Source Code Management) (2)"},{"location":"tr/week-3-git/ce103-week-3-git/#git-distributed-source-code-management-3","text":"","title":"GIT (Distributed Source Code Management) (3)"},{"location":"tr/week-3-git/ce103-week-3-git/#git-distributed-source-code-management-4","text":"","title":"GIT (Distributed Source Code Management) (4)"},{"location":"tr/week-3-git/ce103-week-3-git/#a-basic-overview-of-how-git-works-1","text":"Create a \u201crepository\u201d (project) with a git hosting tool (like Bitbucket) Copy (or clone) the repository to your local machine Add a file to your local repo and \u201ccommit\u201d (save) the changes \u201cPush\u201d your changes to your master branch","title":"A Basic Overview of How Git Works (1)"},{"location":"tr/week-3-git/ce103-week-3-git/#a-basic-overview-of-how-git-works-2","text":"Make a change to your file with a git hosting tool and commit \u201cPull\u201d the changes to your local machine Create a \u201cbranch\u201d (version), make a change, commit the change Open a \u201cpull request\u201d. \u201cMerge\u201d your branch to the master branch","title":"A Basic Overview of How Git Works (2)"},{"location":"tr/week-3-git/ce103-week-3-git/#some-of-the-basic-operations-in-git-are","text":"Initialize Add Commit Pull Push","title":"Some of The Basic Operations in GIT are"},{"location":"tr/week-3-git/ce103-week-3-git/#some-of-the-basic-operations-in-git-are_1","text":"","title":"Some of The Basic Operations in GIT are"},{"location":"tr/week-3-git/ce103-week-3-git/#some-of-the-basic-operations-in-git-are_2","text":"Branching Merging Rebasing","title":"Some of The Basic Operations in GIT are"},{"location":"tr/week-3-git/ce103-week-3-git/#some-of-the-basic-operations-in-git-are_3","text":"","title":"Some of The Basic Operations in GIT are"},{"location":"tr/week-3-git/ce103-week-3-git/#a-brief-idea-about-how-these-operations-work-with-the-git-repositories-1","text":"","title":"A brief idea about how these operations work with the Git repositories (1)"},{"location":"tr/week-3-git/ce103-week-3-git/#a-brief-idea-about-how-these-operations-work-with-the-git-repositories-2","text":"","title":"A brief idea about how these operations work with the Git repositories (2)"},{"location":"tr/week-3-git/ce103-week-3-git/#a-brief-idea-about-how-these-operations-work-with-the-git-repositories-3","text":"For more detailed cheetsheat please check the following interactive map NDP Software :: Git Cheatsheet","title":"A brief idea about how these operations work with the Git repositories (3)"},{"location":"tr/week-3-git/ce103-week-3-git/#installation-of-git-1","text":"Check Installation Already Completed git --version","title":"Installation of GIT (1)"},{"location":"tr/week-3-git/ce103-week-3-git/#installation-of-git-2","text":"If your console gives error about git command follow the steps in the link Install Git | Atlassian Git Tutorial In this link you will should download following setup according to your operating system","title":"Installation of GIT (2)"},{"location":"tr/week-3-git/ce103-week-3-git/#git-setup-files","text":"Download git for OSX Download git for Windows Download git for Linux","title":"GIT Setup Files"},{"location":"tr/week-3-git/ce103-week-3-git/#installation-of-git-4","text":"Download and install GIT from the following links (both have same github release path) Git - Downloads","title":"Installation of GIT (4)"},{"location":"tr/week-3-git/ce103-week-3-git/#installation-of-git-5","text":"After running setup follow the steps below","title":"Installation of GIT (5)"},{"location":"tr/week-3-git/ce103-week-3-git/#installation-of-git-6","text":"","title":"Installation of GIT (6)"},{"location":"tr/week-3-git/ce103-week-3-git/#installation-of-git-7","text":"","title":"Installation of GIT (7)"},{"location":"tr/week-3-git/ce103-week-3-git/#installation-of-git-8","text":"","title":"Installation of GIT (8)"},{"location":"tr/week-3-git/ce103-week-3-git/#installation-of-git-9","text":"","title":"Installation of GIT (9)"},{"location":"tr/week-3-git/ce103-week-3-git/#installation-of-git-10","text":"","title":"Installation of GIT (10)"},{"location":"tr/week-3-git/ce103-week-3-git/#installation-of-git-extension-windows-1","text":"You can install Git GUI from https://git-scm.com/downloads/guis I prefer to use git extension https://gitextensions.github.io/ and https://tortoisegit.org/ Also Download KDiff3 KDiff3 - Browse Files at SourceForge.net These extensions provide GUI for git operations to make process easier.","title":"Installation of GIT Extension (Windows) (1)"},{"location":"tr/week-3-git/ce103-week-3-git/#configuration-of-git-extension-windows-1","text":"","title":"Configuration of GIT Extension (Windows) (1)"},{"location":"tr/week-3-git/ce103-week-3-git/#configuration-of-git-extension-windows-2","text":"If you install git everything should be green and this configuration is stored on .gitconfig on your home C:/Windows/Users/<user>/.gitconfig","title":"Configuration of GIT Extension (Windows) (2)"},{"location":"tr/week-3-git/ce103-week-3-git/#configuration-of-git-extension-windows-3","text":"[core] editor = \\ \"C:/Program Files (x86)/GitExtensions/GitExtensions.exe\\\" fileeditor autocrlf = true quotePath = false commitGraph = true longpaths = true [user] email = xxxxxxx@gmail.com name = xxxx xxxxxx [filter \"lfs\" ] clean = git-lfs clean -- %f smudge = git-lfs smudge -- %f process = git-lfs filter-process required = true [pull] rebase = false [fetch] prune = false [rebase] autoStash = false [credential] helper = manager [diff] guitool = kdiff3 [difftool \"kdiff3\" ] path = C:/Program Files/KDiff3/kdiff3.exe cmd = \\ \"C:/Program Files/KDiff3/kdiff3.exe\\\" \\ \"$LOCAL\\\" \\ \"$REMOTE\\\" [merge] guitool = tortoisemerge [mergetool \"tortoisemerge\" ] path = C:/Program Files/TortoiseGit/bin/TortoiseGitMerge.exe cmd = \\ \"C:/Program Files/TortoiseGit/bin/TortoiseGitMerge.exe\\\" -base:\\ \"$BASE\\\" -mine:\\ \"$LOCAL\\\" -theirs:\\ \"$REMOTE\\\" -merged:\\ \"$MERGED\\\" [receive] advertisePushOptions = true [gc] writeCommitGraph = true","title":"Configuration of GIT Extension (Windows) (3)"},{"location":"tr/week-3-git/ce103-week-3-git/#configuration-of-git-extension-windows-4","text":"Also in extension you can see similar settings","title":"Configuration of GIT Extension (Windows) (4)"},{"location":"tr/week-3-git/ce103-week-3-git/#configuration-of-git-extension-windows-5","text":"Samples MergeTool tortoisemerge Path to mergetool C:/Program Files/TortoiseGit/bin/TortoiseGitMerge.exe Mergetool command \"C:/Program Files/TortoiseGit/bin/TortoiseGitMerge.exe\" -base:\"$BASE\" -mine:\"$LOCAL\" -theirs:\"$REMOTE\" -merged:\"$MERGED\"","title":"Configuration of GIT Extension (Windows) (5)"},{"location":"tr/week-3-git/ce103-week-3-git/#configuration-of-git-extension-windows-6","text":"Difftool kdiff3 Path to difftool C:/Program Files/KDiff3/kdiff3.exe Difftool command \"C:/Program Files/KDiff3/kdiff3.exe\" \"$LOCAL\" \"$REMOTE\"","title":"Configuration of GIT Extension (Windows) (6)"},{"location":"tr/week-3-git/ce103-week-3-git/#configuration-of-git-extension-windows-7","text":"If you see something as merge and diff tool is not configured, follow the similar settings above on your computer. If you installed kdiff3, tortoisegit and extension you will have same diff and merge tools This topic also help you Git: How can I configure KDiff3 as a merge tool and diff tool? - Stack Overflow","title":"Configuration of GIT Extension (Windows) (7)"},{"location":"tr/week-3-git/ce103-week-3-git/#configuration-of-git-extension-windows-8","text":"","title":"Configuration of GIT Extension (Windows) (8)"},{"location":"tr/week-3-git/ce103-week-3-git/#configuration-of-git-extension-windows-9","text":"Open Git->Config, in your settings you will see path to mergetool and difftool will be empty fill settings like that below find executables in your computer and copy paths to here.","title":"Configuration of GIT Extension (Windows) (9)"},{"location":"tr/week-3-git/ce103-week-3-git/#configuration-of-git-extension-windows-10","text":"","title":"Configuration of GIT Extension (Windows) (10)"},{"location":"tr/week-3-git/ce103-week-3-git/#configuration-of-git-extension-windows-11","text":"Also if we want to change and use different diff and merge tool then we can do this with gitbash console as below C : \\Program Files\\TortoiseGit\\bin Find TortoiseGitIDiff.exe and TortoiseGitMerge.exe","title":"Configuration of GIT Extension (Windows) (11)"},{"location":"tr/week-3-git/ce103-week-3-git/#configuration-of-git-extension-windows-12","text":"Copy path of this applications C : \\Program Files\\TortoiseGit\\bin\\TortoiseGitMerge.exe C : \\Program Files\\TortoiseGit\\bin\\TortoiseGitIDiff.exe","title":"Configuration of GIT Extension (Windows) (12)"},{"location":"tr/week-3-git/ce103-week-3-git/#configuration-of-git-extension-windows-13","text":"open a gitbash console and run following commands git config --global merge.tool TortoiseGitMerge git config --global mergetool.TortoiseGitMerge.path \"C:/Program Files/TortoiseGit/bin/TortoiseGitMerge.exe\" git config --global mergetool.TortoiseGitMerge.trustExitCode false git config --global diff.guitool TortoiseGitIDiff git config --global difftool.TortoiseGitIDiff.path \"C:/Program Files/TortoiseGit/bin/TortoiseGitIDiff.exe\" git config --global difftool.TortoiseGitIDiff.trustExitCode false This updates will be stored on .gitconfig","title":"Configuration of GIT Extension (Windows) (13)"},{"location":"tr/week-3-git/ce103-week-3-git/#using-the-git-extension-1","text":"right click in the git folder and use Git Extension menu for operations. for sample commit click \"Commit\"","title":"Using the GIT Extension (1)"},{"location":"tr/week-3-git/ce103-week-3-git/#using-the-git-extension-1_1","text":"from opening window first stage related files and then write a good commit message finally click commit to local. You can also commit&push it to remote repository.","title":"Using the GIT Extension (1)"},{"location":"tr/week-3-git/ce103-week-3-git/#git-installation-completed","text":"","title":"GIT Installation Completed.."},{"location":"tr/week-3-git/ce103-week-3-git/#installation-of-gig-git-ignore-creator-1","text":"Requirements Python >= 3.6 Internet connection https://github.com/sloria/gig pip install -U gig","title":"Installation of gig (git ignore creator) (1)"},{"location":"tr/week-3-git/ce103-week-3-git/#installation-of-gig-git-ignore-creator-2","text":"","title":"Installation of gig (git ignore creator) (2)"},{"location":"tr/week-3-git/ce103-week-3-git/#installation-of-gig-git-ignore-creator-3","text":"gig --version","title":"Installation of gig (git ignore creator) (3)"},{"location":"tr/week-3-git/ce103-week-3-git/#usage-of-gig-1","text":"List all gitignore templates gig list gig list -global","title":"Usage of gig (1)"},{"location":"tr/week-3-git/ce103-week-3-git/#usage-of-gig-2","text":"Sample gitignore for C Java and Visual Studio gig C Java VisualStudio > .gitignore","title":"Usage of gig (2)"},{"location":"tr/week-3-git/ce103-week-3-git/#usage-of-gig-3","text":"There is a portal for this also by Toptal \u2022 gitignore.io - Create Useful .gitignore Files For Your Project","title":"Usage of gig (3)"},{"location":"tr/week-3-git/ce103-week-3-git/#usage-of-gig-4","text":"for samples you can check the following links. https://github.com/github/gitignore https://dev.to/shihanng/gig-a-gitignore-generator-opc","title":"Usage of gig (4)"},{"location":"tr/week-3-git/ce103-week-3-git/#configuration-of-git-1","text":"It is important to configure your Git because any commits that you make are associated with your configuration details. configuring Git with your username and email. In order to do that, type the following commands in your Git Bash: git config - - global user.name \"<your name>\" git config - - global user.email \"<your email>\"","title":"Configuration of GIT (1)"},{"location":"tr/week-3-git/ce103-week-3-git/#configuration-of-git-2","text":"","title":"Configuration of GIT (2)"},{"location":"tr/week-3-git/ce103-week-3-git/#configuration-of-git-3","text":"git configuration files are located on the user folder","title":"Configuration of GIT (3)"},{"location":"tr/week-3-git/ce103-week-3-git/#configuration-of-git-4","text":"If you want to view all your configuration details, use the command below git config --list","title":"Configuration of GIT (4)"},{"location":"tr/week-3-git/ce103-week-3-git/#using-gitignore-files-with-git-extension-1","text":"with gitignore file","title":"Using .gitignore files with git-extension (1)"},{"location":"tr/week-3-git/ce103-week-3-git/#using-gitignore-files-with-git-extension-2","text":"without gitignore file (just move to another location)","title":"Using .gitignore files with git-extension (2)"},{"location":"tr/week-3-git/ce103-week-3-git/#github-create-repo","text":"","title":"Github Create Repo"},{"location":"tr/week-3-git/ce103-week-3-git/#git-init","text":"In order to do that, we use the command git init . git init creates an empty Git repository or re-initializes an existing one. It basically creates a .git directory with sub directories and template files. Running a git init in an existing repository will not overwrite things that are already there. It rather picks up the newly added templates. git init","title":"git init"},{"location":"tr/week-3-git/ce103-week-3-git/#git-init_1","text":"","title":"git init"},{"location":"tr/week-3-git/ce103-week-3-git/#adding-initiated-repo-remote-upstream-repo-link-with-github-repo-1","text":"If you enter following command in the git folder you will see nothing git remote -v That mean this repository do not have a remote upstream repository such as a github or bitbucket repo.","title":"Adding Initiated Repo Remote Upstream Repo (Link with Github Repo) (1)"},{"location":"tr/week-3-git/ce103-week-3-git/#adding-initiated-repo-remote-upstream-repo-link-with-github-repo-2","text":"Open the github and bitbucket repository and copy project path from","title":"Adding Initiated Repo Remote Upstream Repo (Link with Github Repo) (2)"},{"location":"tr/week-3-git/ce103-week-3-git/#adding-initiated-repo-remote-upstream-repo-link-with-github-repo-3","text":"you will see the following sample from github code button https://github.com/ucoruh/ce103-sample-text.git","title":"Adding Initiated Repo Remote Upstream Repo (Link with Github Repo) (3)"},{"location":"tr/week-3-git/ce103-week-3-git/#adding-initiated-repo-remote-upstream-repo-link-with-github-repo-4","text":"copy link and use with following command git remote add origin https://github.com/ucoruh/ce103-sample-text.git","title":"Adding Initiated Repo Remote Upstream Repo (Link with Github Repo) (4)"},{"location":"tr/week-3-git/ce103-week-3-git/#adding-initiated-repo-remote-upstream-repo-link-with-github-repo-5","text":"then you can check your remote setting with $ git remote -v origin https://github.com/ucoruh/ce103-sample-text.git (fetch) origin https://github.com/ucoruh/ce103-sample-text.git (push)","title":"Adding Initiated Repo Remote Upstream Repo (Link with Github Repo) (5)"},{"location":"tr/week-3-git/ce103-week-3-git/#adding-initiated-repo-remote-upstream-repo-link-with-github-repo-6","text":"you can check the following sample How to Add a New Remote to your Git Repo | Assembla Help Center","title":"Adding Initiated Repo Remote Upstream Repo (Link with Github Repo) (6)"},{"location":"tr/week-3-git/ce103-week-3-git/#if-you-see-a-repository-on-github-then-you-can-download-with-following-operation","text":"","title":"If you see a repository on Github then you can download with following operation"},{"location":"tr/week-3-git/ce103-week-3-git/#checkout-a-repository-1","text":"create a working copy of a local repository by running the command git clone /path/to/repository","title":"Checkout a Repository (1)"},{"location":"tr/week-3-git/ce103-week-3-git/#checkout-a-repository-2","text":"Sample clone command git clone https://github.com/ucoruh/ce103-sample-text.git","title":"Checkout a Repository (2)"},{"location":"tr/week-3-git/ce103-week-3-git/#git-status","text":"The git status command lists all the modified files which are ready to be added to the local repository. git status","title":"git status"},{"location":"tr/week-3-git/ce103-week-3-git/#git-status_1","text":"","title":"git status"},{"location":"tr/week-3-git/ce103-week-3-git/#git-add","text":"This command updates the index using the current content found in the working tree and then prepares the content in the staging area for the next commit. git add < directory> git add < file> git add *","title":"git add"},{"location":"tr/week-3-git/ce103-week-3-git/#git-add_1","text":"Created two more files edureka3.txt and edureka4.txt. Let us add the files using the command git add -A. This command will add all the files to the index which are in the directory but not updated in the index yet.","title":"git add"},{"location":"tr/week-3-git/ce103-week-3-git/#git-commit","text":"\u2022It refers to recording snapshots of the repository at a given time. Committed snapshots will never change unless done explicitly.","title":"git commit"},{"location":"tr/week-3-git/ce103-week-3-git/#git-commit_1","text":"Let me explain how commit works with the diagram below Here, C1 is the initial commit, i.e. the snapshot of the first change from which another snapshot is created with changes named C2. Note that the master points to the latest commit. Now, when I commit again, another snapshot C3 is created and now the master points to C3 instead of C2.","title":"git commit"},{"location":"tr/week-3-git/ce103-week-3-git/#git-commit_2","text":"Commands: git commit -m \"<message>\" Now, if you want to commit a snapshot of all the changes in the working directory at once, you can use the command below","title":"git commit"},{"location":"tr/week-3-git/ce103-week-3-git/#git-commit_3","text":"Please check writing good commit messages article below How to write a good commit message - DEV Community","title":"git commit"},{"location":"tr/week-3-git/ce103-week-3-git/#writing-good-commit-messages-1","text":"type: subject body (optional) footer (optional)","title":"Writing Good Commit Messages (1)"},{"location":"tr/week-3-git/ce103-week-3-git/#1-type","text":"feat - a new feature fix - a bug fix docs - changes in documentation style - everything related to styling refactor - code changes that neither fixes a bug or adds a feature test - everything related to testing chore - updating build tasks, package manager configs, etc","title":"1. Type"},{"location":"tr/week-3-git/ce103-week-3-git/#2-subject","text":"This contains a short description of the changes made. It shouldn't be greater than 50 characters, should begin with a capital letter and written in the imperative eg. Add instead of Added or Adds.","title":"2. Subject"},{"location":"tr/week-3-git/ce103-week-3-git/#3-body","text":"The body is used to explain what changes you made and why you made them. Not all commits are complex enough that they need a body, especially if you are working on a personal project alone, and as such writing a body is optional. A blank line between the body and the subject is required and each line should have no more than 72 characters.","title":"3. Body"},{"location":"tr/week-3-git/ce103-week-3-git/#4footer","text":"The footer is also optional and mainly used when you are using an issue tracker to reference the issue ID.","title":"4.Footer"},{"location":"tr/week-3-git/ce103-week-3-git/#example-commit-message","text":"feat: Summarize changes in around 50 characters or less More detailed explanatory text, if necessary. Wrap it to about 72 characters or so. In some contexts, the first line is treated as the subject of the commit and the rest of the text as the body. The blank line separating the summary from the body is critical (unless you omit the body entirely); various tools like `log`, `shortlog` and `rebase` can get confused if you run the two together. Explain the problem that this commit is solving. Focus on why you are making this change as opposed to how (the code explains that). Are there side effects or other unintuitive consequences of this change? Here's the place to explain them. Further paragraphs come after blank lines. - Bullet points are okay, too - Typically a hyphen or asterisk is used for the bullet, preceded by a single space, with blank lines in between, but conventions vary here If you use an issue tracker, put references to them at the bottom, like this: Resolves: #123 See also: #456, #789","title":"Example Commit Message"},{"location":"tr/week-3-git/ce103-week-3-git/#writing-good-commit-messages-7","text":"git commit -a","title":"Writing Good Commit Messages (7)"},{"location":"tr/week-3-git/ce103-week-3-git/#add-files-to-index-1","text":"I have created two more text files in my working directory viz. edureka5.txt and edureka6.txt but they are not added to the index yet. I am adding edureka5.txt using the command git add edureka5.txt","title":"Add Files to Index (1)"},{"location":"tr/week-3-git/ce103-week-3-git/#add-files-to-index-2","text":"","title":"Add Files to Index (2)"},{"location":"tr/week-3-git/ce103-week-3-git/#add-files-to-index-3","text":"I have added edureka5.txt to the index explicitly but not edureka6.txt and made changes in the previous files. I want to commit all changes in the directory at once.","title":"Add Files to Index (3)"},{"location":"tr/week-3-git/ce103-week-3-git/#add-files-to-index-4","text":"This command will commit a snapshot of all changes in the working directory but only includes modifications to tracked files i.e. the files that have been added with git add at some point in their history. Hence, edureka6.txt was not committed because it was not added to the index yet. But changes in all previous files present in the repository were committed, i.e. edureka1.txt, edureka2.txt, edureka3.txt, edureka4.txt and edureka5.txt. Now I have made my desired commits in my local repository","title":"Add Files to Index (4)"},{"location":"tr/week-3-git/ce103-week-3-git/#add-files-to-index-5","text":"your local repository consists of three \"trees\" maintained by git. the first one is your Working Directory which holds the actual files. the second one is the Index which acts as a staging area and finally the HEAD which points to the last commit you've made","title":"Add Files to Index (5)"},{"location":"tr/week-3-git/ce103-week-3-git/#add-files-to-index-6","text":"","title":"Add Files to Index (6)"},{"location":"tr/week-3-git/ce103-week-3-git/#fetching","text":"If we have a remote Git branch, for example a branch on Github, it can happen that the remote branch has commits that the current branch doesn't have! Maybe another branch got merged, your colleague pushed a quick fix, and so on.","title":"Fetching"},{"location":"tr/week-3-git/ce103-week-3-git/#fetching_1","text":"We can get these changes locally, by performing a git fetch on the remote branch! It doesn't affect your local branch in any way: a fetch simply downloads new data.","title":"Fetching"},{"location":"tr/week-3-git/ce103-week-3-git/#fetching_2","text":"","title":"Fetching"},{"location":"tr/week-3-git/ce103-week-3-git/#fetching_3","text":"We can now see all the changes that have been made since we last pushed! We can decide what we want to do with the new data now that we have it locally.","title":"Fetching"},{"location":"tr/week-3-git/ce103-week-3-git/#pulling","text":"Although a git fetch is very useful in order to get the remote information of a branch, we can also perform a git pull . A git pull is actually two commands in one: a git fetch , and a git merge . When we're pulling changes from the origin, we're first fetching all the data like we did with a git fetch , after which the latest changes are automatically merged into the local branch","title":"Pulling"},{"location":"tr/week-3-git/ce103-week-3-git/#pulling_2","text":"Awesome, we're now perfectly in sync with the remote branch and have all the latest changes!","title":"Pulling"},{"location":"tr/week-3-git/ce103-week-3-git/#git-pull","text":"Note that before you affect changes to the central repository you should always pull changes from the central repository to your local repository to get updated with the work of all the collaborators that have been contributing in the central repository. For that we will use the pull command.","title":"git pull"},{"location":"tr/week-3-git/ce103-week-3-git/#git-pull_1","text":"But first, you need to set your central repository as origin using the command git remote add origin < link of your central repository>","title":"git pull"},{"location":"tr/week-3-git/ce103-week-3-git/#pulling-git-pull","text":"Now that my origin is set","title":"Pulling / git pull"},{"location":"tr/week-3-git/ce103-week-3-git/#pulling-git-pull_1","text":"let us extract files from the origin using pull. For that use the command git pull origin master","title":"Pulling / git pull"},{"location":"tr/week-3-git/ce103-week-3-git/#pulling-git-pull_2","text":"This command will copy all the files from the master branch of remote repository to your local repository.","title":"Pulling / git pull"},{"location":"tr/week-3-git/ce103-week-3-git/#pulling-git-pull_3","text":"Since my local repository was already updated with files from master branch, hence the message is Already up-to-date. Refer to the screen shot above","title":"Pulling / git pull"},{"location":"tr/week-3-git/ce103-week-3-git/#pulling-git-pull_4","text":"One can also try pulling files from a different branch using the following command: git pull origin < branch-name>","title":"Pulling / git pull"},{"location":"tr/week-3-git/ce103-week-3-git/#pulling-git-pull_5","text":"Your local Git repository is now updated with all the recent changes. It is time you make changes in the central repository by using the push command.","title":"Pulling / git pull"},{"location":"tr/week-3-git/ce103-week-3-git/#git-push","text":"This command transfers commits from your local repository to your remote repository. It is the opposite of pull operation.","title":"git push"},{"location":"tr/week-3-git/ce103-week-3-git/#git-push_1","text":"Pulling imports commits to local repositories whereas pushing exports commits to the remote repositories","title":"git push"},{"location":"tr/week-3-git/ce103-week-3-git/#git-push_2","text":"The use of git push is to publish your local changes to a central repository. After you\u2019ve accumulated several local commits and are ready to share them with the rest of the team,","title":"git push"},{"location":"tr/week-3-git/ce103-week-3-git/#git-push_3","text":"you can then push them to the central repository by using the following command git push < remote>","title":"git push"},{"location":"tr/week-3-git/ce103-week-3-git/#git-push_4","text":"This remote refers to the remote repository which had been set before using the pull command.","title":"git push"},{"location":"tr/week-3-git/ce103-week-3-git/#git-push_5","text":"This pushes the changes from the local repository to the remote repository along with all the necessary commits and internal objects. This creates a local branch in the destination repository","title":"git push"},{"location":"tr/week-3-git/ce103-week-3-git/#git-push_6","text":"The below files are the files which we have already committed previously in the commit section and they are all \u201cpush-ready\u201c.","title":"git push"},{"location":"tr/week-3-git/ce103-week-3-git/#git-push_7","text":"I will use the command git push origin master to reflect these files in the master branch of my central repository.","title":"git push"},{"location":"tr/week-3-git/ce103-week-3-git/#git-push_8","text":"","title":"git push"},{"location":"tr/week-3-git/ce103-week-3-git/#git-push_9","text":"","title":"git push"},{"location":"tr/week-3-git/ce103-week-3-git/#git-push_10","text":"","title":"git push"},{"location":"tr/week-3-git/ce103-week-3-git/#git-push_11","text":"To prevent overwriting, Git does not allow push when it results in a non-fast forward merge in the destination repository.","title":"git push"},{"location":"tr/week-3-git/ce103-week-3-git/#git-push_12","text":"A non-fast forward merge means an upstream merge i.e. merging with ancestor or parent branches from a child branch To enable such merge, use the command below git push < remote > -force The above command forces the push operation even if it results in a non-fast forward merge","title":"git push"},{"location":"tr/week-3-git/ce103-week-3-git/#git-branch","text":"Branches in Git are nothing but pointers to a specific commit. Git generally prefers to keep its branches as lightweight as possible.","title":"git branch"},{"location":"tr/week-3-git/ce103-week-3-git/#git-branch_1","text":"There are basically two types of branches viz. local branches remote tracking branches.","title":"git branch"},{"location":"tr/week-3-git/ce103-week-3-git/#git-branch_2","text":"A local branch is just another path of your working tree. On the other hand, remote tracking branches have special purposes. Some of them are: They link your work from the local repository to the work on central repository.","title":"git branch"},{"location":"tr/week-3-git/ce103-week-3-git/#git-branch_3","text":"They automatically detect which remote branches to get changes from, when you use git pull.","title":"git branch"},{"location":"tr/week-3-git/ce103-week-3-git/#learn-current-branch","text":"You can check what your current branch is by using the command git branch The one mantra that you should always be chanting while branching is \u201cbranch early, and branch often\u201d","title":"Learn current branch"},{"location":"tr/week-3-git/ce103-week-3-git/#list-local-branches","text":"git branch -l","title":"List Local Branches"},{"location":"tr/week-3-git/ce103-week-3-git/#list-remote-branches","text":"git branch -r","title":"List Remote Branches"},{"location":"tr/week-3-git/ce103-week-3-git/#list-all-local-and-remote-branches","text":"git branch -a","title":"List All Local and Remote Branches"},{"location":"tr/week-3-git/ce103-week-3-git/#branching-9","text":"Removing merged git branches (after pull-request action in github) If you merged your branch to base branch in github and delete it on github your local branch list will not be updated by it self. You have to use the following command to update local and remote branch lists. Use the following command to syncronize your repository with remote upstream repo. git remote update --prune","title":"Branching (9)"},{"location":"tr/week-3-git/ce103-week-3-git/#create-branch","text":"To create a new branch we use the following command git branch < branch-name> The diagram below shows the workflow when a new branch is created. When we create a new branch it originates from the master branch itself.","title":"Create Branch"},{"location":"tr/week-3-git/ce103-week-3-git/#create-branch_1","text":"","title":"Create Branch"},{"location":"tr/week-3-git/ce103-week-3-git/#create-branch_2","text":"Since there is no storage/memory overhead with making many branches, it is easier to logically divide up your work rather than have big chunky branches You can create and change branch with following command, create a new branch named \"feature_x\" and switch to it using git checkout -b feature_x","title":"Create Branch"},{"location":"tr/week-3-git/ce103-week-3-git/#change-branch","text":"git checkout < branch-name> git checkout master","title":"Change Branch"},{"location":"tr/week-3-git/ce103-week-3-git/#change-branch_1","text":"Branching includes the work of a particular commit along with all parent commits. As you can see in the diagram above, the newBranch has detached itself from the master and hence will create a different path","title":"Change Branch"},{"location":"tr/week-3-git/ce103-week-3-git/#delete-local-branch","text":"and delete the branch again, before doing this switch to main or master branches. git branch -d feature_x","title":"Delete Local Branch"},{"location":"tr/week-3-git/ce103-week-3-git/#delete-remote-branch","text":"and delete the branch again, before doing this switch to main or master branches. git push origin --delete feature_x How to delete remote branches in Git","title":"Delete Remote Branch"},{"location":"tr/week-3-git/ce103-week-3-git/#push-specific-branch-to-remote","text":"A branch is not available to others unless you push the branch to your remote repository git push origin < branch>","title":"Push Specific Branch to Remote"},{"location":"tr/week-3-git/ce103-week-3-git/#update-merge-conflicts","text":"to update your local repository to the newest commit, execute git pull in your working directory to fetch and merge remote changes. to merge another branch into your active branch (e.g. master), use git merge <branch>","title":"Update &amp; Merge (Conflicts)"},{"location":"tr/week-3-git/ce103-week-3-git/#update-merge-conflicts_1","text":"in both cases git tries to auto-merge changes. Unfortunately, this is not always possible and results in conflicts. You are responsible to merge those conflicts manually by editing the files shown by git. After changing, you need to mark them as merged with git add <filename> before merging changes, you can also preview them by using git diff <source_branch> <target_branch> Git merge conflicts | Atlassian Git Tutorial","title":"Update &amp; Merge (Conflicts)"},{"location":"tr/week-3-git/ce103-week-3-git/#update-merge-conflicts_2","text":"There are two types of merges Git can perform: a fast-forward , or a no-fast-forward","title":"Update &amp; Merge (Conflicts)"},{"location":"tr/week-3-git/ce103-week-3-git/#fast-forward-ff","text":"A fast-forward merge can happen when the current branch has no extra commits compared to the branch we\u2019re merging. Git is... lazy and will first try to perform the easiest option: the fast-forward! This type of merge doesn\u2019t create a new commit, but rather merges the commit(s) on the branch we\u2019re merging right in the current branch","title":"Fast-forward (--ff)"},{"location":"tr/week-3-git/ce103-week-3-git/#fast-forward-ff_1","text":"","title":"Fast-forward (--ff)"},{"location":"tr/week-3-git/ce103-week-3-git/#update-merge-conflicts_5","text":"Perfect! We now have all the changes that were made on the dev branch available on the master branch. So, what's the no-fast-forward all about?","title":"Update &amp; Merge (Conflicts)"},{"location":"tr/week-3-git/ce103-week-3-git/#no-fast-foward-no-ff","text":"It's great if your current branch doesn't have any extra commits compared to the branch that you want to merge, but unfortunately that's rarely the case! If we committed changes on the current branch that the branch we want to merge doesn't have, git will perform a no-fast-forward merge.","title":"No-fast-foward (--no-ff)"},{"location":"tr/week-3-git/ce103-week-3-git/#no-fast-foward-no-ff_1","text":"With a no-fast-forward merge, Git creates a new merging commit on the active branch. The commit's parent commits point to both the active branch and the branch that we want to merge!","title":"No-fast-foward (--no-ff)"},{"location":"tr/week-3-git/ce103-week-3-git/#no-fast-foward-no-ff_2","text":"","title":"No-fast-foward (--no-ff)"},{"location":"tr/week-3-git/ce103-week-3-git/#no-fast-foward-no-ff_3","text":"No big deal, a perfect merge! The master branch now contains all the changes that we've made on the dev branch.","title":"No-fast-foward (--no-ff)"},{"location":"tr/week-3-git/ce103-week-3-git/#merge-conflicts","text":"Although Git is good at deciding how to merge branches and add changes to files, it cannot always make this decision all by itself This can happen when the two branches we're trying to merge have changes on the same line in the same file, or if one branch deleted a file that another branch modified, and so on.","title":"Merge Conflicts"},{"location":"tr/week-3-git/ce103-week-3-git/#merge-conflicts_1","text":"In that case, Git will ask you to help decide which of the two options we want to keep! Let's say that on both branches, we edited the first line in the README.md .","title":"Merge Conflicts"},{"location":"tr/week-3-git/ce103-week-3-git/#merge-conflicts_2","text":"If we want to merge dev into master , this will end up in a merge conflict: would you like the title to be Hello! or Hey! ?","title":"Merge Conflicts"},{"location":"tr/week-3-git/ce103-week-3-git/#merge-conflicts_3","text":"When trying to merge the branches, Git will show you where the conflict happens. We can manually remove the changes we don't want to keep, save the changes, add the changed file again, and commit the changes","title":"Merge Conflicts"},{"location":"tr/week-3-git/ce103-week-3-git/#merge-conflicts_4","text":"Although merge conflicts are often quite annoying, it makes total sense: Git shouldn't just assume which change we want to keep","title":"Merge Conflicts"},{"location":"tr/week-3-git/ce103-week-3-git/#sample-conflict-1","text":"participants.txt ( I added a hyphen before each name ) Finance team Charles Lisa John Stacy Alexander git init git add . git commit \u2013m 'Initial list for finance team'","title":"Sample Conflict -1"},{"location":"tr/week-3-git/ce103-week-3-git/#sample-conflict-1_1","text":"Create a new branch called marketing using the following syntax git checkout \u2013b marketing","title":"Sample Conflict -1"},{"location":"tr/week-3-git/ce103-week-3-git/#sample-conflict-1_2","text":"Now open the participants.txt file and start entering the names for the marketing department below the finance team list, as follows: ( I added a hyphen before each name ) Marketing team Collins Linda Patricia Morgan git add . git commit \u2013m 'Unfinished list of marketing team' git checkout master","title":"Sample Conflict -1"},{"location":"tr/week-3-git/ce103-week-3-git/#sample-conflict-1_3","text":"Open the file and delete the names Alexander and Stacy , save, close, add the changes, and commit with the commit message Final list from Finance team git add . git commit \u2013m \"Final list from Finance team\" git checkout marketing","title":"Sample Conflict -1"},{"location":"tr/week-3-git/ce103-week-3-git/#sample-conflict-1_4","text":"Open the file and add the fifth name, Amanda , for the marketing team, save, add, and commit git add . git commit \u2013m \"Initial list of marketing team\" names entered for marketing have been confirmed; now we need to merge these two lists, which can be done by the following command git merge master","title":"Sample Conflict -1"},{"location":"tr/week-3-git/ce103-week-3-git/#sample-conflict-1_5","text":"Auto-merging participants.txt CONFLICT (content): Merge conflict in participants.txt Automatic merge failed; fix conflicts and then commit the result.","title":"Sample Conflict -1"},{"location":"tr/week-3-git/ce103-week-3-git/#sample-conflict-1_6","text":"Finance team -Charles -Lisa -John <<<<<<< HEAD -Stacy -Alexander Marketing team - Collins - Linda - Patricia - Morgan - Amanda ======= >>>>>>> master","title":"Sample Conflict -1"},{"location":"tr/week-3-git/ce103-week-3-git/#sample-conflict-1_7","text":"<<<<<<< Changes made on the branch that is being merged into. In most cases, this is the branch that I have currently checked out (i.e. HEAD). ||||||| The common ancestor version. ======= Changes made on the branch that is being merged in. This is often a feature/topic branch. >>>>>>>","title":"Sample Conflict -1"},{"location":"tr/week-3-git/ce103-week-3-git/#sample-conflict-1_8","text":"remove them keep the lines you want to see in the final version of the file add and commit","title":"Sample Conflict -1"},{"location":"tr/week-3-git/ce103-week-3-git/#sample-conflict-1_9","text":"If we want to save all to our version git checkout --ours . # checkout our local version of all files git add -u # mark all conflicted files as merged git commit # commit the merge","title":"Sample Conflict -1"},{"location":"tr/week-3-git/ce103-week-3-git/#sample-conflict-1_10","text":"If we want to discard all our revision git checkout --theirs . # checkout remote version of all files git add -u # mark all conflicted files as merged git commit # commit the merge","title":"Sample Conflict -1"},{"location":"tr/week-3-git/ce103-week-3-git/#sample-conflict-2","text":"You're going to pull some changes, but oops, you're not up to date: git fetch origin git pull origin master From ssh://gitosis@example.com:22/projectname * branch master - > FETCH_HEAD Updating a030c3a..ee25213 error: Entry 'filename.c' not uptodate. Cannot merge.","title":"Sample Conflict -2"},{"location":"tr/week-3-git/ce103-week-3-git/#sample-conflict-2_1","text":"So you get up-to-date and try again, but have a conflict: git add filename.c git commit -m \"made some wild and crazy changes\" git pull origin master From ssh://gitosis@example.com:22/projectname * branch master - > FETCH_HEAD Auto-merging filename.c CONFLICT (content): Merge conflict in filename.c Automatic merge failed; fix conflicts and then commit the result.","title":"Sample Conflict -2"},{"location":"tr/week-3-git/ce103-week-3-git/#sample-conflict-2_2","text":"So you decide to take a look at the changes: git mergetool Oh my, oh my, upstream changed some things, but just to use my changes...no...their changes... git checkout --ours filename.c git checkout --theirs filename.c git add filename.c git commit -m \"using theirs\"","title":"Sample Conflict -2"},{"location":"tr/week-3-git/ce103-week-3-git/#sample-conflict-2_3","text":"And then we try a final time git pull origin master From ssh://gitosis@example.com:22/projectname * branch master - > FETCH_HEAD Already up-to-date.","title":"Sample Conflict -2"},{"location":"tr/week-3-git/ce103-week-3-git/#tagging","text":"it's recommended to create tags for software releases. this is a known concept, which also exists in SVN. You can create a new tag named 1.0.0 by executing git tag 1.0.0 1b2e1d63ff the 1b2e1d63ff stands for the first 10 characters of the commit id you want to reference with your tag. You can get the commit id by looking at the...","title":"Tagging"},{"location":"tr/week-3-git/ce103-week-3-git/#log-1","text":"in its simplest form, you can study repository history using.. git log You can add a lot of parameters to make the log look like what you want. To see only the commits of a certain author: git log --author=bob","title":"Log (1)"},{"location":"tr/week-3-git/ce103-week-3-git/#log-2","text":"To see a very compressed log where each commit is one line: git log --pretty=oneline","title":"Log (2)"},{"location":"tr/week-3-git/ce103-week-3-git/#log-3","text":"Or maybe you want to see an ASCII art tree of all the branches, decorated with the names of tags and branches: git log --graph --oneline --decorate --all","title":"Log (3)"},{"location":"tr/week-3-git/ce103-week-3-git/#log-5","text":"These are just a few of the possible parameters you can use. For more, see git log --help","title":"Log (5)"},{"location":"tr/week-3-git/ce103-week-3-git/#replace-local-changes-1","text":"In case you did something wrong, which for sure never happens ;), you can replace local changes using the command git checkout -- < filename> this replaces the changes in your working tree with the last content in HEAD. Changes already added to the index, as well as new files, will be kept.","title":"Replace Local Changes (1)"},{"location":"tr/week-3-git/ce103-week-3-git/#replace-local-changes-2","text":"if you use dot (.) then all local changes will be rollbacked. git checkout -- .","title":"Replace Local Changes (2)"},{"location":"tr/week-3-git/ce103-week-3-git/#replace-local-changes-3","text":"If you instead want to drop all your local changes and commits, fetch the latest history from the server and point your local master branch at it like this git fetch origin git reset --hard origin/master","title":"Replace Local Changes (3)"},{"location":"tr/week-3-git/ce103-week-3-git/#reflog-1","text":"Everyone makes mistakes, and that's totally okay! Sometimes it may feel like you've corrupt your git repo so badly that you just want to delete it entirely.","title":"Reflog (1)"},{"location":"tr/week-3-git/ce103-week-3-git/#reflog-2","text":"git reflog is a very useful command in order to show a log of all the actions that have been taken! This includes merges, resets, reverts: basically any alteration to your branch.","title":"Reflog (2)"},{"location":"tr/week-3-git/ce103-week-3-git/#reflog-3","text":"","title":"Reflog (3)"},{"location":"tr/week-3-git/ce103-week-3-git/#reflog-4","text":"If you made a mistake, you can easily redo this by resetting HEAD based on the information that reflog gives us! Say that we actually didn't want to merge the origin branch. When we execute the git reflog command, we see that the state of the repo before the merge is at HEAD@{1} . Let's perform a git reset to point HEAD back to where it was on HEAD@{1} !","title":"Reflog (4)"},{"location":"tr/week-3-git/ce103-week-3-git/#reflog-5","text":"We can see that the latest action has been pushed to the reflog","title":"Reflog (5)"},{"location":"tr/week-3-git/ce103-week-3-git/#resetting-1","text":"It can happen that we committed changes that we didn't want later on. Maybe it's a WIP commit, or maybe a commit that introduced bugs! In that case, we can perform a git reset .","title":"Resetting (1)"},{"location":"tr/week-3-git/ce103-week-3-git/#resetting-2","text":"A git reset gets rid of all the current staged files and gives us control over where HEAD should point to.","title":"Resetting (2)"},{"location":"tr/week-3-git/ce103-week-3-git/#soft-reset-1","text":"A soft reset moves HEAD to the specified commit (or the index of the commit compared to HEAD ), without getting rid of the changes that were introduced on the commits afterward!","title":"Soft Reset (1)"},{"location":"tr/week-3-git/ce103-week-3-git/#soft-reset-2","text":"Let's say that we don't want to keep the commit 9e78i which added a style.css file, and we also don't want to keep the commit 035cc which added an index.js file. However, we do want to keep the newly added style.css and index.js file! A perfect use case for a soft reset.","title":"Soft Reset (2)"},{"location":"tr/week-3-git/ce103-week-3-git/#soft-reset-3","text":"","title":"Soft Reset (3)"},{"location":"tr/week-3-git/ce103-week-3-git/#soft-reset-2_1","text":"When typing git status , you'll see that we still have access to all the changes that were made on the previous commits. This is great, as this means that we can fix the contents of these files and commit them again later on!","title":"Soft Reset (2)"},{"location":"tr/week-3-git/ce103-week-3-git/#hard-reset-1","text":"Sometimes, we don't want to keep the changes that were introduced by certain commits. Unlike a soft reset, we shouldn't need to have access to them any more. Git should simply reset its state back to where it was on the specified commit: this even includes the changes in your working directory and staged files!","title":"Hard reset (1)"},{"location":"tr/week-3-git/ce103-week-3-git/#hard-reset-2","text":"Git has discarded the changes that were introduced on 9e78i and 035cc , and reset its state to where it was on commit ec5be .","title":"Hard reset (2)"},{"location":"tr/week-3-git/ce103-week-3-git/#reverting-1","text":"Another way of undoing changes is by performing a git revert . By reverting a certain commit, we create a new commit that contains the reverted changes!","title":"Reverting (1)"},{"location":"tr/week-3-git/ce103-week-3-git/#reverting-2","text":"Let's say that ec5be added an index.js file. Later on, we actually realize we didn't want this change introduced by this commit anymore! Let's revert the ec5be commit. Perfect! Commit 9e78i reverted the changes that were introduced by the ec5be commit.","title":"Reverting (2)"},{"location":"tr/week-3-git/ce103-week-3-git/#reverting-3","text":"Performing a git revert is very useful in order to undo a certain commit, without modifying the history of the branch.","title":"Reverting (3)"},{"location":"tr/week-3-git/ce103-week-3-git/#cherry-picking-1","text":"When a certain branch contains a commit that introduced changes we need on our active branch, we can cherry-pick that command! By cherry-pick ing a commit, we create a new commit on our active branch that contains the changes that were introduced by the cherry-pick ed commit.","title":"Cherry-picking (1)"},{"location":"tr/week-3-git/ce103-week-3-git/#cherry-picking-1_1","text":"Say that commit 76d12 on the dev branch added a change to the index.js file that we want in our master branch. We don't want the entire we just care about this one single commit! Cool, the master branch now contains the changes that 76d12 introduced","title":"Cherry-picking (1)"},{"location":"tr/week-3-git/ce103-week-3-git/#rebasing-1","text":"We just saw how we could apply changes from one branch to another by performing a git merge . Another way of adding changes from one branch to another is by performing a git rebase .","title":"Rebasing (1)"},{"location":"tr/week-3-git/ce103-week-3-git/#rebasing-2","text":"A git rebase copies the commits from the current branch, and puts these copied commits on top of the specified branch. Perfect, we now have all the changes that were made on the master branch available on the dev branch!","title":"Rebasing (2)"},{"location":"tr/week-3-git/ce103-week-3-git/#rebasing-3","text":"A big difference compared to merging, is that Git won't try to find out which files to keep and not keep. The branch that we're rebasing always has the latest changes that we want to keep! You won't run into any merging conflicts this way, and keeps a nice linear Git history.","title":"Rebasing (3)"},{"location":"tr/week-3-git/ce103-week-3-git/#rebasing-4","text":"This example shows rebasing on the master branch. In bigger projects, however, you usually don't want to do that. A git rebase changes the history of the project as new hashes are created for the copied commits!","title":"Rebasing (4)"},{"location":"tr/week-3-git/ce103-week-3-git/#rebasing-5","text":"Rebasing is great whenever you're working on a feature branch, and the master branch has been updated. You can get all the updates on your branch, which would prevent future merging conflicts!","title":"Rebasing (5)"},{"location":"tr/week-3-git/ce103-week-3-git/#interactive-rebase-1","text":"Before rebasing the commits, we can modify them! We can do so with an interactive rebase . An interactive rebase can also be useful on the branch you're currently working on, and want to modify some commits.","title":"Interactive Rebase (1)"},{"location":"tr/week-3-git/ce103-week-3-git/#interactive-rebase-2","text":"There are 6 actions we can perform on the commits we're rebasing: reword : Change the commit message edit : Amend this commit squash : Meld commit into the previous commit fixup : Meld commit into the previous commit, without keeping the commit's log message exec : Run a command on each commit we want to rebase drop : Remove the commit","title":"Interactive Rebase (2)"},{"location":"tr/week-3-git/ce103-week-3-git/#interactive-rebase-3","text":"Awesome! This way, we can have full control over our commits. If we want to remove a commit, we can just drop it.","title":"Interactive Rebase (3)"},{"location":"tr/week-3-git/ce103-week-3-git/#interactive-rebase-4","text":"Or if we want to squash multiple commits together to get a cleaner history, no problem! Interactive rebasing gives you a lot of control over the commits you're trying to rebase, even on the current active branch","title":"Interactive Rebase (4)"},{"location":"tr/week-3-git/ce103-week-3-git/#useful-hints-1","text":"built-in git GUI gitk","title":"Useful Hints (1)"},{"location":"tr/week-3-git/ce103-week-3-git/#useful-hints-2","text":"use colorful git output git config color.ui true","title":"Useful Hints (2)"},{"location":"tr/week-3-git/ce103-week-3-git/#useful-hints-3","text":"show log on just one line per commit git config format.pretty oneline","title":"Useful Hints (3)"},{"location":"tr/week-3-git/ce103-week-3-git/#useful-hints-4","text":"use interactive adding git add -i HEAD~2 // previous two commits fro head HEAD~~ // previous two commits from head HEAD@{2} // reflog order 18fe5 // previous commit hash","title":"Useful Hints (4)"},{"location":"tr/week-3-git/ce103-week-3-git/#git-flow","text":"A successful Git branching model \u00bb nvie.com","title":"GIT Flow"},{"location":"tr/week-3-git/ce103-week-3-git/#hotfix","text":"OneFlow \u2013 a Git branching model and workflow | End of Line Blog a simple git branching model \u00b7 GitHub","title":"Hotfix"},{"location":"tr/week-3-git/ce103-week-3-git/#git-decision-tree","text":"http://justinhileman.info/article/git-pretty/git-pretty.png","title":"GIT Decision Tree"},{"location":"tr/week-3-git/ce103-week-3-git/#git-in-action-1","text":"","title":"GIT in action (1)"},{"location":"tr/week-3-git/ce103-week-3-git/#git-in-action-2","text":"","title":"GIT in action (2)"},{"location":"tr/week-3-git/ce103-week-3-git/#git-in-action-3","text":"","title":"GIT in action (3)"},{"location":"tr/week-3-git/ce103-week-3-git/#git-in-action-4","text":"","title":"GIT in action (4)"},{"location":"tr/week-3-git/ce103-week-3-git/#git-in-action-5","text":"","title":"GIT in action (5)"},{"location":"tr/week-3-git/ce103-week-3-git/#git-in-action-6","text":"","title":"GIT in action (6)"},{"location":"tr/week-3-git/ce103-week-3-git/#git-in-action-7","text":"","title":"GIT in action (7)"},{"location":"tr/week-3-git/ce103-week-3-git/#references-1","text":"Source Code Management | Atlassian Git Tutorial . What is Source Code Management or Version Control ? - The Linux Juggernaut https://www.edureka.co/blog/how-to-use-github/ https://www.edureka.co/blog/git-tutorial/ https://www.edureka.co/blog/install-git/","title":"References (1)"},{"location":"tr/week-3-git/ce103-week-3-git/#references-2","text":"git - the simple guide - no deep shit! GitHub - rogerdudler/git-guide: git - the simple guide https://dev.to/lydiahallie/cs-visualized-useful-git-commands-37p1#merge How to write a good commit message - DEV Community https://blog.xebialabs.com/2016/06/14/periodic-table-devops-tools-v-2/","title":"References (2)"},{"location":"tr/week-3-git/ce103-week-3-git/#references-3","text":"https://harness.io/2018/01/devops-tools-lifecycle-mesh-2018/ https://medium.com/swlh/how-to-become-an-devops-engineer-in-2020-80b8740d5a52 https://www.lucidchart.com/blog/devops-process-flow https://www.researchgate.net/publication/262450962_Rugby_An_Agile_Process_Model_Based_on_Continuous_Delivery","title":"References (3)"},{"location":"tr/week-3-git/ce103-week-3-git/#references-4","text":"git - the simple guide - no deep shit! Git Tutorial | Commands And Operations In Git | Edureka How to write a good commit message - DEV Community An Introduction to Git and GitHub by Brian Yu - YouTube","title":"References (4)"},{"location":"tr/week-3-git/ce103-week-3-git/#references-5","text":"https://education.github.com/git-cheat-sheet-education.pdf NDP Software :: Git Cheatsheet ; Learn Git Branching https://guides.github.com/introduction/git-handbook/","title":"References (5)"},{"location":"tr/week-4-test/ce103-week-4-test/","text":"CE103 Algorithms and Programming I \u00b6 Week-4 \u00b6 Fall Semester, 2021-2022 \u00b6 Download DOC , SLIDE , PPTX Introduction to Code Reusability and Automated Testing \u00b6 During this course we will use entry level of shared library development and their tests and test automations. Also we will see TDD(Test Driven Development) approach. During this course we will use Windows OS, Eclipse and Visual Studio Commuity Edition environments for examples. Each example will include two function \"Hello \" printing function with name sayHelloTo(name) and sum of two variable function for basic, sum = sum(a,b). This sum function will add a to b and return result to sum variable. We will locate them in library and use them from a console application, also we will create unit tests for testing their functionalities and return variables Shared Library Development \u00b6 C Programming (Static Library) \u00b6 Visual Studio Community Edition \u00b6 In this sample we will create c-lib-sample project that contains library, executable, unit tests and unit test runners. First of all you install Visual Studio Community Edition from website Visual Studio 2019 Community Edition - Son \u00dccretsiz S\u00fcr\u00fcm\u00fc \u0130ndir Open visual studio community edition and select create a new project Select create a new project Select C++ static library from project list Name static library project Default configuration come with C++ project types and setting In the c-sample-lib.cpp you will sample function void fncsamplelib () { } Delete pch.h and pch.c files. Also disable use precompiled header settings from configurations and change to \"Not Using Precomplied Headers\", also you can delete precomplied Header File. Customize library header name and update \"framework.h\" to \"samplelib.h\" Insert your functions inside the c-sample-lib.c and update header files also. // c-sample-lib.cpp : Defines the functions for the static library. // #include \"samplelib.h\" #include \"stdio.h\" /// <summary> /// /// </summary> /// <param name=\"name\"></param> void sayHelloTo ( char * name ){ if ( name != NULL ){ printf ( \"Hello %s \\n \" , name ); } else { printf ( \"Hello There \\n \" ); } } /// <summary> /// /// </summary> /// <param name=\"a\"></param> /// <param name=\"b\"></param> /// <returns></returns> int sum ( int a , int b ){ int c = 0 ; c = a + b ; return c ; } also update samplelib.h #pragma once #define WIN32_LEAN_AND_MEAN // Exclude rarely-used stuff from Windows headers void sayHelloTo ( char * name ); int sum ( int a , int b ); If you check configuration you will see that for C complier we are using Microsoft Environment and Toolkits Now we can compile our library You can follow operation from output window in debug folder we will see our output now we will add a console application c-sample-app and use our library select C++ Windows Console Application from list C++ Console Application Selection will generate a C++ console project we can change extension to C to compile our application as C application. we will convert c-sample-app.c to following code #include <stdio.h> /// <summary> /// /// </summary> /// <returns></returns> int main () { printf ( \"Hello World! \\n \" ); } after conversion set c-sample-app as startup project and build it this will create c-sample-app.exe in the same folder with c-sample-lib.lib library if we run application we will see only \"Hello World\" now we will see two options to add library as references in our application and use its functions. First option right click references for c-sample-app and add current library as reference Select Add Reference Browse for solution and select c-sample-lib You can check added reference from references section now we can include required headers from c-sample-lib folder and use it. we can include required header with relative path as follow or with configuration #include <stdio.h> #include \"..\\c-sample-lib\\samplelib.h\" /// <summary> /// /// </summary> /// <returns></returns> int main () { printf ( \"Hello World! \\n \" ); } we can build our c-sample-app also we can only write header name #include <samplelib.h> for this we need to configure include directories select c-sample-lib header file location browse for folder your full path will be added to your configuration if you add header file paths to your configuration you can use header files by name in your source code #include <stdio.h> #include <samplelib.h> /// <summary> /// /// </summary> /// <returns></returns> int main () { printf ( \"Hello World! \\n \" ); } we can compile the following we don't have problems but here we need to configure relative paths for configuration open include library settings and update with relative path ..\\c-sample-lib now we have portable source code configuration. we can call our functions and then we can update header and library folder configurations. #include <stdio.h> #include <samplelib.h> /// <summary> /// /// </summary> /// <returns></returns> int main () { int result = 0 ; //printf(\"Hello World!\\n\"); result = sum ( 5 , 4 ); sayHelloTo ( \"Computer\" ); printf ( \"Result is %d \\n \" , result ); printf ( \"Press any key to continue... \\n \" ); getchar (); return 0 ; } when you run you will see the following outputs, that mean we called library functions. static library is a code sharing approach if you want to share your source code with your customers then you can share static libraries and header files together. Another case you can use a precompiled static library with you or this library can be part of any installation then if there is a installed app and static libraries are placed on system folder or any different location then you can use configuration files to set library path and included header paths Now we can remove project from c-sample-app references but we will set library file in configuration Before this copy static library and header files to a folder like that DebugStaticLibDeployment Set C/C++ -> General -> Additional Include Directories There is a bug in configurations and relative path not finding headers so for this reason we will set full path but this is not a good practice for team working Not Working .. \\ c - sample - lib \\ DebugStaticLibDeployment Working E : \\ ... \\ c - lib - sample \\ c - sample - lib \\ DebugStaticLibDeployment Now we will set library folder that our static library placed we will set VC++ Directories -> Library Directories Here is the same issue if we use relative path it doesn't work we need to set full path for library folder Working E : \\ ... \\ c - lib - sample \\ c - sample - lib \\ DebugStaticLibDeployment Not Working .. \\ c - sample - lib \\ DebugStaticLibDeployment If we set full path for both libraries and headers then we need to set library name for project Linker->Input->Additional Dependencies In this case we will compile c-sample-app and we do not need to compile c-sample-lib because we copied output files to different location and they are ready to use. current source code will be like that nothing changed #include <stdio.h> #include <samplelib.h> /// <summary> /// /// </summary> /// <returns></returns> int main () { int result = 0 ; //printf(\"Hello World!\\n\"); result = sum ( 5 , 4 ); sayHelloTo ( \"Computer\" ); printf ( \"Result is %d \\n \" , result ); printf ( \"Press any key to continue... \\n \" ); getchar (); return 0 ; } and output There is a option about portability that we can set for team works We will remove all library related settings from configurations and we will write them in source code Clear linker->general->additional library directories Clear C/C++ -> General -> Additional Include Directories Clear Linker->Input->Additional Dependencies Now we can set this configurations in source code as follow #pragma comment(lib, \"..\\\\DebugStaticLibDeployment\\\\c-sample-lib.lib\") #include \"..\\DebugStaticLibDeployment\\samplelib.h\" #include <stdio.h> /// <summary> /// /// </summary> /// <returns></returns> int main () { int result = 0 ; //printf(\"Hello World!\\n\"); result = sum ( 5 , 4 ); sayHelloTo ( \"Computer\" ); printf ( \"Result is %d \\n \" , result ); printf ( \"Press any key to continue... \\n \" ); getchar (); return 0 ; } with this configuration if your friends download this code then they can run them with their environment without setting a path. C++ Programming (Static Library) \u00b6 Visual Studio Community Edition \u00b6 All steps are similar with C programming above, but you do not need to delete pch.h You should take care about compiled source codes for example if your code is compiled for x86 then your application also should use the x86 configuration else x64 then library should be x64 complied version. Source will look like the following // cpp-sample-app.cpp : This file contains the 'main' function. Program execution begins and ends there. // #pragma comment(lib, \"..\\\\DebugStaticLibDeployment\\\\cpp-sample-lib.lib\") #include \"..\\DebugStaticLibDeployment\\samplelib.h\" #include <iostream> int main () { std :: cout << \"Hello World! \\n \" ; int result = 0 ; //printf(\"Hello World!\\n\"); result = sum ( 5 , 4 ); sayHelloTo ( \"Computer\" ); printf ( \"Result is %d \\n \" , result ); printf ( \"Press any key to continue... \\n \" ); getchar (); return 0 ; } C/C++ WSL Option \u00b6 Install WSL GitHub - ucoruh/ns3-wsl-win10-setup: ns3 windows 10 WSL2 setup and usage Create a Linux project Configure Platform Toolset to WSL Select GCC for Windows Subsystem for Linux Put a breakpoint and run debugger In the debugger for WSL you can use local WSL installation but if you want to run it on Release setting it require a SSH connection. Configure SSH parameters so you have to complete the following steps. C/C++ Remote Linux Option over SSH \u00b6 Enable SSH SSH on Windows Subsystem for Linux (WSL) | Illuminia Studios Connect to Remote WSL Environment Ba\u011flan hedef Linux sisteminize Visual Studio | Microsoft Docs C# Programming (Dinamik Library) \u00b6 Visual Studio Community Edition \u00b6 In C# project we will create class library we have several options for this sample we will select .NET core that we can build cross platform library There is no static library option We will select .Net Core 3.1 You will have default empty class library file In the project you can see .NETcore reference We can build empty class library that generate dll for our application Now we will add Console Application but this will also use .NETCore Select New Project Name the project Select .NETCore framework You will have the following sample main.cs file using System ; namespace csharp_sample_app { class Program { static void Main ( string [] args ) { Console . WriteLine ( \"Hello World!\" ); } } } Now we can link projects with adding references open reference section browse for class library project output folder and select output dll file for console application now we can update our library code and use it in console application copy following sample to sampleLibClass file in the library using System ; namespace csharp_sample_lib { public class sampleLibClass { public static void sayHelloTo ( string name ) { if (! String . IsNullOrEmpty ( name )) { Console . WriteLine ( \"Hello \" + name ); } else { Console . WriteLine ( \"Hello There\" ); } } public static int sum ( int a , int b ) { int c = 0 ; c = a + b ; return c ; } } } after this operation copy following sample to console application and build app then you can run using csharp_sample_lib ; using System ; namespace csharp_sample_app { class Program { static void Main ( string [] args ) { Console . WriteLine ( \"Hello World!\" ); sampleLibClass . sayHelloTo ( \"Computer\" ); int result = sampleLibClass . sum ( 5 , 4 ); Console . WriteLine ( \"Results is\" + result ); Console . WriteLine ( \"Results is {0}\" , result ); Console . Read (); } } } You will see following output that mean we called DLL functions Also we can publish this console application with dll for linux environment or others for linux environment we should install .NETCore follow the link below or commands that I shared with you as below for deployment How to Install Dotnet Core on Ubuntu 20.04 \u2013 TecAdmin Step 1 \u2013 Enable Microsoft PPA wget https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb sudo dpkg -i packages-microsoft-prod.deb Step 2 \u2013 Installing Dotnet Core SDK sudo apt update sudo apt install apt-transport-https sudo apt install dotnet-sdk-3.1 Step 3 \u2013 Install Dotnet Core Runtime Only To install .NET Core Runtime on Ubuntu 20.04 LTS system, execute the commands: sudo apt update To install the previous version of .Net core runtime 2.1, type: sudo apt install dotnet-runtime-2.1 Press \u201cy\u201d for any input prompted by the installer. Step 4 \u2013 (Optional) Check .NET Core Version You can use dotnet command line utility to check installed version of .NET Core on your system. To check dotnet version, type: dotnet --version Now we will publish our application as single executable Open publish menu Select netcoreapp3.1 and Release for linux-x64 Select produce single file After succesfull publish you will have linux binary that you can run with WSL Open WSL and enter the path where this folder located and run application as follow check dotnet --version and then run application you will see similar output In this sample we created single application from settings lets try with shared library located option uncheck the \"produce single file\" option and publish again. Then you will have the following outputs If you run csharp-sample-app you will have the same output Java Programming \u00b6 Eclipse IDE \u00b6 You should download and install eclipse installer and then you should select Eclipse IDE for Java Developers Eclipse Installer 2021-09 R | Eclipse Packages select create a project select java project give project name select finish first we need to add a default package to keep everything organized then we can create our class that includes our functions give class a name you will have following class with main We will create sample java library with static functions as below. package ce103 ; import java.io.IOException ; public class JavaSampleLib { public static void sayHelloTo ( String name ) { if ( name . isBlank () || name . isEmpty ()) { System . out . println ( \"Hello \" + name ); } else { System . out . println ( \"Hello There\" ); } } public static int sum ( int a , int b ) { int c = 0 ; c = a + b ; return c ; } public static void main ( String [] args ) { // TODO Auto-generated method stub System . out . println ( \"Hello World!\" ); JavaSampleLib . sayHelloTo ( \"Computer\" ); int result = JavaSampleLib . sum ( 5 , 4 ); System . out . println ( \"Results is\" + result ); System . out . printf ( \"Results is %d \\n\" , result ); try { System . in . read (); } catch ( IOException e ) { // TODO Auto-generated catch block e . printStackTrace (); } } } also we can add main method to run our library functions. If we run this file its process main function we can see output from console as below There is no exe files java runtime environment run class files but we can export this as an executable. Select Java->Runnable JAR File click next and set output path for jar file If our project has several external dependecy then we can extract this required files (jar, so, dll) in seperated folder or we can combine them and generate a single executable jar Lets pack everthing together, Select launch configuration that has main function end of this operation we will have the following jar that we can by click When you click application if cannot run then try command line to see problem enter jar folder and run the following command java -jar JavaSampleLibExecutable.jar In my case eclipse build JDK is newer than that I installed and set for my OS If we check version we can see problem Java version 1.8.0_231 We can found installed and builded JDK for our application from Eclipse setting select environments select installed JRE or JDK you can see installed JRE or JDK home C : \\Program Files\\Java\\jdk-16.0.1 Open system environment to fix this problem Check user settings first Check system settings we will move up the JDK 16 configuration then command line will run first java Also in system setting check JAVA_HOME After this settings close current command line and open new one write java --version if you see java version updated and 16.0.1 then settings are correct and now if we enter and run application as follow we will see output But when you click this jar its not running as you see so we have options to provide a clickable application there Launch4j is an option here Launch4j - Cross-platform Java executable wrapper you can watch this tutorial also How to convert jar to exe using Launch4J Full explanation - YouTube Download and install launch4j and open application configure your application settings similar to below select jar file and exe output path we can customize main class if have multiple main class select console from setting for this application we can provide a single running application, this setting avoid to run multiple instances we need to set runtime environment versions you can set system parameters before running application with splash screen you can show a splash screen image for your application File attributes such as version product information is configured from version info tab if your application runtime condition has an error then you can show this customized messages also with this options save configuration file xml and compile settings you will see generated output file in log screen Compiling resources Linking Wrapping WARNING: Sign the executable to minimize antivirus false positives or use launching instead of wrapping. Successfully created C:\\Users\\ugur.coruh\\Desktop\\java-export-sample\\JavaSampleLibExecutable.exe now we can run exe by click another option here adding a bat file to run current jar file JavaSampleLibExecutable.bat java -jar JavaSampleLibExecutable.jar if we click bat file then we will automate command line task for current jar file Now return back to our java library and create another console application that use library functions you can set libraries in this step from but our library should exported for our solution Select Add External JARs... Open Exported jar folder and select Or we can select by Add jar from current workspace but in this step I won't add anything I'll add references later we will have the following project lets create a package and lets create a main class for our application check create main function right click to project and add reference you can enter same configurations from project properties Lets export our library as a JAR file and then add to our classpath Select JAR file we configured output as C : \\Users\\ugur.coruh\\Desktop\\java-export-sample\\JavaSampleLib.jar In the same export folder now we have JavaSampleLib.jar return back to java-sample-app and then add this jar file to our project Build Path->Add External Archives you will see its added to reference libraries in our JavaSampleApp.java we can use the following source codes package ce103 ; import java.io.IOException ; public class JavaSampleApp { public static void main ( String [] args ) { // TODO Auto-generated method stub System . out . println ( \"Hello World!\" ); JavaSampleLib . sayHelloTo ( \"Computer\" ); int result = JavaSampleLib . sum ( 5 , 4 ); System . out . println ( \"Results is\" + result ); System . out . printf ( \"Results is %d \\n\" , result ); try { System . in . read (); } catch ( IOException e ) { // TODO Auto-generated catch block e . printStackTrace (); } } } When we run application we will see similar output Lets export this application with its dependent library Select runnable jar Set Launch configuration and Export destination C : \\Users\\ugur.coruh\\Desktop\\java-export-sample\\JavaSampleAppSingle.jar In this option we will have single jar file In the export folder we do not see reference libraries and we can run with command line only change copy required libraries setting and then give a new name for new jar file and export C : \\Users\\ugur.coruh\\Desktop\\java-export-sample\\JavaSampleAppMultiple.jar now we have a folder that contains our libraries referenced in this file we can find our library if we test our application we will see it will work if we delete JavaSampleLib.jar and then try running application we will get error Program Testing \u00b6 Unit Test Development \u00b6 C Unit Tests \u00b6 Visual Studio Community Edition \u00b6 C++ Unit Tests \u00b6 Visual Studio Community Edition \u00b6 C/C++ i\u00e7in birim testleri yazma - Visual Studio (Windows) | Microsoft Docs Use cpp-sample-lib project and add select Native Unit Test set project path and name you will have cpp-sample-test project add library project from references Add cpp-sample-lib to cpp-sample-test project cpp-sample-test.cpp #include \"pch.h\" #include \"CppUnitTest.h\" #include \"..\\cpp-sample-lib\\samplelib.h\" using namespace Microsoft :: VisualStudio :: CppUnitTestFramework ; namespace cppsampletest { TEST_CLASS ( cppsampletest ) { public : TEST_METHOD ( TestSumCorrect ) { Assert :: AreEqual ( 9 , sum ( 4 , 5 )); } TEST_METHOD ( TestSumInCorrect ) { Assert :: AreEqual ( 10 , sum ( 4 , 5 )); } }; } C# Unit Tests \u00b6 Visual Studio Community Edition (MSTestV2+.Net) \u00b6 Install extension fine code coverage https://marketplace.visualstudio.com/items?itemName=FortuneNgwenya.FineCodeCoverage Create a .Net Framework Library set project framework and path Create library functions using System ; using System.Collections.Generic ; using System.Text ; namespace cs_lib_sample { public class SampleLibClass { public static string sayHelloTo ( string name ) { string result = String . Empty ; if (! String . IsNullOrEmpty ( name )) { result = \"Hello \" + name ; } else { result = \"Hello There\" ; } Console . WriteLine ( result ); return result ; } public static int sum ( int a , int b ) { int c = 0 ; c = a + b ; return c ; } public int multiply ( int a , int b ) { return a * b ; } } } right click and then create unit test project press OK enter test code using Microsoft.VisualStudio.TestTools.UnitTesting ; using cs_lib_sample ; using System ; using System.Collections.Generic ; using System.Linq ; using System.Text ; using System.Threading.Tasks ; namespace cs_lib_sample.Tests { [TestClass()] public class SampleLibClassTests { [TestMethod()] public void testSayHelloTo () { Assert . AreEqual ( \"Hello Computer\" , SampleLibClass . sayHelloTo ( \"Computer\" ), \"Regular say hello should work\" ); } [TestMethod()] public void testSayHelloToWrong () { Assert . AreEqual ( \"Hello All\" , SampleLibClass . sayHelloTo ( \"Computer\" ), \"Regular say hello won't work\" ); } [TestMethod()] public void testSumCorrect () { Assert . AreEqual ( 9 , SampleLibClass . sum ( 4 , 5 ), \"Regular sum should work\" ); } [TestMethod()] public void testSumWrong () { Assert . AreEqual ( 10 , SampleLibClass . sum ( 4 , 5 ), \"Regular sum shouldn't work\" ); } [TestMethod()] public void testMultiply () { SampleLibClass sampleLib = new SampleLibClass (); Assert . AreEqual ( 20 , sampleLib . multiply ( 4 , 5 ), \"Regular multiplication should work\" ); } } } Run tests you will code coverage and entered or passed branches Visual Studio Community Edition (NUnit+.NETCore) \u00b6 use cshar-sample-lib for this example create and add a unit test project to solution Add project reference SampleLibraryTestClasss in NUnit Project using csharp_sample_lib ; using NUnit.Framework ; namespace csharp_sample_lib_test { public class SampleLibraryTestClass { sampleLibClass sampleLib ; [SetUp] public void Setup () { sampleLib = new sampleLibClass (); } [Test] public void testSayHelloTo () { Assert . AreEqual ( \"Hello Computer\" , sampleLibClass . sayHelloTo ( \"Computer\" ), \"Regular say hello should work\" ); } [Test] public void testSayHelloToWrong () { Assert . AreEqual ( \"Hello All\" , sampleLibClass . sayHelloTo ( \"Computer\" ), \"Regular say hello won't work\" ); } [Test] public void testSumCorrect () { Assert . AreEqual ( 9 , sampleLibClass . sum ( 4 , 5 ), \"Regular sum should work\" ); } [Test] public void testSumWrong () { Assert . AreEqual ( 10 , sampleLibClass . sum ( 4 , 5 ), \"Regular sum shouldn't work\" ); } [Test] public void testMultiply () { Assert . AreEqual ( 20 , sampleLib . multiply ( 4 , 5 ), \"Regular multiplication should work\" ); } } } sample class library using System ; namespace csharp_sample_lib { public class sampleLibClass { public static string sayHelloTo ( string name ) { string result = String . Empty ; if (! String . IsNullOrEmpty ( name )) { result = \"Hello \" + name ; } else { result = \"Hello There\" ; } Console . WriteLine ( result ); return result ; } public static int sum ( int a , int b ) { int c = 0 ; c = a + b ; return c ; } public int multiply ( int a , int b ) { return a * b ; } } } Open test explorer and run tests or you can run from project Also we can create unit test from library class, right click the sampleLibClass and select create unit tests but this option do not provide nunit tests. using Microsoft.VisualStudio.TestTools.UnitTesting ; using csharp_sample_lib ; using System ; using System.Collections.Generic ; using System.Text ; namespace csharp_sample_lib.Tests { [TestClass()] public class sampleLibClassTests { [TestMethod()] public void sayHelloToTest () { Assert . Fail (); } [TestMethod()] public void sumTest () { Assert . Fail (); } [TestMethod()] public void multiplyTest () { Assert . Fail (); } } } we will not commit this changes and continue from nunit test project, the fine code coverage also work for nunit test but not provide inline highlighting if we run tests we will have the following outputs Inline code highlight is part of enterprise visual studio edition Analyzing code coverage in Visual Studio - DEV Community TL;DR \u00b6 Additional information you can use OpenCover + Nunit Runner + Report Generator together to setup a code coverage report but it has complex batch running process. After a few try I decided to use fine code coverage but here is the usage not tested well. First unit test runner tool doesn't support .Net Core c# - The NUnit 3 driver encountered an error while executing reflected code (NUnit.Engine.NUnitEngineException) - Stack Overflow Follow the instructions on the link CMD OpenCover \u00b7 sukhoi1/Useful-Notes Wiki \u00b7 GitHub Install OpenCover, ReportGenerator, Nunit,Runners packages then use the package installation folder to get tools that you need Here is a sample for open cover, select package and copy path Goto path and tools C : \\Users\\ugur.coruh\\.nuget\\packages\\opencover\\4.7.1221 You need to setup some batch similar with following run-test-coverage.bat set pathA = C:\\Users\\ugur.coruh\\.nuget\\packages\\opencover\\4.7.1221\\tools set pathB = C:\\Users\\ugur.coruh\\.nuget\\packages\\nunit.consolerunner\\3.12.0\\tools set pathC = C:\\Users\\ugur.coruh\\.nuget\\packages\\reportgenerator\\4.8.13\\tools\\netcoreapp3.0 set dllpath = C:\\Users\\ugur.coruh\\Desktop\\csharp-sample-lib\\csharp-sample-lib-test\\bin\\Debug\\netcoreapp3.1 \" %pathA% \\OpenCover.Console.exe\" ^ - targetargs: \" %dllpath% \\csharp-sample-lib-test.dll\" ^ - filter: \"+[csharp-sample-lib*]* -[*test]*\" ^ - target: \" %pathB% \\nunit3-console.exe\" ^ - output: \" %dllpath% \\coverReport.xml\" ^ - skipautoprops -register:user && \" %pathC% \\ReportGenerator.exe\" -reports: \" %dllpath% \\coverReport.xml\" -targetdir: \"\" %dllpath% \\coverage \" pause but nunit3-console.exe gives error for this compatibility issues I prefer to use fine code coverage extension. OpenCover related studies Code coverage of manual or automated tests with OpenCover for .NET applications \u2013 Automation Rhapsody Code coverage of .NET Core unit tests with OpenCover \u2013 Automation Rhapsody Sample OpenCover report Summary - Coverage Report Download and Setup OpenCover, NUnit Console, Report Generator without Package Manager \u00b6 You can also download the tools from github project pages and install on your operating system, OpenCover \u00b6 Releases \u00b7 OpenCover/opencover \u00b7 GitHub Select advanced and then install for all users ReportGenerator \u00b6 Release ReportGenerator_4.8.13 \u00b7 danielpalme/ReportGenerator \u00b7 GitHub NUnit Console \u00b6 Downloads NUnit + MSTest Batch Report Generation (Not Tested) \u00b6 OpenCover and ReportGenerator Unit Test Coverage in Visual Studio 2013 and 2015 \u2013 CodeHelper.Net OpenCover and ReportGenerator Unit Test Coverage in Visual Studio 2013 and 2015 - CodeProject Java Unit Tests \u00b6 Eclipse IDE (JUnit4 , JUnit5) \u00b6 In this sample we will create two example for similar library Please check the following links JUnit 5 tutorial - Learn how to write unit tests JUnit 5 JUnit 5 User Guide https://www.eclemma.org/ JUnit Hello World Example - Examples Java Code Geeks - 2021 https://yasinmemic.medium.com/java-ile-unit-test-yazmak-birim-test-ca15cf0d024b Java Application + JUnit \u00b6 In normal java application we can right click the project java-sample-lib and add Junit case and you will have the following test class Now we will create tests that check our function flowchart and return values We need to cover all code branches that we coded I have updated JavaSampleLib.java as follow to check outputs JavaSampleLib.java package ce103 ; public class JavaSampleLib { public static String sayHelloTo ( String name ) { String output = \"\" ; if ( ! name . isBlank () && ! name . isEmpty ()){ output = \"Hello \" + name ; } else { output = \"Hello There\" ; } System . out . println ( output ); return output ; } public static int sum ( int a , int b ) { int c = 0 ; c = a + b ; return c ; } public int multiply ( int a , int b ) { return a * b ; } // public static void main(String[] args) { // // TODO Auto-generated method stub // System.out.println(\"Hello World!\"); // // JavaSampleLib.sayHelloTo(\"Computer\"); // int result = JavaSampleLib.sum(5, 4); // System.out.println(\"Results is\" + result); // System.out.printf(\"Results is %d \\n\", result); // // // try { // System.in.read(); // } catch (IOException e) { // // TODO Auto-generated catch block // e.printStackTrace(); // } // // } } and JavaSampleLibTest.java package ce103 ; import static org.junit.jupiter.api.Assertions.* ; import org.junit.jupiter.api.AfterAll ; import org.junit.jupiter.api.AfterEach ; import org.junit.jupiter.api.BeforeAll ; import org.junit.jupiter.api.BeforeEach ; import org.junit.jupiter.api.DisplayName ; import org.junit.jupiter.api.RepeatedTest ; import org.junit.jupiter.api.Test ; import org.junit.jupiter.params.ParameterizedTest ; import org.junit.jupiter.params.provider.MethodSource ; class JavaSampleLibTest { JavaSampleLib sampleLib ; @BeforeAll static void setUpBeforeClass () throws Exception { } @AfterAll static void tearDownAfterClass () throws Exception { } @BeforeEach void setUp () throws Exception { sampleLib = new JavaSampleLib (); } @AfterEach void tearDown () throws Exception { } @Test @DisplayName ( \"Simple Say Hello should work\" ) void testSayHelloTo () { assertEquals ( \"Hello Computer\" , JavaSampleLib . sayHelloTo ( \"Computer\" ), \"Regular say hello should work\" ); } @Test @DisplayName ( \"Simple Say Hello shouldn' work\" ) void testSayHelloToWrong () { assertEquals ( \"Hello All\" , JavaSampleLib . sayHelloTo ( \"Computer\" ), \"Regular say hello won't work\" ); } @Test @DisplayName ( \"Simple sum should work\" ) void testSumCorrect () { assertEquals ( 9 , JavaSampleLib . sum ( 4 , 5 ), \"Regular sum should work\" ); } @Test @DisplayName ( \"Simple sum shouldn't work\" ) void testSumWrong () { assertEquals ( 10 , JavaSampleLib . sum ( 4 , 5 ), \"Regular sum shouldn't work\" ); } @Test @DisplayName ( \"Simple multiplication should work\" ) void testMultiply () { assertEquals ( 20 , sampleLib . multiply ( 4 , 5 ), \"Regular multiplication should work\" ); } @RepeatedTest ( 5 ) @DisplayName ( \"Ensure correct handling of zero\" ) void testMultiplyWithZero () { assertEquals ( 0 , sampleLib . multiply ( 0 , 5 ), \"Multiple with zero should be zero\" ); assertEquals ( 0 , sampleLib . multiply ( 5 , 0 ), \"Multiple with zero should be zero\" ); } public static int [][] data () { return new int [][] { { 1 , 2 , 2 }, { 5 , 3 , 15 }, { 121 , 4 , 484 },{ 2 , 2 , 2 } }; } @ParameterizedTest @MethodSource ( value = \"data\" ) void testWithStringParameter ( int [] data ) { JavaSampleLib tester = new JavaSampleLib (); int m1 = data [ 0 ] ; int m2 = data [ 1 ] ; int expected = data [ 2 ] ; assertEquals ( expected , tester . multiply ( m1 , m2 )); } } if we run tests we will see all results there also we can see the code coverage of tests when we open our source code (just close and open again another case highlighting will not work) you will see tested part of your codes Maven Java Application + JUnit \u00b6 Lets create Maven project with tests Create a maven project File -> New -> Maven Project Lets convert our sample java-sample-lib directories to standard folder structure for test and app division Maven \u2013 Introduction to the Standard Directory Layout Also for intro you can use this JUnit Hello World Example - Examples Java Code Geeks - 2021 Eclipse Maven Java JUnit 4.12 (pulled by Maven automatically) Lets give new sample java-sample-lib-mvnbut in this time we will create a maven project pom.xml file <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\" > <modelVersion> 4.0.0 </modelVersion> <groupId> com.ce103 </groupId> <artifactId> java-sample-lib-ext </artifactId> <version> 0.0.1-SNAPSHOT </version> <name> Java Sample Lib </name> <description> Java Sample with Unit Test </description> </project> we will add JUnit 5 for our project <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\" > <modelVersion> 4.0.0 </modelVersion> <groupId> com.ce103 </groupId> <artifactId> java-sample-lib-ext </artifactId> <version> 0.0.1-SNAPSHOT </version> <name> Java Sample Lib </name> <description> Java Sample with Unit Test </description> <dependencies> <dependency> <groupId> org.junit.jupiter </groupId> <artifactId> junit-jupiter-params </artifactId> <version> 5.7.1 </version> <scope> test </scope> </dependency> </dependencies> </project> it will automatically download libraries Create java sample library in ce103 package, first create java package In this package create library class copy content from other library package ce103 ; public class JavaSampleLib { public static String sayHelloTo ( String name ) { String output = \"\" ; if ( ! name . isBlank () && ! name . isEmpty ()){ output = \"Hello \" + name ; } else { output = \"Hello There\" ; } System . out . println ( output ); return output ; } public static int sum ( int a , int b ) { int c = 0 ; c = a + b ; return c ; } public int multiply ( int a , int b ) { return a * b ; } } Now lets create tests inf src/test/java create a JUnit Case you will simple template package ce103 ; import static org.junit.jupiter.api.Assertions.* ; import org.junit.jupiter.api.AfterAll ; import org.junit.jupiter.api.AfterEach ; import org.junit.jupiter.api.BeforeAll ; import org.junit.jupiter.api.BeforeEach ; import org.junit.jupiter.api.Test ; class JavaSampleLibTest { @BeforeAll static void setUpBeforeClass () throws Exception { } @AfterAll static void tearDownAfterClass () throws Exception { } @BeforeEach void setUp () throws Exception { } @AfterEach void tearDown () throws Exception { } @Test void testSayHelloTo () { fail ( \"Not yet implemented\" ); } @Test void testSum () { fail ( \"Not yet implemented\" ); } @Test void testMultiply () { fail ( \"Not yet implemented\" ); } } now lets copy tests from other projects That's a part of java unit testing... TDD (Test Driven Development) \u00b6 Test and Deployment Automation Management \u00b6 Travis-CI + C \u00b6 Travis-CI + Cpp \u00b6 Travis-CI + C \u00b6 Travis-CI + Java \u00b6 References \u00b6 GitHub - MicrosoftDocs/cpp-docs: C++ Documentation","title":"Week-4 (Unit Testing and Libraries)"},{"location":"tr/week-4-test/ce103-week-4-test/#introduction-to-code-reusability-and-automated-testing","text":"During this course we will use entry level of shared library development and their tests and test automations. Also we will see TDD(Test Driven Development) approach. During this course we will use Windows OS, Eclipse and Visual Studio Commuity Edition environments for examples. Each example will include two function \"Hello \" printing function with name sayHelloTo(name) and sum of two variable function for basic, sum = sum(a,b). This sum function will add a to b and return result to sum variable. We will locate them in library and use them from a console application, also we will create unit tests for testing their functionalities and return variables","title":"Introduction to Code Reusability and Automated Testing"},{"location":"tr/week-4-test/ce103-week-4-test/#visual-studio-community-edition","text":"In this sample we will create c-lib-sample project that contains library, executable, unit tests and unit test runners. First of all you install Visual Studio Community Edition from website Visual Studio 2019 Community Edition - Son \u00dccretsiz S\u00fcr\u00fcm\u00fc \u0130ndir Open visual studio community edition and select create a new project Select create a new project Select C++ static library from project list Name static library project Default configuration come with C++ project types and setting In the c-sample-lib.cpp you will sample function void fncsamplelib () { } Delete pch.h and pch.c files. Also disable use precompiled header settings from configurations and change to \"Not Using Precomplied Headers\", also you can delete precomplied Header File. Customize library header name and update \"framework.h\" to \"samplelib.h\" Insert your functions inside the c-sample-lib.c and update header files also. // c-sample-lib.cpp : Defines the functions for the static library. // #include \"samplelib.h\" #include \"stdio.h\" /// <summary> /// /// </summary> /// <param name=\"name\"></param> void sayHelloTo ( char * name ){ if ( name != NULL ){ printf ( \"Hello %s \\n \" , name ); } else { printf ( \"Hello There \\n \" ); } } /// <summary> /// /// </summary> /// <param name=\"a\"></param> /// <param name=\"b\"></param> /// <returns></returns> int sum ( int a , int b ){ int c = 0 ; c = a + b ; return c ; } also update samplelib.h #pragma once #define WIN32_LEAN_AND_MEAN // Exclude rarely-used stuff from Windows headers void sayHelloTo ( char * name ); int sum ( int a , int b ); If you check configuration you will see that for C complier we are using Microsoft Environment and Toolkits Now we can compile our library You can follow operation from output window in debug folder we will see our output now we will add a console application c-sample-app and use our library select C++ Windows Console Application from list C++ Console Application Selection will generate a C++ console project we can change extension to C to compile our application as C application. we will convert c-sample-app.c to following code #include <stdio.h> /// <summary> /// /// </summary> /// <returns></returns> int main () { printf ( \"Hello World! \\n \" ); } after conversion set c-sample-app as startup project and build it this will create c-sample-app.exe in the same folder with c-sample-lib.lib library if we run application we will see only \"Hello World\" now we will see two options to add library as references in our application and use its functions. First option right click references for c-sample-app and add current library as reference Select Add Reference Browse for solution and select c-sample-lib You can check added reference from references section now we can include required headers from c-sample-lib folder and use it. we can include required header with relative path as follow or with configuration #include <stdio.h> #include \"..\\c-sample-lib\\samplelib.h\" /// <summary> /// /// </summary> /// <returns></returns> int main () { printf ( \"Hello World! \\n \" ); } we can build our c-sample-app also we can only write header name #include <samplelib.h> for this we need to configure include directories select c-sample-lib header file location browse for folder your full path will be added to your configuration if you add header file paths to your configuration you can use header files by name in your source code #include <stdio.h> #include <samplelib.h> /// <summary> /// /// </summary> /// <returns></returns> int main () { printf ( \"Hello World! \\n \" ); } we can compile the following we don't have problems but here we need to configure relative paths for configuration open include library settings and update with relative path ..\\c-sample-lib now we have portable source code configuration. we can call our functions and then we can update header and library folder configurations. #include <stdio.h> #include <samplelib.h> /// <summary> /// /// </summary> /// <returns></returns> int main () { int result = 0 ; //printf(\"Hello World!\\n\"); result = sum ( 5 , 4 ); sayHelloTo ( \"Computer\" ); printf ( \"Result is %d \\n \" , result ); printf ( \"Press any key to continue... \\n \" ); getchar (); return 0 ; } when you run you will see the following outputs, that mean we called library functions. static library is a code sharing approach if you want to share your source code with your customers then you can share static libraries and header files together. Another case you can use a precompiled static library with you or this library can be part of any installation then if there is a installed app and static libraries are placed on system folder or any different location then you can use configuration files to set library path and included header paths Now we can remove project from c-sample-app references but we will set library file in configuration Before this copy static library and header files to a folder like that DebugStaticLibDeployment Set C/C++ -> General -> Additional Include Directories There is a bug in configurations and relative path not finding headers so for this reason we will set full path but this is not a good practice for team working Not Working .. \\ c - sample - lib \\ DebugStaticLibDeployment Working E : \\ ... \\ c - lib - sample \\ c - sample - lib \\ DebugStaticLibDeployment Now we will set library folder that our static library placed we will set VC++ Directories -> Library Directories Here is the same issue if we use relative path it doesn't work we need to set full path for library folder Working E : \\ ... \\ c - lib - sample \\ c - sample - lib \\ DebugStaticLibDeployment Not Working .. \\ c - sample - lib \\ DebugStaticLibDeployment If we set full path for both libraries and headers then we need to set library name for project Linker->Input->Additional Dependencies In this case we will compile c-sample-app and we do not need to compile c-sample-lib because we copied output files to different location and they are ready to use. current source code will be like that nothing changed #include <stdio.h> #include <samplelib.h> /// <summary> /// /// </summary> /// <returns></returns> int main () { int result = 0 ; //printf(\"Hello World!\\n\"); result = sum ( 5 , 4 ); sayHelloTo ( \"Computer\" ); printf ( \"Result is %d \\n \" , result ); printf ( \"Press any key to continue... \\n \" ); getchar (); return 0 ; } and output There is a option about portability that we can set for team works We will remove all library related settings from configurations and we will write them in source code Clear linker->general->additional library directories Clear C/C++ -> General -> Additional Include Directories Clear Linker->Input->Additional Dependencies Now we can set this configurations in source code as follow #pragma comment(lib, \"..\\\\DebugStaticLibDeployment\\\\c-sample-lib.lib\") #include \"..\\DebugStaticLibDeployment\\samplelib.h\" #include <stdio.h> /// <summary> /// /// </summary> /// <returns></returns> int main () { int result = 0 ; //printf(\"Hello World!\\n\"); result = sum ( 5 , 4 ); sayHelloTo ( \"Computer\" ); printf ( \"Result is %d \\n \" , result ); printf ( \"Press any key to continue... \\n \" ); getchar (); return 0 ; } with this configuration if your friends download this code then they can run them with their environment without setting a path.","title":"Visual Studio Community Edition"},{"location":"tr/week-4-test/ce103-week-4-test/#visual-studio-community-edition_1","text":"All steps are similar with C programming above, but you do not need to delete pch.h You should take care about compiled source codes for example if your code is compiled for x86 then your application also should use the x86 configuration else x64 then library should be x64 complied version. Source will look like the following // cpp-sample-app.cpp : This file contains the 'main' function. Program execution begins and ends there. // #pragma comment(lib, \"..\\\\DebugStaticLibDeployment\\\\cpp-sample-lib.lib\") #include \"..\\DebugStaticLibDeployment\\samplelib.h\" #include <iostream> int main () { std :: cout << \"Hello World! \\n \" ; int result = 0 ; //printf(\"Hello World!\\n\"); result = sum ( 5 , 4 ); sayHelloTo ( \"Computer\" ); printf ( \"Result is %d \\n \" , result ); printf ( \"Press any key to continue... \\n \" ); getchar (); return 0 ; }","title":"Visual Studio Community Edition"},{"location":"tr/week-4-test/ce103-week-4-test/#cc-wsl-option","text":"Install WSL GitHub - ucoruh/ns3-wsl-win10-setup: ns3 windows 10 WSL2 setup and usage Create a Linux project Configure Platform Toolset to WSL Select GCC for Windows Subsystem for Linux Put a breakpoint and run debugger In the debugger for WSL you can use local WSL installation but if you want to run it on Release setting it require a SSH connection. Configure SSH parameters so you have to complete the following steps.","title":"C/C++ WSL Option"},{"location":"tr/week-4-test/ce103-week-4-test/#cc-remote-linux-option-over-ssh","text":"Enable SSH SSH on Windows Subsystem for Linux (WSL) | Illuminia Studios Connect to Remote WSL Environment Ba\u011flan hedef Linux sisteminize Visual Studio | Microsoft Docs","title":"C/C++ Remote Linux Option over SSH"},{"location":"tr/week-4-test/ce103-week-4-test/#visual-studio-community-edition_2","text":"In C# project we will create class library we have several options for this sample we will select .NET core that we can build cross platform library There is no static library option We will select .Net Core 3.1 You will have default empty class library file In the project you can see .NETcore reference We can build empty class library that generate dll for our application Now we will add Console Application but this will also use .NETCore Select New Project Name the project Select .NETCore framework You will have the following sample main.cs file using System ; namespace csharp_sample_app { class Program { static void Main ( string [] args ) { Console . WriteLine ( \"Hello World!\" ); } } } Now we can link projects with adding references open reference section browse for class library project output folder and select output dll file for console application now we can update our library code and use it in console application copy following sample to sampleLibClass file in the library using System ; namespace csharp_sample_lib { public class sampleLibClass { public static void sayHelloTo ( string name ) { if (! String . IsNullOrEmpty ( name )) { Console . WriteLine ( \"Hello \" + name ); } else { Console . WriteLine ( \"Hello There\" ); } } public static int sum ( int a , int b ) { int c = 0 ; c = a + b ; return c ; } } } after this operation copy following sample to console application and build app then you can run using csharp_sample_lib ; using System ; namespace csharp_sample_app { class Program { static void Main ( string [] args ) { Console . WriteLine ( \"Hello World!\" ); sampleLibClass . sayHelloTo ( \"Computer\" ); int result = sampleLibClass . sum ( 5 , 4 ); Console . WriteLine ( \"Results is\" + result ); Console . WriteLine ( \"Results is {0}\" , result ); Console . Read (); } } } You will see following output that mean we called DLL functions Also we can publish this console application with dll for linux environment or others for linux environment we should install .NETCore follow the link below or commands that I shared with you as below for deployment How to Install Dotnet Core on Ubuntu 20.04 \u2013 TecAdmin Step 1 \u2013 Enable Microsoft PPA wget https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb sudo dpkg -i packages-microsoft-prod.deb Step 2 \u2013 Installing Dotnet Core SDK sudo apt update sudo apt install apt-transport-https sudo apt install dotnet-sdk-3.1 Step 3 \u2013 Install Dotnet Core Runtime Only To install .NET Core Runtime on Ubuntu 20.04 LTS system, execute the commands: sudo apt update To install the previous version of .Net core runtime 2.1, type: sudo apt install dotnet-runtime-2.1 Press \u201cy\u201d for any input prompted by the installer. Step 4 \u2013 (Optional) Check .NET Core Version You can use dotnet command line utility to check installed version of .NET Core on your system. To check dotnet version, type: dotnet --version Now we will publish our application as single executable Open publish menu Select netcoreapp3.1 and Release for linux-x64 Select produce single file After succesfull publish you will have linux binary that you can run with WSL Open WSL and enter the path where this folder located and run application as follow check dotnet --version and then run application you will see similar output In this sample we created single application from settings lets try with shared library located option uncheck the \"produce single file\" option and publish again. Then you will have the following outputs If you run csharp-sample-app you will have the same output","title":"Visual Studio Community Edition"},{"location":"tr/week-4-test/ce103-week-4-test/#eclipse-ide","text":"You should download and install eclipse installer and then you should select Eclipse IDE for Java Developers Eclipse Installer 2021-09 R | Eclipse Packages select create a project select java project give project name select finish first we need to add a default package to keep everything organized then we can create our class that includes our functions give class a name you will have following class with main We will create sample java library with static functions as below. package ce103 ; import java.io.IOException ; public class JavaSampleLib { public static void sayHelloTo ( String name ) { if ( name . isBlank () || name . isEmpty ()) { System . out . println ( \"Hello \" + name ); } else { System . out . println ( \"Hello There\" ); } } public static int sum ( int a , int b ) { int c = 0 ; c = a + b ; return c ; } public static void main ( String [] args ) { // TODO Auto-generated method stub System . out . println ( \"Hello World!\" ); JavaSampleLib . sayHelloTo ( \"Computer\" ); int result = JavaSampleLib . sum ( 5 , 4 ); System . out . println ( \"Results is\" + result ); System . out . printf ( \"Results is %d \\n\" , result ); try { System . in . read (); } catch ( IOException e ) { // TODO Auto-generated catch block e . printStackTrace (); } } } also we can add main method to run our library functions. If we run this file its process main function we can see output from console as below There is no exe files java runtime environment run class files but we can export this as an executable. Select Java->Runnable JAR File click next and set output path for jar file If our project has several external dependecy then we can extract this required files (jar, so, dll) in seperated folder or we can combine them and generate a single executable jar Lets pack everthing together, Select launch configuration that has main function end of this operation we will have the following jar that we can by click When you click application if cannot run then try command line to see problem enter jar folder and run the following command java -jar JavaSampleLibExecutable.jar In my case eclipse build JDK is newer than that I installed and set for my OS If we check version we can see problem Java version 1.8.0_231 We can found installed and builded JDK for our application from Eclipse setting select environments select installed JRE or JDK you can see installed JRE or JDK home C : \\Program Files\\Java\\jdk-16.0.1 Open system environment to fix this problem Check user settings first Check system settings we will move up the JDK 16 configuration then command line will run first java Also in system setting check JAVA_HOME After this settings close current command line and open new one write java --version if you see java version updated and 16.0.1 then settings are correct and now if we enter and run application as follow we will see output But when you click this jar its not running as you see so we have options to provide a clickable application there Launch4j is an option here Launch4j - Cross-platform Java executable wrapper you can watch this tutorial also How to convert jar to exe using Launch4J Full explanation - YouTube Download and install launch4j and open application configure your application settings similar to below select jar file and exe output path we can customize main class if have multiple main class select console from setting for this application we can provide a single running application, this setting avoid to run multiple instances we need to set runtime environment versions you can set system parameters before running application with splash screen you can show a splash screen image for your application File attributes such as version product information is configured from version info tab if your application runtime condition has an error then you can show this customized messages also with this options save configuration file xml and compile settings you will see generated output file in log screen Compiling resources Linking Wrapping WARNING: Sign the executable to minimize antivirus false positives or use launching instead of wrapping. Successfully created C:\\Users\\ugur.coruh\\Desktop\\java-export-sample\\JavaSampleLibExecutable.exe now we can run exe by click another option here adding a bat file to run current jar file JavaSampleLibExecutable.bat java -jar JavaSampleLibExecutable.jar if we click bat file then we will automate command line task for current jar file Now return back to our java library and create another console application that use library functions you can set libraries in this step from but our library should exported for our solution Select Add External JARs... Open Exported jar folder and select Or we can select by Add jar from current workspace but in this step I won't add anything I'll add references later we will have the following project lets create a package and lets create a main class for our application check create main function right click to project and add reference you can enter same configurations from project properties Lets export our library as a JAR file and then add to our classpath Select JAR file we configured output as C : \\Users\\ugur.coruh\\Desktop\\java-export-sample\\JavaSampleLib.jar In the same export folder now we have JavaSampleLib.jar return back to java-sample-app and then add this jar file to our project Build Path->Add External Archives you will see its added to reference libraries in our JavaSampleApp.java we can use the following source codes package ce103 ; import java.io.IOException ; public class JavaSampleApp { public static void main ( String [] args ) { // TODO Auto-generated method stub System . out . println ( \"Hello World!\" ); JavaSampleLib . sayHelloTo ( \"Computer\" ); int result = JavaSampleLib . sum ( 5 , 4 ); System . out . println ( \"Results is\" + result ); System . out . printf ( \"Results is %d \\n\" , result ); try { System . in . read (); } catch ( IOException e ) { // TODO Auto-generated catch block e . printStackTrace (); } } } When we run application we will see similar output Lets export this application with its dependent library Select runnable jar Set Launch configuration and Export destination C : \\Users\\ugur.coruh\\Desktop\\java-export-sample\\JavaSampleAppSingle.jar In this option we will have single jar file In the export folder we do not see reference libraries and we can run with command line only change copy required libraries setting and then give a new name for new jar file and export C : \\Users\\ugur.coruh\\Desktop\\java-export-sample\\JavaSampleAppMultiple.jar now we have a folder that contains our libraries referenced in this file we can find our library if we test our application we will see it will work if we delete JavaSampleLib.jar and then try running application we will get error","title":"Eclipse IDE"},{"location":"tr/week-4-test/ce103-week-4-test/#program-testing","text":"","title":"Program Testing"},{"location":"tr/week-4-test/ce103-week-4-test/#unit-test-development","text":"","title":"Unit Test Development"},{"location":"tr/week-4-test/ce103-week-4-test/#c-unit-tests","text":"","title":"C Unit Tests"},{"location":"tr/week-4-test/ce103-week-4-test/#c-unit-tests_1","text":"","title":"C++ Unit Tests"},{"location":"tr/week-4-test/ce103-week-4-test/#visual-studio-community-edition_4","text":"C/C++ i\u00e7in birim testleri yazma - Visual Studio (Windows) | Microsoft Docs Use cpp-sample-lib project and add select Native Unit Test set project path and name you will have cpp-sample-test project add library project from references Add cpp-sample-lib to cpp-sample-test project cpp-sample-test.cpp #include \"pch.h\" #include \"CppUnitTest.h\" #include \"..\\cpp-sample-lib\\samplelib.h\" using namespace Microsoft :: VisualStudio :: CppUnitTestFramework ; namespace cppsampletest { TEST_CLASS ( cppsampletest ) { public : TEST_METHOD ( TestSumCorrect ) { Assert :: AreEqual ( 9 , sum ( 4 , 5 )); } TEST_METHOD ( TestSumInCorrect ) { Assert :: AreEqual ( 10 , sum ( 4 , 5 )); } }; }","title":"Visual Studio Community Edition"},{"location":"tr/week-4-test/ce103-week-4-test/#c-unit-tests_2","text":"","title":"C# Unit Tests"},{"location":"tr/week-4-test/ce103-week-4-test/#visual-studio-community-edition-mstestv2net","text":"Install extension fine code coverage https://marketplace.visualstudio.com/items?itemName=FortuneNgwenya.FineCodeCoverage Create a .Net Framework Library set project framework and path Create library functions using System ; using System.Collections.Generic ; using System.Text ; namespace cs_lib_sample { public class SampleLibClass { public static string sayHelloTo ( string name ) { string result = String . Empty ; if (! String . IsNullOrEmpty ( name )) { result = \"Hello \" + name ; } else { result = \"Hello There\" ; } Console . WriteLine ( result ); return result ; } public static int sum ( int a , int b ) { int c = 0 ; c = a + b ; return c ; } public int multiply ( int a , int b ) { return a * b ; } } } right click and then create unit test project press OK enter test code using Microsoft.VisualStudio.TestTools.UnitTesting ; using cs_lib_sample ; using System ; using System.Collections.Generic ; using System.Linq ; using System.Text ; using System.Threading.Tasks ; namespace cs_lib_sample.Tests { [TestClass()] public class SampleLibClassTests { [TestMethod()] public void testSayHelloTo () { Assert . AreEqual ( \"Hello Computer\" , SampleLibClass . sayHelloTo ( \"Computer\" ), \"Regular say hello should work\" ); } [TestMethod()] public void testSayHelloToWrong () { Assert . AreEqual ( \"Hello All\" , SampleLibClass . sayHelloTo ( \"Computer\" ), \"Regular say hello won't work\" ); } [TestMethod()] public void testSumCorrect () { Assert . AreEqual ( 9 , SampleLibClass . sum ( 4 , 5 ), \"Regular sum should work\" ); } [TestMethod()] public void testSumWrong () { Assert . AreEqual ( 10 , SampleLibClass . sum ( 4 , 5 ), \"Regular sum shouldn't work\" ); } [TestMethod()] public void testMultiply () { SampleLibClass sampleLib = new SampleLibClass (); Assert . AreEqual ( 20 , sampleLib . multiply ( 4 , 5 ), \"Regular multiplication should work\" ); } } } Run tests you will code coverage and entered or passed branches","title":"Visual Studio Community Edition (MSTestV2+.Net)"},{"location":"tr/week-4-test/ce103-week-4-test/#visual-studio-community-edition-nunitnetcore","text":"use cshar-sample-lib for this example create and add a unit test project to solution Add project reference SampleLibraryTestClasss in NUnit Project using csharp_sample_lib ; using NUnit.Framework ; namespace csharp_sample_lib_test { public class SampleLibraryTestClass { sampleLibClass sampleLib ; [SetUp] public void Setup () { sampleLib = new sampleLibClass (); } [Test] public void testSayHelloTo () { Assert . AreEqual ( \"Hello Computer\" , sampleLibClass . sayHelloTo ( \"Computer\" ), \"Regular say hello should work\" ); } [Test] public void testSayHelloToWrong () { Assert . AreEqual ( \"Hello All\" , sampleLibClass . sayHelloTo ( \"Computer\" ), \"Regular say hello won't work\" ); } [Test] public void testSumCorrect () { Assert . AreEqual ( 9 , sampleLibClass . sum ( 4 , 5 ), \"Regular sum should work\" ); } [Test] public void testSumWrong () { Assert . AreEqual ( 10 , sampleLibClass . sum ( 4 , 5 ), \"Regular sum shouldn't work\" ); } [Test] public void testMultiply () { Assert . AreEqual ( 20 , sampleLib . multiply ( 4 , 5 ), \"Regular multiplication should work\" ); } } } sample class library using System ; namespace csharp_sample_lib { public class sampleLibClass { public static string sayHelloTo ( string name ) { string result = String . Empty ; if (! String . IsNullOrEmpty ( name )) { result = \"Hello \" + name ; } else { result = \"Hello There\" ; } Console . WriteLine ( result ); return result ; } public static int sum ( int a , int b ) { int c = 0 ; c = a + b ; return c ; } public int multiply ( int a , int b ) { return a * b ; } } } Open test explorer and run tests or you can run from project Also we can create unit test from library class, right click the sampleLibClass and select create unit tests but this option do not provide nunit tests. using Microsoft.VisualStudio.TestTools.UnitTesting ; using csharp_sample_lib ; using System ; using System.Collections.Generic ; using System.Text ; namespace csharp_sample_lib.Tests { [TestClass()] public class sampleLibClassTests { [TestMethod()] public void sayHelloToTest () { Assert . Fail (); } [TestMethod()] public void sumTest () { Assert . Fail (); } [TestMethod()] public void multiplyTest () { Assert . Fail (); } } } we will not commit this changes and continue from nunit test project, the fine code coverage also work for nunit test but not provide inline highlighting if we run tests we will have the following outputs Inline code highlight is part of enterprise visual studio edition Analyzing code coverage in Visual Studio - DEV Community","title":"Visual Studio Community Edition (NUnit+.NETCore)"},{"location":"tr/week-4-test/ce103-week-4-test/#tldr","text":"Additional information you can use OpenCover + Nunit Runner + Report Generator together to setup a code coverage report but it has complex batch running process. After a few try I decided to use fine code coverage but here is the usage not tested well. First unit test runner tool doesn't support .Net Core c# - The NUnit 3 driver encountered an error while executing reflected code (NUnit.Engine.NUnitEngineException) - Stack Overflow Follow the instructions on the link CMD OpenCover \u00b7 sukhoi1/Useful-Notes Wiki \u00b7 GitHub Install OpenCover, ReportGenerator, Nunit,Runners packages then use the package installation folder to get tools that you need Here is a sample for open cover, select package and copy path Goto path and tools C : \\Users\\ugur.coruh\\.nuget\\packages\\opencover\\4.7.1221 You need to setup some batch similar with following run-test-coverage.bat set pathA = C:\\Users\\ugur.coruh\\.nuget\\packages\\opencover\\4.7.1221\\tools set pathB = C:\\Users\\ugur.coruh\\.nuget\\packages\\nunit.consolerunner\\3.12.0\\tools set pathC = C:\\Users\\ugur.coruh\\.nuget\\packages\\reportgenerator\\4.8.13\\tools\\netcoreapp3.0 set dllpath = C:\\Users\\ugur.coruh\\Desktop\\csharp-sample-lib\\csharp-sample-lib-test\\bin\\Debug\\netcoreapp3.1 \" %pathA% \\OpenCover.Console.exe\" ^ - targetargs: \" %dllpath% \\csharp-sample-lib-test.dll\" ^ - filter: \"+[csharp-sample-lib*]* -[*test]*\" ^ - target: \" %pathB% \\nunit3-console.exe\" ^ - output: \" %dllpath% \\coverReport.xml\" ^ - skipautoprops -register:user && \" %pathC% \\ReportGenerator.exe\" -reports: \" %dllpath% \\coverReport.xml\" -targetdir: \"\" %dllpath% \\coverage \" pause but nunit3-console.exe gives error for this compatibility issues I prefer to use fine code coverage extension. OpenCover related studies Code coverage of manual or automated tests with OpenCover for .NET applications \u2013 Automation Rhapsody Code coverage of .NET Core unit tests with OpenCover \u2013 Automation Rhapsody Sample OpenCover report Summary - Coverage Report","title":"TL;DR"},{"location":"tr/week-4-test/ce103-week-4-test/#download-and-setup-opencover-nunit-console-report-generator-without-package-manager","text":"You can also download the tools from github project pages and install on your operating system,","title":"Download and Setup OpenCover, NUnit Console, Report Generator without Package Manager"},{"location":"tr/week-4-test/ce103-week-4-test/#opencover","text":"Releases \u00b7 OpenCover/opencover \u00b7 GitHub Select advanced and then install for all users","title":"OpenCover"},{"location":"tr/week-4-test/ce103-week-4-test/#reportgenerator","text":"Release ReportGenerator_4.8.13 \u00b7 danielpalme/ReportGenerator \u00b7 GitHub","title":"ReportGenerator"},{"location":"tr/week-4-test/ce103-week-4-test/#nunit-console","text":"Downloads","title":"NUnit Console"},{"location":"tr/week-4-test/ce103-week-4-test/#nunit-mstest-batch-report-generation-not-tested","text":"OpenCover and ReportGenerator Unit Test Coverage in Visual Studio 2013 and 2015 \u2013 CodeHelper.Net OpenCover and ReportGenerator Unit Test Coverage in Visual Studio 2013 and 2015 - CodeProject","title":"NUnit + MSTest Batch Report Generation (Not Tested)"},{"location":"tr/week-4-test/ce103-week-4-test/#eclipse-ide-junit4-junit5","text":"In this sample we will create two example for similar library Please check the following links JUnit 5 tutorial - Learn how to write unit tests JUnit 5 JUnit 5 User Guide https://www.eclemma.org/ JUnit Hello World Example - Examples Java Code Geeks - 2021 https://yasinmemic.medium.com/java-ile-unit-test-yazmak-birim-test-ca15cf0d024b","title":"Eclipse IDE (JUnit4 , JUnit5)"},{"location":"tr/week-4-test/ce103-week-4-test/#java-application-junit","text":"In normal java application we can right click the project java-sample-lib and add Junit case and you will have the following test class Now we will create tests that check our function flowchart and return values We need to cover all code branches that we coded I have updated JavaSampleLib.java as follow to check outputs JavaSampleLib.java package ce103 ; public class JavaSampleLib { public static String sayHelloTo ( String name ) { String output = \"\" ; if ( ! name . isBlank () && ! name . isEmpty ()){ output = \"Hello \" + name ; } else { output = \"Hello There\" ; } System . out . println ( output ); return output ; } public static int sum ( int a , int b ) { int c = 0 ; c = a + b ; return c ; } public int multiply ( int a , int b ) { return a * b ; } // public static void main(String[] args) { // // TODO Auto-generated method stub // System.out.println(\"Hello World!\"); // // JavaSampleLib.sayHelloTo(\"Computer\"); // int result = JavaSampleLib.sum(5, 4); // System.out.println(\"Results is\" + result); // System.out.printf(\"Results is %d \\n\", result); // // // try { // System.in.read(); // } catch (IOException e) { // // TODO Auto-generated catch block // e.printStackTrace(); // } // // } } and JavaSampleLibTest.java package ce103 ; import static org.junit.jupiter.api.Assertions.* ; import org.junit.jupiter.api.AfterAll ; import org.junit.jupiter.api.AfterEach ; import org.junit.jupiter.api.BeforeAll ; import org.junit.jupiter.api.BeforeEach ; import org.junit.jupiter.api.DisplayName ; import org.junit.jupiter.api.RepeatedTest ; import org.junit.jupiter.api.Test ; import org.junit.jupiter.params.ParameterizedTest ; import org.junit.jupiter.params.provider.MethodSource ; class JavaSampleLibTest { JavaSampleLib sampleLib ; @BeforeAll static void setUpBeforeClass () throws Exception { } @AfterAll static void tearDownAfterClass () throws Exception { } @BeforeEach void setUp () throws Exception { sampleLib = new JavaSampleLib (); } @AfterEach void tearDown () throws Exception { } @Test @DisplayName ( \"Simple Say Hello should work\" ) void testSayHelloTo () { assertEquals ( \"Hello Computer\" , JavaSampleLib . sayHelloTo ( \"Computer\" ), \"Regular say hello should work\" ); } @Test @DisplayName ( \"Simple Say Hello shouldn' work\" ) void testSayHelloToWrong () { assertEquals ( \"Hello All\" , JavaSampleLib . sayHelloTo ( \"Computer\" ), \"Regular say hello won't work\" ); } @Test @DisplayName ( \"Simple sum should work\" ) void testSumCorrect () { assertEquals ( 9 , JavaSampleLib . sum ( 4 , 5 ), \"Regular sum should work\" ); } @Test @DisplayName ( \"Simple sum shouldn't work\" ) void testSumWrong () { assertEquals ( 10 , JavaSampleLib . sum ( 4 , 5 ), \"Regular sum shouldn't work\" ); } @Test @DisplayName ( \"Simple multiplication should work\" ) void testMultiply () { assertEquals ( 20 , sampleLib . multiply ( 4 , 5 ), \"Regular multiplication should work\" ); } @RepeatedTest ( 5 ) @DisplayName ( \"Ensure correct handling of zero\" ) void testMultiplyWithZero () { assertEquals ( 0 , sampleLib . multiply ( 0 , 5 ), \"Multiple with zero should be zero\" ); assertEquals ( 0 , sampleLib . multiply ( 5 , 0 ), \"Multiple with zero should be zero\" ); } public static int [][] data () { return new int [][] { { 1 , 2 , 2 }, { 5 , 3 , 15 }, { 121 , 4 , 484 },{ 2 , 2 , 2 } }; } @ParameterizedTest @MethodSource ( value = \"data\" ) void testWithStringParameter ( int [] data ) { JavaSampleLib tester = new JavaSampleLib (); int m1 = data [ 0 ] ; int m2 = data [ 1 ] ; int expected = data [ 2 ] ; assertEquals ( expected , tester . multiply ( m1 , m2 )); } } if we run tests we will see all results there also we can see the code coverage of tests when we open our source code (just close and open again another case highlighting will not work) you will see tested part of your codes","title":"Java Application + JUnit"},{"location":"tr/week-4-test/ce103-week-4-test/#maven-java-application-junit","text":"Lets create Maven project with tests Create a maven project File -> New -> Maven Project Lets convert our sample java-sample-lib directories to standard folder structure for test and app division Maven \u2013 Introduction to the Standard Directory Layout Also for intro you can use this JUnit Hello World Example - Examples Java Code Geeks - 2021 Eclipse Maven Java JUnit 4.12 (pulled by Maven automatically) Lets give new sample java-sample-lib-mvnbut in this time we will create a maven project pom.xml file <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\" > <modelVersion> 4.0.0 </modelVersion> <groupId> com.ce103 </groupId> <artifactId> java-sample-lib-ext </artifactId> <version> 0.0.1-SNAPSHOT </version> <name> Java Sample Lib </name> <description> Java Sample with Unit Test </description> </project> we will add JUnit 5 for our project <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\" > <modelVersion> 4.0.0 </modelVersion> <groupId> com.ce103 </groupId> <artifactId> java-sample-lib-ext </artifactId> <version> 0.0.1-SNAPSHOT </version> <name> Java Sample Lib </name> <description> Java Sample with Unit Test </description> <dependencies> <dependency> <groupId> org.junit.jupiter </groupId> <artifactId> junit-jupiter-params </artifactId> <version> 5.7.1 </version> <scope> test </scope> </dependency> </dependencies> </project> it will automatically download libraries Create java sample library in ce103 package, first create java package In this package create library class copy content from other library package ce103 ; public class JavaSampleLib { public static String sayHelloTo ( String name ) { String output = \"\" ; if ( ! name . isBlank () && ! name . isEmpty ()){ output = \"Hello \" + name ; } else { output = \"Hello There\" ; } System . out . println ( output ); return output ; } public static int sum ( int a , int b ) { int c = 0 ; c = a + b ; return c ; } public int multiply ( int a , int b ) { return a * b ; } } Now lets create tests inf src/test/java create a JUnit Case you will simple template package ce103 ; import static org.junit.jupiter.api.Assertions.* ; import org.junit.jupiter.api.AfterAll ; import org.junit.jupiter.api.AfterEach ; import org.junit.jupiter.api.BeforeAll ; import org.junit.jupiter.api.BeforeEach ; import org.junit.jupiter.api.Test ; class JavaSampleLibTest { @BeforeAll static void setUpBeforeClass () throws Exception { } @AfterAll static void tearDownAfterClass () throws Exception { } @BeforeEach void setUp () throws Exception { } @AfterEach void tearDown () throws Exception { } @Test void testSayHelloTo () { fail ( \"Not yet implemented\" ); } @Test void testSum () { fail ( \"Not yet implemented\" ); } @Test void testMultiply () { fail ( \"Not yet implemented\" ); } } now lets copy tests from other projects That's a part of java unit testing...","title":"Maven Java Application + JUnit"},{"location":"tr/week-4-test/ce103-week-4-test/#tdd-test-driven-development","text":"","title":"TDD (Test Driven Development)"},{"location":"tr/week-4-test/ce103-week-4-test/#test-and-deployment-automation-management","text":"","title":"Test and Deployment Automation Management"},{"location":"tr/week-4-test/ce103-week-4-test/#travis-ci-c","text":"","title":"Travis-CI + C"},{"location":"tr/week-4-test/ce103-week-4-test/#travis-ci-cpp","text":"","title":"Travis-CI + Cpp"},{"location":"tr/week-4-test/ce103-week-4-test/#travis-ci-c_1","text":"","title":"Travis-CI + C"},{"location":"tr/week-4-test/ce103-week-4-test/#travis-ci-java","text":"","title":"Travis-CI + Java"},{"location":"tr/week-4-test/ce103-week-4-test/#references","text":"GitHub - MicrosoftDocs/cpp-docs: C++ Documentation","title":"References"},{"location":"tr/week-5-c/ce103-week-5-c/","text":"CE103 Algorithms and Programming I \u00b6 Week-5 \u00b6 Fall Semester, 2021-2022 \u00b6 Download DOC , SLIDE , PPTX C Functional Console Programming \u00b6 Books and Resources \u00b6 free-programming-books/free-programming-books-langs.md at master \u00b7 EbookFoundation/free-programming-books \u00b7 GitHub C Functional Console Programming \u00b6 We will use the following course notes and examples. Learn C Programming C Tutorials - Introduction to C Programming Language The C and C++ programming tutorials, hands-on approach with program examples, code samples and tons of output images using Visual C++, C++ Builder, Linux gcc and g++ compilers and IDE CS50x 2021 C Programming For Dummies C reference - cppreference.com https://c.happycodings.com/ C Programming \u00b6 C is a versatile programming language. It is useful for creating software such as operating systems, databases, and compilers. For novices, C programming is a great language to learn to code in. Our C tutorials will take you step by step through the process of learning C programming. Before starting you should check your development enviroment. You will open visual studio community edition and create a C++ console application then rename *.cpp file to *.c for triggering c complier. Before starting you should understand the executable generation flows #include <stdio.h> int main ( void ) { printf ( \"hello, world\" ); } and how we convert source code to binary codehere is a sandbox in CS50 harvard course Week 0 - CS50x https://sandbox.cs50.io/ you can use it for online compiler $ make hello clang -fsanitize = signed-integer-overflow -fsanitize = undefined -ggdb3 -O0 -std = c11 -Wall -Werror -Wextra -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wshadow hello.c -lcrypt -lcs50 -lm -o hello $ ./hello hello, world if you want to make samething in windows environment you should create the following makefile near the hello.c Makefile # This is the default target, which will be built when # you invoke make .PHONY : all all : hello # This rule tells make how to build hello from hello.cpp hello : hello . c g++ -o hello hello.c # This rule tells make to copy hello to the binaries subdirectory, # creating it if necessary .PHONY : install install : mkdir -p binaries cp -p hello binaries # This rule tells make to delete hello and hello.o .PHONY : clean clean : rm -f hello C: \\U sers \\u gur.coruh \\D esktop \\h ello-make>make hello g++ -o hello hello.c C: \\U sers \\u gur.coruh \\D esktop \\h ello-make>dir Volume in drive C is Windows Volume Serial Number is 8C3C-8F8C Directory of C: \\U sers \\u gur.coruh \\D esktop \\h ello-make 11 /02/2021 01 :44 AM <DIR> . 11 /02/2021 01 :44 AM <DIR> .. 11 /02/2021 01 :15 AM 73 hello.c 11 /02/2021 01 :44 AM 54 ,022 hello.exe 11 /02/2021 01 :43 AM 458 Makefile 3 File ( s ) 54 ,553 bytes 2 Dir ( s ) 101 ,382,164,480 bytes free C: \\U sers \\u gur.coruh \\D esktop \\h ello-make>hello.exe hello, world C: \\U sers \\u gur.coruh \\D esktop \\h ello-make> $ clang hello.c $ ls a.out* hello* hello.c $ ./a.out hello, world $ clang -o hello hello.c $ ls a.out* hello* hello.c $ ./hello hello, world $ ls hello . c $ clang - o hello hello . c - lcs50 $ ls hello * hello . c $ . / hello hello , world $ Also you can use visual studio community edition. preprocessing \u00b6 get included file declarations #include <cs50.h> #include <stdio.h> int main ( void ) { string name = get_string ( \"What's your name? \" ); printf ( \"hello, %s \\n \" , name ); } to this string get_string ( string prompt ); int printf ( string format , ...); int main ( void ) { string name = get_string ( \"What's your name? \" ); printf ( \"hello, %s \\n \" , name ); } compiling \u00b6 convert source code to assembler code ... main: # @main .cfi_startproc # BB#0: pushq %rbp .Ltmp0: .cfi_def_cfa_offset 16 .Ltmp1: .cfi_offset %rbp, -16 movq %rsp, %rbp .Ltmp2: .cfi_def_cfa_register %rbp subq $16, %rsp xorl %eax, %eax movl %eax, %edi movabsq $.L.str, %rsi movb $0, %al callq get_string movabsq $.L.str.1, %rdi movq %rax, -8(%rbp) movq -8(%rbp), %rsi movb $0, %al callq printf ... assembling \u00b6 convert assembler to opcodes ... main: # @main .cfi_startproc # BB#0: pushq %rbp .Ltmp0: .cfi_def_cfa_offset 16 .Ltmp1: .cfi_offset %rbp, -16 movq %rsp, %rbp .Ltmp2: .cfi_def_cfa_register %rbp subq $16, %rsp xorl %eax, %eax movl %eax, %edi movabsq $.L.str, %rsi movb $0, %al callq get_string movabsq $.L.str.1, %rdi movq %rax, -8(%rbp) movq -8(%rbp), %rsi movb $0, %al callq printf ... to thislinking \u00b6 hello.c cs50.c stdio.c 01111111010001010100110001000110 00000010000000010000000100000000 00000000000000000000000000000000 00000000000000000000000000000000 00000001000000000011111000000000 00000001000000000000000000000000 00000000000000000000000000000000 00000000000000000000000000000000 00000000000000000000000000000000 00000000000000000000000000000000 10100000000000100000000000000000 00000000000000000000000000000000 00000000000000000000000000000000 01000000000000000000000000000000 00000000000000000100000000000000 00001010000000000000000100000000 01010101010010001000100111100101 01001000100000111110110000010000 00110001110000001000100111000111 01001000101111100000000000000000 00000000000000000000000000000000 00000000000000001011000000000000 11101000000000000000000000000000 00000000010010001011111100000000 00000000000000000000000000000000 00000000000000000000000001001000 ... 01111111010001010100110001000110 00000010000000010000000100000000 00000000000000000000000000000000 00000000000000000000000000000000 00000011000000000011111000000000 00000001000000000000000000000000 11000000000011110000000000000000 00000000000000000000000000000000 01000000000000000000000000000000 00000000000000000000000000000000 00101000001100100000000000000000 00000000000000000000000000000000 00000000000000000000000000000000 01000000000000000011100000000000 00000111000000000100000000000000 00011100000000000001100100000000 00000001000000000000000000000000 00000101000000000000000000000000 00000000000000000000000000000000 00000000000000000000000000000000 00000000000000000000000000000000 00000000000000000000000000000000 00000000000000000000000000000000 00000000000000000000000000000000 01011100001001010000000000000000 00000000000000000000000000000000 ... 00101111011011000110100101100010 01100011001011100111001101101111 00101110001101100010000000101111 01110101011100110111001000101111 01101100011010010110001000101111 01111000001110000011011001011111 00110110001101000010110101101100 01101001011011100111010101111000 00101101011001110110111001110101 00101111011011000110100101100010 01100011010111110110111001101111 01101110011100110110100001100001 01110010011001010110010000101110 01100001001000000010000001000001 01010011010111110100111001000101 01000101010001000100010101000100 00100000001010000010000000101111 01101100011010010110001000101111 01111000001110000011011001011111 00110110001101000010110101101100 01101001011011100111010101111000 00101101011001110110111001110101 00101111011011000110010000101101 01101100011010010110111001110101 01111000001011010111100000111000 00110110001011010011011000110100 ... combine binary codes to generate exentroduction \u00b6 Keywords and Identifiers \u00b6 This tutorial will teach you about keywords, which are reserved words in C programming that are part of the syntax. You will also be taught about identifiers and how to name them. Character set \u00b6 A character set is a collection of alphabets, letters, and special characters that are supported by the C programming language. As variables and functions, C accepts both lowercase and uppercase alphabets. Alphabets \u00b6 Uppercase : A B C ................................... X Y Z Lowercase : a b c ...................................... x y z Digits \u00b6 0 1 2 3 4 5 6 7 8 9 Special Characters \u00b6 Special Characters in C Programming , < > . - ( ) ; $ : % [ ] # ? ' & { } \" ^ ! * / - \\ ~ + White space Characters A newline, a horizontal tab, a carriage return, and a form feed are all examples of punctuation. C Keywords \u00b6 Keywords are reserved words in programming that have special meanings to the compiler. Keywords are syntax elements that cannot be used as identifiers. As an example: int money ; In this case, int is a keyword indicating that money is a variable of type int (integer). Because C is a case-sensitive language, all keywords must be written in lowercase. The following is a list of all the keywords permitted in ANSI C. C Keywords auto double int struct break else long switch case enum register typedef char extern return union continue for signed void do if static while default goto sizeof volatile const float short unsigned All of these keywords, as well as their syntax and application, will be covered in their respective topics. The Complete List of all 32 C Programming Keywords (With Examples) - Programiz C Identifiers \u00b6 The term \"identifier\" refers to the name given to entities such as variables, functions, structures, and so on. Identifiers must be distinct. They are created to give a unique name to an entity in order to identify it during program execution. As an example: int money ; double accountBalance ; money and accountBalance are identifiers in this context. Also, keep in mind that identifier names must be distinct from keyword names. Because int is a keyword, it cannot be used as an identifier. Rules for naming identifiers \u00b6 Letters (including capital and lowercase letters), numbers, and underscores can all be used in a valid identification. An identifier's initial letter should be either a letter or an underscore. Keywords such as int, while, and so on cannot be used as identifiers. There are no restrictions on the length of an identification. However, if the identifier is larger than 31 characters, you may have issues with some compilers. If you follow the above criterion, you can use any name as an identifier; nevertheless, provide meaningful names to identifiers that make sense. C Variables, Constants and Literals \u00b6 This article will teach you about variables and the rules for naming variables. You will also learn about different literals and how to build constants in C programming. Variables \u00b6 A variable in programming is a container (storage space) for data. Each variable should be given a unique name to denote the storage region (identifier). Variable names are simply a graphical representation of a memory location. As an example: int playerScore = 95 ; In this case, playerScore is an int variable. The variable is given the integer value 95 in this case. A variable's value may be altered, thus the term variable. char ch = 'a' ; // some code ch = 'l' ; Rules for naming a variable \u00b6 A variable name can only contain characters (uppercase and lowercase), numbers, and underscores. A variable's initial letter should be either a letter or an underscore. There are no restrictions on the length of a variable name (identifier). However, if the variable name is larger than 31 characters, you may have issues with some compilers. Please keep in mind that you should always aim to give variables meaningful names. For example, firstName is a more appropriate variable name than fn . C is a highly typed programming language. This means that once a variable is declared, it cannot be modified. As an example: int number = 5 ; // integer variable number = 5.5 ; // error double number ; // error In this case, the type of number variable is int. This variable cannot be assigned the floating-point (decimal) value 5.5. Furthermore, you cannot change the variable's data type to double. By the way, in order to hold decimal values in C, you must designate their type as double or float. Literals \u00b6 Literals are data that are used to represent fixed values. They can be directly utilized in the code. For example: 1, 2.5, 'c,' and so on. Literals are 1, 2.5, and 'c' in this case. Why? These words cannot have various values assigned to them. 1. Integers \u00b6 An integer is a numeric literal (related with numbers) that does not have any fractional or exponential components. In C programming, there are three types of integer literals: digits (base 10) the number octal (base 8) hexadecimal (base 16) For example: Decimal : 0 , -9 , 22 etc Octal : 021 , 077 , 033 etc Hexadecimal : 0x7f , 0x2a , 0x521 etc In C, octal begins with a 0 while hexadecimal begins with a 0x. 2. Floating-point Literals \u00b6 A floating-point literal is a numeric literal with a fractional or exponent form. As an example: -2.0 0.0000234 -0.22E-5 Please note that \\[ E-5 = 10^{-5} \\] 3. Characters \u00b6 Enclosing a single character inside single quote marks yields a character literal. For example, 'a','m', 'F', '2', \", and so on. 4. Escape Sequences \u00b6 In C programming, it is sometimes important to employ characters that cannot be typed or have specific meaning. For instance, newline (enter), tab, question mark, and so on. Escape sequences are utilized to utilise these characters. Escape Sequences Character \\b Backspace \\f Form feed \\n Newline \\r Return \\t Horizontal Tab \\v Vertical Tab `\\\\ Backslash \\' Single quotation mark \\\" Double quotation mark \\? Question mark \\0 Null character 5. String Literals \u00b6 A string literal is a string of characters surrounded by double quotation marks. As an example: \"good\" //string constant \"\" //null string constant \" \" //string constant of six white space \"x\" //string constant having a single character. \"Earth is round \\n \" //prints string with a newline Constants \u00b6 The const keyword can be used to declare a variable whose value cannot be modified. This will result in a constant. As an example, const double PI = 3.14 ; We've introduced the keyword const. PI is a symbolic constant in this context; its value cannot be modified. const double PI = 3.14 ; PI = 2.9 ; //Error You may also use the #define preprocessor directive to declare a constant. C Data Types \u00b6 In this course, you will learn about basic data types in C programming, such as int, float, and char. Data types are variable declarations in C programming. The kind and quantity of data linked with variables are determined by this. As an example, int myVar ; In this case, myVar is an int (integer) variable. int has a size of 4 bytes. Basic types \u00b6 Here's a table containing commonly used types in C programming for quick access. Type Size(bytes) Format Specifiers int at least 2, usually 4 %d %i char 1 %c float 4 %f double 8 %lf short int 2 usually %hd unsigned int at least 2, usually 4 %u long int at least 4, usually 8 %ld %li long long int at least 8 %lld %lli unsigned long int at least 4 %lu unsigned long long int at least 8 %llu signed char 1 %c usigned char 1 %c long double at least 10, usually 12 or 16 %Lf int \u00b6 Integers are entire integers with zero, positive, and negative values but no decimal values. For instance, \\(0\\) , \\(-5\\) , and \\(10\\) In order to declare an integer variable, we can use int . int id ; In this case, id is an integer variable. In C programming, you can define many variables at the same time. As an example, int id , age ; Integers are typically \\(\\text{4 bytes}\\) in size ( \\(\\text{32 bits}\\) ). It may also take $2^{32} $ different states from \\(-2147483648\\) to \\(2147483647\\) . float and double \u00b6 Real values are stored in float and double variables. float salary ; double price ; Floating-point numbers in C can also be expressed in exponential form. As an example, float normalizationFactor = 22.442e2 ; What is the distinction between float and double? Float (single precision float data type) has a size of 4 bytes. And double (double precision float data type) is 8 bytes in size. char \u00b6 The keyword char is used to declare variables of the character type. As an example, char test = 'h' ; The character variable is 1 byte in size. void \u00b6 void is an unfinished type. It signifies \"nothing\" or \"nothing of the sort.\" You might conceive of emptiness as the absence of something. If a function does not return anything, its return type should be void. It is important to note that void variables cannot be created. short and long \u00b6 If you need to utilize a huge number, a type specifier long can be used. Here's how it works: long a ; long long b ; long double c ; Variables a and b can store integer values in this case. In addition, c may hold a floating-point number. You can use short if you are certain that just a tiny integer range between \\(-32767, +32767\\) will be utilized. short d ; The sizeof() operator may always be used to determine the size of a variable. #include <stdio.h> int main () { short a ; long b ; long long c ; long double d ; printf ( \"size of short = %d bytes \\n \" , sizeof ( a )); printf ( \"size of long = %d bytes \\n \" , sizeof ( b )); printf ( \"size of long long = %d bytes \\n \" , sizeof ( c )); printf ( \"size of long double= %d bytes \\n \" , sizeof ( d )); return 0 ; } signed and unsigned \u00b6 Signed and unsigned are type modifiers in C. You may use them to change the data storage of a data type. As an example, unsigned int x ; int y ; Because we applied the unsigned modifier, the variable x can only retain zero and positive numbers. Given that int has a capacity of 4 bytes , variable y can have values ranging from - \\(2^{31}\\) to \\(2^{31}-1\\) , But variable x can hold values ranging from \\(0\\) to \\(2^{32}-1\\) . Other data types defined in C programming are: \u00b6 bool Type Enumerated type Complex types Derived Data Types \u00b6 Derived types are data types that are derived from basic data types. Arrays, pointers, function types, structures, and so on are examples. C Input Output (I/O) \u00b6 In this lesson, you will learn how to utilize the scanf() function to accept user input and the printf() method to display output to the user. C Output \u00b6 printf() is a common output function in C programming. The function outputs formatted data to the screen. As an example, Example 1: C Output \u00b6 #include <stdio.h> int main () { // Displays the string inside quotations printf ( \"C Programming\" ); return 0 ; } Output C Programming How does this software function? The main() function is required in all legal C programs. The execution of the code begins at the commencement of the main() function. The printf() function is a library function that is used to provide formatted output to the screen. The string is printed within quote marks by the function. In order to utilize printf() in our program, we must include the stdio.h header file using the #include <stdio.h> declaration. The \"Exit status\" of the program is the return 0; statement within the main() method. It's entirely voluntary. Example 2: Integer Output \u00b6 #include <stdio.h> int main () { int testInteger = 5 ; printf ( \"Number = %d\" , testInteger ); return 0 ; } Output Number = 5 To print int types, we utilize the %d format specifier. The value of testInteger will be used in instead of the %d inside the quotes. Example 3: float and double Output \u00b6 #include <stdio.h> int main () { float number1 = 13.5 ; double number2 = 12.4 ; printf ( \"number1 = %f \\n \" , number1 ); printf ( \"number2 = %lf\" , number2 ); return 0 ; } Output number1 = 13 .500000 number2 = 12 .400000 We utilize the %f format specifier to print floats . Similarly, to display double numbers, we use %lf . Example 4: Print Characters \u00b6 #include <stdio.h> int main () { char chr = 'a' ; printf ( \"character = %c\" , chr ); return 0 ; } Output character = a We utilize the %c format specifier to print char. C Input \u00b6 scanf() is a widely used function in C programming to accept user input. The scanf() function reads formatted input from typical input devices like keyboards. Example 5: Integer Input/Output \u00b6 #include <stdio.h> int main () { int testInteger ; printf ( \"Enter an integer: \" ); scanf ( \"%d\" , & testInteger ); printf ( \"Number = %d\" , testInteger ); return 0 ; } Output Enter an integer: 4 Number = 4 To accept int input from the user, we utilized the %d format specifier inside the scanf() method. When a user enters an integer, it is saved in the variable testInteger . You'll see that we used &testInteger within scanf () . This is due to the fact that &testInteger obtains the address of testInteger , and the value given by the user is saved in that address. Example 6: Float and Double Input/Output \u00b6 #include <stdio.h> int main () { float num1 ; double num2 ; printf ( \"Enter a number: \" ); scanf ( \"%f\" , & num1 ); printf ( \"Enter another number: \" ); scanf ( \"%lf\" , & num2 ); printf ( \"num1 = %f \\n \" , num1 ); printf ( \"num2 = %lf\" , num2 ); return 0 ; } Output Enter a number: 12 .523 Enter another number: 10 .2 num1 = 12 .523000 num2 = 10 .200000 For float and double , we use the format specifiers %f and %lf , respectively. Example 7: C Character I/O \u00b6 #include <stdio.h> int main () { char chr ; printf ( \"Enter a character: \" ); scanf ( \"%c\" , & chr ); printf ( \"You entered %c.\" , chr ); return 0 ; } Output Enter a character: g You entered g When a user enters a character into the aforementioned software, the character itself is not saved. An integer value (ASCII value) is instead stored. When we use the %c text format to represent that value, the input character is displayed. The ASCII value of the character is printed when we utilize %d to show it. Example 8: ASCII Value \u00b6 #include <stdio.h> int main () { char chr ; printf ( \"Enter a character: \" ); scanf ( \"%c\" , & chr ); // When %c is used, a character is displayed printf ( \"You entered %c. \\n \" , chr ); // When %d is used, ASCII value is displayed printf ( \"ASCII value is %d.\" , chr ); return 0 ; } Output Enter a character: g You entered g. ASCII value is 103 . I/O Multiple Values \u00b6 Here's how to take numerous user inputs and show them. #include <stdio.h> int main () { int a ; float b ; printf ( \"Enter integer and then a float: \" ); // Taking multiple inputs scanf ( \"%d%f\" , & a , & b ); printf ( \"You entered %d and %f\" , a , b ); return 0 ; } Output Enter integer and then a float: -3 3 .4 You entered -3 and 3 .400000 Format Specifiers for I/O \u00b6 As you can see from the samples above, we apply %d for int %f for float %lf for double %c for char The following is a collection of widely used C data types and associated format specifiers. Type Size(bytes) Format Specifiers int at least 2, usually 4 %d %i char 1 %c float 4 %f double 8 %lf short int 2 usually %hd unsigned int at least 2, usually 4 %u long int at least 4, usually 8 %ld %li long long int at least 8 %lld %lli unsigned long int at least 4 %lu unsigned long long int at least 8 %llu signed char 1 %c usigned char 1 %c long double at least 10, usually 12 or 16 %Lf C Programming Operators \u00b6 With the assistance of examples, you will learn about several operators in C programming in this course. An operator is a symbol that performs an operation on a value or variable. For example, the operator + is used to compute addition. C has a diverse set of operators to execute a variety of tasks. C Arithmetic Operators \u00b6 An arithmetic operator performs mathematical operations such as addition, subtraction, multiplication, division etc on numerical values (constants and variables). Operator Meaning of Operator + Addition or unary plus - Substraction or unary minus * Multiplication / Division % Remainder after division (modulo division) Example 1: Arithmetic Operators \u00b6 // Working of arithmetic operators #include <stdio.h> int main () { int a = 9 , b = 4 , c ; c = a + b ; printf ( \"a+b = %d \\n \" , c ); c = a - b ; printf ( \"a-b = %d \\n \" , c ); c = a * b ; printf ( \"a*b = %d \\n \" , c ); c = a / b ; printf ( \"a/b = %d \\n \" , c ); c = a % b ; printf ( \"Remainder when a divided by b = %d \\n \" , c ); return 0 ; } Output a+b = 13 a-b = 5 a*b = 36 a/b = 2 Remainder when a divided by b = 1 As you might guess, the operators +, -, and * calculate addition, subtraction, and multiplication, respectively. 9/4 Equals 2.25 in standard math. In the program, however, the result is 2 . This is due to the fact that both variables a and b are integers. As a result, the output is also an integer. The compiler ignores the word following the decimal point and displays response 2 rather than 2.25 . The residual is computed using the modulo operator percent. The remaining is 1 when a=9 is divided by b=4 . Only integers can be used with the percent operator. Assume that a = 5.0, b = 2.0, c = 5 , and d = 2 . After that, in C programming. // Either one of the operands is a floating-point number a/b = 2 .5 a/d = 2 .5 c/b = 2 .5 // Both operands are integers c/d = 2 C Increment and Decrement Operators \u00b6 To alter the value of an operand (constant or variable) by one, C programming offers two operators: increment ++ and decrease -- . Increment ++ raises the value by one, and decrement -- lowers the value by one. These two operators are unary, which means they only work on a single operand. Example 2: Increment and Decrement Operators \u00b6 // Working of increment and decrement operators #include <stdio.h> int main () { int a = 10 , b = 100 ; float c = 10.5 , d = 100.5 ; printf ( \"++a = %d \\n \" , ++ a ); printf ( \"--b = %d \\n \" , -- b ); printf ( \"++c = %f \\n \" , ++ c ); printf ( \"--d = %f \\n \" , -- d ); return 0 ; } Output ++a = 11 --b = 99 ++c = 11 .500000 --d = 99 .500000 The operators ++ and -- are used as prefixes here. These two operators, like a++ and a-- can also be used as postfixes. Increment ++ and Decrement -- Operator as Prefix and Postfix \u00b6 The increment operator ++ in programming (Java, C, C++, JavaScript, and so on) increments the value of a variable by one. Similarly, the decrement operator -- reduces a variable's value by one. a = 5 ++a ; // a becomes 6 a++ ; // a becomes 7 --a ; // a becomes 6 a-- ; // a becomes 5 So far, so straightforward. When these two operators are employed as a prefix and a postfix, there is a significant difference. ++ and -- operator as prefix and postfix \u00b6 When you use the ++ operator as a prefix, such as: ++var, the value of var is increased by one and then returned. If you use the ++ operator as a postfix, such as var++, the original value of var is returned first, followed by a one-digit increase of var. The -- operator functions similarly to the ++ operator, except that it reduces the value by one. Example 1: C Programming \u00b6 #include <stdio.h> int main () { int var1 = 5 , var2 = 5 ; // 5 is displayed // Then, var1 is increased to 6. printf ( \"%d \\n \" , var1 ++ ); // var2 is increased to 6 // Then, it is displayed. printf ( \"%d \\n \" , ++ var2 ); return 0 ; } Output 5 6 C Assignment Operators \u00b6 An assignment operator is a type of operator that is used to assign a value to a variable. = is the most commonly used assignment operator. Operator Example Same as = a=b a=b += a+=b a=a+b -= a-=b a=a-b *= a*=b a=a*b /= a/=b a=a/b %= a%=b a=a%b Example 3: Assignment Operators \u00b6 // Working of assignment operators #include <stdio.h> int main () { int a = 5 , c ; c = a ; // c is 5 printf ( \"c = %d \\n \" , c ); c += a ; // c is 10 printf ( \"c = %d \\n \" , c ); c -= a ; // c is 5 printf ( \"c = %d \\n \" , c ); c *= a ; // c is 25 printf ( \"c = %d \\n \" , c ); c /= a ; // c is 5 printf ( \"c = %d \\n \" , c ); c %= a ; // c = 0 printf ( \"c = %d \\n \" , c ); return 0 ; } Output c = 5 c = 10 c = 5 c = 25 c = 5 c = 0 C Relational Operators \u00b6 A relational operator verifies the relationship of two operands. If the relationship is true, it returns 1; if the relationship is false, it returns 0. Operator Meaning of Operator Example == Equal to 5 == 3 is evaluated to 0 > Greater than 5 > 3 is evaluated to 1 < Less than 5 < 3 is evaluated to 0 != Not equal to 5 != 3 is evaluated to 1 >= Greater than or equal to 5 >= 3 is evaluated to 1 <= Less than or equal to 5 <= 3 is evaluated to 0 Example 4: Relational Operators \u00b6 // Working of relational operators #include <stdio.h> int main () { int a = 5 , b = 5 , c = 10 ; printf ( \"%d == %d is %d \\n \" , a , b , a == b ); printf ( \"%d == %d is %d \\n \" , a , c , a == c ); printf ( \"%d > %d is %d \\n \" , a , b , a > b ); printf ( \"%d > %d is %d \\n \" , a , c , a > c ); printf ( \"%d < %d is %d \\n \" , a , b , a < b ); printf ( \"%d < %d is %d \\n \" , a , c , a < c ); printf ( \"%d != %d is %d \\n \" , a , b , a != b ); printf ( \"%d != %d is %d \\n \" , a , c , a != c ); printf ( \"%d >= %d is %d \\n \" , a , b , a >= b ); printf ( \"%d >= %d is %d \\n \" , a , c , a >= c ); printf ( \"%d <= %d is %d \\n \" , a , b , a <= b ); printf ( \"%d <= %d is %d \\n \" , a , c , a <= c ); return 0 ; } Output 5 == 5 is 1 5 == 10 is 0 5 > 5 is 0 5 > 10 is 0 5 < 5 is 0 5 < 10 is 1 5 ! = 5 is 0 5 ! = 10 is 1 5 > = 5 is 1 5 > = 10 is 0 5 < = 5 is 1 5 < = 10 is 1 C Logical Operators \u00b6 A logical operator expression returns either 0 or 1, depending on whether the expression is true or false. Operator Meaning Example && Logical AND. True only if all operands are true If c = 5 and d = 2 then, expression ((c==5) && (d>5)) equals to 0. | Logical OR. True only if either one operand is true ! Logical NOT. True only if the operand is 0 If c = 5 then, expression !(c==5) equals to 0. Example 5: Logical Operators \u00b6 // Working of logical operators #include <stdio.h> int main () { int a = 5 , b = 5 , c = 10 , result ; result = ( a == b ) && ( c > b ); printf ( \"(a == b) && (c > b) is %d \\n \" , result ); result = ( a == b ) && ( c < b ); printf ( \"(a == b) && (c < b) is %d \\n \" , result ); result = ( a == b ) || ( c < b ); printf ( \"(a == b) || (c < b) is %d \\n \" , result ); result = ( a != b ) || ( c < b ); printf ( \"(a != b) || (c < b) is %d \\n \" , result ); result = ! ( a != b ); printf ( \"!(a != b) is %d \\n \" , result ); result = ! ( a == b ); printf ( \"!(a == b) is %d \\n \" , result ); return 0 ; } Output ( a == b ) && ( c > b ) is 1 ( a == b ) && ( c < b ) is 0 ( a == b ) || ( c < b ) is 1 ( a ! = b ) || ( c < b ) is 0 ! ( a ! = b ) is 1 ! ( a == b ) is 0 Explanation of logical operator program (a == b) && (c > 5) evaluates to 1 because both operands (a == b) and (c > b) is 1 (true). (a == b) && (c < b) evaluates to 0 because operand (c < b) is 0 (false). (a == b) || (c < b) evaluates to 1 because (a = b) is 1 (true). (a != b) || (c < b) evaluates to 0 because both operand (a != b) and (c < b) are 0 (false). !(a != b) evaluates to 1 because operand (a != b) is 0 (false). Hence, !(a != b) is 1 (true). !(a == b) evaluates to 0 because (a == b) is 1 (true). Hence, !(a == b) is 0 (false). C Bitwise Operators \u00b6 Mathematical operations like as addition, subtraction, multiplication, division, and so on are transformed to bit-level during computation, which speeds up processing and saves power. In C programming, bitwise operators are used to execute bit-level operations. Operators Meaning of Operators & Bitwise AND ^ Bitwise exclusive OR ~ Bitwise complement << Shift left >> Shift right Other Operators \u00b6 Comma Operator \u00b6 Comma operators are used to connect similar expressions. As an example: int a , c = 5 , d ; The sizeof operator \u00b6 sizeof is a unary operator that returns the data size (constants, variables, array, structure, etc). Example 6: sizeof Operator \u00b6 #include <stdio.h> int main () { int a ; float b ; double c ; char d ; printf ( \"Size of int=%lu bytes \\n \" , sizeof ( a )); printf ( \"Size of float=%lu bytes \\n \" , sizeof ( b )); printf ( \"Size of double=%lu bytes \\n \" , sizeof ( c )); printf ( \"Size of char=%lu byte \\n \" , sizeof ( d )); return 0 ; } Output Size of int = 4 bytes Size of float = 4 bytes Size of double = 8 bytes Size of char = 1 byte Other operators, such as the ternary operator ?: , the reference operato r & , the dereference operator * , and the member selection operator -> , will be covered in more detail later. C Flow Control \u00b6 C if...else Statement \u00b6 With the assistance of examples, you will learn about the if statement (including if...else and nested if...else) in C programming. C if Statement \u00b6 In C programming, the if statement has the following syntax: if ( test expression ) { // code } How if statement works? \u00b6 The test expression inside the parentheses is evaluated by the if statement (). If the test expression is true, the statements within the if body are performed. If the test expression is interpreted as false, the statements within the if body are not performed. Check relational and logical operators to understand more about when a test expression is evaluated to true (non-zero value) and false (0). Example 1: if statement \u00b6 // Program to display a number if it is negative #include <stdio.h> int main () { int number ; printf ( \"Enter an integer: \" ); scanf ( \"%d\" , & number ); // true if number is less than 0 if ( number < 0 ) { printf ( \"You entered %d. \\n \" , number ); } printf ( \"The if statement is easy.\" ); return 0 ; } Output 1 Enter an integer: -2 You entered -2. The if statement is easy. When the user types -2, the test expression number 0 is evaluated as true. As a result, the value -2 that you typed is displayed on the screen. Output 2 Enter an integer: 5 The if statement is easy. When the user enters 5, the test expression number 0 is assessed as false, and the statement within the body of the if is not performed. C if...else Statement \u00b6 An else block is optional in the if statement. The if...else sentence has the following syntax: if ( test expression ) { // run code if test expression is true } else { // run code if test expression is false } How if...else statement works? \u00b6 If the test expression is found to be true, Statements within the if body are performed. Statements within the body of else are not executed. If the test expression is found to be false, Phrases inside the body of else are performed; statements within the body of if are skipped. Example 2: if...else statement \u00b6 // Check whether an integer is odd or even #include <stdio.h> int main () { int number ; printf ( \"Enter an integer: \" ); scanf ( \"%d\" , & number ); // True if the remainder is 0 if ( number % 2 == 0 ) { printf ( \"%d is an even integer.\" , number ); } else { printf ( \"%d is an odd integer.\" , number ); } return 0 ; } Output Enter an integer: 7 7 is an odd integer. When the user enters 7, the test expression number% 2==0 returns false. As a result, the statement within the body of else is performed. C if...else Ladder \u00b6 Depending on whether the test phrase is true or false, the if...else statement runs two separate programs. Sometimes a decision must be made between more than two options. You may use the if...else ladder to compare numerous test expressions and execute various statements. Syntax of if...else Ladder \u00b6 if ( test expression1 ) { // statement(s) } else if ( test expression2 ) { // statement(s) } else if ( test expression3 ) { // statement(s) } . . else { // statement(s) } Example 3: C if...else Ladder \u00b6 // Program to relate two integers using =, > or < symbol #include <stdio.h> int main () { int number1 , number2 ; printf ( \"Enter two integers: \" ); scanf ( \"%d %d\" , & number1 , & number2 ); //checks if the two integers are equal. if ( number1 == number2 ) { printf ( \"Result: %d = %d\" , number1 , number2 ); } //checks if number1 is greater than number2. else if ( number1 > number2 ) { printf ( \"Result: %d > %d\" , number1 , number2 ); } //checks if both test expressions are false else { printf ( \"Result: %d < %d\" , number1 , number2 ); } return 0 ; } Output Enter two integers: 12 23 Result: 12 < 23 Nested if...else \u00b6 An if...else statement can be included within the body of another if...else statement. Example 4: Nested if...else \u00b6 This program, similar to the if...else ladder's example, compares two numbers using, >, and =. To fix this problem, we will utilize a layered if...else expression. #include <stdio.h> int main () { int number1 , number2 ; printf ( \"Enter two integers: \" ); scanf ( \"%d %d\" , & number1 , & number2 ); if ( number1 >= number2 ) { if ( number1 == number2 ) { printf ( \"Result: %d = %d\" , number1 , number2 ); } else { printf ( \"Result: %d > %d\" , number1 , number2 ); } } else { printf ( \"Result: %d < %d\" , number1 , number2 ); } return 0 ; } You do not need to use brackets if the body of an if...else statement contains only one sentence. if ( a > b ) { printf ( \"Hello\" ); } printf ( \"Hi\" ); is equivalent to if ( a > b ) printf ( \"Hello\" ); printf ( \"Hi\" ); C for Loop \u00b6 With the assistance of examples, you will learn how to design a for loop in C programming in this article. A loop is a programming construct that is used to repeat a block of code until the stated condition is fulfilled. Loops in C programming are classified into three types: while loop for loop do..while loop This lesson will teach us about the for loop. The while and do...while loops will be covered in the next tutorial. for Loop \u00b6 The for loop has the following syntax: for ( initializationStatement ; testExpression ; updateStatement ) { // statements inside the body of loop } How for loop works? \u00b6 The initialization statement is only used once. The test expression is then evaluated. The for loop is ended if the test statement is interpreted as false. If the test expression is true, the statements inside the for loop's body are performed, and the update expression is updated. The test expression is examined once more. This procedure is repeated until the test expression is false. The loop is terminated when the test expression is false. Example 1: for loop \u00b6 // Print numbers from 1 to 10 #include <stdio.h> int main () { int i ; for ( i = 1 ; i < 11 ; ++ i ) { printf ( \"%d \" , i ); } return 0 ; } Output 1 2 3 4 5 6 7 8 9 10 i is initialized to 1. The test expression i < 11 is evaluated. Since 1 less than 11 is true, the body of for loop is executed. This will print the 1 (value of i) on the screen. The update statement ++i is executed. Now, the value of i will be 2. Again, the test expression is evaluated to true, and the body of for loop is executed. This will print 2 (value of i) on the screen. Again, the update statement ++i is executed and the test expression i < 11 is evaluated. This process goes on until i becomes 11. When i becomes 11, i < 11 will be false, and the for loop terminates. Example 2: for loop \u00b6 // Program to calculate the sum of first n natural numbers // Positive integers 1,2,3...n are known as natural numbers #include <stdio.h> int main () { int num , count , sum = 0 ; printf ( \"Enter a positive integer: \" ); scanf ( \"%d\" , & num ); // for loop terminates when num is less than count for ( count = 1 ; count <= num ; ++ count ) { sum += count ; } printf ( \"Sum = %d\" , sum ); return 0 ; } Output Enter a positive integer: 10 Sum = 55 The value entered by the user is stored in the variable num. Suppose, the user entered 10. The count is initialized to 1 and the test expression is evaluated. Since the test expression count<=num (1 less than or equal to 10) is true, the body of for loop is executed and the value of sum will equal to 1. Then, the update statement ++count is executed and count will equal to 2. Again, the test expression is evaluated. Since 2 is also less than 10, the test expression is evaluated to true and the body of the for loop is executed. Now, sum will equal 3. This process goes on and the sum is calculated until the count reaches 11. When the count is 11, the test expression is evaluated to 0 (false), and the loop terminates. Then, the value of sum is printed on the screen. C while and do...while Loop \u00b6 In this tutorial, you will learn to create while and do...while loop in C programming with the help of examples. In programming, loops are used to repeat a block of code until a specified condition is met. C programming has three types of loops. for loop while loop do...while loop In the previous tutorial, we learned about for loop. In this tutorial, we will learn about while and do..while loop. while loop \u00b6 The syntax of the while loop is: while ( testExpression ) { // the body of the loop } How while loop works? \u00b6 The while loop evaluates the testExpression inside the parentheses () . If testExpression is true , statements inside the body of while loop are executed. Then, testExpression is evaluated again. The process goes on until testExpression is evaluated to false . If testExpression is false , the loop terminates (ends). Example 1: while loop \u00b6 // Print numbers from 1 to 5 #include <stdio.h> int main () { int i = 1 ; while ( i <= 5 ) { printf ( \"%d \\n \" , i ); ++ i ; } return 0 ; } Output 1 2 3 4 5 Here, we have initialized i to 1. When i = 1 , the test expression i <= 5 is true . Hence, the body of the while loop is executed. This prints 1 on the screen and the value of i is increased to 2 . Now, i = 2 , the test expression i <= 5 is again true . The body of the while loop is executed again. This prints 2 on the screen and the value of i is increased to 3 . This process goes on until i becomes 6. Then, the test expression i <= 5 will be false and the loop terminates. do...while loop \u00b6 The do..while loop is similar to the while loop with one important difference. The body of do...while loop is executed at least once. Only then, the test expression is evaluated. The syntax of the do...while loop is: do { // the body of the loop } while ( testExpression ); How do...while loop works? \u00b6 The body of do...while loop is executed once. Only then, the testExpression is evaluated. If testExpression is true , the body of the loop is executed again and testExpression is evaluated once more. This process goes on until testExpression becomes false . If testExpression is false , the loop ends. Flowchart of do...while Loop \u00b6 Example 2: do...while loop \u00b6 // Program to add numbers until the user enters zero #include <stdio.h> int main () { double number , sum = 0 ; // the body of the loop is executed at least once do { printf ( \"Enter a number: \" ); scanf ( \"%lf\" , & number ); sum += number ; } while ( number != 0.0 ); printf ( \"Sum = %.2lf\" , sum ); return 0 ; } Output Enter a number: 1 .5 Enter a number: 2 .4 Enter a number: -3.4 Enter a number: 4 .2 Enter a number: 0 Sum = 4 .70 Here, we have used a do...while loop to prompt the user to enter a number. The loop works as long as the input number is not 0 . The do...while loop executes at least once i.e. the first iteration runs without checking the condition. The condition is checked only after the first iteration has been executed. do { printf ( \"Enter a number: \" ); scanf ( \"%lf\" , & number ); sum += number ; } while ( number != 0.0 ); So, if the first input is a non-zero number, that number is added to the sum variable and the loop continues to the next iteration. This process is repeated until the user enters 0 . But if the first input is 0, there will be no second iteration of the loop and sum becomes 0.0 . Outside the loop, we print the value of sum. C break and continue \u00b6 We learned about loops in previous tutorials. In this tutorial, we will learn to use break and continue statements with the help of examples. C break \u00b6 The break statement ends the loop immediately when it is encountered. Its syntax is: break ; The break statement is almost always used with if...else statement inside the loop. Example 1: break statement \u00b6 // Program to calculate the sum of numbers (10 numbers max) // If the user enters a negative number, the loop terminates #include <stdio.h> int main () { int i ; double number , sum = 0.0 ; for ( i = 1 ; i <= 10 ; ++ i ) { printf ( \"Enter n%d: \" , i ); scanf ( \"%lf\" , & number ); // if the user enters a negative number, break the loop if ( number < 0.0 ) { break ; } sum += number ; // sum = sum + number; } printf ( \"Sum = %.2lf\" , sum ); return 0 ; } Output Enter n1: 2 .4 Enter n2: 4 .5 Enter n3: 3 .4 Enter n4: -3 Sum = 10 .30 This program calculates the sum of a maximum of 10 numbers. Why a maximum of 10 numbers? It's because if the user enters a negative number, the break statement is executed. This will end the for loop, and the sum is displayed. In C, break is also used with the switch statement. This will be discussed in the next tutorial. C continue \u00b6 The continue statement skips the current iteration of the loop and continues with the next iteration. Its syntax is: continue ; The continue statement is almost always used with the if...else statement. How continue statement works? \u00b6 Example 2: continue statement \u00b6 // Program to calculate the sum of numbers (10 numbers max) // If the user enters a negative number, it's not added to the result #include <stdio.h> int main () { int i ; double number , sum = 0.0 ; for ( i = 1 ; i <= 10 ; ++ i ) { printf ( \"Enter a n%d: \" , i ); scanf ( \"%lf\" , & number ); if ( number < 0.0 ) { continue ; } sum += number ; // sum = sum + number; } printf ( \"Sum = %.2lf\" , sum ); return 0 ; } Output Enter n1: 1 .1 Enter n2: 2 .2 Enter n3: 5 .5 Enter n4: 4 .4 Enter n5: -3.4 Enter n6: -45.5 Enter n7: 34 .5 Enter n8: -4.2 Enter n9: -1000 Enter n10: 12 Sum = 59 .70 In this program, when the user enters a positive number, the sum is calculated using sum += number; statement. When the user enters a negative number, the continue statement is executed and it skips the negative number from the calculation. C switch Statement \u00b6 In this tutorial, you will learn to create the switch statement in C programming with the help of an example. The switch statement allows us to execute one code block among many alternatives. You can do the same thing with the if...else..if ladder. However, the syntax of the switch statement is much easier to read and write. Syntax of switch...case \u00b6 switch ( expression ) { case constant1 : // statements break ; case constant2 : // statements break ; . . . default : // default statements } How does the switch statement work? The expression is evaluated once and compared with the values of each case label. If there is a match, the corresponding statements after the matching label are executed. For example, if the value of the expression is equal to constant2, statements after case constant2: are executed until break is encountered. If there is no match, the default statements are executed. If we do not use break , all statements after the matching label are executed. By the way, the default clause inside the switch statement is optional. Example: Simple Calculator \u00b6 // Program to create a simple calculator #include <stdio.h> int main () { char operator ; double n1 , n2 ; printf ( \"Enter an operator (+, -, *, /): \" ); scanf ( \"%c\" , & operator ); printf ( \"Enter two operands: \" ); scanf ( \"%lf %lf\" , & n1 , & n2 ); switch ( operator ) { case '+' : printf ( \"%.1lf + %.1lf = %.1lf\" , n1 , n2 , n1 + n2 ); break ; case '-' : printf ( \"%.1lf - %.1lf = %.1lf\" , n1 , n2 , n1 - n2 ); break ; case '*' : printf ( \"%.1lf * %.1lf = %.1lf\" , n1 , n2 , n1 * n2 ); break ; case '/' : printf ( \"%.1lf / %.1lf = %.1lf\" , n1 , n2 , n1 / n2 ); break ; // operator doesn't match any case constant +, -, *, / default : printf ( \"Error! operator is not correct\" ); } return 0 ; } Output Enter an operator ( +, -, *, ) : - Enter two operands: 32 .5 12 .4 32 .5 - 12 .4 = 20 .1 The - operator entered by the user is stored in the operator variable. And, two operands 32.5 and 12.4 are stored in variables n1 and n2 respectively. Since the operator is - , the control of the program jumps to printf ( \"%.1lf - %.1lf = %.1lf\" , n1 , n2 , n1 - n2 ); Finally, the break statement terminates the switch statement. C goto Statement \u00b6 In this tutorial, you will learn to create the goto statement in C programming. Also, you will learn when to use a goto statement and when not to use it. The goto statement allows us to transfer control of the program to the specified label. Syntax of goto Statement \u00b6 goto label ; ... .. ... ... .. ... label : statement ; The label is an identifier. When the goto statement is encountered, the control of the program jumps to label: and starts executing the code. Example: goto Statement \u00b6 // Program to calculate the sum and average of positive numbers // If the user enters a negative number, the sum and average are displayed. #include <stdio.h> int main () { const int maxInput = 100 ; int i ; double number , average , sum = 0.0 ; for ( i = 1 ; i <= maxInput ; ++ i ) { printf ( \"%d. Enter a number: \" , i ); scanf ( \"%lf\" , & number ); // go to jump if the user enters a negative number if ( number < 0.0 ) { goto jump ; } sum += number ; } jump : average = sum / ( i - 1 ); printf ( \"Sum = %.2f \\n \" , sum ); printf ( \"Average = %.2f\" , average ); return 0 ; } Output 1 . Enter a number: 3 2 . Enter a number: 4 .3 3 . Enter a number: 9 .3 4 . Enter a number: -2.9 Sum = 16 .60 Average = 5 .53 Reasons to avoid goto \u00b6 The use of goto statement may lead to code that is buggy and hard to follow. For example, one : for ( i = 0 ; i < number ; ++ i ) { test += i ; goto two ; } two : if ( test > 5 ) { goto three ; } ... .. ... Also, the goto statement allows you to do bad stuff such as jump out of the scope. That being said, goto can be useful sometimes. For example: to break from nested loops. Should you use goto? \u00b6 If you think the use of goto statement simplifies your program, you can use it. That being said, goto is rarely useful and you can create any C program without using goto altogether. Here's a quote from Bjarne Stroustrup, creator of C++, \"The fact that 'goto' can do anything is exactly why we don't use it.\" C Functions C User-defined functions Types of User-defined Functions in C Programming C Recursion (Recursive function) C Storage Class C Function Examples C Arrays (With Examples) C Multidimensional Arrays (2d and 3d Array) Pass arrays to a function in C for Pointers check CS50 visuals in PDF C Pointers (With Examples) Relationship Between Arrays and Pointers in C Programming (With Examples) C Pass Addresses and Pointers to Functions C Dynamic Memory Allocation Using malloc(), calloc(), free() & realloc() C Array and Pointer Examples Strings in C (With Examples) String Manipulations In C Programming Using Library Functions String Examples in C Programming c. C Functions i. C Programming Functions ii. C User-defined Functions iii. C Function Types iv. C Recursion v. C Storage Class vi. C Function Examples d. C Programming Arrays i. C Programming Arrays ii. C Multi-dimensional Arrays iii. C Arrays & Functions e. C Programming Pointers i. C Programming Pointers ii. C Pointers & Arrays iii. C Pointers and Functions iv. C Memory Allocation v. Array & Pointer Examples f. C Programming Strings i. C Programming Strings ii. C String Functions iii. C String Examples g. C Structure and Union i. C Structure ii. C Struct & Pointers iii. C Struct & Functions iv. C Unions v. C Struct Examples h. C Programming Files i. C Files Input/Output ii. C Files Examples i. Additional Topics i. C Enumeration ii. C Preprocessors iii. C Standard Library C Programming Examples https://cdnvideo.eba.gov.tr/fatihkalem/fatihkalem_portable.zip https://cdnvideo.eba.gov.tr/fatihkalem/fatihkalem_setup.exe Extras \u00b6","title":"Week-5 (C Console Programming)"},{"location":"tr/week-5-c/ce103-week-5-c/#c-functional-console-programming_1","text":"We will use the following course notes and examples. Learn C Programming C Tutorials - Introduction to C Programming Language The C and C++ programming tutorials, hands-on approach with program examples, code samples and tons of output images using Visual C++, C++ Builder, Linux gcc and g++ compilers and IDE CS50x 2021 C Programming For Dummies C reference - cppreference.com https://c.happycodings.com/","title":"C Functional Console Programming"},{"location":"tr/week-5-c/ce103-week-5-c/#c-programming","text":"C is a versatile programming language. It is useful for creating software such as operating systems, databases, and compilers. For novices, C programming is a great language to learn to code in. Our C tutorials will take you step by step through the process of learning C programming. Before starting you should check your development enviroment. You will open visual studio community edition and create a C++ console application then rename *.cpp file to *.c for triggering c complier. Before starting you should understand the executable generation flows #include <stdio.h> int main ( void ) { printf ( \"hello, world\" ); } and how we convert source code to binary code 01111111 01000101 01001100 01000110 00000010 00000001 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000010 00000000 00111110 00000000 00000001 00000000 00000000 00000000 10110000 00000101 01000000 00000000 00000000 00000000 00000000 00000000 01000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 11010000 00010011 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 01000000 00000000 00111000 00000000 00001001 00000000 01000000 00000000 00100100 00000000 00100001 00000000 00000110 00000000 00000000 00000000 00000101 00000000 00000000 00000000 01000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 01000000 00000000 01000000 00000000 00000000 00000000 00000000 00000000 01000000 00000000 01000000 00000000 00000000 00000000 00000000 00000000 11111000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 11111000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00001000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000011 00000000 00000000 00000000 00000100 00000000 00000000 00000000 00111000 00000010 00000000 00000000 00000000 00000000 00000000 00000000 ... There is a sandbox in CS50 harvard course Week 0 - CS50x https://sandbox.cs50.io/ you can use it for online compiler $ make hello clang -fsanitize = signed-integer-overflow -fsanitize = undefined -ggdb3 -O0 -std = c11 -Wall -Werror -Wextra -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wshadow hello.c -lcrypt -lcs50 -lm -o hello $ ./hello hello, world if you want to make samething in windows environment you should create the following makefile near the hello.c Makefile # This is the default target, which will be built when # you invoke make .PHONY : all all : hello # This rule tells make how to build hello from hello.cpp hello : hello . c g++ -o hello hello.c # This rule tells make to copy hello to the binaries subdirectory, # creating it if necessary .PHONY : install install : mkdir -p binaries cp -p hello binaries # This rule tells make to delete hello and hello.o .PHONY : clean clean : rm -f hello C: \\U sers \\u gur.coruh \\D esktop \\h ello-make>make hello g++ -o hello hello.c C: \\U sers \\u gur.coruh \\D esktop \\h ello-make>dir Volume in drive C is Windows Volume Serial Number is 8C3C-8F8C Directory of C: \\U sers \\u gur.coruh \\D esktop \\h ello-make 11 /02/2021 01 :44 AM <DIR> . 11 /02/2021 01 :44 AM <DIR> .. 11 /02/2021 01 :15 AM 73 hello.c 11 /02/2021 01 :44 AM 54 ,022 hello.exe 11 /02/2021 01 :43 AM 458 Makefile 3 File ( s ) 54 ,553 bytes 2 Dir ( s ) 101 ,382,164,480 bytes free C: \\U sers \\u gur.coruh \\D esktop \\h ello-make>hello.exe hello, world C: \\U sers \\u gur.coruh \\D esktop \\h ello-make> $ clang hello.c $ ls a.out* hello* hello.c $ ./a.out hello, world $ clang -o hello hello.c $ ls a.out* hello* hello.c $ ./hello hello, world $ ls hello . c $ clang - o hello hello . c - lcs50 $ ls hello * hello . c $ . / hello hello , world $ Also you can use visual studio community edition.","title":"C Programming"},{"location":"tr/week-5-c/ce103-week-5-c/#preprocessing","text":"get included file declarations #include <cs50.h> #include <stdio.h> int main ( void ) { string name = get_string ( \"What's your name? \" ); printf ( \"hello, %s \\n \" , name ); } to this string get_string ( string prompt ); int printf ( string format , ...); int main ( void ) { string name = get_string ( \"What's your name? \" ); printf ( \"hello, %s \\n \" , name ); }","title":"preprocessing"},{"location":"tr/week-5-c/ce103-week-5-c/#compiling","text":"convert source code to assembler code ... main: # @main .cfi_startproc # BB#0: pushq %rbp .Ltmp0: .cfi_def_cfa_offset 16 .Ltmp1: .cfi_offset %rbp, -16 movq %rsp, %rbp .Ltmp2: .cfi_def_cfa_register %rbp subq $16, %rsp xorl %eax, %eax movl %eax, %edi movabsq $.L.str, %rsi movb $0, %al callq get_string movabsq $.L.str.1, %rdi movq %rax, -8(%rbp) movq -8(%rbp), %rsi movb $0, %al callq printf ...","title":"compiling"},{"location":"tr/week-5-c/ce103-week-5-c/#assembling","text":"convert assembler to opcodes ... main: # @main .cfi_startproc # BB#0: pushq %rbp .Ltmp0: .cfi_def_cfa_offset 16 .Ltmp1: .cfi_offset %rbp, -16 movq %rsp, %rbp .Ltmp2: .cfi_def_cfa_register %rbp subq $16, %rsp xorl %eax, %eax movl %eax, %edi movabsq $.L.str, %rsi movb $0, %al callq get_string movabsq $.L.str.1, %rdi movq %rax, -8(%rbp) movq -8(%rbp), %rsi movb $0, %al callq printf ... to thistitle":"assembling"},{"location":"tr/week-5-c/ce103-week-5-c/#linking","text":"hello.c cs50.c stdio.ccombine binary codes to generate exetitle":"linking"},{"location":"tr/week-5-c/ce103-week-5-c/#how-if-statement-works","text":"The test expression inside the parentheses is evaluated by the if statement (). If the test expression is true, the statements within the if body are performed. If the test expression is interpreted as false, the statements within the if body are not performed. Check relational and logical operators to understand more about when a test expression is evaluated to true (non-zero value) and false (0).","title":"How if statement works?"},{"location":"tr/week-5-c/ce103-week-5-c/#how-ifelse-statement-works","text":"If the test expression is found to be true, Statements within the if body are performed. Statements within the body of else are not executed. If the test expression is found to be false, Phrases inside the body of else are performed; statements within the body of if are skipped.","title":"How if...else statement works?"},{"location":"tr/week-5-c/ce103-week-5-c/#how-for-loop-works","text":"The initialization statement is only used once. The test expression is then evaluated. The for loop is ended if the test statement is interpreted as false. If the test expression is true, the statements inside the for loop's body are performed, and the update expression is updated. The test expression is examined once more. This procedure is repeated until the test expression is false. The loop is terminated when the test expression is false.","title":"How for loop works?"},{"location":"tr/week-5-c/ce103-week-5-c/#how-while-loop-works","text":"The while loop evaluates the testExpression inside the parentheses () . If testExpression is true , statements inside the body of while loop are executed. Then, testExpression is evaluated again. The process goes on until testExpression is evaluated to false . If testExpression is false , the loop terminates (ends).","title":"How while loop works?"},{"location":"tr/week-5-c/ce103-week-5-c/#how-dowhile-loop-works","text":"The body of do...while loop is executed once. Only then, the testExpression is evaluated. If testExpression is true , the body of the loop is executed again and testExpression is evaluated once more. This process goes on until testExpression becomes false . If testExpression is false , the loop ends.","title":"How do...while loop works?"},{"location":"tr/week-5-c/ce103-week-5-c/#flowchart-of-dowhile-loop","text":"","title":"Flowchart of do...while Loop"},{"location":"tr/week-5-c/ce103-week-5-c/#c-break","text":"The break statement ends the loop immediately when it is encountered. Its syntax is: break ; The break statement is almost always used with if...else statement inside the loop.","title":"C break"},{"location":"tr/week-5-c/ce103-week-5-c/#c-continue","text":"The continue statement skips the current iteration of the loop and continues with the next iteration. Its syntax is: continue ; The continue statement is almost always used with the if...else statement.","title":"C continue"},{"location":"tr/week-5-c/ce103-week-5-c/#how-continue-statement-works","text":"","title":"How continue statement works?"},{"location":"tr/week-5-c/ce103-week-5-c/#syntax-of-switchcase","text":"switch ( expression ) { case constant1 : // statements break ; case constant2 : // statements break ; . . . default : // default statements } How does the switch statement work? The expression is evaluated once and compared with the values of each case label. If there is a match, the corresponding statements after the matching label are executed. For example, if the value of the expression is equal to constant2, statements after case constant2: are executed until break is encountered. If there is no match, the default statements are executed. If we do not use break , all statements after the matching label are executed. By the way, the default clause inside the switch statement is optional.","title":"Syntax of switch...case"},{"location":"tr/week-5-c/ce103-week-5-c/#syntax-of-goto-statement","text":"goto label ; ... .. ... ... .. ... label : statement ; The label is an identifier. When the goto statement is encountered, the control of the program jumps to label: and starts executing the code.","title":"Syntax of goto Statement"},{"location":"tr/week-5-c/ce103-week-5-c/#should-you-use-goto","text":"If you think the use of goto statement simplifies your program, you can use it. That being said, goto is rarely useful and you can create any C program without using goto altogether. Here's a quote from Bjarne Stroustrup, creator of C++, \"The fact that 'goto' can do anything is exactly why we don't use it.\" C Functions C User-defined functions Types of User-defined Functions in C Programming C Recursion (Recursive function) C Storage Class C Function Examples C Arrays (With Examples) C Multidimensional Arrays (2d and 3d Array) Pass arrays to a function in C for Pointers check CS50 visuals in PDF C Pointers (With Examples) Relationship Between Arrays and Pointers in C Programming (With Examples) C Pass Addresses and Pointers to Functions C Dynamic Memory Allocation Using malloc(), calloc(), free() & realloc() C Array and Pointer Examples Strings in C (With Examples) String Manipulations In C Programming Using Library Functions String Examples in C Programming c. C Functions i. C Programming Functions ii. C User-defined Functions iii. C Function Types iv. C Recursion v. C Storage Class vi. C Function Examples d. C Programming Arrays i. C Programming Arrays ii. C Multi-dimensional Arrays iii. C Arrays & Functions e. C Programming Pointers i. C Programming Pointers ii. C Pointers & Arrays iii. C Pointers and Functions iv. C Memory Allocation v. Array & Pointer Examples f. C Programming Strings i. C Programming Strings ii. C String Functions iii. C String Examples g. C Structure and Union i. C Structure ii. C Struct & Pointers iii. C Struct & Functions iv. C Unions v. C Struct Examples h. C Programming Files i. C Files Input/Output ii. C Files Examples i. Additional Topics i. C Enumeration ii. C Preprocessors iii. C Standard Library C Programming Examples https://cdnvideo.eba.gov.tr/fatihkalem/fatihkalem_portable.zip https://cdnvideo.eba.gov.tr/fatihkalem/fatihkalem_setup.exe","title":"Should you use goto?"},{"location":"tr/week-5-c/ce103-week-5-c/#extras","text":"","title":"Extras"},{"location":"tr/week-6-cpp/ce103-week-6-cpp/","text":"CE103 Algorithms and Programming I \u00b6 Week-6 \u00b6 Fall Semester, 2021-2022 \u00b6 Download DOC , SLIDE , PPTX C++ Functional Console Programming \u00b6 Books and Resources \u00b6 free-programming-books/free-programming-books-langs.md at master \u00b7 EbookFoundation/free-programming-books \u00b7 GitHub C++ Functional Console Programming \u00b6 We will follow the following topics Learn C++ Programming Introduction to C++ | C Plus Plus Programming Language Tutorials The C and C++ programming tutorials, hands-on approach with program examples, code samples and tons of output images using Visual C++, C++ Builder, Linux gcc and g++ compilers and IDE Cpp Programming a. C++ Introduction i. C++ Variables and Literals ii. C++ Data Types iii. C++ Basic I/O iv. C++ Type Conversion C++ String to Int and Vice-Versa C++ String to Float, Double and Vice-Versa v. C++ Operators vi. C++ Comments b. C++ Flow Control i. C++ if..else ii. C++ for loop iii. C++ do..while loop iv. C++ break statement v. C++ continue statement vi. C++ switch statement vii. C++ goto statement c. C++ Functions i. C++ Functions ii. C++ Function Types iii. C++ Function Overloading iv. C++ Default Argument v. C++ Storage Class vi. C++ Recursion vii. C++ Return Reference d. C++ Arrays & String i. C++ Arrays ii. Multidimensional Arrays iii. C++ Function and Array iv. C++ String e. C++ Structures i. C++ Structures ii. Structure and Function iii. C++ Pointers to Structure iv. C++ Enumeration f. C++ Object & Class i. C++ Objects and Class ii. C++ Constructors iii. C++ Objects & Function iv. C++ Operator Overloading g. C++ Pointers i. C++ Pointer ii. C++ Pointers and Arrays iii. C++ Pointers and Functions iv. C++ Memory Management h. C++ Inheritance i. C++ Inheritance ii. Inheritance Access Control iii. C++ Function Overriding iv. Multiple & Multilevel Inheritance v. C++ Friend Function vi. C++ Virtual Function C++ Templates","title":"Week-6 (C++ Console Programming)"},{"location":"tr/week-6-cpp/ce103-week-6-cpp/#c-functional-console-programming_1","text":"We will follow the following topics Learn C++ Programming Introduction to C++ | C Plus Plus Programming Language Tutorials The C and C++ programming tutorials, hands-on approach with program examples, code samples and tons of output images using Visual C++, C++ Builder, Linux gcc and g++ compilers and IDE Cpp Programming a. C++ Introduction i. C++ Variables and Literals ii. C++ Data Types iii. C++ Basic I/O iv. C++ Type Conversion C++ String to Int and Vice-Versa C++ String to Float, Double and Vice-Versa v. C++ Operators vi. C++ Comments b. C++ Flow Control i. C++ if..else ii. C++ for loop iii. C++ do..while loop iv. C++ break statement v. C++ continue statement vi. C++ switch statement vii. C++ goto statement c. C++ Functions i. C++ Functions ii. C++ Function Types iii. C++ Function Overloading iv. C++ Default Argument v. C++ Storage Class vi. C++ Recursion vii. C++ Return Reference d. C++ Arrays & String i. C++ Arrays ii. Multidimensional Arrays iii. C++ Function and Array iv. C++ String e. C++ Structures i. C++ Structures ii. Structure and Function iii. C++ Pointers to Structure iv. C++ Enumeration f. C++ Object & Class i. C++ Objects and Class ii. C++ Constructors iii. C++ Objects & Function iv. C++ Operator Overloading g. C++ Pointers i. C++ Pointer ii. C++ Pointers and Arrays iii. C++ Pointers and Functions iv. C++ Memory Management h. C++ Inheritance i. C++ Inheritance ii. Inheritance Access Control iii. C++ Function Overriding iv. Multiple & Multilevel Inheritance v. C++ Friend Function vi. C++ Virtual Function C++ Templates","title":"C++ Functional Console Programming"},{"location":"tr/week-7-csharp/ce103-week-7-csharp/","text":"CE103 Algorithms and Programming I \u00b6 Week-7 \u00b6 Fall Semester, 2021-2022 \u00b6 Download DOC , SLIDE , PPTX C# Functional Console Programming \u00b6 We will follow the following topics Learn C# Programming Books Free C# Programming Book free-programming-books/free-programming-books-langs.md at master \u00b7 EbookFoundation/free-programming-books \u00b7 GitHub Extras \u00b6 Creating a Simple Dynamic-Link Library - Win32 apps | Microsoft Docs Dynamic-Link Library Creation - Win32 apps | Microsoft Docs Exporting from a DLL | Microsoft Docs Exporting from a DLL Using DEF Files | Microsoft Docs How to create a DLL library in C and then use it with C# - CodeProject DLL - How to Write DLL - Dynamic Link Library in C - Steps to Create and Use https://www.codementor.io/@a_hathon/building-and-using-dlls-in-c-d7rrd4caz DLL Injection - free code corner GitHub - dennisbabkin/InjectAll: Tutorial that demonstrates how to code a Windows driver to inject a custom DLL into all running processes. I coded it from start to finish using C++ and x86/x64 Assembly language in Microsoft Visual Studio. The solution includes a kernel driver project, a DLL project and a C++ test console project. Coding Windows Kernel Driver - InjectAll - Making the Visual Studio solution for DLL injection into all running processes. Others \u00b6 std::dec, std::hex, std::oct - cppreference.com std::setbase - cppreference.com C++ Tutorial: Multi-Threaded Programming - Thread for Win32 - 2020 Csharp Programming a. Introduction i. C# Hello World ii. C# Keywords & Identifiers iii. C# Variables iv. C# Operators v. C# Basic I/O vi. C# Expressions & Statements vii. C# Comments b. Flow Control i. C# if..else ii. C# for loop iii. C# while loop iv. C# foreach loop v. C# switch statement vi. C# ternary operator c. Exception Handling d. Other Topics i. C# Bitwise Operators ii. C# Preprocessor Directives iii. C# Namespaces iv. C# Partial Class & Method","title":"Week-7 (C# Console Programming)"},{"location":"tr/week-7-csharp/ce103-week-7-csharp/#c-functional-console-programming","text":"We will follow the following topics Learn C# Programming Books Free C# Programming Book free-programming-books/free-programming-books-langs.md at master \u00b7 EbookFoundation/free-programming-books \u00b7 GitHub","title":"C# Functional Console Programming"},{"location":"tr/week-7-csharp/ce103-week-7-csharp/#extras","text":"Creating a Simple Dynamic-Link Library - Win32 apps | Microsoft Docs Dynamic-Link Library Creation - Win32 apps | Microsoft Docs Exporting from a DLL | Microsoft Docs Exporting from a DLL Using DEF Files | Microsoft Docs How to create a DLL library in C and then use it with C# - CodeProject DLL - How to Write DLL - Dynamic Link Library in C - Steps to Create and Use https://www.codementor.io/@a_hathon/building-and-using-dlls-in-c-d7rrd4caz DLL Injection - free code corner GitHub - dennisbabkin/InjectAll: Tutorial that demonstrates how to code a Windows driver to inject a custom DLL into all running processes. I coded it from start to finish using C++ and x86/x64 Assembly language in Microsoft Visual Studio. The solution includes a kernel driver project, a DLL project and a C++ test console project. Coding Windows Kernel Driver - InjectAll - Making the Visual Studio solution for DLL injection into all running processes.","title":"Extras"},{"location":"tr/week-7-csharp/ce103-week-7-csharp/#others","text":"std::dec, std::hex, std::oct - cppreference.com std::setbase - cppreference.com C++ Tutorial: Multi-Threaded Programming - Thread for Win32 - 2020 Csharp Programming a. Introduction i. C# Hello World ii. C# Keywords & Identifiers iii. C# Variables iv. C# Operators v. C# Basic I/O vi. C# Expressions & Statements vii. C# Comments b. Flow Control i. C# if..else ii. C# for loop iii. C# while loop iv. C# foreach loop v. C# switch statement vi. C# ternary operator c. Exception Handling d. Other Topics i. C# Bitwise Operators ii. C# Preprocessor Directives iii. C# Namespaces iv. C# Partial Class & Method","title":"Others"}]}