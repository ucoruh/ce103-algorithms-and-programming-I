{"config":{"indexing":"full","lang":["en","tr"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"license/","text":"License \u00b6 MIT License Copyright \u00a9 2019-2021 U\u011fur CORUH Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"license/#license","text":"MIT License Copyright \u00a9 2019-2021 U\u011fur CORUH Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"changelog/","text":"Changelog \u00b6 Material for Software Developers \u00b6 1.0.0 _ October 20, 2020 \u00b6 Initial release","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#material-for-software-developers","text":"","title":"Material for Software Developers"},{"location":"changelog/#1.0.0","text":"Initial release","title":"1.0.0 _ October 20, 2020"},{"location":"resume/","text":"Resume \u00b6 Download Resume-English Resume-Turkish English Turkish","title":"Resume"},{"location":"resume/#resume","text":"Download Resume-English Resume-Turkish English Turkish","title":"Resume"},{"location":"syllabus/syllabus/","text":"Recep Tayyip Erdogan University \u00b6 Faculty of Engineering and Architecture \u00b6 Computer Engineering \u00b6 CE103 Algorithms and Programming-I \u00b6 Syllabus \u00b6 Fall Semester, 2021-2022 \u00b6 Download DOC , SLIDE , PPTX Download WORD , PDF Instructor Asst. Prof. Dr. U\u011fur CORUH Contact Information ugur.coruh@erdogan.edu.tr Office No F-301 Google Classroom Code 3ipdtws Lecture Hours and Days Monday 13:00 - 15:30 (Theory) / Wednesday 13:00 - 14:30 (Lab) Lecture Classroom \u0130BBF 402 Level-4 Office Hours Meetings will be scheduled over Google Meet with your university account and email and performed via demand emails. Please send emails with the subject starting with [CE103] tag for the fast response and write formal, clear, and short emails Lecture and Communication Language English Theory/Laboratory Course Hour Per Week 3/2 Hours Credit 4 Prerequisite TBD Corequisite TBD Requirement TBD *TBD: To Be Defined. A. Course Description \u00b6 This course goal is to develop algorithm and programming expertise from scratch in a powerful way to provide a high-quality career path for students. The lecture will be based on expertise sharing and guiding students to find learning methods and practice for algorithm and programming topics. By making programming applications and projects in the courses, the learning process will be strengthened by practicing rather than theory. This course provides functional programming for C, C++, C#, and Java with up-to-date development environments. B. Course Learning Outcomes \u00b6 After completing this course satisfactorily, a student will be able to: Understand a software developer's road map and qualifications. Use different types of development environments to build applications. Understand the relation between real-life problems and their programming practices. Use language features in C, C++, C#, and Java for functional programming and evaluate their relative benefits. Understand application generation flows and outputs in detail, such as binaries and executables. Use the source code, version management systems, and portals based on GIT Work on the remote systems with remote connection tools. Use common developer tools that help application developers Create application libraries such as static, shared libraries for code reusability and functional packaging. Create unit tests for their applications to automate tests for their algorithms. Create console and GUI-based applications for their solutions. Create documentation for their applications. C. Course Topics \u00b6 Developer Road Map Algorithm Design and Basics Basic Operating System Information for Development Requirement Basic Remote Connection and Working Know-How Source Code Version Management Systems (GIT) Integrated Development Environments Application Test Automation Application Debugging and Bugfixing Functional Programming (C,C++, C#, Java) Continues Integration and Continues Development Processes Software Development Principles Application Documentation Automation Shared and Static Library Development and Test in Cross-Environment D. Textbooks and Required Hardware or Equipment \u00b6 This course does not require a coursebook. If necessary, you can use the following books and open-source online resources. Paul Deitel and Harvey Deitel. 2012. C How to Program (7 th . ed.). Prentice Hall Press, USA. Intro to Java Programming, Comprehensive Version (10 th Edition) 10 th Edition by Y. Daniel Liang Introduction to Algorithms, Third Edition By Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, and Clifford Stein Problem Solving and Program Design in C, J.R. Hanly, and E.B. Koffman, 6 th Edition. Robert Sedgewick and Kevin Wayne. 2011. Algorithms (4 th . ed.). Addison-Wesley Professional. Harvey M. Deitel and Paul J. Deitel. 2001. Java How to Program (4 th . ed.). Prentice Hall PTR, USA. Paul Deitel and Harvey Deitel. 2016. Visual C# How to Program (6 th . ed.). Pearson. Additional Books TBD During this course, you should have a laptop for programming practices. You will have your development environment, and you will use this for examination and assignments also classroom practices. E. Grading System \u00b6 Midterm and Final grades will be calculated with the weighted average of the project or homework-based examinations. Midterm grades will be calculated between term beginning to the midterm week, and Final grades will be calculated between Midterm and Final week homeworks or projects as follow \\[ a_n=\\text{Homework or Project Weight} \\] \\[ HW_n=\\text{Homework or Project Points} \\] \\[ n=\\text{Number of Homework or Project} \\] \\[ Grade=(a_1HW_1+a_2HW_2+...+a_nHW_n)/n \\] Homework Weight Midterm %40 Final %60 \\[ \\text{Passing Grade}=(40*Midterm_{Grade}+60*Final_{Grade})/100 \\] F. Instructional Strategies and Methods \u00b6 The basic teaching method of this course will be planned to be face-to-face in the classroom, and support resources, homeworks, and announcements will be shared over google classroom. Students are expected to be in the university. This responsibility is very important to complete this course with success. If pandemic situation changes and distance education is required during this course, this course will be done using synchronous and asynchronous distance education methods. In this scenario, students are expected to be in the online platform, zoom, or meet at the time specified in the course schedule. Attendance will be taken. G. Late Homework \u00b6 Throughout the semester, assignments must be submitted as specified by the announced deadline. Your grade will be reduced by 10% of the full points for each calendar day for overdue assignments. Overdue assignments will not be accepted after three (3) days. Unexpected situations must be reported to the instructor for late homeworks by students. H. Course Platform and Communication \u00b6 Google Classroom will be used as a course learning management system. All electronic resources and announcements about the course will be shared on this platform. It is very important to check the course page daily, access the necessary resources and announcements, and communicate with the instructor as you needed to complete the course with success I. Academic Integrity, Plagiarism & Cheating \u00b6 Academic Integrity is one of the most important principles of RTE\u00dc University. Anyone who breaches the principles of academic honesty is severely punished. It is natural to interact with classmates and others to \"study together\". It may also be the case where a student asks to help from someone else, paid or unpaid, better understand a difficult topic or a whole course. However, what is the borderline between \"studying together\" or \"taking private lessons\" and \"academic dishonesty\"? When is it plagiarism, when is it cheating? It is obvious that looking at another student's paper or any source other than what is allowed during the exam is cheating and will be punished. However, it is known that many students come to university with very little experience concerning what is acceptable and what counts as \"copying\", especially for assignments. The following are attempted as guidelines for the Faculty of Engineering and Architecture students to highlight the philosophy of academic honesty for assignments for which the student will be graded. Should a situation arise which is not described below, the student is advised to ask the instructor or assistant of the course whether what they intend to do would remain within the framework of academic honesty or not. a. What is acceptable when preparing an assignment? \u00b6 Communicating with classmates about the assignment to understand it better Putting ideas, quotes, paragraphs, small pieces of code (snippets) that you find online or elsewhere into your assignment, provided that these are not themselves the whole solution to the assignment, you cite the origins of these Asking sources for help in guiding you for the English language content of your assignment. Sharing small pieces of your assignment in the classroom to create a class discussion on some controversial topics. Turning to the web or elsewhere for instructions, references, and solutions to technical difficulties, but not for direct answers to the assignment Discuss solutions to assignments with others using diagrams or summarized statements but not actual text or code. Working with (and even paying) a tutor to help you with the course, provided the tutor does not do your assignment for you. b. What is not acceptable? \u00b6 Ask a classmate to see their solution to a problem before submitting your own. Failing to cite the origins of any text (or code for programming courses) that you discover outside of the course's lessons and integrate into your work Giving or showing a classmate your solution to a problem when the classmate is struggling to solve it. J. Expectations \u00b6 You are expected to attend classes on time by completing weekly course requirements (readings and assignments) during the semester. The main communication channel between the instructor and the students will be emailed. Please send your questions to the instructor's email address about the course via the email address provided to you by the university. Ensure that you include the course name in the subject field of your message and your name in the text field . In addition, the instructor will contact you via email if necessary. For this reason, it is very important to check your email address every day for healthy communication. K. Lecture Content and Syllabus Updates \u00b6 If deemed necessary, changes in the lecture content or course schedule can be made. If any changes are made in the scope of this document, the instructor will inform you about this. Course Schedule Overview \u00b6 Weeks Dates Subjects Other Tasks Week 1 04.10.2021 06.10.2021 Course Plan and Communication,Grading System, Assignments, and Exams,Computer Engineering Job Qualifications and Road Map,Google Search Basics,Programming Introduction (Operating System Basics, Computer Network Basics, Numerical System Basics, Character Sets) TBD Week 2 11.10.2021 13.10.2021 Algorithm Basics, Flowgorithm, Pseudocode, Programming Environment Setup and Configuration for C, C++, Java, and C#, Common Developer Tools, Online Programming Envoriments TBD Week 3 18.10.2021 20.10.2021 Source Code Sharing and Version Management. TBD Week 4 25.10.2021 27.10.2021 Shared Library Development and Application Test Automation for C, C++, C# and Java, TDD (Test Driven Development) TBD Week 5 01.11.2021 03.11.2021 C Functional Console Programming Week-6 08.11.2021 10.11.2021 C++ Functional Console Programming TBD Week-7 15.11.2021 17.11.2021 C# Functional Console Programming TBD Week-8 20.11.2021 28.11.2021 Midterm TBD Week-9 29.11.2021 01.12.2021 Java Functional Console Programming-I TBD Week-10 06.12.2021 08.12.2021 Java Functional Console Programming-II TBD Week-11 13.12.2021 16.12.2021 Java Functional Console Programming-III TBD Week-12 20.12.2021 22.12.2021 C / C++ Graphical User Interface (GUI) Programming TBD Week-13 27.12.2021 29.12.2021 C# Graphical User Interface (GUI) Programming-I TBD Week-14 03.01.2022 05.01.2022 C# Graphical User Interface (GUI) Programming-II TBD Week-15 10.01.2022 12.01.2022 Java Graphical User Interface Programming TBD Week-16 17.01.2022 30.01.2022 Final . TBD Bologna Information \u00b6 \\(End-Of-CE103-Syllabus\\)","title":"Syllabus"},{"location":"syllabus/syllabus/#recep-tayyip-erdogan-university","text":"","title":"Recep Tayyip Erdogan University"},{"location":"syllabus/syllabus/#faculty-of-engineering-and-architecture","text":"","title":"Faculty of Engineering and Architecture"},{"location":"syllabus/syllabus/#computer-engineering","text":"","title":"Computer Engineering"},{"location":"syllabus/syllabus/#ce103-algorithms-and-programming-i","text":"","title":"CE103 Algorithms and Programming-I"},{"location":"syllabus/syllabus/#syllabus","text":"","title":"Syllabus"},{"location":"syllabus/syllabus/#fall-semester-2021-2022","text":"Download DOC , SLIDE , PPTX Download WORD , PDF Instructor Asst. Prof. Dr. U\u011fur CORUH Contact Information ugur.coruh@erdogan.edu.tr Office No F-301 Google Classroom Code 3ipdtws Lecture Hours and Days Monday 13:00 - 15:30 (Theory) / Wednesday 13:00 - 14:30 (Lab) Lecture Classroom \u0130BBF 402 Level-4 Office Hours Meetings will be scheduled over Google Meet with your university account and email and performed via demand emails. Please send emails with the subject starting with [CE103] tag for the fast response and write formal, clear, and short emails Lecture and Communication Language English Theory/Laboratory Course Hour Per Week 3/2 Hours Credit 4 Prerequisite TBD Corequisite TBD Requirement TBD *TBD: To Be Defined.","title":"Fall Semester, 2021-2022"},{"location":"syllabus/syllabus/#a-course-description","text":"This course goal is to develop algorithm and programming expertise from scratch in a powerful way to provide a high-quality career path for students. The lecture will be based on expertise sharing and guiding students to find learning methods and practice for algorithm and programming topics. By making programming applications and projects in the courses, the learning process will be strengthened by practicing rather than theory. This course provides functional programming for C, C++, C#, and Java with up-to-date development environments.","title":"A.    Course Description"},{"location":"syllabus/syllabus/#b-course-learning-outcomes","text":"After completing this course satisfactorily, a student will be able to: Understand a software developer's road map and qualifications. Use different types of development environments to build applications. Understand the relation between real-life problems and their programming practices. Use language features in C, C++, C#, and Java for functional programming and evaluate their relative benefits. Understand application generation flows and outputs in detail, such as binaries and executables. Use the source code, version management systems, and portals based on GIT Work on the remote systems with remote connection tools. Use common developer tools that help application developers Create application libraries such as static, shared libraries for code reusability and functional packaging. Create unit tests for their applications to automate tests for their algorithms. Create console and GUI-based applications for their solutions. Create documentation for their applications.","title":"B.    Course Learning Outcomes"},{"location":"syllabus/syllabus/#c-course-topics","text":"Developer Road Map Algorithm Design and Basics Basic Operating System Information for Development Requirement Basic Remote Connection and Working Know-How Source Code Version Management Systems (GIT) Integrated Development Environments Application Test Automation Application Debugging and Bugfixing Functional Programming (C,C++, C#, Java) Continues Integration and Continues Development Processes Software Development Principles Application Documentation Automation Shared and Static Library Development and Test in Cross-Environment","title":"C.    Course Topics"},{"location":"syllabus/syllabus/#d-textbooks-and-required-hardware-or-equipment","text":"This course does not require a coursebook. If necessary, you can use the following books and open-source online resources. Paul Deitel and Harvey Deitel. 2012. C How to Program (7 th . ed.). Prentice Hall Press, USA. Intro to Java Programming, Comprehensive Version (10 th Edition) 10 th Edition by Y. Daniel Liang Introduction to Algorithms, Third Edition By Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, and Clifford Stein Problem Solving and Program Design in C, J.R. Hanly, and E.B. Koffman, 6 th Edition. Robert Sedgewick and Kevin Wayne. 2011. Algorithms (4 th . ed.). Addison-Wesley Professional. Harvey M. Deitel and Paul J. Deitel. 2001. Java How to Program (4 th . ed.). Prentice Hall PTR, USA. Paul Deitel and Harvey Deitel. 2016. Visual C# How to Program (6 th . ed.). Pearson. Additional Books TBD During this course, you should have a laptop for programming practices. You will have your development environment, and you will use this for examination and assignments also classroom practices.","title":"D.    Textbooks and Required Hardware or Equipment"},{"location":"syllabus/syllabus/#e-grading-system","text":"Midterm and Final grades will be calculated with the weighted average of the project or homework-based examinations. Midterm grades will be calculated between term beginning to the midterm week, and Final grades will be calculated between Midterm and Final week homeworks or projects as follow \\[ a_n=\\text{Homework or Project Weight} \\] \\[ HW_n=\\text{Homework or Project Points} \\] \\[ n=\\text{Number of Homework or Project} \\] \\[ Grade=(a_1HW_1+a_2HW_2+...+a_nHW_n)/n \\] Homework Weight Midterm %40 Final %60 \\[ \\text{Passing Grade}=(40*Midterm_{Grade}+60*Final_{Grade})/100 \\]","title":"E.    Grading System"},{"location":"syllabus/syllabus/#f-instructional-strategies-and-methods","text":"The basic teaching method of this course will be planned to be face-to-face in the classroom, and support resources, homeworks, and announcements will be shared over google classroom. Students are expected to be in the university. This responsibility is very important to complete this course with success. If pandemic situation changes and distance education is required during this course, this course will be done using synchronous and asynchronous distance education methods. In this scenario, students are expected to be in the online platform, zoom, or meet at the time specified in the course schedule. Attendance will be taken.","title":"F. Instructional Strategies and Methods"},{"location":"syllabus/syllabus/#g-late-homework","text":"Throughout the semester, assignments must be submitted as specified by the announced deadline. Your grade will be reduced by 10% of the full points for each calendar day for overdue assignments. Overdue assignments will not be accepted after three (3) days. Unexpected situations must be reported to the instructor for late homeworks by students.","title":"G. Late Homework"},{"location":"syllabus/syllabus/#h-course-platform-and-communication","text":"Google Classroom will be used as a course learning management system. All electronic resources and announcements about the course will be shared on this platform. It is very important to check the course page daily, access the necessary resources and announcements, and communicate with the instructor as you needed to complete the course with success","title":"H. Course Platform and Communication"},{"location":"syllabus/syllabus/#i-academic-integrity-plagiarism-cheating","text":"Academic Integrity is one of the most important principles of RTE\u00dc University. Anyone who breaches the principles of academic honesty is severely punished. It is natural to interact with classmates and others to \"study together\". It may also be the case where a student asks to help from someone else, paid or unpaid, better understand a difficult topic or a whole course. However, what is the borderline between \"studying together\" or \"taking private lessons\" and \"academic dishonesty\"? When is it plagiarism, when is it cheating? It is obvious that looking at another student's paper or any source other than what is allowed during the exam is cheating and will be punished. However, it is known that many students come to university with very little experience concerning what is acceptable and what counts as \"copying\", especially for assignments. The following are attempted as guidelines for the Faculty of Engineering and Architecture students to highlight the philosophy of academic honesty for assignments for which the student will be graded. Should a situation arise which is not described below, the student is advised to ask the instructor or assistant of the course whether what they intend to do would remain within the framework of academic honesty or not.","title":"I. Academic Integrity, Plagiarism &amp; Cheating"},{"location":"syllabus/syllabus/#a-what-is-acceptable-when-preparing-an-assignment","text":"Communicating with classmates about the assignment to understand it better Putting ideas, quotes, paragraphs, small pieces of code (snippets) that you find online or elsewhere into your assignment, provided that these are not themselves the whole solution to the assignment, you cite the origins of these Asking sources for help in guiding you for the English language content of your assignment. Sharing small pieces of your assignment in the classroom to create a class discussion on some controversial topics. Turning to the web or elsewhere for instructions, references, and solutions to technical difficulties, but not for direct answers to the assignment Discuss solutions to assignments with others using diagrams or summarized statements but not actual text or code. Working with (and even paying) a tutor to help you with the course, provided the tutor does not do your assignment for you.","title":"a. What is acceptable when preparing an assignment?"},{"location":"syllabus/syllabus/#b-what-is-not-acceptable","text":"Ask a classmate to see their solution to a problem before submitting your own. Failing to cite the origins of any text (or code for programming courses) that you discover outside of the course's lessons and integrate into your work Giving or showing a classmate your solution to a problem when the classmate is struggling to solve it.","title":"b. What is not acceptable?"},{"location":"syllabus/syllabus/#j-expectations","text":"You are expected to attend classes on time by completing weekly course requirements (readings and assignments) during the semester. The main communication channel between the instructor and the students will be emailed. Please send your questions to the instructor's email address about the course via the email address provided to you by the university. Ensure that you include the course name in the subject field of your message and your name in the text field . In addition, the instructor will contact you via email if necessary. For this reason, it is very important to check your email address every day for healthy communication.","title":"J. Expectations"},{"location":"syllabus/syllabus/#k-lecture-content-and-syllabus-updates","text":"If deemed necessary, changes in the lecture content or course schedule can be made. If any changes are made in the scope of this document, the instructor will inform you about this.","title":"K. Lecture Content and Syllabus Updates"},{"location":"syllabus/syllabus/#course-schedule-overview","text":"Weeks Dates Subjects Other Tasks Week 1 04.10.2021 06.10.2021 Course Plan and Communication,Grading System, Assignments, and Exams,Computer Engineering Job Qualifications and Road Map,Google Search Basics,Programming Introduction (Operating System Basics, Computer Network Basics, Numerical System Basics, Character Sets) TBD Week 2 11.10.2021 13.10.2021 Algorithm Basics, Flowgorithm, Pseudocode, Programming Environment Setup and Configuration for C, C++, Java, and C#, Common Developer Tools, Online Programming Envoriments TBD Week 3 18.10.2021 20.10.2021 Source Code Sharing and Version Management. TBD Week 4 25.10.2021 27.10.2021 Shared Library Development and Application Test Automation for C, C++, C# and Java, TDD (Test Driven Development) TBD Week 5 01.11.2021 03.11.2021 C Functional Console Programming Week-6 08.11.2021 10.11.2021 C++ Functional Console Programming TBD Week-7 15.11.2021 17.11.2021 C# Functional Console Programming TBD Week-8 20.11.2021 28.11.2021 Midterm TBD Week-9 29.11.2021 01.12.2021 Java Functional Console Programming-I TBD Week-10 06.12.2021 08.12.2021 Java Functional Console Programming-II TBD Week-11 13.12.2021 16.12.2021 Java Functional Console Programming-III TBD Week-12 20.12.2021 22.12.2021 C / C++ Graphical User Interface (GUI) Programming TBD Week-13 27.12.2021 29.12.2021 C# Graphical User Interface (GUI) Programming-I TBD Week-14 03.01.2022 05.01.2022 C# Graphical User Interface (GUI) Programming-II TBD Week-15 10.01.2022 12.01.2022 Java Graphical User Interface Programming TBD Week-16 17.01.2022 30.01.2022 Final . TBD","title":"Course Schedule Overview"},{"location":"syllabus/syllabus/#bologna-information","text":"\\(End-Of-CE103-Syllabus\\)","title":"Bologna Information"},{"location":"week-1-intro/ce103-week-1-intro/","text":"CE103 Algorithms and Programming I \u00b6 Week-1 (Intro) \u00b6 Fall Semester, 2021-2022 \u00b6 Download DOC , SLIDE , PPTX Brief Description of Course and Rules \u00b6 We will first talk about, Course Plan and Communication Grading System, Homework,s and Exams please read the syllabus carefully. Computer Engineering Roles \u00b6 Software Development Hardware Development Network Organization and Management Database Organization and Management Hardware and Software Testing Audit (Cyber Security, Policy etc.) Etc. Computer Engineering Areas \u00b6 Computer Vision Social Analytics Mobility IoT Security Web-Scale IT Cloud Smart Machines Pervasive Fintech Etc. Our focus is Software Development \u00b6 for this reason, we will focus on software-based road-maps we can use common developer road maps from https://roadmap.sh/ What will you see in the roadmap? \u00b6 Frontend Backend DevOps DBA and more Also, you need soft skills \u00b6 Excellent written and oral communication skills, including public speaking and presenting Decisiveness under pressure and strong critical thinking skills Willingness to work off-core-hours, when necessary, to deploy software or upgrade hardware If you need more information about your profession \u00b6 Visit Job Search Web Portals and Look at Requirements to Understand What is Real Life Need https://www.kariyer.net/ https://www.yenibiris.com/ https://www.secretcv.com/ https://www.linkedin.com/ Etc. Using Google \u00b6 Operating System List \u00b6 Operating System Architecture \u00b6 reference Operating Systems Key Comparing Factor \u00b6 reference Operating System Comparisons \u00b6 reference Intro to the Internet \u00b6 What is IP Address? \u00b6 What is Port? \u00b6 In computer networking , a port is a communication endpoint. At the software level, within an operating system , a port is a logical construct that identifies a specific process or a type of network service . A port is identified for each transport protocol and address combination by a 16-bit unsigned number , known as the port number. The most common transport protocols that use port numbers are the Transmission Control Protocol (TCP) and the User Datagram Protocol (UDP). reference What is Port Forwarding and NAT \u00b6 https://www.networkantics.com/sonicwall-port-forwarding/ https://en.wikipedia.org/wiki/Network_address_translation What is Internet Packet (IP) \u00b6 What is Domain Name Server (DNS)? \u00b6 The Submarine Cable Map \u00b6 https://www.submarinecablemap.com/ Introduction to the command line interface \u00b6 Reference Books Bash Notes For Professionals Linux Notes For Professionals PowerShell Notes For Professionals What is the command line? \u00b6 The window, which is usually called the command line or command-line interface , is a text-based application for viewing, handling, and manipulating files on your computer. It's much like Windows Explorer or Finder on the Mac, but without the graphical interface. Other names for the command line are: cmd, CLI, prompt, console or terminal While there are many commands you can use with CLI, they all fall into two categories : The commands that handle the processes The commands that handle the files reference Why Would You Use CLI over GUI? \u00b6 Less Resource It is not a secret that the text-based program needs very little resources of your computer. This means that with CLI you can do similar tasks with minimum resources. High Precision You can use a specific command to target specific destinations with ease. As long as you don\u2019t type the wrong command, it will work like a charm. Once you learn the basics, writing syntax is not as hard as you might think. Repetitive Tasks Friendly GUI has developed well over the years. But, the operating system may not give you all the menus and buttons to perform all tasks. One of the reasons is safety. This leaves you overwhelmed if you have to do repetitive tasks. For example, when you have to handle hundreds of files within a folder, CLI enables you to use a single command to do automate the repetition easily. Powerful Most operating systems today prevent you from messing up the system\u2019s core process. Windows has system protection and MacOS has SIP (System Integrity Protection). You won\u2019t be able to perform certain tasks which are system protected. However, with CLI, you will have full control over your system. Open the command-line interface (Windows) \u00b6 Go to the Start menu or screen, and enter \"Command Prompt\" in the search field. Go to Start menu \u2192 Windows System \u2192 Command Prompt. Go to Start menu \u2192 All Programs \u2192 Accessories \u2192 Command Prompt. Go to the Start screen, hover your mouse in the lower-left corner of the screen, and click the down arrow that appears (on a touch screen, instead flick up from the bottom of the screen). The Apps page should open. Click on Command Prompt in the Windows System section. Hold the special Windows key on your keyboard and press the \"X\" key. Choose \"Command Prompt\" from the pop-up menu. Hold the Windows key and press the \"R\" key to get a \"Run\" window. Type \"cmd\" in the box, and click the OK key. Open the command-line interface (Linux) \u00b6 It's probably under Applications \u2192 Accessories \u2192 Terminal, or Applications \u2192 System \u2192 Terminal, but that may depend on your system. If it's not there, you can try to Google it. :) Open the command-line interface (MacOS) \u00b6 Go to Applications \u2192 Utilities \u2192 Terminal Reference \u00b6 Network_address_translation GitHub - kamranahmedse/developer-roadmap: Roadmap to becoming a web developer in 2021 GitHub - jwasham/coding-interview-university: A complete computer science study plan to become a software engineer. GitHub - sindresorhus/awesome: \ud83d\ude0e Awesome lists about all kinds of interesting topics","title":"Week-1 (Intro and Developer Roadmap)"},{"location":"week-1-intro/ce103-week-1-intro/#ce103-algorithms-and-programming-i","text":"","title":"CE103 Algorithms and Programming I"},{"location":"week-1-intro/ce103-week-1-intro/#week-1-intro","text":"","title":"Week-1 (Intro)"},{"location":"week-1-intro/ce103-week-1-intro/#fall-semester-2021-2022","text":"Download DOC , SLIDE , PPTX","title":"Fall Semester, 2021-2022"},{"location":"week-1-intro/ce103-week-1-intro/#brief-description-of-course-and-rules","text":"We will first talk about, Course Plan and Communication Grading System, Homework,s and Exams please read the syllabus carefully.","title":"Brief Description of Course and Rules"},{"location":"week-1-intro/ce103-week-1-intro/#computer-engineering-roles","text":"Software Development Hardware Development Network Organization and Management Database Organization and Management Hardware and Software Testing Audit (Cyber Security, Policy etc.) Etc.","title":"Computer Engineering Roles"},{"location":"week-1-intro/ce103-week-1-intro/#computer-engineering-areas","text":"Computer Vision Social Analytics Mobility IoT Security Web-Scale IT Cloud Smart Machines Pervasive Fintech Etc.","title":"Computer Engineering Areas"},{"location":"week-1-intro/ce103-week-1-intro/#our-focus-is-software-development","text":"for this reason, we will focus on software-based road-maps we can use common developer road maps from https://roadmap.sh/","title":"Our focus is Software Development"},{"location":"week-1-intro/ce103-week-1-intro/#what-will-you-see-in-the-roadmap","text":"Frontend Backend DevOps DBA and more","title":"What will you see in the roadmap?"},{"location":"week-1-intro/ce103-week-1-intro/#also-you-need-soft-skills","text":"Excellent written and oral communication skills, including public speaking and presenting Decisiveness under pressure and strong critical thinking skills Willingness to work off-core-hours, when necessary, to deploy software or upgrade hardware","title":"Also, you need soft skills"},{"location":"week-1-intro/ce103-week-1-intro/#if-you-need-more-information-about-your-profession","text":"Visit Job Search Web Portals and Look at Requirements to Understand What is Real Life Need https://www.kariyer.net/ https://www.yenibiris.com/ https://www.secretcv.com/ https://www.linkedin.com/ Etc.","title":"If you need more information about your profession"},{"location":"week-1-intro/ce103-week-1-intro/#using-google","text":"","title":"Using Google"},{"location":"week-1-intro/ce103-week-1-intro/#operating-system-list","text":"","title":"Operating System List"},{"location":"week-1-intro/ce103-week-1-intro/#operating-system-architecture","text":"reference","title":"Operating System Architecture"},{"location":"week-1-intro/ce103-week-1-intro/#operating-systems-key-comparing-factor","text":"reference","title":"Operating Systems Key Comparing Factor"},{"location":"week-1-intro/ce103-week-1-intro/#operating-system-comparisons","text":"reference","title":"Operating System Comparisons"},{"location":"week-1-intro/ce103-week-1-intro/#intro-to-the-internet","text":"","title":"Intro to the Internet"},{"location":"week-1-intro/ce103-week-1-intro/#what-is-ip-address","text":"","title":"What is IP Address?"},{"location":"week-1-intro/ce103-week-1-intro/#what-is-port","text":"In computer networking , a port is a communication endpoint. At the software level, within an operating system , a port is a logical construct that identifies a specific process or a type of network service . A port is identified for each transport protocol and address combination by a 16-bit unsigned number , known as the port number. The most common transport protocols that use port numbers are the Transmission Control Protocol (TCP) and the User Datagram Protocol (UDP). reference","title":"What is Port?"},{"location":"week-1-intro/ce103-week-1-intro/#what-is-port-forwarding-and-nat","text":"https://www.networkantics.com/sonicwall-port-forwarding/ https://en.wikipedia.org/wiki/Network_address_translation","title":"What is Port Forwarding and NAT"},{"location":"week-1-intro/ce103-week-1-intro/#what-is-internet-packet-ip","text":"","title":"What is Internet Packet (IP)"},{"location":"week-1-intro/ce103-week-1-intro/#what-is-domain-name-server-dns","text":"","title":"What is Domain Name Server (DNS)?"},{"location":"week-1-intro/ce103-week-1-intro/#the-submarine-cable-map","text":"https://www.submarinecablemap.com/","title":"The Submarine Cable Map"},{"location":"week-1-intro/ce103-week-1-intro/#introduction-to-the-command-line-interface","text":"Reference Books Bash Notes For Professionals Linux Notes For Professionals PowerShell Notes For Professionals","title":"Introduction to the command line interface"},{"location":"week-1-intro/ce103-week-1-intro/#what-is-the-command-line","text":"The window, which is usually called the command line or command-line interface , is a text-based application for viewing, handling, and manipulating files on your computer. It's much like Windows Explorer or Finder on the Mac, but without the graphical interface. Other names for the command line are: cmd, CLI, prompt, console or terminal While there are many commands you can use with CLI, they all fall into two categories : The commands that handle the processes The commands that handle the files reference","title":"What is the command line?"},{"location":"week-1-intro/ce103-week-1-intro/#why-would-you-use-cli-over-gui","text":"Less Resource It is not a secret that the text-based program needs very little resources of your computer. This means that with CLI you can do similar tasks with minimum resources. High Precision You can use a specific command to target specific destinations with ease. As long as you don\u2019t type the wrong command, it will work like a charm. Once you learn the basics, writing syntax is not as hard as you might think. Repetitive Tasks Friendly GUI has developed well over the years. But, the operating system may not give you all the menus and buttons to perform all tasks. One of the reasons is safety. This leaves you overwhelmed if you have to do repetitive tasks. For example, when you have to handle hundreds of files within a folder, CLI enables you to use a single command to do automate the repetition easily. Powerful Most operating systems today prevent you from messing up the system\u2019s core process. Windows has system protection and MacOS has SIP (System Integrity Protection). You won\u2019t be able to perform certain tasks which are system protected. However, with CLI, you will have full control over your system.","title":"Why Would You Use CLI over GUI?"},{"location":"week-1-intro/ce103-week-1-intro/#open-the-command-line-interface-windows","text":"Go to the Start menu or screen, and enter \"Command Prompt\" in the search field. Go to Start menu \u2192 Windows System \u2192 Command Prompt. Go to Start menu \u2192 All Programs \u2192 Accessories \u2192 Command Prompt. Go to the Start screen, hover your mouse in the lower-left corner of the screen, and click the down arrow that appears (on a touch screen, instead flick up from the bottom of the screen). The Apps page should open. Click on Command Prompt in the Windows System section. Hold the special Windows key on your keyboard and press the \"X\" key. Choose \"Command Prompt\" from the pop-up menu. Hold the Windows key and press the \"R\" key to get a \"Run\" window. Type \"cmd\" in the box, and click the OK key.","title":"Open the command-line interface (Windows)"},{"location":"week-1-intro/ce103-week-1-intro/#open-the-command-line-interface-linux","text":"It's probably under Applications \u2192 Accessories \u2192 Terminal, or Applications \u2192 System \u2192 Terminal, but that may depend on your system. If it's not there, you can try to Google it. :)","title":"Open the command-line interface (Linux)"},{"location":"week-1-intro/ce103-week-1-intro/#open-the-command-line-interface-macos","text":"Go to Applications \u2192 Utilities \u2192 Terminal","title":"Open the command-line interface (MacOS)"},{"location":"week-1-intro/ce103-week-1-intro/#reference","text":"Network_address_translation GitHub - kamranahmedse/developer-roadmap: Roadmap to becoming a web developer in 2021 GitHub - jwasham/coding-interview-university: A complete computer science study plan to become a software engineer. GitHub - sindresorhus/awesome: \ud83d\ude0e Awesome lists about all kinds of interesting topics","title":"Reference"},{"location":"week-10-java-II/ce103-week-10-java-II/","text":"CE103 Algorithms and Programming I \u00b6 Week-10 (Java Functional Console Programming-II) \u00b6 Fall Semester, 2021-2022 \u00b6 Download DOC , SLIDE , PPTX Java Functional Console Programming-II \u00b6 a. Java Exception Handling i. Java Exceptions ii. Java Exception Handling iii. Java try..catch iv. Java throw and throws v. Java catch Multiple Exceptions vi. Java try-with-resources vii. Java Annotations viii. Java Annotation Types ix. Java Logging x. Java Assertions b. Java List i. Java Collection Framework ii. Java Collection Interface iii. Java List Interface iv. Java ArrayList v. Java Vector vi. Java Stack c. Java Queue i. Java Queue Interface ii. Java PriorityQueue Interface iii. Java Deque Interface iv. Java LinkedList v. Java ArrayDeque vi. Java BlockingQueue Interface vii. Java ArrayBlockingQueue viii. Java LinkedBlocking Queue d. Java Map i. Java Map Interface ii. Java HashMap iii. Java LinkedHashMap iv. Java WeakHashMap v. Java EnumMap vi. Java SortedMap Interface vii. Java NavigableMap Interface viii. Java TreeMap ix. Java ConcurrentMap Interface x. Java ConcurrentHashMap e. Java Set i. Java Set Interface ii. Java HashSet iii. Java EnumSet iv. Java LinkedHashSet v. Java SortedSet Interface vi. Java NavigableSet Interface vii. Java TreeSet viii. Java Algorithms ix. Java Iterator Java ListIterator Out of Scope \u00b6 a. Java OOP-I i. Java Class and Objects ii. Java Methods iii. Java Constructor iv. Java Strings v. Java Access Modifiers vi. Java this keyword vii. Java final keyword viii. Java recursion ix. Java instanceof operator b. Java OOP-II i. Java Inheritance ii. Java Method Overriding iii. Java super keyword iv. Abstract Class & Method v. Java Interfaces vi. Java Polymorphism vii. Java Encapsulation c. Java OOP-III i. Nested & Inner Class ii. Java Static Class iii. Java Anonymous Class iv. Java Singleton v. Java enum class vi. Java enum constructor vii. Java enum string Java reflection","title":"Week-10 (Java Console Programming-II)"},{"location":"week-10-java-II/ce103-week-10-java-II/#ce103-algorithms-and-programming-i","text":"","title":"CE103 Algorithms and Programming I"},{"location":"week-10-java-II/ce103-week-10-java-II/#week-10-java-functional-console-programming-ii","text":"","title":"Week-10 (Java Functional Console Programming-II)"},{"location":"week-10-java-II/ce103-week-10-java-II/#fall-semester-2021-2022","text":"Download DOC , SLIDE , PPTX","title":"Fall Semester, 2021-2022"},{"location":"week-10-java-II/ce103-week-10-java-II/#java-functional-console-programming-ii","text":"a. Java Exception Handling i. Java Exceptions ii. Java Exception Handling iii. Java try..catch iv. Java throw and throws v. Java catch Multiple Exceptions vi. Java try-with-resources vii. Java Annotations viii. Java Annotation Types ix. Java Logging x. Java Assertions b. Java List i. Java Collection Framework ii. Java Collection Interface iii. Java List Interface iv. Java ArrayList v. Java Vector vi. Java Stack c. Java Queue i. Java Queue Interface ii. Java PriorityQueue Interface iii. Java Deque Interface iv. Java LinkedList v. Java ArrayDeque vi. Java BlockingQueue Interface vii. Java ArrayBlockingQueue viii. Java LinkedBlocking Queue d. Java Map i. Java Map Interface ii. Java HashMap iii. Java LinkedHashMap iv. Java WeakHashMap v. Java EnumMap vi. Java SortedMap Interface vii. Java NavigableMap Interface viii. Java TreeMap ix. Java ConcurrentMap Interface x. Java ConcurrentHashMap e. Java Set i. Java Set Interface ii. Java HashSet iii. Java EnumSet iv. Java LinkedHashSet v. Java SortedSet Interface vi. Java NavigableSet Interface vii. Java TreeSet viii. Java Algorithms ix. Java Iterator Java ListIterator","title":"Java Functional Console Programming-II"},{"location":"week-10-java-II/ce103-week-10-java-II/#out-of-scope","text":"a. Java OOP-I i. Java Class and Objects ii. Java Methods iii. Java Constructor iv. Java Strings v. Java Access Modifiers vi. Java this keyword vii. Java final keyword viii. Java recursion ix. Java instanceof operator b. Java OOP-II i. Java Inheritance ii. Java Method Overriding iii. Java super keyword iv. Abstract Class & Method v. Java Interfaces vi. Java Polymorphism vii. Java Encapsulation c. Java OOP-III i. Nested & Inner Class ii. Java Static Class iii. Java Anonymous Class iv. Java Singleton v. Java enum class vi. Java enum constructor vii. Java enum string Java reflection","title":"Out of Scope"},{"location":"week-11-java-III/ce103-week-11-java-III/","text":"CE103 Algorithms and Programming I \u00b6 Week-11 (Java Functional Console Programming-III) \u00b6 Fall Semester, 2021-2022 \u00b6 Download DOC , SLIDE , PPTX Java Functional Console Programming-III \u00b6 i. Java I/O Streams i. Java I/O Streams ii. Java InputStream iii. Java OutputStream iv. Java FileInputStream v. Java FileOutputStream vi. Java ByteArrayInputStream vii. Java ByteArrayOutputStream viii. Java ObjectInputStream ix. Java ObjectOutputStream x. Java BufferedInputStream xi. Java BufferedOutputStream xii. Java PrintStream j. Java Reader/Writer i. Java Reader ii. Java Writer iii. Java InputStreamReader iv. Java OutputStreamWriter v. Java FileReader vi. Java FileWriter vii. Java BufferedReader viii. Java BufferedWriter ix. Java StringReader x. Java StringWriter xi. Java PrintWriter k. Additional Topics i. Java Scanner Class ii. Java Type Casting iii. Java autoboxing and unboxing iv. Java Lambda Expression v. Java Generics vi. Java File Class vii. Java Wrapper Class viii. Java Command Line Arguments ix. JNLP (Java Network Launch Protocol) JNI Sample JNI/C++ HelloWorld \u00b7 GitHub Set up JNI development in Gradle project | IntelliJ IDEA","title":"Week-11 (Java Console Programming-III)"},{"location":"week-11-java-III/ce103-week-11-java-III/#ce103-algorithms-and-programming-i","text":"","title":"CE103 Algorithms and Programming I"},{"location":"week-11-java-III/ce103-week-11-java-III/#week-11-java-functional-console-programming-iii","text":"","title":"Week-11 (Java Functional Console Programming-III)"},{"location":"week-11-java-III/ce103-week-11-java-III/#fall-semester-2021-2022","text":"Download DOC , SLIDE , PPTX","title":"Fall Semester, 2021-2022"},{"location":"week-11-java-III/ce103-week-11-java-III/#java-functional-console-programming-iii","text":"i. Java I/O Streams i. Java I/O Streams ii. Java InputStream iii. Java OutputStream iv. Java FileInputStream v. Java FileOutputStream vi. Java ByteArrayInputStream vii. Java ByteArrayOutputStream viii. Java ObjectInputStream ix. Java ObjectOutputStream x. Java BufferedInputStream xi. Java BufferedOutputStream xii. Java PrintStream j. Java Reader/Writer i. Java Reader ii. Java Writer iii. Java InputStreamReader iv. Java OutputStreamWriter v. Java FileReader vi. Java FileWriter vii. Java BufferedReader viii. Java BufferedWriter ix. Java StringReader x. Java StringWriter xi. Java PrintWriter k. Additional Topics i. Java Scanner Class ii. Java Type Casting iii. Java autoboxing and unboxing iv. Java Lambda Expression v. Java Generics vi. Java File Class vii. Java Wrapper Class viii. Java Command Line Arguments ix. JNLP (Java Network Launch Protocol) JNI Sample JNI/C++ HelloWorld \u00b7 GitHub Set up JNI development in Gradle project | IntelliJ IDEA","title":"Java Functional Console Programming-III"},{"location":"week-12-c-cpp-gui/ce103-week-12-c-cpp-gui/","text":"CE103 Algorithms and Programming I \u00b6 Week-12 (C/Cpp GUI Programming) \u00b6 Fall Semester, 2021-2022 \u00b6 Download DOC , SLIDE , PPTX C/Cpp GUI Programming \u00b6 The Microsoft Foundation Class MFC Tutorial Visual C++ / MFC Calculator 3 - YouTube MFC C++ : My videos source code download available now to members - YouTube The Windows GUI interface programming using Microsoft Foundation Classes (MFC) with Visual C++ and .Net hands-on approach tutorials Module 1: Using Visual C++ 6.0, .Net and Windows MFC Graphic User Interface (GUI) programming hands-on tutorial-Module1 GTK 4 https://www.msys2.org/ https://www.msys2.org/ Programming with gtkmm 4 Build and run GTK 4 applications with Visual Studio https://www.gtk.org/ The Meson Build system The GTK Project - A free and open-source cross-platform widget toolkit // Include gtk #include <gtk/gtk.h> static void on_activate ( GtkApplication * app ) { // Create a new window GtkWidget * window = gtk_application_window_new ( app ); // Create a new button GtkWidget * button = gtk_button_new_with_label ( \"Hello, World!\" ); // When the button is clicked, close the window passed as an argument g_signal_connect_swapped ( button , \"clicked\" , G_CALLBACK ( gtk_window_close ), window ); gtk_window_set_child ( GTK_WINDOW ( window ), button ); gtk_window_present ( GTK_WINDOW ( window )); } int main ( int argc , char * argv []) { // Create a new application GtkApplication * app = gtk_application_new ( \"com.example.GtkApplication\" , G_APPLICATION_FLAGS_NONE ); g_signal_connect ( app , \"activate\" , G_CALLBACK ( on_activate ), NULL ); return g_application_run ( G_APPLICATION ( app ), argc , argv ); } eBooks by Tags | RIP Tutorial","title":"Week-12 (C/C++ GUI Programming)"},{"location":"week-12-c-cpp-gui/ce103-week-12-c-cpp-gui/#ce103-algorithms-and-programming-i","text":"","title":"CE103 Algorithms and Programming I"},{"location":"week-12-c-cpp-gui/ce103-week-12-c-cpp-gui/#week-12-ccpp-gui-programming","text":"","title":"Week-12 (C/Cpp GUI Programming)"},{"location":"week-12-c-cpp-gui/ce103-week-12-c-cpp-gui/#fall-semester-2021-2022","text":"Download DOC , SLIDE , PPTX","title":"Fall Semester, 2021-2022"},{"location":"week-12-c-cpp-gui/ce103-week-12-c-cpp-gui/#ccpp-gui-programming","text":"The Microsoft Foundation Class MFC Tutorial Visual C++ / MFC Calculator 3 - YouTube MFC C++ : My videos source code download available now to members - YouTube The Windows GUI interface programming using Microsoft Foundation Classes (MFC) with Visual C++ and .Net hands-on approach tutorials Module 1: Using Visual C++ 6.0, .Net and Windows MFC Graphic User Interface (GUI) programming hands-on tutorial-Module1 GTK 4 https://www.msys2.org/ https://www.msys2.org/ Programming with gtkmm 4 Build and run GTK 4 applications with Visual Studio https://www.gtk.org/ The Meson Build system The GTK Project - A free and open-source cross-platform widget toolkit // Include gtk #include <gtk/gtk.h> static void on_activate ( GtkApplication * app ) { // Create a new window GtkWidget * window = gtk_application_window_new ( app ); // Create a new button GtkWidget * button = gtk_button_new_with_label ( \"Hello, World!\" ); // When the button is clicked, close the window passed as an argument g_signal_connect_swapped ( button , \"clicked\" , G_CALLBACK ( gtk_window_close ), window ); gtk_window_set_child ( GTK_WINDOW ( window ), button ); gtk_window_present ( GTK_WINDOW ( window )); } int main ( int argc , char * argv []) { // Create a new application GtkApplication * app = gtk_application_new ( \"com.example.GtkApplication\" , G_APPLICATION_FLAGS_NONE ); g_signal_connect ( app , \"activate\" , G_CALLBACK ( on_activate ), NULL ); return g_application_run ( G_APPLICATION ( app ), argc , argv ); } eBooks by Tags | RIP Tutorial","title":"C/Cpp GUI Programming"},{"location":"week-13-csharp-gui-I/ce103-week-13-csharp-gui-I/","text":"CE103 Algorithms and Programming I \u00b6 Week-13 (C# GUI Programming-I) \u00b6 Fall Semester, 2021-2022 \u00b6 Download DOC , SLIDE , PPTX C# GUI Programming-I \u00b6","title":"Week-13 (C# GUI Programming-I)"},{"location":"week-13-csharp-gui-I/ce103-week-13-csharp-gui-I/#ce103-algorithms-and-programming-i","text":"","title":"CE103 Algorithms and Programming I"},{"location":"week-13-csharp-gui-I/ce103-week-13-csharp-gui-I/#week-13-c-gui-programming-i","text":"","title":"Week-13 (C# GUI Programming-I)"},{"location":"week-13-csharp-gui-I/ce103-week-13-csharp-gui-I/#fall-semester-2021-2022","text":"Download DOC , SLIDE , PPTX","title":"Fall Semester, 2021-2022"},{"location":"week-13-csharp-gui-I/ce103-week-13-csharp-gui-I/#c-gui-programming-i","text":"","title":"C# GUI Programming-I"},{"location":"week-14-csharp-gui-II/ce103-week-14-csharp-gui-II/","text":"CE103 Algorithms and Programming I \u00b6 Week-14 (C# GUI Programming-II) \u00b6 Fall Semester, 2021-2022 \u00b6 Download DOC , SLIDE , PPTX C# GUI Programming-II \u00b6","title":"Week-14 (C# GUI Programming-II)"},{"location":"week-14-csharp-gui-II/ce103-week-14-csharp-gui-II/#ce103-algorithms-and-programming-i","text":"","title":"CE103 Algorithms and Programming I"},{"location":"week-14-csharp-gui-II/ce103-week-14-csharp-gui-II/#week-14-c-gui-programming-ii","text":"","title":"Week-14 (C# GUI Programming-II)"},{"location":"week-14-csharp-gui-II/ce103-week-14-csharp-gui-II/#fall-semester-2021-2022","text":"Download DOC , SLIDE , PPTX","title":"Fall Semester, 2021-2022"},{"location":"week-14-csharp-gui-II/ce103-week-14-csharp-gui-II/#c-gui-programming-ii","text":"","title":"C# GUI Programming-II"},{"location":"week-15-java-gui/ce103-week-15-java-gui/","text":"CE103 Algorithms and Programming I \u00b6 Week-15 (Java GUI Programming) \u00b6 Fall Semester, 2021-2022 \u00b6 Download DOC , SLIDE , PPTX Java GUI Programming \u00b6 JavaFX GUI Programming \u00b6 1-Install Gluon Scene Builder \u00b6 Download and Install Gluon Scene Builder from URL Scene Builder - Gluon We will use gluon scene builder as an external designer for NetBeans, Eclipse, and IntelliJ idea tools. you can save this design as an FXML file from File->Save As 2-Install Apache Netbeans \u00b6 Download and install apache Netbeans https://netbeans.apache.org/ 3- Configure JavaFX Scene Builder for Apache Netbeans \u00b6 Open Tools->Options->Java->JavaFX Select builder home you can find old integration documentation here Using JavaFX Scene Builder with Java IDEs: Using Scene Builder with NetBeans IDE | JavaFX 2 Tutorials and Documentation 4-Create First Application \u00b6 Select File->New Project Select Java With Maven Types FXML JavaFX Maven Archetype (Gluon) Set project properties Open Project Resources and Click FXML files to run Scene Builder In designer properties tab will show control properties, code tab will show action bindings Then you can run applications from Netbeans. for introduction level information please check the following examples JavaFX Simple Calculator - Design and Code - YouTube JavaFX Library Management System Development #0: Introduction - YouTube for more information about JavaFX please check the following JavaFX Tutorial - javatpoint Java Swing GUI Programming \u00b6 Select File->New Project -> Java with Maven -> Java Application Configure Project Open project and select package then select right-click -> New -> JFrame Form Give a name to your frame Swing GUI Builder is integrated with Netbeans Drag-and-drop controls to panel from the palette And from the events tab, add custom actions. you can configure control properties from the properties screen We can add simple events such as when the moclickscked to button write text on the text field \"Hello World\" When you run application, you will see the following screen References \u00b6 ... ..","title":"Week-15 (Java GUI Programming-II)"},{"location":"week-15-java-gui/ce103-week-15-java-gui/#ce103-algorithms-and-programming-i","text":"","title":"CE103 Algorithms and Programming I"},{"location":"week-15-java-gui/ce103-week-15-java-gui/#week-15-java-gui-programming","text":"","title":"Week-15 (Java GUI Programming)"},{"location":"week-15-java-gui/ce103-week-15-java-gui/#fall-semester-2021-2022","text":"Download DOC , SLIDE , PPTX","title":"Fall Semester, 2021-2022"},{"location":"week-15-java-gui/ce103-week-15-java-gui/#java-gui-programming","text":"","title":"Java GUI Programming"},{"location":"week-15-java-gui/ce103-week-15-java-gui/#javafx-gui-programming","text":"","title":"JavaFX GUI Programming"},{"location":"week-15-java-gui/ce103-week-15-java-gui/#1-install-gluon-scene-builder","text":"Download and Install Gluon Scene Builder from URL Scene Builder - Gluon We will use gluon scene builder as an external designer for NetBeans, Eclipse, and IntelliJ idea tools. you can save this design as an FXML file from File->Save As","title":"1-Install Gluon Scene Builder"},{"location":"week-15-java-gui/ce103-week-15-java-gui/#2-install-apache-netbeans","text":"Download and install apache Netbeans https://netbeans.apache.org/","title":"2-Install Apache Netbeans"},{"location":"week-15-java-gui/ce103-week-15-java-gui/#3-configure-javafx-scene-builder-for-apache-netbeans","text":"Open Tools->Options->Java->JavaFX Select builder home you can find old integration documentation here Using JavaFX Scene Builder with Java IDEs: Using Scene Builder with NetBeans IDE | JavaFX 2 Tutorials and Documentation","title":"3- Configure JavaFX Scene Builder for Apache Netbeans"},{"location":"week-15-java-gui/ce103-week-15-java-gui/#4-create-first-application","text":"Select File->New Project Select Java With Maven Types FXML JavaFX Maven Archetype (Gluon) Set project properties Open Project Resources and Click FXML files to run Scene Builder In designer properties tab will show control properties, code tab will show action bindings Then you can run applications from Netbeans. for introduction level information please check the following examples JavaFX Simple Calculator - Design and Code - YouTube JavaFX Library Management System Development #0: Introduction - YouTube for more information about JavaFX please check the following JavaFX Tutorial - javatpoint","title":"4-Create First Application"},{"location":"week-15-java-gui/ce103-week-15-java-gui/#java-swing-gui-programming","text":"Select File->New Project -> Java with Maven -> Java Application Configure Project Open project and select package then select right-click -> New -> JFrame Form Give a name to your frame Swing GUI Builder is integrated with Netbeans Drag-and-drop controls to panel from the palette And from the events tab, add custom actions. you can configure control properties from the properties screen We can add simple events such as when the moclickscked to button write text on the text field \"Hello World\" When you run application, you will see the following screen","title":"Java Swing GUI Programming"},{"location":"week-15-java-gui/ce103-week-15-java-gui/#references","text":"... ..","title":"References"},{"location":"week-16-final/ce103-week-16-final/","text":"CE103 Algorithms and Programming I \u00b6 Week-16 (Final) \u00b6 Fall Semester, 2021-2022 \u00b6 Download DOC , SLIDE , PPTX Final \u00b6","title":"Week-16 (Final)"},{"location":"week-16-final/ce103-week-16-final/#ce103-algorithms-and-programming-i","text":"","title":"CE103 Algorithms and Programming I"},{"location":"week-16-final/ce103-week-16-final/#week-16-final","text":"","title":"Week-16 (Final)"},{"location":"week-16-final/ce103-week-16-final/#fall-semester-2021-2022","text":"Download DOC , SLIDE , PPTX","title":"Fall Semester, 2021-2022"},{"location":"week-16-final/ce103-week-16-final/#final","text":"","title":"Final"},{"location":"week-2-setup/ce103-week-2-setup/","text":"CE103 Algorithms and Programming I \u00b6 Week-2 \u00b6 Fall Semester, 2021-2022 \u00b6 Download DOC , SLIDE , PPTX Algorithm Basics \u00b6 Flowgorithm \u00b6 http://www.flowgorithm.org/ Pseudocode \u00b6 Pseudocode - Wikipedia Pseudocode Examples How to write a Pseudo Code? - GeeksforGeeks Introduction to Analysis of Algorithms \u00b6 In this course we will learn how to code with several development environments and next term we will see analysis of algorithms in details. This topic is covered in the following link : CE100 Introduction to Analysis of Algorithms Programming Environment Setup and Configuration \u00b6 Programming life is not about only learning how to code. Mostly you need to use several code development environments and you need to learn how to use them efficiently. C / C++ Environment and Development \u00b6 DevCpp (Install / Compile / Run / Debug) (1) \u00b6 Download DevC++ IDE from following link https://www.bloodshed.net/ DevCpp (Install / Compile / Run / Debug) (2) \u00b6 Open DevC++ IDE for C Project Generation Open File->New->Project DevCpp (Install / Compile / Run / Debug) (3) \u00b6 Select Console Application from Basic tab and with C Project Option and write a project name such as \" Hello \" then press OK Select a folder and save Hello.dev project file. DevCpp (Install / Compile / Run / Debug) (4) \u00b6 You will see a sample main with empty body DevCpp (Install / Compile / Run / Debug) (5) \u00b6 #include <stdio.h> #include <stdlib.h> /* run this program using the console pauser or add your own getch, s,ystem(\"pause\") or input loop */ int main ( int argc , char * argv []) { retAdd 0 ; } DevCpp (Install / Compile / Run / Debug) (6) \u00b6 add the following line in main function. This will write \"Hello, World!\" on the screen and then wait a keypress to exit from application #include <stdio.h> #include <stdlib.h> /* run this program using the console pauser or add your own getch, system(\"pause\") or input loop */ int main ( int argc , char * argv []) { printf ( \"Hello, World!\" ); getchar (); return 0 ; } DevCpp (Install / Compile / Run / Debug) (7) \u00b6 Then save the file DevCpp (Install / Compile / Run / Debug) (8) \u00b6 Use from menu Execute->Compile F5 to generate Hello.exe DevCpp (Install / Compile / Run / Debug) (9) \u00b6 You can find the generated Hello.exe path from Compile.log as follow. Check the Output Filename Compiling project changes... -------- - Project Filename: E:\\UgurCoruh\\RTEU\\Lectures\\2021-2022 G\u00fcz CE103 - Algorithms and Programming I\\Lectures\\ce103-algorithms-and-programming-I\\Week-2\\devcpp-hello-world-apps\\Hello.dev - Compiler Name: TDM-GCC 4.9.2 64-bit Release Building makefile... -------- - Filename: E:\\UgurCoruh\\RTEU\\Lectures\\2021-2022 G\u00fcz CE103 - Algorithms and Programming I\\Lectures\\ce103-algorithms-and-programming-I\\Week-2\\devcpp-hello-world-apps\\Makefile.win Processing makefile... -------- - Makefile Processor: C:\\Program Files (x86)\\Dev-Cpp\\MinGW64\\bin\\mingw32-make.exe - Command: mingw32-make.exe -f \"E:\\UgurCoruh\\RTEU\\Lectures\\2021-2022 G\u00fcz CE103 - Algorithms and Programming I\\Lectures\\ce103-algorithms-and-programming-I\\Week-2\\devcpp-hello-world-apps\\Makefile.win\" all gcc.exe -c main.c -o main.o -I \"C:/Program Files (x86)/Dev-Cpp/MinGW64/include\" -I \"C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include\" -I \"C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include\" gcc.exe main.o -o Hello.exe -L \"C:/Program Files (x86)/Dev-Cpp/MinGW64/lib\" -L \"C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/lib\" -static-libgcc Compilation results... -------- - Errors: 0 - Warnings: 0 - Output Filename: E:\\UgurCoruh\\RTEU\\Lectures\\2021-2022 G\u00fcz CE103 - Algorithms and Programming I\\Lectures\\ce103-algorithms-and-programming-I\\Week-2\\devcpp-hello-world-apps\\Hello.exe - Output Size: 128,103515625 KiB - Compilation Time: 2,13s DevCpp (Install / Compile / Run / Debug) (10) \u00b6 Then you can run with Execute->Run F10 or Directly Compile&Run F11 DevCpp (Install / Compile / Run / Debug) (11) \u00b6 for debugging operations, just change the code and add more statements as follow #include <stdio.h> #include <stdlib.h> /* run this program using the console pauser or add your getch, system(\",pause\") or input loop */ int main ( int argc , char * argv []) { printf ( \"Hello, World! Step-1 \\n \" ); printf ( \"Hello, World! Step-2 \\n \" ); printf ( \"Hello, World! Step-3 \\n \" ); printf ( \"Hello, World! Step-4 \\n \" ); printf ( \"Hello, World! Step-5 \\n \" ); printf ( \"Hello, World! Step-6 \\n \" ); getchar (); return 0 ; } DevCpp (Install / Compile / Run / Debug) (12) \u00b6 Click on line numbers and add breakpoints for debugger. This red point will be debugger stop points DevCpp (Install / Compile / Run / Debug) (13) \u00b6 In the ,menu section select compiler with debug option DevCpp (Install / Compile / Run / Debug) (14) \u00b6 Compile application with debug setting and in Execute Section use Debug F5 to start debugging DevCpp (Install / Compile / Run / Debug) (15) \u00b6 Debugger will stop at breakpoint at the debug point (blue line) DevCpp (Install / Compile / Run / Debug) (16) \u00b6 Moving to next statement can be done via control buttons or shortcuts DevCpp (Install / Compile / Run / Debug) (17) \u00b6 Press F8 to step-by-step continue Then go to Project Options - Compiler - Linker and set Generate debugging information to \"yes\", and make sure you are not using any optimization options (they're not good for debug mode). Also check the Parameters tab, make sure you don't have any optimization options (like -O2 or -O3, but -O0 is ok because it means no optimization) or strip option (-s). DevCpp (Install / Compile / Run / Debug) (18) \u00b6 After that, do a full rebuild (Ctrl-F11), then set breakpoint(s) where you want the debugger to stop (otherwise it will just run the program). To set a breakpoint on a line, just click on the gutter (the gray band on the left), or press Ctrl-F5. DevCpp (Install / Compile / Run / Debug) (19) \u00b6 Now you are ready to launch the debugger, by pressing F8 or clicking the debug button. If everything goes well, the program will start, and then stop at the first breakpoint. Then you can step through the code, entering function calls, by pressing Shift-F7 or the \"step into\" button, or stepping over the function calls, by pressing F7 or the \"next step\" button. You can press Ctrl-F7 or the \"continue\" button to continue execution till the next breakpoint. At any time, you can add or remove breakpoints. DevCpp (Install / Compile / Run / Debug) (20) \u00b6 When the program stopped at a breakpoint and you are stepping through the code, you can display the values of various variables in your program by putting your mouse over them, or you can display variables and expressions by pressing F4 or the \"add watch\" button and typing the expression. DevCpp (Install / Compile / Run / Debug) (21) \u00b6 How do I debug using Dev-C++ Code Blocks (Install / Compile / Run / Debug) (1) \u00b6 Download Code Blocks from the following link Binary releases - Code::Blocks Code Blocks (Install / Compile / Run / Debug) (2) \u00b6 Open Code Blocks and Select File->New->Project Code Blocks (Install / Compile / Run / Debug) (3) \u00b6 Select Console Application Click Next from Opening Window Code Blocks (Install / Compile / Run / Debug) (4) \u00b6 Select C for Sample Project Code Blocks (Install / Compile / Run / Debug) (5) \u00b6 Write a project name and title also set a project folder Code Blocks (Install / Compile / Run / Debug) (6) \u00b6 Select complier for this project we selected GCC but you can select C compliers from list. Set Debug and Release executable output folders. Code Blocks (Install / Compile / Run / Debug) (7) \u00b6 After this wizard you will have the following code #include <stdio.h> #include <stdlib.h> int main () { printf ( \"Hello world! \\n \" ); return 0 ; } Code Blocks (Install / Compile / Run / Debug) (8) \u00b6 Select Debug Build from menu Code Blocks (Install / Compile / Run / Debug) (9) \u00b6 Run with Build and Run F9 Code Blocks (Install / Compile / Run / Debug) (10) \u00b6 You should see the following output Code Blocks (Install / Compile / Run / Debug) (11) \u00b6 Add the following lines to your source code for debugging #include <stdio.h> #include <stdlib.h> int main () { printf ( \"Hello world! Step-1 \\n \" ); printf ( \"Hello world! Step-2 \\n \" ); printf ( \"Hello world! Step-3 \\n \" ); printf ( \"Hello world! Step-4 \\n \" ); printf ( \"Hello world! Step-5 \\n \" ); printf ( \"Hello world! Step-6 \\n \" ); return 0 ; } Code Blocks (Install / Compile / Run / Debug) (12) \u00b6 and add break points with F5 or mouse click Code Blocks (Install / Compile / Run / Debug) (13) \u00b6 select Debug->Start/Continue to start debugger Code Blocks (Install / Compile / Run / Debug) (14) \u00b6 If you see the following error this is related with long or turkish character including path. Just move project to a shorter path and try again Setting breakpoints Debugger name and version: GNU gdb (GDB) 8.1 Starting the debuggee failed: No executable specified, use `target exec'. Debugger finished with status 0 Code Blocks (Install / Compile / Run / Debug) (15) \u00b6 You will see the following yellow pointer for debugger Code Blocks (Install / Compile / Run / Debug) (16) \u00b6 You can use the following menu or shortcuts for step-by-step debugging. GCC/G++ Complier (MinGW) / Clang-cl (LLVM) (1) \u00b6 Download and install MinGW or LLVM compiler (if you downloded then skip this step) MinGW installer (clang) Download MinGW-w64 - for 32 and 64 bit Windows from SourceForge.net LLVM installer (gcc / g++) Download LLVM releases Also use the following notes https://llvm.org/devmtg/2014-04/PDFs/Talks/clang-cl.pdf GCC/G++ Complier (MinGW) / Clang-cl (LLVM) (2) \u00b6 Open a console with \"cmd\" and test the following commands if commands are not recognized then set the system environment variable add gcc and g++ exe paths to path variable (add to both system and user path variable) gcc --version g++ --version C : \\Users\\ugur.coruh >gcc --version gcc (x86_64-win32-seh-rev0, Built by MinGW-W64 project) 8.1.0 Copyright (C) 2018 Free Software Foundation, Inc. This is free software; see the source for copying conditions. There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. clang --version GCC/G++ Complier (MinGW) / Clang-cl (LLVM) (3) \u00b6 for gcc.exe, g++.exe and gdb.exe C: \\P rogram Files \\m ingw-w64 \\x 86_64-8.1.0-win32-seh-rt_v6-rev0 \\m ingw64 \\b in for clang.exe , lldb.exe C : \\Program Files\\LLVM\\bin This folder paths changes according to your setup VSCode (Install / Compile / Run / Debug) (1) \u00b6 Download Visual Studio Code from the following link Download Visual Studio Code - Mac, Linux, Windows VSCode (Install / Compile / Run / Debug) (2) \u00b6 In this sample you will find MinGW and LLVM compiler combinations for C and C++ Create a folder and enter this folder then open this folder with vscode by right click VSCode (Install / Compile / Run / Debug) (3) \u00b6 or enter the folder via console write code . VSCode (Install / Compile / Run / Debug) (4) \u00b6 This will open vscode for current folder . dot present current folder. You will see a empty folder in the right window VSCode (Install / Compile / Run / Debug) (5) \u00b6 VSCode (Install / Compile / Run / Debug) (6) \u00b6 Create a hello.c file and write following content #include <stdio.h> int main () { // printf() displays the string inside quotation printf ( \"Hello, World!\" ); return 0 ; } VSCode (Install / Compile / Run / Debug) (7) \u00b6 use CTRL+SHIFT+B (you should be on source code section) to build file VSCode (Install / Compile / Run / Debug) (8) \u00b6 Select GCC or CLANG for this sample we can use GCC You will see output generated Hello.exe VSCode (Install / Compile / Run / Debug) (9) \u00b6 for debugging just put breakpoint and build again VSCode (Install / Compile / Run / Debug) (10) \u00b6 after build for debug press CTRL+SHIFT+D (you should be on source code section)and in the right window select create launch.json VSCode (Install / Compile / Run / Debug) (11) \u00b6 from opening window select C++ GDB/LLDB VSCode (Install / Compile / Run / Debug) (12) \u00b6 from next opening menu select mingw-w64 gcc.exe VSCode (Install / Compile / Run / Debug) (13) \u00b6 this will run debugger and you will see debug points activated VSCode (Install / Compile / Run / Debug) (14) \u00b6 then you can step-by-step debug your code. the following task.json and launch.json automatically generated with your selections VSCode (Install / Compile / Run / Debug) (15) \u00b6 launch.json { // Olas\u0131 \u00f6z n i tel ikler hakk\u0131 n da bilgi edi n mek i\u00e7i n I ntell iSe nse kulla n \u0131 n . // Mevcu t \u00f6z n i tel ikleri n a\u00e7\u0131klamalar\u0131 n \u0131 g\u00f6r\u00fc nt \u00fclemek i\u00e7i n \u00fczeri ne geli n . // Daha fa zla bilgi i\u00e7i n \u015fu adresi ziyare t edi n : h tt ps : //go.microso ft .com/ f wli n k/?li n kid= 830387 \"version\" : \"0.2.0\" , \"configurations\" : [ { \"name\" : \"gcc.exe - Etkin dosyay\u0131 derle ve dosyada hata ay\u0131kla\" , \"type\" : \"cppdbg\" , \"request\" : \"launch\" , \"program\" : \"${fileDirname}\\\\${fileBasenameNoExtension}.exe\" , \"args\" : [], \"stopAtEntry\" : false , \"cwd\" : \"${fileDirname}\" , \"environment\" : [], \"externalConsole\" : false , \"MIMode\" : \"gdb\" , \"miDebuggerPath\" : \"C:\\\\Program Files\\\\mingw-w64\\\\x86_64-8.1.0-win32-seh-rt_v6-rev0\\\\mingw64\\\\bin\\\\gdb.exe\" , \"setupCommands\" : [ { \"description\" : \"gdb i\u00e7in d\u00fczg\u00fcn yazd\u0131rmay\u0131 etkinle\u015ftir\" , \"text\" : \"-enable-pretty-printing\" , \"ignoreFailures\" : true } ], \"preLaunchTask\" : \"C/C++: gcc.exe etkin dosyay\u0131 derle\" } ] } VSCode (Install / Compile / Run / Debug) (16) \u00b6 task.json { \"tasks\" : [ { \"type\" : \"cppbuild\" , \"label\" : \"C/C++: gcc.exe etkin dosyay\u0131 derle\" , \"command\" : \"C:\\\\Program Files\\\\mingw-w64\\\\x86_64-8.1.0-win32-seh-rt_v6-rev0\\\\mingw64\\\\bin\\\\gcc.exe\" , \"args\" : [ \"-fdiagnostics-color=always\" , \"-g\" , \"${file}\" , \"-o\" , \"${fileDirname}\\\\${fileBasenameNoExtension}.exe\" ], \"options\" : { \"cwd\" : \"${fileDirname}\" }, \"problemMatcher\" : [ \"$gcc\" ], \"group\" : { \"kind\" : \"build\" , \"isDefault\" : true }, \"detail\" : \"Hata Ay\u0131klay\u0131c\u0131s\u0131 taraf\u0131ndan olu\u015fturulan g\u00f6rev.\" } ], \"version\" : \"2.0.0\" } VSCode (Install / Compile / Run / Debug) (17) \u00b6 you can do the same thing for other compilers and c++ source codes. LLVM do not support debug on vscode now. for C++ VsCode you can check the following links for Windows https://code.visualstudio.com/docs/cpp/config-mingw for Linux https://code.visualstudio.com/docs/cpp/config-linux for WSL https://code.visualstudio.com/docs/cpp/config-wsl VSCode (Install / Compile / Run / Debug) (18) \u00b6 in the launch file if you start debugging with F5 (you can select debugger with CTRL+SHIFT+P and then writing Debug and Selecting Configure Debugger Option) VSCode (Install / Compile / Run / Debug) (19) \u00b6 following line will be your debugging application path if you start debugging with F5 in Hello.c file this will set <Hello.c base path>/Hello.exe VSCode (Install / Compile / Run / Debug) (20) \u00b6 You should set this correct for both LLVM and GCC configuration in launch.json \"program\": \"${fileDirname}\\\\${fileBasenameNoExtension}.exe\", Also you should set your installed debugger paths for GCC \"miDebuggerPath\": \"C:\\\\Program Files\\\\mingw-w64\\\\x86_64-8.1.0-win32-seh-rt_v6-rev0\\\\mingw64\\\\bin\\\\gdb.exe\", for LLVM \"miDebuggerPath\": \"C:\\\\Program Files\\\\LLVM\\\\bin\\\\lldb.exe\", for more details please check the sample source codes. Visual Studio Community Edition (Install / Compile / Run / Debug) \u00b6 //TODO// Notepad++ (Install / Compile ) (1) \u00b6 Please download Notepad++ from the following link Downloads | Notepad++ Notepad++ (Install / Compile ) (2) \u00b6 Download and install MinGW or LLVM compiler (if you downloded then skip this step) MinGW installer (clang) Download MinGW-w64 - for 32 and 64 bit Windows from SourceForge.net LLVM installer (gcc / g++) Download LLVM releases Also use the following notes https://llvm.org/devmtg/2014-04/PDFs/Talks/clang-cl.pdf Notepad++ (Install / Compile ) (3) \u00b6 Open a console with \"cmd\" and test the following commands if commands are not recognized then set the system environment variable add gcc and g++ exe paths to path variable (add to both system and user path variable) gcc --version g++ --version C : \\Users\\ugur.coruh >gcc --version gcc (x86_64-win32-seh-rev0, Built by MinGW-W64 project) 8.1.0 Copyright (C) 2018 Free Software Foundation, Inc. This is free software; see the source for copying conditions. There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. Notepad++ (Install / Compile ) (4) \u00b6 Notepad++ (Install / Compile ) (5) \u00b6 Notepad++ (Install / Compile ) (6) \u00b6 Notepad++ (Install / Compile ) (7) \u00b6 Notepad++ (Install / Compile ) (8) \u00b6 Notepad++ (Install / Compile ) (9) \u00b6 Notepad++ (Install / Compile ) (10) \u00b6 for gcc.exe, g++.exe and gdb.exe C: \\P rogram Files \\m ingw-w64 \\x 86_64-8.1.0-win32-seh-rt_v6-rev0 \\m ingw64 \\b in Notepad++ (Install / Compile ) (11) \u00b6 for clang.exe , lldb.exe C : \\Program Files\\LLVM\\bin Notepad++ (Install / Compile ) (12) \u00b6 This folder paths changes according to your setup Open NppExec extension (install from extension manager if not exist) Notepad++ (Install / Compile ) (13) \u00b6 write the following commands in box NPP_SAVE // save current file cd $(CURRENT_DIRECTORY) // go to directory of the current file gcc -Wall -Wextra -Wpedantic -std=c++11 -o \"$(NAME_PART)\" \"$(FILE_NAME)\" Notepad++ (Install / Compile ) (14) \u00b6 save script as gcc-build and for more information check the following link How To Setup Notepad for Writing C++ Programs You can modify or add multiple scripts for another tasks. Vi/Vim (C/C++) \u00b6 //TODO// Eclipse (C/C++) \u00b6 //TODO// Netbeans (C/C++) \u00b6 //TODO// Turbo C++/C \u00b6 //TODO// Cmake (C++/C) (1) \u00b6 CMake ( http://www.cmake.org/ ) is a program which generates the Makefiles used by Make . Cmake (C++/C) (2) \u00b6 Why use CMake ? Eases Make use but the same way of thinking generate the Makefile Separate the compilation from the sources Multi-platfoms Very flexible Cmake (C++/C) (3) \u00b6 Check if the libraries/programs are available on your system File generator ( configure_file ) Calling programs or scripts ( doxygen ) One of the new standards Cmake (C++/C) (4) (Download and Install) \u00b6 use the following link for download Download | CMake Cmake (C++/C) (5) (WSL and Linux Environment) \u00b6 Hello world with CMake Cmake (C++/C) (6) (Windows Environment) \u00b6 main.c #include <stdio.h> int main () { char name [ 20 ]; printf ( \"Enter name: \" ); scanf ( \"%s\" , name ); printf ( \"Your name is %s.\" , name ); return 0 ; } CMakeLists.txt cmake_minimum_required ( VERSION 3.7.2 ) project ( scanf-sample ) add_executable ( scanf-sample main.c ) Cmake (C++/C) (7) (Windows Environment) \u00b6 put main.c and CMakeLists.txt file in sample-scanf folder and from command line run the following cmake command with dot (.) to create solution file for c project C : \\Users\\ugur.coruh\\Desktop\\sample-scanf >cmake . Cmake (C++/C) (8) (Windows Environment) \u00b6 I have Visual Studio 2022 Community Edition Installed on My Computer, for these reason build tools are selected for visual studio environment and the following outputs are generated C : \\Users\\ugur.coruh\\Desktop\\sample-scanf >cmake . -- Building for: Visual Studio 17 2022 -- Selecting Windows SDK version 10.0.22000.0 to target Windows 10.0.19043. -- The C compiler identification is MSVC 19.30.30704.0 -- The CXX compiler identification is MSVC 19.30.30704.0 -- Detecting C compiler ABI info -- Detecting C compiler ABI info - done -- Check for working C compiler: C:/Program Files/Microsoft Visual Studio/2022/Community/VC/Tools/MSVC/14.30.30704/bin/Hostx64/x64/cl.exe - skipped -- Detecting C compile features -- Detecting C compile features - done -- Detecting CXX compiler ABI info -- Detecting CXX compiler ABI info - done -- Check for working CXX compiler: C:/Program Files/Microsoft Visual Studio/2022/Community/VC/Tools/MSVC/14.30.30704/bin/Hostx64/x64/cl.exe - skipped -- Detecting CXX compile features -- Detecting CXX compile features - done -- Configuring done -- Generating done -- Build files have been written to: C:/Users/ugur.coruh/Desktop/sample-scanf C : \\Users\\ugur.coruh\\Desktop\\sample-scanf > Cmake (C++/C) (9) (Windows Environment) \u00b6 also following files are generated Cmake (C++/C) (10) (Windows Environment) \u00b6 if we open scanf-sample.sln file we will have automated generated project files Cmake (C++/C) (11) (Windows Environment) \u00b6 you can make scanf-sample with startup project with right click and then run on visual studio. if you want to configure for another build tool you can use Cmake-GUI installed with setup on your computer Cmake (C++/C) (12) (Windows Environment) \u00b6 Open GUI and Select File-> Delete Cache Cmake (C++/C) (13) (Windows Environment) \u00b6 then you can click \"Configure\" to select build tool Cmake (C++/C) (14) (Windows Environment) \u00b6 Cmake (C++/C) (15) (Windows Environment) \u00b6 if you click \"Configure\" twice it will generate the visual studio solution in build folder for more detailed examples that include also docker and travis-ci sample you can check the following repo GitHub - ttroy50/cmake-examples: Useful CMake Examples Make (1) \u00b6 Sample hello.c #include <stdio.h> int main ( void ) { printf ( \"hello, world \\n \" ); } Make (2) \u00b6 Makefile # This is the default target, which will be built when # you invoke make .PHONY : all all : hello # This rule tells make how to build hello from hello.cpp hello : hello . c g++ -o hello hello.c # This rule tells make to copy hello to the binaries subdirectory, # creating it if necessary .PHONY : install install : mkdir -p binaries cp -p hello binaries # This rule tells make to delete hello and hello.o .PHONY : clean clean : rm -f hello Make (3) \u00b6 compile.bat make all . will create hello.exe check hello-make sample JAVA Environment and Development \u00b6 //TODO// JDK and JRE Setup \u00b6 //TODO// System Environments and Paths for Java \u00b6 //TODO// Netbeans (Java) \u00b6 //TODO// Eclipse (Java) \u00b6 //TODO// Intellij Idea (Jet Brains) (Java) \u00b6 //TODO// VSCode (Java) \u00b6 //TODO// Notepad++ (Java) \u00b6 //TODO// Cmake (Java) \u00b6 ASTERICS_HPC C# Environment and Development \u00b6 Visual Studio Community Edition (C#) \u00b6 //TODO// Notepad++ (C#) \u00b6 //TODO// Cmake (C#) \u00b6 Outline Common Tools and Platforms \u00b6 Fatih Kalem \u00b6 https://cdnvideo.eba.gov.tr/fatihkalem/fatihkalem_portable.zip https://cdnvideo.eba.gov.tr/fatihkalem/fatihkalem_setup.exe Notepad++ (Notepad for Source Code) \u00b6 Downloads | Notepad++ HxD (Hex Editor) \u00b6 HxD - Freeware Hex Editor and Disk Editor | mh-nexus Marktext (Markdown Syntax Editor) \u00b6 https://marktext.app/ Cygwin (Linux environment for Windows) \u00b6 https://www.cygwin.com/ Dependency Walker (32-bit or 64-bit Windows module dependency checker) \u00b6 https://www.dependencywalker.com/ Doxygen (Code Documentation) \u00b6 Doxygen: Doxygen Sonarlint (Code Quality and Code Security Extension) \u00b6 https://www.sonarlint.org/ Codepen.io (online code sharing) \u00b6 https://codepen.io/ Credit Card Sample https://codepen.io/quinlo/pen/YONMEa Codeshare.io (real time code sharing) \u00b6 https://codeshare.io/ Codebeautify.org (online data conversion tools) \u00b6 https://codebeautify.org/ AsciiFlow.com (ASCII drawing tool) \u00b6 //TODO// Freemind (opensource mindmap application) \u00b6 //TODO// Wireflow (user flow designer) \u00b6 //TODO// PlantUML (software designer) \u00b6 //TODO// Drawio (drawing tool) \u00b6 //TODO// Putty (Remote Connection) \u00b6 //TODO// MobaXterm (Remote Connection) \u00b6 //TODO// Teamviewer (Remote Connection) \u00b6 //TODO// Paletton.com (Color Chooser) \u00b6 //TODO// \u00b6 Understand (Static Code Analysis) \u00b6 //TODO// JD Project (Java Decompiler) \u00b6 //TODO// Cutter (Multi-Platform Reverse Engineering Tool) \u00b6 //TODO// IDA Pro / Freeware (Native Reverse Engineering Tool) \u00b6 //TODO// Code Visualization (Python, C , C++ , Java) \u00b6 https://pythontutor.com/ //TODO// Assembly of C Code \u00b6 https://godbolt.org/ //TODO// Mobile Device Screen Sharing for Demo \u00b6 GitHub - Genymobile/scrcpy: Display and control your Android device Travis-CI \u00b6 Travis.yml //TODO// Jenkins \u00b6 //TODO// Valgrind \u00b6 //TODO// Docker \u00b6 - https://www.youtube.com/watch?v=nBwJm0onzeo&ab_channel=GaryExplains Dockerfile DockerHub Docker Compose Yaml Dockerrun.aws.json (AWS) //TODO// Nuget Packages \u00b6 //TODO// Vim for Windows \u00b6 vim/vim-wim32-installer (windows vim installer) //TODO// SCV Cryptomanager \u00b6 //TODO// Addario CryptoBench \u00b6 //TODO// Raymond's MD5 & SHA Checksum Utility \u00b6 //TODO// SlavaSoft HashCalc \u00b6 //TODO// Portable PGP \u00b6 //TODO// Online Programming Envoriments \u00b6 i. Hackerrank ii. CS50 Sandbox iii. Programiz C Online Complier //TODO//","title":"Week-2 (Development Environments)"},{"location":"week-2-setup/ce103-week-2-setup/#ce103-algorithms-and-programming-i","text":"","title":"CE103 Algorithms and Programming I"},{"location":"week-2-setup/ce103-week-2-setup/#week-2","text":"","title":"Week-2"},{"location":"week-2-setup/ce103-week-2-setup/#fall-semester-2021-2022","text":"Download DOC , SLIDE , PPTX","title":"Fall Semester, 2021-2022"},{"location":"week-2-setup/ce103-week-2-setup/#algorithm-basics","text":"","title":"Algorithm Basics"},{"location":"week-2-setup/ce103-week-2-setup/#flowgorithm","text":"http://www.flowgorithm.org/","title":"Flowgorithm"},{"location":"week-2-setup/ce103-week-2-setup/#pseudocode","text":"Pseudocode - Wikipedia Pseudocode Examples How to write a Pseudo Code? - GeeksforGeeks","title":"Pseudocode"},{"location":"week-2-setup/ce103-week-2-setup/#introduction-to-analysis-of-algorithms","text":"In this course we will learn how to code with several development environments and next term we will see analysis of algorithms in details. This topic is covered in the following link : CE100 Introduction to Analysis of Algorithms","title":"Introduction to Analysis of Algorithms"},{"location":"week-2-setup/ce103-week-2-setup/#programming-environment-setup-and-configuration","text":"Programming life is not about only learning how to code. Mostly you need to use several code development environments and you need to learn how to use them efficiently.","title":"Programming Environment Setup and Configuration"},{"location":"week-2-setup/ce103-week-2-setup/#c-c-environment-and-development","text":"","title":"C / C++ Environment and Development"},{"location":"week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-1","text":"Download DevC++ IDE from following link https://www.bloodshed.net/","title":"DevCpp (Install / Compile / Run / Debug) (1)"},{"location":"week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-2","text":"Open DevC++ IDE for C Project Generation Open File->New->Project","title":"DevCpp (Install / Compile / Run / Debug) (2)"},{"location":"week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-3","text":"Select Console Application from Basic tab and with C Project Option and write a project name such as \" Hello \" then press OK Select a folder and save Hello.dev project file.","title":"DevCpp (Install / Compile / Run / Debug) (3)"},{"location":"week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-4","text":"You will see a sample main with empty body","title":"DevCpp (Install / Compile / Run / Debug) (4)"},{"location":"week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-5","text":"#include <stdio.h> #include <stdlib.h> /* run this program using the console pauser or add your own getch, s,ystem(\"pause\") or input loop */ int main ( int argc , char * argv []) { retAdd 0 ; }","title":"DevCpp (Install / Compile / Run / Debug) (5)"},{"location":"week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-6","text":"add the following line in main function. This will write \"Hello, World!\" on the screen and then wait a keypress to exit from application #include <stdio.h> #include <stdlib.h> /* run this program using the console pauser or add your own getch, system(\"pause\") or input loop */ int main ( int argc , char * argv []) { printf ( \"Hello, World!\" ); getchar (); return 0 ; }","title":"DevCpp (Install / Compile / Run / Debug) (6)"},{"location":"week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-7","text":"Then save the file","title":"DevCpp (Install / Compile / Run / Debug) (7)"},{"location":"week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-8","text":"Use from menu Execute->Compile F5 to generate Hello.exe","title":"DevCpp (Install / Compile / Run / Debug) (8)"},{"location":"week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-9","text":"You can find the generated Hello.exe path from Compile.log as follow. Check the Output Filename Compiling project changes... -------- - Project Filename: E:\\UgurCoruh\\RTEU\\Lectures\\2021-2022 G\u00fcz CE103 - Algorithms and Programming I\\Lectures\\ce103-algorithms-and-programming-I\\Week-2\\devcpp-hello-world-apps\\Hello.dev - Compiler Name: TDM-GCC 4.9.2 64-bit Release Building makefile... -------- - Filename: E:\\UgurCoruh\\RTEU\\Lectures\\2021-2022 G\u00fcz CE103 - Algorithms and Programming I\\Lectures\\ce103-algorithms-and-programming-I\\Week-2\\devcpp-hello-world-apps\\Makefile.win Processing makefile... -------- - Makefile Processor: C:\\Program Files (x86)\\Dev-Cpp\\MinGW64\\bin\\mingw32-make.exe - Command: mingw32-make.exe -f \"E:\\UgurCoruh\\RTEU\\Lectures\\2021-2022 G\u00fcz CE103 - Algorithms and Programming I\\Lectures\\ce103-algorithms-and-programming-I\\Week-2\\devcpp-hello-world-apps\\Makefile.win\" all gcc.exe -c main.c -o main.o -I \"C:/Program Files (x86)/Dev-Cpp/MinGW64/include\" -I \"C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include\" -I \"C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include\" gcc.exe main.o -o Hello.exe -L \"C:/Program Files (x86)/Dev-Cpp/MinGW64/lib\" -L \"C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/lib\" -static-libgcc Compilation results... -------- - Errors: 0 - Warnings: 0 - Output Filename: E:\\UgurCoruh\\RTEU\\Lectures\\2021-2022 G\u00fcz CE103 - Algorithms and Programming I\\Lectures\\ce103-algorithms-and-programming-I\\Week-2\\devcpp-hello-world-apps\\Hello.exe - Output Size: 128,103515625 KiB - Compilation Time: 2,13s","title":"DevCpp (Install / Compile / Run / Debug) (9)"},{"location":"week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-10","text":"Then you can run with Execute->Run F10 or Directly Compile&Run F11","title":"DevCpp (Install / Compile / Run / Debug) (10)"},{"location":"week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-11","text":"for debugging operations, just change the code and add more statements as follow #include <stdio.h> #include <stdlib.h> /* run this program using the console pauser or add your getch, system(\",pause\") or input loop */ int main ( int argc , char * argv []) { printf ( \"Hello, World! Step-1 \\n \" ); printf ( \"Hello, World! Step-2 \\n \" ); printf ( \"Hello, World! Step-3 \\n \" ); printf ( \"Hello, World! Step-4 \\n \" ); printf ( \"Hello, World! Step-5 \\n \" ); printf ( \"Hello, World! Step-6 \\n \" ); getchar (); return 0 ; }","title":"DevCpp (Install / Compile / Run / Debug) (11)"},{"location":"week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-12","text":"Click on line numbers and add breakpoints for debugger. This red point will be debugger stop points","title":"DevCpp (Install / Compile / Run / Debug) (12)"},{"location":"week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-13","text":"In the ,menu section select compiler with debug option","title":"DevCpp (Install / Compile / Run / Debug) (13)"},{"location":"week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-14","text":"Compile application with debug setting and in Execute Section use Debug F5 to start debugging","title":"DevCpp (Install / Compile / Run / Debug) (14)"},{"location":"week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-15","text":"Debugger will stop at breakpoint at the debug point (blue line)","title":"DevCpp (Install / Compile / Run / Debug) (15)"},{"location":"week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-16","text":"Moving to next statement can be done via control buttons or shortcuts","title":"DevCpp (Install / Compile / Run / Debug) (16)"},{"location":"week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-17","text":"Press F8 to step-by-step continue Then go to Project Options - Compiler - Linker and set Generate debugging information to \"yes\", and make sure you are not using any optimization options (they're not good for debug mode). Also check the Parameters tab, make sure you don't have any optimization options (like -O2 or -O3, but -O0 is ok because it means no optimization) or strip option (-s).","title":"DevCpp (Install / Compile / Run / Debug) (17)"},{"location":"week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-18","text":"After that, do a full rebuild (Ctrl-F11), then set breakpoint(s) where you want the debugger to stop (otherwise it will just run the program). To set a breakpoint on a line, just click on the gutter (the gray band on the left), or press Ctrl-F5.","title":"DevCpp (Install / Compile / Run / Debug) (18)"},{"location":"week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-19","text":"Now you are ready to launch the debugger, by pressing F8 or clicking the debug button. If everything goes well, the program will start, and then stop at the first breakpoint. Then you can step through the code, entering function calls, by pressing Shift-F7 or the \"step into\" button, or stepping over the function calls, by pressing F7 or the \"next step\" button. You can press Ctrl-F7 or the \"continue\" button to continue execution till the next breakpoint. At any time, you can add or remove breakpoints.","title":"DevCpp (Install / Compile / Run / Debug) (19)"},{"location":"week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-20","text":"When the program stopped at a breakpoint and you are stepping through the code, you can display the values of various variables in your program by putting your mouse over them, or you can display variables and expressions by pressing F4 or the \"add watch\" button and typing the expression.","title":"DevCpp (Install / Compile / Run / Debug) (20)"},{"location":"week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-21","text":"How do I debug using Dev-C++","title":"DevCpp (Install / Compile / Run / Debug) (21)"},{"location":"week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-1","text":"Download Code Blocks from the following link Binary releases - Code::Blocks","title":"Code Blocks (Install / Compile / Run / Debug) (1)"},{"location":"week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-2","text":"Open Code Blocks and Select File->New->Project","title":"Code Blocks (Install / Compile / Run / Debug) (2)"},{"location":"week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-3","text":"Select Console Application Click Next from Opening Window","title":"Code Blocks (Install / Compile / Run / Debug) (3)"},{"location":"week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-4","text":"Select C for Sample Project","title":"Code Blocks (Install / Compile / Run / Debug) (4)"},{"location":"week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-5","text":"Write a project name and title also set a project folder","title":"Code Blocks (Install / Compile / Run / Debug) (5)"},{"location":"week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-6","text":"Select complier for this project we selected GCC but you can select C compliers from list. Set Debug and Release executable output folders.","title":"Code Blocks (Install / Compile / Run / Debug) (6)"},{"location":"week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-7","text":"After this wizard you will have the following code #include <stdio.h> #include <stdlib.h> int main () { printf ( \"Hello world! \\n \" ); return 0 ; }","title":"Code Blocks (Install / Compile / Run / Debug) (7)"},{"location":"week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-8","text":"Select Debug Build from menu","title":"Code Blocks (Install / Compile / Run / Debug) (8)"},{"location":"week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-9","text":"Run with Build and Run F9","title":"Code Blocks (Install / Compile / Run / Debug) (9)"},{"location":"week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-10","text":"You should see the following output","title":"Code Blocks (Install / Compile / Run / Debug) (10)"},{"location":"week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-11","text":"Add the following lines to your source code for debugging #include <stdio.h> #include <stdlib.h> int main () { printf ( \"Hello world! Step-1 \\n \" ); printf ( \"Hello world! Step-2 \\n \" ); printf ( \"Hello world! Step-3 \\n \" ); printf ( \"Hello world! Step-4 \\n \" ); printf ( \"Hello world! Step-5 \\n \" ); printf ( \"Hello world! Step-6 \\n \" ); return 0 ; }","title":"Code Blocks (Install / Compile / Run / Debug) (11)"},{"location":"week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-12","text":"and add break points with F5 or mouse click","title":"Code Blocks (Install / Compile / Run / Debug) (12)"},{"location":"week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-13","text":"select Debug->Start/Continue to start debugger","title":"Code Blocks (Install / Compile / Run / Debug) (13)"},{"location":"week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-14","text":"If you see the following error this is related with long or turkish character including path. Just move project to a shorter path and try again Setting breakpoints Debugger name and version: GNU gdb (GDB) 8.1 Starting the debuggee failed: No executable specified, use `target exec'. Debugger finished with status 0","title":"Code Blocks (Install / Compile / Run / Debug) (14)"},{"location":"week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-15","text":"You will see the following yellow pointer for debugger","title":"Code Blocks (Install / Compile / Run / Debug) (15)"},{"location":"week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-16","text":"You can use the following menu or shortcuts for step-by-step debugging.","title":"Code Blocks (Install / Compile / Run / Debug) (16)"},{"location":"week-2-setup/ce103-week-2-setup/#gccg-complier-mingw-clang-cl-llvm-1","text":"Download and install MinGW or LLVM compiler (if you downloded then skip this step) MinGW installer (clang) Download MinGW-w64 - for 32 and 64 bit Windows from SourceForge.net LLVM installer (gcc / g++) Download LLVM releases Also use the following notes https://llvm.org/devmtg/2014-04/PDFs/Talks/clang-cl.pdf","title":"GCC/G++ Complier (MinGW) / Clang-cl (LLVM) (1)"},{"location":"week-2-setup/ce103-week-2-setup/#gccg-complier-mingw-clang-cl-llvm-2","text":"Open a console with \"cmd\" and test the following commands if commands are not recognized then set the system environment variable add gcc and g++ exe paths to path variable (add to both system and user path variable) gcc --version g++ --version C : \\Users\\ugur.coruh >gcc --version gcc (x86_64-win32-seh-rev0, Built by MinGW-W64 project) 8.1.0 Copyright (C) 2018 Free Software Foundation, Inc. This is free software; see the source for copying conditions. There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. clang --version","title":"GCC/G++ Complier (MinGW) / Clang-cl (LLVM) (2)"},{"location":"week-2-setup/ce103-week-2-setup/#gccg-complier-mingw-clang-cl-llvm-3","text":"for gcc.exe, g++.exe and gdb.exe C: \\P rogram Files \\m ingw-w64 \\x 86_64-8.1.0-win32-seh-rt_v6-rev0 \\m ingw64 \\b in for clang.exe , lldb.exe C : \\Program Files\\LLVM\\bin This folder paths changes according to your setup","title":"GCC/G++ Complier (MinGW) / Clang-cl (LLVM) (3)"},{"location":"week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-1","text":"Download Visual Studio Code from the following link Download Visual Studio Code - Mac, Linux, Windows","title":"VSCode (Install / Compile / Run / Debug) (1)"},{"location":"week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-2","text":"In this sample you will find MinGW and LLVM compiler combinations for C and C++ Create a folder and enter this folder then open this folder with vscode by right click","title":"VSCode (Install / Compile / Run / Debug) (2)"},{"location":"week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-3","text":"or enter the folder via console write code .","title":"VSCode (Install / Compile / Run / Debug) (3)"},{"location":"week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-4","text":"This will open vscode for current folder . dot present current folder. You will see a empty folder in the right window","title":"VSCode (Install / Compile / Run / Debug) (4)"},{"location":"week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-5","text":"","title":"VSCode (Install / Compile / Run / Debug) (5)"},{"location":"week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-6","text":"Create a hello.c file and write following content #include <stdio.h> int main () { // printf() displays the string inside quotation printf ( \"Hello, World!\" ); return 0 ; }","title":"VSCode (Install / Compile / Run / Debug) (6)"},{"location":"week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-7","text":"use CTRL+SHIFT+B (you should be on source code section) to build file","title":"VSCode (Install / Compile / Run / Debug) (7)"},{"location":"week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-8","text":"Select GCC or CLANG for this sample we can use GCC You will see output generated Hello.exe","title":"VSCode (Install / Compile / Run / Debug) (8)"},{"location":"week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-9","text":"for debugging just put breakpoint and build again","title":"VSCode (Install / Compile / Run / Debug) (9)"},{"location":"week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-10","text":"after build for debug press CTRL+SHIFT+D (you should be on source code section)and in the right window select create launch.json","title":"VSCode (Install / Compile / Run / Debug) (10)"},{"location":"week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-11","text":"from opening window select C++ GDB/LLDB","title":"VSCode (Install / Compile / Run / Debug) (11)"},{"location":"week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-12","text":"from next opening menu select mingw-w64 gcc.exe","title":"VSCode (Install / Compile / Run / Debug) (12)"},{"location":"week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-13","text":"this will run debugger and you will see debug points activated","title":"VSCode (Install / Compile / Run / Debug) (13)"},{"location":"week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-14","text":"then you can step-by-step debug your code. the following task.json and launch.json automatically generated with your selections","title":"VSCode (Install / Compile / Run / Debug) (14)"},{"location":"week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-15","text":"launch.json { // Olas\u0131 \u00f6z n i tel ikler hakk\u0131 n da bilgi edi n mek i\u00e7i n I ntell iSe nse kulla n \u0131 n . // Mevcu t \u00f6z n i tel ikleri n a\u00e7\u0131klamalar\u0131 n \u0131 g\u00f6r\u00fc nt \u00fclemek i\u00e7i n \u00fczeri ne geli n . // Daha fa zla bilgi i\u00e7i n \u015fu adresi ziyare t edi n : h tt ps : //go.microso ft .com/ f wli n k/?li n kid= 830387 \"version\" : \"0.2.0\" , \"configurations\" : [ { \"name\" : \"gcc.exe - Etkin dosyay\u0131 derle ve dosyada hata ay\u0131kla\" , \"type\" : \"cppdbg\" , \"request\" : \"launch\" , \"program\" : \"${fileDirname}\\\\${fileBasenameNoExtension}.exe\" , \"args\" : [], \"stopAtEntry\" : false , \"cwd\" : \"${fileDirname}\" , \"environment\" : [], \"externalConsole\" : false , \"MIMode\" : \"gdb\" , \"miDebuggerPath\" : \"C:\\\\Program Files\\\\mingw-w64\\\\x86_64-8.1.0-win32-seh-rt_v6-rev0\\\\mingw64\\\\bin\\\\gdb.exe\" , \"setupCommands\" : [ { \"description\" : \"gdb i\u00e7in d\u00fczg\u00fcn yazd\u0131rmay\u0131 etkinle\u015ftir\" , \"text\" : \"-enable-pretty-printing\" , \"ignoreFailures\" : true } ], \"preLaunchTask\" : \"C/C++: gcc.exe etkin dosyay\u0131 derle\" } ] }","title":"VSCode (Install / Compile / Run / Debug) (15)"},{"location":"week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-16","text":"task.json { \"tasks\" : [ { \"type\" : \"cppbuild\" , \"label\" : \"C/C++: gcc.exe etkin dosyay\u0131 derle\" , \"command\" : \"C:\\\\Program Files\\\\mingw-w64\\\\x86_64-8.1.0-win32-seh-rt_v6-rev0\\\\mingw64\\\\bin\\\\gcc.exe\" , \"args\" : [ \"-fdiagnostics-color=always\" , \"-g\" , \"${file}\" , \"-o\" , \"${fileDirname}\\\\${fileBasenameNoExtension}.exe\" ], \"options\" : { \"cwd\" : \"${fileDirname}\" }, \"problemMatcher\" : [ \"$gcc\" ], \"group\" : { \"kind\" : \"build\" , \"isDefault\" : true }, \"detail\" : \"Hata Ay\u0131klay\u0131c\u0131s\u0131 taraf\u0131ndan olu\u015fturulan g\u00f6rev.\" } ], \"version\" : \"2.0.0\" }","title":"VSCode (Install / Compile / Run / Debug) (16)"},{"location":"week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-17","text":"you can do the same thing for other compilers and c++ source codes. LLVM do not support debug on vscode now. for C++ VsCode you can check the following links for Windows https://code.visualstudio.com/docs/cpp/config-mingw for Linux https://code.visualstudio.com/docs/cpp/config-linux for WSL https://code.visualstudio.com/docs/cpp/config-wsl","title":"VSCode (Install / Compile / Run / Debug) (17)"},{"location":"week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-18","text":"in the launch file if you start debugging with F5 (you can select debugger with CTRL+SHIFT+P and then writing Debug and Selecting Configure Debugger Option)","title":"VSCode (Install / Compile / Run / Debug) (18)"},{"location":"week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-19","text":"following line will be your debugging application path if you start debugging with F5 in Hello.c file this will set <Hello.c base path>/Hello.exe","title":"VSCode (Install / Compile / Run / Debug) (19)"},{"location":"week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-20","text":"You should set this correct for both LLVM and GCC configuration in launch.json \"program\": \"${fileDirname}\\\\${fileBasenameNoExtension}.exe\", Also you should set your installed debugger paths for GCC \"miDebuggerPath\": \"C:\\\\Program Files\\\\mingw-w64\\\\x86_64-8.1.0-win32-seh-rt_v6-rev0\\\\mingw64\\\\bin\\\\gdb.exe\", for LLVM \"miDebuggerPath\": \"C:\\\\Program Files\\\\LLVM\\\\bin\\\\lldb.exe\", for more details please check the sample source codes.","title":"VSCode (Install / Compile / Run / Debug) (20)"},{"location":"week-2-setup/ce103-week-2-setup/#visual-studio-community-edition-install-compile-run-debug","text":"//TODO//","title":"Visual Studio Community Edition (Install / Compile / Run / Debug)"},{"location":"week-2-setup/ce103-week-2-setup/#notepad-install-compile-1","text":"Please download Notepad++ from the following link Downloads | Notepad++","title":"Notepad++ (Install / Compile ) (1)"},{"location":"week-2-setup/ce103-week-2-setup/#notepad-install-compile-2","text":"Download and install MinGW or LLVM compiler (if you downloded then skip this step) MinGW installer (clang) Download MinGW-w64 - for 32 and 64 bit Windows from SourceForge.net LLVM installer (gcc / g++) Download LLVM releases Also use the following notes https://llvm.org/devmtg/2014-04/PDFs/Talks/clang-cl.pdf","title":"Notepad++ (Install / Compile ) (2)"},{"location":"week-2-setup/ce103-week-2-setup/#notepad-install-compile-3","text":"Open a console with \"cmd\" and test the following commands if commands are not recognized then set the system environment variable add gcc and g++ exe paths to path variable (add to both system and user path variable) gcc --version g++ --version C : \\Users\\ugur.coruh >gcc --version gcc (x86_64-win32-seh-rev0, Built by MinGW-W64 project) 8.1.0 Copyright (C) 2018 Free Software Foundation, Inc. This is free software; see the source for copying conditions. There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.","title":"Notepad++ (Install / Compile ) (3)"},{"location":"week-2-setup/ce103-week-2-setup/#notepad-install-compile-4","text":"","title":"Notepad++ (Install / Compile ) (4)"},{"location":"week-2-setup/ce103-week-2-setup/#notepad-install-compile-5","text":"","title":"Notepad++ (Install / Compile ) (5)"},{"location":"week-2-setup/ce103-week-2-setup/#notepad-install-compile-6","text":"","title":"Notepad++ (Install / Compile ) (6)"},{"location":"week-2-setup/ce103-week-2-setup/#notepad-install-compile-7","text":"","title":"Notepad++ (Install / Compile ) (7)"},{"location":"week-2-setup/ce103-week-2-setup/#notepad-install-compile-8","text":"","title":"Notepad++ (Install / Compile ) (8)"},{"location":"week-2-setup/ce103-week-2-setup/#notepad-install-compile-9","text":"","title":"Notepad++ (Install / Compile ) (9)"},{"location":"week-2-setup/ce103-week-2-setup/#notepad-install-compile-10","text":"for gcc.exe, g++.exe and gdb.exe C: \\P rogram Files \\m ingw-w64 \\x 86_64-8.1.0-win32-seh-rt_v6-rev0 \\m ingw64 \\b in","title":"Notepad++ (Install / Compile ) (10)"},{"location":"week-2-setup/ce103-week-2-setup/#notepad-install-compile-11","text":"for clang.exe , lldb.exe C : \\Program Files\\LLVM\\bin","title":"Notepad++ (Install / Compile ) (11)"},{"location":"week-2-setup/ce103-week-2-setup/#notepad-install-compile-12","text":"This folder paths changes according to your setup Open NppExec extension (install from extension manager if not exist)","title":"Notepad++ (Install / Compile ) (12)"},{"location":"week-2-setup/ce103-week-2-setup/#notepad-install-compile-13","text":"write the following commands in box NPP_SAVE // save current file cd $(CURRENT_DIRECTORY) // go to directory of the current file gcc -Wall -Wextra -Wpedantic -std=c++11 -o \"$(NAME_PART)\" \"$(FILE_NAME)\"","title":"Notepad++ (Install / Compile ) (13)"},{"location":"week-2-setup/ce103-week-2-setup/#notepad-install-compile-14","text":"save script as gcc-build and for more information check the following link How To Setup Notepad for Writing C++ Programs You can modify or add multiple scripts for another tasks.","title":"Notepad++ (Install / Compile ) (14)"},{"location":"week-2-setup/ce103-week-2-setup/#vivim-cc","text":"//TODO//","title":"Vi/Vim (C/C++)"},{"location":"week-2-setup/ce103-week-2-setup/#eclipse-cc","text":"//TODO//","title":"Eclipse (C/C++)"},{"location":"week-2-setup/ce103-week-2-setup/#netbeans-cc","text":"//TODO//","title":"Netbeans (C/C++)"},{"location":"week-2-setup/ce103-week-2-setup/#turbo-cc","text":"//TODO//","title":"Turbo C++/C"},{"location":"week-2-setup/ce103-week-2-setup/#cmake-cc-1","text":"CMake ( http://www.cmake.org/ ) is a program which generates the Makefiles used by Make .","title":"Cmake (C++/C) (1)"},{"location":"week-2-setup/ce103-week-2-setup/#cmake-cc-2","text":"Why use CMake ? Eases Make use but the same way of thinking generate the Makefile Separate the compilation from the sources Multi-platfoms Very flexible","title":"Cmake (C++/C) (2)"},{"location":"week-2-setup/ce103-week-2-setup/#cmake-cc-3","text":"Check if the libraries/programs are available on your system File generator ( configure_file ) Calling programs or scripts ( doxygen ) One of the new standards","title":"Cmake (C++/C) (3)"},{"location":"week-2-setup/ce103-week-2-setup/#cmake-cc-4-download-and-install","text":"use the following link for download Download | CMake","title":"Cmake (C++/C) (4) (Download and Install)"},{"location":"week-2-setup/ce103-week-2-setup/#cmake-cc-5-wsl-and-linux-environment","text":"Hello world with CMake","title":"Cmake (C++/C) (5) (WSL and Linux Environment)"},{"location":"week-2-setup/ce103-week-2-setup/#cmake-cc-6-windows-environment","text":"main.c #include <stdio.h> int main () { char name [ 20 ]; printf ( \"Enter name: \" ); scanf ( \"%s\" , name ); printf ( \"Your name is %s.\" , name ); return 0 ; } CMakeLists.txt cmake_minimum_required ( VERSION 3.7.2 ) project ( scanf-sample ) add_executable ( scanf-sample main.c )","title":"Cmake (C++/C) (6) (Windows Environment)"},{"location":"week-2-setup/ce103-week-2-setup/#cmake-cc-7-windows-environment","text":"put main.c and CMakeLists.txt file in sample-scanf folder and from command line run the following cmake command with dot (.) to create solution file for c project C : \\Users\\ugur.coruh\\Desktop\\sample-scanf >cmake .","title":"Cmake (C++/C) (7) (Windows Environment)"},{"location":"week-2-setup/ce103-week-2-setup/#cmake-cc-8-windows-environment","text":"I have Visual Studio 2022 Community Edition Installed on My Computer, for these reason build tools are selected for visual studio environment and the following outputs are generated C : \\Users\\ugur.coruh\\Desktop\\sample-scanf >cmake . -- Building for: Visual Studio 17 2022 -- Selecting Windows SDK version 10.0.22000.0 to target Windows 10.0.19043. -- The C compiler identification is MSVC 19.30.30704.0 -- The CXX compiler identification is MSVC 19.30.30704.0 -- Detecting C compiler ABI info -- Detecting C compiler ABI info - done -- Check for working C compiler: C:/Program Files/Microsoft Visual Studio/2022/Community/VC/Tools/MSVC/14.30.30704/bin/Hostx64/x64/cl.exe - skipped -- Detecting C compile features -- Detecting C compile features - done -- Detecting CXX compiler ABI info -- Detecting CXX compiler ABI info - done -- Check for working CXX compiler: C:/Program Files/Microsoft Visual Studio/2022/Community/VC/Tools/MSVC/14.30.30704/bin/Hostx64/x64/cl.exe - skipped -- Detecting CXX compile features -- Detecting CXX compile features - done -- Configuring done -- Generating done -- Build files have been written to: C:/Users/ugur.coruh/Desktop/sample-scanf C : \\Users\\ugur.coruh\\Desktop\\sample-scanf >","title":"Cmake (C++/C) (8) (Windows Environment)"},{"location":"week-2-setup/ce103-week-2-setup/#cmake-cc-9-windows-environment","text":"also following files are generated","title":"Cmake (C++/C) (9) (Windows Environment)"},{"location":"week-2-setup/ce103-week-2-setup/#cmake-cc-10-windows-environment","text":"if we open scanf-sample.sln file we will have automated generated project files","title":"Cmake (C++/C) (10) (Windows Environment)"},{"location":"week-2-setup/ce103-week-2-setup/#cmake-cc-11-windows-environment","text":"you can make scanf-sample with startup project with right click and then run on visual studio. if you want to configure for another build tool you can use Cmake-GUI installed with setup on your computer","title":"Cmake (C++/C) (11) (Windows Environment)"},{"location":"week-2-setup/ce103-week-2-setup/#cmake-cc-12-windows-environment","text":"Open GUI and Select File-> Delete Cache","title":"Cmake (C++/C) (12) (Windows Environment)"},{"location":"week-2-setup/ce103-week-2-setup/#cmake-cc-13-windows-environment","text":"then you can click \"Configure\" to select build tool","title":"Cmake (C++/C) (13) (Windows Environment)"},{"location":"week-2-setup/ce103-week-2-setup/#cmake-cc-14-windows-environment","text":"","title":"Cmake (C++/C) (14) (Windows Environment)"},{"location":"week-2-setup/ce103-week-2-setup/#cmake-cc-15-windows-environment","text":"if you click \"Configure\" twice it will generate the visual studio solution in build folder for more detailed examples that include also docker and travis-ci sample you can check the following repo GitHub - ttroy50/cmake-examples: Useful CMake Examples","title":"Cmake (C++/C) (15) (Windows Environment)"},{"location":"week-2-setup/ce103-week-2-setup/#make-1","text":"Sample hello.c #include <stdio.h> int main ( void ) { printf ( \"hello, world \\n \" ); }","title":"Make (1)"},{"location":"week-2-setup/ce103-week-2-setup/#make-2","text":"Makefile # This is the default target, which will be built when # you invoke make .PHONY : all all : hello # This rule tells make how to build hello from hello.cpp hello : hello . c g++ -o hello hello.c # This rule tells make to copy hello to the binaries subdirectory, # creating it if necessary .PHONY : install install : mkdir -p binaries cp -p hello binaries # This rule tells make to delete hello and hello.o .PHONY : clean clean : rm -f hello","title":"Make (2)"},{"location":"week-2-setup/ce103-week-2-setup/#make-3","text":"compile.bat make all . will create hello.exe check hello-make sample","title":"Make (3)"},{"location":"week-2-setup/ce103-week-2-setup/#java-environment-and-development","text":"//TODO//","title":"JAVA Environment and Development"},{"location":"week-2-setup/ce103-week-2-setup/#jdk-and-jre-setup","text":"//TODO//","title":"JDK and JRE Setup"},{"location":"week-2-setup/ce103-week-2-setup/#system-environments-and-paths-for-java","text":"//TODO//","title":"System Environments and Paths for Java"},{"location":"week-2-setup/ce103-week-2-setup/#netbeans-java","text":"//TODO//","title":"Netbeans (Java)"},{"location":"week-2-setup/ce103-week-2-setup/#eclipse-java","text":"//TODO//","title":"Eclipse (Java)"},{"location":"week-2-setup/ce103-week-2-setup/#intellij-idea-jet-brains-java","text":"//TODO//","title":"Intellij Idea (Jet Brains) (Java)"},{"location":"week-2-setup/ce103-week-2-setup/#vscode-java","text":"//TODO//","title":"VSCode (Java)"},{"location":"week-2-setup/ce103-week-2-setup/#notepad-java","text":"//TODO//","title":"Notepad++ (Java)"},{"location":"week-2-setup/ce103-week-2-setup/#cmake-java","text":"ASTERICS_HPC","title":"Cmake (Java)"},{"location":"week-2-setup/ce103-week-2-setup/#c-environment-and-development","text":"","title":"C# Environment and Development"},{"location":"week-2-setup/ce103-week-2-setup/#visual-studio-community-edition-c","text":"//TODO//","title":"Visual Studio Community Edition (C#)"},{"location":"week-2-setup/ce103-week-2-setup/#notepad-c","text":"//TODO//","title":"Notepad++ (C#)"},{"location":"week-2-setup/ce103-week-2-setup/#cmake-c","text":"Outline","title":"Cmake (C#)"},{"location":"week-2-setup/ce103-week-2-setup/#common-tools-and-platforms","text":"","title":"Common Tools and Platforms"},{"location":"week-2-setup/ce103-week-2-setup/#fatih-kalem","text":"https://cdnvideo.eba.gov.tr/fatihkalem/fatihkalem_portable.zip https://cdnvideo.eba.gov.tr/fatihkalem/fatihkalem_setup.exe","title":"Fatih Kalem"},{"location":"week-2-setup/ce103-week-2-setup/#notepad-notepad-for-source-code","text":"Downloads | Notepad++","title":"Notepad++ (Notepad for Source Code)"},{"location":"week-2-setup/ce103-week-2-setup/#hxd-hex-editor","text":"HxD - Freeware Hex Editor and Disk Editor | mh-nexus","title":"HxD (Hex Editor)"},{"location":"week-2-setup/ce103-week-2-setup/#marktext-markdown-syntax-editor","text":"https://marktext.app/","title":"Marktext (Markdown Syntax Editor)"},{"location":"week-2-setup/ce103-week-2-setup/#cygwin-linux-environment-for-windows","text":"https://www.cygwin.com/","title":"Cygwin (Linux environment for Windows)"},{"location":"week-2-setup/ce103-week-2-setup/#dependency-walker-32-bit-or-64-bit-windows-module-dependency-checker","text":"https://www.dependencywalker.com/","title":"Dependency Walker (32-bit or 64-bit Windows module dependency checker)"},{"location":"week-2-setup/ce103-week-2-setup/#doxygen-code-documentation","text":"Doxygen: Doxygen","title":"Doxygen (Code Documentation)"},{"location":"week-2-setup/ce103-week-2-setup/#sonarlint-code-quality-and-code-security-extension","text":"https://www.sonarlint.org/","title":"Sonarlint (Code Quality and Code Security Extension)"},{"location":"week-2-setup/ce103-week-2-setup/#codepenio-online-code-sharing","text":"https://codepen.io/ Credit Card Sample https://codepen.io/quinlo/pen/YONMEa","title":"Codepen.io (online code sharing)"},{"location":"week-2-setup/ce103-week-2-setup/#codeshareio-real-time-code-sharing","text":"https://codeshare.io/","title":"Codeshare.io (real time code sharing)"},{"location":"week-2-setup/ce103-week-2-setup/#codebeautifyorg-online-data-conversion-tools","text":"https://codebeautify.org/","title":"Codebeautify.org (online data conversion tools)"},{"location":"week-2-setup/ce103-week-2-setup/#asciiflowcom-ascii-drawing-tool","text":"//TODO//","title":"AsciiFlow.com (ASCII drawing tool)"},{"location":"week-2-setup/ce103-week-2-setup/#freemind-opensource-mindmap-application","text":"//TODO//","title":"Freemind (opensource mindmap application)"},{"location":"week-2-setup/ce103-week-2-setup/#wireflow-user-flow-designer","text":"//TODO//","title":"Wireflow (user flow designer)"},{"location":"week-2-setup/ce103-week-2-setup/#plantuml-software-designer","text":"//TODO//","title":"PlantUML (software designer)"},{"location":"week-2-setup/ce103-week-2-setup/#drawio-drawing-tool","text":"//TODO//","title":"Drawio (drawing tool)"},{"location":"week-2-setup/ce103-week-2-setup/#putty-remote-connection","text":"//TODO//","title":"Putty (Remote Connection)"},{"location":"week-2-setup/ce103-week-2-setup/#mobaxterm-remote-connection","text":"//TODO//","title":"MobaXterm (Remote Connection)"},{"location":"week-2-setup/ce103-week-2-setup/#teamviewer-remote-connection","text":"//TODO//","title":"Teamviewer (Remote Connection)"},{"location":"week-2-setup/ce103-week-2-setup/#palettoncom-color-chooser","text":"//TODO//","title":"Paletton.com (Color Chooser)"},{"location":"week-2-setup/ce103-week-2-setup/#_1","text":"","title":""},{"location":"week-2-setup/ce103-week-2-setup/#understand-static-code-analysis","text":"//TODO//","title":"Understand (Static Code Analysis)"},{"location":"week-2-setup/ce103-week-2-setup/#jd-project-java-decompiler","text":"//TODO//","title":"JD Project (Java Decompiler)"},{"location":"week-2-setup/ce103-week-2-setup/#cutter-multi-platform-reverse-engineering-tool","text":"//TODO//","title":"Cutter (Multi-Platform Reverse Engineering Tool)"},{"location":"week-2-setup/ce103-week-2-setup/#ida-pro-freeware-native-reverse-engineering-tool","text":"//TODO//","title":"IDA Pro / Freeware (Native Reverse Engineering Tool)"},{"location":"week-2-setup/ce103-week-2-setup/#code-visualization-python-c-c-java","text":"https://pythontutor.com/ //TODO//","title":"Code Visualization (Python, C , C++ , Java)"},{"location":"week-2-setup/ce103-week-2-setup/#assembly-of-c-code","text":"https://godbolt.org/ //TODO//","title":"Assembly of C Code"},{"location":"week-2-setup/ce103-week-2-setup/#mobile-device-screen-sharing-for-demo","text":"GitHub - Genymobile/scrcpy: Display and control your Android device","title":"Mobile Device Screen Sharing for Demo"},{"location":"week-2-setup/ce103-week-2-setup/#travis-ci","text":"Travis.yml //TODO//","title":"Travis-CI"},{"location":"week-2-setup/ce103-week-2-setup/#jenkins","text":"//TODO//","title":"Jenkins"},{"location":"week-2-setup/ce103-week-2-setup/#valgrind","text":"//TODO//","title":"Valgrind"},{"location":"week-2-setup/ce103-week-2-setup/#docker","text":"- https://www.youtube.com/watch?v=nBwJm0onzeo&ab_channel=GaryExplains Dockerfile DockerHub Docker Compose Yaml Dockerrun.aws.json (AWS) //TODO//","title":"Docker"},{"location":"week-2-setup/ce103-week-2-setup/#nuget-packages","text":"//TODO//","title":"Nuget Packages"},{"location":"week-2-setup/ce103-week-2-setup/#vim-for-windows","text":"vim/vim-wim32-installer (windows vim installer) //TODO//","title":"Vim for Windows"},{"location":"week-2-setup/ce103-week-2-setup/#scv-cryptomanager","text":"//TODO//","title":"SCV Cryptomanager"},{"location":"week-2-setup/ce103-week-2-setup/#addario-cryptobench","text":"//TODO//","title":"Addario CryptoBench"},{"location":"week-2-setup/ce103-week-2-setup/#raymonds-md5-sha-checksum-utility","text":"//TODO//","title":"Raymond's MD5 &amp; SHA Checksum Utility"},{"location":"week-2-setup/ce103-week-2-setup/#slavasoft-hashcalc","text":"//TODO//","title":"SlavaSoft HashCalc"},{"location":"week-2-setup/ce103-week-2-setup/#portable-pgp","text":"//TODO//","title":"Portable PGP"},{"location":"week-2-setup/ce103-week-2-setup/#online-programming-envoriments","text":"i. Hackerrank ii. CS50 Sandbox iii. Programiz C Online Complier //TODO//","title":"Online Programming Envoriments"},{"location":"week-2-setup/sources/llvm-clang-hello-world-apps/","text":"String Literals, Character Encodings, and Multiplatform C++ | PSPDFKit","title":"Index"},{"location":"week-2-setup/sources/mingw-gcc-hello-world-apps/","text":"MinGW-w64 - for 32 and 64 bit Windows / Wiki2 / Unicode apps","title":"Index"},{"location":"week-2-setup/sources/npp-gcc-hello-world-apps/","text":"How To Setup Notepad for Writing C++ Programs","title":"Index"},{"location":"week-3-git/ce103-week-3-git/","text":"CE103 Algorithms and Programming I \u00b6 Week-3 \u00b6 Fall Semester, 2021-2022 \u00b6 Download DOC , SLIDE , PPTX Introduction to Source Code Management Systems \u00b6 Git, Github, Gitlab, Bitbucket, Maven, SVN, TFS \u00b6 Source code management (SCM) is used to track modifications to a source code repository. SCM tracks a running history of changes to a code base and helps resolve conflicts when merging updates from multiple contributors. SCM is also synonymous with Version control. As software projects grow in lines of code and contributor head count, the costs of communication overhead and management complexity also grow. SCM is a critical tool to alleviate the organizational strain of growing development costs. Features of Source Code Management Systems \u00b6 Authenticated access for commits Revision history on files Atomic commits of multiple files Versioning/Tagging Why Do We Need Source Code Management Systems? (1) \u00b6 We can save the file with a different name if it\u2019s our school project or one-time papers but for a well-equipped software development? Not a chance. Why Do We Need Source Code Management Systems? (2) \u00b6 Big projects need a version control system to track the changes and avoid misunderstanding. A good SCM does the following: Backup and Restore Synchronization Short-Term Undo Long-Term Undo Track Changes Ownership Branching and Merging Why Do We Need Source Code Management Systems? (3) \u00b6 Backup and Restore \u2013 Files can be saved at any moment and can be restored from the last saved. Why Do We Need Source Code Management Systems? (4) \u00b6 Synchronization \u2013 Programmers can get the latest code and fetch the up-to-date codes from the repository. Why Do We Need Source Code Management Systems? (5) \u00b6 Short-Term Undo \u2013 Working with a file and messed it up. We can do a short-term undo to the last known version. Why Do We Need Source Code Management Systems? (6) \u00b6 Long-Term Undo \u2013 It helps when we have to make a release version rollback. Something like going to the last version which was created a year Why Do We Need Source Code Management Systems? (7) \u00b6 Track Changes \u2013 We can track the changes as when anyone is making any change, he can leave a commit message as for why the change was done. Why Do We Need Source Code Management Systems? (8) \u00b6 Ownership \u2013 With every commit made to the master branch, it will ask the owner permission to merge it. Why Do We Need Source Code Management Systems? (9) \u00b6 Branching and Merging \u2013 You can create a branch of your source code and create the changes. Once the changes are approved, you can merge it with the master branch. Why Do We Need Source Code Management Systems? (10) \u00b6 Types of Version Control Systems \u00b6 Centralized Version Control (TFS, Subversion) Distributed Version Control (Git and Mercurial) Centralized Version Control (TFS, Subversion) (1) \u00b6 The main concept of Centralized Version Control is that it works in a client and server relationship. The repository is located in one place and allows access to multiple clients. Centralized Version Control (TFS, Subversion) (2) \u00b6 Centralized Version Control (TFS, Subversion) (3) \u00b6 Centralized Version Control (TFS, Subversion) (4) \u00b6 It\u2019s very similar to FTP where you have FTP clients which connect to FTP server. Here all the user changes and commits have to pass through the central server. For Ex: Subversion. Centralized Version Control (TFS, Subversion) (5) \u00b6 The benefits of centralized version control are: It\u2019s easy to understand. There are more GUI and IDE clients. You have more control over the users and access. Centralized Version Control (TFS, Subversion) (6) \u00b6 We do have drawbacks also: It is dependent on the access to the server. It can be slower because every command from the client has to pass the server. Branching and merging strategies are difficult to use. Distributed Version Control (Git and Mercurial) (1) \u00b6 These systems are newer to use. In Distributed Version Control, each user has their own copy of the entire repository as well as the files and history. For Ex: Git and Mercurial Distributed Version Control (Git and Mercurial) (2) \u00b6 Distributed Version Control (Git and Mercurial) (3) \u00b6 Distributed Version Control (Git and Mercurial) (4) \u00b6 The benefits of distributed version control are: More powerful and easy change tracking. No need of a centralized server. Most of the functionalities work in offline mode also apart from sharing the repositories. Branching and Merging strategies are more easy and reliable. It\u2019s faster than the other one. List of Source Code Version Management Tools (1) \u00b6 List of Source Code Version Management Tools (2) \u00b6 Github GitLab BitBucket SourceForge Beanstalk List of Source Code Version Management Tools (3) \u00b6 Apache Allura AWS CodeCommit Launchpad Phabricator GitBucket GIT (Distributed Source Code Management) (1) \u00b6 GIT (Distributed Source Code Management) (2) \u00b6 GIT (Distributed Source Code Management) (3) \u00b6 GIT (Distributed Source Code Management) (4) \u00b6 GIT (Distributed Source Code Management) (5) \u00b6 A Basic Overview of How Git Works (1) \u00b6 Create a \u201crepository\u201d (project) with a git hosting tool (like Bitbucket) Copy (or clone) the repository to your local machine Add a file to your local repo and \u201ccommit\u201d (save) the changes \u201cPush\u201d your changes to your master branch GIT (Distributed Source Code Management) (6) \u00b6 A Basic Overview of How Git Works (2) \u00b6 Make a change to your file with a git hosting tool and commit \u201cPull\u201d the changes to your local machine Create a \u201cbranch\u201d (version), make a change, commit the change Open a \u201cpull request\u201d. \u201cMerge\u201d your branch to the master branch GIT (Distributed Source Code Management) (7) \u00b6 Some of The Basic Operations in GIT are \u00b6 Initialize Add Commit Pull Push GIT (Distributed Source Code Management) (8) \u00b6 Some of The Basic Operations in GIT are \u00b6 GIT (Distributed Source Code Management) (9) \u00b6 Some of The Basic Operations in GIT are \u00b6 Branching Merging Rebasing GIT (Distributed Source Code Management) (10) \u00b6 Some of The Basic Operations in GIT are \u00b6 GIT (Distributed Source Code Management) (8) \u00b6 A brief idea about how these operations work with the Git repositories (1) \u00b6 GIT (Distributed Source Code Management) (9) \u00b6 A brief idea about how these operations work with the Git repositories (2) \u00b6 GIT (Distributed Source Code Management) (10) \u00b6 A brief idea about how these operations work with the Git repositories (3) \u00b6 For more detailed cheetsheat please check the following interactive map NDP Software :: Git Cheatsheet Installation of GIT (1) \u00b6 Check Installation Already Completed git --version Installation of GIT (2) \u00b6 If your console gives error about git command follow the steps in the link Install Git | Atlassian Git Tutorial In this link you will should download following setup according to your operating system Installation of GIT (3) \u00b6 GIT Setup Files \u00b6 Download git for OSX Download git for Windows Download git for Linux Installation of GIT (4) \u00b6 Download and install GIT from the following links (both have same github release path) Git - Downloads Installation of GIT (5) \u00b6 After running setup follow the steps below Installation of GIT (6) \u00b6 Installation of GIT (7) \u00b6 Installation of GIT (8) \u00b6 Installation of GIT (9) \u00b6 Installation of GIT (10) \u00b6 Installation of GIT Extension (Windows) (1) \u00b6 You can install Git GUI from https://git-scm.com/downloads/guis I prefer to use git extension https://gitextensions.github.io/ and https://tortoisegit.org/ Also Download KDiff3 KDiff3 - Browse Files at SourceForge.net These extensions provide GUI for git operations to make process easier. Configuration of GIT Extension (Windows) (1) \u00b6 Configuration of GIT Extension (Windows) (2) \u00b6 If you install git everything should be green and this configuration is stored on .gitconfig on your home C:/Windows/Users/<user>/.gitconfig Configuration of GIT Extension (Windows) (3) \u00b6 [core] editor = \\ \"C:/Program Files (x86)/GitExtensions/GitExtensions.exe\\\" fileeditor autocrlf = true quotePath = false commitGraph = true longpaths = true [user] email = xxxxxxx@gmail.com name = xxxx xxxxxx [filter \"lfs\" ] clean = git-lfs clean -- %f smudge = git-lfs smudge -- %f process = git-lfs filter-process required = true [pull] rebase = false [fetch] prune = false [rebase] autoStash = false [credential] helper = manager [diff] guitool = kdiff3 [difftool \"kdiff3\" ] path = C:/Program Files/KDiff3/kdiff3.exe cmd = \\ \"C:/Program Files/KDiff3/kdiff3.exe\\\" \\ \"$LOCAL\\\" \\ \"$REMOTE\\\" [merge] guitool = tortoisemerge [mergetool \"tortoisemerge\" ] path = C:/Program Files/TortoiseGit/bin/TortoiseGitMerge.exe cmd = \\ \"C:/Program Files/TortoiseGit/bin/TortoiseGitMerge.exe\\\" -base:\\ \"$BASE\\\" -mine:\\ \"$LOCAL\\\" -theirs:\\ \"$REMOTE\\\" -merged:\\ \"$MERGED\\\" [receive] advertisePushOptions = true [gc] writeCommitGraph = true Configuration of GIT Extension (Windows) (4) \u00b6 Also in extension you can see similar settings Configuration of GIT Extension (Windows) (5) \u00b6 Samples MergeTool tortoisemerge Path to mergetool C:/Program Files/TortoiseGit/bin/TortoiseGitMerge.exe Mergetool command \"C:/Program Files/TortoiseGit/bin/TortoiseGitMerge.exe\" -base:\"$BASE\" -mine:\"$LOCAL\" -theirs:\"$REMOTE\" -merged:\"$MERGED\" Configuration of GIT Extension (Windows) (6) \u00b6 Difftool kdiff3 Path to difftool C:/Program Files/KDiff3/kdiff3.exe Difftool command \"C:/Program Files/KDiff3/kdiff3.exe\" \"$LOCAL\" \"$REMOTE\" Configuration of GIT Extension (Windows) (7) \u00b6 If you see something as merge and diff tool is not configured, follow the similar settings above on your computer. If you installed kdiff3, tortoisegit and extension you will have same diff and merge tools This topic also help you Git: How can I configure KDiff3 as a merge tool and diff tool? - Stack Overflow Configuration of GIT Extension (Windows) (8) \u00b6 Configuration of GIT Extension (Windows) (9) \u00b6 Open Git->Config, in your settings you will see path to mergetool and difftool will be empty fill settings like that below find executables in your computer and copy paths to here. Configuration of GIT Extension (Windows) (10) \u00b6 Configuration of GIT Extension (Windows) (11) \u00b6 Also if we want to change and use different diff and merge tool then we can do this with gitbash console as below C : \\Program Files\\TortoiseGit\\bin Find TortoiseGitIDiff.exe and TortoiseGitMerge.exe Configuration of GIT Extension (Windows) (12) \u00b6 Copy path of this applications C : \\Program Files\\TortoiseGit\\bin\\TortoiseGitMerge.exe C : \\Program Files\\TortoiseGit\\bin\\TortoiseGitIDiff.exe Configuration of GIT Extension (Windows) (13) \u00b6 open a gitbash console and run following commands git config --global merge.tool TortoiseGitMerge git config --global mergetool.TortoiseGitMerge.path \"C:/Program Files/TortoiseGit/bin/TortoiseGitMerge.exe\" git config --global mergetool.TortoiseGitMerge.trustExitCode false git config --global diff.guitool TortoiseGitIDiff git config --global difftool.TortoiseGitIDiff.path \"C:/Program Files/TortoiseGit/bin/TortoiseGitIDiff.exe\" git config --global difftool.TortoiseGitIDiff.trustExitCode false This updates will be stored on .gitconfig Using the GIT Extension (1) \u00b6 right click in the git folder and use Git Extension menu for operations. for sample commit click \"Commit\" Using the GIT Extension (1) \u00b6 from opening window first stage related files and then write a good commit message finally click commit to local. You can also commit&push it to remote repository. GIT Installation Completed.. \u00b6 Installation of gig (git ignore creator) (1) \u00b6 Requirements Python >= 3.6 Internet connection https://github.com/sloria/gig pip install -U gig Installation of gig (git ignore creator) (2) \u00b6 Installation of gig (git ignore creator) (3) \u00b6 gig --version Usage of gig (1) \u00b6 List all gitignore templates gig list gig list -global Usage of gig (2) \u00b6 Sample gitignore for C Java and Visual Studio gig C Java VisualStudio > .gitignore Usage of gig (3) \u00b6 There is a portal for this also by Toptal \u2022 gitignore.io - Create Useful .gitignore Files For Your Project Usage of gig (4) \u00b6 for samples you can check the following links. https://github.com/github/gitignore https://dev.to/shihanng/gig-a-gitignore-generator-opc Configuration of GIT (1) \u00b6 It is important to configure your Git because any commits that you make are associated with your configuration details. configuring Git with your username and email. In order to do that, type the following commands in your Git Bash: git config - - global user.name \"<your name>\" git config - - global user.email \"<your email>\" Configuration of GIT (2) \u00b6 Configuration of GIT (3) \u00b6 git configuration files are located on the user folder Configuration of GIT (4) \u00b6 If you want to view all your configuration details, use the command below git config --list Using .gitignore files with git-extension (1) \u00b6 with gitignore file Using .gitignore files with git-extension (2) \u00b6 without gitignore file (just move to another location) Github Create Repo \u00b6 Initilization of Repo (not existing in github) \u00b6 git init \u00b6 In order to do that, we use the command git init . git init creates an empty Git repository or re-initializes an existing one. It basically creates a .git directory with sub directories and template files. Running a git init in an existing repository will not overwrite things that are already there. It rather picks up the newly added templates. git init git init \u00b6 Adding Initiated Repo Remote Upstream Repo (Link with Github Repo) (1) \u00b6 If you enter following command in the git folder you will see nothing git remote -v That mean this repository do not have a remote upstream repository such as a github or bitbucket repo. Adding Initiated Repo Remote Upstream Repo (Link with Github Repo) (2) \u00b6 Open the github and bitbucket repository and copy project path from Adding Initiated Repo Remote Upstream Repo (Link with Github Repo) (3) \u00b6 you will see the following sample from github code button https://github.com/ucoruh/ce103-sample-text.git Adding Initiated Repo Remote Upstream Repo (Link with Github Repo) (4) \u00b6 copy link and use with following command git remote add origin https://github.com/ucoruh/ce103-sample-text.git Adding Initiated Repo Remote Upstream Repo (Link with Github Repo) (5) \u00b6 then you can check your remote setting with $ git remote -v origin https://github.com/ucoruh/ce103-sample-text.git (fetch) origin https://github.com/ucoruh/ce103-sample-text.git (push) Adding Initiated Repo Remote Upstream Repo (Link with Github Repo) (6) \u00b6 you can check the following sample How to Add a New Remote to your Git Repo | Assembla Help Center Now you can push your local changes to remote repository \u00b6 If you see a repository on Github then you can download with following operation \u00b6 Checkout a Repository (1) \u00b6 create a working copy of a local repository by running the command git clone /path/to/repository Checkout a Repository (2) \u00b6 Sample clone command git clone https://github.com/ucoruh/ce103-sample-text.git Checkout a Repository (3) \u00b6 when using a remote server, your command will be git clone username@host:/path/to/repository Checking Repository Status (1) \u00b6 git status \u00b6 The git status command lists all the modified files which are ready to be added to the local repository. git status Checking Repository Status (2) \u00b6 git status \u00b6 Adding Files to Index (1) \u00b6 git add \u00b6 This command updates the index using the current content found in the working tree and then prepares the content in the staging area for the next commit. git add < directory> git add < file> git add * Adding Files to Index (1) \u00b6 git add \u00b6 Created two more files edureka3.txt and edureka4.txt. Let us add the files using the command git add -A. This command will add all the files to the index which are in the directory but not updated in the index yet. Commit Changes (1) \u00b6 git commit \u00b6 \u2022It refers to recording snapshots of the repository at a given time. Committed snapshots will never change unless done explicitly. Commit Changes (2) \u00b6 git commit \u00b6 Let me explain how commit works with the diagram below Here, C1 is the initial commit, i.e. the snapshot of the first change from which another snapshot is created with changes named C2. Note that the master points to the latest commit. Now, when I commit again, another snapshot C3 is created and now the master points to C3 instead of C2. Commit Changes (3) \u00b6 git commit \u00b6 Commands: git commit -m \"<message>\" Now, if you want to commit a snapshot of all the changes in the working directory at once, you can use the command below Commit Changes (4) \u00b6 git commit \u00b6 Please check writing good commit messages article below How to write a good commit message - DEV Community Writing Good Commit Messages (1) \u00b6 type: subject body (optional) footer (optional) Writing Good Commit Messages (2) \u00b6 1. Type \u00b6 feat - a new feature fix - a bug fix docs - changes in documentation style - everything related to styling refactor - code changes that neither fixes a bug or adds a feature test - everything related to testing chore - updating build tasks, package manager configs, etc Writing Good Commit Messages (3) \u00b6 2. Subject \u00b6 This contains a short description of the changes made. It shouldn't be greater than 50 characters, should begin with a capital letter and written in the imperative eg. Add instead of Added or Adds. Writing Good Commit Messages (4) \u00b6 3. Body \u00b6 The body is used to explain what changes you made and why you made them. Not all commits are complex enough that they need a body, especially if you are working on a personal project alone, and as such writing a body is optional. A blank line between the body and the subject is required and each line should have no more than 72 characters. Writing Good Commit Messages (5) \u00b6 4.Footer \u00b6 The footer is also optional and mainly used when you are using an issue tracker to reference the issue ID. Writing Good Commit Messages (6) \u00b6 Example Commit Message \u00b6 feat: Summarize changes in around 50 characters or less More detailed explanatory text, if necessary. Wrap it to about 72 characters or so. In some contexts, the first line is treated as the subject of the commit and the rest of the text as the body. The blank line separating the summary from the body is critical (unless you omit the body entirely); various tools like `log`, `shortlog` and `rebase` can get confused if you run the two together. Explain the problem that this commit is solving. Focus on why you are making this change as opposed to how (the code explains that). Are there side effects or other unintuitive consequences of this change? Here's the place to explain them. Further paragraphs come after blank lines. - Bullet points are okay, too - Typically a hyphen or asterisk is used for the bullet, preceded by a single space, with blank lines in between, but conventions vary here If you use an issue tracker, put references to them at the bottom, like this: Resolves: #123 See also: #456, #789 Writing Good Commit Messages (7) \u00b6 git commit -a Add Files to Index (1) \u00b6 I have created two more text files in my working directory viz. edureka5.txt and edureka6.txt but they are not added to the index yet. I am adding edureka5.txt using the command git add edureka5.txt Add Files to Index (2) \u00b6 Add Files to Index (3) \u00b6 I have added edureka5.txt to the index explicitly but not edureka6.txt and made changes in the previous files. I want to commit all changes in the directory at once. Add Files to Index (4) \u00b6 This command will commit a snapshot of all changes in the working directory but only includes modifications to tracked files i.e. the files that have been added with git add at some point in their history. Hence, edureka6.txt was not committed because it was not added to the index yet. But changes in all previous files present in the repository were committed, i.e. edureka1.txt, edureka2.txt, edureka3.txt, edureka4.txt and edureka5.txt. Now I have made my desired commits in my local repository Add Files to Index (5) \u00b6 your local repository consists of three \"trees\" maintained by git. the first one is your Working Directory which holds the actual files. the second one is the Index which acts as a staging area and finally the HEAD which points to the last commit you've made Add Files to Index (6) \u00b6 Update local repo before sending (1) \u00b6 Fetching \u00b6 If we have a remote Git branch, for example a branch on Github, it can happen that the remote branch has commits that the current branch doesn't have! Maybe another branch got merged, your colleague pushed a quick fix, and so on. Update local repo before sending (2) \u00b6 Fetching \u00b6 We can get these changes locally, by performing a git fetch on the remote branch! It doesn't affect your local branch in any way: a fetch simply downloads new data. Update local repo before sending (3) \u00b6 Fetching \u00b6 Update local repo before sending (4) \u00b6 Fetching \u00b6 We can now see all the changes that have been made since we last pushed! We can decide what we want to do with the new data now that we have it locally. Update local repo before sending (5) \u00b6 Pulling \u00b6 Although a git fetch is very useful in order to get the remote information of a branch, we can also perform a git pull . A git pull is actually two commands in one: a git fetch , and a git merge . When we're pulling changes from the origin, we're first fetching all the data like we did with a git fetch , after which the latest changes are automatically merged into the local branch Update local repo before sending (6) \u00b6 Pulling \u00b6 Update local repo before sending (7) \u00b6 Pulling \u00b6 Awesome, we're now perfectly in sync with the remote branch and have all the latest changes! Update local repo before sending (8) \u00b6 Pulling \u00b6 git pull \u00b6 Note that before you affect changes to the central repository you should always pull changes from the central repository to your local repository to get updated with the work of all the collaborators that have been contributing in the central repository. For that we will use the pull command. Update local repo before sending (9) \u00b6 Pulling \u00b6 git pull \u00b6 But first, you need to set your central repository as origin using the command git remote add origin < link of your central repository> Update local repo before sending (10) \u00b6 Pulling / git pull \u00b6 Now that my origin is set Update local repo before sending (11) \u00b6 Pulling / git pull \u00b6 let us extract files from the origin using pull. For that use the command git pull origin master Update local repo before sending (12) \u00b6 Pulling / git pull \u00b6 This command will copy all the files from the master branch of remote repository to your local repository. Update local repo before sending (13) \u00b6 Pulling / git pull \u00b6 Since my local repository was already updated with files from master branch, hence the message is Already up-to-date. Refer to the screen shot above Update local repo before sending (14) \u00b6 Pulling / git pull \u00b6 One can also try pulling files from a different branch using the following command: git pull origin < branch-name> Update local repo before sending (15) \u00b6 Pulling / git pull \u00b6 Your local Git repository is now updated with all the recent changes. It is time you make changes in the central repository by using the push command. Send Changes to Remote Repo (1) \u00b6 git push \u00b6 This command transfers commits from your local repository to your remote repository. It is the opposite of pull operation. Send Changes to Remote Repo (2) \u00b6 git push \u00b6 Pulling imports commits to local repositories whereas pushing exports commits to the remote repositories Send Changes to Remote Repo (3) \u00b6 git push \u00b6 The use of git push is to publish your local changes to a central repository. After you\u2019ve accumulated several local commits and are ready to share them with the rest of the team, Send Changes to Remote Repo (4) \u00b6 git push \u00b6 you can then push them to the central repository by using the following command git push < remote> Send Changes to Remote Repo (5) \u00b6 git push \u00b6 This remote refers to the remote repository which had been set before using the pull command. Send Changes to Remote Repo (6) \u00b6 git push \u00b6 This pushes the changes from the local repository to the remote repository along with all the necessary commits and internal objects. This creates a local branch in the destination repository Send Changes to Remote Repo (7) \u00b6 git push \u00b6 The below files are the files which we have already committed previously in the commit section and they are all \u201cpush-ready\u201c. Send Changes to Remote Repo (8) \u00b6 git push \u00b6 I will use the command git push origin master to reflect these files in the master branch of my central repository. Send Changes to Remote Repo (9) \u00b6 git push \u00b6 Send Changes to Remote Repo (10) \u00b6 git push \u00b6 Send Changes to Remote Repo (11) \u00b6 git push \u00b6 Send Changes to Remote Repo (12) \u00b6 git push \u00b6 To prevent overwriting, Git does not allow push when it results in a non-fast forward merge in the destination repository. Send Changes to Remote Repo (13) \u00b6 git push \u00b6 A non-fast forward merge means an upstream merge i.e. merging with ancestor or parent branches from a child branch To enable such merge, use the command below git push < remote > -force The above command forces the push operation even if it results in a non-fast forward merge Branching (1) \u00b6 git branch \u00b6 Branches in Git are nothing but pointers to a specific commit. Git generally prefers to keep its branches as lightweight as possible. Branching (2) \u00b6 git branch \u00b6 There are basically two types of branches viz. local branches remote tracking branches. Branching (3) \u00b6 git branch \u00b6 A local branch is just another path of your working tree. On the other hand, remote tracking branches have special purposes. Some of them are: They link your work from the local repository to the work on central repository. Branching (4) \u00b6 git branch \u00b6 They automatically detect which remote branches to get changes from, when you use git pull. Branching (5) \u00b6 Learn current branch \u00b6 You can check what your current branch is by using the command git branch The one mantra that you should always be chanting while branching is \u201cbranch early, and branch often\u201d Branching (6) \u00b6 List Local Branches \u00b6 git branch -l Branching (7) \u00b6 List Remote Branches \u00b6 git branch -r Branching (8) \u00b6 List All Local and Remote Branches \u00b6 git branch -a Branching (9) \u00b6 Removing merged git branches (after pull-request action in github) If you merged your branch to base branch in github and delete it on github your local branch list will not be updated by it self. You have to use the following command to update local and remote branch lists. Use the following command to syncronize your repository with remote upstream repo. git remote update --prune Branching (10) \u00b6 Create Branch \u00b6 To create a new branch we use the following command git branch < branch-name> The diagram below shows the workflow when a new branch is created. When we create a new branch it originates from the master branch itself. Branching (11) \u00b6 Create Branch \u00b6 Branching (12) \u00b6 Create Branch \u00b6 Since there is no storage/memory overhead with making many branches, it is easier to logically divide up your work rather than have big chunky branches You can create and change branch with following command, create a new branch named \"feature_x\" and switch to it using git checkout -b feature_x Branching (13) \u00b6 Change Branch \u00b6 git checkout < branch-name> git checkout master Branching (14) \u00b6 Change Branch \u00b6 Branching includes the work of a particular commit along with all parent commits. As you can see in the diagram above, the newBranch has detached itself from the master and hence will create a different path Branching (15) \u00b6 Delete Local Branch \u00b6 and delete the branch again, before doing this switch to main or master branches. git branch -d feature_x Branching (16) \u00b6 Delete Remote Branch \u00b6 and delete the branch again, before doing this switch to main or master branches. git push origin --delete feature_x How to delete remote branches in Git Branching (17) \u00b6 Push Specific Branch to Remote \u00b6 A branch is not available to others unless you push the branch to your remote repository git push origin < branch> Branching (18) \u00b6 Update & Merge (Conflicts) \u00b6 to update your local repository to the newest commit, execute git pull in your working directory to fetch and merge remote changes. to merge another branch into your active branch (e.g. master), use git merge <branch> Branching (19) \u00b6 Update & Merge (Conflicts) \u00b6 in both cases git tries to auto-merge changes. Unfortunately, this is not always possible and results in conflicts. You are responsible to merge those conflicts manually by editing the files shown by git. After changing, you need to mark them as merged with git add <filename> before merging changes, you can also preview them by using git diff <source_branch> <target_branch> Git merge conflicts | Atlassian Git Tutorial Branching (20) \u00b6 Update & Merge (Conflicts) \u00b6 There are two types of merges Git can perform: a fast-forward , or a no-fast-forward Branching (21) \u00b6 Update & Merge (Conflicts) \u00b6 Fast-forward ( --ff ) \u00b6 A fast-forward merge can happen when the current branch has no extra commits compared to the branch we\u2019re merging. Git is... lazy and will first try to perform the easiest option: the fast-forward! This type of merge doesn\u2019t create a new commit, but rather merges the commit(s) on the branch we\u2019re merging right in the current branch Branching (22) \u00b6 Update & Merge (Conflicts) \u00b6 Fast-forward ( --ff ) \u00b6 Branching (23) \u00b6 Update & Merge (Conflicts) \u00b6 Perfect! We now have all the changes that were made on the dev branch available on the master branch. So, what's the no-fast-forward all about? Branching (24) \u00b6 Update & Merge (Conflicts) \u00b6 No-fast-foward ( --no-ff ) \u00b6 It's great if your current branch doesn't have any extra commits compared to the branch that you want to merge, but unfortunately that's rarely the case! If we committed changes on the current branch that the branch we want to merge doesn't have, git will perform a no-fast-forward merge. Branching (25) \u00b6 Update & Merge (Conflicts) \u00b6 No-fast-foward ( --no-ff ) \u00b6 With a no-fast-forward merge, Git creates a new merging commit on the active branch. The commit's parent commits point to both the active branch and the branch that we want to merge! Branching (26) \u00b6 Update & Merge (Conflicts) \u00b6 No-fast-foward ( --no-ff ) \u00b6 Branching (27) \u00b6 Update & Merge (Conflicts) \u00b6 No-fast-foward ( --no-ff ) \u00b6 No big deal, a perfect merge! The master branch now contains all the changes that we've made on the dev branch. Branching (28) \u00b6 Merge Conflicts \u00b6 Although Git is good at deciding how to merge branches and add changes to files, it cannot always make this decision all by itself This can happen when the two branches we're trying to merge have changes on the same line in the same file, or if one branch deleted a file that another branch modified, and so on. Branching (29) \u00b6 Merge Conflicts \u00b6 In that case, Git will ask you to help decide which of the two options we want to keep! Let's say that on both branches, we edited the first line in the README.md . Branching (30) \u00b6 Merge Conflicts \u00b6 If we want to merge dev into master , this will end up in a merge conflict: would you like the title to be Hello! or Hey! ? Branching (31) \u00b6 Merge Conflicts \u00b6 When trying to merge the branches, Git will show you where the conflict happens. We can manually remove the changes we don't want to keep, save the changes, add the changed file again, and commit the changes Branching (32) \u00b6 Merge Conflicts \u00b6 Although merge conflicts are often quite annoying, it makes total sense: Git shouldn't just assume which change we want to keep Branching (33) \u00b6 Sample Conflict -1 \u00b6 participants.txt ( I added a hyphen before each name ) Finance team Charles Lisa John Stacy Alexander git init git add . git commit \u2013m 'Initial list for finance team' Branching (34) \u00b6 Sample Conflict -1 \u00b6 Create a new branch called marketing using the following syntax git checkout \u2013b marketing Branching (35) \u00b6 Sample Conflict -1 \u00b6 Now open the participants.txt file and start entering the names for the marketing department below the finance team list, as follows: ( I added a hyphen before each name ) Marketing team Collins Linda Patricia Morgan git add . git commit \u2013m 'Unfinished list of marketing team' git checkout master Branching (36) \u00b6 Sample Conflict -1 \u00b6 Open the file and delete the names Alexander and Stacy , save, close, add the changes, and commit with the commit message Final list from Finance team git add . git commit \u2013m \"Final list from Finance team\" git checkout marketing Branching (37) \u00b6 Sample Conflict -1 \u00b6 Open the file and add the fifth name, Amanda , for the marketing team, save, add, and commit git add . git commit \u2013m \"Initial list of marketing team\" names entered for marketing have been confirmed; now we need to merge these two lists, which can be done by the following command git merge master Branching (38) \u00b6 Sample Conflict -1 \u00b6 Auto-merging participants.txt CONFLICT (content): Merge conflict in participants.txt Automatic merge failed; fix conflicts and then commit the result. Branching (39) \u00b6 Sample Conflict -1 \u00b6 Finance team -Charles -Lisa -John <<<<<<< HEAD -Stacy -Alexander Marketing team - Collins - Linda - Patricia - Morgan - Amanda ======= >>>>>>> master Branching (40) \u00b6 Sample Conflict -1 \u00b6 <<<<<<< Changes made on the branch that is being merged into. In most cases, this is the branch that I have currently checked out (i.e. HEAD). ||||||| The common ancestor version. ======= Changes made on the branch that is being merged in. This is often a feature/topic branch. >>>>>>> Branching (41) \u00b6 Sample Conflict -1 \u00b6 remove them keep the lines you want to see in the final version of the file add and commit Branching (42) \u00b6 Sample Conflict -1 \u00b6 If we want to save all to our version git checkout --ours . # checkout our local version of all files git add -u # mark all conflicted files as merged git commit # commit the merge Branching (43) \u00b6 Sample Conflict -1 \u00b6 If we want to discard all our revision git checkout --theirs . # checkout remote version of all files git add -u # mark all conflicted files as merged git commit # commit the merge Branching (44) \u00b6 Sample Conflict -2 \u00b6 You're going to pull some changes, but oops, you're not up to date: git fetch origin git pull origin master From ssh://gitosis@example.com:22/projectname * branch master - > FETCH_HEAD Updating a030c3a..ee25213 error: Entry 'filename.c' not uptodate. Cannot merge. Branching (45) \u00b6 Sample Conflict -2 \u00b6 So you get up-to-date and try again, but have a conflict: git add filename.c git commit -m \"made some wild and crazy changes\" git pull origin master From ssh://gitosis@example.com:22/projectname * branch master - > FETCH_HEAD Auto-merging filename.c CONFLICT (content): Merge conflict in filename.c Automatic merge failed; fix conflicts and then commit the result. Branching (46) \u00b6 Sample Conflict -2 \u00b6 So you decide to take a look at the changes: git mergetool Oh my, oh my, upstream changed some things, but just to use my changes...no...their changes... git checkout --ours filename.c git checkout --theirs filename.c git add filename.c git commit -m \"using theirs\" Branching (47) \u00b6 Sample Conflict -2 \u00b6 And then we try a final time git pull origin master From ssh://gitosis@example.com:22/projectname * branch master - > FETCH_HEAD Already up-to-date. Tagging \u00b6 it's recommended to create tags for software releases. this is a known concept, which also exists in SVN. You can create a new tag named 1.0.0 by executing git tag 1.0.0 1b2e1d63ff the 1b2e1d63ff stands for the first 10 characters of the commit id you want to reference with your tag. You can get the commit id by looking at the... Log (1) \u00b6 in its simplest form, you can study repository history using.. git log You can add a lot of parameters to make the log look like what you want. To see only the commits of a certain author: git log --author=bob Log (2) \u00b6 To see a very compressed log where each commit is one line: git log --pretty=oneline Log (3) \u00b6 Or maybe you want to see an ASCII art tree of all the branches, decorated with the names of tags and branches: git log --graph --oneline --decorate --all Log (4) \u00b6 See only which files have changed: git log --name-status Log (5) \u00b6 These are just a few of the possible parameters you can use. For more, see git log --help Replace Local Changes (1) \u00b6 In case you did something wrong, which for sure never happens ;), you can replace local changes using the command git checkout -- < filename> this replaces the changes in your working tree with the last content in HEAD. Changes already added to the index, as well as new files, will be kept. Replace Local Changes (2) \u00b6 if you use dot (.) then all local changes will be rollbacked. git checkout -- . Replace Local Changes (3) \u00b6 If you instead want to drop all your local changes and commits, fetch the latest history from the server and point your local master branch at it like this git fetch origin git reset --hard origin/master Reflog (1) \u00b6 Everyone makes mistakes, and that's totally okay! Sometimes it may feel like you've corrupt your git repo so badly that you just want to delete it entirely. Reflog (2) \u00b6 git reflog is a very useful command in order to show a log of all the actions that have been taken! This includes merges, resets, reverts: basically any alteration to your branch. Reflog (3) \u00b6 Reflog (4) \u00b6 If you made a mistake, you can easily redo this by resetting HEAD based on the information that reflog gives us! Say that we actually didn't want to merge the origin branch. When we execute the git reflog command, we see that the state of the repo before the merge is at HEAD@{1} . Let's perform a git reset to point HEAD back to where it was on HEAD@{1} ! Reflog (5) \u00b6 We can see that the latest action has been pushed to the reflog Resetting (1) \u00b6 It can happen that we committed changes that we didn't want later on. Maybe it's a WIP commit, or maybe a commit that introduced bugs! In that case, we can perform a git reset . Resetting (2) \u00b6 A git reset gets rid of all the current staged files and gives us control over where HEAD should point to. Soft Reset (1) \u00b6 A soft reset moves HEAD to the specified commit (or the index of the commit compared to HEAD ), without getting rid of the changes that were introduced on the commits afterward! Soft Reset (2) \u00b6 Let's say that we don't want to keep the commit 9e78i which added a style.css file, and we also don't want to keep the commit 035cc which added an index.js file. However, we do want to keep the newly added style.css and index.js file! A perfect use case for a soft reset. Soft Reset (3) \u00b6 Soft Reset (2) \u00b6 When typing git status , you'll see that we still have access to all the changes that were made on the previous commits. This is great, as this means that we can fix the contents of these files and commit them again later on! Hard reset (1) \u00b6 Sometimes, we don't want to keep the changes that were introduced by certain commits. Unlike a soft reset, we shouldn't need to have access to them any more. Git should simply reset its state back to where it was on the specified commit: this even includes the changes in your working directory and staged files! Hard reset (2) \u00b6 Git has discarded the changes that were introduced on 9e78i and 035cc , and reset its state to where it was on commit ec5be . Reverting (1) \u00b6 Another way of undoing changes is by performing a git revert . By reverting a certain commit, we create a new commit that contains the reverted changes! Reverting (2) \u00b6 Let's say that ec5be added an index.js file. Later on, we actually realize we didn't want this change introduced by this commit anymore! Let's revert the ec5be commit. Perfect! Commit 9e78i reverted the changes that were introduced by the ec5be commit. Reverting (3) \u00b6 Performing a git revert is very useful in order to undo a certain commit, without modifying the history of the branch. Cherry-picking (1) \u00b6 When a certain branch contains a commit that introduced changes we need on our active branch, we can cherry-pick that command! By cherry-pick ing a commit, we create a new commit on our active branch that contains the changes that were introduced by the cherry-pick ed commit. Cherry-picking (1) \u00b6 Say that commit 76d12 on the dev branch added a change to the index.js file that we want in our master branch. We don't want the entire we just care about this one single commit! Cool, the master branch now contains the changes that 76d12 introduced Rebasing (1) \u00b6 We just saw how we could apply changes from one branch to another by performing a git merge . Another way of adding changes from one branch to another is by performing a git rebase . Rebasing (2) \u00b6 A git rebase copies the commits from the current branch, and puts these copied commits on top of the specified branch. Perfect, we now have all the changes that were made on the master branch available on the dev branch! Rebasing (3) \u00b6 A big difference compared to merging, is that Git won't try to find out which files to keep and not keep. The branch that we're rebasing always has the latest changes that we want to keep! You won't run into any merging conflicts this way, and keeps a nice linear Git history. Rebasing (4) \u00b6 This example shows rebasing on the master branch. In bigger projects, however, you usually don't want to do that. A git rebase changes the history of the project as new hashes are created for the copied commits! Rebasing (5) \u00b6 Rebasing is great whenever you're working on a feature branch, and the master branch has been updated. You can get all the updates on your branch, which would prevent future merging conflicts! Interactive Rebase (1) \u00b6 Before rebasing the commits, we can modify them! We can do so with an interactive rebase . An interactive rebase can also be useful on the branch you're currently working on, and want to modify some commits. Interactive Rebase (2) \u00b6 There are 6 actions we can perform on the commits we're rebasing: reword : Change the commit message edit : Amend this commit squash : Meld commit into the previous commit fixup : Meld commit into the previous commit, without keeping the commit's log message exec : Run a command on each commit we want to rebase drop : Remove the commit Interactive Rebase (3) \u00b6 Awesome! This way, we can have full control over our commits. If we want to remove a commit, we can just drop it. Interactive Rebase (4) \u00b6 Or if we want to squash multiple commits together to get a cleaner history, no problem! Interactive rebasing gives you a lot of control over the commits you're trying to rebase, even on the current active branch Useful Hints (1) \u00b6 built-in git GUI gitk Useful Hints (2) \u00b6 use colorful git output git config color.ui true Useful Hints (3) \u00b6 show log on just one line per commit git config format.pretty oneline Useful Hints (4) \u00b6 use interactive adding git add -i HEAD~2 // previous two commits fro head HEAD~~ // previous two commits from head HEAD@{2} // reflog order 18fe5 // previous commit hash GIT Flow \u00b6 A successful Git branching model \u00bb nvie.com Hotfix \u00b6 OneFlow \u2013 a Git branching model and workflow | End of Line Blog a simple git branching model \u00b7 GitHub GIT Decision Tree \u00b6 http://justinhileman.info/article/git-pretty/git-pretty.png GIT in action (1) \u00b6 GIT in action (2) \u00b6 GIT in action (3) \u00b6 GIT in action (4) \u00b6 GIT in action (5) \u00b6 GIT in action (6) \u00b6 GIT in action (7) \u00b6 Gource \u00b6 https://gource.io/ References (1) \u00b6 Source Code Management | Atlassian Git Tutorial . What is Source Code Management or Version Control ? - The Linux Juggernaut https://www.edureka.co/blog/how-to-use-github/ https://www.edureka.co/blog/git-tutorial/ https://www.edureka.co/blog/install-git/ References (2) \u00b6 git - the simple guide - no deep shit! GitHub - rogerdudler/git-guide: git - the simple guide https://dev.to/lydiahallie/cs-visualized-useful-git-commands-37p1#merge How to write a good commit message - DEV Community https://blog.xebialabs.com/2016/06/14/periodic-table-devops-tools-v-2/ References (3) \u00b6 https://harness.io/2018/01/devops-tools-lifecycle-mesh-2018/ https://medium.com/swlh/how-to-become-an-devops-engineer-in-2020-80b8740d5a52 https://www.lucidchart.com/blog/devops-process-flow https://www.researchgate.net/publication/262450962_Rugby_An_Agile_Process_Model_Based_on_Continuous_Delivery References (4) \u00b6 git - the simple guide - no deep shit! Git Tutorial | Commands And Operations In Git | Edureka How to write a good commit message - DEV Community An Introduction to Git and GitHub by Brian Yu - YouTube References (5) \u00b6 https://education.github.com/git-cheat-sheet-education.pdf NDP Software :: Git Cheatsheet ; Learn Git Branching https://guides.github.com/introduction/git-handbook/","title":"Week-3 (Git Version Management)"},{"location":"week-3-git/ce103-week-3-git/#ce103-algorithms-and-programming-i","text":"","title":"CE103 Algorithms and Programming I"},{"location":"week-3-git/ce103-week-3-git/#week-3","text":"","title":"Week-3"},{"location":"week-3-git/ce103-week-3-git/#fall-semester-2021-2022","text":"Download DOC , SLIDE , PPTX","title":"Fall Semester, 2021-2022"},{"location":"week-3-git/ce103-week-3-git/#introduction-to-source-code-management-systems","text":"","title":"Introduction to Source Code Management Systems"},{"location":"week-3-git/ce103-week-3-git/#git-github-gitlab-bitbucket-maven-svn-tfs","text":"Source code management (SCM) is used to track modifications to a source code repository. SCM tracks a running history of changes to a code base and helps resolve conflicts when merging updates from multiple contributors. SCM is also synonymous with Version control. As software projects grow in lines of code and contributor head count, the costs of communication overhead and management complexity also grow. SCM is a critical tool to alleviate the organizational strain of growing development costs.","title":"Git, Github, Gitlab, Bitbucket, Maven, SVN, TFS"},{"location":"week-3-git/ce103-week-3-git/#features-of-source-code-management-systems","text":"Authenticated access for commits Revision history on files Atomic commits of multiple files Versioning/Tagging","title":"Features of Source Code Management Systems"},{"location":"week-3-git/ce103-week-3-git/#why-do-we-need-source-code-management-systems-1","text":"We can save the file with a different name if it\u2019s our school project or one-time papers but for a well-equipped software development? Not a chance.","title":"Why Do We Need Source Code Management Systems? (1)"},{"location":"week-3-git/ce103-week-3-git/#why-do-we-need-source-code-management-systems-2","text":"Big projects need a version control system to track the changes and avoid misunderstanding. A good SCM does the following: Backup and Restore Synchronization Short-Term Undo Long-Term Undo Track Changes Ownership Branching and Merging","title":"Why Do We Need Source Code Management Systems? (2)"},{"location":"week-3-git/ce103-week-3-git/#why-do-we-need-source-code-management-systems-3","text":"Backup and Restore \u2013 Files can be saved at any moment and can be restored from the last saved.","title":"Why Do We Need Source Code Management Systems? (3)"},{"location":"week-3-git/ce103-week-3-git/#why-do-we-need-source-code-management-systems-4","text":"Synchronization \u2013 Programmers can get the latest code and fetch the up-to-date codes from the repository.","title":"Why Do We Need Source Code Management Systems? (4)"},{"location":"week-3-git/ce103-week-3-git/#why-do-we-need-source-code-management-systems-5","text":"Short-Term Undo \u2013 Working with a file and messed it up. We can do a short-term undo to the last known version.","title":"Why Do We Need Source Code Management Systems? (5)"},{"location":"week-3-git/ce103-week-3-git/#why-do-we-need-source-code-management-systems-6","text":"Long-Term Undo \u2013 It helps when we have to make a release version rollback. Something like going to the last version which was created a year","title":"Why Do We Need Source Code Management Systems? (6)"},{"location":"week-3-git/ce103-week-3-git/#why-do-we-need-source-code-management-systems-7","text":"Track Changes \u2013 We can track the changes as when anyone is making any change, he can leave a commit message as for why the change was done.","title":"Why Do We Need Source Code Management Systems? (7)"},{"location":"week-3-git/ce103-week-3-git/#why-do-we-need-source-code-management-systems-8","text":"Ownership \u2013 With every commit made to the master branch, it will ask the owner permission to merge it.","title":"Why Do We Need Source Code Management Systems? (8)"},{"location":"week-3-git/ce103-week-3-git/#why-do-we-need-source-code-management-systems-9","text":"Branching and Merging \u2013 You can create a branch of your source code and create the changes. Once the changes are approved, you can merge it with the master branch.","title":"Why Do We Need Source Code Management Systems? (9)"},{"location":"week-3-git/ce103-week-3-git/#why-do-we-need-source-code-management-systems-10","text":"","title":"Why Do We Need Source Code Management Systems? (10)"},{"location":"week-3-git/ce103-week-3-git/#types-of-version-control-systems","text":"Centralized Version Control (TFS, Subversion) Distributed Version Control (Git and Mercurial)","title":"Types of Version Control Systems"},{"location":"week-3-git/ce103-week-3-git/#centralized-version-control-tfs-subversion-1","text":"The main concept of Centralized Version Control is that it works in a client and server relationship. The repository is located in one place and allows access to multiple clients.","title":"Centralized Version Control (TFS, Subversion) (1)"},{"location":"week-3-git/ce103-week-3-git/#centralized-version-control-tfs-subversion-2","text":"","title":"Centralized Version Control (TFS, Subversion) (2)"},{"location":"week-3-git/ce103-week-3-git/#centralized-version-control-tfs-subversion-3","text":"","title":"Centralized Version Control (TFS, Subversion) (3)"},{"location":"week-3-git/ce103-week-3-git/#centralized-version-control-tfs-subversion-4","text":"It\u2019s very similar to FTP where you have FTP clients which connect to FTP server. Here all the user changes and commits have to pass through the central server. For Ex: Subversion.","title":"Centralized Version Control (TFS, Subversion) (4)"},{"location":"week-3-git/ce103-week-3-git/#centralized-version-control-tfs-subversion-5","text":"The benefits of centralized version control are: It\u2019s easy to understand. There are more GUI and IDE clients. You have more control over the users and access.","title":"Centralized Version Control (TFS, Subversion) (5)"},{"location":"week-3-git/ce103-week-3-git/#centralized-version-control-tfs-subversion-6","text":"We do have drawbacks also: It is dependent on the access to the server. It can be slower because every command from the client has to pass the server. Branching and merging strategies are difficult to use.","title":"Centralized Version Control (TFS, Subversion) (6)"},{"location":"week-3-git/ce103-week-3-git/#distributed-version-control-git-and-mercurial-1","text":"These systems are newer to use. In Distributed Version Control, each user has their own copy of the entire repository as well as the files and history. For Ex: Git and Mercurial","title":"Distributed Version Control (Git and Mercurial) (1)"},{"location":"week-3-git/ce103-week-3-git/#distributed-version-control-git-and-mercurial-2","text":"","title":"Distributed Version Control (Git and Mercurial) (2)"},{"location":"week-3-git/ce103-week-3-git/#distributed-version-control-git-and-mercurial-3","text":"","title":"Distributed Version Control (Git and Mercurial) (3)"},{"location":"week-3-git/ce103-week-3-git/#distributed-version-control-git-and-mercurial-4","text":"The benefits of distributed version control are: More powerful and easy change tracking. No need of a centralized server. Most of the functionalities work in offline mode also apart from sharing the repositories. Branching and Merging strategies are more easy and reliable. It\u2019s faster than the other one.","title":"Distributed Version Control (Git and Mercurial) (4)"},{"location":"week-3-git/ce103-week-3-git/#list-of-source-code-version-management-tools-1","text":"","title":"List of Source Code Version Management Tools (1)"},{"location":"week-3-git/ce103-week-3-git/#list-of-source-code-version-management-tools-2","text":"Github GitLab BitBucket SourceForge Beanstalk","title":"List of Source Code Version Management Tools (2)"},{"location":"week-3-git/ce103-week-3-git/#list-of-source-code-version-management-tools-3","text":"Apache Allura AWS CodeCommit Launchpad Phabricator GitBucket","title":"List of Source Code Version Management Tools (3)"},{"location":"week-3-git/ce103-week-3-git/#git-distributed-source-code-management-1","text":"","title":"GIT (Distributed Source Code Management) (1)"},{"location":"week-3-git/ce103-week-3-git/#git-distributed-source-code-management-2","text":"","title":"GIT (Distributed Source Code Management) (2)"},{"location":"week-3-git/ce103-week-3-git/#git-distributed-source-code-management-3","text":"","title":"GIT (Distributed Source Code Management) (3)"},{"location":"week-3-git/ce103-week-3-git/#git-distributed-source-code-management-4","text":"","title":"GIT (Distributed Source Code Management) (4)"},{"location":"week-3-git/ce103-week-3-git/#git-distributed-source-code-management-5","text":"","title":"GIT (Distributed Source Code Management) (5)"},{"location":"week-3-git/ce103-week-3-git/#a-basic-overview-of-how-git-works-1","text":"Create a \u201crepository\u201d (project) with a git hosting tool (like Bitbucket) Copy (or clone) the repository to your local machine Add a file to your local repo and \u201ccommit\u201d (save) the changes \u201cPush\u201d your changes to your master branch","title":"A Basic Overview of How Git Works (1)"},{"location":"week-3-git/ce103-week-3-git/#git-distributed-source-code-management-6","text":"","title":"GIT (Distributed Source Code Management) (6)"},{"location":"week-3-git/ce103-week-3-git/#a-basic-overview-of-how-git-works-2","text":"Make a change to your file with a git hosting tool and commit \u201cPull\u201d the changes to your local machine Create a \u201cbranch\u201d (version), make a change, commit the change Open a \u201cpull request\u201d. \u201cMerge\u201d your branch to the master branch","title":"A Basic Overview of How Git Works (2)"},{"location":"week-3-git/ce103-week-3-git/#git-distributed-source-code-management-7","text":"","title":"GIT (Distributed Source Code Management) (7)"},{"location":"week-3-git/ce103-week-3-git/#some-of-the-basic-operations-in-git-are","text":"Initialize Add Commit Pull Push","title":"Some of The Basic Operations in GIT are"},{"location":"week-3-git/ce103-week-3-git/#git-distributed-source-code-management-8","text":"","title":"GIT (Distributed Source Code Management) (8)"},{"location":"week-3-git/ce103-week-3-git/#some-of-the-basic-operations-in-git-are_1","text":"","title":"Some of The Basic Operations in GIT are"},{"location":"week-3-git/ce103-week-3-git/#git-distributed-source-code-management-9","text":"","title":"GIT (Distributed Source Code Management) (9)"},{"location":"week-3-git/ce103-week-3-git/#some-of-the-basic-operations-in-git-are_2","text":"Branching Merging Rebasing","title":"Some of The Basic Operations in GIT are"},{"location":"week-3-git/ce103-week-3-git/#git-distributed-source-code-management-10","text":"","title":"GIT (Distributed Source Code Management) (10)"},{"location":"week-3-git/ce103-week-3-git/#some-of-the-basic-operations-in-git-are_3","text":"","title":"Some of The Basic Operations in GIT are"},{"location":"week-3-git/ce103-week-3-git/#git-distributed-source-code-management-8_1","text":"","title":"GIT (Distributed Source Code Management) (8)"},{"location":"week-3-git/ce103-week-3-git/#a-brief-idea-about-how-these-operations-work-with-the-git-repositories-1","text":"","title":"A brief idea about how these operations work with the Git repositories (1)"},{"location":"week-3-git/ce103-week-3-git/#git-distributed-source-code-management-9_1","text":"","title":"GIT (Distributed Source Code Management) (9)"},{"location":"week-3-git/ce103-week-3-git/#a-brief-idea-about-how-these-operations-work-with-the-git-repositories-2","text":"","title":"A brief idea about how these operations work with the Git repositories (2)"},{"location":"week-3-git/ce103-week-3-git/#git-distributed-source-code-management-10_1","text":"","title":"GIT (Distributed Source Code Management) (10)"},{"location":"week-3-git/ce103-week-3-git/#a-brief-idea-about-how-these-operations-work-with-the-git-repositories-3","text":"For more detailed cheetsheat please check the following interactive map NDP Software :: Git Cheatsheet","title":"A brief idea about how these operations work with the Git repositories (3)"},{"location":"week-3-git/ce103-week-3-git/#installation-of-git-1","text":"Check Installation Already Completed git --version","title":"Installation of GIT (1)"},{"location":"week-3-git/ce103-week-3-git/#installation-of-git-2","text":"If your console gives error about git command follow the steps in the link Install Git | Atlassian Git Tutorial In this link you will should download following setup according to your operating system","title":"Installation of GIT (2)"},{"location":"week-3-git/ce103-week-3-git/#installation-of-git-3","text":"","title":"Installation of GIT (3)"},{"location":"week-3-git/ce103-week-3-git/#git-setup-files","text":"Download git for OSX Download git for Windows Download git for Linux","title":"GIT Setup Files"},{"location":"week-3-git/ce103-week-3-git/#installation-of-git-4","text":"Download and install GIT from the following links (both have same github release path) Git - Downloads","title":"Installation of GIT (4)"},{"location":"week-3-git/ce103-week-3-git/#installation-of-git-5","text":"After running setup follow the steps below","title":"Installation of GIT (5)"},{"location":"week-3-git/ce103-week-3-git/#installation-of-git-6","text":"","title":"Installation of GIT (6)"},{"location":"week-3-git/ce103-week-3-git/#installation-of-git-7","text":"","title":"Installation of GIT (7)"},{"location":"week-3-git/ce103-week-3-git/#installation-of-git-8","text":"","title":"Installation of GIT (8)"},{"location":"week-3-git/ce103-week-3-git/#installation-of-git-9","text":"","title":"Installation of GIT (9)"},{"location":"week-3-git/ce103-week-3-git/#installation-of-git-10","text":"","title":"Installation of GIT (10)"},{"location":"week-3-git/ce103-week-3-git/#installation-of-git-extension-windows-1","text":"You can install Git GUI from https://git-scm.com/downloads/guis I prefer to use git extension https://gitextensions.github.io/ and https://tortoisegit.org/ Also Download KDiff3 KDiff3 - Browse Files at SourceForge.net These extensions provide GUI for git operations to make process easier.","title":"Installation of GIT Extension (Windows) (1)"},{"location":"week-3-git/ce103-week-3-git/#configuration-of-git-extension-windows-1","text":"","title":"Configuration of GIT Extension (Windows) (1)"},{"location":"week-3-git/ce103-week-3-git/#configuration-of-git-extension-windows-2","text":"If you install git everything should be green and this configuration is stored on .gitconfig on your home C:/Windows/Users/<user>/.gitconfig","title":"Configuration of GIT Extension (Windows) (2)"},{"location":"week-3-git/ce103-week-3-git/#configuration-of-git-extension-windows-3","text":"[core] editor = \\ \"C:/Program Files (x86)/GitExtensions/GitExtensions.exe\\\" fileeditor autocrlf = true quotePath = false commitGraph = true longpaths = true [user] email = xxxxxxx@gmail.com name = xxxx xxxxxx [filter \"lfs\" ] clean = git-lfs clean -- %f smudge = git-lfs smudge -- %f process = git-lfs filter-process required = true [pull] rebase = false [fetch] prune = false [rebase] autoStash = false [credential] helper = manager [diff] guitool = kdiff3 [difftool \"kdiff3\" ] path = C:/Program Files/KDiff3/kdiff3.exe cmd = \\ \"C:/Program Files/KDiff3/kdiff3.exe\\\" \\ \"$LOCAL\\\" \\ \"$REMOTE\\\" [merge] guitool = tortoisemerge [mergetool \"tortoisemerge\" ] path = C:/Program Files/TortoiseGit/bin/TortoiseGitMerge.exe cmd = \\ \"C:/Program Files/TortoiseGit/bin/TortoiseGitMerge.exe\\\" -base:\\ \"$BASE\\\" -mine:\\ \"$LOCAL\\\" -theirs:\\ \"$REMOTE\\\" -merged:\\ \"$MERGED\\\" [receive] advertisePushOptions = true [gc] writeCommitGraph = true","title":"Configuration of GIT Extension (Windows) (3)"},{"location":"week-3-git/ce103-week-3-git/#configuration-of-git-extension-windows-4","text":"Also in extension you can see similar settings","title":"Configuration of GIT Extension (Windows) (4)"},{"location":"week-3-git/ce103-week-3-git/#configuration-of-git-extension-windows-5","text":"Samples MergeTool tortoisemerge Path to mergetool C:/Program Files/TortoiseGit/bin/TortoiseGitMerge.exe Mergetool command \"C:/Program Files/TortoiseGit/bin/TortoiseGitMerge.exe\" -base:\"$BASE\" -mine:\"$LOCAL\" -theirs:\"$REMOTE\" -merged:\"$MERGED\"","title":"Configuration of GIT Extension (Windows) (5)"},{"location":"week-3-git/ce103-week-3-git/#configuration-of-git-extension-windows-6","text":"Difftool kdiff3 Path to difftool C:/Program Files/KDiff3/kdiff3.exe Difftool command \"C:/Program Files/KDiff3/kdiff3.exe\" \"$LOCAL\" \"$REMOTE\"","title":"Configuration of GIT Extension (Windows) (6)"},{"location":"week-3-git/ce103-week-3-git/#configuration-of-git-extension-windows-7","text":"If you see something as merge and diff tool is not configured, follow the similar settings above on your computer. If you installed kdiff3, tortoisegit and extension you will have same diff and merge tools This topic also help you Git: How can I configure KDiff3 as a merge tool and diff tool? - Stack Overflow","title":"Configuration of GIT Extension (Windows) (7)"},{"location":"week-3-git/ce103-week-3-git/#configuration-of-git-extension-windows-8","text":"","title":"Configuration of GIT Extension (Windows) (8)"},{"location":"week-3-git/ce103-week-3-git/#configuration-of-git-extension-windows-9","text":"Open Git->Config, in your settings you will see path to mergetool and difftool will be empty fill settings like that below find executables in your computer and copy paths to here.","title":"Configuration of GIT Extension (Windows) (9)"},{"location":"week-3-git/ce103-week-3-git/#configuration-of-git-extension-windows-10","text":"","title":"Configuration of GIT Extension (Windows) (10)"},{"location":"week-3-git/ce103-week-3-git/#configuration-of-git-extension-windows-11","text":"Also if we want to change and use different diff and merge tool then we can do this with gitbash console as below C : \\Program Files\\TortoiseGit\\bin Find TortoiseGitIDiff.exe and TortoiseGitMerge.exe","title":"Configuration of GIT Extension (Windows) (11)"},{"location":"week-3-git/ce103-week-3-git/#configuration-of-git-extension-windows-12","text":"Copy path of this applications C : \\Program Files\\TortoiseGit\\bin\\TortoiseGitMerge.exe C : \\Program Files\\TortoiseGit\\bin\\TortoiseGitIDiff.exe","title":"Configuration of GIT Extension (Windows) (12)"},{"location":"week-3-git/ce103-week-3-git/#configuration-of-git-extension-windows-13","text":"open a gitbash console and run following commands git config --global merge.tool TortoiseGitMerge git config --global mergetool.TortoiseGitMerge.path \"C:/Program Files/TortoiseGit/bin/TortoiseGitMerge.exe\" git config --global mergetool.TortoiseGitMerge.trustExitCode false git config --global diff.guitool TortoiseGitIDiff git config --global difftool.TortoiseGitIDiff.path \"C:/Program Files/TortoiseGit/bin/TortoiseGitIDiff.exe\" git config --global difftool.TortoiseGitIDiff.trustExitCode false This updates will be stored on .gitconfig","title":"Configuration of GIT Extension (Windows) (13)"},{"location":"week-3-git/ce103-week-3-git/#using-the-git-extension-1","text":"right click in the git folder and use Git Extension menu for operations. for sample commit click \"Commit\"","title":"Using the GIT Extension (1)"},{"location":"week-3-git/ce103-week-3-git/#using-the-git-extension-1_1","text":"from opening window first stage related files and then write a good commit message finally click commit to local. You can also commit&push it to remote repository.","title":"Using the GIT Extension (1)"},{"location":"week-3-git/ce103-week-3-git/#git-installation-completed","text":"","title":"GIT Installation Completed.."},{"location":"week-3-git/ce103-week-3-git/#installation-of-gig-git-ignore-creator-1","text":"Requirements Python >= 3.6 Internet connection https://github.com/sloria/gig pip install -U gig","title":"Installation of gig (git ignore creator) (1)"},{"location":"week-3-git/ce103-week-3-git/#installation-of-gig-git-ignore-creator-2","text":"","title":"Installation of gig (git ignore creator) (2)"},{"location":"week-3-git/ce103-week-3-git/#installation-of-gig-git-ignore-creator-3","text":"gig --version","title":"Installation of gig (git ignore creator) (3)"},{"location":"week-3-git/ce103-week-3-git/#usage-of-gig-1","text":"List all gitignore templates gig list gig list -global","title":"Usage of gig (1)"},{"location":"week-3-git/ce103-week-3-git/#usage-of-gig-2","text":"Sample gitignore for C Java and Visual Studio gig C Java VisualStudio > .gitignore","title":"Usage of gig (2)"},{"location":"week-3-git/ce103-week-3-git/#usage-of-gig-3","text":"There is a portal for this also by Toptal \u2022 gitignore.io - Create Useful .gitignore Files For Your Project","title":"Usage of gig (3)"},{"location":"week-3-git/ce103-week-3-git/#usage-of-gig-4","text":"for samples you can check the following links. https://github.com/github/gitignore https://dev.to/shihanng/gig-a-gitignore-generator-opc","title":"Usage of gig (4)"},{"location":"week-3-git/ce103-week-3-git/#configuration-of-git-1","text":"It is important to configure your Git because any commits that you make are associated with your configuration details. configuring Git with your username and email. In order to do that, type the following commands in your Git Bash: git config - - global user.name \"<your name>\" git config - - global user.email \"<your email>\"","title":"Configuration of GIT (1)"},{"location":"week-3-git/ce103-week-3-git/#configuration-of-git-2","text":"","title":"Configuration of GIT (2)"},{"location":"week-3-git/ce103-week-3-git/#configuration-of-git-3","text":"git configuration files are located on the user folder","title":"Configuration of GIT (3)"},{"location":"week-3-git/ce103-week-3-git/#configuration-of-git-4","text":"If you want to view all your configuration details, use the command below git config --list","title":"Configuration of GIT (4)"},{"location":"week-3-git/ce103-week-3-git/#using-gitignore-files-with-git-extension-1","text":"with gitignore file","title":"Using .gitignore files with git-extension (1)"},{"location":"week-3-git/ce103-week-3-git/#using-gitignore-files-with-git-extension-2","text":"without gitignore file (just move to another location)","title":"Using .gitignore files with git-extension (2)"},{"location":"week-3-git/ce103-week-3-git/#github-create-repo","text":"","title":"Github Create Repo"},{"location":"week-3-git/ce103-week-3-git/#initilization-of-repo-not-existing-in-github","text":"","title":"Initilization of Repo (not existing in github)"},{"location":"week-3-git/ce103-week-3-git/#git-init","text":"In order to do that, we use the command git init . git init creates an empty Git repository or re-initializes an existing one. It basically creates a .git directory with sub directories and template files. Running a git init in an existing repository will not overwrite things that are already there. It rather picks up the newly added templates. git init","title":"git init"},{"location":"week-3-git/ce103-week-3-git/#git-init_1","text":"","title":"git init"},{"location":"week-3-git/ce103-week-3-git/#adding-initiated-repo-remote-upstream-repo-link-with-github-repo-1","text":"If you enter following command in the git folder you will see nothing git remote -v That mean this repository do not have a remote upstream repository such as a github or bitbucket repo.","title":"Adding Initiated Repo Remote Upstream Repo (Link with Github Repo) (1)"},{"location":"week-3-git/ce103-week-3-git/#adding-initiated-repo-remote-upstream-repo-link-with-github-repo-2","text":"Open the github and bitbucket repository and copy project path from","title":"Adding Initiated Repo Remote Upstream Repo (Link with Github Repo) (2)"},{"location":"week-3-git/ce103-week-3-git/#adding-initiated-repo-remote-upstream-repo-link-with-github-repo-3","text":"you will see the following sample from github code button https://github.com/ucoruh/ce103-sample-text.git","title":"Adding Initiated Repo Remote Upstream Repo (Link with Github Repo) (3)"},{"location":"week-3-git/ce103-week-3-git/#adding-initiated-repo-remote-upstream-repo-link-with-github-repo-4","text":"copy link and use with following command git remote add origin https://github.com/ucoruh/ce103-sample-text.git","title":"Adding Initiated Repo Remote Upstream Repo (Link with Github Repo) (4)"},{"location":"week-3-git/ce103-week-3-git/#adding-initiated-repo-remote-upstream-repo-link-with-github-repo-5","text":"then you can check your remote setting with $ git remote -v origin https://github.com/ucoruh/ce103-sample-text.git (fetch) origin https://github.com/ucoruh/ce103-sample-text.git (push)","title":"Adding Initiated Repo Remote Upstream Repo (Link with Github Repo) (5)"},{"location":"week-3-git/ce103-week-3-git/#adding-initiated-repo-remote-upstream-repo-link-with-github-repo-6","text":"you can check the following sample How to Add a New Remote to your Git Repo | Assembla Help Center","title":"Adding Initiated Repo Remote Upstream Repo (Link with Github Repo) (6)"},{"location":"week-3-git/ce103-week-3-git/#now-you-can-push-your-local-changes-to-remote-repository","text":"","title":"Now you can push your local changes to remote repository"},{"location":"week-3-git/ce103-week-3-git/#if-you-see-a-repository-on-github-then-you-can-download-with-following-operation","text":"","title":"If you see a repository on Github then you can download with following operation"},{"location":"week-3-git/ce103-week-3-git/#checkout-a-repository-1","text":"create a working copy of a local repository by running the command git clone /path/to/repository","title":"Checkout a Repository (1)"},{"location":"week-3-git/ce103-week-3-git/#checkout-a-repository-2","text":"Sample clone command git clone https://github.com/ucoruh/ce103-sample-text.git","title":"Checkout a Repository (2)"},{"location":"week-3-git/ce103-week-3-git/#checkout-a-repository-3","text":"when using a remote server, your command will be git clone username@host:/path/to/repository","title":"Checkout a Repository (3)"},{"location":"week-3-git/ce103-week-3-git/#checking-repository-status-1","text":"","title":"Checking Repository Status (1)"},{"location":"week-3-git/ce103-week-3-git/#git-status","text":"The git status command lists all the modified files which are ready to be added to the local repository. git status","title":"git status"},{"location":"week-3-git/ce103-week-3-git/#checking-repository-status-2","text":"","title":"Checking Repository Status (2)"},{"location":"week-3-git/ce103-week-3-git/#git-status_1","text":"","title":"git status"},{"location":"week-3-git/ce103-week-3-git/#adding-files-to-index-1","text":"","title":"Adding Files to Index (1)"},{"location":"week-3-git/ce103-week-3-git/#git-add","text":"This command updates the index using the current content found in the working tree and then prepares the content in the staging area for the next commit. git add < directory> git add < file> git add *","title":"git add"},{"location":"week-3-git/ce103-week-3-git/#adding-files-to-index-1_1","text":"","title":"Adding Files to Index (1)"},{"location":"week-3-git/ce103-week-3-git/#git-add_1","text":"Created two more files edureka3.txt and edureka4.txt. Let us add the files using the command git add -A. This command will add all the files to the index which are in the directory but not updated in the index yet.","title":"git add"},{"location":"week-3-git/ce103-week-3-git/#commit-changes-1","text":"","title":"Commit Changes (1)"},{"location":"week-3-git/ce103-week-3-git/#git-commit","text":"\u2022It refers to recording snapshots of the repository at a given time. Committed snapshots will never change unless done explicitly.","title":"git commit"},{"location":"week-3-git/ce103-week-3-git/#commit-changes-2","text":"","title":"Commit Changes (2)"},{"location":"week-3-git/ce103-week-3-git/#git-commit_1","text":"Let me explain how commit works with the diagram below Here, C1 is the initial commit, i.e. the snapshot of the first change from which another snapshot is created with changes named C2. Note that the master points to the latest commit. Now, when I commit again, another snapshot C3 is created and now the master points to C3 instead of C2.","title":"git commit"},{"location":"week-3-git/ce103-week-3-git/#commit-changes-3","text":"","title":"Commit Changes (3)"},{"location":"week-3-git/ce103-week-3-git/#git-commit_2","text":"Commands: git commit -m \"<message>\" Now, if you want to commit a snapshot of all the changes in the working directory at once, you can use the command below","title":"git commit"},{"location":"week-3-git/ce103-week-3-git/#commit-changes-4","text":"","title":"Commit Changes (4)"},{"location":"week-3-git/ce103-week-3-git/#git-commit_3","text":"Please check writing good commit messages article below How to write a good commit message - DEV Community","title":"git commit"},{"location":"week-3-git/ce103-week-3-git/#writing-good-commit-messages-1","text":"type: subject body (optional) footer (optional)","title":"Writing Good Commit Messages (1)"},{"location":"week-3-git/ce103-week-3-git/#writing-good-commit-messages-2","text":"","title":"Writing Good Commit Messages (2)"},{"location":"week-3-git/ce103-week-3-git/#1-type","text":"feat - a new feature fix - a bug fix docs - changes in documentation style - everything related to styling refactor - code changes that neither fixes a bug or adds a feature test - everything related to testing chore - updating build tasks, package manager configs, etc","title":"1. Type"},{"location":"week-3-git/ce103-week-3-git/#writing-good-commit-messages-3","text":"","title":"Writing Good Commit Messages (3)"},{"location":"week-3-git/ce103-week-3-git/#2-subject","text":"This contains a short description of the changes made. It shouldn't be greater than 50 characters, should begin with a capital letter and written in the imperative eg. Add instead of Added or Adds.","title":"2. Subject"},{"location":"week-3-git/ce103-week-3-git/#writing-good-commit-messages-4","text":"","title":"Writing Good Commit Messages (4)"},{"location":"week-3-git/ce103-week-3-git/#3-body","text":"The body is used to explain what changes you made and why you made them. Not all commits are complex enough that they need a body, especially if you are working on a personal project alone, and as such writing a body is optional. A blank line between the body and the subject is required and each line should have no more than 72 characters.","title":"3. Body"},{"location":"week-3-git/ce103-week-3-git/#writing-good-commit-messages-5","text":"","title":"Writing Good Commit Messages (5)"},{"location":"week-3-git/ce103-week-3-git/#4footer","text":"The footer is also optional and mainly used when you are using an issue tracker to reference the issue ID.","title":"4.Footer"},{"location":"week-3-git/ce103-week-3-git/#writing-good-commit-messages-6","text":"","title":"Writing Good Commit Messages (6)"},{"location":"week-3-git/ce103-week-3-git/#example-commit-message","text":"feat: Summarize changes in around 50 characters or less More detailed explanatory text, if necessary. Wrap it to about 72 characters or so. In some contexts, the first line is treated as the subject of the commit and the rest of the text as the body. The blank line separating the summary from the body is critical (unless you omit the body entirely); various tools like `log`, `shortlog` and `rebase` can get confused if you run the two together. Explain the problem that this commit is solving. Focus on why you are making this change as opposed to how (the code explains that). Are there side effects or other unintuitive consequences of this change? Here's the place to explain them. Further paragraphs come after blank lines. - Bullet points are okay, too - Typically a hyphen or asterisk is used for the bullet, preceded by a single space, with blank lines in between, but conventions vary here If you use an issue tracker, put references to them at the bottom, like this: Resolves: #123 See also: #456, #789","title":"Example Commit Message"},{"location":"week-3-git/ce103-week-3-git/#writing-good-commit-messages-7","text":"git commit -a","title":"Writing Good Commit Messages (7)"},{"location":"week-3-git/ce103-week-3-git/#add-files-to-index-1","text":"I have created two more text files in my working directory viz. edureka5.txt and edureka6.txt but they are not added to the index yet. I am adding edureka5.txt using the command git add edureka5.txt","title":"Add Files to Index (1)"},{"location":"week-3-git/ce103-week-3-git/#add-files-to-index-2","text":"","title":"Add Files to Index (2)"},{"location":"week-3-git/ce103-week-3-git/#add-files-to-index-3","text":"I have added edureka5.txt to the index explicitly but not edureka6.txt and made changes in the previous files. I want to commit all changes in the directory at once.","title":"Add Files to Index (3)"},{"location":"week-3-git/ce103-week-3-git/#add-files-to-index-4","text":"This command will commit a snapshot of all changes in the working directory but only includes modifications to tracked files i.e. the files that have been added with git add at some point in their history. Hence, edureka6.txt was not committed because it was not added to the index yet. But changes in all previous files present in the repository were committed, i.e. edureka1.txt, edureka2.txt, edureka3.txt, edureka4.txt and edureka5.txt. Now I have made my desired commits in my local repository","title":"Add Files to Index (4)"},{"location":"week-3-git/ce103-week-3-git/#add-files-to-index-5","text":"your local repository consists of three \"trees\" maintained by git. the first one is your Working Directory which holds the actual files. the second one is the Index which acts as a staging area and finally the HEAD which points to the last commit you've made","title":"Add Files to Index (5)"},{"location":"week-3-git/ce103-week-3-git/#add-files-to-index-6","text":"","title":"Add Files to Index (6)"},{"location":"week-3-git/ce103-week-3-git/#update-local-repo-before-sending-1","text":"","title":"Update local repo before sending (1)"},{"location":"week-3-git/ce103-week-3-git/#fetching","text":"If we have a remote Git branch, for example a branch on Github, it can happen that the remote branch has commits that the current branch doesn't have! Maybe another branch got merged, your colleague pushed a quick fix, and so on.","title":"Fetching"},{"location":"week-3-git/ce103-week-3-git/#update-local-repo-before-sending-2","text":"","title":"Update local repo before sending (2)"},{"location":"week-3-git/ce103-week-3-git/#fetching_1","text":"We can get these changes locally, by performing a git fetch on the remote branch! It doesn't affect your local branch in any way: a fetch simply downloads new data.","title":"Fetching"},{"location":"week-3-git/ce103-week-3-git/#update-local-repo-before-sending-3","text":"","title":"Update local repo before sending (3)"},{"location":"week-3-git/ce103-week-3-git/#fetching_2","text":"","title":"Fetching"},{"location":"week-3-git/ce103-week-3-git/#update-local-repo-before-sending-4","text":"","title":"Update local repo before sending (4)"},{"location":"week-3-git/ce103-week-3-git/#fetching_3","text":"We can now see all the changes that have been made since we last pushed! We can decide what we want to do with the new data now that we have it locally.","title":"Fetching"},{"location":"week-3-git/ce103-week-3-git/#update-local-repo-before-sending-5","text":"","title":"Update local repo before sending (5)"},{"location":"week-3-git/ce103-week-3-git/#pulling","text":"Although a git fetch is very useful in order to get the remote information of a branch, we can also perform a git pull . A git pull is actually two commands in one: a git fetch , and a git merge . When we're pulling changes from the origin, we're first fetching all the data like we did with a git fetch , after which the latest changes are automatically merged into the local branch","title":"Pulling"},{"location":"week-3-git/ce103-week-3-git/#update-local-repo-before-sending-6","text":"","title":"Update local repo before sending (6)"},{"location":"week-3-git/ce103-week-3-git/#pulling_1","text":"","title":"Pulling"},{"location":"week-3-git/ce103-week-3-git/#update-local-repo-before-sending-7","text":"","title":"Update local repo before sending (7)"},{"location":"week-3-git/ce103-week-3-git/#pulling_2","text":"Awesome, we're now perfectly in sync with the remote branch and have all the latest changes!","title":"Pulling"},{"location":"week-3-git/ce103-week-3-git/#update-local-repo-before-sending-8","text":"","title":"Update local repo before sending (8)"},{"location":"week-3-git/ce103-week-3-git/#pulling_3","text":"","title":"Pulling"},{"location":"week-3-git/ce103-week-3-git/#git-pull","text":"Note that before you affect changes to the central repository you should always pull changes from the central repository to your local repository to get updated with the work of all the collaborators that have been contributing in the central repository. For that we will use the pull command.","title":"git pull"},{"location":"week-3-git/ce103-week-3-git/#update-local-repo-before-sending-9","text":"","title":"Update local repo before sending (9)"},{"location":"week-3-git/ce103-week-3-git/#pulling_4","text":"","title":"Pulling"},{"location":"week-3-git/ce103-week-3-git/#git-pull_1","text":"But first, you need to set your central repository as origin using the command git remote add origin < link of your central repository>","title":"git pull"},{"location":"week-3-git/ce103-week-3-git/#update-local-repo-before-sending-10","text":"","title":"Update local repo before sending (10)"},{"location":"week-3-git/ce103-week-3-git/#pulling-git-pull","text":"Now that my origin is set","title":"Pulling / git pull"},{"location":"week-3-git/ce103-week-3-git/#update-local-repo-before-sending-11","text":"","title":"Update local repo before sending (11)"},{"location":"week-3-git/ce103-week-3-git/#pulling-git-pull_1","text":"let us extract files from the origin using pull. For that use the command git pull origin master","title":"Pulling / git pull"},{"location":"week-3-git/ce103-week-3-git/#update-local-repo-before-sending-12","text":"","title":"Update local repo before sending (12)"},{"location":"week-3-git/ce103-week-3-git/#pulling-git-pull_2","text":"This command will copy all the files from the master branch of remote repository to your local repository.","title":"Pulling / git pull"},{"location":"week-3-git/ce103-week-3-git/#update-local-repo-before-sending-13","text":"","title":"Update local repo before sending (13)"},{"location":"week-3-git/ce103-week-3-git/#pulling-git-pull_3","text":"Since my local repository was already updated with files from master branch, hence the message is Already up-to-date. Refer to the screen shot above","title":"Pulling / git pull"},{"location":"week-3-git/ce103-week-3-git/#update-local-repo-before-sending-14","text":"","title":"Update local repo before sending (14)"},{"location":"week-3-git/ce103-week-3-git/#pulling-git-pull_4","text":"One can also try pulling files from a different branch using the following command: git pull origin < branch-name>","title":"Pulling / git pull"},{"location":"week-3-git/ce103-week-3-git/#update-local-repo-before-sending-15","text":"","title":"Update local repo before sending (15)"},{"location":"week-3-git/ce103-week-3-git/#pulling-git-pull_5","text":"Your local Git repository is now updated with all the recent changes. It is time you make changes in the central repository by using the push command.","title":"Pulling / git pull"},{"location":"week-3-git/ce103-week-3-git/#send-changes-to-remote-repo-1","text":"","title":"Send Changes to Remote Repo (1)"},{"location":"week-3-git/ce103-week-3-git/#git-push","text":"This command transfers commits from your local repository to your remote repository. It is the opposite of pull operation.","title":"git push"},{"location":"week-3-git/ce103-week-3-git/#send-changes-to-remote-repo-2","text":"","title":"Send Changes to Remote Repo (2)"},{"location":"week-3-git/ce103-week-3-git/#git-push_1","text":"Pulling imports commits to local repositories whereas pushing exports commits to the remote repositories","title":"git push"},{"location":"week-3-git/ce103-week-3-git/#send-changes-to-remote-repo-3","text":"","title":"Send Changes to Remote Repo (3)"},{"location":"week-3-git/ce103-week-3-git/#git-push_2","text":"The use of git push is to publish your local changes to a central repository. After you\u2019ve accumulated several local commits and are ready to share them with the rest of the team,","title":"git push"},{"location":"week-3-git/ce103-week-3-git/#send-changes-to-remote-repo-4","text":"","title":"Send Changes to Remote Repo (4)"},{"location":"week-3-git/ce103-week-3-git/#git-push_3","text":"you can then push them to the central repository by using the following command git push < remote>","title":"git push"},{"location":"week-3-git/ce103-week-3-git/#send-changes-to-remote-repo-5","text":"","title":"Send Changes to Remote Repo (5)"},{"location":"week-3-git/ce103-week-3-git/#git-push_4","text":"This remote refers to the remote repository which had been set before using the pull command.","title":"git push"},{"location":"week-3-git/ce103-week-3-git/#send-changes-to-remote-repo-6","text":"","title":"Send Changes to Remote Repo (6)"},{"location":"week-3-git/ce103-week-3-git/#git-push_5","text":"This pushes the changes from the local repository to the remote repository along with all the necessary commits and internal objects. This creates a local branch in the destination repository","title":"git push"},{"location":"week-3-git/ce103-week-3-git/#send-changes-to-remote-repo-7","text":"","title":"Send Changes to Remote Repo (7)"},{"location":"week-3-git/ce103-week-3-git/#git-push_6","text":"The below files are the files which we have already committed previously in the commit section and they are all \u201cpush-ready\u201c.","title":"git push"},{"location":"week-3-git/ce103-week-3-git/#send-changes-to-remote-repo-8","text":"","title":"Send Changes to Remote Repo (8)"},{"location":"week-3-git/ce103-week-3-git/#git-push_7","text":"I will use the command git push origin master to reflect these files in the master branch of my central repository.","title":"git push"},{"location":"week-3-git/ce103-week-3-git/#send-changes-to-remote-repo-9","text":"","title":"Send Changes to Remote Repo (9)"},{"location":"week-3-git/ce103-week-3-git/#git-push_8","text":"","title":"git push"},{"location":"week-3-git/ce103-week-3-git/#send-changes-to-remote-repo-10","text":"","title":"Send Changes to Remote Repo (10)"},{"location":"week-3-git/ce103-week-3-git/#git-push_9","text":"","title":"git push"},{"location":"week-3-git/ce103-week-3-git/#send-changes-to-remote-repo-11","text":"","title":"Send Changes to Remote Repo (11)"},{"location":"week-3-git/ce103-week-3-git/#git-push_10","text":"","title":"git push"},{"location":"week-3-git/ce103-week-3-git/#send-changes-to-remote-repo-12","text":"","title":"Send Changes to Remote Repo (12)"},{"location":"week-3-git/ce103-week-3-git/#git-push_11","text":"To prevent overwriting, Git does not allow push when it results in a non-fast forward merge in the destination repository.","title":"git push"},{"location":"week-3-git/ce103-week-3-git/#send-changes-to-remote-repo-13","text":"","title":"Send Changes to Remote Repo (13)"},{"location":"week-3-git/ce103-week-3-git/#git-push_12","text":"A non-fast forward merge means an upstream merge i.e. merging with ancestor or parent branches from a child branch To enable such merge, use the command below git push < remote > -force The above command forces the push operation even if it results in a non-fast forward merge","title":"git push"},{"location":"week-3-git/ce103-week-3-git/#branching-1","text":"","title":"Branching (1)"},{"location":"week-3-git/ce103-week-3-git/#git-branch","text":"Branches in Git are nothing but pointers to a specific commit. Git generally prefers to keep its branches as lightweight as possible.","title":"git branch"},{"location":"week-3-git/ce103-week-3-git/#branching-2","text":"","title":"Branching (2)"},{"location":"week-3-git/ce103-week-3-git/#git-branch_1","text":"There are basically two types of branches viz. local branches remote tracking branches.","title":"git branch"},{"location":"week-3-git/ce103-week-3-git/#branching-3","text":"","title":"Branching (3)"},{"location":"week-3-git/ce103-week-3-git/#git-branch_2","text":"A local branch is just another path of your working tree. On the other hand, remote tracking branches have special purposes. Some of them are: They link your work from the local repository to the work on central repository.","title":"git branch"},{"location":"week-3-git/ce103-week-3-git/#branching-4","text":"","title":"Branching (4)"},{"location":"week-3-git/ce103-week-3-git/#git-branch_3","text":"They automatically detect which remote branches to get changes from, when you use git pull.","title":"git branch"},{"location":"week-3-git/ce103-week-3-git/#branching-5","text":"","title":"Branching (5)"},{"location":"week-3-git/ce103-week-3-git/#learn-current-branch","text":"You can check what your current branch is by using the command git branch The one mantra that you should always be chanting while branching is \u201cbranch early, and branch often\u201d","title":"Learn current branch"},{"location":"week-3-git/ce103-week-3-git/#branching-6","text":"","title":"Branching (6)"},{"location":"week-3-git/ce103-week-3-git/#list-local-branches","text":"git branch -l","title":"List Local Branches"},{"location":"week-3-git/ce103-week-3-git/#branching-7","text":"","title":"Branching (7)"},{"location":"week-3-git/ce103-week-3-git/#list-remote-branches","text":"git branch -r","title":"List Remote Branches"},{"location":"week-3-git/ce103-week-3-git/#branching-8","text":"","title":"Branching (8)"},{"location":"week-3-git/ce103-week-3-git/#list-all-local-and-remote-branches","text":"git branch -a","title":"List All Local and Remote Branches"},{"location":"week-3-git/ce103-week-3-git/#branching-9","text":"Removing merged git branches (after pull-request action in github) If you merged your branch to base branch in github and delete it on github your local branch list will not be updated by it self. You have to use the following command to update local and remote branch lists. Use the following command to syncronize your repository with remote upstream repo. git remote update --prune","title":"Branching (9)"},{"location":"week-3-git/ce103-week-3-git/#branching-10","text":"","title":"Branching (10)"},{"location":"week-3-git/ce103-week-3-git/#create-branch","text":"To create a new branch we use the following command git branch < branch-name> The diagram below shows the workflow when a new branch is created. When we create a new branch it originates from the master branch itself.","title":"Create Branch"},{"location":"week-3-git/ce103-week-3-git/#branching-11","text":"","title":"Branching (11)"},{"location":"week-3-git/ce103-week-3-git/#create-branch_1","text":"","title":"Create Branch"},{"location":"week-3-git/ce103-week-3-git/#branching-12","text":"","title":"Branching (12)"},{"location":"week-3-git/ce103-week-3-git/#create-branch_2","text":"Since there is no storage/memory overhead with making many branches, it is easier to logically divide up your work rather than have big chunky branches You can create and change branch with following command, create a new branch named \"feature_x\" and switch to it using git checkout -b feature_x","title":"Create Branch"},{"location":"week-3-git/ce103-week-3-git/#branching-13","text":"","title":"Branching (13)"},{"location":"week-3-git/ce103-week-3-git/#change-branch","text":"git checkout < branch-name> git checkout master","title":"Change Branch"},{"location":"week-3-git/ce103-week-3-git/#branching-14","text":"","title":"Branching (14)"},{"location":"week-3-git/ce103-week-3-git/#change-branch_1","text":"Branching includes the work of a particular commit along with all parent commits. As you can see in the diagram above, the newBranch has detached itself from the master and hence will create a different path","title":"Change Branch"},{"location":"week-3-git/ce103-week-3-git/#branching-15","text":"","title":"Branching (15)"},{"location":"week-3-git/ce103-week-3-git/#delete-local-branch","text":"and delete the branch again, before doing this switch to main or master branches. git branch -d feature_x","title":"Delete Local Branch"},{"location":"week-3-git/ce103-week-3-git/#branching-16","text":"","title":"Branching (16)"},{"location":"week-3-git/ce103-week-3-git/#delete-remote-branch","text":"and delete the branch again, before doing this switch to main or master branches. git push origin --delete feature_x How to delete remote branches in Git","title":"Delete Remote Branch"},{"location":"week-3-git/ce103-week-3-git/#branching-17","text":"","title":"Branching (17)"},{"location":"week-3-git/ce103-week-3-git/#push-specific-branch-to-remote","text":"A branch is not available to others unless you push the branch to your remote repository git push origin < branch>","title":"Push Specific Branch to Remote"},{"location":"week-3-git/ce103-week-3-git/#branching-18","text":"","title":"Branching (18)"},{"location":"week-3-git/ce103-week-3-git/#update-merge-conflicts","text":"to update your local repository to the newest commit, execute git pull in your working directory to fetch and merge remote changes. to merge another branch into your active branch (e.g. master), use git merge <branch>","title":"Update &amp; Merge (Conflicts)"},{"location":"week-3-git/ce103-week-3-git/#branching-19","text":"","title":"Branching (19)"},{"location":"week-3-git/ce103-week-3-git/#update-merge-conflicts_1","text":"in both cases git tries to auto-merge changes. Unfortunately, this is not always possible and results in conflicts. You are responsible to merge those conflicts manually by editing the files shown by git. After changing, you need to mark them as merged with git add <filename> before merging changes, you can also preview them by using git diff <source_branch> <target_branch> Git merge conflicts | Atlassian Git Tutorial","title":"Update &amp; Merge (Conflicts)"},{"location":"week-3-git/ce103-week-3-git/#branching-20","text":"","title":"Branching (20)"},{"location":"week-3-git/ce103-week-3-git/#update-merge-conflicts_2","text":"There are two types of merges Git can perform: a fast-forward , or a no-fast-forward","title":"Update &amp; Merge (Conflicts)"},{"location":"week-3-git/ce103-week-3-git/#branching-21","text":"","title":"Branching (21)"},{"location":"week-3-git/ce103-week-3-git/#update-merge-conflicts_3","text":"","title":"Update &amp; Merge (Conflicts)"},{"location":"week-3-git/ce103-week-3-git/#fast-forward-ff","text":"A fast-forward merge can happen when the current branch has no extra commits compared to the branch we\u2019re merging. Git is... lazy and will first try to perform the easiest option: the fast-forward! This type of merge doesn\u2019t create a new commit, but rather merges the commit(s) on the branch we\u2019re merging right in the current branch","title":"Fast-forward (--ff)"},{"location":"week-3-git/ce103-week-3-git/#branching-22","text":"","title":"Branching (22)"},{"location":"week-3-git/ce103-week-3-git/#update-merge-conflicts_4","text":"","title":"Update &amp; Merge (Conflicts)"},{"location":"week-3-git/ce103-week-3-git/#fast-forward-ff_1","text":"","title":"Fast-forward (--ff)"},{"location":"week-3-git/ce103-week-3-git/#branching-23","text":"","title":"Branching (23)"},{"location":"week-3-git/ce103-week-3-git/#update-merge-conflicts_5","text":"Perfect! We now have all the changes that were made on the dev branch available on the master branch. So, what's the no-fast-forward all about?","title":"Update &amp; Merge (Conflicts)"},{"location":"week-3-git/ce103-week-3-git/#branching-24","text":"","title":"Branching (24)"},{"location":"week-3-git/ce103-week-3-git/#update-merge-conflicts_6","text":"","title":"Update &amp; Merge (Conflicts)"},{"location":"week-3-git/ce103-week-3-git/#no-fast-foward-no-ff","text":"It's great if your current branch doesn't have any extra commits compared to the branch that you want to merge, but unfortunately that's rarely the case! If we committed changes on the current branch that the branch we want to merge doesn't have, git will perform a no-fast-forward merge.","title":"No-fast-foward (--no-ff)"},{"location":"week-3-git/ce103-week-3-git/#branching-25","text":"","title":"Branching (25)"},{"location":"week-3-git/ce103-week-3-git/#update-merge-conflicts_7","text":"","title":"Update &amp; Merge (Conflicts)"},{"location":"week-3-git/ce103-week-3-git/#no-fast-foward-no-ff_1","text":"With a no-fast-forward merge, Git creates a new merging commit on the active branch. The commit's parent commits point to both the active branch and the branch that we want to merge!","title":"No-fast-foward (--no-ff)"},{"location":"week-3-git/ce103-week-3-git/#branching-26","text":"","title":"Branching (26)"},{"location":"week-3-git/ce103-week-3-git/#update-merge-conflicts_8","text":"","title":"Update &amp; Merge (Conflicts)"},{"location":"week-3-git/ce103-week-3-git/#no-fast-foward-no-ff_2","text":"","title":"No-fast-foward (--no-ff)"},{"location":"week-3-git/ce103-week-3-git/#branching-27","text":"","title":"Branching (27)"},{"location":"week-3-git/ce103-week-3-git/#update-merge-conflicts_9","text":"","title":"Update &amp; Merge (Conflicts)"},{"location":"week-3-git/ce103-week-3-git/#no-fast-foward-no-ff_3","text":"No big deal, a perfect merge! The master branch now contains all the changes that we've made on the dev branch.","title":"No-fast-foward (--no-ff)"},{"location":"week-3-git/ce103-week-3-git/#branching-28","text":"","title":"Branching (28)"},{"location":"week-3-git/ce103-week-3-git/#merge-conflicts","text":"Although Git is good at deciding how to merge branches and add changes to files, it cannot always make this decision all by itself This can happen when the two branches we're trying to merge have changes on the same line in the same file, or if one branch deleted a file that another branch modified, and so on.","title":"Merge Conflicts"},{"location":"week-3-git/ce103-week-3-git/#branching-29","text":"","title":"Branching (29)"},{"location":"week-3-git/ce103-week-3-git/#merge-conflicts_1","text":"In that case, Git will ask you to help decide which of the two options we want to keep! Let's say that on both branches, we edited the first line in the README.md .","title":"Merge Conflicts"},{"location":"week-3-git/ce103-week-3-git/#branching-30","text":"","title":"Branching (30)"},{"location":"week-3-git/ce103-week-3-git/#merge-conflicts_2","text":"If we want to merge dev into master , this will end up in a merge conflict: would you like the title to be Hello! or Hey! ?","title":"Merge Conflicts"},{"location":"week-3-git/ce103-week-3-git/#branching-31","text":"","title":"Branching (31)"},{"location":"week-3-git/ce103-week-3-git/#merge-conflicts_3","text":"When trying to merge the branches, Git will show you where the conflict happens. We can manually remove the changes we don't want to keep, save the changes, add the changed file again, and commit the changes","title":"Merge Conflicts"},{"location":"week-3-git/ce103-week-3-git/#branching-32","text":"","title":"Branching (32)"},{"location":"week-3-git/ce103-week-3-git/#merge-conflicts_4","text":"Although merge conflicts are often quite annoying, it makes total sense: Git shouldn't just assume which change we want to keep","title":"Merge Conflicts"},{"location":"week-3-git/ce103-week-3-git/#branching-33","text":"","title":"Branching (33)"},{"location":"week-3-git/ce103-week-3-git/#sample-conflict-1","text":"participants.txt ( I added a hyphen before each name ) Finance team Charles Lisa John Stacy Alexander git init git add . git commit \u2013m 'Initial list for finance team'","title":"Sample Conflict -1"},{"location":"week-3-git/ce103-week-3-git/#branching-34","text":"","title":"Branching (34)"},{"location":"week-3-git/ce103-week-3-git/#sample-conflict-1_1","text":"Create a new branch called marketing using the following syntax git checkout \u2013b marketing","title":"Sample Conflict -1"},{"location":"week-3-git/ce103-week-3-git/#branching-35","text":"","title":"Branching (35)"},{"location":"week-3-git/ce103-week-3-git/#sample-conflict-1_2","text":"Now open the participants.txt file and start entering the names for the marketing department below the finance team list, as follows: ( I added a hyphen before each name ) Marketing team Collins Linda Patricia Morgan git add . git commit \u2013m 'Unfinished list of marketing team' git checkout master","title":"Sample Conflict -1"},{"location":"week-3-git/ce103-week-3-git/#branching-36","text":"","title":"Branching (36)"},{"location":"week-3-git/ce103-week-3-git/#sample-conflict-1_3","text":"Open the file and delete the names Alexander and Stacy , save, close, add the changes, and commit with the commit message Final list from Finance team git add . git commit \u2013m \"Final list from Finance team\" git checkout marketing","title":"Sample Conflict -1"},{"location":"week-3-git/ce103-week-3-git/#branching-37","text":"","title":"Branching (37)"},{"location":"week-3-git/ce103-week-3-git/#sample-conflict-1_4","text":"Open the file and add the fifth name, Amanda , for the marketing team, save, add, and commit git add . git commit \u2013m \"Initial list of marketing team\" names entered for marketing have been confirmed; now we need to merge these two lists, which can be done by the following command git merge master","title":"Sample Conflict -1"},{"location":"week-3-git/ce103-week-3-git/#branching-38","text":"","title":"Branching (38)"},{"location":"week-3-git/ce103-week-3-git/#sample-conflict-1_5","text":"Auto-merging participants.txt CONFLICT (content): Merge conflict in participants.txt Automatic merge failed; fix conflicts and then commit the result.","title":"Sample Conflict -1"},{"location":"week-3-git/ce103-week-3-git/#branching-39","text":"","title":"Branching (39)"},{"location":"week-3-git/ce103-week-3-git/#sample-conflict-1_6","text":"Finance team -Charles -Lisa -John <<<<<<< HEAD -Stacy -Alexander Marketing team - Collins - Linda - Patricia - Morgan - Amanda ======= >>>>>>> master","title":"Sample Conflict -1"},{"location":"week-3-git/ce103-week-3-git/#branching-40","text":"","title":"Branching (40)"},{"location":"week-3-git/ce103-week-3-git/#sample-conflict-1_7","text":"<<<<<<< Changes made on the branch that is being merged into. In most cases, this is the branch that I have currently checked out (i.e. HEAD). ||||||| The common ancestor version. ======= Changes made on the branch that is being merged in. This is often a feature/topic branch. >>>>>>>","title":"Sample Conflict -1"},{"location":"week-3-git/ce103-week-3-git/#branching-41","text":"","title":"Branching (41)"},{"location":"week-3-git/ce103-week-3-git/#sample-conflict-1_8","text":"remove them keep the lines you want to see in the final version of the file add and commit","title":"Sample Conflict -1"},{"location":"week-3-git/ce103-week-3-git/#branching-42","text":"","title":"Branching (42)"},{"location":"week-3-git/ce103-week-3-git/#sample-conflict-1_9","text":"If we want to save all to our version git checkout --ours . # checkout our local version of all files git add -u # mark all conflicted files as merged git commit # commit the merge","title":"Sample Conflict -1"},{"location":"week-3-git/ce103-week-3-git/#branching-43","text":"","title":"Branching (43)"},{"location":"week-3-git/ce103-week-3-git/#sample-conflict-1_10","text":"If we want to discard all our revision git checkout --theirs . # checkout remote version of all files git add -u # mark all conflicted files as merged git commit # commit the merge","title":"Sample Conflict -1"},{"location":"week-3-git/ce103-week-3-git/#branching-44","text":"","title":"Branching (44)"},{"location":"week-3-git/ce103-week-3-git/#sample-conflict-2","text":"You're going to pull some changes, but oops, you're not up to date: git fetch origin git pull origin master From ssh://gitosis@example.com:22/projectname * branch master - > FETCH_HEAD Updating a030c3a..ee25213 error: Entry 'filename.c' not uptodate. Cannot merge.","title":"Sample Conflict -2"},{"location":"week-3-git/ce103-week-3-git/#branching-45","text":"","title":"Branching (45)"},{"location":"week-3-git/ce103-week-3-git/#sample-conflict-2_1","text":"So you get up-to-date and try again, but have a conflict: git add filename.c git commit -m \"made some wild and crazy changes\" git pull origin master From ssh://gitosis@example.com:22/projectname * branch master - > FETCH_HEAD Auto-merging filename.c CONFLICT (content): Merge conflict in filename.c Automatic merge failed; fix conflicts and then commit the result.","title":"Sample Conflict -2"},{"location":"week-3-git/ce103-week-3-git/#branching-46","text":"","title":"Branching (46)"},{"location":"week-3-git/ce103-week-3-git/#sample-conflict-2_2","text":"So you decide to take a look at the changes: git mergetool Oh my, oh my, upstream changed some things, but just to use my changes...no...their changes... git checkout --ours filename.c git checkout --theirs filename.c git add filename.c git commit -m \"using theirs\"","title":"Sample Conflict -2"},{"location":"week-3-git/ce103-week-3-git/#branching-47","text":"","title":"Branching (47)"},{"location":"week-3-git/ce103-week-3-git/#sample-conflict-2_3","text":"And then we try a final time git pull origin master From ssh://gitosis@example.com:22/projectname * branch master - > FETCH_HEAD Already up-to-date.","title":"Sample Conflict -2"},{"location":"week-3-git/ce103-week-3-git/#tagging","text":"it's recommended to create tags for software releases. this is a known concept, which also exists in SVN. You can create a new tag named 1.0.0 by executing git tag 1.0.0 1b2e1d63ff the 1b2e1d63ff stands for the first 10 characters of the commit id you want to reference with your tag. You can get the commit id by looking at the...","title":"Tagging"},{"location":"week-3-git/ce103-week-3-git/#log-1","text":"in its simplest form, you can study repository history using.. git log You can add a lot of parameters to make the log look like what you want. To see only the commits of a certain author: git log --author=bob","title":"Log (1)"},{"location":"week-3-git/ce103-week-3-git/#log-2","text":"To see a very compressed log where each commit is one line: git log --pretty=oneline","title":"Log (2)"},{"location":"week-3-git/ce103-week-3-git/#log-3","text":"Or maybe you want to see an ASCII art tree of all the branches, decorated with the names of tags and branches: git log --graph --oneline --decorate --all","title":"Log (3)"},{"location":"week-3-git/ce103-week-3-git/#log-4","text":"See only which files have changed: git log --name-status","title":"Log (4)"},{"location":"week-3-git/ce103-week-3-git/#log-5","text":"These are just a few of the possible parameters you can use. For more, see git log --help","title":"Log (5)"},{"location":"week-3-git/ce103-week-3-git/#replace-local-changes-1","text":"In case you did something wrong, which for sure never happens ;), you can replace local changes using the command git checkout -- < filename> this replaces the changes in your working tree with the last content in HEAD. Changes already added to the index, as well as new files, will be kept.","title":"Replace Local Changes (1)"},{"location":"week-3-git/ce103-week-3-git/#replace-local-changes-2","text":"if you use dot (.) then all local changes will be rollbacked. git checkout -- .","title":"Replace Local Changes (2)"},{"location":"week-3-git/ce103-week-3-git/#replace-local-changes-3","text":"If you instead want to drop all your local changes and commits, fetch the latest history from the server and point your local master branch at it like this git fetch origin git reset --hard origin/master","title":"Replace Local Changes (3)"},{"location":"week-3-git/ce103-week-3-git/#reflog-1","text":"Everyone makes mistakes, and that's totally okay! Sometimes it may feel like you've corrupt your git repo so badly that you just want to delete it entirely.","title":"Reflog (1)"},{"location":"week-3-git/ce103-week-3-git/#reflog-2","text":"git reflog is a very useful command in order to show a log of all the actions that have been taken! This includes merges, resets, reverts: basically any alteration to your branch.","title":"Reflog (2)"},{"location":"week-3-git/ce103-week-3-git/#reflog-3","text":"","title":"Reflog (3)"},{"location":"week-3-git/ce103-week-3-git/#reflog-4","text":"If you made a mistake, you can easily redo this by resetting HEAD based on the information that reflog gives us! Say that we actually didn't want to merge the origin branch. When we execute the git reflog command, we see that the state of the repo before the merge is at HEAD@{1} . Let's perform a git reset to point HEAD back to where it was on HEAD@{1} !","title":"Reflog (4)"},{"location":"week-3-git/ce103-week-3-git/#reflog-5","text":"We can see that the latest action has been pushed to the reflog","title":"Reflog (5)"},{"location":"week-3-git/ce103-week-3-git/#resetting-1","text":"It can happen that we committed changes that we didn't want later on. Maybe it's a WIP commit, or maybe a commit that introduced bugs! In that case, we can perform a git reset .","title":"Resetting (1)"},{"location":"week-3-git/ce103-week-3-git/#resetting-2","text":"A git reset gets rid of all the current staged files and gives us control over where HEAD should point to.","title":"Resetting (2)"},{"location":"week-3-git/ce103-week-3-git/#soft-reset-1","text":"A soft reset moves HEAD to the specified commit (or the index of the commit compared to HEAD ), without getting rid of the changes that were introduced on the commits afterward!","title":"Soft Reset (1)"},{"location":"week-3-git/ce103-week-3-git/#soft-reset-2","text":"Let's say that we don't want to keep the commit 9e78i which added a style.css file, and we also don't want to keep the commit 035cc which added an index.js file. However, we do want to keep the newly added style.css and index.js file! A perfect use case for a soft reset.","title":"Soft Reset (2)"},{"location":"week-3-git/ce103-week-3-git/#soft-reset-3","text":"","title":"Soft Reset (3)"},{"location":"week-3-git/ce103-week-3-git/#soft-reset-2_1","text":"When typing git status , you'll see that we still have access to all the changes that were made on the previous commits. This is great, as this means that we can fix the contents of these files and commit them again later on!","title":"Soft Reset (2)"},{"location":"week-3-git/ce103-week-3-git/#hard-reset-1","text":"Sometimes, we don't want to keep the changes that were introduced by certain commits. Unlike a soft reset, we shouldn't need to have access to them any more. Git should simply reset its state back to where it was on the specified commit: this even includes the changes in your working directory and staged files!","title":"Hard reset (1)"},{"location":"week-3-git/ce103-week-3-git/#hard-reset-2","text":"Git has discarded the changes that were introduced on 9e78i and 035cc , and reset its state to where it was on commit ec5be .","title":"Hard reset (2)"},{"location":"week-3-git/ce103-week-3-git/#reverting-1","text":"Another way of undoing changes is by performing a git revert . By reverting a certain commit, we create a new commit that contains the reverted changes!","title":"Reverting (1)"},{"location":"week-3-git/ce103-week-3-git/#reverting-2","text":"Let's say that ec5be added an index.js file. Later on, we actually realize we didn't want this change introduced by this commit anymore! Let's revert the ec5be commit. Perfect! Commit 9e78i reverted the changes that were introduced by the ec5be commit.","title":"Reverting (2)"},{"location":"week-3-git/ce103-week-3-git/#reverting-3","text":"Performing a git revert is very useful in order to undo a certain commit, without modifying the history of the branch.","title":"Reverting (3)"},{"location":"week-3-git/ce103-week-3-git/#cherry-picking-1","text":"When a certain branch contains a commit that introduced changes we need on our active branch, we can cherry-pick that command! By cherry-pick ing a commit, we create a new commit on our active branch that contains the changes that were introduced by the cherry-pick ed commit.","title":"Cherry-picking (1)"},{"location":"week-3-git/ce103-week-3-git/#cherry-picking-1_1","text":"Say that commit 76d12 on the dev branch added a change to the index.js file that we want in our master branch. We don't want the entire we just care about this one single commit! Cool, the master branch now contains the changes that 76d12 introduced","title":"Cherry-picking (1)"},{"location":"week-3-git/ce103-week-3-git/#rebasing-1","text":"We just saw how we could apply changes from one branch to another by performing a git merge . Another way of adding changes from one branch to another is by performing a git rebase .","title":"Rebasing (1)"},{"location":"week-3-git/ce103-week-3-git/#rebasing-2","text":"A git rebase copies the commits from the current branch, and puts these copied commits on top of the specified branch. Perfect, we now have all the changes that were made on the master branch available on the dev branch!","title":"Rebasing (2)"},{"location":"week-3-git/ce103-week-3-git/#rebasing-3","text":"A big difference compared to merging, is that Git won't try to find out which files to keep and not keep. The branch that we're rebasing always has the latest changes that we want to keep! You won't run into any merging conflicts this way, and keeps a nice linear Git history.","title":"Rebasing (3)"},{"location":"week-3-git/ce103-week-3-git/#rebasing-4","text":"This example shows rebasing on the master branch. In bigger projects, however, you usually don't want to do that. A git rebase changes the history of the project as new hashes are created for the copied commits!","title":"Rebasing (4)"},{"location":"week-3-git/ce103-week-3-git/#rebasing-5","text":"Rebasing is great whenever you're working on a feature branch, and the master branch has been updated. You can get all the updates on your branch, which would prevent future merging conflicts!","title":"Rebasing (5)"},{"location":"week-3-git/ce103-week-3-git/#interactive-rebase-1","text":"Before rebasing the commits, we can modify them! We can do so with an interactive rebase . An interactive rebase can also be useful on the branch you're currently working on, and want to modify some commits.","title":"Interactive Rebase (1)"},{"location":"week-3-git/ce103-week-3-git/#interactive-rebase-2","text":"There are 6 actions we can perform on the commits we're rebasing: reword : Change the commit message edit : Amend this commit squash : Meld commit into the previous commit fixup : Meld commit into the previous commit, without keeping the commit's log message exec : Run a command on each commit we want to rebase drop : Remove the commit","title":"Interactive Rebase (2)"},{"location":"week-3-git/ce103-week-3-git/#interactive-rebase-3","text":"Awesome! This way, we can have full control over our commits. If we want to remove a commit, we can just drop it.","title":"Interactive Rebase (3)"},{"location":"week-3-git/ce103-week-3-git/#interactive-rebase-4","text":"Or if we want to squash multiple commits together to get a cleaner history, no problem! Interactive rebasing gives you a lot of control over the commits you're trying to rebase, even on the current active branch","title":"Interactive Rebase (4)"},{"location":"week-3-git/ce103-week-3-git/#useful-hints-1","text":"built-in git GUI gitk","title":"Useful Hints (1)"},{"location":"week-3-git/ce103-week-3-git/#useful-hints-2","text":"use colorful git output git config color.ui true","title":"Useful Hints (2)"},{"location":"week-3-git/ce103-week-3-git/#useful-hints-3","text":"show log on just one line per commit git config format.pretty oneline","title":"Useful Hints (3)"},{"location":"week-3-git/ce103-week-3-git/#useful-hints-4","text":"use interactive adding git add -i HEAD~2 // previous two commits fro head HEAD~~ // previous two commits from head HEAD@{2} // reflog order 18fe5 // previous commit hash","title":"Useful Hints (4)"},{"location":"week-3-git/ce103-week-3-git/#git-flow","text":"A successful Git branching model \u00bb nvie.com","title":"GIT Flow"},{"location":"week-3-git/ce103-week-3-git/#hotfix","text":"OneFlow \u2013 a Git branching model and workflow | End of Line Blog a simple git branching model \u00b7 GitHub","title":"Hotfix"},{"location":"week-3-git/ce103-week-3-git/#git-decision-tree","text":"http://justinhileman.info/article/git-pretty/git-pretty.png","title":"GIT Decision Tree"},{"location":"week-3-git/ce103-week-3-git/#git-in-action-1","text":"","title":"GIT in action (1)"},{"location":"week-3-git/ce103-week-3-git/#git-in-action-2","text":"","title":"GIT in action (2)"},{"location":"week-3-git/ce103-week-3-git/#git-in-action-3","text":"","title":"GIT in action (3)"},{"location":"week-3-git/ce103-week-3-git/#git-in-action-4","text":"","title":"GIT in action (4)"},{"location":"week-3-git/ce103-week-3-git/#git-in-action-5","text":"","title":"GIT in action (5)"},{"location":"week-3-git/ce103-week-3-git/#git-in-action-6","text":"","title":"GIT in action (6)"},{"location":"week-3-git/ce103-week-3-git/#git-in-action-7","text":"","title":"GIT in action (7)"},{"location":"week-3-git/ce103-week-3-git/#gource","text":"https://gource.io/","title":"Gource"},{"location":"week-3-git/ce103-week-3-git/#references-1","text":"Source Code Management | Atlassian Git Tutorial . What is Source Code Management or Version Control ? - The Linux Juggernaut https://www.edureka.co/blog/how-to-use-github/ https://www.edureka.co/blog/git-tutorial/ https://www.edureka.co/blog/install-git/","title":"References (1)"},{"location":"week-3-git/ce103-week-3-git/#references-2","text":"git - the simple guide - no deep shit! GitHub - rogerdudler/git-guide: git - the simple guide https://dev.to/lydiahallie/cs-visualized-useful-git-commands-37p1#merge How to write a good commit message - DEV Community https://blog.xebialabs.com/2016/06/14/periodic-table-devops-tools-v-2/","title":"References (2)"},{"location":"week-3-git/ce103-week-3-git/#references-3","text":"https://harness.io/2018/01/devops-tools-lifecycle-mesh-2018/ https://medium.com/swlh/how-to-become-an-devops-engineer-in-2020-80b8740d5a52 https://www.lucidchart.com/blog/devops-process-flow https://www.researchgate.net/publication/262450962_Rugby_An_Agile_Process_Model_Based_on_Continuous_Delivery","title":"References (3)"},{"location":"week-3-git/ce103-week-3-git/#references-4","text":"git - the simple guide - no deep shit! Git Tutorial | Commands And Operations In Git | Edureka How to write a good commit message - DEV Community An Introduction to Git and GitHub by Brian Yu - YouTube","title":"References (4)"},{"location":"week-3-git/ce103-week-3-git/#references-5","text":"https://education.github.com/git-cheat-sheet-education.pdf NDP Software :: Git Cheatsheet ; Learn Git Branching https://guides.github.com/introduction/git-handbook/","title":"References (5)"},{"location":"week-4-test/ce103-week-4-test/","text":"CE103 Algorithms and Programming I \u00b6 Week-4 \u00b6 Fall Semester, 2021-2022 \u00b6 Download DOC , SLIDE , PPTX Introduction to Code Reusability and Automated Testing \u00b6 During this course we will use entry level of shared library development and their tests and test automations. Also we will see TDD(Test Driven Development) approach. During this course we will use Windows OS, Eclipse and Visual Studio Commuity Edition environments for examples. Each example will include two function \"Hello \" printing function with name sayHelloTo(name) and sum of two variable function for basic, sum = sum(a,b). This sum function will add a to b and return result to sum variable. We will locate them in library and use them from a console application, also we will create unit tests for testing their functionalities and return variables Shared Library Development \u00b6 C Programming (Static Library) \u00b6 Visual Studio Community Edition \u00b6 In this sample we will create c-lib-sample project that contains library, executable, unit tests and unit test runners. First of all you install Visual Studio Community Edition from website Visual Studio 2019 Community Edition - Son \u00dccretsiz S\u00fcr\u00fcm\u00fc \u0130ndir Open visual studio community edition and select create a new project Select create a new project Select C++ static library from project list Name static library project Default configuration come with C++ project types and setting In the c-sample-lib.cpp you will sample function void fncsamplelib () { } Delete pch.h and pch.c files. Also disable use precompiled header settings from configurations and change to \"Not Using Precomplied Headers\", also you can delete precomplied Header File. Customize library header name and update \"framework.h\" to \"samplelib.h\" Insert your functions inside the c-sample-lib.c and update header files also. // c-sample-lib.cpp : Defines the functions for the static library. // #include \"samplelib.h\" #include \"stdio.h\" /// <summary> /// /// </summary> /// <param name=\"name\"></param> void sayHelloTo ( char * name ){ if ( name != NULL ){ printf ( \"Hello %s \\n \" , name ); } else { printf ( \"Hello There \\n \" ); } } /// <summary> /// /// </summary> /// <param name=\"a\"></param> /// <param name=\"b\"></param> /// <returns></returns> int sum ( int a , int b ){ int c = 0 ; c = a + b ; return c ; } also update samplelib.h #pragma once #define WIN32_LEAN_AND_MEAN // Exclude rarely-used stuff from Windows headers void sayHelloTo ( char * name ); int sum ( int a , int b ); If you check configuration you will see that for C complier we are using Microsoft Environment and Toolkits Now we can compile our library You can follow operation from output window in debug folder we will see our output now we will add a console application c-sample-app and use our library select C++ Windows Console Application from list C++ Console Application Selection will generate a C++ console project we can change extension to C to compile our application as C application. we will convert c-sample-app.c to following code #include <stdio.h> /// <summary> /// /// </summary> /// <returns></returns> int main () { printf ( \"Hello World! \\n \" ); } after conversion set c-sample-app as startup project and build it this will create c-sample-app.exe in the same folder with c-sample-lib.lib library if we run application we will see only \"Hello World\" now we will see two options to add library as references in our application and use its functions. First option right click references for c-sample-app and add current library as reference Select Add Reference Browse for solution and select c-sample-lib You can check added reference from references section now we can include required headers from c-sample-lib folder and use it. we can include required header with relative path as follow or with configuration #include <stdio.h> #include \"..\\c-sample-lib\\samplelib.h\" /// <summary> /// /// </summary> /// <returns></returns> int main () { printf ( \"Hello World! \\n \" ); } we can build our c-sample-app also we can only write header name #include <samplelib.h> for this we need to configure include directories select c-sample-lib header file location browse for folder your full path will be added to your configuration if you add header file paths to your configuration you can use header files by name in your source code #include <stdio.h> #include <samplelib.h> /// <summary> /// /// </summary> /// <returns></returns> int main () { printf ( \"Hello World! \\n \" ); } we can compile the following we don't have problems but here we need to configure relative paths for configuration open include library settings and update with relative path ..\\c-sample-lib now we have portable source code configuration. we can call our functions and then we can update header and library folder configurations. #include <stdio.h> #include <samplelib.h> /// <summary> /// /// </summary> /// <returns></returns> int main () { int result = 0 ; //printf(\"Hello World!\\n\"); result = sum ( 5 , 4 ); sayHelloTo ( \"Computer\" ); printf ( \"Result is %d \\n \" , result ); printf ( \"Press any key to continue... \\n \" ); getchar (); return 0 ; } when you run you will see the following outputs, that mean we called library functions. static library is a code sharing approach if you want to share your source code with your customers then you can share static libraries and header files together. Another case you can use a precompiled static library with you or this library can be part of any installation then if there is a installed app and static libraries are placed on system folder or any different location then you can use configuration files to set library path and included header paths Now we can remove project from c-sample-app references but we will set library file in configuration Before this copy static library and header files to a folder like that DebugStaticLibDeployment Set C/C++ -> General -> Additional Include Directories There is a bug in configurations and relative path not finding headers so for this reason we will set full path but this is not a good practice for team working Not Working .. \\ c - sample - lib \\ DebugStaticLibDeployment Working E : \\ ... \\ c - lib - sample \\ c - sample - lib \\ DebugStaticLibDeployment Now we will set library folder that our static library placed we will set VC++ Directories -> Library Directories Here is the same issue if we use relative path it doesn't work we need to set full path for library folder Working E : \\ ... \\ c - lib - sample \\ c - sample - lib \\ DebugStaticLibDeployment Not Working .. \\ c - sample - lib \\ DebugStaticLibDeployment If we set full path for both libraries and headers then we need to set library name for project Linker->Input->Additional Dependencies In this case we will compile c-sample-app and we do not need to compile c-sample-lib because we copied output files to different location and they are ready to use. current source code will be like that nothing changed #include <stdio.h> #include <samplelib.h> /// <summary> /// /// </summary> /// <returns></returns> int main () { int result = 0 ; //printf(\"Hello World!\\n\"); result = sum ( 5 , 4 ); sayHelloTo ( \"Computer\" ); printf ( \"Result is %d \\n \" , result ); printf ( \"Press any key to continue... \\n \" ); getchar (); return 0 ; } and output There is a option about portability that we can set for team works We will remove all library related settings from configurations and we will write them in source code Clear linker->general->additional library directories Clear C/C++ -> General -> Additional Include Directories Clear Linker->Input->Additional Dependencies Now we can set this configurations in source code as follow #pragma comment(lib, \"..\\\\DebugStaticLibDeployment\\\\c-sample-lib.lib\") #include \"..\\DebugStaticLibDeployment\\samplelib.h\" #include <stdio.h> /// <summary> /// /// </summary> /// <returns></returns> int main () { int result = 0 ; //printf(\"Hello World!\\n\"); result = sum ( 5 , 4 ); sayHelloTo ( \"Computer\" ); printf ( \"Result is %d \\n \" , result ); printf ( \"Press any key to continue... \\n \" ); getchar (); return 0 ; } with this configuration if your friends download this code then they can run them with their environment without setting a path. C++ Programming (Static Library) \u00b6 Visual Studio Community Edition \u00b6 All steps are similar with C programming above, but you do not need to delete pch.h You should take care about compiled source codes for example if your code is compiled for x86 then your application also should use the x86 configuration else x64 then library should be x64 complied version. Source will look like the following // cpp-sample-app.cpp : This file contains the 'main' function. Program execution begins and ends there. // #pragma comment(lib, \"..\\\\DebugStaticLibDeployment\\\\cpp-sample-lib.lib\") #include \"..\\DebugStaticLibDeployment\\samplelib.h\" #include <iostream> int main () { std :: cout << \"Hello World! \\n \" ; int result = 0 ; //printf(\"Hello World!\\n\"); result = sum ( 5 , 4 ); sayHelloTo ( \"Computer\" ); printf ( \"Result is %d \\n \" , result ); printf ( \"Press any key to continue... \\n \" ); getchar (); return 0 ; } C/C++ WSL Option \u00b6 Install WSL GitHub - ucoruh/ns3-wsl-win10-setup: ns3 windows 10 WSL2 setup and usage Create a Linux project Configure Platform Toolset to WSL Select GCC for Windows Subsystem for Linux Put a breakpoint and run debugger In the debugger for WSL you can use local WSL installation but if you want to run it on Release setting it require a SSH connection. Configure SSH parameters so you have to complete the following steps. C/C++ Remote Linux Option over SSH \u00b6 Enable SSH SSH on Windows Subsystem for Linux (WSL) | Illuminia Studios Connect to Remote WSL Environment Ba\u011flan hedef Linux sisteminize Visual Studio | Microsoft Docs C# Programming (Dinamik Library) \u00b6 Visual Studio Community Edition \u00b6 In C# project we will create class library we have several options for this sample we will select .NET core that we can build cross platform library There is no static library option We will select .Net Core 3.1 You will have default empty class library file In the project you can see .NETcore reference We can build empty class library that generate dll for our application Now we will add Console Application but this will also use .NETCore Select New Project Name the project Select .NETCore framework You will have the following sample main.cs file using System ; namespace csharp_sample_app { class Program { static void Main ( string [] args ) { Console . WriteLine ( \"Hello World!\" ); } } } Now we can link projects with adding references open reference section browse for class library project output folder and select output dll file for console application now we can update our library code and use it in console application copy following sample to sampleLibClass file in the library using System ; namespace csharp_sample_lib { public class sampleLibClass { public static void sayHelloTo ( string name ) { if (! String . IsNullOrEmpty ( name )) { Console . WriteLine ( \"Hello \" + name ); } else { Console . WriteLine ( \"Hello There\" ); } } public static int sum ( int a , int b ) { int c = 0 ; c = a + b ; return c ; } } } after this operation copy following sample to console application and build app then you can run using csharp_sample_lib ; using System ; namespace csharp_sample_app { class Program { static void Main ( string [] args ) { Console . WriteLine ( \"Hello World!\" ); sampleLibClass . sayHelloTo ( \"Computer\" ); int result = sampleLibClass . sum ( 5 , 4 ); Console . WriteLine ( \"Results is\" + result ); Console . WriteLine ( \"Results is {0}\" , result ); Console . Read (); } } } You will see following output that mean we called DLL functions Also we can publish this console application with dll for linux environment or others for linux environment we should install .NETCore follow the link below or commands that I shared with you as below for deployment How to Install Dotnet Core on Ubuntu 20.04 \u2013 TecAdmin Step 1 \u2013 Enable Microsoft PPA wget https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb sudo dpkg -i packages-microsoft-prod.deb Step 2 \u2013 Installing Dotnet Core SDK sudo apt update sudo apt install apt-transport-https sudo apt install dotnet-sdk-3.1 Step 3 \u2013 Install Dotnet Core Runtime Only To install .NET Core Runtime on Ubuntu 20.04 LTS system, execute the commands: sudo apt update To install the previous version of .Net core runtime 2.1, type: sudo apt install dotnet-runtime-2.1 Press \u201cy\u201d for any input prompted by the installer. Step 4 \u2013 (Optional) Check .NET Core Version You can use dotnet command line utility to check installed version of .NET Core on your system. To check dotnet version, type: dotnet --version Now we will publish our application as single executable Open publish menu Select netcoreapp3.1 and Release for linux-x64 Select produce single file After succesfull publish you will have linux binary that you can run with WSL Open WSL and enter the path where this folder located and run application as follow check dotnet --version and then run application you will see similar output In this sample we created single application from settings lets try with shared library located option uncheck the \"produce single file\" option and publish again. Then you will have the following outputs If you run csharp-sample-app you will have the same output Java Programming \u00b6 Eclipse IDE \u00b6 You should download and install eclipse installer and then you should select Eclipse IDE for Java Developers Eclipse Installer 2021-09 R | Eclipse Packages select create a project select java project give project name select finish first we need to add a default package to keep everything organized then we can create our class that includes our functions give class a name you will have following class with main We will create sample java library with static functions as below. package ce103 ; import java.io.IOException ; public class JavaSampleLib { public static void sayHelloTo ( String name ) { if ( name . isBlank () || name . isEmpty ()) { System . out . println ( \"Hello \" + name ); } else { System . out . println ( \"Hello There\" ); } } public static int sum ( int a , int b ) { int c = 0 ; c = a + b ; return c ; } public static void main ( String [] args ) { // TODO Auto-generated method stub System . out . println ( \"Hello World!\" ); JavaSampleLib . sayHelloTo ( \"Computer\" ); int result = JavaSampleLib . sum ( 5 , 4 ); System . out . println ( \"Results is\" + result ); System . out . printf ( \"Results is %d \\n\" , result ); try { System . in . read (); } catch ( IOException e ) { // TODO Auto-generated catch block e . printStackTrace (); } } } also we can add main method to run our library functions. If we run this file its process main function we can see output from console as below There is no exe files java runtime environment run class files but we can export this as an executable. Select Java->Runnable JAR File click next and set output path for jar file If our project has several external dependecy then we can extract this required files (jar, so, dll) in seperated folder or we can combine them and generate a single executable jar Lets pack everthing together, Select launch configuration that has main function end of this operation we will have the following jar that we can by click When you click application if cannot run then try command line to see problem enter jar folder and run the following command java -jar JavaSampleLibExecutable.jar In my case eclipse build JDK is newer than that I installed and set for my OS If we check version we can see problem Java version 1.8.0_231 We can found installed and builded JDK for our application from Eclipse setting select environments select installed JRE or JDK you can see installed JRE or JDK home C : \\Program Files\\Java\\jdk-16.0.1 Open system environment to fix this problem Check user settings first Check system settings we will move up the JDK 16 configuration then command line will run first java Also in system setting check JAVA_HOME After this settings close current command line and open new one write java --version if you see java version updated and 16.0.1 then settings are correct and now if we enter and run application as follow we will see output But when you click this jar its not running as you see so we have options to provide a clickable application there Launch4j is an option here Launch4j - Cross-platform Java executable wrapper you can watch this tutorial also How to convert jar to exe using Launch4J Full explanation - YouTube Download and install launch4j and open application configure your application settings similar to below select jar file and exe output path we can customize main class if have multiple main class select console from setting for this application we can provide a single running application, this setting avoid to run multiple instances we need to set runtime environment versions you can set system parameters before running application with splash screen you can show a splash screen image for your application File attributes such as version product information is configured from version info tab if your application runtime condition has an error then you can show this customized messages also with this options save configuration file xml and compile settings you will see generated output file in log screen Compiling resources Linking Wrapping WARNING: Sign the executable to minimize antivirus false positives or use launching instead of wrapping. Successfully created C:\\Users\\ugur.coruh\\Desktop\\java-export-sample\\JavaSampleLibExecutable.exe now we can run exe by click another option here adding a bat file to run current jar file JavaSampleLibExecutable.bat java -jar JavaSampleLibExecutable.jar if we click bat file then we will automate command line task for current jar file Now return back to our java library and create another console application that use library functions you can set libraries in this step from but our library should exported for our solution Select Add External JARs... Open Exported jar folder and select Or we can select by Add jar from current workspace but in this step I won't add anything I'll add references later we will have the following project lets create a package and lets create a main class for our application check create main function right click to project and add reference you can enter same configurations from project properties Lets export our library as a JAR file and then add to our classpath Select JAR file we configured output as C : \\Users\\ugur.coruh\\Desktop\\java-export-sample\\JavaSampleLib.jar In the same export folder now we have JavaSampleLib.jar return back to java-sample-app and then add this jar file to our project Build Path->Add External Archives you will see its added to reference libraries in our JavaSampleApp.java we can use the following source codes package ce103 ; import java.io.IOException ; public class JavaSampleApp { public static void main ( String [] args ) { // TODO Auto-generated method stub System . out . println ( \"Hello World!\" ); JavaSampleLib . sayHelloTo ( \"Computer\" ); int result = JavaSampleLib . sum ( 5 , 4 ); System . out . println ( \"Results is\" + result ); System . out . printf ( \"Results is %d \\n\" , result ); try { System . in . read (); } catch ( IOException e ) { // TODO Auto-generated catch block e . printStackTrace (); } } } When we run application we will see similar output Lets export this application with its dependent library Select runnable jar Set Launch configuration and Export destination C : \\Users\\ugur.coruh\\Desktop\\java-export-sample\\JavaSampleAppSingle.jar In this option we will have single jar file In the export folder we do not see reference libraries and we can run with command line only change copy required libraries setting and then give a new name for new jar file and export C : \\Users\\ugur.coruh\\Desktop\\java-export-sample\\JavaSampleAppMultiple.jar now we have a folder that contains our libraries referenced in this file we can find our library if we test our application we will see it will work if we delete JavaSampleLib.jar and then try running application we will get error Program Testing \u00b6 Unit Test Development \u00b6 C Unit Tests \u00b6 Visual Studio Community Edition \u00b6 C++ Unit Tests \u00b6 Visual Studio Community Edition \u00b6 C/C++ i\u00e7in birim testleri yazma - Visual Studio (Windows) | Microsoft Docs Use cpp-sample-lib project and add select Native Unit Test set project path and name you will have cpp-sample-test project add library project from references Add cpp-sample-lib to cpp-sample-test project cpp-sample-test.cpp #include \"pch.h\" #include \"CppUnitTest.h\" #include \"..\\cpp-sample-lib\\samplelib.h\" using namespace Microsoft :: VisualStudio :: CppUnitTestFramework ; namespace cppsampletest { TEST_CLASS ( cppsampletest ) { public : TEST_METHOD ( TestSumCorrect ) { Assert :: AreEqual ( 9 , sum ( 4 , 5 )); } TEST_METHOD ( TestSumInCorrect ) { Assert :: AreEqual ( 10 , sum ( 4 , 5 )); } }; } C# Unit Tests \u00b6 Visual Studio Community Edition (MSTestV2+.Net) \u00b6 Install extension fine code coverage https://marketplace.visualstudio.com/items?itemName=FortuneNgwenya.FineCodeCoverage Create a .Net Framework Library set project framework and path Create library functions using System ; using System.Collections.Generic ; using System.Text ; namespace cs_lib_sample { public class SampleLibClass { public static string sayHelloTo ( string name ) { string result = String . Empty ; if (! String . IsNullOrEmpty ( name )) { result = \"Hello \" + name ; } else { result = \"Hello There\" ; } Console . WriteLine ( result ); return result ; } public static int sum ( int a , int b ) { int c = 0 ; c = a + b ; return c ; } public int multiply ( int a , int b ) { return a * b ; } } } right click and then create unit test project press OK enter test code using Microsoft.VisualStudio.TestTools.UnitTesting ; using cs_lib_sample ; using System ; using System.Collections.Generic ; using System.Linq ; using System.Text ; using System.Threading.Tasks ; namespace cs_lib_sample.Tests { [TestClass()] public class SampleLibClassTests { [TestMethod()] public void testSayHelloTo () { Assert . AreEqual ( \"Hello Computer\" , SampleLibClass . sayHelloTo ( \"Computer\" ), \"Regular say hello should work\" ); } [TestMethod()] public void testSayHelloToWrong () { Assert . AreEqual ( \"Hello All\" , SampleLibClass . sayHelloTo ( \"Computer\" ), \"Regular say hello won't work\" ); } [TestMethod()] public void testSumCorrect () { Assert . AreEqual ( 9 , SampleLibClass . sum ( 4 , 5 ), \"Regular sum should work\" ); } [TestMethod()] public void testSumWrong () { Assert . AreEqual ( 10 , SampleLibClass . sum ( 4 , 5 ), \"Regular sum shouldn't work\" ); } [TestMethod()] public void testMultiply () { SampleLibClass sampleLib = new SampleLibClass (); Assert . AreEqual ( 20 , sampleLib . multiply ( 4 , 5 ), \"Regular multiplication should work\" ); } } } Run tests you will code coverage and entered or passed branches Visual Studio Community Edition (NUnit+.NETCore) \u00b6 use cshar-sample-lib for this example create and add a unit test project to solution Add project reference SampleLibraryTestClasss in NUnit Project using csharp_sample_lib ; using NUnit.Framework ; namespace csharp_sample_lib_test { public class SampleLibraryTestClass { sampleLibClass sampleLib ; [SetUp] public void Setup () { sampleLib = new sampleLibClass (); } [Test] public void testSayHelloTo () { Assert . AreEqual ( \"Hello Computer\" , sampleLibClass . sayHelloTo ( \"Computer\" ), \"Regular say hello should work\" ); } [Test] public void testSayHelloToWrong () { Assert . AreEqual ( \"Hello All\" , sampleLibClass . sayHelloTo ( \"Computer\" ), \"Regular say hello won't work\" ); } [Test] public void testSumCorrect () { Assert . AreEqual ( 9 , sampleLibClass . sum ( 4 , 5 ), \"Regular sum should work\" ); } [Test] public void testSumWrong () { Assert . AreEqual ( 10 , sampleLibClass . sum ( 4 , 5 ), \"Regular sum shouldn't work\" ); } [Test] public void testMultiply () { Assert . AreEqual ( 20 , sampleLib . multiply ( 4 , 5 ), \"Regular multiplication should work\" ); } } } sample class library using System ; namespace csharp_sample_lib { public class sampleLibClass { public static string sayHelloTo ( string name ) { string result = String . Empty ; if (! String . IsNullOrEmpty ( name )) { result = \"Hello \" + name ; } else { result = \"Hello There\" ; } Console . WriteLine ( result ); return result ; } public static int sum ( int a , int b ) { int c = 0 ; c = a + b ; return c ; } public int multiply ( int a , int b ) { return a * b ; } } } Open test explorer and run tests or you can run from project Also we can create unit test from library class, right click the sampleLibClass and select create unit tests but this option do not provide nunit tests. using Microsoft.VisualStudio.TestTools.UnitTesting ; using csharp_sample_lib ; using System ; using System.Collections.Generic ; using System.Text ; namespace csharp_sample_lib.Tests { [TestClass()] public class sampleLibClassTests { [TestMethod()] public void sayHelloToTest () { Assert . Fail (); } [TestMethod()] public void sumTest () { Assert . Fail (); } [TestMethod()] public void multiplyTest () { Assert . Fail (); } } } we will not commit this changes and continue from nunit test project, the fine code coverage also work for nunit test but not provide inline highlighting if we run tests we will have the following outputs Inline code highlight is part of enterprise visual studio edition Analyzing code coverage in Visual Studio - DEV Community TL;DR \u00b6 Additional information you can use OpenCover + Nunit Runner + Report Generator together to setup a code coverage report but it has complex batch running process. After a few try I decided to use fine code coverage but here is the usage not tested well. First unit test runner tool doesn't support .Net Core c# - The NUnit 3 driver encountered an error while executing reflected code (NUnit.Engine.NUnitEngineException) - Stack Overflow Follow the instructions on the link CMD OpenCover \u00b7 sukhoi1/Useful-Notes Wiki \u00b7 GitHub Install OpenCover, ReportGenerator, Nunit,Runners packages then use the package installation folder to get tools that you need Here is a sample for open cover, select package and copy path Goto path and tools C : \\Users\\ugur.coruh\\.nuget\\packages\\opencover\\4.7.1221 You need to setup some batch similar with following run-test-coverage.bat set pathA = C:\\Users\\ugur.coruh\\.nuget\\packages\\opencover\\4.7.1221\\tools set pathB = C:\\Users\\ugur.coruh\\.nuget\\packages\\nunit.consolerunner\\3.12.0\\tools set pathC = C:\\Users\\ugur.coruh\\.nuget\\packages\\reportgenerator\\4.8.13\\tools\\netcoreapp3.0 set dllpath = C:\\Users\\ugur.coruh\\Desktop\\csharp-sample-lib\\csharp-sample-lib-test\\bin\\Debug\\netcoreapp3.1 \" %pathA% \\OpenCover.Console.exe\" ^ - targetargs: \" %dllpath% \\csharp-sample-lib-test.dll\" ^ - filter: \"+[csharp-sample-lib*]* -[*test]*\" ^ - target: \" %pathB% \\nunit3-console.exe\" ^ - output: \" %dllpath% \\coverReport.xml\" ^ - skipautoprops -register:user && \" %pathC% \\ReportGenerator.exe\" -reports: \" %dllpath% \\coverReport.xml\" -targetdir: \"\" %dllpath% \\coverage \" pause but nunit3-console.exe gives error for this compatibility issues I prefer to use fine code coverage extension. OpenCover related studies Code coverage of manual or automated tests with OpenCover for .NET applications \u2013 Automation Rhapsody Code coverage of .NET Core unit tests with OpenCover \u2013 Automation Rhapsody Sample OpenCover report Summary - Coverage Report Download and Setup OpenCover, NUnit Console, Report Generator without Package Manager \u00b6 You can also download the tools from github project pages and install on your operating system, OpenCover \u00b6 Releases \u00b7 OpenCover/opencover \u00b7 GitHub Select advanced and then install for all users ReportGenerator \u00b6 Release ReportGenerator_4.8.13 \u00b7 danielpalme/ReportGenerator \u00b7 GitHub NUnit Console \u00b6 Downloads NUnit + MSTest Batch Report Generation (Not Tested) \u00b6 OpenCover and ReportGenerator Unit Test Coverage in Visual Studio 2013 and 2015 \u2013 CodeHelper.Net OpenCover and ReportGenerator Unit Test Coverage in Visual Studio 2013 and 2015 - CodeProject Java Unit Tests \u00b6 Eclipse IDE (JUnit4 , JUnit5) \u00b6 In this sample we will create two example for similar library Please check the following links JUnit 5 tutorial - Learn how to write unit tests JUnit 5 JUnit 5 User Guide https://www.eclemma.org/ JUnit Hello World Example - Examples Java Code Geeks - 2021 https://yasinmemic.medium.com/java-ile-unit-test-yazmak-birim-test-ca15cf0d024b Java Application + JUnit \u00b6 In normal java application we can right click the project java-sample-lib and add Junit case and you will have the following test class Now we will create tests that check our function flowchart and return values We need to cover all code branches that we coded I have updated JavaSampleLib.java as follow to check outputs JavaSampleLib.java package ce103 ; public class JavaSampleLib { public static String sayHelloTo ( String name ) { String output = \"\" ; if ( ! name . isBlank () && ! name . isEmpty ()){ output = \"Hello \" + name ; } else { output = \"Hello There\" ; } System . out . println ( output ); return output ; } public static int sum ( int a , int b ) { int c = 0 ; c = a + b ; return c ; } public int multiply ( int a , int b ) { return a * b ; } // public static void main(String[] args) { // // TODO Auto-generated method stub // System.out.println(\"Hello World!\"); // // JavaSampleLib.sayHelloTo(\"Computer\"); // int result = JavaSampleLib.sum(5, 4); // System.out.println(\"Results is\" + result); // System.out.printf(\"Results is %d \\n\", result); // // // try { // System.in.read(); // } catch (IOException e) { // // TODO Auto-generated catch block // e.printStackTrace(); // } // // } } and JavaSampleLibTest.java package ce103 ; import static org.junit.jupiter.api.Assertions.* ; import org.junit.jupiter.api.AfterAll ; import org.junit.jupiter.api.AfterEach ; import org.junit.jupiter.api.BeforeAll ; import org.junit.jupiter.api.BeforeEach ; import org.junit.jupiter.api.DisplayName ; import org.junit.jupiter.api.RepeatedTest ; import org.junit.jupiter.api.Test ; import org.junit.jupiter.params.ParameterizedTest ; import org.junit.jupiter.params.provider.MethodSource ; class JavaSampleLibTest { JavaSampleLib sampleLib ; @BeforeAll static void setUpBeforeClass () throws Exception { } @AfterAll static void tearDownAfterClass () throws Exception { } @BeforeEach void setUp () throws Exception { sampleLib = new JavaSampleLib (); } @AfterEach void tearDown () throws Exception { } @Test @DisplayName ( \"Simple Say Hello should work\" ) void testSayHelloTo () { assertEquals ( \"Hello Computer\" , JavaSampleLib . sayHelloTo ( \"Computer\" ), \"Regular say hello should work\" ); } @Test @DisplayName ( \"Simple Say Hello shouldn' work\" ) void testSayHelloToWrong () { assertEquals ( \"Hello All\" , JavaSampleLib . sayHelloTo ( \"Computer\" ), \"Regular say hello won't work\" ); } @Test @DisplayName ( \"Simple sum should work\" ) void testSumCorrect () { assertEquals ( 9 , JavaSampleLib . sum ( 4 , 5 ), \"Regular sum should work\" ); } @Test @DisplayName ( \"Simple sum shouldn't work\" ) void testSumWrong () { assertEquals ( 10 , JavaSampleLib . sum ( 4 , 5 ), \"Regular sum shouldn't work\" ); } @Test @DisplayName ( \"Simple multiplication should work\" ) void testMultiply () { assertEquals ( 20 , sampleLib . multiply ( 4 , 5 ), \"Regular multiplication should work\" ); } @RepeatedTest ( 5 ) @DisplayName ( \"Ensure correct handling of zero\" ) void testMultiplyWithZero () { assertEquals ( 0 , sampleLib . multiply ( 0 , 5 ), \"Multiple with zero should be zero\" ); assertEquals ( 0 , sampleLib . multiply ( 5 , 0 ), \"Multiple with zero should be zero\" ); } public static int [][] data () { return new int [][] { { 1 , 2 , 2 }, { 5 , 3 , 15 }, { 121 , 4 , 484 },{ 2 , 2 , 2 } }; } @ParameterizedTest @MethodSource ( value = \"data\" ) void testWithStringParameter ( int [] data ) { JavaSampleLib tester = new JavaSampleLib (); int m1 = data [ 0 ] ; int m2 = data [ 1 ] ; int expected = data [ 2 ] ; assertEquals ( expected , tester . multiply ( m1 , m2 )); } } if we run tests we will see all results there also we can see the code coverage of tests when we open our source code (just close and open again another case highlighting will not work) you will see tested part of your codes Maven Java Application + JUnit \u00b6 Lets create Maven project with tests Create a maven project File -> New -> Maven Project Lets convert our sample java-sample-lib directories to standard folder structure for test and app division Maven \u2013 Introduction to the Standard Directory Layout Also for intro you can use this JUnit Hello World Example - Examples Java Code Geeks - 2021 Eclipse Maven Java JUnit 4.12 (pulled by Maven automatically) Lets give new sample java-sample-lib-mvnbut in this time we will create a maven project pom.xml file <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\" > <modelVersion> 4.0.0 </modelVersion> <groupId> com.ce103 </groupId> <artifactId> java-sample-lib-ext </artifactId> <version> 0.0.1-SNAPSHOT </version> <name> Java Sample Lib </name> <description> Java Sample with Unit Test </description> </project> we will add JUnit 5 for our project <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\" > <modelVersion> 4.0.0 </modelVersion> <groupId> com.ce103 </groupId> <artifactId> java-sample-lib-ext </artifactId> <version> 0.0.1-SNAPSHOT </version> <name> Java Sample Lib </name> <description> Java Sample with Unit Test </description> <dependencies> <dependency> <groupId> org.junit.jupiter </groupId> <artifactId> junit-jupiter-params </artifactId> <version> 5.7.1 </version> <scope> test </scope> </dependency> </dependencies> </project> it will automatically download libraries Create java sample library in ce103 package, first create java package In this package create library class copy content from other library package ce103 ; public class JavaSampleLib { public static String sayHelloTo ( String name ) { String output = \"\" ; if ( ! name . isBlank () && ! name . isEmpty ()){ output = \"Hello \" + name ; } else { output = \"Hello There\" ; } System . out . println ( output ); return output ; } public static int sum ( int a , int b ) { int c = 0 ; c = a + b ; return c ; } public int multiply ( int a , int b ) { return a * b ; } } Now lets create tests inf src/test/java create a JUnit Case you will simple template package ce103 ; import static org.junit.jupiter.api.Assertions.* ; import org.junit.jupiter.api.AfterAll ; import org.junit.jupiter.api.AfterEach ; import org.junit.jupiter.api.BeforeAll ; import org.junit.jupiter.api.BeforeEach ; import org.junit.jupiter.api.Test ; class JavaSampleLibTest { @BeforeAll static void setUpBeforeClass () throws Exception { } @AfterAll static void tearDownAfterClass () throws Exception { } @BeforeEach void setUp () throws Exception { } @AfterEach void tearDown () throws Exception { } @Test void testSayHelloTo () { fail ( \"Not yet implemented\" ); } @Test void testSum () { fail ( \"Not yet implemented\" ); } @Test void testMultiply () { fail ( \"Not yet implemented\" ); } } now lets copy tests from other projects That's a part of java unit testing... TDD (Test Driven Development) \u00b6 Test and Deployment Automation Management \u00b6 Travis-CI + C \u00b6 Travis-CI + Cpp \u00b6 Travis-CI + C \u00b6 Travis-CI + Java \u00b6 References \u00b6 GitHub - MicrosoftDocs/cpp-docs: C++ Documentation","title":"Week-4 (Unit Testing and Libraries)"},{"location":"week-4-test/ce103-week-4-test/#ce103-algorithms-and-programming-i","text":"","title":"CE103 Algorithms and Programming I"},{"location":"week-4-test/ce103-week-4-test/#week-4","text":"","title":"Week-4"},{"location":"week-4-test/ce103-week-4-test/#fall-semester-2021-2022","text":"Download DOC , SLIDE , PPTX","title":"Fall Semester, 2021-2022"},{"location":"week-4-test/ce103-week-4-test/#introduction-to-code-reusability-and-automated-testing","text":"During this course we will use entry level of shared library development and their tests and test automations. Also we will see TDD(Test Driven Development) approach. During this course we will use Windows OS, Eclipse and Visual Studio Commuity Edition environments for examples. Each example will include two function \"Hello \" printing function with name sayHelloTo(name) and sum of two variable function for basic, sum = sum(a,b). This sum function will add a to b and return result to sum variable. We will locate them in library and use them from a console application, also we will create unit tests for testing their functionalities and return variables","title":"Introduction to Code Reusability and Automated Testing"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development","text":"","title":"Shared Library Development"},{"location":"week-4-test/ce103-week-4-test/#c-programming-static-library","text":"","title":"C Programming (Static Library)"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition","text":"In this sample we will create c-lib-sample project that contains library, executable, unit tests and unit test runners. First of all you install Visual Studio Community Edition from website Visual Studio 2019 Community Edition - Son \u00dccretsiz S\u00fcr\u00fcm\u00fc \u0130ndir Open visual studio community edition and select create a new project Select create a new project Select C++ static library from project list Name static library project Default configuration come with C++ project types and setting In the c-sample-lib.cpp you will sample function void fncsamplelib () { } Delete pch.h and pch.c files. Also disable use precompiled header settings from configurations and change to \"Not Using Precomplied Headers\", also you can delete precomplied Header File. Customize library header name and update \"framework.h\" to \"samplelib.h\" Insert your functions inside the c-sample-lib.c and update header files also. // c-sample-lib.cpp : Defines the functions for the static library. // #include \"samplelib.h\" #include \"stdio.h\" /// <summary> /// /// </summary> /// <param name=\"name\"></param> void sayHelloTo ( char * name ){ if ( name != NULL ){ printf ( \"Hello %s \\n \" , name ); } else { printf ( \"Hello There \\n \" ); } } /// <summary> /// /// </summary> /// <param name=\"a\"></param> /// <param name=\"b\"></param> /// <returns></returns> int sum ( int a , int b ){ int c = 0 ; c = a + b ; return c ; } also update samplelib.h #pragma once #define WIN32_LEAN_AND_MEAN // Exclude rarely-used stuff from Windows headers void sayHelloTo ( char * name ); int sum ( int a , int b ); If you check configuration you will see that for C complier we are using Microsoft Environment and Toolkits Now we can compile our library You can follow operation from output window in debug folder we will see our output now we will add a console application c-sample-app and use our library select C++ Windows Console Application from list C++ Console Application Selection will generate a C++ console project we can change extension to C to compile our application as C application. we will convert c-sample-app.c to following code #include <stdio.h> /// <summary> /// /// </summary> /// <returns></returns> int main () { printf ( \"Hello World! \\n \" ); } after conversion set c-sample-app as startup project and build it this will create c-sample-app.exe in the same folder with c-sample-lib.lib library if we run application we will see only \"Hello World\" now we will see two options to add library as references in our application and use its functions. First option right click references for c-sample-app and add current library as reference Select Add Reference Browse for solution and select c-sample-lib You can check added reference from references section now we can include required headers from c-sample-lib folder and use it. we can include required header with relative path as follow or with configuration #include <stdio.h> #include \"..\\c-sample-lib\\samplelib.h\" /// <summary> /// /// </summary> /// <returns></returns> int main () { printf ( \"Hello World! \\n \" ); } we can build our c-sample-app also we can only write header name #include <samplelib.h> for this we need to configure include directories select c-sample-lib header file location browse for folder your full path will be added to your configuration if you add header file paths to your configuration you can use header files by name in your source code #include <stdio.h> #include <samplelib.h> /// <summary> /// /// </summary> /// <returns></returns> int main () { printf ( \"Hello World! \\n \" ); } we can compile the following we don't have problems but here we need to configure relative paths for configuration open include library settings and update with relative path ..\\c-sample-lib now we have portable source code configuration. we can call our functions and then we can update header and library folder configurations. #include <stdio.h> #include <samplelib.h> /// <summary> /// /// </summary> /// <returns></returns> int main () { int result = 0 ; //printf(\"Hello World!\\n\"); result = sum ( 5 , 4 ); sayHelloTo ( \"Computer\" ); printf ( \"Result is %d \\n \" , result ); printf ( \"Press any key to continue... \\n \" ); getchar (); return 0 ; } when you run you will see the following outputs, that mean we called library functions. static library is a code sharing approach if you want to share your source code with your customers then you can share static libraries and header files together. Another case you can use a precompiled static library with you or this library can be part of any installation then if there is a installed app and static libraries are placed on system folder or any different location then you can use configuration files to set library path and included header paths Now we can remove project from c-sample-app references but we will set library file in configuration Before this copy static library and header files to a folder like that DebugStaticLibDeployment Set C/C++ -> General -> Additional Include Directories There is a bug in configurations and relative path not finding headers so for this reason we will set full path but this is not a good practice for team working Not Working .. \\ c - sample - lib \\ DebugStaticLibDeployment Working E : \\ ... \\ c - lib - sample \\ c - sample - lib \\ DebugStaticLibDeployment Now we will set library folder that our static library placed we will set VC++ Directories -> Library Directories Here is the same issue if we use relative path it doesn't work we need to set full path for library folder Working E : \\ ... \\ c - lib - sample \\ c - sample - lib \\ DebugStaticLibDeployment Not Working .. \\ c - sample - lib \\ DebugStaticLibDeployment If we set full path for both libraries and headers then we need to set library name for project Linker->Input->Additional Dependencies In this case we will compile c-sample-app and we do not need to compile c-sample-lib because we copied output files to different location and they are ready to use. current source code will be like that nothing changed #include <stdio.h> #include <samplelib.h> /// <summary> /// /// </summary> /// <returns></returns> int main () { int result = 0 ; //printf(\"Hello World!\\n\"); result = sum ( 5 , 4 ); sayHelloTo ( \"Computer\" ); printf ( \"Result is %d \\n \" , result ); printf ( \"Press any key to continue... \\n \" ); getchar (); return 0 ; } and output There is a option about portability that we can set for team works We will remove all library related settings from configurations and we will write them in source code Clear linker->general->additional library directories Clear C/C++ -> General -> Additional Include Directories Clear Linker->Input->Additional Dependencies Now we can set this configurations in source code as follow #pragma comment(lib, \"..\\\\DebugStaticLibDeployment\\\\c-sample-lib.lib\") #include \"..\\DebugStaticLibDeployment\\samplelib.h\" #include <stdio.h> /// <summary> /// /// </summary> /// <returns></returns> int main () { int result = 0 ; //printf(\"Hello World!\\n\"); result = sum ( 5 , 4 ); sayHelloTo ( \"Computer\" ); printf ( \"Result is %d \\n \" , result ); printf ( \"Press any key to continue... \\n \" ); getchar (); return 0 ; } with this configuration if your friends download this code then they can run them with their environment without setting a path.","title":"Visual Studio Community Edition"},{"location":"week-4-test/ce103-week-4-test/#c-programming-static-library_1","text":"","title":"C++ Programming (Static Library)"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition_1","text":"All steps are similar with C programming above, but you do not need to delete pch.h You should take care about compiled source codes for example if your code is compiled for x86 then your application also should use the x86 configuration else x64 then library should be x64 complied version. Source will look like the following // cpp-sample-app.cpp : This file contains the 'main' function. Program execution begins and ends there. // #pragma comment(lib, \"..\\\\DebugStaticLibDeployment\\\\cpp-sample-lib.lib\") #include \"..\\DebugStaticLibDeployment\\samplelib.h\" #include <iostream> int main () { std :: cout << \"Hello World! \\n \" ; int result = 0 ; //printf(\"Hello World!\\n\"); result = sum ( 5 , 4 ); sayHelloTo ( \"Computer\" ); printf ( \"Result is %d \\n \" , result ); printf ( \"Press any key to continue... \\n \" ); getchar (); return 0 ; }","title":"Visual Studio Community Edition"},{"location":"week-4-test/ce103-week-4-test/#cc-wsl-option","text":"Install WSL GitHub - ucoruh/ns3-wsl-win10-setup: ns3 windows 10 WSL2 setup and usage Create a Linux project Configure Platform Toolset to WSL Select GCC for Windows Subsystem for Linux Put a breakpoint and run debugger In the debugger for WSL you can use local WSL installation but if you want to run it on Release setting it require a SSH connection. Configure SSH parameters so you have to complete the following steps.","title":"C/C++ WSL Option"},{"location":"week-4-test/ce103-week-4-test/#cc-remote-linux-option-over-ssh","text":"Enable SSH SSH on Windows Subsystem for Linux (WSL) | Illuminia Studios Connect to Remote WSL Environment Ba\u011flan hedef Linux sisteminize Visual Studio | Microsoft Docs","title":"C/C++ Remote Linux Option over SSH"},{"location":"week-4-test/ce103-week-4-test/#c-programming-dinamik-library","text":"","title":"C# Programming (Dinamik Library)"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition_2","text":"In C# project we will create class library we have several options for this sample we will select .NET core that we can build cross platform library There is no static library option We will select .Net Core 3.1 You will have default empty class library file In the project you can see .NETcore reference We can build empty class library that generate dll for our application Now we will add Console Application but this will also use .NETCore Select New Project Name the project Select .NETCore framework You will have the following sample main.cs file using System ; namespace csharp_sample_app { class Program { static void Main ( string [] args ) { Console . WriteLine ( \"Hello World!\" ); } } } Now we can link projects with adding references open reference section browse for class library project output folder and select output dll file for console application now we can update our library code and use it in console application copy following sample to sampleLibClass file in the library using System ; namespace csharp_sample_lib { public class sampleLibClass { public static void sayHelloTo ( string name ) { if (! String . IsNullOrEmpty ( name )) { Console . WriteLine ( \"Hello \" + name ); } else { Console . WriteLine ( \"Hello There\" ); } } public static int sum ( int a , int b ) { int c = 0 ; c = a + b ; return c ; } } } after this operation copy following sample to console application and build app then you can run using csharp_sample_lib ; using System ; namespace csharp_sample_app { class Program { static void Main ( string [] args ) { Console . WriteLine ( \"Hello World!\" ); sampleLibClass . sayHelloTo ( \"Computer\" ); int result = sampleLibClass . sum ( 5 , 4 ); Console . WriteLine ( \"Results is\" + result ); Console . WriteLine ( \"Results is {0}\" , result ); Console . Read (); } } } You will see following output that mean we called DLL functions Also we can publish this console application with dll for linux environment or others for linux environment we should install .NETCore follow the link below or commands that I shared with you as below for deployment How to Install Dotnet Core on Ubuntu 20.04 \u2013 TecAdmin Step 1 \u2013 Enable Microsoft PPA wget https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb sudo dpkg -i packages-microsoft-prod.deb Step 2 \u2013 Installing Dotnet Core SDK sudo apt update sudo apt install apt-transport-https sudo apt install dotnet-sdk-3.1 Step 3 \u2013 Install Dotnet Core Runtime Only To install .NET Core Runtime on Ubuntu 20.04 LTS system, execute the commands: sudo apt update To install the previous version of .Net core runtime 2.1, type: sudo apt install dotnet-runtime-2.1 Press \u201cy\u201d for any input prompted by the installer. Step 4 \u2013 (Optional) Check .NET Core Version You can use dotnet command line utility to check installed version of .NET Core on your system. To check dotnet version, type: dotnet --version Now we will publish our application as single executable Open publish menu Select netcoreapp3.1 and Release for linux-x64 Select produce single file After succesfull publish you will have linux binary that you can run with WSL Open WSL and enter the path where this folder located and run application as follow check dotnet --version and then run application you will see similar output In this sample we created single application from settings lets try with shared library located option uncheck the \"produce single file\" option and publish again. Then you will have the following outputs If you run csharp-sample-app you will have the same output","title":"Visual Studio Community Edition"},{"location":"week-4-test/ce103-week-4-test/#java-programming","text":"","title":"Java Programming"},{"location":"week-4-test/ce103-week-4-test/#eclipse-ide","text":"You should download and install eclipse installer and then you should select Eclipse IDE for Java Developers Eclipse Installer 2021-09 R | Eclipse Packages select create a project select java project give project name select finish first we need to add a default package to keep everything organized then we can create our class that includes our functions give class a name you will have following class with main We will create sample java library with static functions as below. package ce103 ; import java.io.IOException ; public class JavaSampleLib { public static void sayHelloTo ( String name ) { if ( name . isBlank () || name . isEmpty ()) { System . out . println ( \"Hello \" + name ); } else { System . out . println ( \"Hello There\" ); } } public static int sum ( int a , int b ) { int c = 0 ; c = a + b ; return c ; } public static void main ( String [] args ) { // TODO Auto-generated method stub System . out . println ( \"Hello World!\" ); JavaSampleLib . sayHelloTo ( \"Computer\" ); int result = JavaSampleLib . sum ( 5 , 4 ); System . out . println ( \"Results is\" + result ); System . out . printf ( \"Results is %d \\n\" , result ); try { System . in . read (); } catch ( IOException e ) { // TODO Auto-generated catch block e . printStackTrace (); } } } also we can add main method to run our library functions. If we run this file its process main function we can see output from console as below There is no exe files java runtime environment run class files but we can export this as an executable. Select Java->Runnable JAR File click next and set output path for jar file If our project has several external dependecy then we can extract this required files (jar, so, dll) in seperated folder or we can combine them and generate a single executable jar Lets pack everthing together, Select launch configuration that has main function end of this operation we will have the following jar that we can by click When you click application if cannot run then try command line to see problem enter jar folder and run the following command java -jar JavaSampleLibExecutable.jar In my case eclipse build JDK is newer than that I installed and set for my OS If we check version we can see problem Java version 1.8.0_231 We can found installed and builded JDK for our application from Eclipse setting select environments select installed JRE or JDK you can see installed JRE or JDK home C : \\Program Files\\Java\\jdk-16.0.1 Open system environment to fix this problem Check user settings first Check system settings we will move up the JDK 16 configuration then command line will run first java Also in system setting check JAVA_HOME After this settings close current command line and open new one write java --version if you see java version updated and 16.0.1 then settings are correct and now if we enter and run application as follow we will see output But when you click this jar its not running as you see so we have options to provide a clickable application there Launch4j is an option here Launch4j - Cross-platform Java executable wrapper you can watch this tutorial also How to convert jar to exe using Launch4J Full explanation - YouTube Download and install launch4j and open application configure your application settings similar to below select jar file and exe output path we can customize main class if have multiple main class select console from setting for this application we can provide a single running application, this setting avoid to run multiple instances we need to set runtime environment versions you can set system parameters before running application with splash screen you can show a splash screen image for your application File attributes such as version product information is configured from version info tab if your application runtime condition has an error then you can show this customized messages also with this options save configuration file xml and compile settings you will see generated output file in log screen Compiling resources Linking Wrapping WARNING: Sign the executable to minimize antivirus false positives or use launching instead of wrapping. Successfully created C:\\Users\\ugur.coruh\\Desktop\\java-export-sample\\JavaSampleLibExecutable.exe now we can run exe by click another option here adding a bat file to run current jar file JavaSampleLibExecutable.bat java -jar JavaSampleLibExecutable.jar if we click bat file then we will automate command line task for current jar file Now return back to our java library and create another console application that use library functions you can set libraries in this step from but our library should exported for our solution Select Add External JARs... Open Exported jar folder and select Or we can select by Add jar from current workspace but in this step I won't add anything I'll add references later we will have the following project lets create a package and lets create a main class for our application check create main function right click to project and add reference you can enter same configurations from project properties Lets export our library as a JAR file and then add to our classpath Select JAR file we configured output as C : \\Users\\ugur.coruh\\Desktop\\java-export-sample\\JavaSampleLib.jar In the same export folder now we have JavaSampleLib.jar return back to java-sample-app and then add this jar file to our project Build Path->Add External Archives you will see its added to reference libraries in our JavaSampleApp.java we can use the following source codes package ce103 ; import java.io.IOException ; public class JavaSampleApp { public static void main ( String [] args ) { // TODO Auto-generated method stub System . out . println ( \"Hello World!\" ); JavaSampleLib . sayHelloTo ( \"Computer\" ); int result = JavaSampleLib . sum ( 5 , 4 ); System . out . println ( \"Results is\" + result ); System . out . printf ( \"Results is %d \\n\" , result ); try { System . in . read (); } catch ( IOException e ) { // TODO Auto-generated catch block e . printStackTrace (); } } } When we run application we will see similar output Lets export this application with its dependent library Select runnable jar Set Launch configuration and Export destination C : \\Users\\ugur.coruh\\Desktop\\java-export-sample\\JavaSampleAppSingle.jar In this option we will have single jar file In the export folder we do not see reference libraries and we can run with command line only change copy required libraries setting and then give a new name for new jar file and export C : \\Users\\ugur.coruh\\Desktop\\java-export-sample\\JavaSampleAppMultiple.jar now we have a folder that contains our libraries referenced in this file we can find our library if we test our application we will see it will work if we delete JavaSampleLib.jar and then try running application we will get error","title":"Eclipse IDE"},{"location":"week-4-test/ce103-week-4-test/#program-testing","text":"","title":"Program Testing"},{"location":"week-4-test/ce103-week-4-test/#unit-test-development","text":"","title":"Unit Test Development"},{"location":"week-4-test/ce103-week-4-test/#c-unit-tests","text":"","title":"C Unit Tests"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition_3","text":"","title":"Visual Studio Community Edition"},{"location":"week-4-test/ce103-week-4-test/#c-unit-tests_1","text":"","title":"C++ Unit Tests"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition_4","text":"C/C++ i\u00e7in birim testleri yazma - Visual Studio (Windows) | Microsoft Docs Use cpp-sample-lib project and add select Native Unit Test set project path and name you will have cpp-sample-test project add library project from references Add cpp-sample-lib to cpp-sample-test project cpp-sample-test.cpp #include \"pch.h\" #include \"CppUnitTest.h\" #include \"..\\cpp-sample-lib\\samplelib.h\" using namespace Microsoft :: VisualStudio :: CppUnitTestFramework ; namespace cppsampletest { TEST_CLASS ( cppsampletest ) { public : TEST_METHOD ( TestSumCorrect ) { Assert :: AreEqual ( 9 , sum ( 4 , 5 )); } TEST_METHOD ( TestSumInCorrect ) { Assert :: AreEqual ( 10 , sum ( 4 , 5 )); } }; }","title":"Visual Studio Community Edition"},{"location":"week-4-test/ce103-week-4-test/#c-unit-tests_2","text":"","title":"C# Unit Tests"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-mstestv2net","text":"Install extension fine code coverage https://marketplace.visualstudio.com/items?itemName=FortuneNgwenya.FineCodeCoverage Create a .Net Framework Library set project framework and path Create library functions using System ; using System.Collections.Generic ; using System.Text ; namespace cs_lib_sample { public class SampleLibClass { public static string sayHelloTo ( string name ) { string result = String . Empty ; if (! String . IsNullOrEmpty ( name )) { result = \"Hello \" + name ; } else { result = \"Hello There\" ; } Console . WriteLine ( result ); return result ; } public static int sum ( int a , int b ) { int c = 0 ; c = a + b ; return c ; } public int multiply ( int a , int b ) { return a * b ; } } } right click and then create unit test project press OK enter test code using Microsoft.VisualStudio.TestTools.UnitTesting ; using cs_lib_sample ; using System ; using System.Collections.Generic ; using System.Linq ; using System.Text ; using System.Threading.Tasks ; namespace cs_lib_sample.Tests { [TestClass()] public class SampleLibClassTests { [TestMethod()] public void testSayHelloTo () { Assert . AreEqual ( \"Hello Computer\" , SampleLibClass . sayHelloTo ( \"Computer\" ), \"Regular say hello should work\" ); } [TestMethod()] public void testSayHelloToWrong () { Assert . AreEqual ( \"Hello All\" , SampleLibClass . sayHelloTo ( \"Computer\" ), \"Regular say hello won't work\" ); } [TestMethod()] public void testSumCorrect () { Assert . AreEqual ( 9 , SampleLibClass . sum ( 4 , 5 ), \"Regular sum should work\" ); } [TestMethod()] public void testSumWrong () { Assert . AreEqual ( 10 , SampleLibClass . sum ( 4 , 5 ), \"Regular sum shouldn't work\" ); } [TestMethod()] public void testMultiply () { SampleLibClass sampleLib = new SampleLibClass (); Assert . AreEqual ( 20 , sampleLib . multiply ( 4 , 5 ), \"Regular multiplication should work\" ); } } } Run tests you will code coverage and entered or passed branches","title":"Visual Studio Community Edition (MSTestV2+.Net)"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-nunitnetcore","text":"use cshar-sample-lib for this example create and add a unit test project to solution Add project reference SampleLibraryTestClasss in NUnit Project using csharp_sample_lib ; using NUnit.Framework ; namespace csharp_sample_lib_test { public class SampleLibraryTestClass { sampleLibClass sampleLib ; [SetUp] public void Setup () { sampleLib = new sampleLibClass (); } [Test] public void testSayHelloTo () { Assert . AreEqual ( \"Hello Computer\" , sampleLibClass . sayHelloTo ( \"Computer\" ), \"Regular say hello should work\" ); } [Test] public void testSayHelloToWrong () { Assert . AreEqual ( \"Hello All\" , sampleLibClass . sayHelloTo ( \"Computer\" ), \"Regular say hello won't work\" ); } [Test] public void testSumCorrect () { Assert . AreEqual ( 9 , sampleLibClass . sum ( 4 , 5 ), \"Regular sum should work\" ); } [Test] public void testSumWrong () { Assert . AreEqual ( 10 , sampleLibClass . sum ( 4 , 5 ), \"Regular sum shouldn't work\" ); } [Test] public void testMultiply () { Assert . AreEqual ( 20 , sampleLib . multiply ( 4 , 5 ), \"Regular multiplication should work\" ); } } } sample class library using System ; namespace csharp_sample_lib { public class sampleLibClass { public static string sayHelloTo ( string name ) { string result = String . Empty ; if (! String . IsNullOrEmpty ( name )) { result = \"Hello \" + name ; } else { result = \"Hello There\" ; } Console . WriteLine ( result ); return result ; } public static int sum ( int a , int b ) { int c = 0 ; c = a + b ; return c ; } public int multiply ( int a , int b ) { return a * b ; } } } Open test explorer and run tests or you can run from project Also we can create unit test from library class, right click the sampleLibClass and select create unit tests but this option do not provide nunit tests. using Microsoft.VisualStudio.TestTools.UnitTesting ; using csharp_sample_lib ; using System ; using System.Collections.Generic ; using System.Text ; namespace csharp_sample_lib.Tests { [TestClass()] public class sampleLibClassTests { [TestMethod()] public void sayHelloToTest () { Assert . Fail (); } [TestMethod()] public void sumTest () { Assert . Fail (); } [TestMethod()] public void multiplyTest () { Assert . Fail (); } } } we will not commit this changes and continue from nunit test project, the fine code coverage also work for nunit test but not provide inline highlighting if we run tests we will have the following outputs Inline code highlight is part of enterprise visual studio edition Analyzing code coverage in Visual Studio - DEV Community","title":"Visual Studio Community Edition (NUnit+.NETCore)"},{"location":"week-4-test/ce103-week-4-test/#tldr","text":"Additional information you can use OpenCover + Nunit Runner + Report Generator together to setup a code coverage report but it has complex batch running process. After a few try I decided to use fine code coverage but here is the usage not tested well. First unit test runner tool doesn't support .Net Core c# - The NUnit 3 driver encountered an error while executing reflected code (NUnit.Engine.NUnitEngineException) - Stack Overflow Follow the instructions on the link CMD OpenCover \u00b7 sukhoi1/Useful-Notes Wiki \u00b7 GitHub Install OpenCover, ReportGenerator, Nunit,Runners packages then use the package installation folder to get tools that you need Here is a sample for open cover, select package and copy path Goto path and tools C : \\Users\\ugur.coruh\\.nuget\\packages\\opencover\\4.7.1221 You need to setup some batch similar with following run-test-coverage.bat set pathA = C:\\Users\\ugur.coruh\\.nuget\\packages\\opencover\\4.7.1221\\tools set pathB = C:\\Users\\ugur.coruh\\.nuget\\packages\\nunit.consolerunner\\3.12.0\\tools set pathC = C:\\Users\\ugur.coruh\\.nuget\\packages\\reportgenerator\\4.8.13\\tools\\netcoreapp3.0 set dllpath = C:\\Users\\ugur.coruh\\Desktop\\csharp-sample-lib\\csharp-sample-lib-test\\bin\\Debug\\netcoreapp3.1 \" %pathA% \\OpenCover.Console.exe\" ^ - targetargs: \" %dllpath% \\csharp-sample-lib-test.dll\" ^ - filter: \"+[csharp-sample-lib*]* -[*test]*\" ^ - target: \" %pathB% \\nunit3-console.exe\" ^ - output: \" %dllpath% \\coverReport.xml\" ^ - skipautoprops -register:user && \" %pathC% \\ReportGenerator.exe\" -reports: \" %dllpath% \\coverReport.xml\" -targetdir: \"\" %dllpath% \\coverage \" pause but nunit3-console.exe gives error for this compatibility issues I prefer to use fine code coverage extension. OpenCover related studies Code coverage of manual or automated tests with OpenCover for .NET applications \u2013 Automation Rhapsody Code coverage of .NET Core unit tests with OpenCover \u2013 Automation Rhapsody Sample OpenCover report Summary - Coverage Report","title":"TL;DR"},{"location":"week-4-test/ce103-week-4-test/#download-and-setup-opencover-nunit-console-report-generator-without-package-manager","text":"You can also download the tools from github project pages and install on your operating system,","title":"Download and Setup OpenCover, NUnit Console, Report Generator without Package Manager"},{"location":"week-4-test/ce103-week-4-test/#opencover","text":"Releases \u00b7 OpenCover/opencover \u00b7 GitHub Select advanced and then install for all users","title":"OpenCover"},{"location":"week-4-test/ce103-week-4-test/#reportgenerator","text":"Release ReportGenerator_4.8.13 \u00b7 danielpalme/ReportGenerator \u00b7 GitHub","title":"ReportGenerator"},{"location":"week-4-test/ce103-week-4-test/#nunit-console","text":"Downloads","title":"NUnit Console"},{"location":"week-4-test/ce103-week-4-test/#nunit-mstest-batch-report-generation-not-tested","text":"OpenCover and ReportGenerator Unit Test Coverage in Visual Studio 2013 and 2015 \u2013 CodeHelper.Net OpenCover and ReportGenerator Unit Test Coverage in Visual Studio 2013 and 2015 - CodeProject","title":"NUnit + MSTest Batch Report Generation (Not Tested)"},{"location":"week-4-test/ce103-week-4-test/#java-unit-tests","text":"","title":"Java Unit Tests"},{"location":"week-4-test/ce103-week-4-test/#eclipse-ide-junit4-junit5","text":"In this sample we will create two example for similar library Please check the following links JUnit 5 tutorial - Learn how to write unit tests JUnit 5 JUnit 5 User Guide https://www.eclemma.org/ JUnit Hello World Example - Examples Java Code Geeks - 2021 https://yasinmemic.medium.com/java-ile-unit-test-yazmak-birim-test-ca15cf0d024b","title":"Eclipse IDE (JUnit4 , JUnit5)"},{"location":"week-4-test/ce103-week-4-test/#java-application-junit","text":"In normal java application we can right click the project java-sample-lib and add Junit case and you will have the following test class Now we will create tests that check our function flowchart and return values We need to cover all code branches that we coded I have updated JavaSampleLib.java as follow to check outputs JavaSampleLib.java package ce103 ; public class JavaSampleLib { public static String sayHelloTo ( String name ) { String output = \"\" ; if ( ! name . isBlank () && ! name . isEmpty ()){ output = \"Hello \" + name ; } else { output = \"Hello There\" ; } System . out . println ( output ); return output ; } public static int sum ( int a , int b ) { int c = 0 ; c = a + b ; return c ; } public int multiply ( int a , int b ) { return a * b ; } // public static void main(String[] args) { // // TODO Auto-generated method stub // System.out.println(\"Hello World!\"); // // JavaSampleLib.sayHelloTo(\"Computer\"); // int result = JavaSampleLib.sum(5, 4); // System.out.println(\"Results is\" + result); // System.out.printf(\"Results is %d \\n\", result); // // // try { // System.in.read(); // } catch (IOException e) { // // TODO Auto-generated catch block // e.printStackTrace(); // } // // } } and JavaSampleLibTest.java package ce103 ; import static org.junit.jupiter.api.Assertions.* ; import org.junit.jupiter.api.AfterAll ; import org.junit.jupiter.api.AfterEach ; import org.junit.jupiter.api.BeforeAll ; import org.junit.jupiter.api.BeforeEach ; import org.junit.jupiter.api.DisplayName ; import org.junit.jupiter.api.RepeatedTest ; import org.junit.jupiter.api.Test ; import org.junit.jupiter.params.ParameterizedTest ; import org.junit.jupiter.params.provider.MethodSource ; class JavaSampleLibTest { JavaSampleLib sampleLib ; @BeforeAll static void setUpBeforeClass () throws Exception { } @AfterAll static void tearDownAfterClass () throws Exception { } @BeforeEach void setUp () throws Exception { sampleLib = new JavaSampleLib (); } @AfterEach void tearDown () throws Exception { } @Test @DisplayName ( \"Simple Say Hello should work\" ) void testSayHelloTo () { assertEquals ( \"Hello Computer\" , JavaSampleLib . sayHelloTo ( \"Computer\" ), \"Regular say hello should work\" ); } @Test @DisplayName ( \"Simple Say Hello shouldn' work\" ) void testSayHelloToWrong () { assertEquals ( \"Hello All\" , JavaSampleLib . sayHelloTo ( \"Computer\" ), \"Regular say hello won't work\" ); } @Test @DisplayName ( \"Simple sum should work\" ) void testSumCorrect () { assertEquals ( 9 , JavaSampleLib . sum ( 4 , 5 ), \"Regular sum should work\" ); } @Test @DisplayName ( \"Simple sum shouldn't work\" ) void testSumWrong () { assertEquals ( 10 , JavaSampleLib . sum ( 4 , 5 ), \"Regular sum shouldn't work\" ); } @Test @DisplayName ( \"Simple multiplication should work\" ) void testMultiply () { assertEquals ( 20 , sampleLib . multiply ( 4 , 5 ), \"Regular multiplication should work\" ); } @RepeatedTest ( 5 ) @DisplayName ( \"Ensure correct handling of zero\" ) void testMultiplyWithZero () { assertEquals ( 0 , sampleLib . multiply ( 0 , 5 ), \"Multiple with zero should be zero\" ); assertEquals ( 0 , sampleLib . multiply ( 5 , 0 ), \"Multiple with zero should be zero\" ); } public static int [][] data () { return new int [][] { { 1 , 2 , 2 }, { 5 , 3 , 15 }, { 121 , 4 , 484 },{ 2 , 2 , 2 } }; } @ParameterizedTest @MethodSource ( value = \"data\" ) void testWithStringParameter ( int [] data ) { JavaSampleLib tester = new JavaSampleLib (); int m1 = data [ 0 ] ; int m2 = data [ 1 ] ; int expected = data [ 2 ] ; assertEquals ( expected , tester . multiply ( m1 , m2 )); } } if we run tests we will see all results there also we can see the code coverage of tests when we open our source code (just close and open again another case highlighting will not work) you will see tested part of your codes","title":"Java Application + JUnit"},{"location":"week-4-test/ce103-week-4-test/#maven-java-application-junit","text":"Lets create Maven project with tests Create a maven project File -> New -> Maven Project Lets convert our sample java-sample-lib directories to standard folder structure for test and app division Maven \u2013 Introduction to the Standard Directory Layout Also for intro you can use this JUnit Hello World Example - Examples Java Code Geeks - 2021 Eclipse Maven Java JUnit 4.12 (pulled by Maven automatically) Lets give new sample java-sample-lib-mvnbut in this time we will create a maven project pom.xml file <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\" > <modelVersion> 4.0.0 </modelVersion> <groupId> com.ce103 </groupId> <artifactId> java-sample-lib-ext </artifactId> <version> 0.0.1-SNAPSHOT </version> <name> Java Sample Lib </name> <description> Java Sample with Unit Test </description> </project> we will add JUnit 5 for our project <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\" > <modelVersion> 4.0.0 </modelVersion> <groupId> com.ce103 </groupId> <artifactId> java-sample-lib-ext </artifactId> <version> 0.0.1-SNAPSHOT </version> <name> Java Sample Lib </name> <description> Java Sample with Unit Test </description> <dependencies> <dependency> <groupId> org.junit.jupiter </groupId> <artifactId> junit-jupiter-params </artifactId> <version> 5.7.1 </version> <scope> test </scope> </dependency> </dependencies> </project> it will automatically download libraries Create java sample library in ce103 package, first create java package In this package create library class copy content from other library package ce103 ; public class JavaSampleLib { public static String sayHelloTo ( String name ) { String output = \"\" ; if ( ! name . isBlank () && ! name . isEmpty ()){ output = \"Hello \" + name ; } else { output = \"Hello There\" ; } System . out . println ( output ); return output ; } public static int sum ( int a , int b ) { int c = 0 ; c = a + b ; return c ; } public int multiply ( int a , int b ) { return a * b ; } } Now lets create tests inf src/test/java create a JUnit Case you will simple template package ce103 ; import static org.junit.jupiter.api.Assertions.* ; import org.junit.jupiter.api.AfterAll ; import org.junit.jupiter.api.AfterEach ; import org.junit.jupiter.api.BeforeAll ; import org.junit.jupiter.api.BeforeEach ; import org.junit.jupiter.api.Test ; class JavaSampleLibTest { @BeforeAll static void setUpBeforeClass () throws Exception { } @AfterAll static void tearDownAfterClass () throws Exception { } @BeforeEach void setUp () throws Exception { } @AfterEach void tearDown () throws Exception { } @Test void testSayHelloTo () { fail ( \"Not yet implemented\" ); } @Test void testSum () { fail ( \"Not yet implemented\" ); } @Test void testMultiply () { fail ( \"Not yet implemented\" ); } } now lets copy tests from other projects That's a part of java unit testing...","title":"Maven Java Application + JUnit"},{"location":"week-4-test/ce103-week-4-test/#tdd-test-driven-development","text":"","title":"TDD (Test Driven Development)"},{"location":"week-4-test/ce103-week-4-test/#test-and-deployment-automation-management","text":"","title":"Test and Deployment Automation Management"},{"location":"week-4-test/ce103-week-4-test/#travis-ci-c","text":"","title":"Travis-CI + C"},{"location":"week-4-test/ce103-week-4-test/#travis-ci-cpp","text":"","title":"Travis-CI + Cpp"},{"location":"week-4-test/ce103-week-4-test/#travis-ci-c_1","text":"","title":"Travis-CI + C"},{"location":"week-4-test/ce103-week-4-test/#travis-ci-java","text":"","title":"Travis-CI + Java"},{"location":"week-4-test/ce103-week-4-test/#references","text":"GitHub - MicrosoftDocs/cpp-docs: C++ Documentation","title":"References"},{"location":"week-5-c/ce103-week-5-c/","text":"CE103 Algorithms and Programming I \u00b6 Week-5 \u00b6 Fall Semester, 2021-2022 \u00b6 Download DOC , SLIDE , PPTX C Functional Console Programming \u00b6 Books and Resources \u00b6 free-programming-books/free-programming-books-langs.md at master \u00b7 EbookFoundation/free-programming-books \u00b7 GitHub C Functional Console Programming \u00b6 We will use the following course notes and examples. Learn C Programming C Tutorials - Introduction to C Programming Language The C and C++ programming tutorials, hands-on approach with program examples, code samples and tons of output images using Visual C++, C++ Builder, Linux gcc and g++ compilers and IDE CS50x 2021 C Programming For Dummies C reference - cppreference.com https://c.happycodings.com/ C Programming \u00b6 C is a versatile programming language. It is useful for creating software such as operating systems, databases, and compilers. For novices, C programming is a great language to learn to code in. Our C tutorials will take you step by step through the process of learning C programming. Before starting you should check your development enviroment. You will open visual studio community edition and create a C++ console application then rename *.cpp file to *.c for triggering c complier. Before starting you should understand the executable generation flows #include <stdio.h> int main ( void ) { printf ( \"hello, world\" ); } and how we convert source code to binary codehere is a sandbox in CS50 harvard course Week 0 - CS50x https://sandbox.cs50.io/ you can use it for online compiler $ make hello clang -fsanitize = signed-integer-overflow -fsanitize = undefined -ggdb3 -O0 -std = c11 -Wall -Werror -Wextra -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wshadow hello.c -lcrypt -lcs50 -lm -o hello $ ./hello hello, world if you want to make samething in windows environment you should create the following makefile near the hello.c Makefile # This is the default target, which will be built when # you invoke make .PHONY : all all : hello # This rule tells make how to build hello from hello.cpp hello : hello . c g++ -o hello hello.c # This rule tells make to copy hello to the binaries subdirectory, # creating it if necessary .PHONY : install install : mkdir -p binaries cp -p hello binaries # This rule tells make to delete hello and hello.o .PHONY : clean clean : rm -f hello C: \\U sers \\u gur.coruh \\D esktop \\h ello-make>make hello g++ -o hello hello.c C: \\U sers \\u gur.coruh \\D esktop \\h ello-make>dir Volume in drive C is Windows Volume Serial Number is 8C3C-8F8C Directory of C: \\U sers \\u gur.coruh \\D esktop \\h ello-make 11 /02/2021 01 :44 AM <DIR> . 11 /02/2021 01 :44 AM <DIR> .. 11 /02/2021 01 :15 AM 73 hello.c 11 /02/2021 01 :44 AM 54 ,022 hello.exe 11 /02/2021 01 :43 AM 458 Makefile 3 File ( s ) 54 ,553 bytes 2 Dir ( s ) 101 ,382,164,480 bytes free C: \\U sers \\u gur.coruh \\D esktop \\h ello-make>hello.exe hello, world C: \\U sers \\u gur.coruh \\D esktop \\h ello-make> $ clang hello.c $ ls a.out* hello* hello.c $ ./a.out hello, world $ clang -o hello hello.c $ ls a.out* hello* hello.c $ ./hello hello, world $ ls hello . c $ clang - o hello hello . c - lcs50 $ ls hello * hello . c $ . / hello hello , world $ Also you can use visual studio community edition. preprocessing \u00b6 get included file declarations #include <cs50.h> #include <stdio.h> int main ( void ) { string name = get_string ( \"What's your name? \" ); printf ( \"hello, %s \\n \" , name ); } to this string get_string ( string prompt ); int printf ( string format , ...); int main ( void ) { string name = get_string ( \"What's your name? \" ); printf ( \"hello, %s \\n \" , name ); } compiling \u00b6 convert source code to assembler code ... main: # @main .cfi_startproc # BB#0: pushq %rbp .Ltmp0: .cfi_def_cfa_offset 16 .Ltmp1: .cfi_offset %rbp, -16 movq %rsp, %rbp .Ltmp2: .cfi_def_cfa_register %rbp subq $16, %rsp xorl %eax, %eax movl %eax, %edi movabsq $.L.str, %rsi movb $0, %al callq get_string movabsq $.L.str.1, %rdi movq %rax, -8(%rbp) movq -8(%rbp), %rsi movb $0, %al callq printf ... assembling \u00b6 convert assembler to opcodes ... main: # @main .cfi_startproc # BB#0: pushq %rbp .Ltmp0: .cfi_def_cfa_offset 16 .Ltmp1: .cfi_offset %rbp, -16 movq %rsp, %rbp .Ltmp2: .cfi_def_cfa_register %rbp subq $16, %rsp xorl %eax, %eax movl %eax, %edi movabsq $.L.str, %rsi movb $0, %al callq get_string movabsq $.L.str.1, %rdi movq %rax, -8(%rbp) movq -8(%rbp), %rsi movb $0, %al callq printf ... to thislinking \u00b6 hello.c cs50.c stdio.c 01111111010001010100110001000110 00000010000000010000000100000000 00000000000000000000000000000000 00000000000000000000000000000000 00000001000000000011111000000000 00000001000000000000000000000000 00000000000000000000000000000000 00000000000000000000000000000000 00000000000000000000000000000000 00000000000000000000000000000000 10100000000000100000000000000000 00000000000000000000000000000000 00000000000000000000000000000000 01000000000000000000000000000000 00000000000000000100000000000000 00001010000000000000000100000000 01010101010010001000100111100101 01001000100000111110110000010000 00110001110000001000100111000111 01001000101111100000000000000000 00000000000000000000000000000000 00000000000000001011000000000000 11101000000000000000000000000000 00000000010010001011111100000000 00000000000000000000000000000000 00000000000000000000000001001000 ... 01111111010001010100110001000110 00000010000000010000000100000000 00000000000000000000000000000000 00000000000000000000000000000000 00000011000000000011111000000000 00000001000000000000000000000000 11000000000011110000000000000000 00000000000000000000000000000000 01000000000000000000000000000000 00000000000000000000000000000000 00101000001100100000000000000000 00000000000000000000000000000000 00000000000000000000000000000000 01000000000000000011100000000000 00000111000000000100000000000000 00011100000000000001100100000000 00000001000000000000000000000000 00000101000000000000000000000000 00000000000000000000000000000000 00000000000000000000000000000000 00000000000000000000000000000000 00000000000000000000000000000000 00000000000000000000000000000000 00000000000000000000000000000000 01011100001001010000000000000000 00000000000000000000000000000000 ... 00101111011011000110100101100010 01100011001011100111001101101111 00101110001101100010000000101111 01110101011100110111001000101111 01101100011010010110001000101111 01111000001110000011011001011111 00110110001101000010110101101100 01101001011011100111010101111000 00101101011001110110111001110101 00101111011011000110100101100010 01100011010111110110111001101111 01101110011100110110100001100001 01110010011001010110010000101110 01100001001000000010000001000001 01010011010111110100111001000101 01000101010001000100010101000100 00100000001010000010000000101111 01101100011010010110001000101111 01111000001110000011011001011111 00110110001101000010110101101100 01101001011011100111010101111000 00101101011001110110111001110101 00101111011011000110010000101101 01101100011010010110111001110101 01111000001011010111100000111000 00110110001011010011011000110100 ... combine binary codes to generate exentroduction \u00b6 Keywords and Identifiers \u00b6 This tutorial will teach you about keywords, which are reserved words in C programming that are part of the syntax. You will also be taught about identifiers and how to name them. Character set \u00b6 A character set is a collection of alphabets, letters, and special characters that are supported by the C programming language. As variables and functions, C accepts both lowercase and uppercase alphabets. Alphabets \u00b6 Uppercase : A B C ................................... X Y Z Lowercase : a b c ...................................... x y z Digits \u00b6 0 1 2 3 4 5 6 7 8 9 Special Characters \u00b6 Special Characters in C Programming , < > . - ( ) ; $ : % [ ] # ? ' & { } \" ^ ! * / - \\ ~ + White space Characters A newline, a horizontal tab, a carriage return, and a form feed are all examples of punctuation. C Keywords \u00b6 Keywords are reserved words in programming that have special meanings to the compiler. Keywords are syntax elements that cannot be used as identifiers. As an example: int money ; In this case, int is a keyword indicating that money is a variable of type int (integer). Because C is a case-sensitive language, all keywords must be written in lowercase. The following is a list of all the keywords permitted in ANSI C. C Keywords auto double int struct break else long switch case enum register typedef char extern return union continue for signed void do if static while default goto sizeof volatile const float short unsigned All of these keywords, as well as their syntax and application, will be covered in their respective topics. The Complete List of all 32 C Programming Keywords (With Examples) - Programiz C Identifiers \u00b6 The term \"identifier\" refers to the name given to entities such as variables, functions, structures, and so on. Identifiers must be distinct. They are created to give a unique name to an entity in order to identify it during program execution. As an example: int money ; double accountBalance ; money and accountBalance are identifiers in this context. Also, keep in mind that identifier names must be distinct from keyword names. Because int is a keyword, it cannot be used as an identifier. Rules for naming identifiers \u00b6 Letters (including capital and lowercase letters), numbers, and underscores can all be used in a valid identification. An identifier's initial letter should be either a letter or an underscore. Keywords such as int, while, and so on cannot be used as identifiers. There are no restrictions on the length of an identification. However, if the identifier is larger than 31 characters, you may have issues with some compilers. If you follow the above criterion, you can use any name as an identifier; nevertheless, provide meaningful names to identifiers that make sense. C Variables, Constants and Literals \u00b6 This article will teach you about variables and the rules for naming variables. You will also learn about different literals and how to build constants in C programming. Variables \u00b6 A variable in programming is a container (storage space) for data. Each variable should be given a unique name to denote the storage region (identifier). Variable names are simply a graphical representation of a memory location. As an example: int playerScore = 95 ; In this case, playerScore is an int variable. The variable is given the integer value 95 in this case. A variable's value may be altered, thus the term variable. char ch = 'a' ; // some code ch = 'l' ; Rules for naming a variable \u00b6 A variable name can only contain characters (uppercase and lowercase), numbers, and underscores. A variable's initial letter should be either a letter or an underscore. There are no restrictions on the length of a variable name (identifier). However, if the variable name is larger than 31 characters, you may have issues with some compilers. Please keep in mind that you should always aim to give variables meaningful names. For example, firstName is a more appropriate variable name than fn . C is a highly typed programming language. This means that once a variable is declared, it cannot be modified. As an example: int number = 5 ; // integer variable number = 5.5 ; // error double number ; // error In this case, the type of number variable is int. This variable cannot be assigned the floating-point (decimal) value 5.5. Furthermore, you cannot change the variable's data type to double. By the way, in order to hold decimal values in C, you must designate their type as double or float. Literals \u00b6 Literals are data that are used to represent fixed values. They can be directly utilized in the code. For example: 1, 2.5, 'c,' and so on. Literals are 1, 2.5, and 'c' in this case. Why? These words cannot have various values assigned to them. 1. Integers \u00b6 An integer is a numeric literal (related with numbers) that does not have any fractional or exponential components. In C programming, there are three types of integer literals: digits (base 10) the number octal (base 8) hexadecimal (base 16) For example: Decimal : 0 , -9 , 22 etc Octal : 021 , 077 , 033 etc Hexadecimal : 0x7f , 0x2a , 0x521 etc In C, octal begins with a 0 while hexadecimal begins with a 0x. 2. Floating-point Literals \u00b6 A floating-point literal is a numeric literal with a fractional or exponent form. As an example: -2.0 0.0000234 -0.22E-5 Please note that \\[ E-5 = 10^{-5} \\] 3. Characters \u00b6 Enclosing a single character inside single quote marks yields a character literal. For example, 'a','m', 'F', '2', \", and so on. 4. Escape Sequences \u00b6 In C programming, it is sometimes important to employ characters that cannot be typed or have specific meaning. For instance, newline (enter), tab, question mark, and so on. Escape sequences are utilized to utilise these characters. Escape Sequences Character \\b Backspace \\f Form feed \\n Newline \\r Return \\t Horizontal Tab \\v Vertical Tab `\\\\ Backslash \\' Single quotation mark \\\" Double quotation mark \\? Question mark \\0 Null character 5. String Literals \u00b6 A string literal is a string of characters surrounded by double quotation marks. As an example: \"good\" //string constant \"\" //null string constant \" \" //string constant of six white space \"x\" //string constant having a single character. \"Earth is round \\n \" //prints string with a newline Constants \u00b6 The const keyword can be used to declare a variable whose value cannot be modified. This will result in a constant. As an example, const double PI = 3.14 ; We've introduced the keyword const. PI is a symbolic constant in this context; its value cannot be modified. const double PI = 3.14 ; PI = 2.9 ; //Error You may also use the #define preprocessor directive to declare a constant. C Data Types \u00b6 In this course, you will learn about basic data types in C programming, such as int, float, and char. Data types are variable declarations in C programming. The kind and quantity of data linked with variables are determined by this. As an example, int myVar ; In this case, myVar is an int (integer) variable. int has a size of 4 bytes. Basic types \u00b6 Here's a table containing commonly used types in C programming for quick access. Type Size(bytes) Format Specifiers int at least 2, usually 4 %d %i char 1 %c float 4 %f double 8 %lf short int 2 usually %hd unsigned int at least 2, usually 4 %u long int at least 4, usually 8 %ld %li long long int at least 8 %lld %lli unsigned long int at least 4 %lu unsigned long long int at least 8 %llu signed char 1 %c usigned char 1 %c long double at least 10, usually 12 or 16 %Lf int \u00b6 Integers are entire integers with zero, positive, and negative values but no decimal values. For instance, \\(0\\) , \\(-5\\) , and \\(10\\) In order to declare an integer variable, we can use int . int id ; In this case, id is an integer variable. In C programming, you can define many variables at the same time. As an example, int id , age ; Integers are typically \\(\\text{4 bytes}\\) in size ( \\(\\text{32 bits}\\) ). It may also take $2^{32} $ different states from \\(-2147483648\\) to \\(2147483647\\) . float and double \u00b6 Real values are stored in float and double variables. float salary ; double price ; Floating-point numbers in C can also be expressed in exponential form. As an example, float normalizationFactor = 22.442e2 ; What is the distinction between float and double? Float (single precision float data type) has a size of 4 bytes. And double (double precision float data type) is 8 bytes in size. char \u00b6 The keyword char is used to declare variables of the character type. As an example, char test = 'h' ; The character variable is 1 byte in size. void \u00b6 void is an unfinished type. It signifies \"nothing\" or \"nothing of the sort.\" You might conceive of emptiness as the absence of something. If a function does not return anything, its return type should be void. It is important to note that void variables cannot be created. short and long \u00b6 If you need to utilize a huge number, a type specifier long can be used. Here's how it works: long a ; long long b ; long double c ; Variables a and b can store integer values in this case. In addition, c may hold a floating-point number. You can use short if you are certain that just a tiny integer range between \\(-32767, +32767\\) will be utilized. short d ; The sizeof() operator may always be used to determine the size of a variable. #include <stdio.h> int main () { short a ; long b ; long long c ; long double d ; printf ( \"size of short = %d bytes \\n \" , sizeof ( a )); printf ( \"size of long = %d bytes \\n \" , sizeof ( b )); printf ( \"size of long long = %d bytes \\n \" , sizeof ( c )); printf ( \"size of long double= %d bytes \\n \" , sizeof ( d )); return 0 ; } signed and unsigned \u00b6 Signed and unsigned are type modifiers in C. You may use them to change the data storage of a data type. As an example, unsigned int x ; int y ; Because we applied the unsigned modifier, the variable x can only retain zero and positive numbers. Given that int has a capacity of 4 bytes , variable y can have values ranging from - \\(2^{31}\\) to \\(2^{31}-1\\) , But variable x can hold values ranging from \\(0\\) to \\(2^{32}-1\\) . Other data types defined in C programming are: \u00b6 bool Type Enumerated type Complex types Derived Data Types \u00b6 Derived types are data types that are derived from basic data types. Arrays, pointers, function types, structures, and so on are examples. C Input Output (I/O) \u00b6 In this lesson, you will learn how to utilize the scanf() function to accept user input and the printf() method to display output to the user. C Output \u00b6 printf() is a common output function in C programming. The function outputs formatted data to the screen. As an example, Example 1: C Output \u00b6 #include <stdio.h> int main () { // Displays the string inside quotations printf ( \"C Programming\" ); return 0 ; } Output C Programming How does this software function? The main() function is required in all legal C programs. The execution of the code begins at the commencement of the main() function. The printf() function is a library function that is used to provide formatted output to the screen. The string is printed within quote marks by the function. In order to utilize printf() in our program, we must include the stdio.h header file using the #include <stdio.h> declaration. The \"Exit status\" of the program is the return 0; statement within the main() method. It's entirely voluntary. Example 2: Integer Output \u00b6 #include <stdio.h> int main () { int testInteger = 5 ; printf ( \"Number = %d\" , testInteger ); return 0 ; } Output Number = 5 To print int types, we utilize the %d format specifier. The value of testInteger will be used in instead of the %d inside the quotes. Example 3: float and double Output \u00b6 #include <stdio.h> int main () { float number1 = 13.5 ; double number2 = 12.4 ; printf ( \"number1 = %f \\n \" , number1 ); printf ( \"number2 = %lf\" , number2 ); return 0 ; } Output number1 = 13 .500000 number2 = 12 .400000 We utilize the %f format specifier to print floats . Similarly, to display double numbers, we use %lf . Example 4: Print Characters \u00b6 #include <stdio.h> int main () { char chr = 'a' ; printf ( \"character = %c\" , chr ); return 0 ; } Output character = a We utilize the %c format specifier to print char. C Input \u00b6 scanf() is a widely used function in C programming to accept user input. The scanf() function reads formatted input from typical input devices like keyboards. Example 5: Integer Input/Output \u00b6 #include <stdio.h> int main () { int testInteger ; printf ( \"Enter an integer: \" ); scanf ( \"%d\" , & testInteger ); printf ( \"Number = %d\" , testInteger ); return 0 ; } Output Enter an integer: 4 Number = 4 To accept int input from the user, we utilized the %d format specifier inside the scanf() method. When a user enters an integer, it is saved in the variable testInteger . You'll see that we used &testInteger within scanf () . This is due to the fact that &testInteger obtains the address of testInteger , and the value given by the user is saved in that address. Example 6: Float and Double Input/Output \u00b6 #include <stdio.h> int main () { float num1 ; double num2 ; printf ( \"Enter a number: \" ); scanf ( \"%f\" , & num1 ); printf ( \"Enter another number: \" ); scanf ( \"%lf\" , & num2 ); printf ( \"num1 = %f \\n \" , num1 ); printf ( \"num2 = %lf\" , num2 ); return 0 ; } Output Enter a number: 12 .523 Enter another number: 10 .2 num1 = 12 .523000 num2 = 10 .200000 For float and double , we use the format specifiers %f and %lf , respectively. Example 7: C Character I/O \u00b6 #include <stdio.h> int main () { char chr ; printf ( \"Enter a character: \" ); scanf ( \"%c\" , & chr ); printf ( \"You entered %c.\" , chr ); return 0 ; } Output Enter a character: g You entered g When a user enters a character into the aforementioned software, the character itself is not saved. An integer value (ASCII value) is instead stored. When we use the %c text format to represent that value, the input character is displayed. The ASCII value of the character is printed when we utilize %d to show it. Example 8: ASCII Value \u00b6 #include <stdio.h> int main () { char chr ; printf ( \"Enter a character: \" ); scanf ( \"%c\" , & chr ); // When %c is used, a character is displayed printf ( \"You entered %c. \\n \" , chr ); // When %d is used, ASCII value is displayed printf ( \"ASCII value is %d.\" , chr ); return 0 ; } Output Enter a character: g You entered g. ASCII value is 103 . I/O Multiple Values \u00b6 Here's how to take numerous user inputs and show them. #include <stdio.h> int main () { int a ; float b ; printf ( \"Enter integer and then a float: \" ); // Taking multiple inputs scanf ( \"%d%f\" , & a , & b ); printf ( \"You entered %d and %f\" , a , b ); return 0 ; } Output Enter integer and then a float: -3 3 .4 You entered -3 and 3 .400000 Format Specifiers for I/O \u00b6 As you can see from the samples above, we apply %d for int %f for float %lf for double %c for char The following is a collection of widely used C data types and associated format specifiers. Type Size(bytes) Format Specifiers int at least 2, usually 4 %d %i char 1 %c float 4 %f double 8 %lf short int 2 usually %hd unsigned int at least 2, usually 4 %u long int at least 4, usually 8 %ld %li long long int at least 8 %lld %lli unsigned long int at least 4 %lu unsigned long long int at least 8 %llu signed char 1 %c usigned char 1 %c long double at least 10, usually 12 or 16 %Lf C Programming Operators \u00b6 With the assistance of examples, you will learn about several operators in C programming in this course. An operator is a symbol that performs an operation on a value or variable. For example, the operator + is used to compute addition. C has a diverse set of operators to execute a variety of tasks. C Arithmetic Operators \u00b6 An arithmetic operator performs mathematical operations such as addition, subtraction, multiplication, division etc on numerical values (constants and variables). Operator Meaning of Operator + Addition or unary plus - Substraction or unary minus * Multiplication / Division % Remainder after division (modulo division) Example 1: Arithmetic Operators \u00b6 // Working of arithmetic operators #include <stdio.h> int main () { int a = 9 , b = 4 , c ; c = a + b ; printf ( \"a+b = %d \\n \" , c ); c = a - b ; printf ( \"a-b = %d \\n \" , c ); c = a * b ; printf ( \"a*b = %d \\n \" , c ); c = a / b ; printf ( \"a/b = %d \\n \" , c ); c = a % b ; printf ( \"Remainder when a divided by b = %d \\n \" , c ); return 0 ; } Output a+b = 13 a-b = 5 a*b = 36 a/b = 2 Remainder when a divided by b = 1 As you might guess, the operators +, -, and * calculate addition, subtraction, and multiplication, respectively. 9/4 Equals 2.25 in standard math. In the program, however, the result is 2 . This is due to the fact that both variables a and b are integers. As a result, the output is also an integer. The compiler ignores the word following the decimal point and displays response 2 rather than 2.25 . The residual is computed using the modulo operator percent. The remaining is 1 when a=9 is divided by b=4 . Only integers can be used with the percent operator. Assume that a = 5.0, b = 2.0, c = 5 , and d = 2 . After that, in C programming. // Either one of the operands is a floating-point number a/b = 2 .5 a/d = 2 .5 c/b = 2 .5 // Both operands are integers c/d = 2 C Increment and Decrement Operators \u00b6 To alter the value of an operand (constant or variable) by one, C programming offers two operators: increment ++ and decrease -- . Increment ++ raises the value by one, and decrement -- lowers the value by one. These two operators are unary, which means they only work on a single operand. Example 2: Increment and Decrement Operators \u00b6 // Working of increment and decrement operators #include <stdio.h> int main () { int a = 10 , b = 100 ; float c = 10.5 , d = 100.5 ; printf ( \"++a = %d \\n \" , ++ a ); printf ( \"--b = %d \\n \" , -- b ); printf ( \"++c = %f \\n \" , ++ c ); printf ( \"--d = %f \\n \" , -- d ); return 0 ; } Output ++a = 11 --b = 99 ++c = 11 .500000 --d = 99 .500000 The operators ++ and -- are used as prefixes here. These two operators, like a++ and a-- can also be used as postfixes. Increment ++ and Decrement -- Operator as Prefix and Postfix \u00b6 The increment operator ++ in programming (Java, C, C++, JavaScript, and so on) increments the value of a variable by one. Similarly, the decrement operator -- reduces a variable's value by one. a = 5 ++a ; // a becomes 6 a++ ; // a becomes 7 --a ; // a becomes 6 a-- ; // a becomes 5 So far, so straightforward. When these two operators are employed as a prefix and a postfix, there is a significant difference. ++ and -- operator as prefix and postfix \u00b6 When you use the ++ operator as a prefix, such as: ++var, the value of var is increased by one and then returned. If you use the ++ operator as a postfix, such as var++, the original value of var is returned first, followed by a one-digit increase of var. The -- operator functions similarly to the ++ operator, except that it reduces the value by one. Example 1: C Programming \u00b6 #include <stdio.h> int main () { int var1 = 5 , var2 = 5 ; // 5 is displayed // Then, var1 is increased to 6. printf ( \"%d \\n \" , var1 ++ ); // var2 is increased to 6 // Then, it is displayed. printf ( \"%d \\n \" , ++ var2 ); return 0 ; } Output 5 6 C Assignment Operators \u00b6 An assignment operator is a type of operator that is used to assign a value to a variable. = is the most commonly used assignment operator. Operator Example Same as = a=b a=b += a+=b a=a+b -= a-=b a=a-b *= a*=b a=a*b /= a/=b a=a/b %= a%=b a=a%b Example 3: Assignment Operators \u00b6 // Working of assignment operators #include <stdio.h> int main () { int a = 5 , c ; c = a ; // c is 5 printf ( \"c = %d \\n \" , c ); c += a ; // c is 10 printf ( \"c = %d \\n \" , c ); c -= a ; // c is 5 printf ( \"c = %d \\n \" , c ); c *= a ; // c is 25 printf ( \"c = %d \\n \" , c ); c /= a ; // c is 5 printf ( \"c = %d \\n \" , c ); c %= a ; // c = 0 printf ( \"c = %d \\n \" , c ); return 0 ; } Output c = 5 c = 10 c = 5 c = 25 c = 5 c = 0 C Relational Operators \u00b6 A relational operator verifies the relationship of two operands. If the relationship is true, it returns 1; if the relationship is false, it returns 0. Operator Meaning of Operator Example == Equal to 5 == 3 is evaluated to 0 > Greater than 5 > 3 is evaluated to 1 < Less than 5 < 3 is evaluated to 0 != Not equal to 5 != 3 is evaluated to 1 >= Greater than or equal to 5 >= 3 is evaluated to 1 <= Less than or equal to 5 <= 3 is evaluated to 0 Example 4: Relational Operators \u00b6 // Working of relational operators #include <stdio.h> int main () { int a = 5 , b = 5 , c = 10 ; printf ( \"%d == %d is %d \\n \" , a , b , a == b ); printf ( \"%d == %d is %d \\n \" , a , c , a == c ); printf ( \"%d > %d is %d \\n \" , a , b , a > b ); printf ( \"%d > %d is %d \\n \" , a , c , a > c ); printf ( \"%d < %d is %d \\n \" , a , b , a < b ); printf ( \"%d < %d is %d \\n \" , a , c , a < c ); printf ( \"%d != %d is %d \\n \" , a , b , a != b ); printf ( \"%d != %d is %d \\n \" , a , c , a != c ); printf ( \"%d >= %d is %d \\n \" , a , b , a >= b ); printf ( \"%d >= %d is %d \\n \" , a , c , a >= c ); printf ( \"%d <= %d is %d \\n \" , a , b , a <= b ); printf ( \"%d <= %d is %d \\n \" , a , c , a <= c ); return 0 ; } Output 5 == 5 is 1 5 == 10 is 0 5 > 5 is 0 5 > 10 is 0 5 < 5 is 0 5 < 10 is 1 5 ! = 5 is 0 5 ! = 10 is 1 5 > = 5 is 1 5 > = 10 is 0 5 < = 5 is 1 5 < = 10 is 1 C Logical Operators \u00b6 A logical operator expression returns either 0 or 1, depending on whether the expression is true or false. Operator Meaning Example && Logical AND. True only if all operands are true If c = 5 and d = 2 then, expression ((c==5) && (d>5)) equals to 0. | Logical OR. True only if either one operand is true ! Logical NOT. True only if the operand is 0 If c = 5 then, expression !(c==5) equals to 0. Example 5: Logical Operators \u00b6 // Working of logical operators #include <stdio.h> int main () { int a = 5 , b = 5 , c = 10 , result ; result = ( a == b ) && ( c > b ); printf ( \"(a == b) && (c > b) is %d \\n \" , result ); result = ( a == b ) && ( c < b ); printf ( \"(a == b) && (c < b) is %d \\n \" , result ); result = ( a == b ) || ( c < b ); printf ( \"(a == b) || (c < b) is %d \\n \" , result ); result = ( a != b ) || ( c < b ); printf ( \"(a != b) || (c < b) is %d \\n \" , result ); result = ! ( a != b ); printf ( \"!(a != b) is %d \\n \" , result ); result = ! ( a == b ); printf ( \"!(a == b) is %d \\n \" , result ); return 0 ; } Output ( a == b ) && ( c > b ) is 1 ( a == b ) && ( c < b ) is 0 ( a == b ) || ( c < b ) is 1 ( a ! = b ) || ( c < b ) is 0 ! ( a ! = b ) is 1 ! ( a == b ) is 0 Explanation of logical operator program (a == b) && (c > 5) evaluates to 1 because both operands (a == b) and (c > b) is 1 (true). (a == b) && (c < b) evaluates to 0 because operand (c < b) is 0 (false). (a == b) || (c < b) evaluates to 1 because (a = b) is 1 (true). (a != b) || (c < b) evaluates to 0 because both operand (a != b) and (c < b) are 0 (false). !(a != b) evaluates to 1 because operand (a != b) is 0 (false). Hence, !(a != b) is 1 (true). !(a == b) evaluates to 0 because (a == b) is 1 (true). Hence, !(a == b) is 0 (false). C Bitwise Operators \u00b6 Mathematical operations like as addition, subtraction, multiplication, division, and so on are transformed to bit-level during computation, which speeds up processing and saves power. In C programming, bitwise operators are used to execute bit-level operations. Operators Meaning of Operators & Bitwise AND ^ Bitwise exclusive OR ~ Bitwise complement << Shift left >> Shift right Other Operators \u00b6 Comma Operator \u00b6 Comma operators are used to connect similar expressions. As an example: int a , c = 5 , d ; The sizeof operator \u00b6 sizeof is a unary operator that returns the data size (constants, variables, array, structure, etc). Example 6: sizeof Operator \u00b6 #include <stdio.h> int main () { int a ; float b ; double c ; char d ; printf ( \"Size of int=%lu bytes \\n \" , sizeof ( a )); printf ( \"Size of float=%lu bytes \\n \" , sizeof ( b )); printf ( \"Size of double=%lu bytes \\n \" , sizeof ( c )); printf ( \"Size of char=%lu byte \\n \" , sizeof ( d )); return 0 ; } Output Size of int = 4 bytes Size of float = 4 bytes Size of double = 8 bytes Size of char = 1 byte Other operators, such as the ternary operator ?: , the reference operato r & , the dereference operator * , and the member selection operator -> , will be covered in more detail later. C Flow Control \u00b6 C if...else Statement \u00b6 With the assistance of examples, you will learn about the if statement (including if...else and nested if...else) in C programming. C if Statement \u00b6 In C programming, the if statement has the following syntax: if ( test expression ) { // code } How if statement works? \u00b6 The test expression inside the parentheses is evaluated by the if statement (). If the test expression is true, the statements within the if body are performed. If the test expression is interpreted as false, the statements within the if body are not performed. Check relational and logical operators to understand more about when a test expression is evaluated to true (non-zero value) and false (0). Example 1: if statement \u00b6 // Program to display a number if it is negative #include <stdio.h> int main () { int number ; printf ( \"Enter an integer: \" ); scanf ( \"%d\" , & number ); // true if number is less than 0 if ( number < 0 ) { printf ( \"You entered %d. \\n \" , number ); } printf ( \"The if statement is easy.\" ); return 0 ; } Output 1 Enter an integer: -2 You entered -2. The if statement is easy. When the user types -2, the test expression number 0 is evaluated as true. As a result, the value -2 that you typed is displayed on the screen. Output 2 Enter an integer: 5 The if statement is easy. When the user enters 5, the test expression number 0 is assessed as false, and the statement within the body of the if is not performed. C if...else Statement \u00b6 An else block is optional in the if statement. The if...else sentence has the following syntax: if ( test expression ) { // run code if test expression is true } else { // run code if test expression is false } How if...else statement works? \u00b6 If the test expression is found to be true, Statements within the if body are performed. Statements within the body of else are not executed. If the test expression is found to be false, Phrases inside the body of else are performed; statements within the body of if are skipped. Example 2: if...else statement \u00b6 // Check whether an integer is odd or even #include <stdio.h> int main () { int number ; printf ( \"Enter an integer: \" ); scanf ( \"%d\" , & number ); // True if the remainder is 0 if ( number % 2 == 0 ) { printf ( \"%d is an even integer.\" , number ); } else { printf ( \"%d is an odd integer.\" , number ); } return 0 ; } Output Enter an integer: 7 7 is an odd integer. When the user enters 7, the test expression number% 2==0 returns false. As a result, the statement within the body of else is performed. C if...else Ladder \u00b6 Depending on whether the test phrase is true or false, the if...else statement runs two separate programs. Sometimes a decision must be made between more than two options. You may use the if...else ladder to compare numerous test expressions and execute various statements. Syntax of if...else Ladder \u00b6 if ( test expression1 ) { // statement(s) } else if ( test expression2 ) { // statement(s) } else if ( test expression3 ) { // statement(s) } . . else { // statement(s) } Example 3: C if...else Ladder \u00b6 // Program to relate two integers using =, > or < symbol #include <stdio.h> int main () { int number1 , number2 ; printf ( \"Enter two integers: \" ); scanf ( \"%d %d\" , & number1 , & number2 ); //checks if the two integers are equal. if ( number1 == number2 ) { printf ( \"Result: %d = %d\" , number1 , number2 ); } //checks if number1 is greater than number2. else if ( number1 > number2 ) { printf ( \"Result: %d > %d\" , number1 , number2 ); } //checks if both test expressions are false else { printf ( \"Result: %d < %d\" , number1 , number2 ); } return 0 ; } Output Enter two integers: 12 23 Result: 12 < 23 Nested if...else \u00b6 An if...else statement can be included within the body of another if...else statement. Example 4: Nested if...else \u00b6 This program, similar to the if...else ladder's example, compares two numbers using, >, and =. To fix this problem, we will utilize a layered if...else expression. #include <stdio.h> int main () { int number1 , number2 ; printf ( \"Enter two integers: \" ); scanf ( \"%d %d\" , & number1 , & number2 ); if ( number1 >= number2 ) { if ( number1 == number2 ) { printf ( \"Result: %d = %d\" , number1 , number2 ); } else { printf ( \"Result: %d > %d\" , number1 , number2 ); } } else { printf ( \"Result: %d < %d\" , number1 , number2 ); } return 0 ; } You do not need to use brackets if the body of an if...else statement contains only one sentence. if ( a > b ) { printf ( \"Hello\" ); } printf ( \"Hi\" ); is equivalent to if ( a > b ) printf ( \"Hello\" ); printf ( \"Hi\" ); C for Loop \u00b6 With the assistance of examples, you will learn how to design a for loop in C programming in this article. A loop is a programming construct that is used to repeat a block of code until the stated condition is fulfilled. Loops in C programming are classified into three types: while loop for loop do..while loop This lesson will teach us about the for loop. The while and do...while loops will be covered in the next tutorial. for Loop \u00b6 The for loop has the following syntax: for ( initializationStatement ; testExpression ; updateStatement ) { // statements inside the body of loop } How for loop works? \u00b6 The initialization statement is only used once. The test expression is then evaluated. The for loop is ended if the test statement is interpreted as false. If the test expression is true, the statements inside the for loop's body are performed, and the update expression is updated. The test expression is examined once more. This procedure is repeated until the test expression is false. The loop is terminated when the test expression is false. Example 1: for loop \u00b6 // Print numbers from 1 to 10 #include <stdio.h> int main () { int i ; for ( i = 1 ; i < 11 ; ++ i ) { printf ( \"%d \" , i ); } return 0 ; } Output 1 2 3 4 5 6 7 8 9 10 i is initialized to 1. The test expression i < 11 is evaluated. Since 1 less than 11 is true, the body of for loop is executed. This will print the 1 (value of i) on the screen. The update statement ++i is executed. Now, the value of i will be 2. Again, the test expression is evaluated to true, and the body of for loop is executed. This will print 2 (value of i) on the screen. Again, the update statement ++i is executed and the test expression i < 11 is evaluated. This process goes on until i becomes 11. When i becomes 11, i < 11 will be false, and the for loop terminates. Example 2: for loop \u00b6 // Program to calculate the sum of first n natural numbers // Positive integers 1,2,3...n are known as natural numbers #include <stdio.h> int main () { int num , count , sum = 0 ; printf ( \"Enter a positive integer: \" ); scanf ( \"%d\" , & num ); // for loop terminates when num is less than count for ( count = 1 ; count <= num ; ++ count ) { sum += count ; } printf ( \"Sum = %d\" , sum ); return 0 ; } Output Enter a positive integer: 10 Sum = 55 The value entered by the user is stored in the variable num. Suppose, the user entered 10. The count is initialized to 1 and the test expression is evaluated. Since the test expression count<=num (1 less than or equal to 10) is true, the body of for loop is executed and the value of sum will equal to 1. Then, the update statement ++count is executed and count will equal to 2. Again, the test expression is evaluated. Since 2 is also less than 10, the test expression is evaluated to true and the body of the for loop is executed. Now, sum will equal 3. This process goes on and the sum is calculated until the count reaches 11. When the count is 11, the test expression is evaluated to 0 (false), and the loop terminates. Then, the value of sum is printed on the screen. C while and do...while Loop \u00b6 In this tutorial, you will learn to create while and do...while loop in C programming with the help of examples. In programming, loops are used to repeat a block of code until a specified condition is met. C programming has three types of loops. for loop while loop do...while loop In the previous tutorial, we learned about for loop. In this tutorial, we will learn about while and do..while loop. while loop \u00b6 The syntax of the while loop is: while ( testExpression ) { // the body of the loop } How while loop works? \u00b6 The while loop evaluates the testExpression inside the parentheses () . If testExpression is true , statements inside the body of while loop are executed. Then, testExpression is evaluated again. The process goes on until testExpression is evaluated to false . If testExpression is false , the loop terminates (ends). Example 1: while loop \u00b6 // Print numbers from 1 to 5 #include <stdio.h> int main () { int i = 1 ; while ( i <= 5 ) { printf ( \"%d \\n \" , i ); ++ i ; } return 0 ; } Output 1 2 3 4 5 Here, we have initialized i to 1. When i = 1 , the test expression i <= 5 is true . Hence, the body of the while loop is executed. This prints 1 on the screen and the value of i is increased to 2 . Now, i = 2 , the test expression i <= 5 is again true . The body of the while loop is executed again. This prints 2 on the screen and the value of i is increased to 3 . This process goes on until i becomes 6. Then, the test expression i <= 5 will be false and the loop terminates. do...while loop \u00b6 The do..while loop is similar to the while loop with one important difference. The body of do...while loop is executed at least once. Only then, the test expression is evaluated. The syntax of the do...while loop is: do { // the body of the loop } while ( testExpression ); How do...while loop works? \u00b6 The body of do...while loop is executed once. Only then, the testExpression is evaluated. If testExpression is true , the body of the loop is executed again and testExpression is evaluated once more. This process goes on until testExpression becomes false . If testExpression is false , the loop ends. Flowchart of do...while Loop \u00b6 Example 2: do...while loop \u00b6 // Program to add numbers until the user enters zero #include <stdio.h> int main () { double number , sum = 0 ; // the body of the loop is executed at least once do { printf ( \"Enter a number: \" ); scanf ( \"%lf\" , & number ); sum += number ; } while ( number != 0.0 ); printf ( \"Sum = %.2lf\" , sum ); return 0 ; } Output Enter a number: 1 .5 Enter a number: 2 .4 Enter a number: -3.4 Enter a number: 4 .2 Enter a number: 0 Sum = 4 .70 Here, we have used a do...while loop to prompt the user to enter a number. The loop works as long as the input number is not 0 . The do...while loop executes at least once i.e. the first iteration runs without checking the condition. The condition is checked only after the first iteration has been executed. do { printf ( \"Enter a number: \" ); scanf ( \"%lf\" , & number ); sum += number ; } while ( number != 0.0 ); So, if the first input is a non-zero number, that number is added to the sum variable and the loop continues to the next iteration. This process is repeated until the user enters 0 . But if the first input is 0, there will be no second iteration of the loop and sum becomes 0.0 . Outside the loop, we print the value of sum. C break and continue \u00b6 We learned about loops in previous tutorials. In this tutorial, we will learn to use break and continue statements with the help of examples. C break \u00b6 The break statement ends the loop immediately when it is encountered. Its syntax is: break ; The break statement is almost always used with if...else statement inside the loop. Example 1: break statement \u00b6 // Program to calculate the sum of numbers (10 numbers max) // If the user enters a negative number, the loop terminates #include <stdio.h> int main () { int i ; double number , sum = 0.0 ; for ( i = 1 ; i <= 10 ; ++ i ) { printf ( \"Enter n%d: \" , i ); scanf ( \"%lf\" , & number ); // if the user enters a negative number, break the loop if ( number < 0.0 ) { break ; } sum += number ; // sum = sum + number; } printf ( \"Sum = %.2lf\" , sum ); return 0 ; } Output Enter n1: 2 .4 Enter n2: 4 .5 Enter n3: 3 .4 Enter n4: -3 Sum = 10 .30 This program calculates the sum of a maximum of 10 numbers. Why a maximum of 10 numbers? It's because if the user enters a negative number, the break statement is executed. This will end the for loop, and the sum is displayed. In C, break is also used with the switch statement. This will be discussed in the next tutorial. C continue \u00b6 The continue statement skips the current iteration of the loop and continues with the next iteration. Its syntax is: continue ; The continue statement is almost always used with the if...else statement. How continue statement works? \u00b6 Example 2: continue statement \u00b6 // Program to calculate the sum of numbers (10 numbers max) // If the user enters a negative number, it's not added to the result #include <stdio.h> int main () { int i ; double number , sum = 0.0 ; for ( i = 1 ; i <= 10 ; ++ i ) { printf ( \"Enter a n%d: \" , i ); scanf ( \"%lf\" , & number ); if ( number < 0.0 ) { continue ; } sum += number ; // sum = sum + number; } printf ( \"Sum = %.2lf\" , sum ); return 0 ; } Output Enter n1: 1 .1 Enter n2: 2 .2 Enter n3: 5 .5 Enter n4: 4 .4 Enter n5: -3.4 Enter n6: -45.5 Enter n7: 34 .5 Enter n8: -4.2 Enter n9: -1000 Enter n10: 12 Sum = 59 .70 In this program, when the user enters a positive number, the sum is calculated using sum += number; statement. When the user enters a negative number, the continue statement is executed and it skips the negative number from the calculation. C switch Statement \u00b6 In this tutorial, you will learn to create the switch statement in C programming with the help of an example. The switch statement allows us to execute one code block among many alternatives. You can do the same thing with the if...else..if ladder. However, the syntax of the switch statement is much easier to read and write. Syntax of switch...case \u00b6 switch ( expression ) { case constant1 : // statements break ; case constant2 : // statements break ; . . . default : // default statements } How does the switch statement work? The expression is evaluated once and compared with the values of each case label. If there is a match, the corresponding statements after the matching label are executed. For example, if the value of the expression is equal to constant2, statements after case constant2: are executed until break is encountered. If there is no match, the default statements are executed. If we do not use break , all statements after the matching label are executed. By the way, the default clause inside the switch statement is optional. Example: Simple Calculator \u00b6 // Program to create a simple calculator #include <stdio.h> int main () { char operator ; double n1 , n2 ; printf ( \"Enter an operator (+, -, *, /): \" ); scanf ( \"%c\" , & operator ); printf ( \"Enter two operands: \" ); scanf ( \"%lf %lf\" , & n1 , & n2 ); switch ( operator ) { case '+' : printf ( \"%.1lf + %.1lf = %.1lf\" , n1 , n2 , n1 + n2 ); break ; case '-' : printf ( \"%.1lf - %.1lf = %.1lf\" , n1 , n2 , n1 - n2 ); break ; case '*' : printf ( \"%.1lf * %.1lf = %.1lf\" , n1 , n2 , n1 * n2 ); break ; case '/' : printf ( \"%.1lf / %.1lf = %.1lf\" , n1 , n2 , n1 / n2 ); break ; // operator doesn't match any case constant +, -, *, / default : printf ( \"Error! operator is not correct\" ); } return 0 ; } Output Enter an operator ( +, -, *, ) : - Enter two operands: 32 .5 12 .4 32 .5 - 12 .4 = 20 .1 The - operator entered by the user is stored in the operator variable. And, two operands 32.5 and 12.4 are stored in variables n1 and n2 respectively. Since the operator is - , the control of the program jumps to printf ( \"%.1lf - %.1lf = %.1lf\" , n1 , n2 , n1 - n2 ); Finally, the break statement terminates the switch statement. C goto Statement \u00b6 In this tutorial, you will learn to create the goto statement in C programming. Also, you will learn when to use a goto statement and when not to use it. The goto statement allows us to transfer control of the program to the specified label. Syntax of goto Statement \u00b6 goto label ; ... .. ... ... .. ... label : statement ; The label is an identifier. When the goto statement is encountered, the control of the program jumps to label: and starts executing the code. Example: goto Statement \u00b6 // Program to calculate the sum and average of positive numbers // If the user enters a negative number, the sum and average are displayed. #include <stdio.h> int main () { const int maxInput = 100 ; int i ; double number , average , sum = 0.0 ; for ( i = 1 ; i <= maxInput ; ++ i ) { printf ( \"%d. Enter a number: \" , i ); scanf ( \"%lf\" , & number ); // go to jump if the user enters a negative number if ( number < 0.0 ) { goto jump ; } sum += number ; } jump : average = sum / ( i - 1 ); printf ( \"Sum = %.2f \\n \" , sum ); printf ( \"Average = %.2f\" , average ); return 0 ; } Output 1 . Enter a number: 3 2 . Enter a number: 4 .3 3 . Enter a number: 9 .3 4 . Enter a number: -2.9 Sum = 16 .60 Average = 5 .53 Reasons to avoid goto \u00b6 The use of goto statement may lead to code that is buggy and hard to follow. For example, one : for ( i = 0 ; i < number ; ++ i ) { test += i ; goto two ; } two : if ( test > 5 ) { goto three ; } ... .. ... Also, the goto statement allows you to do bad stuff such as jump out of the scope. That being said, goto can be useful sometimes. For example: to break from nested loops. Should you use goto? \u00b6 If you think the use of goto statement simplifies your program, you can use it. That being said, goto is rarely useful and you can create any C program without using goto altogether. Here's a quote from Bjarne Stroustrup, creator of C++, \"The fact that 'goto' can do anything is exactly why we don't use it.\" C Functions C User-defined functions Types of User-defined Functions in C Programming C Recursion (Recursive function) C Storage Class C Function Examples C Arrays (With Examples) C Multidimensional Arrays (2d and 3d Array) Pass arrays to a function in C for Pointers check CS50 visuals in PDF C Pointers (With Examples) Relationship Between Arrays and Pointers in C Programming (With Examples) C Pass Addresses and Pointers to Functions C Dynamic Memory Allocation Using malloc(), calloc(), free() & realloc() C Array and Pointer Examples Strings in C (With Examples) String Manipulations In C Programming Using Library Functions String Examples in C Programming c. C Functions i. C Programming Functions ii. C User-defined Functions iii. C Function Types iv. C Recursion v. C Storage Class vi. C Function Examples d. C Programming Arrays i. C Programming Arrays ii. C Multi-dimensional Arrays iii. C Arrays & Functions e. C Programming Pointers i. C Programming Pointers ii. C Pointers & Arrays iii. C Pointers and Functions iv. C Memory Allocation v. Array & Pointer Examples f. C Programming Strings i. C Programming Strings ii. C String Functions iii. C String Examples g. C Structure and Union i. C Structure ii. C Struct & Pointers iii. C Struct & Functions iv. C Unions v. C Struct Examples h. C Programming Files i. C Files Input/Output ii. C Files Examples i. Additional Topics i. C Enumeration ii. C Preprocessors iii. C Standard Library C Programming Examples https://cdnvideo.eba.gov.tr/fatihkalem/fatihkalem_portable.zip https://cdnvideo.eba.gov.tr/fatihkalem/fatihkalem_setup.exe Extras \u00b6","title":"Week-5 (C Console Programming)"},{"location":"week-5-c/ce103-week-5-c/#ce103-algorithms-and-programming-i","text":"","title":"CE103 Algorithms and Programming I"},{"location":"week-5-c/ce103-week-5-c/#week-5","text":"","title":"Week-5"},{"location":"week-5-c/ce103-week-5-c/#fall-semester-2021-2022","text":"Download DOC , SLIDE , PPTX","title":"Fall Semester, 2021-2022"},{"location":"week-5-c/ce103-week-5-c/#c-functional-console-programming","text":"","title":"C Functional Console Programming"},{"location":"week-5-c/ce103-week-5-c/#books-and-resources","text":"free-programming-books/free-programming-books-langs.md at master \u00b7 EbookFoundation/free-programming-books \u00b7 GitHub","title":"Books and Resources"},{"location":"week-5-c/ce103-week-5-c/#c-functional-console-programming_1","text":"We will use the following course notes and examples. Learn C Programming C Tutorials - Introduction to C Programming Language The C and C++ programming tutorials, hands-on approach with program examples, code samples and tons of output images using Visual C++, C++ Builder, Linux gcc and g++ compilers and IDE CS50x 2021 C Programming For Dummies C reference - cppreference.com https://c.happycodings.com/","title":"C Functional Console Programming"},{"location":"week-5-c/ce103-week-5-c/#c-programming","text":"C is a versatile programming language. It is useful for creating software such as operating systems, databases, and compilers. For novices, C programming is a great language to learn to code in. Our C tutorials will take you step by step through the process of learning C programming. Before starting you should check your development enviroment. You will open visual studio community edition and create a C++ console application then rename *.cpp file to *.c for triggering c complier. Before starting you should understand the executable generation flows #include <stdio.h> int main ( void ) { printf ( \"hello, world\" ); } and how we convert source code to binary codehere is a sandbox in CS50 harvard course Week 0 - CS50x https://sandbox.cs50.io/ you can use it for online compiler $ make hello clang -fsanitize = signed-integer-overflow -fsanitize = undefined -ggdb3 -O0 -std = c11 -Wall -Werror -Wextra -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wshadow hello.c -lcrypt -lcs50 -lm -o hello $ ./hello hello, world if you want to make samething in windows environment you should create the following makefile near the hello.c Makefile # This is the default target, which will be built when # you invoke make .PHONY : all all : hello # This rule tells make how to build hello from hello.cpp hello : hello . c g++ -o hello hello.c # This rule tells make to copy hello to the binaries subdirectory, # creating it if necessary .PHONY : install install : mkdir -p binaries cp -p hello binaries # This rule tells make to delete hello and hello.o .PHONY : clean clean : rm -f hello C: \\U sers \\u gur.coruh \\D esktop \\h ello-make>make hello g++ -o hello hello.c C: \\U sers \\u gur.coruh \\D esktop \\h ello-make>dir Volume in drive C is Windows Volume Serial Number is 8C3C-8F8C Directory of C: \\U sers \\u gur.coruh \\D esktop \\h ello-make 11 /02/2021 01 :44 AM <DIR> . 11 /02/2021 01 :44 AM <DIR> .. 11 /02/2021 01 :15 AM 73 hello.c 11 /02/2021 01 :44 AM 54 ,022 hello.exe 11 /02/2021 01 :43 AM 458 Makefile 3 File ( s ) 54 ,553 bytes 2 Dir ( s ) 101 ,382,164,480 bytes free C: \\U sers \\u gur.coruh \\D esktop \\h ello-make>hello.exe hello, world C: \\U sers \\u gur.coruh \\D esktop \\h ello-make> $ clang hello.c $ ls a.out* hello* hello.c $ ./a.out hello, world $ clang -o hello hello.c $ ls a.out* hello* hello.c $ ./hello hello, world $ ls hello . c $ clang - o hello hello . c - lcs50 $ ls hello * hello . c $ . / hello hello , world $ Also you can use visual studio community edition.","title":"C Programming"},{"location":"week-5-c/ce103-week-5-c/#preprocessing","text":"get included file declarations #include <cs50.h> #include <stdio.h> int main ( void ) { string name = get_string ( \"What's your name? \" ); printf ( \"hello, %s \\n \" , name ); } to this string get_string ( string prompt ); int printf ( string format , ...); int main ( void ) { string name = get_string ( \"What's your name? \" ); printf ( \"hello, %s \\n \" , name ); }","title":"preprocessing"},{"location":"week-5-c/ce103-week-5-c/#compiling","text":"convert source code to assembler code ... main: # @main .cfi_startproc # BB#0: pushq %rbp .Ltmp0: .cfi_def_cfa_offset 16 .Ltmp1: .cfi_offset %rbp, -16 movq %rsp, %rbp .Ltmp2: .cfi_def_cfa_register %rbp subq $16, %rsp xorl %eax, %eax movl %eax, %edi movabsq $.L.str, %rsi movb $0, %al callq get_string movabsq $.L.str.1, %rdi movq %rax, -8(%rbp) movq -8(%rbp), %rsi movb $0, %al callq printf ...","title":"compiling"},{"location":"week-5-c/ce103-week-5-c/#assembling","text":"convert assembler to opcodes ... main: # @main .cfi_startproc # BB#0: pushq %rbp .Ltmp0: .cfi_def_cfa_offset 16 .Ltmp1: .cfi_offset %rbp, -16 movq %rsp, %rbp .Ltmp2: .cfi_def_cfa_register %rbp subq $16, %rsp xorl %eax, %eax movl %eax, %edi movabsq $.L.str, %rsi movb $0, %al callq get_string movabsq $.L.str.1, %rdi movq %rax, -8(%rbp) movq -8(%rbp), %rsi movb $0, %al callq printf ... to thistitle":"assembling"},{"location":"week-5-c/ce103-week-5-c/#linking","text":"hello.c cs50.c stdio.ccombine binary codes to generate exetitle":"linking"},{"location":"week-5-c/ce103-week-5-c/#c-introduction","text":"","title":"C Introduction"},{"location":"week-5-c/ce103-week-5-c/#keywords-and-identifiers","text":"This tutorial will teach you about keywords, which are reserved words in C programming that are part of the syntax. You will also be taught about identifiers and how to name them.","title":"Keywords and Identifiers"},{"location":"week-5-c/ce103-week-5-c/#character-set","text":"A character set is a collection of alphabets, letters, and special characters that are supported by the C programming language. As variables and functions, C accepts both lowercase and uppercase alphabets.","title":"Character set"},{"location":"week-5-c/ce103-week-5-c/#alphabets","text":"Uppercase : A B C ................................... X Y Z Lowercase : a b c ...................................... x y z","title":"Alphabets"},{"location":"week-5-c/ce103-week-5-c/#digits","text":"0 1 2 3 4 5 6 7 8 9","title":"Digits"},{"location":"week-5-c/ce103-week-5-c/#special-characters","text":"Special Characters in C Programming , < > . - ( ) ; $ : % [ ] # ? ' & { } \" ^ ! * / - \\ ~ + White space Characters A newline, a horizontal tab, a carriage return, and a form feed are all examples of punctuation.","title":"Special Characters"},{"location":"week-5-c/ce103-week-5-c/#c-keywords","text":"Keywords are reserved words in programming that have special meanings to the compiler. Keywords are syntax elements that cannot be used as identifiers. As an example: int money ; In this case, int is a keyword indicating that money is a variable of type int (integer). Because C is a case-sensitive language, all keywords must be written in lowercase. The following is a list of all the keywords permitted in ANSI C. C Keywords auto double int struct break else long switch case enum register typedef char extern return union continue for signed void do if static while default goto sizeof volatile const float short unsigned All of these keywords, as well as their syntax and application, will be covered in their respective topics. The Complete List of all 32 C Programming Keywords (With Examples) - Programiz","title":"C Keywords"},{"location":"week-5-c/ce103-week-5-c/#c-identifiers","text":"The term \"identifier\" refers to the name given to entities such as variables, functions, structures, and so on. Identifiers must be distinct. They are created to give a unique name to an entity in order to identify it during program execution. As an example: int money ; double accountBalance ; money and accountBalance are identifiers in this context. Also, keep in mind that identifier names must be distinct from keyword names. Because int is a keyword, it cannot be used as an identifier.","title":"C Identifiers"},{"location":"week-5-c/ce103-week-5-c/#rules-for-naming-identifiers","text":"Letters (including capital and lowercase letters), numbers, and underscores can all be used in a valid identification. An identifier's initial letter should be either a letter or an underscore. Keywords such as int, while, and so on cannot be used as identifiers. There are no restrictions on the length of an identification. However, if the identifier is larger than 31 characters, you may have issues with some compilers. If you follow the above criterion, you can use any name as an identifier; nevertheless, provide meaningful names to identifiers that make sense.","title":"Rules for naming identifiers"},{"location":"week-5-c/ce103-week-5-c/#c-variables-constants-and-literals","text":"This article will teach you about variables and the rules for naming variables. You will also learn about different literals and how to build constants in C programming.","title":"C Variables, Constants and Literals"},{"location":"week-5-c/ce103-week-5-c/#variables","text":"A variable in programming is a container (storage space) for data. Each variable should be given a unique name to denote the storage region (identifier). Variable names are simply a graphical representation of a memory location. As an example: int playerScore = 95 ; In this case, playerScore is an int variable. The variable is given the integer value 95 in this case. A variable's value may be altered, thus the term variable. char ch = 'a' ; // some code ch = 'l' ;","title":"Variables"},{"location":"week-5-c/ce103-week-5-c/#rules-for-naming-a-variable","text":"A variable name can only contain characters (uppercase and lowercase), numbers, and underscores. A variable's initial letter should be either a letter or an underscore. There are no restrictions on the length of a variable name (identifier). However, if the variable name is larger than 31 characters, you may have issues with some compilers. Please keep in mind that you should always aim to give variables meaningful names. For example, firstName is a more appropriate variable name than fn . C is a highly typed programming language. This means that once a variable is declared, it cannot be modified. As an example: int number = 5 ; // integer variable number = 5.5 ; // error double number ; // error In this case, the type of number variable is int. This variable cannot be assigned the floating-point (decimal) value 5.5. Furthermore, you cannot change the variable's data type to double. By the way, in order to hold decimal values in C, you must designate their type as double or float.","title":"Rules for naming a variable"},{"location":"week-5-c/ce103-week-5-c/#literals","text":"Literals are data that are used to represent fixed values. They can be directly utilized in the code. For example: 1, 2.5, 'c,' and so on. Literals are 1, 2.5, and 'c' in this case. Why? These words cannot have various values assigned to them.","title":"Literals"},{"location":"week-5-c/ce103-week-5-c/#1-integers","text":"An integer is a numeric literal (related with numbers) that does not have any fractional or exponential components. In C programming, there are three types of integer literals: digits (base 10) the number octal (base 8) hexadecimal (base 16) For example: Decimal : 0 , -9 , 22 etc Octal : 021 , 077 , 033 etc Hexadecimal : 0x7f , 0x2a , 0x521 etc In C, octal begins with a 0 while hexadecimal begins with a 0x.","title":"1. Integers"},{"location":"week-5-c/ce103-week-5-c/#2-floating-point-literals","text":"A floating-point literal is a numeric literal with a fractional or exponent form. As an example: -2.0 0.0000234 -0.22E-5 Please note that \\[ E-5 = 10^{-5} \\]","title":"2. Floating-point Literals"},{"location":"week-5-c/ce103-week-5-c/#3-characters","text":"Enclosing a single character inside single quote marks yields a character literal. For example, 'a','m', 'F', '2', \", and so on.","title":"3. Characters"},{"location":"week-5-c/ce103-week-5-c/#4-escape-sequences","text":"In C programming, it is sometimes important to employ characters that cannot be typed or have specific meaning. For instance, newline (enter), tab, question mark, and so on. Escape sequences are utilized to utilise these characters. Escape Sequences Character \\b Backspace \\f Form feed \\n Newline \\r Return \\t Horizontal Tab \\v Vertical Tab `\\\\ Backslash \\' Single quotation mark \\\" Double quotation mark \\? Question mark \\0 Null character","title":"4. Escape Sequences"},{"location":"week-5-c/ce103-week-5-c/#5-string-literals","text":"A string literal is a string of characters surrounded by double quotation marks. As an example: \"good\" //string constant \"\" //null string constant \" \" //string constant of six white space \"x\" //string constant having a single character. \"Earth is round \\n \" //prints string with a newline","title":"5. String Literals"},{"location":"week-5-c/ce103-week-5-c/#constants","text":"The const keyword can be used to declare a variable whose value cannot be modified. This will result in a constant. As an example, const double PI = 3.14 ; We've introduced the keyword const. PI is a symbolic constant in this context; its value cannot be modified. const double PI = 3.14 ; PI = 2.9 ; //Error You may also use the #define preprocessor directive to declare a constant.","title":"Constants"},{"location":"week-5-c/ce103-week-5-c/#c-data-types","text":"In this course, you will learn about basic data types in C programming, such as int, float, and char. Data types are variable declarations in C programming. The kind and quantity of data linked with variables are determined by this. As an example, int myVar ; In this case, myVar is an int (integer) variable. int has a size of 4 bytes.","title":"C Data Types"},{"location":"week-5-c/ce103-week-5-c/#basic-types","text":"Here's a table containing commonly used types in C programming for quick access. Type Size(bytes) Format Specifiers int at least 2, usually 4 %d %i char 1 %c float 4 %f double 8 %lf short int 2 usually %hd unsigned int at least 2, usually 4 %u long int at least 4, usually 8 %ld %li long long int at least 8 %lld %lli unsigned long int at least 4 %lu unsigned long long int at least 8 %llu signed char 1 %c usigned char 1 %c long double at least 10, usually 12 or 16 %Lf","title":"Basic types"},{"location":"week-5-c/ce103-week-5-c/#int","text":"Integers are entire integers with zero, positive, and negative values but no decimal values. For instance, \\(0\\) , \\(-5\\) , and \\(10\\) In order to declare an integer variable, we can use int . int id ; In this case, id is an integer variable. In C programming, you can define many variables at the same time. As an example, int id , age ; Integers are typically \\(\\text{4 bytes}\\) in size ( \\(\\text{32 bits}\\) ). It may also take $2^{32} $ different states from \\(-2147483648\\) to \\(2147483647\\) .","title":"int"},{"location":"week-5-c/ce103-week-5-c/#float-and-double","text":"Real values are stored in float and double variables. float salary ; double price ; Floating-point numbers in C can also be expressed in exponential form. As an example, float normalizationFactor = 22.442e2 ; What is the distinction between float and double? Float (single precision float data type) has a size of 4 bytes. And double (double precision float data type) is 8 bytes in size.","title":"float and double"},{"location":"week-5-c/ce103-week-5-c/#char","text":"The keyword char is used to declare variables of the character type. As an example, char test = 'h' ; The character variable is 1 byte in size.","title":"char"},{"location":"week-5-c/ce103-week-5-c/#void","text":"void is an unfinished type. It signifies \"nothing\" or \"nothing of the sort.\" You might conceive of emptiness as the absence of something. If a function does not return anything, its return type should be void. It is important to note that void variables cannot be created.","title":"void"},{"location":"week-5-c/ce103-week-5-c/#short-and-long","text":"If you need to utilize a huge number, a type specifier long can be used. Here's how it works: long a ; long long b ; long double c ; Variables a and b can store integer values in this case. In addition, c may hold a floating-point number. You can use short if you are certain that just a tiny integer range between \\(-32767, +32767\\) will be utilized. short d ; The sizeof() operator may always be used to determine the size of a variable. #include <stdio.h> int main () { short a ; long b ; long long c ; long double d ; printf ( \"size of short = %d bytes \\n \" , sizeof ( a )); printf ( \"size of long = %d bytes \\n \" , sizeof ( b )); printf ( \"size of long long = %d bytes \\n \" , sizeof ( c )); printf ( \"size of long double= %d bytes \\n \" , sizeof ( d )); return 0 ; }","title":"short and long"},{"location":"week-5-c/ce103-week-5-c/#signed-and-unsigned","text":"Signed and unsigned are type modifiers in C. You may use them to change the data storage of a data type. As an example, unsigned int x ; int y ; Because we applied the unsigned modifier, the variable x can only retain zero and positive numbers. Given that int has a capacity of 4 bytes , variable y can have values ranging from - \\(2^{31}\\) to \\(2^{31}-1\\) , But variable x can hold values ranging from \\(0\\) to \\(2^{32}-1\\) .","title":"signed and unsigned"},{"location":"week-5-c/ce103-week-5-c/#other-data-types-defined-in-c-programming-are","text":"bool Type Enumerated type Complex types","title":"Other data types defined in C programming are:"},{"location":"week-5-c/ce103-week-5-c/#derived-data-types","text":"Derived types are data types that are derived from basic data types. Arrays, pointers, function types, structures, and so on are examples.","title":"Derived Data Types"},{"location":"week-5-c/ce103-week-5-c/#c-input-output-io","text":"In this lesson, you will learn how to utilize the scanf() function to accept user input and the printf() method to display output to the user.","title":"C Input Output (I/O)"},{"location":"week-5-c/ce103-week-5-c/#c-output","text":"printf() is a common output function in C programming. The function outputs formatted data to the screen. As an example,","title":"C Output"},{"location":"week-5-c/ce103-week-5-c/#example-1-c-output","text":"#include <stdio.h> int main () { // Displays the string inside quotations printf ( \"C Programming\" ); return 0 ; } Output C Programming How does this software function? The main() function is required in all legal C programs. The execution of the code begins at the commencement of the main() function. The printf() function is a library function that is used to provide formatted output to the screen. The string is printed within quote marks by the function. In order to utilize printf() in our program, we must include the stdio.h header file using the #include <stdio.h> declaration. The \"Exit status\" of the program is the return 0; statement within the main() method. It's entirely voluntary.","title":"Example 1: C Output"},{"location":"week-5-c/ce103-week-5-c/#example-2-integer-output","text":"#include <stdio.h> int main () { int testInteger = 5 ; printf ( \"Number = %d\" , testInteger ); return 0 ; } Output Number = 5 To print int types, we utilize the %d format specifier. The value of testInteger will be used in instead of the %d inside the quotes.","title":"Example 2: Integer Output"},{"location":"week-5-c/ce103-week-5-c/#example-3-float-and-double-output","text":"#include <stdio.h> int main () { float number1 = 13.5 ; double number2 = 12.4 ; printf ( \"number1 = %f \\n \" , number1 ); printf ( \"number2 = %lf\" , number2 ); return 0 ; } Output number1 = 13 .500000 number2 = 12 .400000 We utilize the %f format specifier to print floats . Similarly, to display double numbers, we use %lf .","title":"Example 3: float and double Output"},{"location":"week-5-c/ce103-week-5-c/#example-4-print-characters","text":"#include <stdio.h> int main () { char chr = 'a' ; printf ( \"character = %c\" , chr ); return 0 ; } Output character = a We utilize the %c format specifier to print char.","title":"Example 4: Print Characters"},{"location":"week-5-c/ce103-week-5-c/#c-input","text":"scanf() is a widely used function in C programming to accept user input. The scanf() function reads formatted input from typical input devices like keyboards.","title":"C Input"},{"location":"week-5-c/ce103-week-5-c/#example-5-integer-inputoutput","text":"#include <stdio.h> int main () { int testInteger ; printf ( \"Enter an integer: \" ); scanf ( \"%d\" , & testInteger ); printf ( \"Number = %d\" , testInteger ); return 0 ; } Output Enter an integer: 4 Number = 4 To accept int input from the user, we utilized the %d format specifier inside the scanf() method. When a user enters an integer, it is saved in the variable testInteger . You'll see that we used &testInteger within scanf () . This is due to the fact that &testInteger obtains the address of testInteger , and the value given by the user is saved in that address.","title":"Example 5: Integer Input/Output"},{"location":"week-5-c/ce103-week-5-c/#example-6-float-and-double-inputoutput","text":"#include <stdio.h> int main () { float num1 ; double num2 ; printf ( \"Enter a number: \" ); scanf ( \"%f\" , & num1 ); printf ( \"Enter another number: \" ); scanf ( \"%lf\" , & num2 ); printf ( \"num1 = %f \\n \" , num1 ); printf ( \"num2 = %lf\" , num2 ); return 0 ; } Output Enter a number: 12 .523 Enter another number: 10 .2 num1 = 12 .523000 num2 = 10 .200000 For float and double , we use the format specifiers %f and %lf , respectively.","title":"Example 6: Float and Double Input/Output"},{"location":"week-5-c/ce103-week-5-c/#example-7-c-character-io","text":"#include <stdio.h> int main () { char chr ; printf ( \"Enter a character: \" ); scanf ( \"%c\" , & chr ); printf ( \"You entered %c.\" , chr ); return 0 ; } Output Enter a character: g You entered g When a user enters a character into the aforementioned software, the character itself is not saved. An integer value (ASCII value) is instead stored. When we use the %c text format to represent that value, the input character is displayed. The ASCII value of the character is printed when we utilize %d to show it.","title":"Example 7: C Character I/O"},{"location":"week-5-c/ce103-week-5-c/#example-8-ascii-value","text":"#include <stdio.h> int main () { char chr ; printf ( \"Enter a character: \" ); scanf ( \"%c\" , & chr ); // When %c is used, a character is displayed printf ( \"You entered %c. \\n \" , chr ); // When %d is used, ASCII value is displayed printf ( \"ASCII value is %d.\" , chr ); return 0 ; } Output Enter a character: g You entered g. ASCII value is 103 .","title":"Example 8: ASCII Value"},{"location":"week-5-c/ce103-week-5-c/#io-multiple-values","text":"Here's how to take numerous user inputs and show them. #include <stdio.h> int main () { int a ; float b ; printf ( \"Enter integer and then a float: \" ); // Taking multiple inputs scanf ( \"%d%f\" , & a , & b ); printf ( \"You entered %d and %f\" , a , b ); return 0 ; } Output Enter integer and then a float: -3 3 .4 You entered -3 and 3 .400000","title":"I/O Multiple Values"},{"location":"week-5-c/ce103-week-5-c/#format-specifiers-for-io","text":"As you can see from the samples above, we apply %d for int %f for float %lf for double %c for char The following is a collection of widely used C data types and associated format specifiers. Type Size(bytes) Format Specifiers int at least 2, usually 4 %d %i char 1 %c float 4 %f double 8 %lf short int 2 usually %hd unsigned int at least 2, usually 4 %u long int at least 4, usually 8 %ld %li long long int at least 8 %lld %lli unsigned long int at least 4 %lu unsigned long long int at least 8 %llu signed char 1 %c usigned char 1 %c long double at least 10, usually 12 or 16 %Lf","title":"Format Specifiers for I/O"},{"location":"week-5-c/ce103-week-5-c/#c-programming-operators","text":"With the assistance of examples, you will learn about several operators in C programming in this course. An operator is a symbol that performs an operation on a value or variable. For example, the operator + is used to compute addition. C has a diverse set of operators to execute a variety of tasks.","title":"C Programming Operators"},{"location":"week-5-c/ce103-week-5-c/#c-arithmetic-operators","text":"An arithmetic operator performs mathematical operations such as addition, subtraction, multiplication, division etc on numerical values (constants and variables). Operator Meaning of Operator + Addition or unary plus - Substraction or unary minus * Multiplication / Division % Remainder after division (modulo division)","title":"C Arithmetic Operators"},{"location":"week-5-c/ce103-week-5-c/#example-1-arithmetic-operators","text":"// Working of arithmetic operators #include <stdio.h> int main () { int a = 9 , b = 4 , c ; c = a + b ; printf ( \"a+b = %d \\n \" , c ); c = a - b ; printf ( \"a-b = %d \\n \" , c ); c = a * b ; printf ( \"a*b = %d \\n \" , c ); c = a / b ; printf ( \"a/b = %d \\n \" , c ); c = a % b ; printf ( \"Remainder when a divided by b = %d \\n \" , c ); return 0 ; } Output a+b = 13 a-b = 5 a*b = 36 a/b = 2 Remainder when a divided by b = 1 As you might guess, the operators +, -, and * calculate addition, subtraction, and multiplication, respectively. 9/4 Equals 2.25 in standard math. In the program, however, the result is 2 . This is due to the fact that both variables a and b are integers. As a result, the output is also an integer. The compiler ignores the word following the decimal point and displays response 2 rather than 2.25 . The residual is computed using the modulo operator percent. The remaining is 1 when a=9 is divided by b=4 . Only integers can be used with the percent operator. Assume that a = 5.0, b = 2.0, c = 5 , and d = 2 . After that, in C programming. // Either one of the operands is a floating-point number a/b = 2 .5 a/d = 2 .5 c/b = 2 .5 // Both operands are integers c/d = 2","title":"Example 1: Arithmetic Operators"},{"location":"week-5-c/ce103-week-5-c/#c-increment-and-decrement-operators","text":"To alter the value of an operand (constant or variable) by one, C programming offers two operators: increment ++ and decrease -- . Increment ++ raises the value by one, and decrement -- lowers the value by one. These two operators are unary, which means they only work on a single operand.","title":"C Increment and Decrement Operators"},{"location":"week-5-c/ce103-week-5-c/#example-2-increment-and-decrement-operators","text":"// Working of increment and decrement operators #include <stdio.h> int main () { int a = 10 , b = 100 ; float c = 10.5 , d = 100.5 ; printf ( \"++a = %d \\n \" , ++ a ); printf ( \"--b = %d \\n \" , -- b ); printf ( \"++c = %f \\n \" , ++ c ); printf ( \"--d = %f \\n \" , -- d ); return 0 ; } Output ++a = 11 --b = 99 ++c = 11 .500000 --d = 99 .500000 The operators ++ and -- are used as prefixes here. These two operators, like a++ and a-- can also be used as postfixes.","title":"Example 2: Increment and Decrement Operators"},{"location":"week-5-c/ce103-week-5-c/#increment-and-decrement-operator-as-prefix-and-postfix","text":"The increment operator ++ in programming (Java, C, C++, JavaScript, and so on) increments the value of a variable by one. Similarly, the decrement operator -- reduces a variable's value by one. a = 5 ++a ; // a becomes 6 a++ ; // a becomes 7 --a ; // a becomes 6 a-- ; // a becomes 5 So far, so straightforward. When these two operators are employed as a prefix and a postfix, there is a significant difference.","title":"Increment ++ and Decrement -- Operator as Prefix and Postfix"},{"location":"week-5-c/ce103-week-5-c/#and-operator-as-prefix-and-postfix","text":"When you use the ++ operator as a prefix, such as: ++var, the value of var is increased by one and then returned. If you use the ++ operator as a postfix, such as var++, the original value of var is returned first, followed by a one-digit increase of var. The -- operator functions similarly to the ++ operator, except that it reduces the value by one.","title":"++ and -- operator as prefix and postfix"},{"location":"week-5-c/ce103-week-5-c/#example-1-c-programming","text":"#include <stdio.h> int main () { int var1 = 5 , var2 = 5 ; // 5 is displayed // Then, var1 is increased to 6. printf ( \"%d \\n \" , var1 ++ ); // var2 is increased to 6 // Then, it is displayed. printf ( \"%d \\n \" , ++ var2 ); return 0 ; } Output 5 6","title":"Example 1: C Programming"},{"location":"week-5-c/ce103-week-5-c/#c-assignment-operators","text":"An assignment operator is a type of operator that is used to assign a value to a variable. = is the most commonly used assignment operator. Operator Example Same as = a=b a=b += a+=b a=a+b -= a-=b a=a-b *= a*=b a=a*b /= a/=b a=a/b %= a%=b a=a%b","title":"C Assignment Operators"},{"location":"week-5-c/ce103-week-5-c/#example-3-assignment-operators","text":"// Working of assignment operators #include <stdio.h> int main () { int a = 5 , c ; c = a ; // c is 5 printf ( \"c = %d \\n \" , c ); c += a ; // c is 10 printf ( \"c = %d \\n \" , c ); c -= a ; // c is 5 printf ( \"c = %d \\n \" , c ); c *= a ; // c is 25 printf ( \"c = %d \\n \" , c ); c /= a ; // c is 5 printf ( \"c = %d \\n \" , c ); c %= a ; // c = 0 printf ( \"c = %d \\n \" , c ); return 0 ; } Output c = 5 c = 10 c = 5 c = 25 c = 5 c = 0","title":"Example 3: Assignment Operators"},{"location":"week-5-c/ce103-week-5-c/#c-relational-operators","text":"A relational operator verifies the relationship of two operands. If the relationship is true, it returns 1; if the relationship is false, it returns 0. Operator Meaning of Operator Example == Equal to 5 == 3 is evaluated to 0 > Greater than 5 > 3 is evaluated to 1 < Less than 5 < 3 is evaluated to 0 != Not equal to 5 != 3 is evaluated to 1 >= Greater than or equal to 5 >= 3 is evaluated to 1 <= Less than or equal to 5 <= 3 is evaluated to 0","title":"C Relational Operators"},{"location":"week-5-c/ce103-week-5-c/#example-4-relational-operators","text":"// Working of relational operators #include <stdio.h> int main () { int a = 5 , b = 5 , c = 10 ; printf ( \"%d == %d is %d \\n \" , a , b , a == b ); printf ( \"%d == %d is %d \\n \" , a , c , a == c ); printf ( \"%d > %d is %d \\n \" , a , b , a > b ); printf ( \"%d > %d is %d \\n \" , a , c , a > c ); printf ( \"%d < %d is %d \\n \" , a , b , a < b ); printf ( \"%d < %d is %d \\n \" , a , c , a < c ); printf ( \"%d != %d is %d \\n \" , a , b , a != b ); printf ( \"%d != %d is %d \\n \" , a , c , a != c ); printf ( \"%d >= %d is %d \\n \" , a , b , a >= b ); printf ( \"%d >= %d is %d \\n \" , a , c , a >= c ); printf ( \"%d <= %d is %d \\n \" , a , b , a <= b ); printf ( \"%d <= %d is %d \\n \" , a , c , a <= c ); return 0 ; } Output 5 == 5 is 1 5 == 10 is 0 5 > 5 is 0 5 > 10 is 0 5 < 5 is 0 5 < 10 is 1 5 ! = 5 is 0 5 ! = 10 is 1 5 > = 5 is 1 5 > = 10 is 0 5 < = 5 is 1 5 < = 10 is 1","title":"Example 4: Relational Operators"},{"location":"week-5-c/ce103-week-5-c/#c-logical-operators","text":"A logical operator expression returns either 0 or 1, depending on whether the expression is true or false. Operator Meaning Example && Logical AND. True only if all operands are true If c = 5 and d = 2 then, expression ((c==5) && (d>5)) equals to 0. | Logical OR. True only if either one operand is true ! Logical NOT. True only if the operand is 0 If c = 5 then, expression !(c==5) equals to 0.","title":"C Logical Operators"},{"location":"week-5-c/ce103-week-5-c/#example-5-logical-operators","text":"// Working of logical operators #include <stdio.h> int main () { int a = 5 , b = 5 , c = 10 , result ; result = ( a == b ) && ( c > b ); printf ( \"(a == b) && (c > b) is %d \\n \" , result ); result = ( a == b ) && ( c < b ); printf ( \"(a == b) && (c < b) is %d \\n \" , result ); result = ( a == b ) || ( c < b ); printf ( \"(a == b) || (c < b) is %d \\n \" , result ); result = ( a != b ) || ( c < b ); printf ( \"(a != b) || (c < b) is %d \\n \" , result ); result = ! ( a != b ); printf ( \"!(a != b) is %d \\n \" , result ); result = ! ( a == b ); printf ( \"!(a == b) is %d \\n \" , result ); return 0 ; } Output ( a == b ) && ( c > b ) is 1 ( a == b ) && ( c < b ) is 0 ( a == b ) || ( c < b ) is 1 ( a ! = b ) || ( c < b ) is 0 ! ( a ! = b ) is 1 ! ( a == b ) is 0 Explanation of logical operator program (a == b) && (c > 5) evaluates to 1 because both operands (a == b) and (c > b) is 1 (true). (a == b) && (c < b) evaluates to 0 because operand (c < b) is 0 (false). (a == b) || (c < b) evaluates to 1 because (a = b) is 1 (true). (a != b) || (c < b) evaluates to 0 because both operand (a != b) and (c < b) are 0 (false). !(a != b) evaluates to 1 because operand (a != b) is 0 (false). Hence, !(a != b) is 1 (true). !(a == b) evaluates to 0 because (a == b) is 1 (true). Hence, !(a == b) is 0 (false).","title":"Example 5: Logical Operators"},{"location":"week-5-c/ce103-week-5-c/#c-bitwise-operators","text":"Mathematical operations like as addition, subtraction, multiplication, division, and so on are transformed to bit-level during computation, which speeds up processing and saves power. In C programming, bitwise operators are used to execute bit-level operations. Operators Meaning of Operators & Bitwise AND ^ Bitwise exclusive OR ~ Bitwise complement << Shift left >> Shift right","title":"C Bitwise Operators"},{"location":"week-5-c/ce103-week-5-c/#other-operators","text":"","title":"Other Operators"},{"location":"week-5-c/ce103-week-5-c/#comma-operator","text":"Comma operators are used to connect similar expressions. As an example: int a , c = 5 , d ;","title":"Comma Operator"},{"location":"week-5-c/ce103-week-5-c/#the-sizeof-operator","text":"sizeof is a unary operator that returns the data size (constants, variables, array, structure, etc).","title":"The sizeof operator"},{"location":"week-5-c/ce103-week-5-c/#example-6-sizeof-operator","text":"#include <stdio.h> int main () { int a ; float b ; double c ; char d ; printf ( \"Size of int=%lu bytes \\n \" , sizeof ( a )); printf ( \"Size of float=%lu bytes \\n \" , sizeof ( b )); printf ( \"Size of double=%lu bytes \\n \" , sizeof ( c )); printf ( \"Size of char=%lu byte \\n \" , sizeof ( d )); return 0 ; } Output Size of int = 4 bytes Size of float = 4 bytes Size of double = 8 bytes Size of char = 1 byte Other operators, such as the ternary operator ?: , the reference operato r & , the dereference operator * , and the member selection operator -> , will be covered in more detail later.","title":"Example 6: sizeof Operator"},{"location":"week-5-c/ce103-week-5-c/#c-flow-control","text":"","title":"C Flow Control"},{"location":"week-5-c/ce103-week-5-c/#c-ifelse-statement","text":"With the assistance of examples, you will learn about the if statement (including if...else and nested if...else) in C programming.","title":"C if...else Statement"},{"location":"week-5-c/ce103-week-5-c/#c-if-statement","text":"In C programming, the if statement has the following syntax: if ( test expression ) { // code }","title":"C if Statement"},{"location":"week-5-c/ce103-week-5-c/#how-if-statement-works","text":"The test expression inside the parentheses is evaluated by the if statement (). If the test expression is true, the statements within the if body are performed. If the test expression is interpreted as false, the statements within the if body are not performed. Check relational and logical operators to understand more about when a test expression is evaluated to true (non-zero value) and false (0).","title":"How if statement works?"},{"location":"week-5-c/ce103-week-5-c/#example-1-if-statement","text":"// Program to display a number if it is negative #include <stdio.h> int main () { int number ; printf ( \"Enter an integer: \" ); scanf ( \"%d\" , & number ); // true if number is less than 0 if ( number < 0 ) { printf ( \"You entered %d. \\n \" , number ); } printf ( \"The if statement is easy.\" ); return 0 ; } Output 1 Enter an integer: -2 You entered -2. The if statement is easy. When the user types -2, the test expression number 0 is evaluated as true. As a result, the value -2 that you typed is displayed on the screen. Output 2 Enter an integer: 5 The if statement is easy. When the user enters 5, the test expression number 0 is assessed as false, and the statement within the body of the if is not performed.","title":"Example 1: if statement"},{"location":"week-5-c/ce103-week-5-c/#c-ifelse-statement_1","text":"An else block is optional in the if statement. The if...else sentence has the following syntax: if ( test expression ) { // run code if test expression is true } else { // run code if test expression is false }","title":"C if...else Statement"},{"location":"week-5-c/ce103-week-5-c/#how-ifelse-statement-works","text":"If the test expression is found to be true, Statements within the if body are performed. Statements within the body of else are not executed. If the test expression is found to be false, Phrases inside the body of else are performed; statements within the body of if are skipped.","title":"How if...else statement works?"},{"location":"week-5-c/ce103-week-5-c/#example-2-ifelse-statement","text":"// Check whether an integer is odd or even #include <stdio.h> int main () { int number ; printf ( \"Enter an integer: \" ); scanf ( \"%d\" , & number ); // True if the remainder is 0 if ( number % 2 == 0 ) { printf ( \"%d is an even integer.\" , number ); } else { printf ( \"%d is an odd integer.\" , number ); } return 0 ; } Output Enter an integer: 7 7 is an odd integer. When the user enters 7, the test expression number% 2==0 returns false. As a result, the statement within the body of else is performed.","title":"Example 2: if...else statement"},{"location":"week-5-c/ce103-week-5-c/#c-ifelse-ladder","text":"Depending on whether the test phrase is true or false, the if...else statement runs two separate programs. Sometimes a decision must be made between more than two options. You may use the if...else ladder to compare numerous test expressions and execute various statements.","title":"C if...else Ladder"},{"location":"week-5-c/ce103-week-5-c/#syntax-of-ifelse-ladder","text":"if ( test expression1 ) { // statement(s) } else if ( test expression2 ) { // statement(s) } else if ( test expression3 ) { // statement(s) } . . else { // statement(s) }","title":"Syntax of if...else Ladder"},{"location":"week-5-c/ce103-week-5-c/#example-3-c-ifelse-ladder","text":"// Program to relate two integers using =, > or < symbol #include <stdio.h> int main () { int number1 , number2 ; printf ( \"Enter two integers: \" ); scanf ( \"%d %d\" , & number1 , & number2 ); //checks if the two integers are equal. if ( number1 == number2 ) { printf ( \"Result: %d = %d\" , number1 , number2 ); } //checks if number1 is greater than number2. else if ( number1 > number2 ) { printf ( \"Result: %d > %d\" , number1 , number2 ); } //checks if both test expressions are false else { printf ( \"Result: %d < %d\" , number1 , number2 ); } return 0 ; } Output Enter two integers: 12 23 Result: 12 < 23","title":"Example 3: C if...else Ladder"},{"location":"week-5-c/ce103-week-5-c/#nested-ifelse","text":"An if...else statement can be included within the body of another if...else statement.","title":"Nested if...else"},{"location":"week-5-c/ce103-week-5-c/#example-4-nested-ifelse","text":"This program, similar to the if...else ladder's example, compares two numbers using, >, and =. To fix this problem, we will utilize a layered if...else expression. #include <stdio.h> int main () { int number1 , number2 ; printf ( \"Enter two integers: \" ); scanf ( \"%d %d\" , & number1 , & number2 ); if ( number1 >= number2 ) { if ( number1 == number2 ) { printf ( \"Result: %d = %d\" , number1 , number2 ); } else { printf ( \"Result: %d > %d\" , number1 , number2 ); } } else { printf ( \"Result: %d < %d\" , number1 , number2 ); } return 0 ; } You do not need to use brackets if the body of an if...else statement contains only one sentence. if ( a > b ) { printf ( \"Hello\" ); } printf ( \"Hi\" ); is equivalent to if ( a > b ) printf ( \"Hello\" ); printf ( \"Hi\" );","title":"Example 4: Nested if...else"},{"location":"week-5-c/ce103-week-5-c/#c-for-loop","text":"With the assistance of examples, you will learn how to design a for loop in C programming in this article. A loop is a programming construct that is used to repeat a block of code until the stated condition is fulfilled. Loops in C programming are classified into three types: while loop for loop do..while loop This lesson will teach us about the for loop. The while and do...while loops will be covered in the next tutorial.","title":"C for Loop"},{"location":"week-5-c/ce103-week-5-c/#for-loop","text":"The for loop has the following syntax: for ( initializationStatement ; testExpression ; updateStatement ) { // statements inside the body of loop }","title":"for Loop"},{"location":"week-5-c/ce103-week-5-c/#how-for-loop-works","text":"The initialization statement is only used once. The test expression is then evaluated. The for loop is ended if the test statement is interpreted as false. If the test expression is true, the statements inside the for loop's body are performed, and the update expression is updated. The test expression is examined once more. This procedure is repeated until the test expression is false. The loop is terminated when the test expression is false.","title":"How for loop works?"},{"location":"week-5-c/ce103-week-5-c/#example-1-for-loop","text":"// Print numbers from 1 to 10 #include <stdio.h> int main () { int i ; for ( i = 1 ; i < 11 ; ++ i ) { printf ( \"%d \" , i ); } return 0 ; } Output 1 2 3 4 5 6 7 8 9 10 i is initialized to 1. The test expression i < 11 is evaluated. Since 1 less than 11 is true, the body of for loop is executed. This will print the 1 (value of i) on the screen. The update statement ++i is executed. Now, the value of i will be 2. Again, the test expression is evaluated to true, and the body of for loop is executed. This will print 2 (value of i) on the screen. Again, the update statement ++i is executed and the test expression i < 11 is evaluated. This process goes on until i becomes 11. When i becomes 11, i < 11 will be false, and the for loop terminates.","title":"Example 1: for loop"},{"location":"week-5-c/ce103-week-5-c/#example-2-for-loop","text":"// Program to calculate the sum of first n natural numbers // Positive integers 1,2,3...n are known as natural numbers #include <stdio.h> int main () { int num , count , sum = 0 ; printf ( \"Enter a positive integer: \" ); scanf ( \"%d\" , & num ); // for loop terminates when num is less than count for ( count = 1 ; count <= num ; ++ count ) { sum += count ; } printf ( \"Sum = %d\" , sum ); return 0 ; } Output Enter a positive integer: 10 Sum = 55 The value entered by the user is stored in the variable num. Suppose, the user entered 10. The count is initialized to 1 and the test expression is evaluated. Since the test expression count<=num (1 less than or equal to 10) is true, the body of for loop is executed and the value of sum will equal to 1. Then, the update statement ++count is executed and count will equal to 2. Again, the test expression is evaluated. Since 2 is also less than 10, the test expression is evaluated to true and the body of the for loop is executed. Now, sum will equal 3. This process goes on and the sum is calculated until the count reaches 11. When the count is 11, the test expression is evaluated to 0 (false), and the loop terminates. Then, the value of sum is printed on the screen.","title":"Example 2: for loop"},{"location":"week-5-c/ce103-week-5-c/#c-while-and-dowhile-loop","text":"In this tutorial, you will learn to create while and do...while loop in C programming with the help of examples. In programming, loops are used to repeat a block of code until a specified condition is met. C programming has three types of loops. for loop while loop do...while loop In the previous tutorial, we learned about for loop. In this tutorial, we will learn about while and do..while loop.","title":"C while and do...while Loop"},{"location":"week-5-c/ce103-week-5-c/#while-loop","text":"The syntax of the while loop is: while ( testExpression ) { // the body of the loop }","title":"while loop"},{"location":"week-5-c/ce103-week-5-c/#how-while-loop-works","text":"The while loop evaluates the testExpression inside the parentheses () . If testExpression is true , statements inside the body of while loop are executed. Then, testExpression is evaluated again. The process goes on until testExpression is evaluated to false . If testExpression is false , the loop terminates (ends).","title":"How while loop works?"},{"location":"week-5-c/ce103-week-5-c/#example-1-while-loop","text":"// Print numbers from 1 to 5 #include <stdio.h> int main () { int i = 1 ; while ( i <= 5 ) { printf ( \"%d \\n \" , i ); ++ i ; } return 0 ; } Output 1 2 3 4 5 Here, we have initialized i to 1. When i = 1 , the test expression i <= 5 is true . Hence, the body of the while loop is executed. This prints 1 on the screen and the value of i is increased to 2 . Now, i = 2 , the test expression i <= 5 is again true . The body of the while loop is executed again. This prints 2 on the screen and the value of i is increased to 3 . This process goes on until i becomes 6. Then, the test expression i <= 5 will be false and the loop terminates.","title":"Example 1: while loop"},{"location":"week-5-c/ce103-week-5-c/#dowhile-loop","text":"The do..while loop is similar to the while loop with one important difference. The body of do...while loop is executed at least once. Only then, the test expression is evaluated. The syntax of the do...while loop is: do { // the body of the loop } while ( testExpression );","title":"do...while loop"},{"location":"week-5-c/ce103-week-5-c/#how-dowhile-loop-works","text":"The body of do...while loop is executed once. Only then, the testExpression is evaluated. If testExpression is true , the body of the loop is executed again and testExpression is evaluated once more. This process goes on until testExpression becomes false . If testExpression is false , the loop ends.","title":"How do...while loop works?"},{"location":"week-5-c/ce103-week-5-c/#flowchart-of-dowhile-loop","text":"","title":"Flowchart of do...while Loop"},{"location":"week-5-c/ce103-week-5-c/#example-2-dowhile-loop","text":"// Program to add numbers until the user enters zero #include <stdio.h> int main () { double number , sum = 0 ; // the body of the loop is executed at least once do { printf ( \"Enter a number: \" ); scanf ( \"%lf\" , & number ); sum += number ; } while ( number != 0.0 ); printf ( \"Sum = %.2lf\" , sum ); return 0 ; } Output Enter a number: 1 .5 Enter a number: 2 .4 Enter a number: -3.4 Enter a number: 4 .2 Enter a number: 0 Sum = 4 .70 Here, we have used a do...while loop to prompt the user to enter a number. The loop works as long as the input number is not 0 . The do...while loop executes at least once i.e. the first iteration runs without checking the condition. The condition is checked only after the first iteration has been executed. do { printf ( \"Enter a number: \" ); scanf ( \"%lf\" , & number ); sum += number ; } while ( number != 0.0 ); So, if the first input is a non-zero number, that number is added to the sum variable and the loop continues to the next iteration. This process is repeated until the user enters 0 . But if the first input is 0, there will be no second iteration of the loop and sum becomes 0.0 . Outside the loop, we print the value of sum.","title":"Example 2: do...while loop"},{"location":"week-5-c/ce103-week-5-c/#c-break-and-continue","text":"We learned about loops in previous tutorials. In this tutorial, we will learn to use break and continue statements with the help of examples.","title":"C break and continue"},{"location":"week-5-c/ce103-week-5-c/#c-break","text":"The break statement ends the loop immediately when it is encountered. Its syntax is: break ; The break statement is almost always used with if...else statement inside the loop.","title":"C break"},{"location":"week-5-c/ce103-week-5-c/#example-1-break-statement","text":"// Program to calculate the sum of numbers (10 numbers max) // If the user enters a negative number, the loop terminates #include <stdio.h> int main () { int i ; double number , sum = 0.0 ; for ( i = 1 ; i <= 10 ; ++ i ) { printf ( \"Enter n%d: \" , i ); scanf ( \"%lf\" , & number ); // if the user enters a negative number, break the loop if ( number < 0.0 ) { break ; } sum += number ; // sum = sum + number; } printf ( \"Sum = %.2lf\" , sum ); return 0 ; } Output Enter n1: 2 .4 Enter n2: 4 .5 Enter n3: 3 .4 Enter n4: -3 Sum = 10 .30 This program calculates the sum of a maximum of 10 numbers. Why a maximum of 10 numbers? It's because if the user enters a negative number, the break statement is executed. This will end the for loop, and the sum is displayed. In C, break is also used with the switch statement. This will be discussed in the next tutorial.","title":"Example 1: break statement"},{"location":"week-5-c/ce103-week-5-c/#c-continue","text":"The continue statement skips the current iteration of the loop and continues with the next iteration. Its syntax is: continue ; The continue statement is almost always used with the if...else statement.","title":"C continue"},{"location":"week-5-c/ce103-week-5-c/#how-continue-statement-works","text":"","title":"How continue statement works?"},{"location":"week-5-c/ce103-week-5-c/#example-2-continue-statement","text":"// Program to calculate the sum of numbers (10 numbers max) // If the user enters a negative number, it's not added to the result #include <stdio.h> int main () { int i ; double number , sum = 0.0 ; for ( i = 1 ; i <= 10 ; ++ i ) { printf ( \"Enter a n%d: \" , i ); scanf ( \"%lf\" , & number ); if ( number < 0.0 ) { continue ; } sum += number ; // sum = sum + number; } printf ( \"Sum = %.2lf\" , sum ); return 0 ; } Output Enter n1: 1 .1 Enter n2: 2 .2 Enter n3: 5 .5 Enter n4: 4 .4 Enter n5: -3.4 Enter n6: -45.5 Enter n7: 34 .5 Enter n8: -4.2 Enter n9: -1000 Enter n10: 12 Sum = 59 .70 In this program, when the user enters a positive number, the sum is calculated using sum += number; statement. When the user enters a negative number, the continue statement is executed and it skips the negative number from the calculation.","title":"Example 2: continue statement"},{"location":"week-5-c/ce103-week-5-c/#c-switch-statement","text":"In this tutorial, you will learn to create the switch statement in C programming with the help of an example. The switch statement allows us to execute one code block among many alternatives. You can do the same thing with the if...else..if ladder. However, the syntax of the switch statement is much easier to read and write.","title":"C switch Statement"},{"location":"week-5-c/ce103-week-5-c/#syntax-of-switchcase","text":"switch ( expression ) { case constant1 : // statements break ; case constant2 : // statements break ; . . . default : // default statements } How does the switch statement work? The expression is evaluated once and compared with the values of each case label. If there is a match, the corresponding statements after the matching label are executed. For example, if the value of the expression is equal to constant2, statements after case constant2: are executed until break is encountered. If there is no match, the default statements are executed. If we do not use break , all statements after the matching label are executed. By the way, the default clause inside the switch statement is optional.","title":"Syntax of switch...case"},{"location":"week-5-c/ce103-week-5-c/#example-simple-calculator","text":"// Program to create a simple calculator #include <stdio.h> int main () { char operator ; double n1 , n2 ; printf ( \"Enter an operator (+, -, *, /): \" ); scanf ( \"%c\" , & operator ); printf ( \"Enter two operands: \" ); scanf ( \"%lf %lf\" , & n1 , & n2 ); switch ( operator ) { case '+' : printf ( \"%.1lf + %.1lf = %.1lf\" , n1 , n2 , n1 + n2 ); break ; case '-' : printf ( \"%.1lf - %.1lf = %.1lf\" , n1 , n2 , n1 - n2 ); break ; case '*' : printf ( \"%.1lf * %.1lf = %.1lf\" , n1 , n2 , n1 * n2 ); break ; case '/' : printf ( \"%.1lf / %.1lf = %.1lf\" , n1 , n2 , n1 / n2 ); break ; // operator doesn't match any case constant +, -, *, / default : printf ( \"Error! operator is not correct\" ); } return 0 ; } Output Enter an operator ( +, -, *, ) : - Enter two operands: 32 .5 12 .4 32 .5 - 12 .4 = 20 .1 The - operator entered by the user is stored in the operator variable. And, two operands 32.5 and 12.4 are stored in variables n1 and n2 respectively. Since the operator is - , the control of the program jumps to printf ( \"%.1lf - %.1lf = %.1lf\" , n1 , n2 , n1 - n2 ); Finally, the break statement terminates the switch statement.","title":"Example: Simple Calculator"},{"location":"week-5-c/ce103-week-5-c/#c-goto-statement","text":"In this tutorial, you will learn to create the goto statement in C programming. Also, you will learn when to use a goto statement and when not to use it. The goto statement allows us to transfer control of the program to the specified label.","title":"C goto Statement"},{"location":"week-5-c/ce103-week-5-c/#syntax-of-goto-statement","text":"goto label ; ... .. ... ... .. ... label : statement ; The label is an identifier. When the goto statement is encountered, the control of the program jumps to label: and starts executing the code.","title":"Syntax of goto Statement"},{"location":"week-5-c/ce103-week-5-c/#example-goto-statement","text":"// Program to calculate the sum and average of positive numbers // If the user enters a negative number, the sum and average are displayed. #include <stdio.h> int main () { const int maxInput = 100 ; int i ; double number , average , sum = 0.0 ; for ( i = 1 ; i <= maxInput ; ++ i ) { printf ( \"%d. Enter a number: \" , i ); scanf ( \"%lf\" , & number ); // go to jump if the user enters a negative number if ( number < 0.0 ) { goto jump ; } sum += number ; } jump : average = sum / ( i - 1 ); printf ( \"Sum = %.2f \\n \" , sum ); printf ( \"Average = %.2f\" , average ); return 0 ; } Output 1 . Enter a number: 3 2 . Enter a number: 4 .3 3 . Enter a number: 9 .3 4 . Enter a number: -2.9 Sum = 16 .60 Average = 5 .53","title":"Example: goto Statement"},{"location":"week-5-c/ce103-week-5-c/#reasons-to-avoid-goto","text":"The use of goto statement may lead to code that is buggy and hard to follow. For example, one : for ( i = 0 ; i < number ; ++ i ) { test += i ; goto two ; } two : if ( test > 5 ) { goto three ; } ... .. ... Also, the goto statement allows you to do bad stuff such as jump out of the scope. That being said, goto can be useful sometimes. For example: to break from nested loops.","title":"Reasons to avoid goto"},{"location":"week-5-c/ce103-week-5-c/#should-you-use-goto","text":"If you think the use of goto statement simplifies your program, you can use it. That being said, goto is rarely useful and you can create any C program without using goto altogether. Here's a quote from Bjarne Stroustrup, creator of C++, \"The fact that 'goto' can do anything is exactly why we don't use it.\" C Functions C User-defined functions Types of User-defined Functions in C Programming C Recursion (Recursive function) C Storage Class C Function Examples C Arrays (With Examples) C Multidimensional Arrays (2d and 3d Array) Pass arrays to a function in C for Pointers check CS50 visuals in PDF C Pointers (With Examples) Relationship Between Arrays and Pointers in C Programming (With Examples) C Pass Addresses and Pointers to Functions C Dynamic Memory Allocation Using malloc(), calloc(), free() & realloc() C Array and Pointer Examples Strings in C (With Examples) String Manipulations In C Programming Using Library Functions String Examples in C Programming c. C Functions i. C Programming Functions ii. C User-defined Functions iii. C Function Types iv. C Recursion v. C Storage Class vi. C Function Examples d. C Programming Arrays i. C Programming Arrays ii. C Multi-dimensional Arrays iii. C Arrays & Functions e. C Programming Pointers i. C Programming Pointers ii. C Pointers & Arrays iii. C Pointers and Functions iv. C Memory Allocation v. Array & Pointer Examples f. C Programming Strings i. C Programming Strings ii. C String Functions iii. C String Examples g. C Structure and Union i. C Structure ii. C Struct & Pointers iii. C Struct & Functions iv. C Unions v. C Struct Examples h. C Programming Files i. C Files Input/Output ii. C Files Examples i. Additional Topics i. C Enumeration ii. C Preprocessors iii. C Standard Library C Programming Examples https://cdnvideo.eba.gov.tr/fatihkalem/fatihkalem_portable.zip https://cdnvideo.eba.gov.tr/fatihkalem/fatihkalem_setup.exe","title":"Should you use goto?"},{"location":"week-5-c/ce103-week-5-c/#extras","text":"","title":"Extras"},{"location":"week-5-c/sources/console-snake-game/","text":"Console Snake Game \u00b6 Description \u00b6 A console snake game that can (or should) work in linux & windows environments. This was created in my first year at Murdoch University, Perth Western Australia. Compiling \u00b6 Linux \u00b6 wget https://raw.githubusercontent.com/Contagious06/console-snake-game/master/src/snake.c gcc snake.c \u2013lm \u2013o snake.out chmod +x snake.out ./snake.out Windows \u00b6 Download https://raw.githubusercontent.com/Contagious06/console-snake-game/master/src/snake.c bcc32 snake.c snake.exe Demo \u00b6","title":"Console Snake Game"},{"location":"week-5-c/sources/console-snake-game/#console-snake-game","text":"","title":"Console Snake Game"},{"location":"week-5-c/sources/console-snake-game/#description","text":"A console snake game that can (or should) work in linux & windows environments. This was created in my first year at Murdoch University, Perth Western Australia.","title":"Description"},{"location":"week-5-c/sources/console-snake-game/#compiling","text":"","title":"Compiling"},{"location":"week-5-c/sources/console-snake-game/#linux","text":"wget https://raw.githubusercontent.com/Contagious06/console-snake-game/master/src/snake.c gcc snake.c \u2013lm \u2013o snake.out chmod +x snake.out ./snake.out","title":"Linux"},{"location":"week-5-c/sources/console-snake-game/#windows","text":"Download https://raw.githubusercontent.com/Contagious06/console-snake-game/master/src/snake.c bcc32 snake.c snake.exe","title":"Windows"},{"location":"week-5-c/sources/console-snake-game/#demo","text":"","title":"Demo"},{"location":"week-6-cpp/ce103-week-6-cpp/","text":"CE103 Algorithms and Programming I \u00b6 Week-6 \u00b6 Fall Semester, 2021-2022 \u00b6 Download DOC , SLIDE , PPTX C++ Functional Console Programming \u00b6 Books and Resources \u00b6 free-programming-books/free-programming-books-langs.md at master \u00b7 EbookFoundation/free-programming-books \u00b7 GitHub C++ Functional Console Programming \u00b6 We will follow the following topics Learn C++ Programming Introduction to C++ | C Plus Plus Programming Language Tutorials The C and C++ programming tutorials, hands-on approach with program examples, code samples and tons of output images using Visual C++, C++ Builder, Linux gcc and g++ compilers and IDE Cpp Programming a. C++ Introduction i. C++ Variables and Literals ii. C++ Data Types iii. C++ Basic I/O iv. C++ Type Conversion C++ String to Int and Vice-Versa C++ String to Float, Double and Vice-Versa v. C++ Operators vi. C++ Comments b. C++ Flow Control i. C++ if..else ii. C++ for loop iii. C++ do..while loop iv. C++ break statement v. C++ continue statement vi. C++ switch statement vii. C++ goto statement c. C++ Functions i. C++ Functions ii. C++ Function Types iii. C++ Function Overloading iv. C++ Default Argument v. C++ Storage Class vi. C++ Recursion vii. C++ Return Reference d. C++ Arrays & String i. C++ Arrays ii. Multidimensional Arrays iii. C++ Function and Array iv. C++ String e. C++ Structures i. C++ Structures ii. Structure and Function iii. C++ Pointers to Structure iv. C++ Enumeration f. C++ Object & Class i. C++ Objects and Class ii. C++ Constructors iii. C++ Objects & Function iv. C++ Operator Overloading g. C++ Pointers i. C++ Pointer ii. C++ Pointers and Arrays iii. C++ Pointers and Functions iv. C++ Memory Management h. C++ Inheritance i. C++ Inheritance ii. Inheritance Access Control iii. C++ Function Overriding iv. Multiple & Multilevel Inheritance v. C++ Friend Function vi. C++ Virtual Function C++ Templates","title":"Week-6 (C++ Console Programming)"},{"location":"week-6-cpp/ce103-week-6-cpp/#ce103-algorithms-and-programming-i","text":"","title":"CE103 Algorithms and Programming I"},{"location":"week-6-cpp/ce103-week-6-cpp/#week-6","text":"","title":"Week-6"},{"location":"week-6-cpp/ce103-week-6-cpp/#fall-semester-2021-2022","text":"Download DOC , SLIDE , PPTX","title":"Fall Semester, 2021-2022"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-functional-console-programming","text":"","title":"C++ Functional Console Programming"},{"location":"week-6-cpp/ce103-week-6-cpp/#books-and-resources","text":"free-programming-books/free-programming-books-langs.md at master \u00b7 EbookFoundation/free-programming-books \u00b7 GitHub","title":"Books and Resources"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-functional-console-programming_1","text":"We will follow the following topics Learn C++ Programming Introduction to C++ | C Plus Plus Programming Language Tutorials The C and C++ programming tutorials, hands-on approach with program examples, code samples and tons of output images using Visual C++, C++ Builder, Linux gcc and g++ compilers and IDE Cpp Programming a. C++ Introduction i. C++ Variables and Literals ii. C++ Data Types iii. C++ Basic I/O iv. C++ Type Conversion C++ String to Int and Vice-Versa C++ String to Float, Double and Vice-Versa v. C++ Operators vi. C++ Comments b. C++ Flow Control i. C++ if..else ii. C++ for loop iii. C++ do..while loop iv. C++ break statement v. C++ continue statement vi. C++ switch statement vii. C++ goto statement c. C++ Functions i. C++ Functions ii. C++ Function Types iii. C++ Function Overloading iv. C++ Default Argument v. C++ Storage Class vi. C++ Recursion vii. C++ Return Reference d. C++ Arrays & String i. C++ Arrays ii. Multidimensional Arrays iii. C++ Function and Array iv. C++ String e. C++ Structures i. C++ Structures ii. Structure and Function iii. C++ Pointers to Structure iv. C++ Enumeration f. C++ Object & Class i. C++ Objects and Class ii. C++ Constructors iii. C++ Objects & Function iv. C++ Operator Overloading g. C++ Pointers i. C++ Pointer ii. C++ Pointers and Arrays iii. C++ Pointers and Functions iv. C++ Memory Management h. C++ Inheritance i. C++ Inheritance ii. Inheritance Access Control iii. C++ Function Overriding iv. Multiple & Multilevel Inheritance v. C++ Friend Function vi. C++ Virtual Function C++ Templates","title":"C++ Functional Console Programming"},{"location":"week-7-csharp/ce103-week-7-csharp/","text":"CE103 Algorithms and Programming I \u00b6 Week-7 \u00b6 Fall Semester, 2021-2022 \u00b6 Download DOC , SLIDE , PPTX C# Functional Console Programming \u00b6 We will follow the following topics Learn C# Programming Books Free C# Programming Book free-programming-books/free-programming-books-langs.md at master \u00b7 EbookFoundation/free-programming-books \u00b7 GitHub Extras \u00b6 Creating a Simple Dynamic-Link Library - Win32 apps | Microsoft Docs Dynamic-Link Library Creation - Win32 apps | Microsoft Docs Exporting from a DLL | Microsoft Docs Exporting from a DLL Using DEF Files | Microsoft Docs How to create a DLL library in C and then use it with C# - CodeProject DLL - How to Write DLL - Dynamic Link Library in C - Steps to Create and Use https://www.codementor.io/@a_hathon/building-and-using-dlls-in-c-d7rrd4caz DLL Injection - free code corner GitHub - dennisbabkin/InjectAll: Tutorial that demonstrates how to code a Windows driver to inject a custom DLL into all running processes. I coded it from start to finish using C++ and x86/x64 Assembly language in Microsoft Visual Studio. The solution includes a kernel driver project, a DLL project and a C++ test console project. Coding Windows Kernel Driver - InjectAll - Making the Visual Studio solution for DLL injection into all running processes. Others \u00b6 std::dec, std::hex, std::oct - cppreference.com std::setbase - cppreference.com C++ Tutorial: Multi-Threaded Programming - Thread for Win32 - 2020 Csharp Programming a. Introduction i. C# Hello World ii. C# Keywords & Identifiers iii. C# Variables iv. C# Operators v. C# Basic I/O vi. C# Expressions & Statements vii. C# Comments b. Flow Control i. C# if..else ii. C# for loop iii. C# while loop iv. C# foreach loop v. C# switch statement vi. C# ternary operator c. Exception Handling d. Other Topics i. C# Bitwise Operators ii. C# Preprocessor Directives iii. C# Namespaces iv. C# Partial Class & Method","title":"Week-7 (C# Console Programming)"},{"location":"week-7-csharp/ce103-week-7-csharp/#ce103-algorithms-and-programming-i","text":"","title":"CE103 Algorithms and Programming I"},{"location":"week-7-csharp/ce103-week-7-csharp/#week-7","text":"","title":"Week-7"},{"location":"week-7-csharp/ce103-week-7-csharp/#fall-semester-2021-2022","text":"Download DOC , SLIDE , PPTX","title":"Fall Semester, 2021-2022"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-functional-console-programming","text":"We will follow the following topics Learn C# Programming Books Free C# Programming Book free-programming-books/free-programming-books-langs.md at master \u00b7 EbookFoundation/free-programming-books \u00b7 GitHub","title":"C# Functional Console Programming"},{"location":"week-7-csharp/ce103-week-7-csharp/#extras","text":"Creating a Simple Dynamic-Link Library - Win32 apps | Microsoft Docs Dynamic-Link Library Creation - Win32 apps | Microsoft Docs Exporting from a DLL | Microsoft Docs Exporting from a DLL Using DEF Files | Microsoft Docs How to create a DLL library in C and then use it with C# - CodeProject DLL - How to Write DLL - Dynamic Link Library in C - Steps to Create and Use https://www.codementor.io/@a_hathon/building-and-using-dlls-in-c-d7rrd4caz DLL Injection - free code corner GitHub - dennisbabkin/InjectAll: Tutorial that demonstrates how to code a Windows driver to inject a custom DLL into all running processes. I coded it from start to finish using C++ and x86/x64 Assembly language in Microsoft Visual Studio. The solution includes a kernel driver project, a DLL project and a C++ test console project. Coding Windows Kernel Driver - InjectAll - Making the Visual Studio solution for DLL injection into all running processes.","title":"Extras"},{"location":"week-7-csharp/ce103-week-7-csharp/#others","text":"std::dec, std::hex, std::oct - cppreference.com std::setbase - cppreference.com C++ Tutorial: Multi-Threaded Programming - Thread for Win32 - 2020 Csharp Programming a. Introduction i. C# Hello World ii. C# Keywords & Identifiers iii. C# Variables iv. C# Operators v. C# Basic I/O vi. C# Expressions & Statements vii. C# Comments b. Flow Control i. C# if..else ii. C# for loop iii. C# while loop iv. C# foreach loop v. C# switch statement vi. C# ternary operator c. Exception Handling d. Other Topics i. C# Bitwise Operators ii. C# Preprocessor Directives iii. C# Namespaces iv. C# Partial Class & Method","title":"Others"},{"location":"week-8-midterm/ce103-week-8-midterm/","text":"CE103 Algorithms and Programming I \u00b6 Week-8 (Midterm) \u00b6 Fall Semester, 2021-2022 \u00b6 Download DOC , SLIDE , PPTX Midterm \u00b6","title":"Week-8 (Midterm)"},{"location":"week-8-midterm/ce103-week-8-midterm/#ce103-algorithms-and-programming-i","text":"","title":"CE103 Algorithms and Programming I"},{"location":"week-8-midterm/ce103-week-8-midterm/#week-8-midterm","text":"","title":"Week-8 (Midterm)"},{"location":"week-8-midterm/ce103-week-8-midterm/#fall-semester-2021-2022","text":"Download DOC , SLIDE , PPTX","title":"Fall Semester, 2021-2022"},{"location":"week-8-midterm/ce103-week-8-midterm/#midterm","text":"","title":"Midterm"},{"location":"week-9-java-I/ce103-week-9-java-I/","text":"CE103 Algorithms and Programming I \u00b6 Week-9 (Java Functional Console Programming-I) \u00b6 Fall Semester, 2021-2022 \u00b6 Download DOC , SLIDE , PPTX Java Functional Console Programming-I \u00b6 Java Programming a. Java Introduction i. Java Hello World ii. Java JVM, JRE, and JDK iii. Java Variables iv. Java Data Types v. Java Operators vi. Java Input and Output vii. Java Expressions & Blocks viii. Java Comment b. Java Flow Control i. Java if..else ii. Java switch statement iii. Java for loop iv. Java for-each loop v. Java while loop vi. Java break statement vii. Java continue statement c. Java Arrays i. Java Arrays ii. Multidimensional Array Java Copy Array","title":"Week-9 (Java Console Programming-I)"},{"location":"week-9-java-I/ce103-week-9-java-I/#ce103-algorithms-and-programming-i","text":"","title":"CE103 Algorithms and Programming I"},{"location":"week-9-java-I/ce103-week-9-java-I/#week-9-java-functional-console-programming-i","text":"","title":"Week-9 (Java Functional Console Programming-I)"},{"location":"week-9-java-I/ce103-week-9-java-I/#fall-semester-2021-2022","text":"Download DOC , SLIDE , PPTX","title":"Fall Semester, 2021-2022"},{"location":"week-9-java-I/ce103-week-9-java-I/#java-functional-console-programming-i","text":"Java Programming a. Java Introduction i. Java Hello World ii. Java JVM, JRE, and JDK iii. Java Variables iv. Java Data Types v. Java Operators vi. Java Input and Output vii. Java Expressions & Blocks viii. Java Comment b. Java Flow Control i. Java if..else ii. Java switch statement iii. Java for loop iv. Java for-each loop v. Java while loop vi. Java break statement vii. Java continue statement c. Java Arrays i. Java Arrays ii. Multidimensional Array Java Copy Array","title":"Java Functional Console Programming-I"},{"location":"tr/","text":"","title":"Home"},{"location":"tr/license/","text":"License \u00b6 MIT License Copyright \u00a9 2019-2021 U\u011fur CORUH Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"tr/license/#license","text":"MIT License Copyright \u00a9 2019-2021 U\u011fur CORUH Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"tr/changelog/","text":"Changelog \u00b6 Material for Software Developers \u00b6 1.0.0 _ October 20, 2020 \u00b6 Initial release","title":"Changelog"},{"location":"tr/changelog/#changelog","text":"","title":"Changelog"},{"location":"tr/changelog/#material-for-software-developers","text":"","title":"Material for Software Developers"},{"location":"tr/changelog/#1.0.0","text":"Initial release","title":"1.0.0 _ October 20, 2020"},{"location":"tr/resume/","text":"\u00d6zge\u00e7mi\u015f \u00b6 \u0130ndir \u00d6zge\u00e7mi\u015f-\u0130ngilizce \u00d6zge\u00e7mi\u015f-T\u00fcrk\u00e7e \u0130ngilizce T\u00fcrk\u00e7e","title":"Resume"},{"location":"tr/resume/#ozgecmis","text":"\u0130ndir \u00d6zge\u00e7mi\u015f-\u0130ngilizce \u00d6zge\u00e7mi\u015f-T\u00fcrk\u00e7e \u0130ngilizce T\u00fcrk\u00e7e","title":"\u00d6zge\u00e7mi\u015f"},{"location":"tr/syllabus/syllabus/","text":"Recep Tayyip Erdogan University \u00b6 Faculty of Engineering and Architecture \u00b6 Computer Engineering \u00b6 CE103 Algorithms and Programming-I \u00b6 Syllabus \u00b6 Fall Semester, 2021-2022 \u00b6 Download DOC , SLIDE , PPTX Download WORD , PDF Instructor Asst. Prof. Dr. U\u011fur CORUH Contact Information ugur.coruh@erdogan.edu.tr Office No F-301 Google Classroom Code 3ipdtws Lecture Hours and Days Monday 13:00 - 15:30 (Theory) / Wednesday 13:00 - 14:30 (Lab) Lecture Classroom \u0130BBF 402 Level-4 Office Hours Meetings will be scheduled over Google Meet with your university account and email and performed via demand emails. Please send emails with the subject starting with [CE103] tag for the fast response and write formal, clear, and short emails Lecture and Communication Language English Theory/Laboratory Course Hour Per Week 3/2 Hours Credit 4 Prerequisite TBD Corequisite TBD Requirement TBD *TBD: To Be Defined. A. Course Description \u00b6 This course goal is to develop algorithm and programming expertise from scratch in a powerful way to provide a high-quality career path for students. The lecture will be based on expertise sharing and guiding students to find learning methods and practice for algorithm and programming topics. By making programming applications and projects in the courses, the learning process will be strengthened by practicing rather than theory. This course provides functional programming for C, C++, C#, and Java with up-to-date development environments. B. Course Learning Outcomes \u00b6 After completing this course satisfactorily, a student will be able to: Understand a software developer's road map and qualifications. Use different types of development environments to build applications. Understand the relation between real-life problems and their programming practices. Use language features in C, C++, C#, and Java for functional programming and evaluate their relative benefits. Understand application generation flows and outputs in detail, such as binaries and executables. Use the source code, version management systems, and portals based on GIT Work on the remote systems with remote connection tools. Use common developer tools that help application developers Create application libraries such as static, shared libraries for code reusability and functional packaging. Create unit tests for their applications to automate tests for their algorithms. Create console and GUI-based applications for their solutions. Create documentation for their applications. C. Course Topics \u00b6 Developer Road Map Algorithm Design and Basics Basic Operating System Information for Development Requirement Basic Remote Connection and Working Know-How Source Code Version Management Systems (GIT) Integrated Development Environments Application Test Automation Application Debugging and Bugfixing Functional Programming (C,C++, C#, Java) Continues Integration and Continues Development Processes Software Development Principles Application Documentation Automation Shared and Static Library Development and Test in Cross-Environment D. Textbooks and Required Hardware or Equipment \u00b6 This course does not require a coursebook. If necessary, you can use the following books and open-source online resources. Paul Deitel and Harvey Deitel. 2012. C How to Program (7 th . ed.). Prentice Hall Press, USA. Intro to Java Programming, Comprehensive Version (10 th Edition) 10 th Edition by Y. Daniel Liang Introduction to Algorithms, Third Edition By Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, and Clifford Stein Problem Solving and Program Design in C, J.R. Hanly, and E.B. Koffman, 6 th Edition. Robert Sedgewick and Kevin Wayne. 2011. Algorithms (4 th . ed.). Addison-Wesley Professional. Harvey M. Deitel and Paul J. Deitel. 2001. Java How to Program (4 th . ed.). Prentice Hall PTR, USA. Paul Deitel and Harvey Deitel. 2016. Visual C# How to Program (6 th . ed.). Pearson. Additional Books TBD During this course, you should have a laptop for programming practices. You will have your development environment, and you will use this for examination and assignments also classroom practices. E. Grading System \u00b6 Midterm and Final grades will be calculated with the weighted average of the project or homework-based examinations. Midterm grades will be calculated between term beginning to the midterm week, and Final grades will be calculated between Midterm and Final week homeworks or projects as follow \\[ a_n=\\text{Homework or Project Weight} \\] \\[ HW_n=\\text{Homework or Project Points} \\] \\[ n=\\text{Number of Homework or Project} \\] \\[ Grade=(a_1HW_1+a_2HW_2+...+a_nHW_n)/n \\] Homework Weight Midterm %40 Final %60 \\[ \\text{Passing Grade}=(40*Midterm_{Grade}+60*Final_{Grade})/100 \\] F. Instructional Strategies and Methods \u00b6 The basic teaching method of this course will be planned to be face-to-face in the classroom, and support resources, homeworks, and announcements will be shared over google classroom. Students are expected to be in the university. This responsibility is very important to complete this course with success. If pandemic situation changes and distance education is required during this course, this course will be done using synchronous and asynchronous distance education methods. In this scenario, students are expected to be in the online platform, zoom, or meet at the time specified in the course schedule. Attendance will be taken. G. Late Homework \u00b6 Throughout the semester, assignments must be submitted as specified by the announced deadline. Your grade will be reduced by 10% of the full points for each calendar day for overdue assignments. Overdue assignments will not be accepted after three (3) days. Unexpected situations must be reported to the instructor for late homeworks by students. H. Course Platform and Communication \u00b6 Google Classroom will be used as a course learning management system. All electronic resources and announcements about the course will be shared on this platform. It is very important to check the course page daily, access the necessary resources and announcements, and communicate with the instructor as you needed to complete the course with success I. Academic Integrity, Plagiarism & Cheating \u00b6 Academic Integrity is one of the most important principles of RTE\u00dc University. Anyone who breaches the principles of academic honesty is severely punished. It is natural to interact with classmates and others to \"study together\". It may also be the case where a student asks to help from someone else, paid or unpaid, better understand a difficult topic or a whole course. However, what is the borderline between \"studying together\" or \"taking private lessons\" and \"academic dishonesty\"? When is it plagiarism, when is it cheating? It is obvious that looking at another student's paper or any source other than what is allowed during the exam is cheating and will be punished. However, it is known that many students come to university with very little experience concerning what is acceptable and what counts as \"copying\", especially for assignments. The following are attempted as guidelines for the Faculty of Engineering and Architecture students to highlight the philosophy of academic honesty for assignments for which the student will be graded. Should a situation arise which is not described below, the student is advised to ask the instructor or assistant of the course whether what they intend to do would remain within the framework of academic honesty or not. a. What is acceptable when preparing an assignment? \u00b6 Communicating with classmates about the assignment to understand it better Putting ideas, quotes, paragraphs, small pieces of code (snippets) that you find online or elsewhere into your assignment, provided that these are not themselves the whole solution to the assignment, you cite the origins of these Asking sources for help in guiding you for the English language content of your assignment. Sharing small pieces of your assignment in the classroom to create a class discussion on some controversial topics. Turning to the web or elsewhere for instructions, references, and solutions to technical difficulties, but not for direct answers to the assignment Discuss solutions to assignments with others using diagrams or summarized statements but not actual text or code. Working with (and even paying) a tutor to help you with the course, provided the tutor does not do your assignment for you. b. What is not acceptable? \u00b6 Ask a classmate to see their solution to a problem before submitting your own. Failing to cite the origins of any text (or code for programming courses) that you discover outside of the course's lessons and integrate into your work Giving or showing a classmate your solution to a problem when the classmate is struggling to solve it. J. Expectations \u00b6 You are expected to attend classes on time by completing weekly course requirements (readings and assignments) during the semester. The main communication channel between the instructor and the students will be emailed. Please send your questions to the instructor's email address about the course via the email address provided to you by the university. Ensure that you include the course name in the subject field of your message and your name in the text field . In addition, the instructor will contact you via email if necessary. For this reason, it is very important to check your email address every day for healthy communication. K. Lecture Content and Syllabus Updates \u00b6 If deemed necessary, changes in the lecture content or course schedule can be made. If any changes are made in the scope of this document, the instructor will inform you about this. Course Schedule Overview \u00b6 Weeks Dates Subjects Other Tasks Week 1 04.10.2021 06.10.2021 Course Plan and Communication,Grading System, Assignments, and Exams,Computer Engineering Job Qualifications and Road Map,Google Search Basics,Programming Introduction (Operating System Basics, Computer Network Basics, Numerical System Basics, Character Sets) TBD Week 2 11.10.2021 13.10.2021 Algorithm Basics, Flowgorithm, Pseudocode, Programming Environment Setup and Configuration for C, C++, Java, and C#, Common Developer Tools, Online Programming Envoriments TBD Week 3 18.10.2021 20.10.2021 Source Code Sharing and Version Management. TBD Week 4 25.10.2021 27.10.2021 Shared Library Development and Application Test Automation for C, C++, C# and Java, TDD (Test Driven Development) TBD Week 5 01.11.2021 03.11.2021 C Functional Console Programming Week-6 08.11.2021 10.11.2021 C++ Functional Console Programming TBD Week-7 15.11.2021 17.11.2021 C# Functional Console Programming TBD Week-8 20.11.2021 28.11.2021 Midterm TBD Week-9 29.11.2021 01.12.2021 Java Functional Console Programming-I TBD Week-10 06.12.2021 08.12.2021 Java Functional Console Programming-II TBD Week-11 13.12.2021 16.12.2021 Java Functional Console Programming-III TBD Week-12 20.12.2021 22.12.2021 C / C++ Graphical User Interface (GUI) Programming TBD Week-13 27.12.2021 29.12.2021 C# Graphical User Interface (GUI) Programming-I TBD Week-14 03.01.2022 05.01.2022 C# Graphical User Interface (GUI) Programming-II TBD Week-15 10.01.2022 12.01.2022 Java Graphical User Interface Programming TBD Week-16 17.01.2022 30.01.2022 Final . TBD Bologna Bilgileri \u00b6 \\(CE103-Ders-\u0130zlencesi-Sonu\\)","title":"Syllabus"},{"location":"tr/syllabus/syllabus/#recep-tayyip-erdogan-university","text":"","title":"Recep Tayyip Erdogan University"},{"location":"tr/syllabus/syllabus/#faculty-of-engineering-and-architecture","text":"","title":"Faculty of Engineering and Architecture"},{"location":"tr/syllabus/syllabus/#computer-engineering","text":"","title":"Computer Engineering"},{"location":"tr/syllabus/syllabus/#ce103-algorithms-and-programming-i","text":"","title":"CE103 Algorithms and Programming-I"},{"location":"tr/syllabus/syllabus/#syllabus","text":"","title":"Syllabus"},{"location":"tr/syllabus/syllabus/#fall-semester-2021-2022","text":"Download DOC , SLIDE , PPTX Download WORD , PDF Instructor Asst. Prof. Dr. U\u011fur CORUH Contact Information ugur.coruh@erdogan.edu.tr Office No F-301 Google Classroom Code 3ipdtws Lecture Hours and Days Monday 13:00 - 15:30 (Theory) / Wednesday 13:00 - 14:30 (Lab) Lecture Classroom \u0130BBF 402 Level-4 Office Hours Meetings will be scheduled over Google Meet with your university account and email and performed via demand emails. Please send emails with the subject starting with [CE103] tag for the fast response and write formal, clear, and short emails Lecture and Communication Language English Theory/Laboratory Course Hour Per Week 3/2 Hours Credit 4 Prerequisite TBD Corequisite TBD Requirement TBD *TBD: To Be Defined.","title":"Fall Semester, 2021-2022"},{"location":"tr/syllabus/syllabus/#a-course-description","text":"This course goal is to develop algorithm and programming expertise from scratch in a powerful way to provide a high-quality career path for students. The lecture will be based on expertise sharing and guiding students to find learning methods and practice for algorithm and programming topics. By making programming applications and projects in the courses, the learning process will be strengthened by practicing rather than theory. This course provides functional programming for C, C++, C#, and Java with up-to-date development environments.","title":"A.    Course Description"},{"location":"tr/syllabus/syllabus/#b-course-learning-outcomes","text":"After completing this course satisfactorily, a student will be able to: Understand a software developer's road map and qualifications. Use different types of development environments to build applications. Understand the relation between real-life problems and their programming practices. Use language features in C, C++, C#, and Java for functional programming and evaluate their relative benefits. Understand application generation flows and outputs in detail, such as binaries and executables. Use the source code, version management systems, and portals based on GIT Work on the remote systems with remote connection tools. Use common developer tools that help application developers Create application libraries such as static, shared libraries for code reusability and functional packaging. Create unit tests for their applications to automate tests for their algorithms. Create console and GUI-based applications for their solutions. Create documentation for their applications.","title":"B.    Course Learning Outcomes"},{"location":"tr/syllabus/syllabus/#c-course-topics","text":"Developer Road Map Algorithm Design and Basics Basic Operating System Information for Development Requirement Basic Remote Connection and Working Know-How Source Code Version Management Systems (GIT) Integrated Development Environments Application Test Automation Application Debugging and Bugfixing Functional Programming (C,C++, C#, Java) Continues Integration and Continues Development Processes Software Development Principles Application Documentation Automation Shared and Static Library Development and Test in Cross-Environment","title":"C.    Course Topics"},{"location":"tr/syllabus/syllabus/#d-textbooks-and-required-hardware-or-equipment","text":"This course does not require a coursebook. If necessary, you can use the following books and open-source online resources. Paul Deitel and Harvey Deitel. 2012. C How to Program (7 th . ed.). Prentice Hall Press, USA. Intro to Java Programming, Comprehensive Version (10 th Edition) 10 th Edition by Y. Daniel Liang Introduction to Algorithms, Third Edition By Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, and Clifford Stein Problem Solving and Program Design in C, J.R. Hanly, and E.B. Koffman, 6 th Edition. Robert Sedgewick and Kevin Wayne. 2011. Algorithms (4 th . ed.). Addison-Wesley Professional. Harvey M. Deitel and Paul J. Deitel. 2001. Java How to Program (4 th . ed.). Prentice Hall PTR, USA. Paul Deitel and Harvey Deitel. 2016. Visual C# How to Program (6 th . ed.). Pearson. Additional Books TBD During this course, you should have a laptop for programming practices. You will have your development environment, and you will use this for examination and assignments also classroom practices.","title":"D.    Textbooks and Required Hardware or Equipment"},{"location":"tr/syllabus/syllabus/#e-grading-system","text":"Midterm and Final grades will be calculated with the weighted average of the project or homework-based examinations. Midterm grades will be calculated between term beginning to the midterm week, and Final grades will be calculated between Midterm and Final week homeworks or projects as follow \\[ a_n=\\text{Homework or Project Weight} \\] \\[ HW_n=\\text{Homework or Project Points} \\] \\[ n=\\text{Number of Homework or Project} \\] \\[ Grade=(a_1HW_1+a_2HW_2+...+a_nHW_n)/n \\] Homework Weight Midterm %40 Final %60 \\[ \\text{Passing Grade}=(40*Midterm_{Grade}+60*Final_{Grade})/100 \\]","title":"E.    Grading System"},{"location":"tr/syllabus/syllabus/#f-instructional-strategies-and-methods","text":"The basic teaching method of this course will be planned to be face-to-face in the classroom, and support resources, homeworks, and announcements will be shared over google classroom. Students are expected to be in the university. This responsibility is very important to complete this course with success. If pandemic situation changes and distance education is required during this course, this course will be done using synchronous and asynchronous distance education methods. In this scenario, students are expected to be in the online platform, zoom, or meet at the time specified in the course schedule. Attendance will be taken.","title":"F. Instructional Strategies and Methods"},{"location":"tr/syllabus/syllabus/#g-late-homework","text":"Throughout the semester, assignments must be submitted as specified by the announced deadline. Your grade will be reduced by 10% of the full points for each calendar day for overdue assignments. Overdue assignments will not be accepted after three (3) days. Unexpected situations must be reported to the instructor for late homeworks by students.","title":"G. Late Homework"},{"location":"tr/syllabus/syllabus/#h-course-platform-and-communication","text":"Google Classroom will be used as a course learning management system. All electronic resources and announcements about the course will be shared on this platform. It is very important to check the course page daily, access the necessary resources and announcements, and communicate with the instructor as you needed to complete the course with success","title":"H. Course Platform and Communication"},{"location":"tr/syllabus/syllabus/#i-academic-integrity-plagiarism-cheating","text":"Academic Integrity is one of the most important principles of RTE\u00dc University. Anyone who breaches the principles of academic honesty is severely punished. It is natural to interact with classmates and others to \"study together\". It may also be the case where a student asks to help from someone else, paid or unpaid, better understand a difficult topic or a whole course. However, what is the borderline between \"studying together\" or \"taking private lessons\" and \"academic dishonesty\"? When is it plagiarism, when is it cheating? It is obvious that looking at another student's paper or any source other than what is allowed during the exam is cheating and will be punished. However, it is known that many students come to university with very little experience concerning what is acceptable and what counts as \"copying\", especially for assignments. The following are attempted as guidelines for the Faculty of Engineering and Architecture students to highlight the philosophy of academic honesty for assignments for which the student will be graded. Should a situation arise which is not described below, the student is advised to ask the instructor or assistant of the course whether what they intend to do would remain within the framework of academic honesty or not.","title":"I. Academic Integrity, Plagiarism &amp; Cheating"},{"location":"tr/syllabus/syllabus/#a-what-is-acceptable-when-preparing-an-assignment","text":"Communicating with classmates about the assignment to understand it better Putting ideas, quotes, paragraphs, small pieces of code (snippets) that you find online or elsewhere into your assignment, provided that these are not themselves the whole solution to the assignment, you cite the origins of these Asking sources for help in guiding you for the English language content of your assignment. Sharing small pieces of your assignment in the classroom to create a class discussion on some controversial topics. Turning to the web or elsewhere for instructions, references, and solutions to technical difficulties, but not for direct answers to the assignment Discuss solutions to assignments with others using diagrams or summarized statements but not actual text or code. Working with (and even paying) a tutor to help you with the course, provided the tutor does not do your assignment for you.","title":"a. What is acceptable when preparing an assignment?"},{"location":"tr/syllabus/syllabus/#b-what-is-not-acceptable","text":"Ask a classmate to see their solution to a problem before submitting your own. Failing to cite the origins of any text (or code for programming courses) that you discover outside of the course's lessons and integrate into your work Giving or showing a classmate your solution to a problem when the classmate is struggling to solve it.","title":"b. What is not acceptable?"},{"location":"tr/syllabus/syllabus/#j-expectations","text":"You are expected to attend classes on time by completing weekly course requirements (readings and assignments) during the semester. The main communication channel between the instructor and the students will be emailed. Please send your questions to the instructor's email address about the course via the email address provided to you by the university. Ensure that you include the course name in the subject field of your message and your name in the text field . In addition, the instructor will contact you via email if necessary. For this reason, it is very important to check your email address every day for healthy communication.","title":"J. Expectations"},{"location":"tr/syllabus/syllabus/#k-lecture-content-and-syllabus-updates","text":"If deemed necessary, changes in the lecture content or course schedule can be made. If any changes are made in the scope of this document, the instructor will inform you about this.","title":"K. Lecture Content and Syllabus Updates"},{"location":"tr/syllabus/syllabus/#course-schedule-overview","text":"Weeks Dates Subjects Other Tasks Week 1 04.10.2021 06.10.2021 Course Plan and Communication,Grading System, Assignments, and Exams,Computer Engineering Job Qualifications and Road Map,Google Search Basics,Programming Introduction (Operating System Basics, Computer Network Basics, Numerical System Basics, Character Sets) TBD Week 2 11.10.2021 13.10.2021 Algorithm Basics, Flowgorithm, Pseudocode, Programming Environment Setup and Configuration for C, C++, Java, and C#, Common Developer Tools, Online Programming Envoriments TBD Week 3 18.10.2021 20.10.2021 Source Code Sharing and Version Management. TBD Week 4 25.10.2021 27.10.2021 Shared Library Development and Application Test Automation for C, C++, C# and Java, TDD (Test Driven Development) TBD Week 5 01.11.2021 03.11.2021 C Functional Console Programming Week-6 08.11.2021 10.11.2021 C++ Functional Console Programming TBD Week-7 15.11.2021 17.11.2021 C# Functional Console Programming TBD Week-8 20.11.2021 28.11.2021 Midterm TBD Week-9 29.11.2021 01.12.2021 Java Functional Console Programming-I TBD Week-10 06.12.2021 08.12.2021 Java Functional Console Programming-II TBD Week-11 13.12.2021 16.12.2021 Java Functional Console Programming-III TBD Week-12 20.12.2021 22.12.2021 C / C++ Graphical User Interface (GUI) Programming TBD Week-13 27.12.2021 29.12.2021 C# Graphical User Interface (GUI) Programming-I TBD Week-14 03.01.2022 05.01.2022 C# Graphical User Interface (GUI) Programming-II TBD Week-15 10.01.2022 12.01.2022 Java Graphical User Interface Programming TBD Week-16 17.01.2022 30.01.2022 Final . TBD","title":"Course Schedule Overview"},{"location":"tr/syllabus/syllabus/#bologna-bilgileri","text":"\\(CE103-Ders-\u0130zlencesi-Sonu\\)","title":"Bologna Bilgileri"},{"location":"tr/week-1-intro/ce103-week-1-intro/","text":"CE103 Algorithms and Programming I \u00b6 Week-1 (Intro) \u00b6 Fall Semester, 2021-2022 \u00b6 Download DOC , SLIDE , PPTX Brief Description of Course and Rules \u00b6 We will first talk about, Course Plan and Communication Grading System, Homework,s and Exams please read the syllabus carefully. Computer Engineering Roles \u00b6 Software Development Hardware Development Network Organization and Management Database Organization and Management Hardware and Software Testing Audit (Cyber Security, Policy etc.) Etc. Computer Engineering Areas \u00b6 Computer Vision Social Analytics Mobility IoT Security Web-Scale IT Cloud Smart Machines Pervasive Fintech Etc. Our focus is Software Development \u00b6 for this reason, we will focus on software-based road-maps we can use common developer road maps from https://roadmap.sh/ What will you see in the roadmap? \u00b6 Frontend Backend DevOps DBA and more Also, you need soft skills \u00b6 Excellent written and oral communication skills, including public speaking and presenting Decisiveness under pressure and strong critical thinking skills Willingness to work off-core-hours, when necessary, to deploy software or upgrade hardware If you need more information about your profession \u00b6 Visit Job Search Web Portals and Look at Requirements to Understand What is Real Life Need https://www.kariyer.net/ https://www.yenibiris.com/ https://www.secretcv.com/ https://www.linkedin.com/ Etc. Using Google \u00b6 Operating System List \u00b6 Operating System Architecture \u00b6 reference Operating Systems Key Comparing Factor \u00b6 reference Operating System Comparisons \u00b6 reference Intro to the Internet \u00b6 What is IP Address? \u00b6 What is Port? \u00b6 In computer networking , a port is a communication endpoint. At the software level, within an operating system , a port is a logical construct that identifies a specific process or a type of network service . A port is identified for each transport protocol and address combination by a 16-bit unsigned number , known as the port number. The most common transport protocols that use port numbers are the Transmission Control Protocol (TCP) and the User Datagram Protocol (UDP). reference What is Port Forwarding and NAT \u00b6 https://www.networkantics.com/sonicwall-port-forwarding/ https://en.wikipedia.org/wiki/Network_address_translation What is Internet Packet (IP) \u00b6 What is Domain Name Server (DNS)? \u00b6 The Submarine Cable Map \u00b6 https://www.submarinecablemap.com/ Introduction to the command line interface \u00b6 Reference Books Bash Notes For Professionals Linux Notes For Professionals PowerShell Notes For Professionals What is the command line? \u00b6 The window, which is usually called the command line or command-line interface , is a text-based application for viewing, handling, and manipulating files on your computer. It's much like Windows Explorer or Finder on the Mac, but without the graphical interface. Other names for the command line are: cmd, CLI, prompt, console or terminal While there are many commands you can use with CLI, they all fall into two categories : The commands that handle the processes The commands that handle the files reference Why Would You Use CLI over GUI? \u00b6 Less Resource It is not a secret that the text-based program needs very little resources of your computer. This means that with CLI you can do similar tasks with minimum resources. High Precision You can use a specific command to target specific destinations with ease. As long as you don\u2019t type the wrong command, it will work like a charm. Once you learn the basics, writing syntax is not as hard as you might think. Repetitive Tasks Friendly GUI has developed well over the years. But, the operating system may not give you all the menus and buttons to perform all tasks. One of the reasons is safety. This leaves you overwhelmed if you have to do repetitive tasks. For example, when you have to handle hundreds of files within a folder, CLI enables you to use a single command to do automate the repetition easily. Powerful Most operating systems today prevent you from messing up the system\u2019s core process. Windows has system protection and MacOS has SIP (System Integrity Protection). You won\u2019t be able to perform certain tasks which are system protected. However, with CLI, you will have full control over your system. Open the command-line interface (Windows) \u00b6 Go to the Start menu or screen, and enter \"Command Prompt\" in the search field. Go to Start menu \u2192 Windows System \u2192 Command Prompt. Go to Start menu \u2192 All Programs \u2192 Accessories \u2192 Command Prompt. Go to the Start screen, hover your mouse in the lower-left corner of the screen, and click the down arrow that appears (on a touch screen, instead flick up from the bottom of the screen). The Apps page should open. Click on Command Prompt in the Windows System section. Hold the special Windows key on your keyboard and press the \"X\" key. Choose \"Command Prompt\" from the pop-up menu. Hold the Windows key and press the \"R\" key to get a \"Run\" window. Type \"cmd\" in the box, and click the OK key. Open the command-line interface (Linux) \u00b6 It's probably under Applications \u2192 Accessories \u2192 Terminal, or Applications \u2192 System \u2192 Terminal, but that may depend on your system. If it's not there, you can try to Google it. :) Open the command-line interface (MacOS) \u00b6 Go to Applications \u2192 Utilities \u2192 Terminal Reference \u00b6 Network_address_translation GitHub - kamranahmedse/developer-roadmap: Roadmap to becoming a web developer in 2021 GitHub - jwasham/coding-interview-university: A complete computer science study plan to become a software engineer. GitHub - sindresorhus/awesome: \ud83d\ude0e Awesome lists about all kinds of interesting topics","title":"Week-1 (Intro and Developer Roadmap)"},{"location":"tr/week-1-intro/ce103-week-1-intro/#ce103-algorithms-and-programming-i","text":"","title":"CE103 Algorithms and Programming I"},{"location":"tr/week-1-intro/ce103-week-1-intro/#week-1-intro","text":"","title":"Week-1 (Intro)"},{"location":"tr/week-1-intro/ce103-week-1-intro/#fall-semester-2021-2022","text":"Download DOC , SLIDE , PPTX","title":"Fall Semester, 2021-2022"},{"location":"tr/week-1-intro/ce103-week-1-intro/#brief-description-of-course-and-rules","text":"We will first talk about, Course Plan and Communication Grading System, Homework,s and Exams please read the syllabus carefully.","title":"Brief Description of Course and Rules"},{"location":"tr/week-1-intro/ce103-week-1-intro/#computer-engineering-roles","text":"Software Development Hardware Development Network Organization and Management Database Organization and Management Hardware and Software Testing Audit (Cyber Security, Policy etc.) Etc.","title":"Computer Engineering Roles"},{"location":"tr/week-1-intro/ce103-week-1-intro/#computer-engineering-areas","text":"Computer Vision Social Analytics Mobility IoT Security Web-Scale IT Cloud Smart Machines Pervasive Fintech Etc.","title":"Computer Engineering Areas"},{"location":"tr/week-1-intro/ce103-week-1-intro/#our-focus-is-software-development","text":"for this reason, we will focus on software-based road-maps we can use common developer road maps from https://roadmap.sh/","title":"Our focus is Software Development"},{"location":"tr/week-1-intro/ce103-week-1-intro/#what-will-you-see-in-the-roadmap","text":"Frontend Backend DevOps DBA and more","title":"What will you see in the roadmap?"},{"location":"tr/week-1-intro/ce103-week-1-intro/#also-you-need-soft-skills","text":"Excellent written and oral communication skills, including public speaking and presenting Decisiveness under pressure and strong critical thinking skills Willingness to work off-core-hours, when necessary, to deploy software or upgrade hardware","title":"Also, you need soft skills"},{"location":"tr/week-1-intro/ce103-week-1-intro/#if-you-need-more-information-about-your-profession","text":"Visit Job Search Web Portals and Look at Requirements to Understand What is Real Life Need https://www.kariyer.net/ https://www.yenibiris.com/ https://www.secretcv.com/ https://www.linkedin.com/ Etc.","title":"If you need more information about your profession"},{"location":"tr/week-1-intro/ce103-week-1-intro/#using-google","text":"","title":"Using Google"},{"location":"tr/week-1-intro/ce103-week-1-intro/#operating-system-list","text":"","title":"Operating System List"},{"location":"tr/week-1-intro/ce103-week-1-intro/#operating-system-architecture","text":"reference","title":"Operating System Architecture"},{"location":"tr/week-1-intro/ce103-week-1-intro/#operating-systems-key-comparing-factor","text":"reference","title":"Operating Systems Key Comparing Factor"},{"location":"tr/week-1-intro/ce103-week-1-intro/#operating-system-comparisons","text":"reference","title":"Operating System Comparisons"},{"location":"tr/week-1-intro/ce103-week-1-intro/#intro-to-the-internet","text":"","title":"Intro to the Internet"},{"location":"tr/week-1-intro/ce103-week-1-intro/#what-is-ip-address","text":"","title":"What is IP Address?"},{"location":"tr/week-1-intro/ce103-week-1-intro/#what-is-port","text":"In computer networking , a port is a communication endpoint. At the software level, within an operating system , a port is a logical construct that identifies a specific process or a type of network service . A port is identified for each transport protocol and address combination by a 16-bit unsigned number , known as the port number. The most common transport protocols that use port numbers are the Transmission Control Protocol (TCP) and the User Datagram Protocol (UDP). reference","title":"What is Port?"},{"location":"tr/week-1-intro/ce103-week-1-intro/#what-is-port-forwarding-and-nat","text":"https://www.networkantics.com/sonicwall-port-forwarding/ https://en.wikipedia.org/wiki/Network_address_translation","title":"What is Port Forwarding and NAT"},{"location":"tr/week-1-intro/ce103-week-1-intro/#what-is-internet-packet-ip","text":"","title":"What is Internet Packet (IP)"},{"location":"tr/week-1-intro/ce103-week-1-intro/#what-is-domain-name-server-dns","text":"","title":"What is Domain Name Server (DNS)?"},{"location":"tr/week-1-intro/ce103-week-1-intro/#the-submarine-cable-map","text":"https://www.submarinecablemap.com/","title":"The Submarine Cable Map"},{"location":"tr/week-1-intro/ce103-week-1-intro/#introduction-to-the-command-line-interface","text":"Reference Books Bash Notes For Professionals Linux Notes For Professionals PowerShell Notes For Professionals","title":"Introduction to the command line interface"},{"location":"tr/week-1-intro/ce103-week-1-intro/#what-is-the-command-line","text":"The window, which is usually called the command line or command-line interface , is a text-based application for viewing, handling, and manipulating files on your computer. It's much like Windows Explorer or Finder on the Mac, but without the graphical interface. Other names for the command line are: cmd, CLI, prompt, console or terminal While there are many commands you can use with CLI, they all fall into two categories : The commands that handle the processes The commands that handle the files reference","title":"What is the command line?"},{"location":"tr/week-1-intro/ce103-week-1-intro/#why-would-you-use-cli-over-gui","text":"Less Resource It is not a secret that the text-based program needs very little resources of your computer. This means that with CLI you can do similar tasks with minimum resources. High Precision You can use a specific command to target specific destinations with ease. As long as you don\u2019t type the wrong command, it will work like a charm. Once you learn the basics, writing syntax is not as hard as you might think. Repetitive Tasks Friendly GUI has developed well over the years. But, the operating system may not give you all the menus and buttons to perform all tasks. One of the reasons is safety. This leaves you overwhelmed if you have to do repetitive tasks. For example, when you have to handle hundreds of files within a folder, CLI enables you to use a single command to do automate the repetition easily. Powerful Most operating systems today prevent you from messing up the system\u2019s core process. Windows has system protection and MacOS has SIP (System Integrity Protection). You won\u2019t be able to perform certain tasks which are system protected. However, with CLI, you will have full control over your system.","title":"Why Would You Use CLI over GUI?"},{"location":"tr/week-1-intro/ce103-week-1-intro/#open-the-command-line-interface-windows","text":"Go to the Start menu or screen, and enter \"Command Prompt\" in the search field. Go to Start menu \u2192 Windows System \u2192 Command Prompt. Go to Start menu \u2192 All Programs \u2192 Accessories \u2192 Command Prompt. Go to the Start screen, hover your mouse in the lower-left corner of the screen, and click the down arrow that appears (on a touch screen, instead flick up from the bottom of the screen). The Apps page should open. Click on Command Prompt in the Windows System section. Hold the special Windows key on your keyboard and press the \"X\" key. Choose \"Command Prompt\" from the pop-up menu. Hold the Windows key and press the \"R\" key to get a \"Run\" window. Type \"cmd\" in the box, and click the OK key.","title":"Open the command-line interface (Windows)"},{"location":"tr/week-1-intro/ce103-week-1-intro/#open-the-command-line-interface-linux","text":"It's probably under Applications \u2192 Accessories \u2192 Terminal, or Applications \u2192 System \u2192 Terminal, but that may depend on your system. If it's not there, you can try to Google it. :)","title":"Open the command-line interface (Linux)"},{"location":"tr/week-1-intro/ce103-week-1-intro/#open-the-command-line-interface-macos","text":"Go to Applications \u2192 Utilities \u2192 Terminal","title":"Open the command-line interface (MacOS)"},{"location":"tr/week-1-intro/ce103-week-1-intro/#reference","text":"Network_address_translation GitHub - kamranahmedse/developer-roadmap: Roadmap to becoming a web developer in 2021 GitHub - jwasham/coding-interview-university: A complete computer science study plan to become a software engineer. GitHub - sindresorhus/awesome: \ud83d\ude0e Awesome lists about all kinds of interesting topics","title":"Reference"},{"location":"tr/week-10-java-II/ce103-week-10-java-II/","text":"CE103 Algorithms and Programming I \u00b6 Week-10 (Java Functional Console Programming-II) \u00b6 Fall Semester, 2021-2022 \u00b6 Download DOC , SLIDE , PPTX Java Functional Console Programming-II \u00b6 a. Java Exception Handling i. Java Exceptions ii. Java Exception Handling iii. Java try..catch iv. Java throw and throws v. Java catch Multiple Exceptions vi. Java try-with-resources vii. Java Annotations viii. Java Annotation Types ix. Java Logging x. Java Assertions b. Java List i. Java Collection Framework ii. Java Collection Interface iii. Java List Interface iv. Java ArrayList v. Java Vector vi. Java Stack c. Java Queue i. Java Queue Interface ii. Java PriorityQueue Interface iii. Java Deque Interface iv. Java LinkedList v. Java ArrayDeque vi. Java BlockingQueue Interface vii. Java ArrayBlockingQueue viii. Java LinkedBlocking Queue d. Java Map i. Java Map Interface ii. Java HashMap iii. Java LinkedHashMap iv. Java WeakHashMap v. Java EnumMap vi. Java SortedMap Interface vii. Java NavigableMap Interface viii. Java TreeMap ix. Java ConcurrentMap Interface x. Java ConcurrentHashMap e. Java Set i. Java Set Interface ii. Java HashSet iii. Java EnumSet iv. Java LinkedHashSet v. Java SortedSet Interface vi. Java NavigableSet Interface vii. Java TreeSet viii. Java Algorithms ix. Java Iterator Java ListIterator Out of Scope \u00b6 a. Java OOP-I i. Java Class and Objects ii. Java Methods iii. Java Constructor iv. Java Strings v. Java Access Modifiers vi. Java this keyword vii. Java final keyword viii. Java recursion ix. Java instanceof operator b. Java OOP-II i. Java Inheritance ii. Java Method Overriding iii. Java super keyword iv. Abstract Class & Method v. Java Interfaces vi. Java Polymorphism vii. Java Encapsulation c. Java OOP-III i. Nested & Inner Class ii. Java Static Class iii. Java Anonymous Class iv. Java Singleton v. Java enum class vi. Java enum constructor vii. Java enum string Java reflection","title":"Week-10 (Java Console Programming-II)"},{"location":"tr/week-10-java-II/ce103-week-10-java-II/#ce103-algorithms-and-programming-i","text":"","title":"CE103 Algorithms and Programming I"},{"location":"tr/week-10-java-II/ce103-week-10-java-II/#week-10-java-functional-console-programming-ii","text":"","title":"Week-10 (Java Functional Console Programming-II)"},{"location":"tr/week-10-java-II/ce103-week-10-java-II/#fall-semester-2021-2022","text":"Download DOC , SLIDE , PPTX","title":"Fall Semester, 2021-2022"},{"location":"tr/week-10-java-II/ce103-week-10-java-II/#java-functional-console-programming-ii","text":"a. Java Exception Handling i. Java Exceptions ii. Java Exception Handling iii. Java try..catch iv. Java throw and throws v. Java catch Multiple Exceptions vi. Java try-with-resources vii. Java Annotations viii. Java Annotation Types ix. Java Logging x. Java Assertions b. Java List i. Java Collection Framework ii. Java Collection Interface iii. Java List Interface iv. Java ArrayList v. Java Vector vi. Java Stack c. Java Queue i. Java Queue Interface ii. Java PriorityQueue Interface iii. Java Deque Interface iv. Java LinkedList v. Java ArrayDeque vi. Java BlockingQueue Interface vii. Java ArrayBlockingQueue viii. Java LinkedBlocking Queue d. Java Map i. Java Map Interface ii. Java HashMap iii. Java LinkedHashMap iv. Java WeakHashMap v. Java EnumMap vi. Java SortedMap Interface vii. Java NavigableMap Interface viii. Java TreeMap ix. Java ConcurrentMap Interface x. Java ConcurrentHashMap e. Java Set i. Java Set Interface ii. Java HashSet iii. Java EnumSet iv. Java LinkedHashSet v. Java SortedSet Interface vi. Java NavigableSet Interface vii. Java TreeSet viii. Java Algorithms ix. Java Iterator Java ListIterator","title":"Java Functional Console Programming-II"},{"location":"tr/week-10-java-II/ce103-week-10-java-II/#out-of-scope","text":"a. Java OOP-I i. Java Class and Objects ii. Java Methods iii. Java Constructor iv. Java Strings v. Java Access Modifiers vi. Java this keyword vii. Java final keyword viii. Java recursion ix. Java instanceof operator b. Java OOP-II i. Java Inheritance ii. Java Method Overriding iii. Java super keyword iv. Abstract Class & Method v. Java Interfaces vi. Java Polymorphism vii. Java Encapsulation c. Java OOP-III i. Nested & Inner Class ii. Java Static Class iii. Java Anonymous Class iv. Java Singleton v. Java enum class vi. Java enum constructor vii. Java enum string Java reflection","title":"Out of Scope"},{"location":"tr/week-11-java-III/ce103-week-11-java-III/","text":"CE103 Algorithms and Programming I \u00b6 Week-11 (Java Functional Console Programming-III) \u00b6 Fall Semester, 2021-2022 \u00b6 Download DOC , SLIDE , PPTX Java Functional Console Programming-III \u00b6 i. Java I/O Streams i. Java I/O Streams ii. Java InputStream iii. Java OutputStream iv. Java FileInputStream v. Java FileOutputStream vi. Java ByteArrayInputStream vii. Java ByteArrayOutputStream viii. Java ObjectInputStream ix. Java ObjectOutputStream x. Java BufferedInputStream xi. Java BufferedOutputStream xii. Java PrintStream j. Java Reader/Writer i. Java Reader ii. Java Writer iii. Java InputStreamReader iv. Java OutputStreamWriter v. Java FileReader vi. Java FileWriter vii. Java BufferedReader viii. Java BufferedWriter ix. Java StringReader x. Java StringWriter xi. Java PrintWriter k. Additional Topics i. Java Scanner Class ii. Java Type Casting iii. Java autoboxing and unboxing iv. Java Lambda Expression v. Java Generics vi. Java File Class vii. Java Wrapper Class viii. Java Command Line Arguments ix. JNLP (Java Network Launch Protocol) JNI Sample JNI/C++ HelloWorld \u00b7 GitHub Set up JNI development in Gradle project | IntelliJ IDEA","title":"Week-11 (Java Console Programming-III)"},{"location":"tr/week-11-java-III/ce103-week-11-java-III/#ce103-algorithms-and-programming-i","text":"","title":"CE103 Algorithms and Programming I"},{"location":"tr/week-11-java-III/ce103-week-11-java-III/#week-11-java-functional-console-programming-iii","text":"","title":"Week-11 (Java Functional Console Programming-III)"},{"location":"tr/week-11-java-III/ce103-week-11-java-III/#fall-semester-2021-2022","text":"Download DOC , SLIDE , PPTX","title":"Fall Semester, 2021-2022"},{"location":"tr/week-11-java-III/ce103-week-11-java-III/#java-functional-console-programming-iii","text":"i. Java I/O Streams i. Java I/O Streams ii. Java InputStream iii. Java OutputStream iv. Java FileInputStream v. Java FileOutputStream vi. Java ByteArrayInputStream vii. Java ByteArrayOutputStream viii. Java ObjectInputStream ix. Java ObjectOutputStream x. Java BufferedInputStream xi. Java BufferedOutputStream xii. Java PrintStream j. Java Reader/Writer i. Java Reader ii. Java Writer iii. Java InputStreamReader iv. Java OutputStreamWriter v. Java FileReader vi. Java FileWriter vii. Java BufferedReader viii. Java BufferedWriter ix. Java StringReader x. Java StringWriter xi. Java PrintWriter k. Additional Topics i. Java Scanner Class ii. Java Type Casting iii. Java autoboxing and unboxing iv. Java Lambda Expression v. Java Generics vi. Java File Class vii. Java Wrapper Class viii. Java Command Line Arguments ix. JNLP (Java Network Launch Protocol) JNI Sample JNI/C++ HelloWorld \u00b7 GitHub Set up JNI development in Gradle project | IntelliJ IDEA","title":"Java Functional Console Programming-III"},{"location":"tr/week-12-c-cpp-gui/ce103-week-12-c-cpp-gui/","text":"CE103 Algorithms and Programming I \u00b6 Week-12 (C/Cpp GUI Programming) \u00b6 Fall Semester, 2021-2022 \u00b6 Download DOC , SLIDE , PPTX C/Cpp GUI Programming \u00b6 The Microsoft Foundation Class MFC Tutorial Visual C++ / MFC Calculator 3 - YouTube MFC C++ : My videos source code download available now to members - YouTube The Windows GUI interface programming using Microsoft Foundation Classes (MFC) with Visual C++ and .Net hands-on approach tutorials Module 1: Using Visual C++ 6.0, .Net and Windows MFC Graphic User Interface (GUI) programming hands-on tutorial-Module1 GTK 4 https://www.msys2.org/ https://www.msys2.org/ Programming with gtkmm 4 Build and run GTK 4 applications with Visual Studio https://www.gtk.org/ The Meson Build system The GTK Project - A free and open-source cross-platform widget toolkit // Include gtk #include <gtk/gtk.h> static void on_activate ( GtkApplication * app ) { // Create a new window GtkWidget * window = gtk_application_window_new ( app ); // Create a new button GtkWidget * button = gtk_button_new_with_label ( \"Hello, World!\" ); // When the button is clicked, close the window passed as an argument g_signal_connect_swapped ( button , \"clicked\" , G_CALLBACK ( gtk_window_close ), window ); gtk_window_set_child ( GTK_WINDOW ( window ), button ); gtk_window_present ( GTK_WINDOW ( window )); } int main ( int argc , char * argv []) { // Create a new application GtkApplication * app = gtk_application_new ( \"com.example.GtkApplication\" , G_APPLICATION_FLAGS_NONE ); g_signal_connect ( app , \"activate\" , G_CALLBACK ( on_activate ), NULL ); return g_application_run ( G_APPLICATION ( app ), argc , argv ); } eBooks by Tags | RIP Tutorial","title":"Week-12 (C/C++ GUI Programming)"},{"location":"tr/week-12-c-cpp-gui/ce103-week-12-c-cpp-gui/#ce103-algorithms-and-programming-i","text":"","title":"CE103 Algorithms and Programming I"},{"location":"tr/week-12-c-cpp-gui/ce103-week-12-c-cpp-gui/#week-12-ccpp-gui-programming","text":"","title":"Week-12 (C/Cpp GUI Programming)"},{"location":"tr/week-12-c-cpp-gui/ce103-week-12-c-cpp-gui/#fall-semester-2021-2022","text":"Download DOC , SLIDE , PPTX","title":"Fall Semester, 2021-2022"},{"location":"tr/week-12-c-cpp-gui/ce103-week-12-c-cpp-gui/#ccpp-gui-programming","text":"The Microsoft Foundation Class MFC Tutorial Visual C++ / MFC Calculator 3 - YouTube MFC C++ : My videos source code download available now to members - YouTube The Windows GUI interface programming using Microsoft Foundation Classes (MFC) with Visual C++ and .Net hands-on approach tutorials Module 1: Using Visual C++ 6.0, .Net and Windows MFC Graphic User Interface (GUI) programming hands-on tutorial-Module1 GTK 4 https://www.msys2.org/ https://www.msys2.org/ Programming with gtkmm 4 Build and run GTK 4 applications with Visual Studio https://www.gtk.org/ The Meson Build system The GTK Project - A free and open-source cross-platform widget toolkit // Include gtk #include <gtk/gtk.h> static void on_activate ( GtkApplication * app ) { // Create a new window GtkWidget * window = gtk_application_window_new ( app ); // Create a new button GtkWidget * button = gtk_button_new_with_label ( \"Hello, World!\" ); // When the button is clicked, close the window passed as an argument g_signal_connect_swapped ( button , \"clicked\" , G_CALLBACK ( gtk_window_close ), window ); gtk_window_set_child ( GTK_WINDOW ( window ), button ); gtk_window_present ( GTK_WINDOW ( window )); } int main ( int argc , char * argv []) { // Create a new application GtkApplication * app = gtk_application_new ( \"com.example.GtkApplication\" , G_APPLICATION_FLAGS_NONE ); g_signal_connect ( app , \"activate\" , G_CALLBACK ( on_activate ), NULL ); return g_application_run ( G_APPLICATION ( app ), argc , argv ); } eBooks by Tags | RIP Tutorial","title":"C/Cpp GUI Programming"},{"location":"tr/week-13-csharp-gui-I/ce103-week-13-csharp-gui-I/","text":"CE103 Algorithms and Programming I \u00b6 Week-13 (C# GUI Programming-I) \u00b6 Fall Semester, 2021-2022 \u00b6 Download DOC , SLIDE , PPTX C# GUI Programming-I \u00b6","title":"Week-13 (C# GUI Programming-I)"},{"location":"tr/week-13-csharp-gui-I/ce103-week-13-csharp-gui-I/#ce103-algorithms-and-programming-i","text":"","title":"CE103 Algorithms and Programming I"},{"location":"tr/week-13-csharp-gui-I/ce103-week-13-csharp-gui-I/#week-13-c-gui-programming-i","text":"","title":"Week-13 (C# GUI Programming-I)"},{"location":"tr/week-13-csharp-gui-I/ce103-week-13-csharp-gui-I/#fall-semester-2021-2022","text":"Download DOC , SLIDE , PPTX","title":"Fall Semester, 2021-2022"},{"location":"tr/week-13-csharp-gui-I/ce103-week-13-csharp-gui-I/#c-gui-programming-i","text":"","title":"C# GUI Programming-I"},{"location":"tr/week-14-csharp-gui-II/ce103-week-14-csharp-gui-II/","text":"CE103 Algorithms and Programming I \u00b6 Week-14 (C# GUI Programming-II) \u00b6 Fall Semester, 2021-2022 \u00b6 Download DOC , SLIDE , PPTX C# GUI Programming-II \u00b6","title":"Week-14 (C# GUI Programming-II)"},{"location":"tr/week-14-csharp-gui-II/ce103-week-14-csharp-gui-II/#ce103-algorithms-and-programming-i","text":"","title":"CE103 Algorithms and Programming I"},{"location":"tr/week-14-csharp-gui-II/ce103-week-14-csharp-gui-II/#week-14-c-gui-programming-ii","text":"","title":"Week-14 (C# GUI Programming-II)"},{"location":"tr/week-14-csharp-gui-II/ce103-week-14-csharp-gui-II/#fall-semester-2021-2022","text":"Download DOC , SLIDE , PPTX","title":"Fall Semester, 2021-2022"},{"location":"tr/week-14-csharp-gui-II/ce103-week-14-csharp-gui-II/#c-gui-programming-ii","text":"","title":"C# GUI Programming-II"},{"location":"tr/week-15-java-gui/ce103-week-15-java-gui/","text":"CE103 Algorithms and Programming I \u00b6 Week-15 (Java GUI Programming) \u00b6 Fall Semester, 2021-2022 \u00b6 Download DOC , SLIDE , PPTX Java GUI Programming \u00b6 JavaFX GUI Programming \u00b6 1-Install Gluon Scene Builder \u00b6 Download and Install Gluon Scene Builder from URL Scene Builder - Gluon We will use gluon scene builder as an external designer for NetBeans, Eclipse, and IntelliJ idea tools. you can save this design as an FXML file from File->Save As 2-Install Apache Netbeans \u00b6 Download and install apache Netbeans https://netbeans.apache.org/ 3- Configure JavaFX Scene Builder for Apache Netbeans \u00b6 Open Tools->Options->Java->JavaFX Select builder home you can find old integration documentation here Using JavaFX Scene Builder with Java IDEs: Using Scene Builder with NetBeans IDE | JavaFX 2 Tutorials and Documentation 4-Create First Application \u00b6 Select File->New Project Select Java With Maven Types FXML JavaFX Maven Archetype (Gluon) Set project properties Open Project Resources and Click FXML files to run Scene Builder In designer properties tab will show control properties, code tab will show action bindings Then you can run applications from Netbeans. for introduction level information please check the following examples JavaFX Simple Calculator - Design and Code - YouTube JavaFX Library Management System Development #0: Introduction - YouTube for more information about JavaFX please check the following JavaFX Tutorial - javatpoint Java Swing GUI Programming \u00b6 Select File->New Project -> Java with Maven -> Java Application Configure Project Open project and select package then select right-click -> New -> JFrame Form Give a name to your frame Swing GUI Builder is integrated with Netbeans Drag-and-drop controls to panel from the palette And from the events tab, add custom actions. you can configure control properties from the properties screen We can add simple events such as when the moclickscked to button write text on the text field \"Hello World\" When you run application, you will see the following screen References \u00b6 ... ..","title":"Week-15 (Java GUI Programming-II)"},{"location":"tr/week-15-java-gui/ce103-week-15-java-gui/#ce103-algorithms-and-programming-i","text":"","title":"CE103 Algorithms and Programming I"},{"location":"tr/week-15-java-gui/ce103-week-15-java-gui/#week-15-java-gui-programming","text":"","title":"Week-15 (Java GUI Programming)"},{"location":"tr/week-15-java-gui/ce103-week-15-java-gui/#fall-semester-2021-2022","text":"Download DOC , SLIDE , PPTX","title":"Fall Semester, 2021-2022"},{"location":"tr/week-15-java-gui/ce103-week-15-java-gui/#java-gui-programming","text":"","title":"Java GUI Programming"},{"location":"tr/week-15-java-gui/ce103-week-15-java-gui/#javafx-gui-programming","text":"","title":"JavaFX GUI Programming"},{"location":"tr/week-15-java-gui/ce103-week-15-java-gui/#1-install-gluon-scene-builder","text":"Download and Install Gluon Scene Builder from URL Scene Builder - Gluon We will use gluon scene builder as an external designer for NetBeans, Eclipse, and IntelliJ idea tools. you can save this design as an FXML file from File->Save As","title":"1-Install Gluon Scene Builder"},{"location":"tr/week-15-java-gui/ce103-week-15-java-gui/#2-install-apache-netbeans","text":"Download and install apache Netbeans https://netbeans.apache.org/","title":"2-Install Apache Netbeans"},{"location":"tr/week-15-java-gui/ce103-week-15-java-gui/#3-configure-javafx-scene-builder-for-apache-netbeans","text":"Open Tools->Options->Java->JavaFX Select builder home you can find old integration documentation here Using JavaFX Scene Builder with Java IDEs: Using Scene Builder with NetBeans IDE | JavaFX 2 Tutorials and Documentation","title":"3- Configure JavaFX Scene Builder for Apache Netbeans"},{"location":"tr/week-15-java-gui/ce103-week-15-java-gui/#4-create-first-application","text":"Select File->New Project Select Java With Maven Types FXML JavaFX Maven Archetype (Gluon) Set project properties Open Project Resources and Click FXML files to run Scene Builder In designer properties tab will show control properties, code tab will show action bindings Then you can run applications from Netbeans. for introduction level information please check the following examples JavaFX Simple Calculator - Design and Code - YouTube JavaFX Library Management System Development #0: Introduction - YouTube for more information about JavaFX please check the following JavaFX Tutorial - javatpoint","title":"4-Create First Application"},{"location":"tr/week-15-java-gui/ce103-week-15-java-gui/#java-swing-gui-programming","text":"Select File->New Project -> Java with Maven -> Java Application Configure Project Open project and select package then select right-click -> New -> JFrame Form Give a name to your frame Swing GUI Builder is integrated with Netbeans Drag-and-drop controls to panel from the palette And from the events tab, add custom actions. you can configure control properties from the properties screen We can add simple events such as when the moclickscked to button write text on the text field \"Hello World\" When you run application, you will see the following screen","title":"Java Swing GUI Programming"},{"location":"tr/week-15-java-gui/ce103-week-15-java-gui/#references","text":"... ..","title":"References"},{"location":"tr/week-16-final/ce103-week-16-final/","text":"CE103 Algorithms and Programming I \u00b6 Week-16 (Final) \u00b6 Fall Semester, 2021-2022 \u00b6 Download DOC , SLIDE , PPTX Final \u00b6","title":"Week-16 (Final)"},{"location":"tr/week-16-final/ce103-week-16-final/#ce103-algorithms-and-programming-i","text":"","title":"CE103 Algorithms and Programming I"},{"location":"tr/week-16-final/ce103-week-16-final/#week-16-final","text":"","title":"Week-16 (Final)"},{"location":"tr/week-16-final/ce103-week-16-final/#fall-semester-2021-2022","text":"Download DOC , SLIDE , PPTX","title":"Fall Semester, 2021-2022"},{"location":"tr/week-16-final/ce103-week-16-final/#final","text":"","title":"Final"},{"location":"tr/week-2-setup/ce103-week-2-setup/","text":"CE103 Algorithms and Programming I \u00b6 Week-2 \u00b6 Fall Semester, 2021-2022 \u00b6 Download DOC , SLIDE , PPTX Algorithm Basics \u00b6 Flowgorithm \u00b6 http://www.flowgorithm.org/ Pseudocode \u00b6 Pseudocode - Wikipedia Pseudocode Examples How to write a Pseudo Code? - GeeksforGeeks Introduction to Analysis of Algorithms \u00b6 In this course we will learn how to code with several development environments and next term we will see analysis of algorithms in details. This topic is covered in the following link : CE100 Introduction to Analysis of Algorithms Programming Environment Setup and Configuration \u00b6 Programming life is not about only learning how to code. Mostly you need to use several code development environments and you need to learn how to use them efficiently. C / C++ Environment and Development \u00b6 DevCpp (Install / Compile / Run / Debug) (1) \u00b6 Download DevC++ IDE from following link https://www.bloodshed.net/ DevCpp (Install / Compile / Run / Debug) (2) \u00b6 Open DevC++ IDE for C Project Generation Open File->New->Project DevCpp (Install / Compile / Run / Debug) (3) \u00b6 Select Console Application from Basic tab and with C Project Option and write a project name such as \" Hello \" then press OK Select a folder and save Hello.dev project file. DevCpp (Install / Compile / Run / Debug) (4) \u00b6 You will see a sample main with empty body DevCpp (Install / Compile / Run / Debug) (5) \u00b6 #include <stdio.h> #include <stdlib.h> /* run this program using the console pauser or add your own getch, s,ystem(\"pause\") or input loop */ int main ( int argc , char * argv []) { retAdd 0 ; } DevCpp (Install / Compile / Run / Debug) (6) \u00b6 add the following line in main function. This will write \"Hello, World!\" on the screen and then wait a keypress to exit from application #include <stdio.h> #include <stdlib.h> /* run this program using the console pauser or add your own getch, system(\"pause\") or input loop */ int main ( int argc , char * argv []) { printf ( \"Hello, World!\" ); getchar (); return 0 ; } DevCpp (Install / Compile / Run / Debug) (7) \u00b6 Then save the file DevCpp (Install / Compile / Run / Debug) (8) \u00b6 Use from menu Execute->Compile F5 to generate Hello.exe DevCpp (Install / Compile / Run / Debug) (9) \u00b6 You can find the generated Hello.exe path from Compile.log as follow. Check the Output Filename Compiling project changes... -------- - Project Filename: E:\\UgurCoruh\\RTEU\\Lectures\\2021-2022 G\u00fcz CE103 - Algorithms and Programming I\\Lectures\\ce103-algorithms-and-programming-I\\Week-2\\devcpp-hello-world-apps\\Hello.dev - Compiler Name: TDM-GCC 4.9.2 64-bit Release Building makefile... -------- - Filename: E:\\UgurCoruh\\RTEU\\Lectures\\2021-2022 G\u00fcz CE103 - Algorithms and Programming I\\Lectures\\ce103-algorithms-and-programming-I\\Week-2\\devcpp-hello-world-apps\\Makefile.win Processing makefile... -------- - Makefile Processor: C:\\Program Files (x86)\\Dev-Cpp\\MinGW64\\bin\\mingw32-make.exe - Command: mingw32-make.exe -f \"E:\\UgurCoruh\\RTEU\\Lectures\\2021-2022 G\u00fcz CE103 - Algorithms and Programming I\\Lectures\\ce103-algorithms-and-programming-I\\Week-2\\devcpp-hello-world-apps\\Makefile.win\" all gcc.exe -c main.c -o main.o -I \"C:/Program Files (x86)/Dev-Cpp/MinGW64/include\" -I \"C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include\" -I \"C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include\" gcc.exe main.o -o Hello.exe -L \"C:/Program Files (x86)/Dev-Cpp/MinGW64/lib\" -L \"C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/lib\" -static-libgcc Compilation results... -------- - Errors: 0 - Warnings: 0 - Output Filename: E:\\UgurCoruh\\RTEU\\Lectures\\2021-2022 G\u00fcz CE103 - Algorithms and Programming I\\Lectures\\ce103-algorithms-and-programming-I\\Week-2\\devcpp-hello-world-apps\\Hello.exe - Output Size: 128,103515625 KiB - Compilation Time: 2,13s DevCpp (Install / Compile / Run / Debug) (10) \u00b6 Then you can run with Execute->Run F10 or Directly Compile&Run F11 DevCpp (Install / Compile / Run / Debug) (11) \u00b6 for debugging operations, just change the code and add more statements as follow #include <stdio.h> #include <stdlib.h> /* run this program using the console pauser or add your getch, system(\",pause\") or input loop */ int main ( int argc , char * argv []) { printf ( \"Hello, World! Step-1 \\n \" ); printf ( \"Hello, World! Step-2 \\n \" ); printf ( \"Hello, World! Step-3 \\n \" ); printf ( \"Hello, World! Step-4 \\n \" ); printf ( \"Hello, World! Step-5 \\n \" ); printf ( \"Hello, World! Step-6 \\n \" ); getchar (); return 0 ; } DevCpp (Install / Compile / Run / Debug) (12) \u00b6 Click on line numbers and add breakpoints for debugger. This red point will be debugger stop points DevCpp (Install / Compile / Run / Debug) (13) \u00b6 In the ,menu section select compiler with debug option DevCpp (Install / Compile / Run / Debug) (14) \u00b6 Compile application with debug setting and in Execute Section use Debug F5 to start debugging DevCpp (Install / Compile / Run / Debug) (15) \u00b6 Debugger will stop at breakpoint at the debug point (blue line) DevCpp (Install / Compile / Run / Debug) (16) \u00b6 Moving to next statement can be done via control buttons or shortcuts DevCpp (Install / Compile / Run / Debug) (17) \u00b6 Press F8 to step-by-step continue Then go to Project Options - Compiler - Linker and set Generate debugging information to \"yes\", and make sure you are not using any optimization options (they're not good for debug mode). Also check the Parameters tab, make sure you don't have any optimization options (like -O2 or -O3, but -O0 is ok because it means no optimization) or strip option (-s). DevCpp (Install / Compile / Run / Debug) (18) \u00b6 After that, do a full rebuild (Ctrl-F11), then set breakpoint(s) where you want the debugger to stop (otherwise it will just run the program). To set a breakpoint on a line, just click on the gutter (the gray band on the left), or press Ctrl-F5. DevCpp (Install / Compile / Run / Debug) (19) \u00b6 Now you are ready to launch the debugger, by pressing F8 or clicking the debug button. If everything goes well, the program will start, and then stop at the first breakpoint. Then you can step through the code, entering function calls, by pressing Shift-F7 or the \"step into\" button, or stepping over the function calls, by pressing F7 or the \"next step\" button. You can press Ctrl-F7 or the \"continue\" button to continue execution till the next breakpoint. At any time, you can add or remove breakpoints. DevCpp (Install / Compile / Run / Debug) (20) \u00b6 When the program stopped at a breakpoint and you are stepping through the code, you can display the values of various variables in your program by putting your mouse over them, or you can display variables and expressions by pressing F4 or the \"add watch\" button and typing the expression. DevCpp (Install / Compile / Run / Debug) (21) \u00b6 How do I debug using Dev-C++ Code Blocks (Install / Compile / Run / Debug) (1) \u00b6 Download Code Blocks from the following link Binary releases - Code::Blocks Code Blocks (Install / Compile / Run / Debug) (2) \u00b6 Open Code Blocks and Select File->New->Project Code Blocks (Install / Compile / Run / Debug) (3) \u00b6 Select Console Application Click Next from Opening Window Code Blocks (Install / Compile / Run / Debug) (4) \u00b6 Select C for Sample Project Code Blocks (Install / Compile / Run / Debug) (5) \u00b6 Write a project name and title also set a project folder Code Blocks (Install / Compile / Run / Debug) (6) \u00b6 Select complier for this project we selected GCC but you can select C compliers from list. Set Debug and Release executable output folders. Code Blocks (Install / Compile / Run / Debug) (7) \u00b6 After this wizard you will have the following code #include <stdio.h> #include <stdlib.h> int main () { printf ( \"Hello world! \\n \" ); return 0 ; } Code Blocks (Install / Compile / Run / Debug) (8) \u00b6 Select Debug Build from menu Code Blocks (Install / Compile / Run / Debug) (9) \u00b6 Run with Build and Run F9 Code Blocks (Install / Compile / Run / Debug) (10) \u00b6 You should see the following output Code Blocks (Install / Compile / Run / Debug) (11) \u00b6 Add the following lines to your source code for debugging #include <stdio.h> #include <stdlib.h> int main () { printf ( \"Hello world! Step-1 \\n \" ); printf ( \"Hello world! Step-2 \\n \" ); printf ( \"Hello world! Step-3 \\n \" ); printf ( \"Hello world! Step-4 \\n \" ); printf ( \"Hello world! Step-5 \\n \" ); printf ( \"Hello world! Step-6 \\n \" ); return 0 ; } Code Blocks (Install / Compile / Run / Debug) (12) \u00b6 and add break points with F5 or mouse click Code Blocks (Install / Compile / Run / Debug) (13) \u00b6 select Debug->Start/Continue to start debugger Code Blocks (Install / Compile / Run / Debug) (14) \u00b6 If you see the following error this is related with long or turkish character including path. Just move project to a shorter path and try again Setting breakpoints Debugger name and version: GNU gdb (GDB) 8.1 Starting the debuggee failed: No executable specified, use `target exec'. Debugger finished with status 0 Code Blocks (Install / Compile / Run / Debug) (15) \u00b6 You will see the following yellow pointer for debugger Code Blocks (Install / Compile / Run / Debug) (16) \u00b6 You can use the following menu or shortcuts for step-by-step debugging. GCC/G++ Complier (MinGW) / Clang-cl (LLVM) (1) \u00b6 Download and install MinGW or LLVM compiler (if you downloded then skip this step) MinGW installer (clang) Download MinGW-w64 - for 32 and 64 bit Windows from SourceForge.net LLVM installer (gcc / g++) Download LLVM releases Also use the following notes https://llvm.org/devmtg/2014-04/PDFs/Talks/clang-cl.pdf GCC/G++ Complier (MinGW) / Clang-cl (LLVM) (2) \u00b6 Open a console with \"cmd\" and test the following commands if commands are not recognized then set the system environment variable add gcc and g++ exe paths to path variable (add to both system and user path variable) gcc --version g++ --version C : \\Users\\ugur.coruh >gcc --version gcc (x86_64-win32-seh-rev0, Built by MinGW-W64 project) 8.1.0 Copyright (C) 2018 Free Software Foundation, Inc. This is free software; see the source for copying conditions. There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. clang --version GCC/G++ Complier (MinGW) / Clang-cl (LLVM) (3) \u00b6 for gcc.exe, g++.exe and gdb.exe C: \\P rogram Files \\m ingw-w64 \\x 86_64-8.1.0-win32-seh-rt_v6-rev0 \\m ingw64 \\b in for clang.exe , lldb.exe C : \\Program Files\\LLVM\\bin This folder paths changes according to your setup VSCode (Install / Compile / Run / Debug) (1) \u00b6 Download Visual Studio Code from the following link Download Visual Studio Code - Mac, Linux, Windows VSCode (Install / Compile / Run / Debug) (2) \u00b6 In this sample you will find MinGW and LLVM compiler combinations for C and C++ Create a folder and enter this folder then open this folder with vscode by right click VSCode (Install / Compile / Run / Debug) (3) \u00b6 or enter the folder via console write code . VSCode (Install / Compile / Run / Debug) (4) \u00b6 This will open vscode for current folder . dot present current folder. You will see a empty folder in the right window VSCode (Install / Compile / Run / Debug) (5) \u00b6 VSCode (Install / Compile / Run / Debug) (6) \u00b6 Create a hello.c file and write following content #include <stdio.h> int main () { // printf() displays the string inside quotation printf ( \"Hello, World!\" ); return 0 ; } VSCode (Install / Compile / Run / Debug) (7) \u00b6 use CTRL+SHIFT+B (you should be on source code section) to build file VSCode (Install / Compile / Run / Debug) (8) \u00b6 Select GCC or CLANG for this sample we can use GCC You will see output generated Hello.exe VSCode (Install / Compile / Run / Debug) (9) \u00b6 for debugging just put breakpoint and build again VSCode (Install / Compile / Run / Debug) (10) \u00b6 after build for debug press CTRL+SHIFT+D (you should be on source code section)and in the right window select create launch.json VSCode (Install / Compile / Run / Debug) (11) \u00b6 from opening window select C++ GDB/LLDB VSCode (Install / Compile / Run / Debug) (12) \u00b6 from next opening menu select mingw-w64 gcc.exe VSCode (Install / Compile / Run / Debug) (13) \u00b6 this will run debugger and you will see debug points activated VSCode (Install / Compile / Run / Debug) (14) \u00b6 then you can step-by-step debug your code. the following task.json and launch.json automatically generated with your selections VSCode (Install / Compile / Run / Debug) (15) \u00b6 launch.json { // Olas\u0131 \u00f6z n i tel ikler hakk\u0131 n da bilgi edi n mek i\u00e7i n I ntell iSe nse kulla n \u0131 n . // Mevcu t \u00f6z n i tel ikleri n a\u00e7\u0131klamalar\u0131 n \u0131 g\u00f6r\u00fc nt \u00fclemek i\u00e7i n \u00fczeri ne geli n . // Daha fa zla bilgi i\u00e7i n \u015fu adresi ziyare t edi n : h tt ps : //go.microso ft .com/ f wli n k/?li n kid= 830387 \"version\" : \"0.2.0\" , \"configurations\" : [ { \"name\" : \"gcc.exe - Etkin dosyay\u0131 derle ve dosyada hata ay\u0131kla\" , \"type\" : \"cppdbg\" , \"request\" : \"launch\" , \"program\" : \"${fileDirname}\\\\${fileBasenameNoExtension}.exe\" , \"args\" : [], \"stopAtEntry\" : false , \"cwd\" : \"${fileDirname}\" , \"environment\" : [], \"externalConsole\" : false , \"MIMode\" : \"gdb\" , \"miDebuggerPath\" : \"C:\\\\Program Files\\\\mingw-w64\\\\x86_64-8.1.0-win32-seh-rt_v6-rev0\\\\mingw64\\\\bin\\\\gdb.exe\" , \"setupCommands\" : [ { \"description\" : \"gdb i\u00e7in d\u00fczg\u00fcn yazd\u0131rmay\u0131 etkinle\u015ftir\" , \"text\" : \"-enable-pretty-printing\" , \"ignoreFailures\" : true } ], \"preLaunchTask\" : \"C/C++: gcc.exe etkin dosyay\u0131 derle\" } ] } VSCode (Install / Compile / Run / Debug) (16) \u00b6 task.json { \"tasks\" : [ { \"type\" : \"cppbuild\" , \"label\" : \"C/C++: gcc.exe etkin dosyay\u0131 derle\" , \"command\" : \"C:\\\\Program Files\\\\mingw-w64\\\\x86_64-8.1.0-win32-seh-rt_v6-rev0\\\\mingw64\\\\bin\\\\gcc.exe\" , \"args\" : [ \"-fdiagnostics-color=always\" , \"-g\" , \"${file}\" , \"-o\" , \"${fileDirname}\\\\${fileBasenameNoExtension}.exe\" ], \"options\" : { \"cwd\" : \"${fileDirname}\" }, \"problemMatcher\" : [ \"$gcc\" ], \"group\" : { \"kind\" : \"build\" , \"isDefault\" : true }, \"detail\" : \"Hata Ay\u0131klay\u0131c\u0131s\u0131 taraf\u0131ndan olu\u015fturulan g\u00f6rev.\" } ], \"version\" : \"2.0.0\" } VSCode (Install / Compile / Run / Debug) (17) \u00b6 you can do the same thing for other compilers and c++ source codes. LLVM do not support debug on vscode now. for C++ VsCode you can check the following links for Windows https://code.visualstudio.com/docs/cpp/config-mingw for Linux https://code.visualstudio.com/docs/cpp/config-linux for WSL https://code.visualstudio.com/docs/cpp/config-wsl VSCode (Install / Compile / Run / Debug) (18) \u00b6 in the launch file if you start debugging with F5 (you can select debugger with CTRL+SHIFT+P and then writing Debug and Selecting Configure Debugger Option) VSCode (Install / Compile / Run / Debug) (19) \u00b6 following line will be your debugging application path if you start debugging with F5 in Hello.c file this will set <Hello.c base path>/Hello.exe VSCode (Install / Compile / Run / Debug) (20) \u00b6 You should set this correct for both LLVM and GCC configuration in launch.json \"program\": \"${fileDirname}\\\\${fileBasenameNoExtension}.exe\", Also you should set your installed debugger paths for GCC \"miDebuggerPath\": \"C:\\\\Program Files\\\\mingw-w64\\\\x86_64-8.1.0-win32-seh-rt_v6-rev0\\\\mingw64\\\\bin\\\\gdb.exe\", for LLVM \"miDebuggerPath\": \"C:\\\\Program Files\\\\LLVM\\\\bin\\\\lldb.exe\", for more details please check the sample source codes. Visual Studio Community Edition (Install / Compile / Run / Debug) \u00b6 //TODO// Notepad++ (Install / Compile ) (1) \u00b6 Please download Notepad++ from the following link Downloads | Notepad++ Notepad++ (Install / Compile ) (2) \u00b6 Download and install MinGW or LLVM compiler (if you downloded then skip this step) MinGW installer (clang) Download MinGW-w64 - for 32 and 64 bit Windows from SourceForge.net LLVM installer (gcc / g++) Download LLVM releases Also use the following notes https://llvm.org/devmtg/2014-04/PDFs/Talks/clang-cl.pdf Notepad++ (Install / Compile ) (3) \u00b6 Open a console with \"cmd\" and test the following commands if commands are not recognized then set the system environment variable add gcc and g++ exe paths to path variable (add to both system and user path variable) gcc --version g++ --version C : \\Users\\ugur.coruh >gcc --version gcc (x86_64-win32-seh-rev0, Built by MinGW-W64 project) 8.1.0 Copyright (C) 2018 Free Software Foundation, Inc. This is free software; see the source for copying conditions. There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. Notepad++ (Install / Compile ) (4) \u00b6 Notepad++ (Install / Compile ) (5) \u00b6 Notepad++ (Install / Compile ) (6) \u00b6 Notepad++ (Install / Compile ) (7) \u00b6 Notepad++ (Install / Compile ) (8) \u00b6 Notepad++ (Install / Compile ) (9) \u00b6 Notepad++ (Install / Compile ) (10) \u00b6 for gcc.exe, g++.exe and gdb.exe C: \\P rogram Files \\m ingw-w64 \\x 86_64-8.1.0-win32-seh-rt_v6-rev0 \\m ingw64 \\b in Notepad++ (Install / Compile ) (11) \u00b6 for clang.exe , lldb.exe C : \\Program Files\\LLVM\\bin Notepad++ (Install / Compile ) (12) \u00b6 This folder paths changes according to your setup Open NppExec extension (install from extension manager if not exist) Notepad++ (Install / Compile ) (13) \u00b6 write the following commands in box NPP_SAVE // save current file cd $(CURRENT_DIRECTORY) // go to directory of the current file gcc -Wall -Wextra -Wpedantic -std=c++11 -o \"$(NAME_PART)\" \"$(FILE_NAME)\" Notepad++ (Install / Compile ) (14) \u00b6 save script as gcc-build and for more information check the following link How To Setup Notepad for Writing C++ Programs You can modify or add multiple scripts for another tasks. Vi/Vim (C/C++) \u00b6 //TODO// Eclipse (C/C++) \u00b6 //TODO// Netbeans (C/C++) \u00b6 //TODO// Turbo C++/C \u00b6 //TODO// Cmake (C++/C) (1) \u00b6 CMake ( http://www.cmake.org/ ) is a program which generates the Makefiles used by Make . Cmake (C++/C) (2) \u00b6 Why use CMake ? Eases Make use but the same way of thinking generate the Makefile Separate the compilation from the sources Multi-platfoms Very flexible Cmake (C++/C) (3) \u00b6 Check if the libraries/programs are available on your system File generator ( configure_file ) Calling programs or scripts ( doxygen ) One of the new standards Cmake (C++/C) (4) (Download and Install) \u00b6 use the following link for download Download | CMake Cmake (C++/C) (5) (WSL and Linux Environment) \u00b6 Hello world with CMake Cmake (C++/C) (6) (Windows Environment) \u00b6 main.c #include <stdio.h> int main () { char name [ 20 ]; printf ( \"Enter name: \" ); scanf ( \"%s\" , name ); printf ( \"Your name is %s.\" , name ); return 0 ; } CMakeLists.txt cmake_minimum_required ( VERSION 3.7.2 ) project ( scanf-sample ) add_executable ( scanf-sample main.c ) Cmake (C++/C) (7) (Windows Environment) \u00b6 put main.c and CMakeLists.txt file in sample-scanf folder and from command line run the following cmake command with dot (.) to create solution file for c project C : \\Users\\ugur.coruh\\Desktop\\sample-scanf >cmake . Cmake (C++/C) (8) (Windows Environment) \u00b6 I have Visual Studio 2022 Community Edition Installed on My Computer, for these reason build tools are selected for visual studio environment and the following outputs are generated C : \\Users\\ugur.coruh\\Desktop\\sample-scanf >cmake . -- Building for: Visual Studio 17 2022 -- Selecting Windows SDK version 10.0.22000.0 to target Windows 10.0.19043. -- The C compiler identification is MSVC 19.30.30704.0 -- The CXX compiler identification is MSVC 19.30.30704.0 -- Detecting C compiler ABI info -- Detecting C compiler ABI info - done -- Check for working C compiler: C:/Program Files/Microsoft Visual Studio/2022/Community/VC/Tools/MSVC/14.30.30704/bin/Hostx64/x64/cl.exe - skipped -- Detecting C compile features -- Detecting C compile features - done -- Detecting CXX compiler ABI info -- Detecting CXX compiler ABI info - done -- Check for working CXX compiler: C:/Program Files/Microsoft Visual Studio/2022/Community/VC/Tools/MSVC/14.30.30704/bin/Hostx64/x64/cl.exe - skipped -- Detecting CXX compile features -- Detecting CXX compile features - done -- Configuring done -- Generating done -- Build files have been written to: C:/Users/ugur.coruh/Desktop/sample-scanf C : \\Users\\ugur.coruh\\Desktop\\sample-scanf > Cmake (C++/C) (9) (Windows Environment) \u00b6 also following files are generated Cmake (C++/C) (10) (Windows Environment) \u00b6 if we open scanf-sample.sln file we will have automated generated project files Cmake (C++/C) (11) (Windows Environment) \u00b6 you can make scanf-sample with startup project with right click and then run on visual studio. if you want to configure for another build tool you can use Cmake-GUI installed with setup on your computer Cmake (C++/C) (12) (Windows Environment) \u00b6 Open GUI and Select File-> Delete Cache Cmake (C++/C) (13) (Windows Environment) \u00b6 then you can click \"Configure\" to select build tool Cmake (C++/C) (14) (Windows Environment) \u00b6 Cmake (C++/C) (15) (Windows Environment) \u00b6 if you click \"Configure\" twice it will generate the visual studio solution in build folder for more detailed examples that include also docker and travis-ci sample you can check the following repo GitHub - ttroy50/cmake-examples: Useful CMake Examples Make (1) \u00b6 Sample hello.c #include <stdio.h> int main ( void ) { printf ( \"hello, world \\n \" ); } Make (2) \u00b6 Makefile # This is the default target, which will be built when # you invoke make .PHONY : all all : hello # This rule tells make how to build hello from hello.cpp hello : hello . c g++ -o hello hello.c # This rule tells make to copy hello to the binaries subdirectory, # creating it if necessary .PHONY : install install : mkdir -p binaries cp -p hello binaries # This rule tells make to delete hello and hello.o .PHONY : clean clean : rm -f hello Make (3) \u00b6 compile.bat make all . will create hello.exe check hello-make sample JAVA Environment and Development \u00b6 //TODO// JDK and JRE Setup \u00b6 //TODO// System Environments and Paths for Java \u00b6 //TODO// Netbeans (Java) \u00b6 //TODO// Eclipse (Java) \u00b6 //TODO// Intellij Idea (Jet Brains) (Java) \u00b6 //TODO// VSCode (Java) \u00b6 //TODO// Notepad++ (Java) \u00b6 //TODO// Cmake (Java) \u00b6 ASTERICS_HPC C# Environment and Development \u00b6 Visual Studio Community Edition (C#) \u00b6 //TODO// Notepad++ (C#) \u00b6 //TODO// Cmake (C#) \u00b6 Outline Common Tools and Platforms \u00b6 Fatih Kalem \u00b6 https://cdnvideo.eba.gov.tr/fatihkalem/fatihkalem_portable.zip https://cdnvideo.eba.gov.tr/fatihkalem/fatihkalem_setup.exe Notepad++ (Notepad for Source Code) \u00b6 Downloads | Notepad++ HxD (Hex Editor) \u00b6 HxD - Freeware Hex Editor and Disk Editor | mh-nexus Marktext (Markdown Syntax Editor) \u00b6 https://marktext.app/ Cygwin (Linux environment for Windows) \u00b6 https://www.cygwin.com/ Dependency Walker (32-bit or 64-bit Windows module dependency checker) \u00b6 https://www.dependencywalker.com/ Doxygen (Code Documentation) \u00b6 Doxygen: Doxygen Sonarlint (Code Quality and Code Security Extension) \u00b6 https://www.sonarlint.org/ Codepen.io (online code sharing) \u00b6 https://codepen.io/ Credit Card Sample https://codepen.io/quinlo/pen/YONMEa Codeshare.io (real time code sharing) \u00b6 https://codeshare.io/ Codebeautify.org (online data conversion tools) \u00b6 https://codebeautify.org/ AsciiFlow.com (ASCII drawing tool) \u00b6 //TODO// Freemind (opensource mindmap application) \u00b6 //TODO// Wireflow (user flow designer) \u00b6 //TODO// PlantUML (software designer) \u00b6 //TODO// Drawio (drawing tool) \u00b6 //TODO// Putty (Remote Connection) \u00b6 //TODO// MobaXterm (Remote Connection) \u00b6 //TODO// Teamviewer (Remote Connection) \u00b6 //TODO// Paletton.com (Color Chooser) \u00b6 //TODO// \u00b6 Understand (Static Code Analysis) \u00b6 //TODO// JD Project (Java Decompiler) \u00b6 //TODO// Cutter (Multi-Platform Reverse Engineering Tool) \u00b6 //TODO// IDA Pro / Freeware (Native Reverse Engineering Tool) \u00b6 //TODO// Code Visualization (Python, C , C++ , Java) \u00b6 https://pythontutor.com/ //TODO// Assembly of C Code \u00b6 https://godbolt.org/ //TODO// Mobile Device Screen Sharing for Demo \u00b6 GitHub - Genymobile/scrcpy: Display and control your Android device Travis-CI \u00b6 Travis.yml //TODO// Jenkins \u00b6 //TODO// Valgrind \u00b6 //TODO// Docker \u00b6 - https://www.youtube.com/watch?v=nBwJm0onzeo&ab_channel=GaryExplains Dockerfile DockerHub Docker Compose Yaml Dockerrun.aws.json (AWS) //TODO// Nuget Packages \u00b6 //TODO// Vim for Windows \u00b6 vim/vim-wim32-installer (windows vim installer) //TODO// SCV Cryptomanager \u00b6 //TODO// Addario CryptoBench \u00b6 //TODO// Raymond's MD5 & SHA Checksum Utility \u00b6 //TODO// SlavaSoft HashCalc \u00b6 //TODO// Portable PGP \u00b6 //TODO// Online Programming Envoriments \u00b6 i. Hackerrank ii. CS50 Sandbox iii. Programiz C Online Complier //TODO//","title":"Week-2 (Development Environments)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#ce103-algorithms-and-programming-i","text":"","title":"CE103 Algorithms and Programming I"},{"location":"tr/week-2-setup/ce103-week-2-setup/#week-2","text":"","title":"Week-2"},{"location":"tr/week-2-setup/ce103-week-2-setup/#fall-semester-2021-2022","text":"Download DOC , SLIDE , PPTX","title":"Fall Semester, 2021-2022"},{"location":"tr/week-2-setup/ce103-week-2-setup/#algorithm-basics","text":"","title":"Algorithm Basics"},{"location":"tr/week-2-setup/ce103-week-2-setup/#flowgorithm","text":"http://www.flowgorithm.org/","title":"Flowgorithm"},{"location":"tr/week-2-setup/ce103-week-2-setup/#pseudocode","text":"Pseudocode - Wikipedia Pseudocode Examples How to write a Pseudo Code? - GeeksforGeeks","title":"Pseudocode"},{"location":"tr/week-2-setup/ce103-week-2-setup/#introduction-to-analysis-of-algorithms","text":"In this course we will learn how to code with several development environments and next term we will see analysis of algorithms in details. This topic is covered in the following link : CE100 Introduction to Analysis of Algorithms","title":"Introduction to Analysis of Algorithms"},{"location":"tr/week-2-setup/ce103-week-2-setup/#programming-environment-setup-and-configuration","text":"Programming life is not about only learning how to code. Mostly you need to use several code development environments and you need to learn how to use them efficiently.","title":"Programming Environment Setup and Configuration"},{"location":"tr/week-2-setup/ce103-week-2-setup/#c-c-environment-and-development","text":"","title":"C / C++ Environment and Development"},{"location":"tr/week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-1","text":"Download DevC++ IDE from following link https://www.bloodshed.net/","title":"DevCpp (Install / Compile / Run / Debug) (1)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-2","text":"Open DevC++ IDE for C Project Generation Open File->New->Project","title":"DevCpp (Install / Compile / Run / Debug) (2)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-3","text":"Select Console Application from Basic tab and with C Project Option and write a project name such as \" Hello \" then press OK Select a folder and save Hello.dev project file.","title":"DevCpp (Install / Compile / Run / Debug) (3)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-4","text":"You will see a sample main with empty body","title":"DevCpp (Install / Compile / Run / Debug) (4)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-5","text":"#include <stdio.h> #include <stdlib.h> /* run this program using the console pauser or add your own getch, s,ystem(\"pause\") or input loop */ int main ( int argc , char * argv []) { retAdd 0 ; }","title":"DevCpp (Install / Compile / Run / Debug) (5)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-6","text":"add the following line in main function. This will write \"Hello, World!\" on the screen and then wait a keypress to exit from application #include <stdio.h> #include <stdlib.h> /* run this program using the console pauser or add your own getch, system(\"pause\") or input loop */ int main ( int argc , char * argv []) { printf ( \"Hello, World!\" ); getchar (); return 0 ; }","title":"DevCpp (Install / Compile / Run / Debug) (6)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-7","text":"Then save the file","title":"DevCpp (Install / Compile / Run / Debug) (7)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-8","text":"Use from menu Execute->Compile F5 to generate Hello.exe","title":"DevCpp (Install / Compile / Run / Debug) (8)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-9","text":"You can find the generated Hello.exe path from Compile.log as follow. Check the Output Filename Compiling project changes... -------- - Project Filename: E:\\UgurCoruh\\RTEU\\Lectures\\2021-2022 G\u00fcz CE103 - Algorithms and Programming I\\Lectures\\ce103-algorithms-and-programming-I\\Week-2\\devcpp-hello-world-apps\\Hello.dev - Compiler Name: TDM-GCC 4.9.2 64-bit Release Building makefile... -------- - Filename: E:\\UgurCoruh\\RTEU\\Lectures\\2021-2022 G\u00fcz CE103 - Algorithms and Programming I\\Lectures\\ce103-algorithms-and-programming-I\\Week-2\\devcpp-hello-world-apps\\Makefile.win Processing makefile... -------- - Makefile Processor: C:\\Program Files (x86)\\Dev-Cpp\\MinGW64\\bin\\mingw32-make.exe - Command: mingw32-make.exe -f \"E:\\UgurCoruh\\RTEU\\Lectures\\2021-2022 G\u00fcz CE103 - Algorithms and Programming I\\Lectures\\ce103-algorithms-and-programming-I\\Week-2\\devcpp-hello-world-apps\\Makefile.win\" all gcc.exe -c main.c -o main.o -I \"C:/Program Files (x86)/Dev-Cpp/MinGW64/include\" -I \"C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include\" -I \"C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include\" gcc.exe main.o -o Hello.exe -L \"C:/Program Files (x86)/Dev-Cpp/MinGW64/lib\" -L \"C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/lib\" -static-libgcc Compilation results... -------- - Errors: 0 - Warnings: 0 - Output Filename: E:\\UgurCoruh\\RTEU\\Lectures\\2021-2022 G\u00fcz CE103 - Algorithms and Programming I\\Lectures\\ce103-algorithms-and-programming-I\\Week-2\\devcpp-hello-world-apps\\Hello.exe - Output Size: 128,103515625 KiB - Compilation Time: 2,13s","title":"DevCpp (Install / Compile / Run / Debug) (9)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-10","text":"Then you can run with Execute->Run F10 or Directly Compile&Run F11","title":"DevCpp (Install / Compile / Run / Debug) (10)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-11","text":"for debugging operations, just change the code and add more statements as follow #include <stdio.h> #include <stdlib.h> /* run this program using the console pauser or add your getch, system(\",pause\") or input loop */ int main ( int argc , char * argv []) { printf ( \"Hello, World! Step-1 \\n \" ); printf ( \"Hello, World! Step-2 \\n \" ); printf ( \"Hello, World! Step-3 \\n \" ); printf ( \"Hello, World! Step-4 \\n \" ); printf ( \"Hello, World! Step-5 \\n \" ); printf ( \"Hello, World! Step-6 \\n \" ); getchar (); return 0 ; }","title":"DevCpp (Install / Compile / Run / Debug) (11)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-12","text":"Click on line numbers and add breakpoints for debugger. This red point will be debugger stop points","title":"DevCpp (Install / Compile / Run / Debug) (12)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-13","text":"In the ,menu section select compiler with debug option","title":"DevCpp (Install / Compile / Run / Debug) (13)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-14","text":"Compile application with debug setting and in Execute Section use Debug F5 to start debugging","title":"DevCpp (Install / Compile / Run / Debug) (14)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-15","text":"Debugger will stop at breakpoint at the debug point (blue line)","title":"DevCpp (Install / Compile / Run / Debug) (15)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-16","text":"Moving to next statement can be done via control buttons or shortcuts","title":"DevCpp (Install / Compile / Run / Debug) (16)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-17","text":"Press F8 to step-by-step continue Then go to Project Options - Compiler - Linker and set Generate debugging information to \"yes\", and make sure you are not using any optimization options (they're not good for debug mode). Also check the Parameters tab, make sure you don't have any optimization options (like -O2 or -O3, but -O0 is ok because it means no optimization) or strip option (-s).","title":"DevCpp (Install / Compile / Run / Debug) (17)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-18","text":"After that, do a full rebuild (Ctrl-F11), then set breakpoint(s) where you want the debugger to stop (otherwise it will just run the program). To set a breakpoint on a line, just click on the gutter (the gray band on the left), or press Ctrl-F5.","title":"DevCpp (Install / Compile / Run / Debug) (18)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-19","text":"Now you are ready to launch the debugger, by pressing F8 or clicking the debug button. If everything goes well, the program will start, and then stop at the first breakpoint. Then you can step through the code, entering function calls, by pressing Shift-F7 or the \"step into\" button, or stepping over the function calls, by pressing F7 or the \"next step\" button. You can press Ctrl-F7 or the \"continue\" button to continue execution till the next breakpoint. At any time, you can add or remove breakpoints.","title":"DevCpp (Install / Compile / Run / Debug) (19)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-20","text":"When the program stopped at a breakpoint and you are stepping through the code, you can display the values of various variables in your program by putting your mouse over them, or you can display variables and expressions by pressing F4 or the \"add watch\" button and typing the expression.","title":"DevCpp (Install / Compile / Run / Debug) (20)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-21","text":"How do I debug using Dev-C++","title":"DevCpp (Install / Compile / Run / Debug) (21)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-1","text":"Download Code Blocks from the following link Binary releases - Code::Blocks","title":"Code Blocks (Install / Compile / Run / Debug) (1)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-2","text":"Open Code Blocks and Select File->New->Project","title":"Code Blocks (Install / Compile / Run / Debug) (2)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-3","text":"Select Console Application Click Next from Opening Window","title":"Code Blocks (Install / Compile / Run / Debug) (3)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-4","text":"Select C for Sample Project","title":"Code Blocks (Install / Compile / Run / Debug) (4)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-5","text":"Write a project name and title also set a project folder","title":"Code Blocks (Install / Compile / Run / Debug) (5)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-6","text":"Select complier for this project we selected GCC but you can select C compliers from list. Set Debug and Release executable output folders.","title":"Code Blocks (Install / Compile / Run / Debug) (6)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-7","text":"After this wizard you will have the following code #include <stdio.h> #include <stdlib.h> int main () { printf ( \"Hello world! \\n \" ); return 0 ; }","title":"Code Blocks (Install / Compile / Run / Debug) (7)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-8","text":"Select Debug Build from menu","title":"Code Blocks (Install / Compile / Run / Debug) (8)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-9","text":"Run with Build and Run F9","title":"Code Blocks (Install / Compile / Run / Debug) (9)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-10","text":"You should see the following output","title":"Code Blocks (Install / Compile / Run / Debug) (10)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-11","text":"Add the following lines to your source code for debugging #include <stdio.h> #include <stdlib.h> int main () { printf ( \"Hello world! Step-1 \\n \" ); printf ( \"Hello world! Step-2 \\n \" ); printf ( \"Hello world! Step-3 \\n \" ); printf ( \"Hello world! Step-4 \\n \" ); printf ( \"Hello world! Step-5 \\n \" ); printf ( \"Hello world! Step-6 \\n \" ); return 0 ; }","title":"Code Blocks (Install / Compile / Run / Debug) (11)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-12","text":"and add break points with F5 or mouse click","title":"Code Blocks (Install / Compile / Run / Debug) (12)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-13","text":"select Debug->Start/Continue to start debugger","title":"Code Blocks (Install / Compile / Run / Debug) (13)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-14","text":"If you see the following error this is related with long or turkish character including path. Just move project to a shorter path and try again Setting breakpoints Debugger name and version: GNU gdb (GDB) 8.1 Starting the debuggee failed: No executable specified, use `target exec'. Debugger finished with status 0","title":"Code Blocks (Install / Compile / Run / Debug) (14)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-15","text":"You will see the following yellow pointer for debugger","title":"Code Blocks (Install / Compile / Run / Debug) (15)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-16","text":"You can use the following menu or shortcuts for step-by-step debugging.","title":"Code Blocks (Install / Compile / Run / Debug) (16)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#gccg-complier-mingw-clang-cl-llvm-1","text":"Download and install MinGW or LLVM compiler (if you downloded then skip this step) MinGW installer (clang) Download MinGW-w64 - for 32 and 64 bit Windows from SourceForge.net LLVM installer (gcc / g++) Download LLVM releases Also use the following notes https://llvm.org/devmtg/2014-04/PDFs/Talks/clang-cl.pdf","title":"GCC/G++ Complier (MinGW) / Clang-cl (LLVM) (1)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#gccg-complier-mingw-clang-cl-llvm-2","text":"Open a console with \"cmd\" and test the following commands if commands are not recognized then set the system environment variable add gcc and g++ exe paths to path variable (add to both system and user path variable) gcc --version g++ --version C : \\Users\\ugur.coruh >gcc --version gcc (x86_64-win32-seh-rev0, Built by MinGW-W64 project) 8.1.0 Copyright (C) 2018 Free Software Foundation, Inc. This is free software; see the source for copying conditions. There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. clang --version","title":"GCC/G++ Complier (MinGW) / Clang-cl (LLVM) (2)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#gccg-complier-mingw-clang-cl-llvm-3","text":"for gcc.exe, g++.exe and gdb.exe C: \\P rogram Files \\m ingw-w64 \\x 86_64-8.1.0-win32-seh-rt_v6-rev0 \\m ingw64 \\b in for clang.exe , lldb.exe C : \\Program Files\\LLVM\\bin This folder paths changes according to your setup","title":"GCC/G++ Complier (MinGW) / Clang-cl (LLVM) (3)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-1","text":"Download Visual Studio Code from the following link Download Visual Studio Code - Mac, Linux, Windows","title":"VSCode (Install / Compile / Run / Debug) (1)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-2","text":"In this sample you will find MinGW and LLVM compiler combinations for C and C++ Create a folder and enter this folder then open this folder with vscode by right click","title":"VSCode (Install / Compile / Run / Debug) (2)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-3","text":"or enter the folder via console write code .","title":"VSCode (Install / Compile / Run / Debug) (3)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-4","text":"This will open vscode for current folder . dot present current folder. You will see a empty folder in the right window","title":"VSCode (Install / Compile / Run / Debug) (4)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-5","text":"","title":"VSCode (Install / Compile / Run / Debug) (5)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-6","text":"Create a hello.c file and write following content #include <stdio.h> int main () { // printf() displays the string inside quotation printf ( \"Hello, World!\" ); return 0 ; }","title":"VSCode (Install / Compile / Run / Debug) (6)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-7","text":"use CTRL+SHIFT+B (you should be on source code section) to build file","title":"VSCode (Install / Compile / Run / Debug) (7)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-8","text":"Select GCC or CLANG for this sample we can use GCC You will see output generated Hello.exe","title":"VSCode (Install / Compile / Run / Debug) (8)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-9","text":"for debugging just put breakpoint and build again","title":"VSCode (Install / Compile / Run / Debug) (9)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-10","text":"after build for debug press CTRL+SHIFT+D (you should be on source code section)and in the right window select create launch.json","title":"VSCode (Install / Compile / Run / Debug) (10)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-11","text":"from opening window select C++ GDB/LLDB","title":"VSCode (Install / Compile / Run / Debug) (11)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-12","text":"from next opening menu select mingw-w64 gcc.exe","title":"VSCode (Install / Compile / Run / Debug) (12)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-13","text":"this will run debugger and you will see debug points activated","title":"VSCode (Install / Compile / Run / Debug) (13)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-14","text":"then you can step-by-step debug your code. the following task.json and launch.json automatically generated with your selections","title":"VSCode (Install / Compile / Run / Debug) (14)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-15","text":"launch.json { // Olas\u0131 \u00f6z n i tel ikler hakk\u0131 n da bilgi edi n mek i\u00e7i n I ntell iSe nse kulla n \u0131 n . // Mevcu t \u00f6z n i tel ikleri n a\u00e7\u0131klamalar\u0131 n \u0131 g\u00f6r\u00fc nt \u00fclemek i\u00e7i n \u00fczeri ne geli n . // Daha fa zla bilgi i\u00e7i n \u015fu adresi ziyare t edi n : h tt ps : //go.microso ft .com/ f wli n k/?li n kid= 830387 \"version\" : \"0.2.0\" , \"configurations\" : [ { \"name\" : \"gcc.exe - Etkin dosyay\u0131 derle ve dosyada hata ay\u0131kla\" , \"type\" : \"cppdbg\" , \"request\" : \"launch\" , \"program\" : \"${fileDirname}\\\\${fileBasenameNoExtension}.exe\" , \"args\" : [], \"stopAtEntry\" : false , \"cwd\" : \"${fileDirname}\" , \"environment\" : [], \"externalConsole\" : false , \"MIMode\" : \"gdb\" , \"miDebuggerPath\" : \"C:\\\\Program Files\\\\mingw-w64\\\\x86_64-8.1.0-win32-seh-rt_v6-rev0\\\\mingw64\\\\bin\\\\gdb.exe\" , \"setupCommands\" : [ { \"description\" : \"gdb i\u00e7in d\u00fczg\u00fcn yazd\u0131rmay\u0131 etkinle\u015ftir\" , \"text\" : \"-enable-pretty-printing\" , \"ignoreFailures\" : true } ], \"preLaunchTask\" : \"C/C++: gcc.exe etkin dosyay\u0131 derle\" } ] }","title":"VSCode (Install / Compile / Run / Debug) (15)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-16","text":"task.json { \"tasks\" : [ { \"type\" : \"cppbuild\" , \"label\" : \"C/C++: gcc.exe etkin dosyay\u0131 derle\" , \"command\" : \"C:\\\\Program Files\\\\mingw-w64\\\\x86_64-8.1.0-win32-seh-rt_v6-rev0\\\\mingw64\\\\bin\\\\gcc.exe\" , \"args\" : [ \"-fdiagnostics-color=always\" , \"-g\" , \"${file}\" , \"-o\" , \"${fileDirname}\\\\${fileBasenameNoExtension}.exe\" ], \"options\" : { \"cwd\" : \"${fileDirname}\" }, \"problemMatcher\" : [ \"$gcc\" ], \"group\" : { \"kind\" : \"build\" , \"isDefault\" : true }, \"detail\" : \"Hata Ay\u0131klay\u0131c\u0131s\u0131 taraf\u0131ndan olu\u015fturulan g\u00f6rev.\" } ], \"version\" : \"2.0.0\" }","title":"VSCode (Install / Compile / Run / Debug) (16)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-17","text":"you can do the same thing for other compilers and c++ source codes. LLVM do not support debug on vscode now. for C++ VsCode you can check the following links for Windows https://code.visualstudio.com/docs/cpp/config-mingw for Linux https://code.visualstudio.com/docs/cpp/config-linux for WSL https://code.visualstudio.com/docs/cpp/config-wsl","title":"VSCode (Install / Compile / Run / Debug) (17)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-18","text":"in the launch file if you start debugging with F5 (you can select debugger with CTRL+SHIFT+P and then writing Debug and Selecting Configure Debugger Option)","title":"VSCode (Install / Compile / Run / Debug) (18)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-19","text":"following line will be your debugging application path if you start debugging with F5 in Hello.c file this will set <Hello.c base path>/Hello.exe","title":"VSCode (Install / Compile / Run / Debug) (19)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-20","text":"You should set this correct for both LLVM and GCC configuration in launch.json \"program\": \"${fileDirname}\\\\${fileBasenameNoExtension}.exe\", Also you should set your installed debugger paths for GCC \"miDebuggerPath\": \"C:\\\\Program Files\\\\mingw-w64\\\\x86_64-8.1.0-win32-seh-rt_v6-rev0\\\\mingw64\\\\bin\\\\gdb.exe\", for LLVM \"miDebuggerPath\": \"C:\\\\Program Files\\\\LLVM\\\\bin\\\\lldb.exe\", for more details please check the sample source codes.","title":"VSCode (Install / Compile / Run / Debug) (20)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#visual-studio-community-edition-install-compile-run-debug","text":"//TODO//","title":"Visual Studio Community Edition (Install / Compile / Run / Debug)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#notepad-install-compile-1","text":"Please download Notepad++ from the following link Downloads | Notepad++","title":"Notepad++ (Install / Compile ) (1)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#notepad-install-compile-2","text":"Download and install MinGW or LLVM compiler (if you downloded then skip this step) MinGW installer (clang) Download MinGW-w64 - for 32 and 64 bit Windows from SourceForge.net LLVM installer (gcc / g++) Download LLVM releases Also use the following notes https://llvm.org/devmtg/2014-04/PDFs/Talks/clang-cl.pdf","title":"Notepad++ (Install / Compile ) (2)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#notepad-install-compile-3","text":"Open a console with \"cmd\" and test the following commands if commands are not recognized then set the system environment variable add gcc and g++ exe paths to path variable (add to both system and user path variable) gcc --version g++ --version C : \\Users\\ugur.coruh >gcc --version gcc (x86_64-win32-seh-rev0, Built by MinGW-W64 project) 8.1.0 Copyright (C) 2018 Free Software Foundation, Inc. This is free software; see the source for copying conditions. There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.","title":"Notepad++ (Install / Compile ) (3)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#notepad-install-compile-4","text":"","title":"Notepad++ (Install / Compile ) (4)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#notepad-install-compile-5","text":"","title":"Notepad++ (Install / Compile ) (5)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#notepad-install-compile-6","text":"","title":"Notepad++ (Install / Compile ) (6)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#notepad-install-compile-7","text":"","title":"Notepad++ (Install / Compile ) (7)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#notepad-install-compile-8","text":"","title":"Notepad++ (Install / Compile ) (8)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#notepad-install-compile-9","text":"","title":"Notepad++ (Install / Compile ) (9)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#notepad-install-compile-10","text":"for gcc.exe, g++.exe and gdb.exe C: \\P rogram Files \\m ingw-w64 \\x 86_64-8.1.0-win32-seh-rt_v6-rev0 \\m ingw64 \\b in","title":"Notepad++ (Install / Compile ) (10)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#notepad-install-compile-11","text":"for clang.exe , lldb.exe C : \\Program Files\\LLVM\\bin","title":"Notepad++ (Install / Compile ) (11)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#notepad-install-compile-12","text":"This folder paths changes according to your setup Open NppExec extension (install from extension manager if not exist)","title":"Notepad++ (Install / Compile ) (12)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#notepad-install-compile-13","text":"write the following commands in box NPP_SAVE // save current file cd $(CURRENT_DIRECTORY) // go to directory of the current file gcc -Wall -Wextra -Wpedantic -std=c++11 -o \"$(NAME_PART)\" \"$(FILE_NAME)\"","title":"Notepad++ (Install / Compile ) (13)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#notepad-install-compile-14","text":"save script as gcc-build and for more information check the following link How To Setup Notepad for Writing C++ Programs You can modify or add multiple scripts for another tasks.","title":"Notepad++ (Install / Compile ) (14)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#vivim-cc","text":"//TODO//","title":"Vi/Vim (C/C++)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#eclipse-cc","text":"//TODO//","title":"Eclipse (C/C++)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#netbeans-cc","text":"//TODO//","title":"Netbeans (C/C++)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#turbo-cc","text":"//TODO//","title":"Turbo C++/C"},{"location":"tr/week-2-setup/ce103-week-2-setup/#cmake-cc-1","text":"CMake ( http://www.cmake.org/ ) is a program which generates the Makefiles used by Make .","title":"Cmake (C++/C) (1)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#cmake-cc-2","text":"Why use CMake ? Eases Make use but the same way of thinking generate the Makefile Separate the compilation from the sources Multi-platfoms Very flexible","title":"Cmake (C++/C) (2)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#cmake-cc-3","text":"Check if the libraries/programs are available on your system File generator ( configure_file ) Calling programs or scripts ( doxygen ) One of the new standards","title":"Cmake (C++/C) (3)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#cmake-cc-4-download-and-install","text":"use the following link for download Download | CMake","title":"Cmake (C++/C) (4) (Download and Install)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#cmake-cc-5-wsl-and-linux-environment","text":"Hello world with CMake","title":"Cmake (C++/C) (5) (WSL and Linux Environment)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#cmake-cc-6-windows-environment","text":"main.c #include <stdio.h> int main () { char name [ 20 ]; printf ( \"Enter name: \" ); scanf ( \"%s\" , name ); printf ( \"Your name is %s.\" , name ); return 0 ; } CMakeLists.txt cmake_minimum_required ( VERSION 3.7.2 ) project ( scanf-sample ) add_executable ( scanf-sample main.c )","title":"Cmake (C++/C) (6) (Windows Environment)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#cmake-cc-7-windows-environment","text":"put main.c and CMakeLists.txt file in sample-scanf folder and from command line run the following cmake command with dot (.) to create solution file for c project C : \\Users\\ugur.coruh\\Desktop\\sample-scanf >cmake .","title":"Cmake (C++/C) (7) (Windows Environment)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#cmake-cc-8-windows-environment","text":"I have Visual Studio 2022 Community Edition Installed on My Computer, for these reason build tools are selected for visual studio environment and the following outputs are generated C : \\Users\\ugur.coruh\\Desktop\\sample-scanf >cmake . -- Building for: Visual Studio 17 2022 -- Selecting Windows SDK version 10.0.22000.0 to target Windows 10.0.19043. -- The C compiler identification is MSVC 19.30.30704.0 -- The CXX compiler identification is MSVC 19.30.30704.0 -- Detecting C compiler ABI info -- Detecting C compiler ABI info - done -- Check for working C compiler: C:/Program Files/Microsoft Visual Studio/2022/Community/VC/Tools/MSVC/14.30.30704/bin/Hostx64/x64/cl.exe - skipped -- Detecting C compile features -- Detecting C compile features - done -- Detecting CXX compiler ABI info -- Detecting CXX compiler ABI info - done -- Check for working CXX compiler: C:/Program Files/Microsoft Visual Studio/2022/Community/VC/Tools/MSVC/14.30.30704/bin/Hostx64/x64/cl.exe - skipped -- Detecting CXX compile features -- Detecting CXX compile features - done -- Configuring done -- Generating done -- Build files have been written to: C:/Users/ugur.coruh/Desktop/sample-scanf C : \\Users\\ugur.coruh\\Desktop\\sample-scanf >","title":"Cmake (C++/C) (8) (Windows Environment)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#cmake-cc-9-windows-environment","text":"also following files are generated","title":"Cmake (C++/C) (9) (Windows Environment)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#cmake-cc-10-windows-environment","text":"if we open scanf-sample.sln file we will have automated generated project files","title":"Cmake (C++/C) (10) (Windows Environment)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#cmake-cc-11-windows-environment","text":"you can make scanf-sample with startup project with right click and then run on visual studio. if you want to configure for another build tool you can use Cmake-GUI installed with setup on your computer","title":"Cmake (C++/C) (11) (Windows Environment)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#cmake-cc-12-windows-environment","text":"Open GUI and Select File-> Delete Cache","title":"Cmake (C++/C) (12) (Windows Environment)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#cmake-cc-13-windows-environment","text":"then you can click \"Configure\" to select build tool","title":"Cmake (C++/C) (13) (Windows Environment)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#cmake-cc-14-windows-environment","text":"","title":"Cmake (C++/C) (14) (Windows Environment)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#cmake-cc-15-windows-environment","text":"if you click \"Configure\" twice it will generate the visual studio solution in build folder for more detailed examples that include also docker and travis-ci sample you can check the following repo GitHub - ttroy50/cmake-examples: Useful CMake Examples","title":"Cmake (C++/C) (15) (Windows Environment)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#make-1","text":"Sample hello.c #include <stdio.h> int main ( void ) { printf ( \"hello, world \\n \" ); }","title":"Make (1)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#make-2","text":"Makefile # This is the default target, which will be built when # you invoke make .PHONY : all all : hello # This rule tells make how to build hello from hello.cpp hello : hello . c g++ -o hello hello.c # This rule tells make to copy hello to the binaries subdirectory, # creating it if necessary .PHONY : install install : mkdir -p binaries cp -p hello binaries # This rule tells make to delete hello and hello.o .PHONY : clean clean : rm -f hello","title":"Make (2)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#make-3","text":"compile.bat make all . will create hello.exe check hello-make sample","title":"Make (3)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#java-environment-and-development","text":"//TODO//","title":"JAVA Environment and Development"},{"location":"tr/week-2-setup/ce103-week-2-setup/#jdk-and-jre-setup","text":"//TODO//","title":"JDK and JRE Setup"},{"location":"tr/week-2-setup/ce103-week-2-setup/#system-environments-and-paths-for-java","text":"//TODO//","title":"System Environments and Paths for Java"},{"location":"tr/week-2-setup/ce103-week-2-setup/#netbeans-java","text":"//TODO//","title":"Netbeans (Java)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#eclipse-java","text":"//TODO//","title":"Eclipse (Java)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#intellij-idea-jet-brains-java","text":"//TODO//","title":"Intellij Idea (Jet Brains) (Java)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#vscode-java","text":"//TODO//","title":"VSCode (Java)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#notepad-java","text":"//TODO//","title":"Notepad++ (Java)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#cmake-java","text":"ASTERICS_HPC","title":"Cmake (Java)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#c-environment-and-development","text":"","title":"C# Environment and Development"},{"location":"tr/week-2-setup/ce103-week-2-setup/#visual-studio-community-edition-c","text":"//TODO//","title":"Visual Studio Community Edition (C#)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#notepad-c","text":"//TODO//","title":"Notepad++ (C#)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#cmake-c","text":"Outline","title":"Cmake (C#)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#common-tools-and-platforms","text":"","title":"Common Tools and Platforms"},{"location":"tr/week-2-setup/ce103-week-2-setup/#fatih-kalem","text":"https://cdnvideo.eba.gov.tr/fatihkalem/fatihkalem_portable.zip https://cdnvideo.eba.gov.tr/fatihkalem/fatihkalem_setup.exe","title":"Fatih Kalem"},{"location":"tr/week-2-setup/ce103-week-2-setup/#notepad-notepad-for-source-code","text":"Downloads | Notepad++","title":"Notepad++ (Notepad for Source Code)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#hxd-hex-editor","text":"HxD - Freeware Hex Editor and Disk Editor | mh-nexus","title":"HxD (Hex Editor)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#marktext-markdown-syntax-editor","text":"https://marktext.app/","title":"Marktext (Markdown Syntax Editor)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#cygwin-linux-environment-for-windows","text":"https://www.cygwin.com/","title":"Cygwin (Linux environment for Windows)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#dependency-walker-32-bit-or-64-bit-windows-module-dependency-checker","text":"https://www.dependencywalker.com/","title":"Dependency Walker (32-bit or 64-bit Windows module dependency checker)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#doxygen-code-documentation","text":"Doxygen: Doxygen","title":"Doxygen (Code Documentation)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#sonarlint-code-quality-and-code-security-extension","text":"https://www.sonarlint.org/","title":"Sonarlint (Code Quality and Code Security Extension)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#codepenio-online-code-sharing","text":"https://codepen.io/ Credit Card Sample https://codepen.io/quinlo/pen/YONMEa","title":"Codepen.io (online code sharing)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#codeshareio-real-time-code-sharing","text":"https://codeshare.io/","title":"Codeshare.io (real time code sharing)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#codebeautifyorg-online-data-conversion-tools","text":"https://codebeautify.org/","title":"Codebeautify.org (online data conversion tools)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#asciiflowcom-ascii-drawing-tool","text":"//TODO//","title":"AsciiFlow.com (ASCII drawing tool)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#freemind-opensource-mindmap-application","text":"//TODO//","title":"Freemind (opensource mindmap application)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#wireflow-user-flow-designer","text":"//TODO//","title":"Wireflow (user flow designer)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#plantuml-software-designer","text":"//TODO//","title":"PlantUML (software designer)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#drawio-drawing-tool","text":"//TODO//","title":"Drawio (drawing tool)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#putty-remote-connection","text":"//TODO//","title":"Putty (Remote Connection)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#mobaxterm-remote-connection","text":"//TODO//","title":"MobaXterm (Remote Connection)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#teamviewer-remote-connection","text":"//TODO//","title":"Teamviewer (Remote Connection)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#palettoncom-color-chooser","text":"//TODO//","title":"Paletton.com (Color Chooser)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#_1","text":"","title":""},{"location":"tr/week-2-setup/ce103-week-2-setup/#understand-static-code-analysis","text":"//TODO//","title":"Understand (Static Code Analysis)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#jd-project-java-decompiler","text":"//TODO//","title":"JD Project (Java Decompiler)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#cutter-multi-platform-reverse-engineering-tool","text":"//TODO//","title":"Cutter (Multi-Platform Reverse Engineering Tool)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#ida-pro-freeware-native-reverse-engineering-tool","text":"//TODO//","title":"IDA Pro / Freeware (Native Reverse Engineering Tool)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#code-visualization-python-c-c-java","text":"https://pythontutor.com/ //TODO//","title":"Code Visualization (Python, C , C++ , Java)"},{"location":"tr/week-2-setup/ce103-week-2-setup/#assembly-of-c-code","text":"https://godbolt.org/ //TODO//","title":"Assembly of C Code"},{"location":"tr/week-2-setup/ce103-week-2-setup/#mobile-device-screen-sharing-for-demo","text":"GitHub - Genymobile/scrcpy: Display and control your Android device","title":"Mobile Device Screen Sharing for Demo"},{"location":"tr/week-2-setup/ce103-week-2-setup/#travis-ci","text":"Travis.yml //TODO//","title":"Travis-CI"},{"location":"tr/week-2-setup/ce103-week-2-setup/#jenkins","text":"//TODO//","title":"Jenkins"},{"location":"tr/week-2-setup/ce103-week-2-setup/#valgrind","text":"//TODO//","title":"Valgrind"},{"location":"tr/week-2-setup/ce103-week-2-setup/#docker","text":"- https://www.youtube.com/watch?v=nBwJm0onzeo&ab_channel=GaryExplains Dockerfile DockerHub Docker Compose Yaml Dockerrun.aws.json (AWS) //TODO//","title":"Docker"},{"location":"tr/week-2-setup/ce103-week-2-setup/#nuget-packages","text":"//TODO//","title":"Nuget Packages"},{"location":"tr/week-2-setup/ce103-week-2-setup/#vim-for-windows","text":"vim/vim-wim32-installer (windows vim installer) //TODO//","title":"Vim for Windows"},{"location":"tr/week-2-setup/ce103-week-2-setup/#scv-cryptomanager","text":"//TODO//","title":"SCV Cryptomanager"},{"location":"tr/week-2-setup/ce103-week-2-setup/#addario-cryptobench","text":"//TODO//","title":"Addario CryptoBench"},{"location":"tr/week-2-setup/ce103-week-2-setup/#raymonds-md5-sha-checksum-utility","text":"//TODO//","title":"Raymond's MD5 &amp; SHA Checksum Utility"},{"location":"tr/week-2-setup/ce103-week-2-setup/#slavasoft-hashcalc","text":"//TODO//","title":"SlavaSoft HashCalc"},{"location":"tr/week-2-setup/ce103-week-2-setup/#portable-pgp","text":"//TODO//","title":"Portable PGP"},{"location":"tr/week-2-setup/ce103-week-2-setup/#online-programming-envoriments","text":"i. Hackerrank ii. CS50 Sandbox iii. Programiz C Online Complier //TODO//","title":"Online Programming Envoriments"},{"location":"tr/week-2-setup/sources/llvm-clang-hello-world-apps/","text":"String Literals, Character Encodings, and Multiplatform C++ | PSPDFKit","title":"Index"},{"location":"tr/week-2-setup/sources/mingw-gcc-hello-world-apps/","text":"MinGW-w64 - for 32 and 64 bit Windows / Wiki2 / Unicode apps","title":"Index"},{"location":"tr/week-2-setup/sources/npp-gcc-hello-world-apps/","text":"How To Setup Notepad for Writing C++ Programs","title":"Index"},{"location":"tr/week-3-git/ce103-week-3-git/","text":"CE103 Algorithms and Programming I \u00b6 Week-3 \u00b6 Fall Semester, 2021-2022 \u00b6 Download DOC , SLIDE , PPTX Introduction to Source Code Management Systems \u00b6 Git, Github, Gitlab, Bitbucket, Maven, SVN, TFS \u00b6 Source code management (SCM) is used to track modifications to a source code repository. SCM tracks a running history of changes to a code base and helps resolve conflicts when merging updates from multiple contributors. SCM is also synonymous with Version control. As software projects grow in lines of code and contributor head count, the costs of communication overhead and management complexity also grow. SCM is a critical tool to alleviate the organizational strain of growing development costs. Features of Source Code Management Systems \u00b6 Authenticated access for commits Revision history on files Atomic commits of multiple files Versioning/Tagging Why Do We Need Source Code Management Systems? (1) \u00b6 We can save the file with a different name if it\u2019s our school project or one-time papers but for a well-equipped software development? Not a chance. Why Do We Need Source Code Management Systems? (2) \u00b6 Big projects need a version control system to track the changes and avoid misunderstanding. A good SCM does the following: Backup and Restore Synchronization Short-Term Undo Long-Term Undo Track Changes Ownership Branching and Merging Why Do We Need Source Code Management Systems? (3) \u00b6 Backup and Restore \u2013 Files can be saved at any moment and can be restored from the last saved. Why Do We Need Source Code Management Systems? (4) \u00b6 Synchronization \u2013 Programmers can get the latest code and fetch the up-to-date codes from the repository. Why Do We Need Source Code Management Systems? (5) \u00b6 Short-Term Undo \u2013 Working with a file and messed it up. We can do a short-term undo to the last known version. Why Do We Need Source Code Management Systems? (6) \u00b6 Long-Term Undo \u2013 It helps when we have to make a release version rollback. Something like going to the last version which was created a year Why Do We Need Source Code Management Systems? (7) \u00b6 Track Changes \u2013 We can track the changes as when anyone is making any change, he can leave a commit message as for why the change was done. Why Do We Need Source Code Management Systems? (8) \u00b6 Ownership \u2013 With every commit made to the master branch, it will ask the owner permission to merge it. Why Do We Need Source Code Management Systems? (9) \u00b6 Branching and Merging \u2013 You can create a branch of your source code and create the changes. Once the changes are approved, you can merge it with the master branch. Why Do We Need Source Code Management Systems? (10) \u00b6 Types of Version Control Systems \u00b6 Centralized Version Control (TFS, Subversion) Distributed Version Control (Git and Mercurial) Centralized Version Control (TFS, Subversion) (1) \u00b6 The main concept of Centralized Version Control is that it works in a client and server relationship. The repository is located in one place and allows access to multiple clients. Centralized Version Control (TFS, Subversion) (2) \u00b6 Centralized Version Control (TFS, Subversion) (3) \u00b6 Centralized Version Control (TFS, Subversion) (4) \u00b6 It\u2019s very similar to FTP where you have FTP clients which connect to FTP server. Here all the user changes and commits have to pass through the central server. For Ex: Subversion. Centralized Version Control (TFS, Subversion) (5) \u00b6 The benefits of centralized version control are: It\u2019s easy to understand. There are more GUI and IDE clients. You have more control over the users and access. Centralized Version Control (TFS, Subversion) (6) \u00b6 We do have drawbacks also: It is dependent on the access to the server. It can be slower because every command from the client has to pass the server. Branching and merging strategies are difficult to use. Distributed Version Control (Git and Mercurial) (1) \u00b6 These systems are newer to use. In Distributed Version Control, each user has their own copy of the entire repository as well as the files and history. For Ex: Git and Mercurial Distributed Version Control (Git and Mercurial) (2) \u00b6 Distributed Version Control (Git and Mercurial) (3) \u00b6 Distributed Version Control (Git and Mercurial) (4) \u00b6 The benefits of distributed version control are: More powerful and easy change tracking. No need of a centralized server. Most of the functionalities work in offline mode also apart from sharing the repositories. Branching and Merging strategies are more easy and reliable. It\u2019s faster than the other one. List of Source Code Version Management Tools (1) \u00b6 List of Source Code Version Management Tools (2) \u00b6 Github GitLab BitBucket SourceForge Beanstalk List of Source Code Version Management Tools (3) \u00b6 Apache Allura AWS CodeCommit Launchpad Phabricator GitBucket GIT (Distributed Source Code Management) (1) \u00b6 GIT (Distributed Source Code Management) (2) \u00b6 GIT (Distributed Source Code Management) (3) \u00b6 GIT (Distributed Source Code Management) (4) \u00b6 GIT (Distributed Source Code Management) (5) \u00b6 A Basic Overview of How Git Works (1) \u00b6 Create a \u201crepository\u201d (project) with a git hosting tool (like Bitbucket) Copy (or clone) the repository to your local machine Add a file to your local repo and \u201ccommit\u201d (save) the changes \u201cPush\u201d your changes to your master branch GIT (Distributed Source Code Management) (6) \u00b6 A Basic Overview of How Git Works (2) \u00b6 Make a change to your file with a git hosting tool and commit \u201cPull\u201d the changes to your local machine Create a \u201cbranch\u201d (version), make a change, commit the change Open a \u201cpull request\u201d. \u201cMerge\u201d your branch to the master branch GIT (Distributed Source Code Management) (7) \u00b6 Some of The Basic Operations in GIT are \u00b6 Initialize Add Commit Pull Push GIT (Distributed Source Code Management) (8) \u00b6 Some of The Basic Operations in GIT are \u00b6 GIT (Distributed Source Code Management) (9) \u00b6 Some of The Basic Operations in GIT are \u00b6 Branching Merging Rebasing GIT (Distributed Source Code Management) (10) \u00b6 Some of The Basic Operations in GIT are \u00b6 GIT (Distributed Source Code Management) (8) \u00b6 A brief idea about how these operations work with the Git repositories (1) \u00b6 GIT (Distributed Source Code Management) (9) \u00b6 A brief idea about how these operations work with the Git repositories (2) \u00b6 GIT (Distributed Source Code Management) (10) \u00b6 A brief idea about how these operations work with the Git repositories (3) \u00b6 For more detailed cheetsheat please check the following interactive map NDP Software :: Git Cheatsheet Installation of GIT (1) \u00b6 Check Installation Already Completed git --version Installation of GIT (2) \u00b6 If your console gives error about git command follow the steps in the link Install Git | Atlassian Git Tutorial In this link you will should download following setup according to your operating system Installation of GIT (3) \u00b6 GIT Setup Files \u00b6 Download git for OSX Download git for Windows Download git for Linux Installation of GIT (4) \u00b6 Download and install GIT from the following links (both have same github release path) Git - Downloads Installation of GIT (5) \u00b6 After running setup follow the steps below Installation of GIT (6) \u00b6 Installation of GIT (7) \u00b6 Installation of GIT (8) \u00b6 Installation of GIT (9) \u00b6 Installation of GIT (10) \u00b6 Installation of GIT Extension (Windows) (1) \u00b6 You can install Git GUI from https://git-scm.com/downloads/guis I prefer to use git extension https://gitextensions.github.io/ and https://tortoisegit.org/ Also Download KDiff3 KDiff3 - Browse Files at SourceForge.net These extensions provide GUI for git operations to make process easier. Configuration of GIT Extension (Windows) (1) \u00b6 Configuration of GIT Extension (Windows) (2) \u00b6 If you install git everything should be green and this configuration is stored on .gitconfig on your home C:/Windows/Users/<user>/.gitconfig Configuration of GIT Extension (Windows) (3) \u00b6 [core] editor = \\ \"C:/Program Files (x86)/GitExtensions/GitExtensions.exe\\\" fileeditor autocrlf = true quotePath = false commitGraph = true longpaths = true [user] email = xxxxxxx@gmail.com name = xxxx xxxxxx [filter \"lfs\" ] clean = git-lfs clean -- %f smudge = git-lfs smudge -- %f process = git-lfs filter-process required = true [pull] rebase = false [fetch] prune = false [rebase] autoStash = false [credential] helper = manager [diff] guitool = kdiff3 [difftool \"kdiff3\" ] path = C:/Program Files/KDiff3/kdiff3.exe cmd = \\ \"C:/Program Files/KDiff3/kdiff3.exe\\\" \\ \"$LOCAL\\\" \\ \"$REMOTE\\\" [merge] guitool = tortoisemerge [mergetool \"tortoisemerge\" ] path = C:/Program Files/TortoiseGit/bin/TortoiseGitMerge.exe cmd = \\ \"C:/Program Files/TortoiseGit/bin/TortoiseGitMerge.exe\\\" -base:\\ \"$BASE\\\" -mine:\\ \"$LOCAL\\\" -theirs:\\ \"$REMOTE\\\" -merged:\\ \"$MERGED\\\" [receive] advertisePushOptions = true [gc] writeCommitGraph = true Configuration of GIT Extension (Windows) (4) \u00b6 Also in extension you can see similar settings Configuration of GIT Extension (Windows) (5) \u00b6 Samples MergeTool tortoisemerge Path to mergetool C:/Program Files/TortoiseGit/bin/TortoiseGitMerge.exe Mergetool command \"C:/Program Files/TortoiseGit/bin/TortoiseGitMerge.exe\" -base:\"$BASE\" -mine:\"$LOCAL\" -theirs:\"$REMOTE\" -merged:\"$MERGED\" Configuration of GIT Extension (Windows) (6) \u00b6 Difftool kdiff3 Path to difftool C:/Program Files/KDiff3/kdiff3.exe Difftool command \"C:/Program Files/KDiff3/kdiff3.exe\" \"$LOCAL\" \"$REMOTE\" Configuration of GIT Extension (Windows) (7) \u00b6 If you see something as merge and diff tool is not configured, follow the similar settings above on your computer. If you installed kdiff3, tortoisegit and extension you will have same diff and merge tools This topic also help you Git: How can I configure KDiff3 as a merge tool and diff tool? - Stack Overflow Configuration of GIT Extension (Windows) (8) \u00b6 Configuration of GIT Extension (Windows) (9) \u00b6 Open Git->Config, in your settings you will see path to mergetool and difftool will be empty fill settings like that below find executables in your computer and copy paths to here. Configuration of GIT Extension (Windows) (10) \u00b6 Configuration of GIT Extension (Windows) (11) \u00b6 Also if we want to change and use different diff and merge tool then we can do this with gitbash console as below C : \\Program Files\\TortoiseGit\\bin Find TortoiseGitIDiff.exe and TortoiseGitMerge.exe Configuration of GIT Extension (Windows) (12) \u00b6 Copy path of this applications C : \\Program Files\\TortoiseGit\\bin\\TortoiseGitMerge.exe C : \\Program Files\\TortoiseGit\\bin\\TortoiseGitIDiff.exe Configuration of GIT Extension (Windows) (13) \u00b6 open a gitbash console and run following commands git config --global merge.tool TortoiseGitMerge git config --global mergetool.TortoiseGitMerge.path \"C:/Program Files/TortoiseGit/bin/TortoiseGitMerge.exe\" git config --global mergetool.TortoiseGitMerge.trustExitCode false git config --global diff.guitool TortoiseGitIDiff git config --global difftool.TortoiseGitIDiff.path \"C:/Program Files/TortoiseGit/bin/TortoiseGitIDiff.exe\" git config --global difftool.TortoiseGitIDiff.trustExitCode false This updates will be stored on .gitconfig Using the GIT Extension (1) \u00b6 right click in the git folder and use Git Extension menu for operations. for sample commit click \"Commit\" Using the GIT Extension (1) \u00b6 from opening window first stage related files and then write a good commit message finally click commit to local. You can also commit&push it to remote repository. GIT Installation Completed.. \u00b6 Installation of gig (git ignore creator) (1) \u00b6 Requirements Python >= 3.6 Internet connection https://github.com/sloria/gig pip install -U gig Installation of gig (git ignore creator) (2) \u00b6 Installation of gig (git ignore creator) (3) \u00b6 gig --version Usage of gig (1) \u00b6 List all gitignore templates gig list gig list -global Usage of gig (2) \u00b6 Sample gitignore for C Java and Visual Studio gig C Java VisualStudio > .gitignore Usage of gig (3) \u00b6 There is a portal for this also by Toptal \u2022 gitignore.io - Create Useful .gitignore Files For Your Project Usage of gig (4) \u00b6 for samples you can check the following links. https://github.com/github/gitignore https://dev.to/shihanng/gig-a-gitignore-generator-opc Configuration of GIT (1) \u00b6 It is important to configure your Git because any commits that you make are associated with your configuration details. configuring Git with your username and email. In order to do that, type the following commands in your Git Bash: git config - - global user.name \"<your name>\" git config - - global user.email \"<your email>\" Configuration of GIT (2) \u00b6 Configuration of GIT (3) \u00b6 git configuration files are located on the user folder Configuration of GIT (4) \u00b6 If you want to view all your configuration details, use the command below git config --list Using .gitignore files with git-extension (1) \u00b6 with gitignore file Using .gitignore files with git-extension (2) \u00b6 without gitignore file (just move to another location) Github Create Repo \u00b6 Initilization of Repo (not existing in github) \u00b6 git init \u00b6 In order to do that, we use the command git init . git init creates an empty Git repository or re-initializes an existing one. It basically creates a .git directory with sub directories and template files. Running a git init in an existing repository will not overwrite things that are already there. It rather picks up the newly added templates. git init git init \u00b6 Adding Initiated Repo Remote Upstream Repo (Link with Github Repo) (1) \u00b6 If you enter following command in the git folder you will see nothing git remote -v That mean this repository do not have a remote upstream repository such as a github or bitbucket repo. Adding Initiated Repo Remote Upstream Repo (Link with Github Repo) (2) \u00b6 Open the github and bitbucket repository and copy project path from Adding Initiated Repo Remote Upstream Repo (Link with Github Repo) (3) \u00b6 you will see the following sample from github code button https://github.com/ucoruh/ce103-sample-text.git Adding Initiated Repo Remote Upstream Repo (Link with Github Repo) (4) \u00b6 copy link and use with following command git remote add origin https://github.com/ucoruh/ce103-sample-text.git Adding Initiated Repo Remote Upstream Repo (Link with Github Repo) (5) \u00b6 then you can check your remote setting with $ git remote -v origin https://github.com/ucoruh/ce103-sample-text.git (fetch) origin https://github.com/ucoruh/ce103-sample-text.git (push) Adding Initiated Repo Remote Upstream Repo (Link with Github Repo) (6) \u00b6 you can check the following sample How to Add a New Remote to your Git Repo | Assembla Help Center Now you can push your local changes to remote repository \u00b6 If you see a repository on Github then you can download with following operation \u00b6 Checkout a Repository (1) \u00b6 create a working copy of a local repository by running the command git clone /path/to/repository Checkout a Repository (2) \u00b6 Sample clone command git clone https://github.com/ucoruh/ce103-sample-text.git Checkout a Repository (3) \u00b6 when using a remote server, your command will be git clone username@host:/path/to/repository Checking Repository Status (1) \u00b6 git status \u00b6 The git status command lists all the modified files which are ready to be added to the local repository. git status Checking Repository Status (2) \u00b6 git status \u00b6 Adding Files to Index (1) \u00b6 git add \u00b6 This command updates the index using the current content found in the working tree and then prepares the content in the staging area for the next commit. git add < directory> git add < file> git add * Adding Files to Index (1) \u00b6 git add \u00b6 Created two more files edureka3.txt and edureka4.txt. Let us add the files using the command git add -A. This command will add all the files to the index which are in the directory but not updated in the index yet. Commit Changes (1) \u00b6 git commit \u00b6 \u2022It refers to recording snapshots of the repository at a given time. Committed snapshots will never change unless done explicitly. Commit Changes (2) \u00b6 git commit \u00b6 Let me explain how commit works with the diagram below Here, C1 is the initial commit, i.e. the snapshot of the first change from which another snapshot is created with changes named C2. Note that the master points to the latest commit. Now, when I commit again, another snapshot C3 is created and now the master points to C3 instead of C2. Commit Changes (3) \u00b6 git commit \u00b6 Commands: git commit -m \"<message>\" Now, if you want to commit a snapshot of all the changes in the working directory at once, you can use the command below Commit Changes (4) \u00b6 git commit \u00b6 Please check writing good commit messages article below How to write a good commit message - DEV Community Writing Good Commit Messages (1) \u00b6 type: subject body (optional) footer (optional) Writing Good Commit Messages (2) \u00b6 1. Type \u00b6 feat - a new feature fix - a bug fix docs - changes in documentation style - everything related to styling refactor - code changes that neither fixes a bug or adds a feature test - everything related to testing chore - updating build tasks, package manager configs, etc Writing Good Commit Messages (3) \u00b6 2. Subject \u00b6 This contains a short description of the changes made. It shouldn't be greater than 50 characters, should begin with a capital letter and written in the imperative eg. Add instead of Added or Adds. Writing Good Commit Messages (4) \u00b6 3. Body \u00b6 The body is used to explain what changes you made and why you made them. Not all commits are complex enough that they need a body, especially if you are working on a personal project alone, and as such writing a body is optional. A blank line between the body and the subject is required and each line should have no more than 72 characters. Writing Good Commit Messages (5) \u00b6 4.Footer \u00b6 The footer is also optional and mainly used when you are using an issue tracker to reference the issue ID. Writing Good Commit Messages (6) \u00b6 Example Commit Message \u00b6 feat: Summarize changes in around 50 characters or less More detailed explanatory text, if necessary. Wrap it to about 72 characters or so. In some contexts, the first line is treated as the subject of the commit and the rest of the text as the body. The blank line separating the summary from the body is critical (unless you omit the body entirely); various tools like `log`, `shortlog` and `rebase` can get confused if you run the two together. Explain the problem that this commit is solving. Focus on why you are making this change as opposed to how (the code explains that). Are there side effects or other unintuitive consequences of this change? Here's the place to explain them. Further paragraphs come after blank lines. - Bullet points are okay, too - Typically a hyphen or asterisk is used for the bullet, preceded by a single space, with blank lines in between, but conventions vary here If you use an issue tracker, put references to them at the bottom, like this: Resolves: #123 See also: #456, #789 Writing Good Commit Messages (7) \u00b6 git commit -a Add Files to Index (1) \u00b6 I have created two more text files in my working directory viz. edureka5.txt and edureka6.txt but they are not added to the index yet. I am adding edureka5.txt using the command git add edureka5.txt Add Files to Index (2) \u00b6 Add Files to Index (3) \u00b6 I have added edureka5.txt to the index explicitly but not edureka6.txt and made changes in the previous files. I want to commit all changes in the directory at once. Add Files to Index (4) \u00b6 This command will commit a snapshot of all changes in the working directory but only includes modifications to tracked files i.e. the files that have been added with git add at some point in their history. Hence, edureka6.txt was not committed because it was not added to the index yet. But changes in all previous files present in the repository were committed, i.e. edureka1.txt, edureka2.txt, edureka3.txt, edureka4.txt and edureka5.txt. Now I have made my desired commits in my local repository Add Files to Index (5) \u00b6 your local repository consists of three \"trees\" maintained by git. the first one is your Working Directory which holds the actual files. the second one is the Index which acts as a staging area and finally the HEAD which points to the last commit you've made Add Files to Index (6) \u00b6 Update local repo before sending (1) \u00b6 Fetching \u00b6 If we have a remote Git branch, for example a branch on Github, it can happen that the remote branch has commits that the current branch doesn't have! Maybe another branch got merged, your colleague pushed a quick fix, and so on. Update local repo before sending (2) \u00b6 Fetching \u00b6 We can get these changes locally, by performing a git fetch on the remote branch! It doesn't affect your local branch in any way: a fetch simply downloads new data. Update local repo before sending (3) \u00b6 Fetching \u00b6 Update local repo before sending (4) \u00b6 Fetching \u00b6 We can now see all the changes that have been made since we last pushed! We can decide what we want to do with the new data now that we have it locally. Update local repo before sending (5) \u00b6 Pulling \u00b6 Although a git fetch is very useful in order to get the remote information of a branch, we can also perform a git pull . A git pull is actually two commands in one: a git fetch , and a git merge . When we're pulling changes from the origin, we're first fetching all the data like we did with a git fetch , after which the latest changes are automatically merged into the local branch Update local repo before sending (6) \u00b6 Pulling \u00b6 Update local repo before sending (7) \u00b6 Pulling \u00b6 Awesome, we're now perfectly in sync with the remote branch and have all the latest changes! Update local repo before sending (8) \u00b6 Pulling \u00b6 git pull \u00b6 Note that before you affect changes to the central repository you should always pull changes from the central repository to your local repository to get updated with the work of all the collaborators that have been contributing in the central repository. For that we will use the pull command. Update local repo before sending (9) \u00b6 Pulling \u00b6 git pull \u00b6 But first, you need to set your central repository as origin using the command git remote add origin < link of your central repository> Update local repo before sending (10) \u00b6 Pulling / git pull \u00b6 Now that my origin is set Update local repo before sending (11) \u00b6 Pulling / git pull \u00b6 let us extract files from the origin using pull. For that use the command git pull origin master Update local repo before sending (12) \u00b6 Pulling / git pull \u00b6 This command will copy all the files from the master branch of remote repository to your local repository. Update local repo before sending (13) \u00b6 Pulling / git pull \u00b6 Since my local repository was already updated with files from master branch, hence the message is Already up-to-date. Refer to the screen shot above Update local repo before sending (14) \u00b6 Pulling / git pull \u00b6 One can also try pulling files from a different branch using the following command: git pull origin < branch-name> Update local repo before sending (15) \u00b6 Pulling / git pull \u00b6 Your local Git repository is now updated with all the recent changes. It is time you make changes in the central repository by using the push command. Send Changes to Remote Repo (1) \u00b6 git push \u00b6 This command transfers commits from your local repository to your remote repository. It is the opposite of pull operation. Send Changes to Remote Repo (2) \u00b6 git push \u00b6 Pulling imports commits to local repositories whereas pushing exports commits to the remote repositories Send Changes to Remote Repo (3) \u00b6 git push \u00b6 The use of git push is to publish your local changes to a central repository. After you\u2019ve accumulated several local commits and are ready to share them with the rest of the team, Send Changes to Remote Repo (4) \u00b6 git push \u00b6 you can then push them to the central repository by using the following command git push < remote> Send Changes to Remote Repo (5) \u00b6 git push \u00b6 This remote refers to the remote repository which had been set before using the pull command. Send Changes to Remote Repo (6) \u00b6 git push \u00b6 This pushes the changes from the local repository to the remote repository along with all the necessary commits and internal objects. This creates a local branch in the destination repository Send Changes to Remote Repo (7) \u00b6 git push \u00b6 The below files are the files which we have already committed previously in the commit section and they are all \u201cpush-ready\u201c. Send Changes to Remote Repo (8) \u00b6 git push \u00b6 I will use the command git push origin master to reflect these files in the master branch of my central repository. Send Changes to Remote Repo (9) \u00b6 git push \u00b6 Send Changes to Remote Repo (10) \u00b6 git push \u00b6 Send Changes to Remote Repo (11) \u00b6 git push \u00b6 Send Changes to Remote Repo (12) \u00b6 git push \u00b6 To prevent overwriting, Git does not allow push when it results in a non-fast forward merge in the destination repository. Send Changes to Remote Repo (13) \u00b6 git push \u00b6 A non-fast forward merge means an upstream merge i.e. merging with ancestor or parent branches from a child branch To enable such merge, use the command below git push < remote > -force The above command forces the push operation even if it results in a non-fast forward merge Branching (1) \u00b6 git branch \u00b6 Branches in Git are nothing but pointers to a specific commit. Git generally prefers to keep its branches as lightweight as possible. Branching (2) \u00b6 git branch \u00b6 There are basically two types of branches viz. local branches remote tracking branches. Branching (3) \u00b6 git branch \u00b6 A local branch is just another path of your working tree. On the other hand, remote tracking branches have special purposes. Some of them are: They link your work from the local repository to the work on central repository. Branching (4) \u00b6 git branch \u00b6 They automatically detect which remote branches to get changes from, when you use git pull. Branching (5) \u00b6 Learn current branch \u00b6 You can check what your current branch is by using the command git branch The one mantra that you should always be chanting while branching is \u201cbranch early, and branch often\u201d Branching (6) \u00b6 List Local Branches \u00b6 git branch -l Branching (7) \u00b6 List Remote Branches \u00b6 git branch -r Branching (8) \u00b6 List All Local and Remote Branches \u00b6 git branch -a Branching (9) \u00b6 Removing merged git branches (after pull-request action in github) If you merged your branch to base branch in github and delete it on github your local branch list will not be updated by it self. You have to use the following command to update local and remote branch lists. Use the following command to syncronize your repository with remote upstream repo. git remote update --prune Branching (10) \u00b6 Create Branch \u00b6 To create a new branch we use the following command git branch < branch-name> The diagram below shows the workflow when a new branch is created. When we create a new branch it originates from the master branch itself. Branching (11) \u00b6 Create Branch \u00b6 Branching (12) \u00b6 Create Branch \u00b6 Since there is no storage/memory overhead with making many branches, it is easier to logically divide up your work rather than have big chunky branches You can create and change branch with following command, create a new branch named \"feature_x\" and switch to it using git checkout -b feature_x Branching (13) \u00b6 Change Branch \u00b6 git checkout < branch-name> git checkout master Branching (14) \u00b6 Change Branch \u00b6 Branching includes the work of a particular commit along with all parent commits. As you can see in the diagram above, the newBranch has detached itself from the master and hence will create a different path Branching (15) \u00b6 Delete Local Branch \u00b6 and delete the branch again, before doing this switch to main or master branches. git branch -d feature_x Branching (16) \u00b6 Delete Remote Branch \u00b6 and delete the branch again, before doing this switch to main or master branches. git push origin --delete feature_x How to delete remote branches in Git Branching (17) \u00b6 Push Specific Branch to Remote \u00b6 A branch is not available to others unless you push the branch to your remote repository git push origin < branch> Branching (18) \u00b6 Update & Merge (Conflicts) \u00b6 to update your local repository to the newest commit, execute git pull in your working directory to fetch and merge remote changes. to merge another branch into your active branch (e.g. master), use git merge <branch> Branching (19) \u00b6 Update & Merge (Conflicts) \u00b6 in both cases git tries to auto-merge changes. Unfortunately, this is not always possible and results in conflicts. You are responsible to merge those conflicts manually by editing the files shown by git. After changing, you need to mark them as merged with git add <filename> before merging changes, you can also preview them by using git diff <source_branch> <target_branch> Git merge conflicts | Atlassian Git Tutorial Branching (20) \u00b6 Update & Merge (Conflicts) \u00b6 There are two types of merges Git can perform: a fast-forward , or a no-fast-forward Branching (21) \u00b6 Update & Merge (Conflicts) \u00b6 Fast-forward ( --ff ) \u00b6 A fast-forward merge can happen when the current branch has no extra commits compared to the branch we\u2019re merging. Git is... lazy and will first try to perform the easiest option: the fast-forward! This type of merge doesn\u2019t create a new commit, but rather merges the commit(s) on the branch we\u2019re merging right in the current branch Branching (22) \u00b6 Update & Merge (Conflicts) \u00b6 Fast-forward ( --ff ) \u00b6 Branching (23) \u00b6 Update & Merge (Conflicts) \u00b6 Perfect! We now have all the changes that were made on the dev branch available on the master branch. So, what's the no-fast-forward all about? Branching (24) \u00b6 Update & Merge (Conflicts) \u00b6 No-fast-foward ( --no-ff ) \u00b6 It's great if your current branch doesn't have any extra commits compared to the branch that you want to merge, but unfortunately that's rarely the case! If we committed changes on the current branch that the branch we want to merge doesn't have, git will perform a no-fast-forward merge. Branching (25) \u00b6 Update & Merge (Conflicts) \u00b6 No-fast-foward ( --no-ff ) \u00b6 With a no-fast-forward merge, Git creates a new merging commit on the active branch. The commit's parent commits point to both the active branch and the branch that we want to merge! Branching (26) \u00b6 Update & Merge (Conflicts) \u00b6 No-fast-foward ( --no-ff ) \u00b6 Branching (27) \u00b6 Update & Merge (Conflicts) \u00b6 No-fast-foward ( --no-ff ) \u00b6 No big deal, a perfect merge! The master branch now contains all the changes that we've made on the dev branch. Branching (28) \u00b6 Merge Conflicts \u00b6 Although Git is good at deciding how to merge branches and add changes to files, it cannot always make this decision all by itself This can happen when the two branches we're trying to merge have changes on the same line in the same file, or if one branch deleted a file that another branch modified, and so on. Branching (29) \u00b6 Merge Conflicts \u00b6 In that case, Git will ask you to help decide which of the two options we want to keep! Let's say that on both branches, we edited the first line in the README.md . Branching (30) \u00b6 Merge Conflicts \u00b6 If we want to merge dev into master , this will end up in a merge conflict: would you like the title to be Hello! or Hey! ? Branching (31) \u00b6 Merge Conflicts \u00b6 When trying to merge the branches, Git will show you where the conflict happens. We can manually remove the changes we don't want to keep, save the changes, add the changed file again, and commit the changes Branching (32) \u00b6 Merge Conflicts \u00b6 Although merge conflicts are often quite annoying, it makes total sense: Git shouldn't just assume which change we want to keep Branching (33) \u00b6 Sample Conflict -1 \u00b6 participants.txt ( I added a hyphen before each name ) Finance team Charles Lisa John Stacy Alexander git init git add . git commit \u2013m 'Initial list for finance team' Branching (34) \u00b6 Sample Conflict -1 \u00b6 Create a new branch called marketing using the following syntax git checkout \u2013b marketing Branching (35) \u00b6 Sample Conflict -1 \u00b6 Now open the participants.txt file and start entering the names for the marketing department below the finance team list, as follows: ( I added a hyphen before each name ) Marketing team Collins Linda Patricia Morgan git add . git commit \u2013m 'Unfinished list of marketing team' git checkout master Branching (36) \u00b6 Sample Conflict -1 \u00b6 Open the file and delete the names Alexander and Stacy , save, close, add the changes, and commit with the commit message Final list from Finance team git add . git commit \u2013m \"Final list from Finance team\" git checkout marketing Branching (37) \u00b6 Sample Conflict -1 \u00b6 Open the file and add the fifth name, Amanda , for the marketing team, save, add, and commit git add . git commit \u2013m \"Initial list of marketing team\" names entered for marketing have been confirmed; now we need to merge these two lists, which can be done by the following command git merge master Branching (38) \u00b6 Sample Conflict -1 \u00b6 Auto-merging participants.txt CONFLICT (content): Merge conflict in participants.txt Automatic merge failed; fix conflicts and then commit the result. Branching (39) \u00b6 Sample Conflict -1 \u00b6 Finance team -Charles -Lisa -John <<<<<<< HEAD -Stacy -Alexander Marketing team - Collins - Linda - Patricia - Morgan - Amanda ======= >>>>>>> master Branching (40) \u00b6 Sample Conflict -1 \u00b6 <<<<<<< Changes made on the branch that is being merged into. In most cases, this is the branch that I have currently checked out (i.e. HEAD). ||||||| The common ancestor version. ======= Changes made on the branch that is being merged in. This is often a feature/topic branch. >>>>>>> Branching (41) \u00b6 Sample Conflict -1 \u00b6 remove them keep the lines you want to see in the final version of the file add and commit Branching (42) \u00b6 Sample Conflict -1 \u00b6 If we want to save all to our version git checkout --ours . # checkout our local version of all files git add -u # mark all conflicted files as merged git commit # commit the merge Branching (43) \u00b6 Sample Conflict -1 \u00b6 If we want to discard all our revision git checkout --theirs . # checkout remote version of all files git add -u # mark all conflicted files as merged git commit # commit the merge Branching (44) \u00b6 Sample Conflict -2 \u00b6 You're going to pull some changes, but oops, you're not up to date: git fetch origin git pull origin master From ssh://gitosis@example.com:22/projectname * branch master - > FETCH_HEAD Updating a030c3a..ee25213 error: Entry 'filename.c' not uptodate. Cannot merge. Branching (45) \u00b6 Sample Conflict -2 \u00b6 So you get up-to-date and try again, but have a conflict: git add filename.c git commit -m \"made some wild and crazy changes\" git pull origin master From ssh://gitosis@example.com:22/projectname * branch master - > FETCH_HEAD Auto-merging filename.c CONFLICT (content): Merge conflict in filename.c Automatic merge failed; fix conflicts and then commit the result. Branching (46) \u00b6 Sample Conflict -2 \u00b6 So you decide to take a look at the changes: git mergetool Oh my, oh my, upstream changed some things, but just to use my changes...no...their changes... git checkout --ours filename.c git checkout --theirs filename.c git add filename.c git commit -m \"using theirs\" Branching (47) \u00b6 Sample Conflict -2 \u00b6 And then we try a final time git pull origin master From ssh://gitosis@example.com:22/projectname * branch master - > FETCH_HEAD Already up-to-date. Tagging \u00b6 it's recommended to create tags for software releases. this is a known concept, which also exists in SVN. You can create a new tag named 1.0.0 by executing git tag 1.0.0 1b2e1d63ff the 1b2e1d63ff stands for the first 10 characters of the commit id you want to reference with your tag. You can get the commit id by looking at the... Log (1) \u00b6 in its simplest form, you can study repository history using.. git log You can add a lot of parameters to make the log look like what you want. To see only the commits of a certain author: git log --author=bob Log (2) \u00b6 To see a very compressed log where each commit is one line: git log --pretty=oneline Log (3) \u00b6 Or maybe you want to see an ASCII art tree of all the branches, decorated with the names of tags and branches: git log --graph --oneline --decorate --all Log (4) \u00b6 See only which files have changed: git log --name-status Log (5) \u00b6 These are just a few of the possible parameters you can use. For more, see git log --help Replace Local Changes (1) \u00b6 In case you did something wrong, which for sure never happens ;), you can replace local changes using the command git checkout -- < filename> this replaces the changes in your working tree with the last content in HEAD. Changes already added to the index, as well as new files, will be kept. Replace Local Changes (2) \u00b6 if you use dot (.) then all local changes will be rollbacked. git checkout -- . Replace Local Changes (3) \u00b6 If you instead want to drop all your local changes and commits, fetch the latest history from the server and point your local master branch at it like this git fetch origin git reset --hard origin/master Reflog (1) \u00b6 Everyone makes mistakes, and that's totally okay! Sometimes it may feel like you've corrupt your git repo so badly that you just want to delete it entirely. Reflog (2) \u00b6 git reflog is a very useful command in order to show a log of all the actions that have been taken! This includes merges, resets, reverts: basically any alteration to your branch. Reflog (3) \u00b6 Reflog (4) \u00b6 If you made a mistake, you can easily redo this by resetting HEAD based on the information that reflog gives us! Say that we actually didn't want to merge the origin branch. When we execute the git reflog command, we see that the state of the repo before the merge is at HEAD@{1} . Let's perform a git reset to point HEAD back to where it was on HEAD@{1} ! Reflog (5) \u00b6 We can see that the latest action has been pushed to the reflog Resetting (1) \u00b6 It can happen that we committed changes that we didn't want later on. Maybe it's a WIP commit, or maybe a commit that introduced bugs! In that case, we can perform a git reset . Resetting (2) \u00b6 A git reset gets rid of all the current staged files and gives us control over where HEAD should point to. Soft Reset (1) \u00b6 A soft reset moves HEAD to the specified commit (or the index of the commit compared to HEAD ), without getting rid of the changes that were introduced on the commits afterward! Soft Reset (2) \u00b6 Let's say that we don't want to keep the commit 9e78i which added a style.css file, and we also don't want to keep the commit 035cc which added an index.js file. However, we do want to keep the newly added style.css and index.js file! A perfect use case for a soft reset. Soft Reset (3) \u00b6 Soft Reset (2) \u00b6 When typing git status , you'll see that we still have access to all the changes that were made on the previous commits. This is great, as this means that we can fix the contents of these files and commit them again later on! Hard reset (1) \u00b6 Sometimes, we don't want to keep the changes that were introduced by certain commits. Unlike a soft reset, we shouldn't need to have access to them any more. Git should simply reset its state back to where it was on the specified commit: this even includes the changes in your working directory and staged files! Hard reset (2) \u00b6 Git has discarded the changes that were introduced on 9e78i and 035cc , and reset its state to where it was on commit ec5be . Reverting (1) \u00b6 Another way of undoing changes is by performing a git revert . By reverting a certain commit, we create a new commit that contains the reverted changes! Reverting (2) \u00b6 Let's say that ec5be added an index.js file. Later on, we actually realize we didn't want this change introduced by this commit anymore! Let's revert the ec5be commit. Perfect! Commit 9e78i reverted the changes that were introduced by the ec5be commit. Reverting (3) \u00b6 Performing a git revert is very useful in order to undo a certain commit, without modifying the history of the branch. Cherry-picking (1) \u00b6 When a certain branch contains a commit that introduced changes we need on our active branch, we can cherry-pick that command! By cherry-pick ing a commit, we create a new commit on our active branch that contains the changes that were introduced by the cherry-pick ed commit. Cherry-picking (1) \u00b6 Say that commit 76d12 on the dev branch added a change to the index.js file that we want in our master branch. We don't want the entire we just care about this one single commit! Cool, the master branch now contains the changes that 76d12 introduced Rebasing (1) \u00b6 We just saw how we could apply changes from one branch to another by performing a git merge . Another way of adding changes from one branch to another is by performing a git rebase . Rebasing (2) \u00b6 A git rebase copies the commits from the current branch, and puts these copied commits on top of the specified branch. Perfect, we now have all the changes that were made on the master branch available on the dev branch! Rebasing (3) \u00b6 A big difference compared to merging, is that Git won't try to find out which files to keep and not keep. The branch that we're rebasing always has the latest changes that we want to keep! You won't run into any merging conflicts this way, and keeps a nice linear Git history. Rebasing (4) \u00b6 This example shows rebasing on the master branch. In bigger projects, however, you usually don't want to do that. A git rebase changes the history of the project as new hashes are created for the copied commits! Rebasing (5) \u00b6 Rebasing is great whenever you're working on a feature branch, and the master branch has been updated. You can get all the updates on your branch, which would prevent future merging conflicts! Interactive Rebase (1) \u00b6 Before rebasing the commits, we can modify them! We can do so with an interactive rebase . An interactive rebase can also be useful on the branch you're currently working on, and want to modify some commits. Interactive Rebase (2) \u00b6 There are 6 actions we can perform on the commits we're rebasing: reword : Change the commit message edit : Amend this commit squash : Meld commit into the previous commit fixup : Meld commit into the previous commit, without keeping the commit's log message exec : Run a command on each commit we want to rebase drop : Remove the commit Interactive Rebase (3) \u00b6 Awesome! This way, we can have full control over our commits. If we want to remove a commit, we can just drop it. Interactive Rebase (4) \u00b6 Or if we want to squash multiple commits together to get a cleaner history, no problem! Interactive rebasing gives you a lot of control over the commits you're trying to rebase, even on the current active branch Useful Hints (1) \u00b6 built-in git GUI gitk Useful Hints (2) \u00b6 use colorful git output git config color.ui true Useful Hints (3) \u00b6 show log on just one line per commit git config format.pretty oneline Useful Hints (4) \u00b6 use interactive adding git add -i HEAD~2 // previous two commits fro head HEAD~~ // previous two commits from head HEAD@{2} // reflog order 18fe5 // previous commit hash GIT Flow \u00b6 A successful Git branching model \u00bb nvie.com Hotfix \u00b6 OneFlow \u2013 a Git branching model and workflow | End of Line Blog a simple git branching model \u00b7 GitHub GIT Decision Tree \u00b6 http://justinhileman.info/article/git-pretty/git-pretty.png GIT in action (1) \u00b6 GIT in action (2) \u00b6 GIT in action (3) \u00b6 GIT in action (4) \u00b6 GIT in action (5) \u00b6 GIT in action (6) \u00b6 GIT in action (7) \u00b6 Gource \u00b6 https://gource.io/ References (1) \u00b6 Source Code Management | Atlassian Git Tutorial . What is Source Code Management or Version Control ? - The Linux Juggernaut https://www.edureka.co/blog/how-to-use-github/ https://www.edureka.co/blog/git-tutorial/ https://www.edureka.co/blog/install-git/ References (2) \u00b6 git - the simple guide - no deep shit! GitHub - rogerdudler/git-guide: git - the simple guide https://dev.to/lydiahallie/cs-visualized-useful-git-commands-37p1#merge How to write a good commit message - DEV Community https://blog.xebialabs.com/2016/06/14/periodic-table-devops-tools-v-2/ References (3) \u00b6 https://harness.io/2018/01/devops-tools-lifecycle-mesh-2018/ https://medium.com/swlh/how-to-become-an-devops-engineer-in-2020-80b8740d5a52 https://www.lucidchart.com/blog/devops-process-flow https://www.researchgate.net/publication/262450962_Rugby_An_Agile_Process_Model_Based_on_Continuous_Delivery References (4) \u00b6 git - the simple guide - no deep shit! Git Tutorial | Commands And Operations In Git | Edureka How to write a good commit message - DEV Community An Introduction to Git and GitHub by Brian Yu - YouTube References (5) \u00b6 https://education.github.com/git-cheat-sheet-education.pdf NDP Software :: Git Cheatsheet ; Learn Git Branching https://guides.github.com/introduction/git-handbook/","title":"Week-3 (Git Version Management)"},{"location":"tr/week-3-git/ce103-week-3-git/#ce103-algorithms-and-programming-i","text":"","title":"CE103 Algorithms and Programming I"},{"location":"tr/week-3-git/ce103-week-3-git/#week-3","text":"","title":"Week-3"},{"location":"tr/week-3-git/ce103-week-3-git/#fall-semester-2021-2022","text":"Download DOC , SLIDE , PPTX","title":"Fall Semester, 2021-2022"},{"location":"tr/week-3-git/ce103-week-3-git/#introduction-to-source-code-management-systems","text":"","title":"Introduction to Source Code Management Systems"},{"location":"tr/week-3-git/ce103-week-3-git/#git-github-gitlab-bitbucket-maven-svn-tfs","text":"Source code management (SCM) is used to track modifications to a source code repository. SCM tracks a running history of changes to a code base and helps resolve conflicts when merging updates from multiple contributors. SCM is also synonymous with Version control. As software projects grow in lines of code and contributor head count, the costs of communication overhead and management complexity also grow. SCM is a critical tool to alleviate the organizational strain of growing development costs.","title":"Git, Github, Gitlab, Bitbucket, Maven, SVN, TFS"},{"location":"tr/week-3-git/ce103-week-3-git/#features-of-source-code-management-systems","text":"Authenticated access for commits Revision history on files Atomic commits of multiple files Versioning/Tagging","title":"Features of Source Code Management Systems"},{"location":"tr/week-3-git/ce103-week-3-git/#why-do-we-need-source-code-management-systems-1","text":"We can save the file with a different name if it\u2019s our school project or one-time papers but for a well-equipped software development? Not a chance.","title":"Why Do We Need Source Code Management Systems? (1)"},{"location":"tr/week-3-git/ce103-week-3-git/#why-do-we-need-source-code-management-systems-2","text":"Big projects need a version control system to track the changes and avoid misunderstanding. A good SCM does the following: Backup and Restore Synchronization Short-Term Undo Long-Term Undo Track Changes Ownership Branching and Merging","title":"Why Do We Need Source Code Management Systems? (2)"},{"location":"tr/week-3-git/ce103-week-3-git/#why-do-we-need-source-code-management-systems-3","text":"Backup and Restore \u2013 Files can be saved at any moment and can be restored from the last saved.","title":"Why Do We Need Source Code Management Systems? (3)"},{"location":"tr/week-3-git/ce103-week-3-git/#why-do-we-need-source-code-management-systems-4","text":"Synchronization \u2013 Programmers can get the latest code and fetch the up-to-date codes from the repository.","title":"Why Do We Need Source Code Management Systems? (4)"},{"location":"tr/week-3-git/ce103-week-3-git/#why-do-we-need-source-code-management-systems-5","text":"Short-Term Undo \u2013 Working with a file and messed it up. We can do a short-term undo to the last known version.","title":"Why Do We Need Source Code Management Systems? (5)"},{"location":"tr/week-3-git/ce103-week-3-git/#why-do-we-need-source-code-management-systems-6","text":"Long-Term Undo \u2013 It helps when we have to make a release version rollback. Something like going to the last version which was created a year","title":"Why Do We Need Source Code Management Systems? (6)"},{"location":"tr/week-3-git/ce103-week-3-git/#why-do-we-need-source-code-management-systems-7","text":"Track Changes \u2013 We can track the changes as when anyone is making any change, he can leave a commit message as for why the change was done.","title":"Why Do We Need Source Code Management Systems? (7)"},{"location":"tr/week-3-git/ce103-week-3-git/#why-do-we-need-source-code-management-systems-8","text":"Ownership \u2013 With every commit made to the master branch, it will ask the owner permission to merge it.","title":"Why Do We Need Source Code Management Systems? (8)"},{"location":"tr/week-3-git/ce103-week-3-git/#why-do-we-need-source-code-management-systems-9","text":"Branching and Merging \u2013 You can create a branch of your source code and create the changes. Once the changes are approved, you can merge it with the master branch.","title":"Why Do We Need Source Code Management Systems? (9)"},{"location":"tr/week-3-git/ce103-week-3-git/#why-do-we-need-source-code-management-systems-10","text":"","title":"Why Do We Need Source Code Management Systems? (10)"},{"location":"tr/week-3-git/ce103-week-3-git/#types-of-version-control-systems","text":"Centralized Version Control (TFS, Subversion) Distributed Version Control (Git and Mercurial)","title":"Types of Version Control Systems"},{"location":"tr/week-3-git/ce103-week-3-git/#centralized-version-control-tfs-subversion-1","text":"The main concept of Centralized Version Control is that it works in a client and server relationship. The repository is located in one place and allows access to multiple clients.","title":"Centralized Version Control (TFS, Subversion) (1)"},{"location":"tr/week-3-git/ce103-week-3-git/#centralized-version-control-tfs-subversion-2","text":"","title":"Centralized Version Control (TFS, Subversion) (2)"},{"location":"tr/week-3-git/ce103-week-3-git/#centralized-version-control-tfs-subversion-3","text":"","title":"Centralized Version Control (TFS, Subversion) (3)"},{"location":"tr/week-3-git/ce103-week-3-git/#centralized-version-control-tfs-subversion-4","text":"It\u2019s very similar to FTP where you have FTP clients which connect to FTP server. Here all the user changes and commits have to pass through the central server. For Ex: Subversion.","title":"Centralized Version Control (TFS, Subversion) (4)"},{"location":"tr/week-3-git/ce103-week-3-git/#centralized-version-control-tfs-subversion-5","text":"The benefits of centralized version control are: It\u2019s easy to understand. There are more GUI and IDE clients. You have more control over the users and access.","title":"Centralized Version Control (TFS, Subversion) (5)"},{"location":"tr/week-3-git/ce103-week-3-git/#centralized-version-control-tfs-subversion-6","text":"We do have drawbacks also: It is dependent on the access to the server. It can be slower because every command from the client has to pass the server. Branching and merging strategies are difficult to use.","title":"Centralized Version Control (TFS, Subversion) (6)"},{"location":"tr/week-3-git/ce103-week-3-git/#distributed-version-control-git-and-mercurial-1","text":"These systems are newer to use. In Distributed Version Control, each user has their own copy of the entire repository as well as the files and history. For Ex: Git and Mercurial","title":"Distributed Version Control (Git and Mercurial) (1)"},{"location":"tr/week-3-git/ce103-week-3-git/#distributed-version-control-git-and-mercurial-2","text":"","title":"Distributed Version Control (Git and Mercurial) (2)"},{"location":"tr/week-3-git/ce103-week-3-git/#distributed-version-control-git-and-mercurial-3","text":"","title":"Distributed Version Control (Git and Mercurial) (3)"},{"location":"tr/week-3-git/ce103-week-3-git/#distributed-version-control-git-and-mercurial-4","text":"The benefits of distributed version control are: More powerful and easy change tracking. No need of a centralized server. Most of the functionalities work in offline mode also apart from sharing the repositories. Branching and Merging strategies are more easy and reliable. It\u2019s faster than the other one.","title":"Distributed Version Control (Git and Mercurial) (4)"},{"location":"tr/week-3-git/ce103-week-3-git/#list-of-source-code-version-management-tools-1","text":"","title":"List of Source Code Version Management Tools (1)"},{"location":"tr/week-3-git/ce103-week-3-git/#list-of-source-code-version-management-tools-2","text":"Github GitLab BitBucket SourceForge Beanstalk","title":"List of Source Code Version Management Tools (2)"},{"location":"tr/week-3-git/ce103-week-3-git/#list-of-source-code-version-management-tools-3","text":"Apache Allura AWS CodeCommit Launchpad Phabricator GitBucket","title":"List of Source Code Version Management Tools (3)"},{"location":"tr/week-3-git/ce103-week-3-git/#git-distributed-source-code-management-1","text":"","title":"GIT (Distributed Source Code Management) (1)"},{"location":"tr/week-3-git/ce103-week-3-git/#git-distributed-source-code-management-2","text":"","title":"GIT (Distributed Source Code Management) (2)"},{"location":"tr/week-3-git/ce103-week-3-git/#git-distributed-source-code-management-3","text":"","title":"GIT (Distributed Source Code Management) (3)"},{"location":"tr/week-3-git/ce103-week-3-git/#git-distributed-source-code-management-4","text":"","title":"GIT (Distributed Source Code Management) (4)"},{"location":"tr/week-3-git/ce103-week-3-git/#git-distributed-source-code-management-5","text":"","title":"GIT (Distributed Source Code Management) (5)"},{"location":"tr/week-3-git/ce103-week-3-git/#a-basic-overview-of-how-git-works-1","text":"Create a \u201crepository\u201d (project) with a git hosting tool (like Bitbucket) Copy (or clone) the repository to your local machine Add a file to your local repo and \u201ccommit\u201d (save) the changes \u201cPush\u201d your changes to your master branch","title":"A Basic Overview of How Git Works (1)"},{"location":"tr/week-3-git/ce103-week-3-git/#git-distributed-source-code-management-6","text":"","title":"GIT (Distributed Source Code Management) (6)"},{"location":"tr/week-3-git/ce103-week-3-git/#a-basic-overview-of-how-git-works-2","text":"Make a change to your file with a git hosting tool and commit \u201cPull\u201d the changes to your local machine Create a \u201cbranch\u201d (version), make a change, commit the change Open a \u201cpull request\u201d. \u201cMerge\u201d your branch to the master branch","title":"A Basic Overview of How Git Works (2)"},{"location":"tr/week-3-git/ce103-week-3-git/#git-distributed-source-code-management-7","text":"","title":"GIT (Distributed Source Code Management) (7)"},{"location":"tr/week-3-git/ce103-week-3-git/#some-of-the-basic-operations-in-git-are","text":"Initialize Add Commit Pull Push","title":"Some of The Basic Operations in GIT are"},{"location":"tr/week-3-git/ce103-week-3-git/#git-distributed-source-code-management-8","text":"","title":"GIT (Distributed Source Code Management) (8)"},{"location":"tr/week-3-git/ce103-week-3-git/#some-of-the-basic-operations-in-git-are_1","text":"","title":"Some of The Basic Operations in GIT are"},{"location":"tr/week-3-git/ce103-week-3-git/#git-distributed-source-code-management-9","text":"","title":"GIT (Distributed Source Code Management) (9)"},{"location":"tr/week-3-git/ce103-week-3-git/#some-of-the-basic-operations-in-git-are_2","text":"Branching Merging Rebasing","title":"Some of The Basic Operations in GIT are"},{"location":"tr/week-3-git/ce103-week-3-git/#git-distributed-source-code-management-10","text":"","title":"GIT (Distributed Source Code Management) (10)"},{"location":"tr/week-3-git/ce103-week-3-git/#some-of-the-basic-operations-in-git-are_3","text":"","title":"Some of The Basic Operations in GIT are"},{"location":"tr/week-3-git/ce103-week-3-git/#git-distributed-source-code-management-8_1","text":"","title":"GIT (Distributed Source Code Management) (8)"},{"location":"tr/week-3-git/ce103-week-3-git/#a-brief-idea-about-how-these-operations-work-with-the-git-repositories-1","text":"","title":"A brief idea about how these operations work with the Git repositories (1)"},{"location":"tr/week-3-git/ce103-week-3-git/#git-distributed-source-code-management-9_1","text":"","title":"GIT (Distributed Source Code Management) (9)"},{"location":"tr/week-3-git/ce103-week-3-git/#a-brief-idea-about-how-these-operations-work-with-the-git-repositories-2","text":"","title":"A brief idea about how these operations work with the Git repositories (2)"},{"location":"tr/week-3-git/ce103-week-3-git/#git-distributed-source-code-management-10_1","text":"","title":"GIT (Distributed Source Code Management) (10)"},{"location":"tr/week-3-git/ce103-week-3-git/#a-brief-idea-about-how-these-operations-work-with-the-git-repositories-3","text":"For more detailed cheetsheat please check the following interactive map NDP Software :: Git Cheatsheet","title":"A brief idea about how these operations work with the Git repositories (3)"},{"location":"tr/week-3-git/ce103-week-3-git/#installation-of-git-1","text":"Check Installation Already Completed git --version","title":"Installation of GIT (1)"},{"location":"tr/week-3-git/ce103-week-3-git/#installation-of-git-2","text":"If your console gives error about git command follow the steps in the link Install Git | Atlassian Git Tutorial In this link you will should download following setup according to your operating system","title":"Installation of GIT (2)"},{"location":"tr/week-3-git/ce103-week-3-git/#installation-of-git-3","text":"","title":"Installation of GIT (3)"},{"location":"tr/week-3-git/ce103-week-3-git/#git-setup-files","text":"Download git for OSX Download git for Windows Download git for Linux","title":"GIT Setup Files"},{"location":"tr/week-3-git/ce103-week-3-git/#installation-of-git-4","text":"Download and install GIT from the following links (both have same github release path) Git - Downloads","title":"Installation of GIT (4)"},{"location":"tr/week-3-git/ce103-week-3-git/#installation-of-git-5","text":"After running setup follow the steps below","title":"Installation of GIT (5)"},{"location":"tr/week-3-git/ce103-week-3-git/#installation-of-git-6","text":"","title":"Installation of GIT (6)"},{"location":"tr/week-3-git/ce103-week-3-git/#installation-of-git-7","text":"","title":"Installation of GIT (7)"},{"location":"tr/week-3-git/ce103-week-3-git/#installation-of-git-8","text":"","title":"Installation of GIT (8)"},{"location":"tr/week-3-git/ce103-week-3-git/#installation-of-git-9","text":"","title":"Installation of GIT (9)"},{"location":"tr/week-3-git/ce103-week-3-git/#installation-of-git-10","text":"","title":"Installation of GIT (10)"},{"location":"tr/week-3-git/ce103-week-3-git/#installation-of-git-extension-windows-1","text":"You can install Git GUI from https://git-scm.com/downloads/guis I prefer to use git extension https://gitextensions.github.io/ and https://tortoisegit.org/ Also Download KDiff3 KDiff3 - Browse Files at SourceForge.net These extensions provide GUI for git operations to make process easier.","title":"Installation of GIT Extension (Windows) (1)"},{"location":"tr/week-3-git/ce103-week-3-git/#configuration-of-git-extension-windows-1","text":"","title":"Configuration of GIT Extension (Windows) (1)"},{"location":"tr/week-3-git/ce103-week-3-git/#configuration-of-git-extension-windows-2","text":"If you install git everything should be green and this configuration is stored on .gitconfig on your home C:/Windows/Users/<user>/.gitconfig","title":"Configuration of GIT Extension (Windows) (2)"},{"location":"tr/week-3-git/ce103-week-3-git/#configuration-of-git-extension-windows-3","text":"[core] editor = \\ \"C:/Program Files (x86)/GitExtensions/GitExtensions.exe\\\" fileeditor autocrlf = true quotePath = false commitGraph = true longpaths = true [user] email = xxxxxxx@gmail.com name = xxxx xxxxxx [filter \"lfs\" ] clean = git-lfs clean -- %f smudge = git-lfs smudge -- %f process = git-lfs filter-process required = true [pull] rebase = false [fetch] prune = false [rebase] autoStash = false [credential] helper = manager [diff] guitool = kdiff3 [difftool \"kdiff3\" ] path = C:/Program Files/KDiff3/kdiff3.exe cmd = \\ \"C:/Program Files/KDiff3/kdiff3.exe\\\" \\ \"$LOCAL\\\" \\ \"$REMOTE\\\" [merge] guitool = tortoisemerge [mergetool \"tortoisemerge\" ] path = C:/Program Files/TortoiseGit/bin/TortoiseGitMerge.exe cmd = \\ \"C:/Program Files/TortoiseGit/bin/TortoiseGitMerge.exe\\\" -base:\\ \"$BASE\\\" -mine:\\ \"$LOCAL\\\" -theirs:\\ \"$REMOTE\\\" -merged:\\ \"$MERGED\\\" [receive] advertisePushOptions = true [gc] writeCommitGraph = true","title":"Configuration of GIT Extension (Windows) (3)"},{"location":"tr/week-3-git/ce103-week-3-git/#configuration-of-git-extension-windows-4","text":"Also in extension you can see similar settings","title":"Configuration of GIT Extension (Windows) (4)"},{"location":"tr/week-3-git/ce103-week-3-git/#configuration-of-git-extension-windows-5","text":"Samples MergeTool tortoisemerge Path to mergetool C:/Program Files/TortoiseGit/bin/TortoiseGitMerge.exe Mergetool command \"C:/Program Files/TortoiseGit/bin/TortoiseGitMerge.exe\" -base:\"$BASE\" -mine:\"$LOCAL\" -theirs:\"$REMOTE\" -merged:\"$MERGED\"","title":"Configuration of GIT Extension (Windows) (5)"},{"location":"tr/week-3-git/ce103-week-3-git/#configuration-of-git-extension-windows-6","text":"Difftool kdiff3 Path to difftool C:/Program Files/KDiff3/kdiff3.exe Difftool command \"C:/Program Files/KDiff3/kdiff3.exe\" \"$LOCAL\" \"$REMOTE\"","title":"Configuration of GIT Extension (Windows) (6)"},{"location":"tr/week-3-git/ce103-week-3-git/#configuration-of-git-extension-windows-7","text":"If you see something as merge and diff tool is not configured, follow the similar settings above on your computer. If you installed kdiff3, tortoisegit and extension you will have same diff and merge tools This topic also help you Git: How can I configure KDiff3 as a merge tool and diff tool? - Stack Overflow","title":"Configuration of GIT Extension (Windows) (7)"},{"location":"tr/week-3-git/ce103-week-3-git/#configuration-of-git-extension-windows-8","text":"","title":"Configuration of GIT Extension (Windows) (8)"},{"location":"tr/week-3-git/ce103-week-3-git/#configuration-of-git-extension-windows-9","text":"Open Git->Config, in your settings you will see path to mergetool and difftool will be empty fill settings like that below find executables in your computer and copy paths to here.","title":"Configuration of GIT Extension (Windows) (9)"},{"location":"tr/week-3-git/ce103-week-3-git/#configuration-of-git-extension-windows-10","text":"","title":"Configuration of GIT Extension (Windows) (10)"},{"location":"tr/week-3-git/ce103-week-3-git/#configuration-of-git-extension-windows-11","text":"Also if we want to change and use different diff and merge tool then we can do this with gitbash console as below C : \\Program Files\\TortoiseGit\\bin Find TortoiseGitIDiff.exe and TortoiseGitMerge.exe","title":"Configuration of GIT Extension (Windows) (11)"},{"location":"tr/week-3-git/ce103-week-3-git/#configuration-of-git-extension-windows-12","text":"Copy path of this applications C : \\Program Files\\TortoiseGit\\bin\\TortoiseGitMerge.exe C : \\Program Files\\TortoiseGit\\bin\\TortoiseGitIDiff.exe","title":"Configuration of GIT Extension (Windows) (12)"},{"location":"tr/week-3-git/ce103-week-3-git/#configuration-of-git-extension-windows-13","text":"open a gitbash console and run following commands git config --global merge.tool TortoiseGitMerge git config --global mergetool.TortoiseGitMerge.path \"C:/Program Files/TortoiseGit/bin/TortoiseGitMerge.exe\" git config --global mergetool.TortoiseGitMerge.trustExitCode false git config --global diff.guitool TortoiseGitIDiff git config --global difftool.TortoiseGitIDiff.path \"C:/Program Files/TortoiseGit/bin/TortoiseGitIDiff.exe\" git config --global difftool.TortoiseGitIDiff.trustExitCode false This updates will be stored on .gitconfig","title":"Configuration of GIT Extension (Windows) (13)"},{"location":"tr/week-3-git/ce103-week-3-git/#using-the-git-extension-1","text":"right click in the git folder and use Git Extension menu for operations. for sample commit click \"Commit\"","title":"Using the GIT Extension (1)"},{"location":"tr/week-3-git/ce103-week-3-git/#using-the-git-extension-1_1","text":"from opening window first stage related files and then write a good commit message finally click commit to local. You can also commit&push it to remote repository.","title":"Using the GIT Extension (1)"},{"location":"tr/week-3-git/ce103-week-3-git/#git-installation-completed","text":"","title":"GIT Installation Completed.."},{"location":"tr/week-3-git/ce103-week-3-git/#installation-of-gig-git-ignore-creator-1","text":"Requirements Python >= 3.6 Internet connection https://github.com/sloria/gig pip install -U gig","title":"Installation of gig (git ignore creator) (1)"},{"location":"tr/week-3-git/ce103-week-3-git/#installation-of-gig-git-ignore-creator-2","text":"","title":"Installation of gig (git ignore creator) (2)"},{"location":"tr/week-3-git/ce103-week-3-git/#installation-of-gig-git-ignore-creator-3","text":"gig --version","title":"Installation of gig (git ignore creator) (3)"},{"location":"tr/week-3-git/ce103-week-3-git/#usage-of-gig-1","text":"List all gitignore templates gig list gig list -global","title":"Usage of gig (1)"},{"location":"tr/week-3-git/ce103-week-3-git/#usage-of-gig-2","text":"Sample gitignore for C Java and Visual Studio gig C Java VisualStudio > .gitignore","title":"Usage of gig (2)"},{"location":"tr/week-3-git/ce103-week-3-git/#usage-of-gig-3","text":"There is a portal for this also by Toptal \u2022 gitignore.io - Create Useful .gitignore Files For Your Project","title":"Usage of gig (3)"},{"location":"tr/week-3-git/ce103-week-3-git/#usage-of-gig-4","text":"for samples you can check the following links. https://github.com/github/gitignore https://dev.to/shihanng/gig-a-gitignore-generator-opc","title":"Usage of gig (4)"},{"location":"tr/week-3-git/ce103-week-3-git/#configuration-of-git-1","text":"It is important to configure your Git because any commits that you make are associated with your configuration details. configuring Git with your username and email. In order to do that, type the following commands in your Git Bash: git config - - global user.name \"<your name>\" git config - - global user.email \"<your email>\"","title":"Configuration of GIT (1)"},{"location":"tr/week-3-git/ce103-week-3-git/#configuration-of-git-2","text":"","title":"Configuration of GIT (2)"},{"location":"tr/week-3-git/ce103-week-3-git/#configuration-of-git-3","text":"git configuration files are located on the user folder","title":"Configuration of GIT (3)"},{"location":"tr/week-3-git/ce103-week-3-git/#configuration-of-git-4","text":"If you want to view all your configuration details, use the command below git config --list","title":"Configuration of GIT (4)"},{"location":"tr/week-3-git/ce103-week-3-git/#using-gitignore-files-with-git-extension-1","text":"with gitignore file","title":"Using .gitignore files with git-extension (1)"},{"location":"tr/week-3-git/ce103-week-3-git/#using-gitignore-files-with-git-extension-2","text":"without gitignore file (just move to another location)","title":"Using .gitignore files with git-extension (2)"},{"location":"tr/week-3-git/ce103-week-3-git/#github-create-repo","text":"","title":"Github Create Repo"},{"location":"tr/week-3-git/ce103-week-3-git/#initilization-of-repo-not-existing-in-github","text":"","title":"Initilization of Repo (not existing in github)"},{"location":"tr/week-3-git/ce103-week-3-git/#git-init","text":"In order to do that, we use the command git init . git init creates an empty Git repository or re-initializes an existing one. It basically creates a .git directory with sub directories and template files. Running a git init in an existing repository will not overwrite things that are already there. It rather picks up the newly added templates. git init","title":"git init"},{"location":"tr/week-3-git/ce103-week-3-git/#git-init_1","text":"","title":"git init"},{"location":"tr/week-3-git/ce103-week-3-git/#adding-initiated-repo-remote-upstream-repo-link-with-github-repo-1","text":"If you enter following command in the git folder you will see nothing git remote -v That mean this repository do not have a remote upstream repository such as a github or bitbucket repo.","title":"Adding Initiated Repo Remote Upstream Repo (Link with Github Repo) (1)"},{"location":"tr/week-3-git/ce103-week-3-git/#adding-initiated-repo-remote-upstream-repo-link-with-github-repo-2","text":"Open the github and bitbucket repository and copy project path from","title":"Adding Initiated Repo Remote Upstream Repo (Link with Github Repo) (2)"},{"location":"tr/week-3-git/ce103-week-3-git/#adding-initiated-repo-remote-upstream-repo-link-with-github-repo-3","text":"you will see the following sample from github code button https://github.com/ucoruh/ce103-sample-text.git","title":"Adding Initiated Repo Remote Upstream Repo (Link with Github Repo) (3)"},{"location":"tr/week-3-git/ce103-week-3-git/#adding-initiated-repo-remote-upstream-repo-link-with-github-repo-4","text":"copy link and use with following command git remote add origin https://github.com/ucoruh/ce103-sample-text.git","title":"Adding Initiated Repo Remote Upstream Repo (Link with Github Repo) (4)"},{"location":"tr/week-3-git/ce103-week-3-git/#adding-initiated-repo-remote-upstream-repo-link-with-github-repo-5","text":"then you can check your remote setting with $ git remote -v origin https://github.com/ucoruh/ce103-sample-text.git (fetch) origin https://github.com/ucoruh/ce103-sample-text.git (push)","title":"Adding Initiated Repo Remote Upstream Repo (Link with Github Repo) (5)"},{"location":"tr/week-3-git/ce103-week-3-git/#adding-initiated-repo-remote-upstream-repo-link-with-github-repo-6","text":"you can check the following sample How to Add a New Remote to your Git Repo | Assembla Help Center","title":"Adding Initiated Repo Remote Upstream Repo (Link with Github Repo) (6)"},{"location":"tr/week-3-git/ce103-week-3-git/#now-you-can-push-your-local-changes-to-remote-repository","text":"","title":"Now you can push your local changes to remote repository"},{"location":"tr/week-3-git/ce103-week-3-git/#if-you-see-a-repository-on-github-then-you-can-download-with-following-operation","text":"","title":"If you see a repository on Github then you can download with following operation"},{"location":"tr/week-3-git/ce103-week-3-git/#checkout-a-repository-1","text":"create a working copy of a local repository by running the command git clone /path/to/repository","title":"Checkout a Repository (1)"},{"location":"tr/week-3-git/ce103-week-3-git/#checkout-a-repository-2","text":"Sample clone command git clone https://github.com/ucoruh/ce103-sample-text.git","title":"Checkout a Repository (2)"},{"location":"tr/week-3-git/ce103-week-3-git/#checkout-a-repository-3","text":"when using a remote server, your command will be git clone username@host:/path/to/repository","title":"Checkout a Repository (3)"},{"location":"tr/week-3-git/ce103-week-3-git/#checking-repository-status-1","text":"","title":"Checking Repository Status (1)"},{"location":"tr/week-3-git/ce103-week-3-git/#git-status","text":"The git status command lists all the modified files which are ready to be added to the local repository. git status","title":"git status"},{"location":"tr/week-3-git/ce103-week-3-git/#checking-repository-status-2","text":"","title":"Checking Repository Status (2)"},{"location":"tr/week-3-git/ce103-week-3-git/#git-status_1","text":"","title":"git status"},{"location":"tr/week-3-git/ce103-week-3-git/#adding-files-to-index-1","text":"","title":"Adding Files to Index (1)"},{"location":"tr/week-3-git/ce103-week-3-git/#git-add","text":"This command updates the index using the current content found in the working tree and then prepares the content in the staging area for the next commit. git add < directory> git add < file> git add *","title":"git add"},{"location":"tr/week-3-git/ce103-week-3-git/#adding-files-to-index-1_1","text":"","title":"Adding Files to Index (1)"},{"location":"tr/week-3-git/ce103-week-3-git/#git-add_1","text":"Created two more files edureka3.txt and edureka4.txt. Let us add the files using the command git add -A. This command will add all the files to the index which are in the directory but not updated in the index yet.","title":"git add"},{"location":"tr/week-3-git/ce103-week-3-git/#commit-changes-1","text":"","title":"Commit Changes (1)"},{"location":"tr/week-3-git/ce103-week-3-git/#git-commit","text":"\u2022It refers to recording snapshots of the repository at a given time. Committed snapshots will never change unless done explicitly.","title":"git commit"},{"location":"tr/week-3-git/ce103-week-3-git/#commit-changes-2","text":"","title":"Commit Changes (2)"},{"location":"tr/week-3-git/ce103-week-3-git/#git-commit_1","text":"Let me explain how commit works with the diagram below Here, C1 is the initial commit, i.e. the snapshot of the first change from which another snapshot is created with changes named C2. Note that the master points to the latest commit. Now, when I commit again, another snapshot C3 is created and now the master points to C3 instead of C2.","title":"git commit"},{"location":"tr/week-3-git/ce103-week-3-git/#commit-changes-3","text":"","title":"Commit Changes (3)"},{"location":"tr/week-3-git/ce103-week-3-git/#git-commit_2","text":"Commands: git commit -m \"<message>\" Now, if you want to commit a snapshot of all the changes in the working directory at once, you can use the command below","title":"git commit"},{"location":"tr/week-3-git/ce103-week-3-git/#commit-changes-4","text":"","title":"Commit Changes (4)"},{"location":"tr/week-3-git/ce103-week-3-git/#git-commit_3","text":"Please check writing good commit messages article below How to write a good commit message - DEV Community","title":"git commit"},{"location":"tr/week-3-git/ce103-week-3-git/#writing-good-commit-messages-1","text":"type: subject body (optional) footer (optional)","title":"Writing Good Commit Messages (1)"},{"location":"tr/week-3-git/ce103-week-3-git/#writing-good-commit-messages-2","text":"","title":"Writing Good Commit Messages (2)"},{"location":"tr/week-3-git/ce103-week-3-git/#1-type","text":"feat - a new feature fix - a bug fix docs - changes in documentation style - everything related to styling refactor - code changes that neither fixes a bug or adds a feature test - everything related to testing chore - updating build tasks, package manager configs, etc","title":"1. Type"},{"location":"tr/week-3-git/ce103-week-3-git/#writing-good-commit-messages-3","text":"","title":"Writing Good Commit Messages (3)"},{"location":"tr/week-3-git/ce103-week-3-git/#2-subject","text":"This contains a short description of the changes made. It shouldn't be greater than 50 characters, should begin with a capital letter and written in the imperative eg. Add instead of Added or Adds.","title":"2. Subject"},{"location":"tr/week-3-git/ce103-week-3-git/#writing-good-commit-messages-4","text":"","title":"Writing Good Commit Messages (4)"},{"location":"tr/week-3-git/ce103-week-3-git/#3-body","text":"The body is used to explain what changes you made and why you made them. Not all commits are complex enough that they need a body, especially if you are working on a personal project alone, and as such writing a body is optional. A blank line between the body and the subject is required and each line should have no more than 72 characters.","title":"3. Body"},{"location":"tr/week-3-git/ce103-week-3-git/#writing-good-commit-messages-5","text":"","title":"Writing Good Commit Messages (5)"},{"location":"tr/week-3-git/ce103-week-3-git/#4footer","text":"The footer is also optional and mainly used when you are using an issue tracker to reference the issue ID.","title":"4.Footer"},{"location":"tr/week-3-git/ce103-week-3-git/#writing-good-commit-messages-6","text":"","title":"Writing Good Commit Messages (6)"},{"location":"tr/week-3-git/ce103-week-3-git/#example-commit-message","text":"feat: Summarize changes in around 50 characters or less More detailed explanatory text, if necessary. Wrap it to about 72 characters or so. In some contexts, the first line is treated as the subject of the commit and the rest of the text as the body. The blank line separating the summary from the body is critical (unless you omit the body entirely); various tools like `log`, `shortlog` and `rebase` can get confused if you run the two together. Explain the problem that this commit is solving. Focus on why you are making this change as opposed to how (the code explains that). Are there side effects or other unintuitive consequences of this change? Here's the place to explain them. Further paragraphs come after blank lines. - Bullet points are okay, too - Typically a hyphen or asterisk is used for the bullet, preceded by a single space, with blank lines in between, but conventions vary here If you use an issue tracker, put references to them at the bottom, like this: Resolves: #123 See also: #456, #789","title":"Example Commit Message"},{"location":"tr/week-3-git/ce103-week-3-git/#writing-good-commit-messages-7","text":"git commit -a","title":"Writing Good Commit Messages (7)"},{"location":"tr/week-3-git/ce103-week-3-git/#add-files-to-index-1","text":"I have created two more text files in my working directory viz. edureka5.txt and edureka6.txt but they are not added to the index yet. I am adding edureka5.txt using the command git add edureka5.txt","title":"Add Files to Index (1)"},{"location":"tr/week-3-git/ce103-week-3-git/#add-files-to-index-2","text":"","title":"Add Files to Index (2)"},{"location":"tr/week-3-git/ce103-week-3-git/#add-files-to-index-3","text":"I have added edureka5.txt to the index explicitly but not edureka6.txt and made changes in the previous files. I want to commit all changes in the directory at once.","title":"Add Files to Index (3)"},{"location":"tr/week-3-git/ce103-week-3-git/#add-files-to-index-4","text":"This command will commit a snapshot of all changes in the working directory but only includes modifications to tracked files i.e. the files that have been added with git add at some point in their history. Hence, edureka6.txt was not committed because it was not added to the index yet. But changes in all previous files present in the repository were committed, i.e. edureka1.txt, edureka2.txt, edureka3.txt, edureka4.txt and edureka5.txt. Now I have made my desired commits in my local repository","title":"Add Files to Index (4)"},{"location":"tr/week-3-git/ce103-week-3-git/#add-files-to-index-5","text":"your local repository consists of three \"trees\" maintained by git. the first one is your Working Directory which holds the actual files. the second one is the Index which acts as a staging area and finally the HEAD which points to the last commit you've made","title":"Add Files to Index (5)"},{"location":"tr/week-3-git/ce103-week-3-git/#add-files-to-index-6","text":"","title":"Add Files to Index (6)"},{"location":"tr/week-3-git/ce103-week-3-git/#update-local-repo-before-sending-1","text":"","title":"Update local repo before sending (1)"},{"location":"tr/week-3-git/ce103-week-3-git/#fetching","text":"If we have a remote Git branch, for example a branch on Github, it can happen that the remote branch has commits that the current branch doesn't have! Maybe another branch got merged, your colleague pushed a quick fix, and so on.","title":"Fetching"},{"location":"tr/week-3-git/ce103-week-3-git/#update-local-repo-before-sending-2","text":"","title":"Update local repo before sending (2)"},{"location":"tr/week-3-git/ce103-week-3-git/#fetching_1","text":"We can get these changes locally, by performing a git fetch on the remote branch! It doesn't affect your local branch in any way: a fetch simply downloads new data.","title":"Fetching"},{"location":"tr/week-3-git/ce103-week-3-git/#update-local-repo-before-sending-3","text":"","title":"Update local repo before sending (3)"},{"location":"tr/week-3-git/ce103-week-3-git/#fetching_2","text":"","title":"Fetching"},{"location":"tr/week-3-git/ce103-week-3-git/#update-local-repo-before-sending-4","text":"","title":"Update local repo before sending (4)"},{"location":"tr/week-3-git/ce103-week-3-git/#fetching_3","text":"We can now see all the changes that have been made since we last pushed! We can decide what we want to do with the new data now that we have it locally.","title":"Fetching"},{"location":"tr/week-3-git/ce103-week-3-git/#update-local-repo-before-sending-5","text":"","title":"Update local repo before sending (5)"},{"location":"tr/week-3-git/ce103-week-3-git/#pulling","text":"Although a git fetch is very useful in order to get the remote information of a branch, we can also perform a git pull . A git pull is actually two commands in one: a git fetch , and a git merge . When we're pulling changes from the origin, we're first fetching all the data like we did with a git fetch , after which the latest changes are automatically merged into the local branch","title":"Pulling"},{"location":"tr/week-3-git/ce103-week-3-git/#update-local-repo-before-sending-6","text":"","title":"Update local repo before sending (6)"},{"location":"tr/week-3-git/ce103-week-3-git/#pulling_1","text":"","title":"Pulling"},{"location":"tr/week-3-git/ce103-week-3-git/#update-local-repo-before-sending-7","text":"","title":"Update local repo before sending (7)"},{"location":"tr/week-3-git/ce103-week-3-git/#pulling_2","text":"Awesome, we're now perfectly in sync with the remote branch and have all the latest changes!","title":"Pulling"},{"location":"tr/week-3-git/ce103-week-3-git/#update-local-repo-before-sending-8","text":"","title":"Update local repo before sending (8)"},{"location":"tr/week-3-git/ce103-week-3-git/#pulling_3","text":"","title":"Pulling"},{"location":"tr/week-3-git/ce103-week-3-git/#git-pull","text":"Note that before you affect changes to the central repository you should always pull changes from the central repository to your local repository to get updated with the work of all the collaborators that have been contributing in the central repository. For that we will use the pull command.","title":"git pull"},{"location":"tr/week-3-git/ce103-week-3-git/#update-local-repo-before-sending-9","text":"","title":"Update local repo before sending (9)"},{"location":"tr/week-3-git/ce103-week-3-git/#pulling_4","text":"","title":"Pulling"},{"location":"tr/week-3-git/ce103-week-3-git/#git-pull_1","text":"But first, you need to set your central repository as origin using the command git remote add origin < link of your central repository>","title":"git pull"},{"location":"tr/week-3-git/ce103-week-3-git/#update-local-repo-before-sending-10","text":"","title":"Update local repo before sending (10)"},{"location":"tr/week-3-git/ce103-week-3-git/#pulling-git-pull","text":"Now that my origin is set","title":"Pulling / git pull"},{"location":"tr/week-3-git/ce103-week-3-git/#update-local-repo-before-sending-11","text":"","title":"Update local repo before sending (11)"},{"location":"tr/week-3-git/ce103-week-3-git/#pulling-git-pull_1","text":"let us extract files from the origin using pull. For that use the command git pull origin master","title":"Pulling / git pull"},{"location":"tr/week-3-git/ce103-week-3-git/#update-local-repo-before-sending-12","text":"","title":"Update local repo before sending (12)"},{"location":"tr/week-3-git/ce103-week-3-git/#pulling-git-pull_2","text":"This command will copy all the files from the master branch of remote repository to your local repository.","title":"Pulling / git pull"},{"location":"tr/week-3-git/ce103-week-3-git/#update-local-repo-before-sending-13","text":"","title":"Update local repo before sending (13)"},{"location":"tr/week-3-git/ce103-week-3-git/#pulling-git-pull_3","text":"Since my local repository was already updated with files from master branch, hence the message is Already up-to-date. Refer to the screen shot above","title":"Pulling / git pull"},{"location":"tr/week-3-git/ce103-week-3-git/#update-local-repo-before-sending-14","text":"","title":"Update local repo before sending (14)"},{"location":"tr/week-3-git/ce103-week-3-git/#pulling-git-pull_4","text":"One can also try pulling files from a different branch using the following command: git pull origin < branch-name>","title":"Pulling / git pull"},{"location":"tr/week-3-git/ce103-week-3-git/#update-local-repo-before-sending-15","text":"","title":"Update local repo before sending (15)"},{"location":"tr/week-3-git/ce103-week-3-git/#pulling-git-pull_5","text":"Your local Git repository is now updated with all the recent changes. It is time you make changes in the central repository by using the push command.","title":"Pulling / git pull"},{"location":"tr/week-3-git/ce103-week-3-git/#send-changes-to-remote-repo-1","text":"","title":"Send Changes to Remote Repo (1)"},{"location":"tr/week-3-git/ce103-week-3-git/#git-push","text":"This command transfers commits from your local repository to your remote repository. It is the opposite of pull operation.","title":"git push"},{"location":"tr/week-3-git/ce103-week-3-git/#send-changes-to-remote-repo-2","text":"","title":"Send Changes to Remote Repo (2)"},{"location":"tr/week-3-git/ce103-week-3-git/#git-push_1","text":"Pulling imports commits to local repositories whereas pushing exports commits to the remote repositories","title":"git push"},{"location":"tr/week-3-git/ce103-week-3-git/#send-changes-to-remote-repo-3","text":"","title":"Send Changes to Remote Repo (3)"},{"location":"tr/week-3-git/ce103-week-3-git/#git-push_2","text":"The use of git push is to publish your local changes to a central repository. After you\u2019ve accumulated several local commits and are ready to share them with the rest of the team,","title":"git push"},{"location":"tr/week-3-git/ce103-week-3-git/#send-changes-to-remote-repo-4","text":"","title":"Send Changes to Remote Repo (4)"},{"location":"tr/week-3-git/ce103-week-3-git/#git-push_3","text":"you can then push them to the central repository by using the following command git push < remote>","title":"git push"},{"location":"tr/week-3-git/ce103-week-3-git/#send-changes-to-remote-repo-5","text":"","title":"Send Changes to Remote Repo (5)"},{"location":"tr/week-3-git/ce103-week-3-git/#git-push_4","text":"This remote refers to the remote repository which had been set before using the pull command.","title":"git push"},{"location":"tr/week-3-git/ce103-week-3-git/#send-changes-to-remote-repo-6","text":"","title":"Send Changes to Remote Repo (6)"},{"location":"tr/week-3-git/ce103-week-3-git/#git-push_5","text":"This pushes the changes from the local repository to the remote repository along with all the necessary commits and internal objects. This creates a local branch in the destination repository","title":"git push"},{"location":"tr/week-3-git/ce103-week-3-git/#send-changes-to-remote-repo-7","text":"","title":"Send Changes to Remote Repo (7)"},{"location":"tr/week-3-git/ce103-week-3-git/#git-push_6","text":"The below files are the files which we have already committed previously in the commit section and they are all \u201cpush-ready\u201c.","title":"git push"},{"location":"tr/week-3-git/ce103-week-3-git/#send-changes-to-remote-repo-8","text":"","title":"Send Changes to Remote Repo (8)"},{"location":"tr/week-3-git/ce103-week-3-git/#git-push_7","text":"I will use the command git push origin master to reflect these files in the master branch of my central repository.","title":"git push"},{"location":"tr/week-3-git/ce103-week-3-git/#send-changes-to-remote-repo-9","text":"","title":"Send Changes to Remote Repo (9)"},{"location":"tr/week-3-git/ce103-week-3-git/#git-push_8","text":"","title":"git push"},{"location":"tr/week-3-git/ce103-week-3-git/#send-changes-to-remote-repo-10","text":"","title":"Send Changes to Remote Repo (10)"},{"location":"tr/week-3-git/ce103-week-3-git/#git-push_9","text":"","title":"git push"},{"location":"tr/week-3-git/ce103-week-3-git/#send-changes-to-remote-repo-11","text":"","title":"Send Changes to Remote Repo (11)"},{"location":"tr/week-3-git/ce103-week-3-git/#git-push_10","text":"","title":"git push"},{"location":"tr/week-3-git/ce103-week-3-git/#send-changes-to-remote-repo-12","text":"","title":"Send Changes to Remote Repo (12)"},{"location":"tr/week-3-git/ce103-week-3-git/#git-push_11","text":"To prevent overwriting, Git does not allow push when it results in a non-fast forward merge in the destination repository.","title":"git push"},{"location":"tr/week-3-git/ce103-week-3-git/#send-changes-to-remote-repo-13","text":"","title":"Send Changes to Remote Repo (13)"},{"location":"tr/week-3-git/ce103-week-3-git/#git-push_12","text":"A non-fast forward merge means an upstream merge i.e. merging with ancestor or parent branches from a child branch To enable such merge, use the command below git push < remote > -force The above command forces the push operation even if it results in a non-fast forward merge","title":"git push"},{"location":"tr/week-3-git/ce103-week-3-git/#branching-1","text":"","title":"Branching (1)"},{"location":"tr/week-3-git/ce103-week-3-git/#git-branch","text":"Branches in Git are nothing but pointers to a specific commit. Git generally prefers to keep its branches as lightweight as possible.","title":"git branch"},{"location":"tr/week-3-git/ce103-week-3-git/#branching-2","text":"","title":"Branching (2)"},{"location":"tr/week-3-git/ce103-week-3-git/#git-branch_1","text":"There are basically two types of branches viz. local branches remote tracking branches.","title":"git branch"},{"location":"tr/week-3-git/ce103-week-3-git/#branching-3","text":"","title":"Branching (3)"},{"location":"tr/week-3-git/ce103-week-3-git/#git-branch_2","text":"A local branch is just another path of your working tree. On the other hand, remote tracking branches have special purposes. Some of them are: They link your work from the local repository to the work on central repository.","title":"git branch"},{"location":"tr/week-3-git/ce103-week-3-git/#branching-4","text":"","title":"Branching (4)"},{"location":"tr/week-3-git/ce103-week-3-git/#git-branch_3","text":"They automatically detect which remote branches to get changes from, when you use git pull.","title":"git branch"},{"location":"tr/week-3-git/ce103-week-3-git/#branching-5","text":"","title":"Branching (5)"},{"location":"tr/week-3-git/ce103-week-3-git/#learn-current-branch","text":"You can check what your current branch is by using the command git branch The one mantra that you should always be chanting while branching is \u201cbranch early, and branch often\u201d","title":"Learn current branch"},{"location":"tr/week-3-git/ce103-week-3-git/#branching-6","text":"","title":"Branching (6)"},{"location":"tr/week-3-git/ce103-week-3-git/#list-local-branches","text":"git branch -l","title":"List Local Branches"},{"location":"tr/week-3-git/ce103-week-3-git/#branching-7","text":"","title":"Branching (7)"},{"location":"tr/week-3-git/ce103-week-3-git/#list-remote-branches","text":"git branch -r","title":"List Remote Branches"},{"location":"tr/week-3-git/ce103-week-3-git/#branching-8","text":"","title":"Branching (8)"},{"location":"tr/week-3-git/ce103-week-3-git/#list-all-local-and-remote-branches","text":"git branch -a","title":"List All Local and Remote Branches"},{"location":"tr/week-3-git/ce103-week-3-git/#branching-9","text":"Removing merged git branches (after pull-request action in github) If you merged your branch to base branch in github and delete it on github your local branch list will not be updated by it self. You have to use the following command to update local and remote branch lists. Use the following command to syncronize your repository with remote upstream repo. git remote update --prune","title":"Branching (9)"},{"location":"tr/week-3-git/ce103-week-3-git/#branching-10","text":"","title":"Branching (10)"},{"location":"tr/week-3-git/ce103-week-3-git/#create-branch","text":"To create a new branch we use the following command git branch < branch-name> The diagram below shows the workflow when a new branch is created. When we create a new branch it originates from the master branch itself.","title":"Create Branch"},{"location":"tr/week-3-git/ce103-week-3-git/#branching-11","text":"","title":"Branching (11)"},{"location":"tr/week-3-git/ce103-week-3-git/#create-branch_1","text":"","title":"Create Branch"},{"location":"tr/week-3-git/ce103-week-3-git/#branching-12","text":"","title":"Branching (12)"},{"location":"tr/week-3-git/ce103-week-3-git/#create-branch_2","text":"Since there is no storage/memory overhead with making many branches, it is easier to logically divide up your work rather than have big chunky branches You can create and change branch with following command, create a new branch named \"feature_x\" and switch to it using git checkout -b feature_x","title":"Create Branch"},{"location":"tr/week-3-git/ce103-week-3-git/#branching-13","text":"","title":"Branching (13)"},{"location":"tr/week-3-git/ce103-week-3-git/#change-branch","text":"git checkout < branch-name> git checkout master","title":"Change Branch"},{"location":"tr/week-3-git/ce103-week-3-git/#branching-14","text":"","title":"Branching (14)"},{"location":"tr/week-3-git/ce103-week-3-git/#change-branch_1","text":"Branching includes the work of a particular commit along with all parent commits. As you can see in the diagram above, the newBranch has detached itself from the master and hence will create a different path","title":"Change Branch"},{"location":"tr/week-3-git/ce103-week-3-git/#branching-15","text":"","title":"Branching (15)"},{"location":"tr/week-3-git/ce103-week-3-git/#delete-local-branch","text":"and delete the branch again, before doing this switch to main or master branches. git branch -d feature_x","title":"Delete Local Branch"},{"location":"tr/week-3-git/ce103-week-3-git/#branching-16","text":"","title":"Branching (16)"},{"location":"tr/week-3-git/ce103-week-3-git/#delete-remote-branch","text":"and delete the branch again, before doing this switch to main or master branches. git push origin --delete feature_x How to delete remote branches in Git","title":"Delete Remote Branch"},{"location":"tr/week-3-git/ce103-week-3-git/#branching-17","text":"","title":"Branching (17)"},{"location":"tr/week-3-git/ce103-week-3-git/#push-specific-branch-to-remote","text":"A branch is not available to others unless you push the branch to your remote repository git push origin < branch>","title":"Push Specific Branch to Remote"},{"location":"tr/week-3-git/ce103-week-3-git/#branching-18","text":"","title":"Branching (18)"},{"location":"tr/week-3-git/ce103-week-3-git/#update-merge-conflicts","text":"to update your local repository to the newest commit, execute git pull in your working directory to fetch and merge remote changes. to merge another branch into your active branch (e.g. master), use git merge <branch>","title":"Update &amp; Merge (Conflicts)"},{"location":"tr/week-3-git/ce103-week-3-git/#branching-19","text":"","title":"Branching (19)"},{"location":"tr/week-3-git/ce103-week-3-git/#update-merge-conflicts_1","text":"in both cases git tries to auto-merge changes. Unfortunately, this is not always possible and results in conflicts. You are responsible to merge those conflicts manually by editing the files shown by git. After changing, you need to mark them as merged with git add <filename> before merging changes, you can also preview them by using git diff <source_branch> <target_branch> Git merge conflicts | Atlassian Git Tutorial","title":"Update &amp; Merge (Conflicts)"},{"location":"tr/week-3-git/ce103-week-3-git/#branching-20","text":"","title":"Branching (20)"},{"location":"tr/week-3-git/ce103-week-3-git/#update-merge-conflicts_2","text":"There are two types of merges Git can perform: a fast-forward , or a no-fast-forward","title":"Update &amp; Merge (Conflicts)"},{"location":"tr/week-3-git/ce103-week-3-git/#branching-21","text":"","title":"Branching (21)"},{"location":"tr/week-3-git/ce103-week-3-git/#update-merge-conflicts_3","text":"","title":"Update &amp; Merge (Conflicts)"},{"location":"tr/week-3-git/ce103-week-3-git/#fast-forward-ff","text":"A fast-forward merge can happen when the current branch has no extra commits compared to the branch we\u2019re merging. Git is... lazy and will first try to perform the easiest option: the fast-forward! This type of merge doesn\u2019t create a new commit, but rather merges the commit(s) on the branch we\u2019re merging right in the current branch","title":"Fast-forward (--ff)"},{"location":"tr/week-3-git/ce103-week-3-git/#branching-22","text":"","title":"Branching (22)"},{"location":"tr/week-3-git/ce103-week-3-git/#update-merge-conflicts_4","text":"","title":"Update &amp; Merge (Conflicts)"},{"location":"tr/week-3-git/ce103-week-3-git/#fast-forward-ff_1","text":"","title":"Fast-forward (--ff)"},{"location":"tr/week-3-git/ce103-week-3-git/#branching-23","text":"","title":"Branching (23)"},{"location":"tr/week-3-git/ce103-week-3-git/#update-merge-conflicts_5","text":"Perfect! We now have all the changes that were made on the dev branch available on the master branch. So, what's the no-fast-forward all about?","title":"Update &amp; Merge (Conflicts)"},{"location":"tr/week-3-git/ce103-week-3-git/#branching-24","text":"","title":"Branching (24)"},{"location":"tr/week-3-git/ce103-week-3-git/#update-merge-conflicts_6","text":"","title":"Update &amp; Merge (Conflicts)"},{"location":"tr/week-3-git/ce103-week-3-git/#no-fast-foward-no-ff","text":"It's great if your current branch doesn't have any extra commits compared to the branch that you want to merge, but unfortunately that's rarely the case! If we committed changes on the current branch that the branch we want to merge doesn't have, git will perform a no-fast-forward merge.","title":"No-fast-foward (--no-ff)"},{"location":"tr/week-3-git/ce103-week-3-git/#branching-25","text":"","title":"Branching (25)"},{"location":"tr/week-3-git/ce103-week-3-git/#update-merge-conflicts_7","text":"","title":"Update &amp; Merge (Conflicts)"},{"location":"tr/week-3-git/ce103-week-3-git/#no-fast-foward-no-ff_1","text":"With a no-fast-forward merge, Git creates a new merging commit on the active branch. The commit's parent commits point to both the active branch and the branch that we want to merge!","title":"No-fast-foward (--no-ff)"},{"location":"tr/week-3-git/ce103-week-3-git/#branching-26","text":"","title":"Branching (26)"},{"location":"tr/week-3-git/ce103-week-3-git/#update-merge-conflicts_8","text":"","title":"Update &amp; Merge (Conflicts)"},{"location":"tr/week-3-git/ce103-week-3-git/#no-fast-foward-no-ff_2","text":"","title":"No-fast-foward (--no-ff)"},{"location":"tr/week-3-git/ce103-week-3-git/#branching-27","text":"","title":"Branching (27)"},{"location":"tr/week-3-git/ce103-week-3-git/#update-merge-conflicts_9","text":"","title":"Update &amp; Merge (Conflicts)"},{"location":"tr/week-3-git/ce103-week-3-git/#no-fast-foward-no-ff_3","text":"No big deal, a perfect merge! The master branch now contains all the changes that we've made on the dev branch.","title":"No-fast-foward (--no-ff)"},{"location":"tr/week-3-git/ce103-week-3-git/#branching-28","text":"","title":"Branching (28)"},{"location":"tr/week-3-git/ce103-week-3-git/#merge-conflicts","text":"Although Git is good at deciding how to merge branches and add changes to files, it cannot always make this decision all by itself This can happen when the two branches we're trying to merge have changes on the same line in the same file, or if one branch deleted a file that another branch modified, and so on.","title":"Merge Conflicts"},{"location":"tr/week-3-git/ce103-week-3-git/#branching-29","text":"","title":"Branching (29)"},{"location":"tr/week-3-git/ce103-week-3-git/#merge-conflicts_1","text":"In that case, Git will ask you to help decide which of the two options we want to keep! Let's say that on both branches, we edited the first line in the README.md .","title":"Merge Conflicts"},{"location":"tr/week-3-git/ce103-week-3-git/#branching-30","text":"","title":"Branching (30)"},{"location":"tr/week-3-git/ce103-week-3-git/#merge-conflicts_2","text":"If we want to merge dev into master , this will end up in a merge conflict: would you like the title to be Hello! or Hey! ?","title":"Merge Conflicts"},{"location":"tr/week-3-git/ce103-week-3-git/#branching-31","text":"","title":"Branching (31)"},{"location":"tr/week-3-git/ce103-week-3-git/#merge-conflicts_3","text":"When trying to merge the branches, Git will show you where the conflict happens. We can manually remove the changes we don't want to keep, save the changes, add the changed file again, and commit the changes","title":"Merge Conflicts"},{"location":"tr/week-3-git/ce103-week-3-git/#branching-32","text":"","title":"Branching (32)"},{"location":"tr/week-3-git/ce103-week-3-git/#merge-conflicts_4","text":"Although merge conflicts are often quite annoying, it makes total sense: Git shouldn't just assume which change we want to keep","title":"Merge Conflicts"},{"location":"tr/week-3-git/ce103-week-3-git/#branching-33","text":"","title":"Branching (33)"},{"location":"tr/week-3-git/ce103-week-3-git/#sample-conflict-1","text":"participants.txt ( I added a hyphen before each name ) Finance team Charles Lisa John Stacy Alexander git init git add . git commit \u2013m 'Initial list for finance team'","title":"Sample Conflict -1"},{"location":"tr/week-3-git/ce103-week-3-git/#branching-34","text":"","title":"Branching (34)"},{"location":"tr/week-3-git/ce103-week-3-git/#sample-conflict-1_1","text":"Create a new branch called marketing using the following syntax git checkout \u2013b marketing","title":"Sample Conflict -1"},{"location":"tr/week-3-git/ce103-week-3-git/#branching-35","text":"","title":"Branching (35)"},{"location":"tr/week-3-git/ce103-week-3-git/#sample-conflict-1_2","text":"Now open the participants.txt file and start entering the names for the marketing department below the finance team list, as follows: ( I added a hyphen before each name ) Marketing team Collins Linda Patricia Morgan git add . git commit \u2013m 'Unfinished list of marketing team' git checkout master","title":"Sample Conflict -1"},{"location":"tr/week-3-git/ce103-week-3-git/#branching-36","text":"","title":"Branching (36)"},{"location":"tr/week-3-git/ce103-week-3-git/#sample-conflict-1_3","text":"Open the file and delete the names Alexander and Stacy , save, close, add the changes, and commit with the commit message Final list from Finance team git add . git commit \u2013m \"Final list from Finance team\" git checkout marketing","title":"Sample Conflict -1"},{"location":"tr/week-3-git/ce103-week-3-git/#branching-37","text":"","title":"Branching (37)"},{"location":"tr/week-3-git/ce103-week-3-git/#sample-conflict-1_4","text":"Open the file and add the fifth name, Amanda , for the marketing team, save, add, and commit git add . git commit \u2013m \"Initial list of marketing team\" names entered for marketing have been confirmed; now we need to merge these two lists, which can be done by the following command git merge master","title":"Sample Conflict -1"},{"location":"tr/week-3-git/ce103-week-3-git/#branching-38","text":"","title":"Branching (38)"},{"location":"tr/week-3-git/ce103-week-3-git/#sample-conflict-1_5","text":"Auto-merging participants.txt CONFLICT (content): Merge conflict in participants.txt Automatic merge failed; fix conflicts and then commit the result.","title":"Sample Conflict -1"},{"location":"tr/week-3-git/ce103-week-3-git/#branching-39","text":"","title":"Branching (39)"},{"location":"tr/week-3-git/ce103-week-3-git/#sample-conflict-1_6","text":"Finance team -Charles -Lisa -John <<<<<<< HEAD -Stacy -Alexander Marketing team - Collins - Linda - Patricia - Morgan - Amanda ======= >>>>>>> master","title":"Sample Conflict -1"},{"location":"tr/week-3-git/ce103-week-3-git/#branching-40","text":"","title":"Branching (40)"},{"location":"tr/week-3-git/ce103-week-3-git/#sample-conflict-1_7","text":"<<<<<<< Changes made on the branch that is being merged into. In most cases, this is the branch that I have currently checked out (i.e. HEAD). ||||||| The common ancestor version. ======= Changes made on the branch that is being merged in. This is often a feature/topic branch. >>>>>>>","title":"Sample Conflict -1"},{"location":"tr/week-3-git/ce103-week-3-git/#branching-41","text":"","title":"Branching (41)"},{"location":"tr/week-3-git/ce103-week-3-git/#sample-conflict-1_8","text":"remove them keep the lines you want to see in the final version of the file add and commit","title":"Sample Conflict -1"},{"location":"tr/week-3-git/ce103-week-3-git/#branching-42","text":"","title":"Branching (42)"},{"location":"tr/week-3-git/ce103-week-3-git/#sample-conflict-1_9","text":"If we want to save all to our version git checkout --ours . # checkout our local version of all files git add -u # mark all conflicted files as merged git commit # commit the merge","title":"Sample Conflict -1"},{"location":"tr/week-3-git/ce103-week-3-git/#branching-43","text":"","title":"Branching (43)"},{"location":"tr/week-3-git/ce103-week-3-git/#sample-conflict-1_10","text":"If we want to discard all our revision git checkout --theirs . # checkout remote version of all files git add -u # mark all conflicted files as merged git commit # commit the merge","title":"Sample Conflict -1"},{"location":"tr/week-3-git/ce103-week-3-git/#branching-44","text":"","title":"Branching (44)"},{"location":"tr/week-3-git/ce103-week-3-git/#sample-conflict-2","text":"You're going to pull some changes, but oops, you're not up to date: git fetch origin git pull origin master From ssh://gitosis@example.com:22/projectname * branch master - > FETCH_HEAD Updating a030c3a..ee25213 error: Entry 'filename.c' not uptodate. Cannot merge.","title":"Sample Conflict -2"},{"location":"tr/week-3-git/ce103-week-3-git/#branching-45","text":"","title":"Branching (45)"},{"location":"tr/week-3-git/ce103-week-3-git/#sample-conflict-2_1","text":"So you get up-to-date and try again, but have a conflict: git add filename.c git commit -m \"made some wild and crazy changes\" git pull origin master From ssh://gitosis@example.com:22/projectname * branch master - > FETCH_HEAD Auto-merging filename.c CONFLICT (content): Merge conflict in filename.c Automatic merge failed; fix conflicts and then commit the result.","title":"Sample Conflict -2"},{"location":"tr/week-3-git/ce103-week-3-git/#branching-46","text":"","title":"Branching (46)"},{"location":"tr/week-3-git/ce103-week-3-git/#sample-conflict-2_2","text":"So you decide to take a look at the changes: git mergetool Oh my, oh my, upstream changed some things, but just to use my changes...no...their changes... git checkout --ours filename.c git checkout --theirs filename.c git add filename.c git commit -m \"using theirs\"","title":"Sample Conflict -2"},{"location":"tr/week-3-git/ce103-week-3-git/#branching-47","text":"","title":"Branching (47)"},{"location":"tr/week-3-git/ce103-week-3-git/#sample-conflict-2_3","text":"And then we try a final time git pull origin master From ssh://gitosis@example.com:22/projectname * branch master - > FETCH_HEAD Already up-to-date.","title":"Sample Conflict -2"},{"location":"tr/week-3-git/ce103-week-3-git/#tagging","text":"it's recommended to create tags for software releases. this is a known concept, which also exists in SVN. You can create a new tag named 1.0.0 by executing git tag 1.0.0 1b2e1d63ff the 1b2e1d63ff stands for the first 10 characters of the commit id you want to reference with your tag. You can get the commit id by looking at the...","title":"Tagging"},{"location":"tr/week-3-git/ce103-week-3-git/#log-1","text":"in its simplest form, you can study repository history using.. git log You can add a lot of parameters to make the log look like what you want. To see only the commits of a certain author: git log --author=bob","title":"Log (1)"},{"location":"tr/week-3-git/ce103-week-3-git/#log-2","text":"To see a very compressed log where each commit is one line: git log --pretty=oneline","title":"Log (2)"},{"location":"tr/week-3-git/ce103-week-3-git/#log-3","text":"Or maybe you want to see an ASCII art tree of all the branches, decorated with the names of tags and branches: git log --graph --oneline --decorate --all","title":"Log (3)"},{"location":"tr/week-3-git/ce103-week-3-git/#log-4","text":"See only which files have changed: git log --name-status","title":"Log (4)"},{"location":"tr/week-3-git/ce103-week-3-git/#log-5","text":"These are just a few of the possible parameters you can use. For more, see git log --help","title":"Log (5)"},{"location":"tr/week-3-git/ce103-week-3-git/#replace-local-changes-1","text":"In case you did something wrong, which for sure never happens ;), you can replace local changes using the command git checkout -- < filename> this replaces the changes in your working tree with the last content in HEAD. Changes already added to the index, as well as new files, will be kept.","title":"Replace Local Changes (1)"},{"location":"tr/week-3-git/ce103-week-3-git/#replace-local-changes-2","text":"if you use dot (.) then all local changes will be rollbacked. git checkout -- .","title":"Replace Local Changes (2)"},{"location":"tr/week-3-git/ce103-week-3-git/#replace-local-changes-3","text":"If you instead want to drop all your local changes and commits, fetch the latest history from the server and point your local master branch at it like this git fetch origin git reset --hard origin/master","title":"Replace Local Changes (3)"},{"location":"tr/week-3-git/ce103-week-3-git/#reflog-1","text":"Everyone makes mistakes, and that's totally okay! Sometimes it may feel like you've corrupt your git repo so badly that you just want to delete it entirely.","title":"Reflog (1)"},{"location":"tr/week-3-git/ce103-week-3-git/#reflog-2","text":"git reflog is a very useful command in order to show a log of all the actions that have been taken! This includes merges, resets, reverts: basically any alteration to your branch.","title":"Reflog (2)"},{"location":"tr/week-3-git/ce103-week-3-git/#reflog-3","text":"","title":"Reflog (3)"},{"location":"tr/week-3-git/ce103-week-3-git/#reflog-4","text":"If you made a mistake, you can easily redo this by resetting HEAD based on the information that reflog gives us! Say that we actually didn't want to merge the origin branch. When we execute the git reflog command, we see that the state of the repo before the merge is at HEAD@{1} . Let's perform a git reset to point HEAD back to where it was on HEAD@{1} !","title":"Reflog (4)"},{"location":"tr/week-3-git/ce103-week-3-git/#reflog-5","text":"We can see that the latest action has been pushed to the reflog","title":"Reflog (5)"},{"location":"tr/week-3-git/ce103-week-3-git/#resetting-1","text":"It can happen that we committed changes that we didn't want later on. Maybe it's a WIP commit, or maybe a commit that introduced bugs! In that case, we can perform a git reset .","title":"Resetting (1)"},{"location":"tr/week-3-git/ce103-week-3-git/#resetting-2","text":"A git reset gets rid of all the current staged files and gives us control over where HEAD should point to.","title":"Resetting (2)"},{"location":"tr/week-3-git/ce103-week-3-git/#soft-reset-1","text":"A soft reset moves HEAD to the specified commit (or the index of the commit compared to HEAD ), without getting rid of the changes that were introduced on the commits afterward!","title":"Soft Reset (1)"},{"location":"tr/week-3-git/ce103-week-3-git/#soft-reset-2","text":"Let's say that we don't want to keep the commit 9e78i which added a style.css file, and we also don't want to keep the commit 035cc which added an index.js file. However, we do want to keep the newly added style.css and index.js file! A perfect use case for a soft reset.","title":"Soft Reset (2)"},{"location":"tr/week-3-git/ce103-week-3-git/#soft-reset-3","text":"","title":"Soft Reset (3)"},{"location":"tr/week-3-git/ce103-week-3-git/#soft-reset-2_1","text":"When typing git status , you'll see that we still have access to all the changes that were made on the previous commits. This is great, as this means that we can fix the contents of these files and commit them again later on!","title":"Soft Reset (2)"},{"location":"tr/week-3-git/ce103-week-3-git/#hard-reset-1","text":"Sometimes, we don't want to keep the changes that were introduced by certain commits. Unlike a soft reset, we shouldn't need to have access to them any more. Git should simply reset its state back to where it was on the specified commit: this even includes the changes in your working directory and staged files!","title":"Hard reset (1)"},{"location":"tr/week-3-git/ce103-week-3-git/#hard-reset-2","text":"Git has discarded the changes that were introduced on 9e78i and 035cc , and reset its state to where it was on commit ec5be .","title":"Hard reset (2)"},{"location":"tr/week-3-git/ce103-week-3-git/#reverting-1","text":"Another way of undoing changes is by performing a git revert . By reverting a certain commit, we create a new commit that contains the reverted changes!","title":"Reverting (1)"},{"location":"tr/week-3-git/ce103-week-3-git/#reverting-2","text":"Let's say that ec5be added an index.js file. Later on, we actually realize we didn't want this change introduced by this commit anymore! Let's revert the ec5be commit. Perfect! Commit 9e78i reverted the changes that were introduced by the ec5be commit.","title":"Reverting (2)"},{"location":"tr/week-3-git/ce103-week-3-git/#reverting-3","text":"Performing a git revert is very useful in order to undo a certain commit, without modifying the history of the branch.","title":"Reverting (3)"},{"location":"tr/week-3-git/ce103-week-3-git/#cherry-picking-1","text":"When a certain branch contains a commit that introduced changes we need on our active branch, we can cherry-pick that command! By cherry-pick ing a commit, we create a new commit on our active branch that contains the changes that were introduced by the cherry-pick ed commit.","title":"Cherry-picking (1)"},{"location":"tr/week-3-git/ce103-week-3-git/#cherry-picking-1_1","text":"Say that commit 76d12 on the dev branch added a change to the index.js file that we want in our master branch. We don't want the entire we just care about this one single commit! Cool, the master branch now contains the changes that 76d12 introduced","title":"Cherry-picking (1)"},{"location":"tr/week-3-git/ce103-week-3-git/#rebasing-1","text":"We just saw how we could apply changes from one branch to another by performing a git merge . Another way of adding changes from one branch to another is by performing a git rebase .","title":"Rebasing (1)"},{"location":"tr/week-3-git/ce103-week-3-git/#rebasing-2","text":"A git rebase copies the commits from the current branch, and puts these copied commits on top of the specified branch. Perfect, we now have all the changes that were made on the master branch available on the dev branch!","title":"Rebasing (2)"},{"location":"tr/week-3-git/ce103-week-3-git/#rebasing-3","text":"A big difference compared to merging, is that Git won't try to find out which files to keep and not keep. The branch that we're rebasing always has the latest changes that we want to keep! You won't run into any merging conflicts this way, and keeps a nice linear Git history.","title":"Rebasing (3)"},{"location":"tr/week-3-git/ce103-week-3-git/#rebasing-4","text":"This example shows rebasing on the master branch. In bigger projects, however, you usually don't want to do that. A git rebase changes the history of the project as new hashes are created for the copied commits!","title":"Rebasing (4)"},{"location":"tr/week-3-git/ce103-week-3-git/#rebasing-5","text":"Rebasing is great whenever you're working on a feature branch, and the master branch has been updated. You can get all the updates on your branch, which would prevent future merging conflicts!","title":"Rebasing (5)"},{"location":"tr/week-3-git/ce103-week-3-git/#interactive-rebase-1","text":"Before rebasing the commits, we can modify them! We can do so with an interactive rebase . An interactive rebase can also be useful on the branch you're currently working on, and want to modify some commits.","title":"Interactive Rebase (1)"},{"location":"tr/week-3-git/ce103-week-3-git/#interactive-rebase-2","text":"There are 6 actions we can perform on the commits we're rebasing: reword : Change the commit message edit : Amend this commit squash : Meld commit into the previous commit fixup : Meld commit into the previous commit, without keeping the commit's log message exec : Run a command on each commit we want to rebase drop : Remove the commit","title":"Interactive Rebase (2)"},{"location":"tr/week-3-git/ce103-week-3-git/#interactive-rebase-3","text":"Awesome! This way, we can have full control over our commits. If we want to remove a commit, we can just drop it.","title":"Interactive Rebase (3)"},{"location":"tr/week-3-git/ce103-week-3-git/#interactive-rebase-4","text":"Or if we want to squash multiple commits together to get a cleaner history, no problem! Interactive rebasing gives you a lot of control over the commits you're trying to rebase, even on the current active branch","title":"Interactive Rebase (4)"},{"location":"tr/week-3-git/ce103-week-3-git/#useful-hints-1","text":"built-in git GUI gitk","title":"Useful Hints (1)"},{"location":"tr/week-3-git/ce103-week-3-git/#useful-hints-2","text":"use colorful git output git config color.ui true","title":"Useful Hints (2)"},{"location":"tr/week-3-git/ce103-week-3-git/#useful-hints-3","text":"show log on just one line per commit git config format.pretty oneline","title":"Useful Hints (3)"},{"location":"tr/week-3-git/ce103-week-3-git/#useful-hints-4","text":"use interactive adding git add -i HEAD~2 // previous two commits fro head HEAD~~ // previous two commits from head HEAD@{2} // reflog order 18fe5 // previous commit hash","title":"Useful Hints (4)"},{"location":"tr/week-3-git/ce103-week-3-git/#git-flow","text":"A successful Git branching model \u00bb nvie.com","title":"GIT Flow"},{"location":"tr/week-3-git/ce103-week-3-git/#hotfix","text":"OneFlow \u2013 a Git branching model and workflow | End of Line Blog a simple git branching model \u00b7 GitHub","title":"Hotfix"},{"location":"tr/week-3-git/ce103-week-3-git/#git-decision-tree","text":"http://justinhileman.info/article/git-pretty/git-pretty.png","title":"GIT Decision Tree"},{"location":"tr/week-3-git/ce103-week-3-git/#git-in-action-1","text":"","title":"GIT in action (1)"},{"location":"tr/week-3-git/ce103-week-3-git/#git-in-action-2","text":"","title":"GIT in action (2)"},{"location":"tr/week-3-git/ce103-week-3-git/#git-in-action-3","text":"","title":"GIT in action (3)"},{"location":"tr/week-3-git/ce103-week-3-git/#git-in-action-4","text":"","title":"GIT in action (4)"},{"location":"tr/week-3-git/ce103-week-3-git/#git-in-action-5","text":"","title":"GIT in action (5)"},{"location":"tr/week-3-git/ce103-week-3-git/#git-in-action-6","text":"","title":"GIT in action (6)"},{"location":"tr/week-3-git/ce103-week-3-git/#git-in-action-7","text":"","title":"GIT in action (7)"},{"location":"tr/week-3-git/ce103-week-3-git/#gource","text":"https://gource.io/","title":"Gource"},{"location":"tr/week-3-git/ce103-week-3-git/#references-1","text":"Source Code Management | Atlassian Git Tutorial . What is Source Code Management or Version Control ? - The Linux Juggernaut https://www.edureka.co/blog/how-to-use-github/ https://www.edureka.co/blog/git-tutorial/ https://www.edureka.co/blog/install-git/","title":"References (1)"},{"location":"tr/week-3-git/ce103-week-3-git/#references-2","text":"git - the simple guide - no deep shit! GitHub - rogerdudler/git-guide: git - the simple guide https://dev.to/lydiahallie/cs-visualized-useful-git-commands-37p1#merge How to write a good commit message - DEV Community https://blog.xebialabs.com/2016/06/14/periodic-table-devops-tools-v-2/","title":"References (2)"},{"location":"tr/week-3-git/ce103-week-3-git/#references-3","text":"https://harness.io/2018/01/devops-tools-lifecycle-mesh-2018/ https://medium.com/swlh/how-to-become-an-devops-engineer-in-2020-80b8740d5a52 https://www.lucidchart.com/blog/devops-process-flow https://www.researchgate.net/publication/262450962_Rugby_An_Agile_Process_Model_Based_on_Continuous_Delivery","title":"References (3)"},{"location":"tr/week-3-git/ce103-week-3-git/#references-4","text":"git - the simple guide - no deep shit! Git Tutorial | Commands And Operations In Git | Edureka How to write a good commit message - DEV Community An Introduction to Git and GitHub by Brian Yu - YouTube","title":"References (4)"},{"location":"tr/week-3-git/ce103-week-3-git/#references-5","text":"https://education.github.com/git-cheat-sheet-education.pdf NDP Software :: Git Cheatsheet ; Learn Git Branching https://guides.github.com/introduction/git-handbook/","title":"References (5)"},{"location":"tr/week-4-test/ce103-week-4-test/","text":"CE103 Algorithms and Programming I \u00b6 Week-4 \u00b6 Fall Semester, 2021-2022 \u00b6 Download DOC , SLIDE , PPTX Introduction to Code Reusability and Automated Testing \u00b6 During this course we will use entry level of shared library development and their tests and test automations. Also we will see TDD(Test Driven Development) approach. During this course we will use Windows OS, Eclipse and Visual Studio Commuity Edition environments for examples. Each example will include two function \"Hello \" printing function with name sayHelloTo(name) and sum of two variable function for basic, sum = sum(a,b). This sum function will add a to b and return result to sum variable. We will locate them in library and use them from a console application, also we will create unit tests for testing their functionalities and return variables Shared Library Development \u00b6 C Programming (Static Library) \u00b6 Visual Studio Community Edition \u00b6 In this sample we will create c-lib-sample project that contains library, executable, unit tests and unit test runners. First of all you install Visual Studio Community Edition from website Visual Studio 2019 Community Edition - Son \u00dccretsiz S\u00fcr\u00fcm\u00fc \u0130ndir Open visual studio community edition and select create a new project Select create a new project Select C++ static library from project list Name static library project Default configuration come with C++ project types and setting In the c-sample-lib.cpp you will sample function void fncsamplelib () { } Delete pch.h and pch.c files. Also disable use precompiled header settings from configurations and change to \"Not Using Precomplied Headers\", also you can delete precomplied Header File. Customize library header name and update \"framework.h\" to \"samplelib.h\" Insert your functions inside the c-sample-lib.c and update header files also. // c-sample-lib.cpp : Defines the functions for the static library. // #include \"samplelib.h\" #include \"stdio.h\" /// <summary> /// /// </summary> /// <param name=\"name\"></param> void sayHelloTo ( char * name ){ if ( name != NULL ){ printf ( \"Hello %s \\n \" , name ); } else { printf ( \"Hello There \\n \" ); } } /// <summary> /// /// </summary> /// <param name=\"a\"></param> /// <param name=\"b\"></param> /// <returns></returns> int sum ( int a , int b ){ int c = 0 ; c = a + b ; return c ; } also update samplelib.h #pragma once #define WIN32_LEAN_AND_MEAN // Exclude rarely-used stuff from Windows headers void sayHelloTo ( char * name ); int sum ( int a , int b ); If you check configuration you will see that for C complier we are using Microsoft Environment and Toolkits Now we can compile our library You can follow operation from output window in debug folder we will see our output now we will add a console application c-sample-app and use our library select C++ Windows Console Application from list C++ Console Application Selection will generate a C++ console project we can change extension to C to compile our application as C application. we will convert c-sample-app.c to following code #include <stdio.h> /// <summary> /// /// </summary> /// <returns></returns> int main () { printf ( \"Hello World! \\n \" ); } after conversion set c-sample-app as startup project and build it this will create c-sample-app.exe in the same folder with c-sample-lib.lib library if we run application we will see only \"Hello World\" now we will see two options to add library as references in our application and use its functions. First option right click references for c-sample-app and add current library as reference Select Add Reference Browse for solution and select c-sample-lib You can check added reference from references section now we can include required headers from c-sample-lib folder and use it. we can include required header with relative path as follow or with configuration #include <stdio.h> #include \"..\\c-sample-lib\\samplelib.h\" /// <summary> /// /// </summary> /// <returns></returns> int main () { printf ( \"Hello World! \\n \" ); } we can build our c-sample-app also we can only write header name #include <samplelib.h> for this we need to configure include directories select c-sample-lib header file location browse for folder your full path will be added to your configuration if you add header file paths to your configuration you can use header files by name in your source code #include <stdio.h> #include <samplelib.h> /// <summary> /// /// </summary> /// <returns></returns> int main () { printf ( \"Hello World! \\n \" ); } we can compile the following we don't have problems but here we need to configure relative paths for configuration open include library settings and update with relative path ..\\c-sample-lib now we have portable source code configuration. we can call our functions and then we can update header and library folder configurations. #include <stdio.h> #include <samplelib.h> /// <summary> /// /// </summary> /// <returns></returns> int main () { int result = 0 ; //printf(\"Hello World!\\n\"); result = sum ( 5 , 4 ); sayHelloTo ( \"Computer\" ); printf ( \"Result is %d \\n \" , result ); printf ( \"Press any key to continue... \\n \" ); getchar (); return 0 ; } when you run you will see the following outputs, that mean we called library functions. static library is a code sharing approach if you want to share your source code with your customers then you can share static libraries and header files together. Another case you can use a precompiled static library with you or this library can be part of any installation then if there is a installed app and static libraries are placed on system folder or any different location then you can use configuration files to set library path and included header paths Now we can remove project from c-sample-app references but we will set library file in configuration Before this copy static library and header files to a folder like that DebugStaticLibDeployment Set C/C++ -> General -> Additional Include Directories There is a bug in configurations and relative path not finding headers so for this reason we will set full path but this is not a good practice for team working Not Working .. \\ c - sample - lib \\ DebugStaticLibDeployment Working E : \\ ... \\ c - lib - sample \\ c - sample - lib \\ DebugStaticLibDeployment Now we will set library folder that our static library placed we will set VC++ Directories -> Library Directories Here is the same issue if we use relative path it doesn't work we need to set full path for library folder Working E : \\ ... \\ c - lib - sample \\ c - sample - lib \\ DebugStaticLibDeployment Not Working .. \\ c - sample - lib \\ DebugStaticLibDeployment If we set full path for both libraries and headers then we need to set library name for project Linker->Input->Additional Dependencies In this case we will compile c-sample-app and we do not need to compile c-sample-lib because we copied output files to different location and they are ready to use. current source code will be like that nothing changed #include <stdio.h> #include <samplelib.h> /// <summary> /// /// </summary> /// <returns></returns> int main () { int result = 0 ; //printf(\"Hello World!\\n\"); result = sum ( 5 , 4 ); sayHelloTo ( \"Computer\" ); printf ( \"Result is %d \\n \" , result ); printf ( \"Press any key to continue... \\n \" ); getchar (); return 0 ; } and output There is a option about portability that we can set for team works We will remove all library related settings from configurations and we will write them in source code Clear linker->general->additional library directories Clear C/C++ -> General -> Additional Include Directories Clear Linker->Input->Additional Dependencies Now we can set this configurations in source code as follow #pragma comment(lib, \"..\\\\DebugStaticLibDeployment\\\\c-sample-lib.lib\") #include \"..\\DebugStaticLibDeployment\\samplelib.h\" #include <stdio.h> /// <summary> /// /// </summary> /// <returns></returns> int main () { int result = 0 ; //printf(\"Hello World!\\n\"); result = sum ( 5 , 4 ); sayHelloTo ( \"Computer\" ); printf ( \"Result is %d \\n \" , result ); printf ( \"Press any key to continue... \\n \" ); getchar (); return 0 ; } with this configuration if your friends download this code then they can run them with their environment without setting a path. C++ Programming (Static Library) \u00b6 Visual Studio Community Edition \u00b6 All steps are similar with C programming above, but you do not need to delete pch.h You should take care about compiled source codes for example if your code is compiled for x86 then your application also should use the x86 configuration else x64 then library should be x64 complied version. Source will look like the following // cpp-sample-app.cpp : This file contains the 'main' function. Program execution begins and ends there. // #pragma comment(lib, \"..\\\\DebugStaticLibDeployment\\\\cpp-sample-lib.lib\") #include \"..\\DebugStaticLibDeployment\\samplelib.h\" #include <iostream> int main () { std :: cout << \"Hello World! \\n \" ; int result = 0 ; //printf(\"Hello World!\\n\"); result = sum ( 5 , 4 ); sayHelloTo ( \"Computer\" ); printf ( \"Result is %d \\n \" , result ); printf ( \"Press any key to continue... \\n \" ); getchar (); return 0 ; } C/C++ WSL Option \u00b6 Install WSL GitHub - ucoruh/ns3-wsl-win10-setup: ns3 windows 10 WSL2 setup and usage Create a Linux project Configure Platform Toolset to WSL Select GCC for Windows Subsystem for Linux Put a breakpoint and run debugger In the debugger for WSL you can use local WSL installation but if you want to run it on Release setting it require a SSH connection. Configure SSH parameters so you have to complete the following steps. C/C++ Remote Linux Option over SSH \u00b6 Enable SSH SSH on Windows Subsystem for Linux (WSL) | Illuminia Studios Connect to Remote WSL Environment Ba\u011flan hedef Linux sisteminize Visual Studio | Microsoft Docs C# Programming (Dinamik Library) \u00b6 Visual Studio Community Edition \u00b6 In C# project we will create class library we have several options for this sample we will select .NET core that we can build cross platform library There is no static library option We will select .Net Core 3.1 You will have default empty class library file In the project you can see .NETcore reference We can build empty class library that generate dll for our application Now we will add Console Application but this will also use .NETCore Select New Project Name the project Select .NETCore framework You will have the following sample main.cs file using System ; namespace csharp_sample_app { class Program { static void Main ( string [] args ) { Console . WriteLine ( \"Hello World!\" ); } } } Now we can link projects with adding references open reference section browse for class library project output folder and select output dll file for console application now we can update our library code and use it in console application copy following sample to sampleLibClass file in the library using System ; namespace csharp_sample_lib { public class sampleLibClass { public static void sayHelloTo ( string name ) { if (! String . IsNullOrEmpty ( name )) { Console . WriteLine ( \"Hello \" + name ); } else { Console . WriteLine ( \"Hello There\" ); } } public static int sum ( int a , int b ) { int c = 0 ; c = a + b ; return c ; } } } after this operation copy following sample to console application and build app then you can run using csharp_sample_lib ; using System ; namespace csharp_sample_app { class Program { static void Main ( string [] args ) { Console . WriteLine ( \"Hello World!\" ); sampleLibClass . sayHelloTo ( \"Computer\" ); int result = sampleLibClass . sum ( 5 , 4 ); Console . WriteLine ( \"Results is\" + result ); Console . WriteLine ( \"Results is {0}\" , result ); Console . Read (); } } } You will see following output that mean we called DLL functions Also we can publish this console application with dll for linux environment or others for linux environment we should install .NETCore follow the link below or commands that I shared with you as below for deployment How to Install Dotnet Core on Ubuntu 20.04 \u2013 TecAdmin Step 1 \u2013 Enable Microsoft PPA wget https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb sudo dpkg -i packages-microsoft-prod.deb Step 2 \u2013 Installing Dotnet Core SDK sudo apt update sudo apt install apt-transport-https sudo apt install dotnet-sdk-3.1 Step 3 \u2013 Install Dotnet Core Runtime Only To install .NET Core Runtime on Ubuntu 20.04 LTS system, execute the commands: sudo apt update To install the previous version of .Net core runtime 2.1, type: sudo apt install dotnet-runtime-2.1 Press \u201cy\u201d for any input prompted by the installer. Step 4 \u2013 (Optional) Check .NET Core Version You can use dotnet command line utility to check installed version of .NET Core on your system. To check dotnet version, type: dotnet --version Now we will publish our application as single executable Open publish menu Select netcoreapp3.1 and Release for linux-x64 Select produce single file After succesfull publish you will have linux binary that you can run with WSL Open WSL and enter the path where this folder located and run application as follow check dotnet --version and then run application you will see similar output In this sample we created single application from settings lets try with shared library located option uncheck the \"produce single file\" option and publish again. Then you will have the following outputs If you run csharp-sample-app you will have the same output Java Programming \u00b6 Eclipse IDE \u00b6 You should download and install eclipse installer and then you should select Eclipse IDE for Java Developers Eclipse Installer 2021-09 R | Eclipse Packages select create a project select java project give project name select finish first we need to add a default package to keep everything organized then we can create our class that includes our functions give class a name you will have following class with main We will create sample java library with static functions as below. package ce103 ; import java.io.IOException ; public class JavaSampleLib { public static void sayHelloTo ( String name ) { if ( name . isBlank () || name . isEmpty ()) { System . out . println ( \"Hello \" + name ); } else { System . out . println ( \"Hello There\" ); } } public static int sum ( int a , int b ) { int c = 0 ; c = a + b ; return c ; } public static void main ( String [] args ) { // TODO Auto-generated method stub System . out . println ( \"Hello World!\" ); JavaSampleLib . sayHelloTo ( \"Computer\" ); int result = JavaSampleLib . sum ( 5 , 4 ); System . out . println ( \"Results is\" + result ); System . out . printf ( \"Results is %d \\n\" , result ); try { System . in . read (); } catch ( IOException e ) { // TODO Auto-generated catch block e . printStackTrace (); } } } also we can add main method to run our library functions. If we run this file its process main function we can see output from console as below There is no exe files java runtime environment run class files but we can export this as an executable. Select Java->Runnable JAR File click next and set output path for jar file If our project has several external dependecy then we can extract this required files (jar, so, dll) in seperated folder or we can combine them and generate a single executable jar Lets pack everthing together, Select launch configuration that has main function end of this operation we will have the following jar that we can by click When you click application if cannot run then try command line to see problem enter jar folder and run the following command java -jar JavaSampleLibExecutable.jar In my case eclipse build JDK is newer than that I installed and set for my OS If we check version we can see problem Java version 1.8.0_231 We can found installed and builded JDK for our application from Eclipse setting select environments select installed JRE or JDK you can see installed JRE or JDK home C : \\Program Files\\Java\\jdk-16.0.1 Open system environment to fix this problem Check user settings first Check system settings we will move up the JDK 16 configuration then command line will run first java Also in system setting check JAVA_HOME After this settings close current command line and open new one write java --version if you see java version updated and 16.0.1 then settings are correct and now if we enter and run application as follow we will see output But when you click this jar its not running as you see so we have options to provide a clickable application there Launch4j is an option here Launch4j - Cross-platform Java executable wrapper you can watch this tutorial also How to convert jar to exe using Launch4J Full explanation - YouTube Download and install launch4j and open application configure your application settings similar to below select jar file and exe output path we can customize main class if have multiple main class select console from setting for this application we can provide a single running application, this setting avoid to run multiple instances we need to set runtime environment versions you can set system parameters before running application with splash screen you can show a splash screen image for your application File attributes such as version product information is configured from version info tab if your application runtime condition has an error then you can show this customized messages also with this options save configuration file xml and compile settings you will see generated output file in log screen Compiling resources Linking Wrapping WARNING: Sign the executable to minimize antivirus false positives or use launching instead of wrapping. Successfully created C:\\Users\\ugur.coruh\\Desktop\\java-export-sample\\JavaSampleLibExecutable.exe now we can run exe by click another option here adding a bat file to run current jar file JavaSampleLibExecutable.bat java -jar JavaSampleLibExecutable.jar if we click bat file then we will automate command line task for current jar file Now return back to our java library and create another console application that use library functions you can set libraries in this step from but our library should exported for our solution Select Add External JARs... Open Exported jar folder and select Or we can select by Add jar from current workspace but in this step I won't add anything I'll add references later we will have the following project lets create a package and lets create a main class for our application check create main function right click to project and add reference you can enter same configurations from project properties Lets export our library as a JAR file and then add to our classpath Select JAR file we configured output as C : \\Users\\ugur.coruh\\Desktop\\java-export-sample\\JavaSampleLib.jar In the same export folder now we have JavaSampleLib.jar return back to java-sample-app and then add this jar file to our project Build Path->Add External Archives you will see its added to reference libraries in our JavaSampleApp.java we can use the following source codes package ce103 ; import java.io.IOException ; public class JavaSampleApp { public static void main ( String [] args ) { // TODO Auto-generated method stub System . out . println ( \"Hello World!\" ); JavaSampleLib . sayHelloTo ( \"Computer\" ); int result = JavaSampleLib . sum ( 5 , 4 ); System . out . println ( \"Results is\" + result ); System . out . printf ( \"Results is %d \\n\" , result ); try { System . in . read (); } catch ( IOException e ) { // TODO Auto-generated catch block e . printStackTrace (); } } } When we run application we will see similar output Lets export this application with its dependent library Select runnable jar Set Launch configuration and Export destination C : \\Users\\ugur.coruh\\Desktop\\java-export-sample\\JavaSampleAppSingle.jar In this option we will have single jar file In the export folder we do not see reference libraries and we can run with command line only change copy required libraries setting and then give a new name for new jar file and export C : \\Users\\ugur.coruh\\Desktop\\java-export-sample\\JavaSampleAppMultiple.jar now we have a folder that contains our libraries referenced in this file we can find our library if we test our application we will see it will work if we delete JavaSampleLib.jar and then try running application we will get error Program Testing \u00b6 Unit Test Development \u00b6 C Unit Tests \u00b6 Visual Studio Community Edition \u00b6 C++ Unit Tests \u00b6 Visual Studio Community Edition \u00b6 C/C++ i\u00e7in birim testleri yazma - Visual Studio (Windows) | Microsoft Docs Use cpp-sample-lib project and add select Native Unit Test set project path and name you will have cpp-sample-test project add library project from references Add cpp-sample-lib to cpp-sample-test project cpp-sample-test.cpp #include \"pch.h\" #include \"CppUnitTest.h\" #include \"..\\cpp-sample-lib\\samplelib.h\" using namespace Microsoft :: VisualStudio :: CppUnitTestFramework ; namespace cppsampletest { TEST_CLASS ( cppsampletest ) { public : TEST_METHOD ( TestSumCorrect ) { Assert :: AreEqual ( 9 , sum ( 4 , 5 )); } TEST_METHOD ( TestSumInCorrect ) { Assert :: AreEqual ( 10 , sum ( 4 , 5 )); } }; } C# Unit Tests \u00b6 Visual Studio Community Edition (MSTestV2+.Net) \u00b6 Install extension fine code coverage https://marketplace.visualstudio.com/items?itemName=FortuneNgwenya.FineCodeCoverage Create a .Net Framework Library set project framework and path Create library functions using System ; using System.Collections.Generic ; using System.Text ; namespace cs_lib_sample { public class SampleLibClass { public static string sayHelloTo ( string name ) { string result = String . Empty ; if (! String . IsNullOrEmpty ( name )) { result = \"Hello \" + name ; } else { result = \"Hello There\" ; } Console . WriteLine ( result ); return result ; } public static int sum ( int a , int b ) { int c = 0 ; c = a + b ; return c ; } public int multiply ( int a , int b ) { return a * b ; } } } right click and then create unit test project press OK enter test code using Microsoft.VisualStudio.TestTools.UnitTesting ; using cs_lib_sample ; using System ; using System.Collections.Generic ; using System.Linq ; using System.Text ; using System.Threading.Tasks ; namespace cs_lib_sample.Tests { [TestClass()] public class SampleLibClassTests { [TestMethod()] public void testSayHelloTo () { Assert . AreEqual ( \"Hello Computer\" , SampleLibClass . sayHelloTo ( \"Computer\" ), \"Regular say hello should work\" ); } [TestMethod()] public void testSayHelloToWrong () { Assert . AreEqual ( \"Hello All\" , SampleLibClass . sayHelloTo ( \"Computer\" ), \"Regular say hello won't work\" ); } [TestMethod()] public void testSumCorrect () { Assert . AreEqual ( 9 , SampleLibClass . sum ( 4 , 5 ), \"Regular sum should work\" ); } [TestMethod()] public void testSumWrong () { Assert . AreEqual ( 10 , SampleLibClass . sum ( 4 , 5 ), \"Regular sum shouldn't work\" ); } [TestMethod()] public void testMultiply () { SampleLibClass sampleLib = new SampleLibClass (); Assert . AreEqual ( 20 , sampleLib . multiply ( 4 , 5 ), \"Regular multiplication should work\" ); } } } Run tests you will code coverage and entered or passed branches Visual Studio Community Edition (NUnit+.NETCore) \u00b6 use cshar-sample-lib for this example create and add a unit test project to solution Add project reference SampleLibraryTestClasss in NUnit Project using csharp_sample_lib ; using NUnit.Framework ; namespace csharp_sample_lib_test { public class SampleLibraryTestClass { sampleLibClass sampleLib ; [SetUp] public void Setup () { sampleLib = new sampleLibClass (); } [Test] public void testSayHelloTo () { Assert . AreEqual ( \"Hello Computer\" , sampleLibClass . sayHelloTo ( \"Computer\" ), \"Regular say hello should work\" ); } [Test] public void testSayHelloToWrong () { Assert . AreEqual ( \"Hello All\" , sampleLibClass . sayHelloTo ( \"Computer\" ), \"Regular say hello won't work\" ); } [Test] public void testSumCorrect () { Assert . AreEqual ( 9 , sampleLibClass . sum ( 4 , 5 ), \"Regular sum should work\" ); } [Test] public void testSumWrong () { Assert . AreEqual ( 10 , sampleLibClass . sum ( 4 , 5 ), \"Regular sum shouldn't work\" ); } [Test] public void testMultiply () { Assert . AreEqual ( 20 , sampleLib . multiply ( 4 , 5 ), \"Regular multiplication should work\" ); } } } sample class library using System ; namespace csharp_sample_lib { public class sampleLibClass { public static string sayHelloTo ( string name ) { string result = String . Empty ; if (! String . IsNullOrEmpty ( name )) { result = \"Hello \" + name ; } else { result = \"Hello There\" ; } Console . WriteLine ( result ); return result ; } public static int sum ( int a , int b ) { int c = 0 ; c = a + b ; return c ; } public int multiply ( int a , int b ) { return a * b ; } } } Open test explorer and run tests or you can run from project Also we can create unit test from library class, right click the sampleLibClass and select create unit tests but this option do not provide nunit tests. using Microsoft.VisualStudio.TestTools.UnitTesting ; using csharp_sample_lib ; using System ; using System.Collections.Generic ; using System.Text ; namespace csharp_sample_lib.Tests { [TestClass()] public class sampleLibClassTests { [TestMethod()] public void sayHelloToTest () { Assert . Fail (); } [TestMethod()] public void sumTest () { Assert . Fail (); } [TestMethod()] public void multiplyTest () { Assert . Fail (); } } } we will not commit this changes and continue from nunit test project, the fine code coverage also work for nunit test but not provide inline highlighting if we run tests we will have the following outputs Inline code highlight is part of enterprise visual studio edition Analyzing code coverage in Visual Studio - DEV Community TL;DR \u00b6 Additional information you can use OpenCover + Nunit Runner + Report Generator together to setup a code coverage report but it has complex batch running process. After a few try I decided to use fine code coverage but here is the usage not tested well. First unit test runner tool doesn't support .Net Core c# - The NUnit 3 driver encountered an error while executing reflected code (NUnit.Engine.NUnitEngineException) - Stack Overflow Follow the instructions on the link CMD OpenCover \u00b7 sukhoi1/Useful-Notes Wiki \u00b7 GitHub Install OpenCover, ReportGenerator, Nunit,Runners packages then use the package installation folder to get tools that you need Here is a sample for open cover, select package and copy path Goto path and tools C : \\Users\\ugur.coruh\\.nuget\\packages\\opencover\\4.7.1221 You need to setup some batch similar with following run-test-coverage.bat set pathA = C:\\Users\\ugur.coruh\\.nuget\\packages\\opencover\\4.7.1221\\tools set pathB = C:\\Users\\ugur.coruh\\.nuget\\packages\\nunit.consolerunner\\3.12.0\\tools set pathC = C:\\Users\\ugur.coruh\\.nuget\\packages\\reportgenerator\\4.8.13\\tools\\netcoreapp3.0 set dllpath = C:\\Users\\ugur.coruh\\Desktop\\csharp-sample-lib\\csharp-sample-lib-test\\bin\\Debug\\netcoreapp3.1 \" %pathA% \\OpenCover.Console.exe\" ^ - targetargs: \" %dllpath% \\csharp-sample-lib-test.dll\" ^ - filter: \"+[csharp-sample-lib*]* -[*test]*\" ^ - target: \" %pathB% \\nunit3-console.exe\" ^ - output: \" %dllpath% \\coverReport.xml\" ^ - skipautoprops -register:user && \" %pathC% \\ReportGenerator.exe\" -reports: \" %dllpath% \\coverReport.xml\" -targetdir: \"\" %dllpath% \\coverage \" pause but nunit3-console.exe gives error for this compatibility issues I prefer to use fine code coverage extension. OpenCover related studies Code coverage of manual or automated tests with OpenCover for .NET applications \u2013 Automation Rhapsody Code coverage of .NET Core unit tests with OpenCover \u2013 Automation Rhapsody Sample OpenCover report Summary - Coverage Report Download and Setup OpenCover, NUnit Console, Report Generator without Package Manager \u00b6 You can also download the tools from github project pages and install on your operating system, OpenCover \u00b6 Releases \u00b7 OpenCover/opencover \u00b7 GitHub Select advanced and then install for all users ReportGenerator \u00b6 Release ReportGenerator_4.8.13 \u00b7 danielpalme/ReportGenerator \u00b7 GitHub NUnit Console \u00b6 Downloads NUnit + MSTest Batch Report Generation (Not Tested) \u00b6 OpenCover and ReportGenerator Unit Test Coverage in Visual Studio 2013 and 2015 \u2013 CodeHelper.Net OpenCover and ReportGenerator Unit Test Coverage in Visual Studio 2013 and 2015 - CodeProject Java Unit Tests \u00b6 Eclipse IDE (JUnit4 , JUnit5) \u00b6 In this sample we will create two example for similar library Please check the following links JUnit 5 tutorial - Learn how to write unit tests JUnit 5 JUnit 5 User Guide https://www.eclemma.org/ JUnit Hello World Example - Examples Java Code Geeks - 2021 https://yasinmemic.medium.com/java-ile-unit-test-yazmak-birim-test-ca15cf0d024b Java Application + JUnit \u00b6 In normal java application we can right click the project java-sample-lib and add Junit case and you will have the following test class Now we will create tests that check our function flowchart and return values We need to cover all code branches that we coded I have updated JavaSampleLib.java as follow to check outputs JavaSampleLib.java package ce103 ; public class JavaSampleLib { public static String sayHelloTo ( String name ) { String output = \"\" ; if ( ! name . isBlank () && ! name . isEmpty ()){ output = \"Hello \" + name ; } else { output = \"Hello There\" ; } System . out . println ( output ); return output ; } public static int sum ( int a , int b ) { int c = 0 ; c = a + b ; return c ; } public int multiply ( int a , int b ) { return a * b ; } // public static void main(String[] args) { // // TODO Auto-generated method stub // System.out.println(\"Hello World!\"); // // JavaSampleLib.sayHelloTo(\"Computer\"); // int result = JavaSampleLib.sum(5, 4); // System.out.println(\"Results is\" + result); // System.out.printf(\"Results is %d \\n\", result); // // // try { // System.in.read(); // } catch (IOException e) { // // TODO Auto-generated catch block // e.printStackTrace(); // } // // } } and JavaSampleLibTest.java package ce103 ; import static org.junit.jupiter.api.Assertions.* ; import org.junit.jupiter.api.AfterAll ; import org.junit.jupiter.api.AfterEach ; import org.junit.jupiter.api.BeforeAll ; import org.junit.jupiter.api.BeforeEach ; import org.junit.jupiter.api.DisplayName ; import org.junit.jupiter.api.RepeatedTest ; import org.junit.jupiter.api.Test ; import org.junit.jupiter.params.ParameterizedTest ; import org.junit.jupiter.params.provider.MethodSource ; class JavaSampleLibTest { JavaSampleLib sampleLib ; @BeforeAll static void setUpBeforeClass () throws Exception { } @AfterAll static void tearDownAfterClass () throws Exception { } @BeforeEach void setUp () throws Exception { sampleLib = new JavaSampleLib (); } @AfterEach void tearDown () throws Exception { } @Test @DisplayName ( \"Simple Say Hello should work\" ) void testSayHelloTo () { assertEquals ( \"Hello Computer\" , JavaSampleLib . sayHelloTo ( \"Computer\" ), \"Regular say hello should work\" ); } @Test @DisplayName ( \"Simple Say Hello shouldn' work\" ) void testSayHelloToWrong () { assertEquals ( \"Hello All\" , JavaSampleLib . sayHelloTo ( \"Computer\" ), \"Regular say hello won't work\" ); } @Test @DisplayName ( \"Simple sum should work\" ) void testSumCorrect () { assertEquals ( 9 , JavaSampleLib . sum ( 4 , 5 ), \"Regular sum should work\" ); } @Test @DisplayName ( \"Simple sum shouldn't work\" ) void testSumWrong () { assertEquals ( 10 , JavaSampleLib . sum ( 4 , 5 ), \"Regular sum shouldn't work\" ); } @Test @DisplayName ( \"Simple multiplication should work\" ) void testMultiply () { assertEquals ( 20 , sampleLib . multiply ( 4 , 5 ), \"Regular multiplication should work\" ); } @RepeatedTest ( 5 ) @DisplayName ( \"Ensure correct handling of zero\" ) void testMultiplyWithZero () { assertEquals ( 0 , sampleLib . multiply ( 0 , 5 ), \"Multiple with zero should be zero\" ); assertEquals ( 0 , sampleLib . multiply ( 5 , 0 ), \"Multiple with zero should be zero\" ); } public static int [][] data () { return new int [][] { { 1 , 2 , 2 }, { 5 , 3 , 15 }, { 121 , 4 , 484 },{ 2 , 2 , 2 } }; } @ParameterizedTest @MethodSource ( value = \"data\" ) void testWithStringParameter ( int [] data ) { JavaSampleLib tester = new JavaSampleLib (); int m1 = data [ 0 ] ; int m2 = data [ 1 ] ; int expected = data [ 2 ] ; assertEquals ( expected , tester . multiply ( m1 , m2 )); } } if we run tests we will see all results there also we can see the code coverage of tests when we open our source code (just close and open again another case highlighting will not work) you will see tested part of your codes Maven Java Application + JUnit \u00b6 Lets create Maven project with tests Create a maven project File -> New -> Maven Project Lets convert our sample java-sample-lib directories to standard folder structure for test and app division Maven \u2013 Introduction to the Standard Directory Layout Also for intro you can use this JUnit Hello World Example - Examples Java Code Geeks - 2021 Eclipse Maven Java JUnit 4.12 (pulled by Maven automatically) Lets give new sample java-sample-lib-mvnbut in this time we will create a maven project pom.xml file <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\" > <modelVersion> 4.0.0 </modelVersion> <groupId> com.ce103 </groupId> <artifactId> java-sample-lib-ext </artifactId> <version> 0.0.1-SNAPSHOT </version> <name> Java Sample Lib </name> <description> Java Sample with Unit Test </description> </project> we will add JUnit 5 for our project <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\" > <modelVersion> 4.0.0 </modelVersion> <groupId> com.ce103 </groupId> <artifactId> java-sample-lib-ext </artifactId> <version> 0.0.1-SNAPSHOT </version> <name> Java Sample Lib </name> <description> Java Sample with Unit Test </description> <dependencies> <dependency> <groupId> org.junit.jupiter </groupId> <artifactId> junit-jupiter-params </artifactId> <version> 5.7.1 </version> <scope> test </scope> </dependency> </dependencies> </project> it will automatically download libraries Create java sample library in ce103 package, first create java package In this package create library class copy content from other library package ce103 ; public class JavaSampleLib { public static String sayHelloTo ( String name ) { String output = \"\" ; if ( ! name . isBlank () && ! name . isEmpty ()){ output = \"Hello \" + name ; } else { output = \"Hello There\" ; } System . out . println ( output ); return output ; } public static int sum ( int a , int b ) { int c = 0 ; c = a + b ; return c ; } public int multiply ( int a , int b ) { return a * b ; } } Now lets create tests inf src/test/java create a JUnit Case you will simple template package ce103 ; import static org.junit.jupiter.api.Assertions.* ; import org.junit.jupiter.api.AfterAll ; import org.junit.jupiter.api.AfterEach ; import org.junit.jupiter.api.BeforeAll ; import org.junit.jupiter.api.BeforeEach ; import org.junit.jupiter.api.Test ; class JavaSampleLibTest { @BeforeAll static void setUpBeforeClass () throws Exception { } @AfterAll static void tearDownAfterClass () throws Exception { } @BeforeEach void setUp () throws Exception { } @AfterEach void tearDown () throws Exception { } @Test void testSayHelloTo () { fail ( \"Not yet implemented\" ); } @Test void testSum () { fail ( \"Not yet implemented\" ); } @Test void testMultiply () { fail ( \"Not yet implemented\" ); } } now lets copy tests from other projects That's a part of java unit testing... TDD (Test Driven Development) \u00b6 Test and Deployment Automation Management \u00b6 Travis-CI + C \u00b6 Travis-CI + Cpp \u00b6 Travis-CI + C \u00b6 Travis-CI + Java \u00b6 References \u00b6 GitHub - MicrosoftDocs/cpp-docs: C++ Documentation","title":"Week-4 (Unit Testing and Libraries)"},{"location":"tr/week-4-test/ce103-week-4-test/#ce103-algorithms-and-programming-i","text":"","title":"CE103 Algorithms and Programming I"},{"location":"tr/week-4-test/ce103-week-4-test/#week-4","text":"","title":"Week-4"},{"location":"tr/week-4-test/ce103-week-4-test/#fall-semester-2021-2022","text":"Download DOC , SLIDE , PPTX","title":"Fall Semester, 2021-2022"},{"location":"tr/week-4-test/ce103-week-4-test/#introduction-to-code-reusability-and-automated-testing","text":"During this course we will use entry level of shared library development and their tests and test automations. Also we will see TDD(Test Driven Development) approach. During this course we will use Windows OS, Eclipse and Visual Studio Commuity Edition environments for examples. Each example will include two function \"Hello \" printing function with name sayHelloTo(name) and sum of two variable function for basic, sum = sum(a,b). This sum function will add a to b and return result to sum variable. We will locate them in library and use them from a console application, also we will create unit tests for testing their functionalities and return variables","title":"Introduction to Code Reusability and Automated Testing"},{"location":"tr/week-4-test/ce103-week-4-test/#shared-library-development","text":"","title":"Shared Library Development"},{"location":"tr/week-4-test/ce103-week-4-test/#c-programming-static-library","text":"","title":"C Programming (Static Library)"},{"location":"tr/week-4-test/ce103-week-4-test/#visual-studio-community-edition","text":"In this sample we will create c-lib-sample project that contains library, executable, unit tests and unit test runners. First of all you install Visual Studio Community Edition from website Visual Studio 2019 Community Edition - Son \u00dccretsiz S\u00fcr\u00fcm\u00fc \u0130ndir Open visual studio community edition and select create a new project Select create a new project Select C++ static library from project list Name static library project Default configuration come with C++ project types and setting In the c-sample-lib.cpp you will sample function void fncsamplelib () { } Delete pch.h and pch.c files. Also disable use precompiled header settings from configurations and change to \"Not Using Precomplied Headers\", also you can delete precomplied Header File. Customize library header name and update \"framework.h\" to \"samplelib.h\" Insert your functions inside the c-sample-lib.c and update header files also. // c-sample-lib.cpp : Defines the functions for the static library. // #include \"samplelib.h\" #include \"stdio.h\" /// <summary> /// /// </summary> /// <param name=\"name\"></param> void sayHelloTo ( char * name ){ if ( name != NULL ){ printf ( \"Hello %s \\n \" , name ); } else { printf ( \"Hello There \\n \" ); } } /// <summary> /// /// </summary> /// <param name=\"a\"></param> /// <param name=\"b\"></param> /// <returns></returns> int sum ( int a , int b ){ int c = 0 ; c = a + b ; return c ; } also update samplelib.h #pragma once #define WIN32_LEAN_AND_MEAN // Exclude rarely-used stuff from Windows headers void sayHelloTo ( char * name ); int sum ( int a , int b ); If you check configuration you will see that for C complier we are using Microsoft Environment and Toolkits Now we can compile our library You can follow operation from output window in debug folder we will see our output now we will add a console application c-sample-app and use our library select C++ Windows Console Application from list C++ Console Application Selection will generate a C++ console project we can change extension to C to compile our application as C application. we will convert c-sample-app.c to following code #include <stdio.h> /// <summary> /// /// </summary> /// <returns></returns> int main () { printf ( \"Hello World! \\n \" ); } after conversion set c-sample-app as startup project and build it this will create c-sample-app.exe in the same folder with c-sample-lib.lib library if we run application we will see only \"Hello World\" now we will see two options to add library as references in our application and use its functions. First option right click references for c-sample-app and add current library as reference Select Add Reference Browse for solution and select c-sample-lib You can check added reference from references section now we can include required headers from c-sample-lib folder and use it. we can include required header with relative path as follow or with configuration #include <stdio.h> #include \"..\\c-sample-lib\\samplelib.h\" /// <summary> /// /// </summary> /// <returns></returns> int main () { printf ( \"Hello World! \\n \" ); } we can build our c-sample-app also we can only write header name #include <samplelib.h> for this we need to configure include directories select c-sample-lib header file location browse for folder your full path will be added to your configuration if you add header file paths to your configuration you can use header files by name in your source code #include <stdio.h> #include <samplelib.h> /// <summary> /// /// </summary> /// <returns></returns> int main () { printf ( \"Hello World! \\n \" ); } we can compile the following we don't have problems but here we need to configure relative paths for configuration open include library settings and update with relative path ..\\c-sample-lib now we have portable source code configuration. we can call our functions and then we can update header and library folder configurations. #include <stdio.h> #include <samplelib.h> /// <summary> /// /// </summary> /// <returns></returns> int main () { int result = 0 ; //printf(\"Hello World!\\n\"); result = sum ( 5 , 4 ); sayHelloTo ( \"Computer\" ); printf ( \"Result is %d \\n \" , result ); printf ( \"Press any key to continue... \\n \" ); getchar (); return 0 ; } when you run you will see the following outputs, that mean we called library functions. static library is a code sharing approach if you want to share your source code with your customers then you can share static libraries and header files together. Another case you can use a precompiled static library with you or this library can be part of any installation then if there is a installed app and static libraries are placed on system folder or any different location then you can use configuration files to set library path and included header paths Now we can remove project from c-sample-app references but we will set library file in configuration Before this copy static library and header files to a folder like that DebugStaticLibDeployment Set C/C++ -> General -> Additional Include Directories There is a bug in configurations and relative path not finding headers so for this reason we will set full path but this is not a good practice for team working Not Working .. \\ c - sample - lib \\ DebugStaticLibDeployment Working E : \\ ... \\ c - lib - sample \\ c - sample - lib \\ DebugStaticLibDeployment Now we will set library folder that our static library placed we will set VC++ Directories -> Library Directories Here is the same issue if we use relative path it doesn't work we need to set full path for library folder Working E : \\ ... \\ c - lib - sample \\ c - sample - lib \\ DebugStaticLibDeployment Not Working .. \\ c - sample - lib \\ DebugStaticLibDeployment If we set full path for both libraries and headers then we need to set library name for project Linker->Input->Additional Dependencies In this case we will compile c-sample-app and we do not need to compile c-sample-lib because we copied output files to different location and they are ready to use. current source code will be like that nothing changed #include <stdio.h> #include <samplelib.h> /// <summary> /// /// </summary> /// <returns></returns> int main () { int result = 0 ; //printf(\"Hello World!\\n\"); result = sum ( 5 , 4 ); sayHelloTo ( \"Computer\" ); printf ( \"Result is %d \\n \" , result ); printf ( \"Press any key to continue... \\n \" ); getchar (); return 0 ; } and output There is a option about portability that we can set for team works We will remove all library related settings from configurations and we will write them in source code Clear linker->general->additional library directories Clear C/C++ -> General -> Additional Include Directories Clear Linker->Input->Additional Dependencies Now we can set this configurations in source code as follow #pragma comment(lib, \"..\\\\DebugStaticLibDeployment\\\\c-sample-lib.lib\") #include \"..\\DebugStaticLibDeployment\\samplelib.h\" #include <stdio.h> /// <summary> /// /// </summary> /// <returns></returns> int main () { int result = 0 ; //printf(\"Hello World!\\n\"); result = sum ( 5 , 4 ); sayHelloTo ( \"Computer\" ); printf ( \"Result is %d \\n \" , result ); printf ( \"Press any key to continue... \\n \" ); getchar (); return 0 ; } with this configuration if your friends download this code then they can run them with their environment without setting a path.","title":"Visual Studio Community Edition"},{"location":"tr/week-4-test/ce103-week-4-test/#c-programming-static-library_1","text":"","title":"C++ Programming (Static Library)"},{"location":"tr/week-4-test/ce103-week-4-test/#visual-studio-community-edition_1","text":"All steps are similar with C programming above, but you do not need to delete pch.h You should take care about compiled source codes for example if your code is compiled for x86 then your application also should use the x86 configuration else x64 then library should be x64 complied version. Source will look like the following // cpp-sample-app.cpp : This file contains the 'main' function. Program execution begins and ends there. // #pragma comment(lib, \"..\\\\DebugStaticLibDeployment\\\\cpp-sample-lib.lib\") #include \"..\\DebugStaticLibDeployment\\samplelib.h\" #include <iostream> int main () { std :: cout << \"Hello World! \\n \" ; int result = 0 ; //printf(\"Hello World!\\n\"); result = sum ( 5 , 4 ); sayHelloTo ( \"Computer\" ); printf ( \"Result is %d \\n \" , result ); printf ( \"Press any key to continue... \\n \" ); getchar (); return 0 ; }","title":"Visual Studio Community Edition"},{"location":"tr/week-4-test/ce103-week-4-test/#cc-wsl-option","text":"Install WSL GitHub - ucoruh/ns3-wsl-win10-setup: ns3 windows 10 WSL2 setup and usage Create a Linux project Configure Platform Toolset to WSL Select GCC for Windows Subsystem for Linux Put a breakpoint and run debugger In the debugger for WSL you can use local WSL installation but if you want to run it on Release setting it require a SSH connection. Configure SSH parameters so you have to complete the following steps.","title":"C/C++ WSL Option"},{"location":"tr/week-4-test/ce103-week-4-test/#cc-remote-linux-option-over-ssh","text":"Enable SSH SSH on Windows Subsystem for Linux (WSL) | Illuminia Studios Connect to Remote WSL Environment Ba\u011flan hedef Linux sisteminize Visual Studio | Microsoft Docs","title":"C/C++ Remote Linux Option over SSH"},{"location":"tr/week-4-test/ce103-week-4-test/#c-programming-dinamik-library","text":"","title":"C# Programming (Dinamik Library)"},{"location":"tr/week-4-test/ce103-week-4-test/#visual-studio-community-edition_2","text":"In C# project we will create class library we have several options for this sample we will select .NET core that we can build cross platform library There is no static library option We will select .Net Core 3.1 You will have default empty class library file In the project you can see .NETcore reference We can build empty class library that generate dll for our application Now we will add Console Application but this will also use .NETCore Select New Project Name the project Select .NETCore framework You will have the following sample main.cs file using System ; namespace csharp_sample_app { class Program { static void Main ( string [] args ) { Console . WriteLine ( \"Hello World!\" ); } } } Now we can link projects with adding references open reference section browse for class library project output folder and select output dll file for console application now we can update our library code and use it in console application copy following sample to sampleLibClass file in the library using System ; namespace csharp_sample_lib { public class sampleLibClass { public static void sayHelloTo ( string name ) { if (! String . IsNullOrEmpty ( name )) { Console . WriteLine ( \"Hello \" + name ); } else { Console . WriteLine ( \"Hello There\" ); } } public static int sum ( int a , int b ) { int c = 0 ; c = a + b ; return c ; } } } after this operation copy following sample to console application and build app then you can run using csharp_sample_lib ; using System ; namespace csharp_sample_app { class Program { static void Main ( string [] args ) { Console . WriteLine ( \"Hello World!\" ); sampleLibClass . sayHelloTo ( \"Computer\" ); int result = sampleLibClass . sum ( 5 , 4 ); Console . WriteLine ( \"Results is\" + result ); Console . WriteLine ( \"Results is {0}\" , result ); Console . Read (); } } } You will see following output that mean we called DLL functions Also we can publish this console application with dll for linux environment or others for linux environment we should install .NETCore follow the link below or commands that I shared with you as below for deployment How to Install Dotnet Core on Ubuntu 20.04 \u2013 TecAdmin Step 1 \u2013 Enable Microsoft PPA wget https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb sudo dpkg -i packages-microsoft-prod.deb Step 2 \u2013 Installing Dotnet Core SDK sudo apt update sudo apt install apt-transport-https sudo apt install dotnet-sdk-3.1 Step 3 \u2013 Install Dotnet Core Runtime Only To install .NET Core Runtime on Ubuntu 20.04 LTS system, execute the commands: sudo apt update To install the previous version of .Net core runtime 2.1, type: sudo apt install dotnet-runtime-2.1 Press \u201cy\u201d for any input prompted by the installer. Step 4 \u2013 (Optional) Check .NET Core Version You can use dotnet command line utility to check installed version of .NET Core on your system. To check dotnet version, type: dotnet --version Now we will publish our application as single executable Open publish menu Select netcoreapp3.1 and Release for linux-x64 Select produce single file After succesfull publish you will have linux binary that you can run with WSL Open WSL and enter the path where this folder located and run application as follow check dotnet --version and then run application you will see similar output In this sample we created single application from settings lets try with shared library located option uncheck the \"produce single file\" option and publish again. Then you will have the following outputs If you run csharp-sample-app you will have the same output","title":"Visual Studio Community Edition"},{"location":"tr/week-4-test/ce103-week-4-test/#java-programming","text":"","title":"Java Programming"},{"location":"tr/week-4-test/ce103-week-4-test/#eclipse-ide","text":"You should download and install eclipse installer and then you should select Eclipse IDE for Java Developers Eclipse Installer 2021-09 R | Eclipse Packages select create a project select java project give project name select finish first we need to add a default package to keep everything organized then we can create our class that includes our functions give class a name you will have following class with main We will create sample java library with static functions as below. package ce103 ; import java.io.IOException ; public class JavaSampleLib { public static void sayHelloTo ( String name ) { if ( name . isBlank () || name . isEmpty ()) { System . out . println ( \"Hello \" + name ); } else { System . out . println ( \"Hello There\" ); } } public static int sum ( int a , int b ) { int c = 0 ; c = a + b ; return c ; } public static void main ( String [] args ) { // TODO Auto-generated method stub System . out . println ( \"Hello World!\" ); JavaSampleLib . sayHelloTo ( \"Computer\" ); int result = JavaSampleLib . sum ( 5 , 4 ); System . out . println ( \"Results is\" + result ); System . out . printf ( \"Results is %d \\n\" , result ); try { System . in . read (); } catch ( IOException e ) { // TODO Auto-generated catch block e . printStackTrace (); } } } also we can add main method to run our library functions. If we run this file its process main function we can see output from console as below There is no exe files java runtime environment run class files but we can export this as an executable. Select Java->Runnable JAR File click next and set output path for jar file If our project has several external dependecy then we can extract this required files (jar, so, dll) in seperated folder or we can combine them and generate a single executable jar Lets pack everthing together, Select launch configuration that has main function end of this operation we will have the following jar that we can by click When you click application if cannot run then try command line to see problem enter jar folder and run the following command java -jar JavaSampleLibExecutable.jar In my case eclipse build JDK is newer than that I installed and set for my OS If we check version we can see problem Java version 1.8.0_231 We can found installed and builded JDK for our application from Eclipse setting select environments select installed JRE or JDK you can see installed JRE or JDK home C : \\Program Files\\Java\\jdk-16.0.1 Open system environment to fix this problem Check user settings first Check system settings we will move up the JDK 16 configuration then command line will run first java Also in system setting check JAVA_HOME After this settings close current command line and open new one write java --version if you see java version updated and 16.0.1 then settings are correct and now if we enter and run application as follow we will see output But when you click this jar its not running as you see so we have options to provide a clickable application there Launch4j is an option here Launch4j - Cross-platform Java executable wrapper you can watch this tutorial also How to convert jar to exe using Launch4J Full explanation - YouTube Download and install launch4j and open application configure your application settings similar to below select jar file and exe output path we can customize main class if have multiple main class select console from setting for this application we can provide a single running application, this setting avoid to run multiple instances we need to set runtime environment versions you can set system parameters before running application with splash screen you can show a splash screen image for your application File attributes such as version product information is configured from version info tab if your application runtime condition has an error then you can show this customized messages also with this options save configuration file xml and compile settings you will see generated output file in log screen Compiling resources Linking Wrapping WARNING: Sign the executable to minimize antivirus false positives or use launching instead of wrapping. Successfully created C:\\Users\\ugur.coruh\\Desktop\\java-export-sample\\JavaSampleLibExecutable.exe now we can run exe by click another option here adding a bat file to run current jar file JavaSampleLibExecutable.bat java -jar JavaSampleLibExecutable.jar if we click bat file then we will automate command line task for current jar file Now return back to our java library and create another console application that use library functions you can set libraries in this step from but our library should exported for our solution Select Add External JARs... Open Exported jar folder and select Or we can select by Add jar from current workspace but in this step I won't add anything I'll add references later we will have the following project lets create a package and lets create a main class for our application check create main function right click to project and add reference you can enter same configurations from project properties Lets export our library as a JAR file and then add to our classpath Select JAR file we configured output as C : \\Users\\ugur.coruh\\Desktop\\java-export-sample\\JavaSampleLib.jar In the same export folder now we have JavaSampleLib.jar return back to java-sample-app and then add this jar file to our project Build Path->Add External Archives you will see its added to reference libraries in our JavaSampleApp.java we can use the following source codes package ce103 ; import java.io.IOException ; public class JavaSampleApp { public static void main ( String [] args ) { // TODO Auto-generated method stub System . out . println ( \"Hello World!\" ); JavaSampleLib . sayHelloTo ( \"Computer\" ); int result = JavaSampleLib . sum ( 5 , 4 ); System . out . println ( \"Results is\" + result ); System . out . printf ( \"Results is %d \\n\" , result ); try { System . in . read (); } catch ( IOException e ) { // TODO Auto-generated catch block e . printStackTrace (); } } } When we run application we will see similar output Lets export this application with its dependent library Select runnable jar Set Launch configuration and Export destination C : \\Users\\ugur.coruh\\Desktop\\java-export-sample\\JavaSampleAppSingle.jar In this option we will have single jar file In the export folder we do not see reference libraries and we can run with command line only change copy required libraries setting and then give a new name for new jar file and export C : \\Users\\ugur.coruh\\Desktop\\java-export-sample\\JavaSampleAppMultiple.jar now we have a folder that contains our libraries referenced in this file we can find our library if we test our application we will see it will work if we delete JavaSampleLib.jar and then try running application we will get error","title":"Eclipse IDE"},{"location":"tr/week-4-test/ce103-week-4-test/#program-testing","text":"","title":"Program Testing"},{"location":"tr/week-4-test/ce103-week-4-test/#unit-test-development","text":"","title":"Unit Test Development"},{"location":"tr/week-4-test/ce103-week-4-test/#c-unit-tests","text":"","title":"C Unit Tests"},{"location":"tr/week-4-test/ce103-week-4-test/#visual-studio-community-edition_3","text":"","title":"Visual Studio Community Edition"},{"location":"tr/week-4-test/ce103-week-4-test/#c-unit-tests_1","text":"","title":"C++ Unit Tests"},{"location":"tr/week-4-test/ce103-week-4-test/#visual-studio-community-edition_4","text":"C/C++ i\u00e7in birim testleri yazma - Visual Studio (Windows) | Microsoft Docs Use cpp-sample-lib project and add select Native Unit Test set project path and name you will have cpp-sample-test project add library project from references Add cpp-sample-lib to cpp-sample-test project cpp-sample-test.cpp #include \"pch.h\" #include \"CppUnitTest.h\" #include \"..\\cpp-sample-lib\\samplelib.h\" using namespace Microsoft :: VisualStudio :: CppUnitTestFramework ; namespace cppsampletest { TEST_CLASS ( cppsampletest ) { public : TEST_METHOD ( TestSumCorrect ) { Assert :: AreEqual ( 9 , sum ( 4 , 5 )); } TEST_METHOD ( TestSumInCorrect ) { Assert :: AreEqual ( 10 , sum ( 4 , 5 )); } }; }","title":"Visual Studio Community Edition"},{"location":"tr/week-4-test/ce103-week-4-test/#c-unit-tests_2","text":"","title":"C# Unit Tests"},{"location":"tr/week-4-test/ce103-week-4-test/#visual-studio-community-edition-mstestv2net","text":"Install extension fine code coverage https://marketplace.visualstudio.com/items?itemName=FortuneNgwenya.FineCodeCoverage Create a .Net Framework Library set project framework and path Create library functions using System ; using System.Collections.Generic ; using System.Text ; namespace cs_lib_sample { public class SampleLibClass { public static string sayHelloTo ( string name ) { string result = String . Empty ; if (! String . IsNullOrEmpty ( name )) { result = \"Hello \" + name ; } else { result = \"Hello There\" ; } Console . WriteLine ( result ); return result ; } public static int sum ( int a , int b ) { int c = 0 ; c = a + b ; return c ; } public int multiply ( int a , int b ) { return a * b ; } } } right click and then create unit test project press OK enter test code using Microsoft.VisualStudio.TestTools.UnitTesting ; using cs_lib_sample ; using System ; using System.Collections.Generic ; using System.Linq ; using System.Text ; using System.Threading.Tasks ; namespace cs_lib_sample.Tests { [TestClass()] public class SampleLibClassTests { [TestMethod()] public void testSayHelloTo () { Assert . AreEqual ( \"Hello Computer\" , SampleLibClass . sayHelloTo ( \"Computer\" ), \"Regular say hello should work\" ); } [TestMethod()] public void testSayHelloToWrong () { Assert . AreEqual ( \"Hello All\" , SampleLibClass . sayHelloTo ( \"Computer\" ), \"Regular say hello won't work\" ); } [TestMethod()] public void testSumCorrect () { Assert . AreEqual ( 9 , SampleLibClass . sum ( 4 , 5 ), \"Regular sum should work\" ); } [TestMethod()] public void testSumWrong () { Assert . AreEqual ( 10 , SampleLibClass . sum ( 4 , 5 ), \"Regular sum shouldn't work\" ); } [TestMethod()] public void testMultiply () { SampleLibClass sampleLib = new SampleLibClass (); Assert . AreEqual ( 20 , sampleLib . multiply ( 4 , 5 ), \"Regular multiplication should work\" ); } } } Run tests you will code coverage and entered or passed branches","title":"Visual Studio Community Edition (MSTestV2+.Net)"},{"location":"tr/week-4-test/ce103-week-4-test/#visual-studio-community-edition-nunitnetcore","text":"use cshar-sample-lib for this example create and add a unit test project to solution Add project reference SampleLibraryTestClasss in NUnit Project using csharp_sample_lib ; using NUnit.Framework ; namespace csharp_sample_lib_test { public class SampleLibraryTestClass { sampleLibClass sampleLib ; [SetUp] public void Setup () { sampleLib = new sampleLibClass (); } [Test] public void testSayHelloTo () { Assert . AreEqual ( \"Hello Computer\" , sampleLibClass . sayHelloTo ( \"Computer\" ), \"Regular say hello should work\" ); } [Test] public void testSayHelloToWrong () { Assert . AreEqual ( \"Hello All\" , sampleLibClass . sayHelloTo ( \"Computer\" ), \"Regular say hello won't work\" ); } [Test] public void testSumCorrect () { Assert . AreEqual ( 9 , sampleLibClass . sum ( 4 , 5 ), \"Regular sum should work\" ); } [Test] public void testSumWrong () { Assert . AreEqual ( 10 , sampleLibClass . sum ( 4 , 5 ), \"Regular sum shouldn't work\" ); } [Test] public void testMultiply () { Assert . AreEqual ( 20 , sampleLib . multiply ( 4 , 5 ), \"Regular multiplication should work\" ); } } } sample class library using System ; namespace csharp_sample_lib { public class sampleLibClass { public static string sayHelloTo ( string name ) { string result = String . Empty ; if (! String . IsNullOrEmpty ( name )) { result = \"Hello \" + name ; } else { result = \"Hello There\" ; } Console . WriteLine ( result ); return result ; } public static int sum ( int a , int b ) { int c = 0 ; c = a + b ; return c ; } public int multiply ( int a , int b ) { return a * b ; } } } Open test explorer and run tests or you can run from project Also we can create unit test from library class, right click the sampleLibClass and select create unit tests but this option do not provide nunit tests. using Microsoft.VisualStudio.TestTools.UnitTesting ; using csharp_sample_lib ; using System ; using System.Collections.Generic ; using System.Text ; namespace csharp_sample_lib.Tests { [TestClass()] public class sampleLibClassTests { [TestMethod()] public void sayHelloToTest () { Assert . Fail (); } [TestMethod()] public void sumTest () { Assert . Fail (); } [TestMethod()] public void multiplyTest () { Assert . Fail (); } } } we will not commit this changes and continue from nunit test project, the fine code coverage also work for nunit test but not provide inline highlighting if we run tests we will have the following outputs Inline code highlight is part of enterprise visual studio edition Analyzing code coverage in Visual Studio - DEV Community","title":"Visual Studio Community Edition (NUnit+.NETCore)"},{"location":"tr/week-4-test/ce103-week-4-test/#tldr","text":"Additional information you can use OpenCover + Nunit Runner + Report Generator together to setup a code coverage report but it has complex batch running process. After a few try I decided to use fine code coverage but here is the usage not tested well. First unit test runner tool doesn't support .Net Core c# - The NUnit 3 driver encountered an error while executing reflected code (NUnit.Engine.NUnitEngineException) - Stack Overflow Follow the instructions on the link CMD OpenCover \u00b7 sukhoi1/Useful-Notes Wiki \u00b7 GitHub Install OpenCover, ReportGenerator, Nunit,Runners packages then use the package installation folder to get tools that you need Here is a sample for open cover, select package and copy path Goto path and tools C : \\Users\\ugur.coruh\\.nuget\\packages\\opencover\\4.7.1221 You need to setup some batch similar with following run-test-coverage.bat set pathA = C:\\Users\\ugur.coruh\\.nuget\\packages\\opencover\\4.7.1221\\tools set pathB = C:\\Users\\ugur.coruh\\.nuget\\packages\\nunit.consolerunner\\3.12.0\\tools set pathC = C:\\Users\\ugur.coruh\\.nuget\\packages\\reportgenerator\\4.8.13\\tools\\netcoreapp3.0 set dllpath = C:\\Users\\ugur.coruh\\Desktop\\csharp-sample-lib\\csharp-sample-lib-test\\bin\\Debug\\netcoreapp3.1 \" %pathA% \\OpenCover.Console.exe\" ^ - targetargs: \" %dllpath% \\csharp-sample-lib-test.dll\" ^ - filter: \"+[csharp-sample-lib*]* -[*test]*\" ^ - target: \" %pathB% \\nunit3-console.exe\" ^ - output: \" %dllpath% \\coverReport.xml\" ^ - skipautoprops -register:user && \" %pathC% \\ReportGenerator.exe\" -reports: \" %dllpath% \\coverReport.xml\" -targetdir: \"\" %dllpath% \\coverage \" pause but nunit3-console.exe gives error for this compatibility issues I prefer to use fine code coverage extension. OpenCover related studies Code coverage of manual or automated tests with OpenCover for .NET applications \u2013 Automation Rhapsody Code coverage of .NET Core unit tests with OpenCover \u2013 Automation Rhapsody Sample OpenCover report Summary - Coverage Report","title":"TL;DR"},{"location":"tr/week-4-test/ce103-week-4-test/#download-and-setup-opencover-nunit-console-report-generator-without-package-manager","text":"You can also download the tools from github project pages and install on your operating system,","title":"Download and Setup OpenCover, NUnit Console, Report Generator without Package Manager"},{"location":"tr/week-4-test/ce103-week-4-test/#opencover","text":"Releases \u00b7 OpenCover/opencover \u00b7 GitHub Select advanced and then install for all users","title":"OpenCover"},{"location":"tr/week-4-test/ce103-week-4-test/#reportgenerator","text":"Release ReportGenerator_4.8.13 \u00b7 danielpalme/ReportGenerator \u00b7 GitHub","title":"ReportGenerator"},{"location":"tr/week-4-test/ce103-week-4-test/#nunit-console","text":"Downloads","title":"NUnit Console"},{"location":"tr/week-4-test/ce103-week-4-test/#nunit-mstest-batch-report-generation-not-tested","text":"OpenCover and ReportGenerator Unit Test Coverage in Visual Studio 2013 and 2015 \u2013 CodeHelper.Net OpenCover and ReportGenerator Unit Test Coverage in Visual Studio 2013 and 2015 - CodeProject","title":"NUnit + MSTest Batch Report Generation (Not Tested)"},{"location":"tr/week-4-test/ce103-week-4-test/#java-unit-tests","text":"","title":"Java Unit Tests"},{"location":"tr/week-4-test/ce103-week-4-test/#eclipse-ide-junit4-junit5","text":"In this sample we will create two example for similar library Please check the following links JUnit 5 tutorial - Learn how to write unit tests JUnit 5 JUnit 5 User Guide https://www.eclemma.org/ JUnit Hello World Example - Examples Java Code Geeks - 2021 https://yasinmemic.medium.com/java-ile-unit-test-yazmak-birim-test-ca15cf0d024b","title":"Eclipse IDE (JUnit4 , JUnit5)"},{"location":"tr/week-4-test/ce103-week-4-test/#java-application-junit","text":"In normal java application we can right click the project java-sample-lib and add Junit case and you will have the following test class Now we will create tests that check our function flowchart and return values We need to cover all code branches that we coded I have updated JavaSampleLib.java as follow to check outputs JavaSampleLib.java package ce103 ; public class JavaSampleLib { public static String sayHelloTo ( String name ) { String output = \"\" ; if ( ! name . isBlank () && ! name . isEmpty ()){ output = \"Hello \" + name ; } else { output = \"Hello There\" ; } System . out . println ( output ); return output ; } public static int sum ( int a , int b ) { int c = 0 ; c = a + b ; return c ; } public int multiply ( int a , int b ) { return a * b ; } // public static void main(String[] args) { // // TODO Auto-generated method stub // System.out.println(\"Hello World!\"); // // JavaSampleLib.sayHelloTo(\"Computer\"); // int result = JavaSampleLib.sum(5, 4); // System.out.println(\"Results is\" + result); // System.out.printf(\"Results is %d \\n\", result); // // // try { // System.in.read(); // } catch (IOException e) { // // TODO Auto-generated catch block // e.printStackTrace(); // } // // } } and JavaSampleLibTest.java package ce103 ; import static org.junit.jupiter.api.Assertions.* ; import org.junit.jupiter.api.AfterAll ; import org.junit.jupiter.api.AfterEach ; import org.junit.jupiter.api.BeforeAll ; import org.junit.jupiter.api.BeforeEach ; import org.junit.jupiter.api.DisplayName ; import org.junit.jupiter.api.RepeatedTest ; import org.junit.jupiter.api.Test ; import org.junit.jupiter.params.ParameterizedTest ; import org.junit.jupiter.params.provider.MethodSource ; class JavaSampleLibTest { JavaSampleLib sampleLib ; @BeforeAll static void setUpBeforeClass () throws Exception { } @AfterAll static void tearDownAfterClass () throws Exception { } @BeforeEach void setUp () throws Exception { sampleLib = new JavaSampleLib (); } @AfterEach void tearDown () throws Exception { } @Test @DisplayName ( \"Simple Say Hello should work\" ) void testSayHelloTo () { assertEquals ( \"Hello Computer\" , JavaSampleLib . sayHelloTo ( \"Computer\" ), \"Regular say hello should work\" ); } @Test @DisplayName ( \"Simple Say Hello shouldn' work\" ) void testSayHelloToWrong () { assertEquals ( \"Hello All\" , JavaSampleLib . sayHelloTo ( \"Computer\" ), \"Regular say hello won't work\" ); } @Test @DisplayName ( \"Simple sum should work\" ) void testSumCorrect () { assertEquals ( 9 , JavaSampleLib . sum ( 4 , 5 ), \"Regular sum should work\" ); } @Test @DisplayName ( \"Simple sum shouldn't work\" ) void testSumWrong () { assertEquals ( 10 , JavaSampleLib . sum ( 4 , 5 ), \"Regular sum shouldn't work\" ); } @Test @DisplayName ( \"Simple multiplication should work\" ) void testMultiply () { assertEquals ( 20 , sampleLib . multiply ( 4 , 5 ), \"Regular multiplication should work\" ); } @RepeatedTest ( 5 ) @DisplayName ( \"Ensure correct handling of zero\" ) void testMultiplyWithZero () { assertEquals ( 0 , sampleLib . multiply ( 0 , 5 ), \"Multiple with zero should be zero\" ); assertEquals ( 0 , sampleLib . multiply ( 5 , 0 ), \"Multiple with zero should be zero\" ); } public static int [][] data () { return new int [][] { { 1 , 2 , 2 }, { 5 , 3 , 15 }, { 121 , 4 , 484 },{ 2 , 2 , 2 } }; } @ParameterizedTest @MethodSource ( value = \"data\" ) void testWithStringParameter ( int [] data ) { JavaSampleLib tester = new JavaSampleLib (); int m1 = data [ 0 ] ; int m2 = data [ 1 ] ; int expected = data [ 2 ] ; assertEquals ( expected , tester . multiply ( m1 , m2 )); } } if we run tests we will see all results there also we can see the code coverage of tests when we open our source code (just close and open again another case highlighting will not work) you will see tested part of your codes","title":"Java Application + JUnit"},{"location":"tr/week-4-test/ce103-week-4-test/#maven-java-application-junit","text":"Lets create Maven project with tests Create a maven project File -> New -> Maven Project Lets convert our sample java-sample-lib directories to standard folder structure for test and app division Maven \u2013 Introduction to the Standard Directory Layout Also for intro you can use this JUnit Hello World Example - Examples Java Code Geeks - 2021 Eclipse Maven Java JUnit 4.12 (pulled by Maven automatically) Lets give new sample java-sample-lib-mvnbut in this time we will create a maven project pom.xml file <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\" > <modelVersion> 4.0.0 </modelVersion> <groupId> com.ce103 </groupId> <artifactId> java-sample-lib-ext </artifactId> <version> 0.0.1-SNAPSHOT </version> <name> Java Sample Lib </name> <description> Java Sample with Unit Test </description> </project> we will add JUnit 5 for our project <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\" > <modelVersion> 4.0.0 </modelVersion> <groupId> com.ce103 </groupId> <artifactId> java-sample-lib-ext </artifactId> <version> 0.0.1-SNAPSHOT </version> <name> Java Sample Lib </name> <description> Java Sample with Unit Test </description> <dependencies> <dependency> <groupId> org.junit.jupiter </groupId> <artifactId> junit-jupiter-params </artifactId> <version> 5.7.1 </version> <scope> test </scope> </dependency> </dependencies> </project> it will automatically download libraries Create java sample library in ce103 package, first create java package In this package create library class copy content from other library package ce103 ; public class JavaSampleLib { public static String sayHelloTo ( String name ) { String output = \"\" ; if ( ! name . isBlank () && ! name . isEmpty ()){ output = \"Hello \" + name ; } else { output = \"Hello There\" ; } System . out . println ( output ); return output ; } public static int sum ( int a , int b ) { int c = 0 ; c = a + b ; return c ; } public int multiply ( int a , int b ) { return a * b ; } } Now lets create tests inf src/test/java create a JUnit Case you will simple template package ce103 ; import static org.junit.jupiter.api.Assertions.* ; import org.junit.jupiter.api.AfterAll ; import org.junit.jupiter.api.AfterEach ; import org.junit.jupiter.api.BeforeAll ; import org.junit.jupiter.api.BeforeEach ; import org.junit.jupiter.api.Test ; class JavaSampleLibTest { @BeforeAll static void setUpBeforeClass () throws Exception { } @AfterAll static void tearDownAfterClass () throws Exception { } @BeforeEach void setUp () throws Exception { } @AfterEach void tearDown () throws Exception { } @Test void testSayHelloTo () { fail ( \"Not yet implemented\" ); } @Test void testSum () { fail ( \"Not yet implemented\" ); } @Test void testMultiply () { fail ( \"Not yet implemented\" ); } } now lets copy tests from other projects That's a part of java unit testing...","title":"Maven Java Application + JUnit"},{"location":"tr/week-4-test/ce103-week-4-test/#tdd-test-driven-development","text":"","title":"TDD (Test Driven Development)"},{"location":"tr/week-4-test/ce103-week-4-test/#test-and-deployment-automation-management","text":"","title":"Test and Deployment Automation Management"},{"location":"tr/week-4-test/ce103-week-4-test/#travis-ci-c","text":"","title":"Travis-CI + C"},{"location":"tr/week-4-test/ce103-week-4-test/#travis-ci-cpp","text":"","title":"Travis-CI + Cpp"},{"location":"tr/week-4-test/ce103-week-4-test/#travis-ci-c_1","text":"","title":"Travis-CI + C"},{"location":"tr/week-4-test/ce103-week-4-test/#travis-ci-java","text":"","title":"Travis-CI + Java"},{"location":"tr/week-4-test/ce103-week-4-test/#references","text":"GitHub - MicrosoftDocs/cpp-docs: C++ Documentation","title":"References"},{"location":"tr/week-5-c/ce103-week-5-c/","text":"CE103 Algorithms and Programming I \u00b6 Week-5 \u00b6 Fall Semester, 2021-2022 \u00b6 Download DOC , SLIDE , PPTX C Functional Console Programming \u00b6 Books and Resources \u00b6 free-programming-books/free-programming-books-langs.md at master \u00b7 EbookFoundation/free-programming-books \u00b7 GitHub C Functional Console Programming \u00b6 We will use the following course notes and examples. Learn C Programming C Tutorials - Introduction to C Programming Language The C and C++ programming tutorials, hands-on approach with program examples, code samples and tons of output images using Visual C++, C++ Builder, Linux gcc and g++ compilers and IDE CS50x 2021 C Programming For Dummies C reference - cppreference.com https://c.happycodings.com/ C Programming \u00b6 C is a versatile programming language. It is useful for creating software such as operating systems, databases, and compilers. For novices, C programming is a great language to learn to code in. Our C tutorials will take you step by step through the process of learning C programming. Before starting you should check your development enviroment. You will open visual studio community edition and create a C++ console application then rename *.cpp file to *.c for triggering c complier. Before starting you should understand the executable generation flows #include <stdio.h> int main ( void ) { printf ( \"hello, world\" ); } and how we convert source code to binary codehere is a sandbox in CS50 harvard course Week 0 - CS50x https://sandbox.cs50.io/ you can use it for online compiler $ make hello clang -fsanitize = signed-integer-overflow -fsanitize = undefined -ggdb3 -O0 -std = c11 -Wall -Werror -Wextra -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wshadow hello.c -lcrypt -lcs50 -lm -o hello $ ./hello hello, world if you want to make samething in windows environment you should create the following makefile near the hello.c Makefile # This is the default target, which will be built when # you invoke make .PHONY : all all : hello # This rule tells make how to build hello from hello.cpp hello : hello . c g++ -o hello hello.c # This rule tells make to copy hello to the binaries subdirectory, # creating it if necessary .PHONY : install install : mkdir -p binaries cp -p hello binaries # This rule tells make to delete hello and hello.o .PHONY : clean clean : rm -f hello C: \\U sers \\u gur.coruh \\D esktop \\h ello-make>make hello g++ -o hello hello.c C: \\U sers \\u gur.coruh \\D esktop \\h ello-make>dir Volume in drive C is Windows Volume Serial Number is 8C3C-8F8C Directory of C: \\U sers \\u gur.coruh \\D esktop \\h ello-make 11 /02/2021 01 :44 AM <DIR> . 11 /02/2021 01 :44 AM <DIR> .. 11 /02/2021 01 :15 AM 73 hello.c 11 /02/2021 01 :44 AM 54 ,022 hello.exe 11 /02/2021 01 :43 AM 458 Makefile 3 File ( s ) 54 ,553 bytes 2 Dir ( s ) 101 ,382,164,480 bytes free C: \\U sers \\u gur.coruh \\D esktop \\h ello-make>hello.exe hello, world C: \\U sers \\u gur.coruh \\D esktop \\h ello-make> $ clang hello.c $ ls a.out* hello* hello.c $ ./a.out hello, world $ clang -o hello hello.c $ ls a.out* hello* hello.c $ ./hello hello, world $ ls hello . c $ clang - o hello hello . c - lcs50 $ ls hello * hello . c $ . / hello hello , world $ Also you can use visual studio community edition. preprocessing \u00b6 get included file declarations #include <cs50.h> #include <stdio.h> int main ( void ) { string name = get_string ( \"What's your name? \" ); printf ( \"hello, %s \\n \" , name ); } to this string get_string ( string prompt ); int printf ( string format , ...); int main ( void ) { string name = get_string ( \"What's your name? \" ); printf ( \"hello, %s \\n \" , name ); } compiling \u00b6 convert source code to assembler code ... main: # @main .cfi_startproc # BB#0: pushq %rbp .Ltmp0: .cfi_def_cfa_offset 16 .Ltmp1: .cfi_offset %rbp, -16 movq %rsp, %rbp .Ltmp2: .cfi_def_cfa_register %rbp subq $16, %rsp xorl %eax, %eax movl %eax, %edi movabsq $.L.str, %rsi movb $0, %al callq get_string movabsq $.L.str.1, %rdi movq %rax, -8(%rbp) movq -8(%rbp), %rsi movb $0, %al callq printf ... assembling \u00b6 convert assembler to opcodes ... main: # @main .cfi_startproc # BB#0: pushq %rbp .Ltmp0: .cfi_def_cfa_offset 16 .Ltmp1: .cfi_offset %rbp, -16 movq %rsp, %rbp .Ltmp2: .cfi_def_cfa_register %rbp subq $16, %rsp xorl %eax, %eax movl %eax, %edi movabsq $.L.str, %rsi movb $0, %al callq get_string movabsq $.L.str.1, %rdi movq %rax, -8(%rbp) movq -8(%rbp), %rsi movb $0, %al callq printf ... to thislinking \u00b6 hello.c cs50.c stdio.ccombine binary codes to generate exentroduction \u00b6 Keywords and Identifiers \u00b6 This tutorial will teach you about keywords, which are reserved words in C programming that are part of the syntax. You will also be taught about identifiers and how to name them. Character set \u00b6 A character set is a collection of alphabets, letters, and special characters that are supported by the C programming language. As variables and functions, C accepts both lowercase and uppercase alphabets. Alphabets \u00b6 Uppercase : A B C ................................... X Y Z Lowercase : a b c ...................................... x y z Digits \u00b6 0 1 2 3 4 5 6 7 8 9 Special Characters \u00b6 Special Characters in C Programming , < > . - ( ) ; $ : % [ ] # ? ' & { } \" ^ ! * / - \\ ~ + White space Characters A newline, a horizontal tab, a carriage return, and a form feed are all examples of punctuation. C Keywords \u00b6 Keywords are reserved words in programming that have special meanings to the compiler. Keywords are syntax elements that cannot be used as identifiers. As an example: int money ; In this case, int is a keyword indicating that money is a variable of type int (integer). Because C is a case-sensitive language, all keywords must be written in lowercase. The following is a list of all the keywords permitted in ANSI C. C Keywords auto double int struct break else long switch case enum register typedef char extern return union continue for signed void do if static while default goto sizeof volatile const float short unsigned All of these keywords, as well as their syntax and application, will be covered in their respective topics. The Complete List of all 32 C Programming Keywords (With Examples) - Programiz C Identifiers \u00b6 The term \"identifier\" refers to the name given to entities such as variables, functions, structures, and so on. Identifiers must be distinct. They are created to give a unique name to an entity in order to identify it during program execution. As an example: int money ; double accountBalance ; money and accountBalance are identifiers in this context. Also, keep in mind that identifier names must be distinct from keyword names. Because int is a keyword, it cannot be used as an identifier. Rules for naming identifiers \u00b6 Letters (including capital and lowercase letters), numbers, and underscores can all be used in a valid identification. An identifier's initial letter should be either a letter or an underscore. Keywords such as int, while, and so on cannot be used as identifiers. There are no restrictions on the length of an identification. However, if the identifier is larger than 31 characters, you may have issues with some compilers. If you follow the above criterion, you can use any name as an identifier; nevertheless, provide meaningful names to identifiers that make sense. C Variables, Constants and Literals \u00b6 This article will teach you about variables and the rules for naming variables. You will also learn about different literals and how to build constants in C programming. Variables \u00b6 A variable in programming is a container (storage space) for data. Each variable should be given a unique name to denote the storage region (identifier). Variable names are simply a graphical representation of a memory location. As an example: int playerScore = 95 ; In this case, playerScore is an int variable. The variable is given the integer value 95 in this case. A variable's value may be altered, thus the term variable. char ch = 'a' ; // some code ch = 'l' ; Rules for naming a variable \u00b6 A variable name can only contain characters (uppercase and lowercase), numbers, and underscores. A variable's initial letter should be either a letter or an underscore. There are no restrictions on the length of a variable name (identifier). However, if the variable name is larger than 31 characters, you may have issues with some compilers. Please keep in mind that you should always aim to give variables meaningful names. For example, firstName is a more appropriate variable name than fn . C is a highly typed programming language. This means that once a variable is declared, it cannot be modified. As an example: int number = 5 ; // integer variable number = 5.5 ; // error double number ; // error In this case, the type of number variable is int. This variable cannot be assigned the floating-point (decimal) value 5.5. Furthermore, you cannot change the variable's data type to double. By the way, in order to hold decimal values in C, you must designate their type as double or float. Literals \u00b6 Literals are data that are used to represent fixed values. They can be directly utilized in the code. For example: 1, 2.5, 'c,' and so on. Literals are 1, 2.5, and 'c' in this case. Why? These words cannot have various values assigned to them. 1. Integers \u00b6 An integer is a numeric literal (related with numbers) that does not have any fractional or exponential components. In C programming, there are three types of integer literals: digits (base 10) the number octal (base 8) hexadecimal (base 16) For example: Decimal : 0 , -9 , 22 etc Octal : 021 , 077 , 033 etc Hexadecimal : 0x7f , 0x2a , 0x521 etc In C, octal begins with a 0 while hexadecimal begins with a 0x. 2. Floating-point Literals \u00b6 A floating-point literal is a numeric literal with a fractional or exponent form. As an example: -2.0 0.0000234 -0.22E-5 Please note that \\[ E-5 = 10^{-5} \\] 3. Characters \u00b6 Enclosing a single character inside single quote marks yields a character literal. For example, 'a','m', 'F', '2', \", and so on. 4. Escape Sequences \u00b6 In C programming, it is sometimes important to employ characters that cannot be typed or have specific meaning. For instance, newline (enter), tab, question mark, and so on. Escape sequences are utilized to utilise these characters. Escape Sequences Character \\b Backspace \\f Form feed \\n Newline \\r Return \\t Horizontal Tab \\v Vertical Tab `\\\\ Backslash \\' Single quotation mark \\\" Double quotation mark \\? Question mark \\0 Null character 5. String Literals \u00b6 A string literal is a string of characters surrounded by double quotation marks. As an example: \"good\" //string constant \"\" //null string constant \" \" //string constant of six white space \"x\" //string constant having a single character. \"Earth is round \\n \" //prints string with a newline Constants \u00b6 The const keyword can be used to declare a variable whose value cannot be modified. This will result in a constant. As an example, const double PI = 3.14 ; We've introduced the keyword const. PI is a symbolic constant in this context; its value cannot be modified. const double PI = 3.14 ; PI = 2.9 ; //Error You may also use the #define preprocessor directive to declare a constant. C Data Types \u00b6 In this course, you will learn about basic data types in C programming, such as int, float, and char. Data types are variable declarations in C programming. The kind and quantity of data linked with variables are determined by this. As an example, int myVar ; In this case, myVar is an int (integer) variable. int has a size of 4 bytes. Basic types \u00b6 Here's a table containing commonly used types in C programming for quick access. Type Size(bytes) Format Specifiers int at least 2, usually 4 %d %i char 1 %c float 4 %f double 8 %lf short int 2 usually %hd unsigned int at least 2, usually 4 %u long int at least 4, usually 8 %ld %li long long int at least 8 %lld %lli unsigned long int at least 4 %lu unsigned long long int at least 8 %llu signed char 1 %c usigned char 1 %c long double at least 10, usually 12 or 16 %Lf int \u00b6 Integers are entire integers with zero, positive, and negative values but no decimal values. For instance, \\(0\\) , \\(-5\\) , and \\(10\\) In order to declare an integer variable, we can use int . int id ; In this case, id is an integer variable. In C programming, you can define many variables at the same time. As an example, int id , age ; Integers are typically \\(\\text{4 bytes}\\) in size ( \\(\\text{32 bits}\\) ). It may also take $2^{32} $ different states from \\(-2147483648\\) to \\(2147483647\\) . float and double \u00b6 Real values are stored in float and double variables. float salary ; double price ; Floating-point numbers in C can also be expressed in exponential form. As an example, float normalizationFactor = 22.442e2 ; What is the distinction between float and double? Float (single precision float data type) has a size of 4 bytes. And double (double precision float data type) is 8 bytes in size. char \u00b6 The keyword char is used to declare variables of the character type. As an example, char test = 'h' ; The character variable is 1 byte in size. void \u00b6 void is an unfinished type. It signifies \"nothing\" or \"nothing of the sort.\" You might conceive of emptiness as the absence of something. If a function does not return anything, its return type should be void. It is important to note that void variables cannot be created. short and long \u00b6 If you need to utilize a huge number, a type specifier long can be used. Here's how it works: long a ; long long b ; long double c ; Variables a and b can store integer values in this case. In addition, c may hold a floating-point number. You can use short if you are certain that just a tiny integer range between \\(-32767, +32767\\) will be utilized. short d ; The sizeof() operator may always be used to determine the size of a variable. #include <stdio.h> int main () { short a ; long b ; long long c ; long double d ; printf ( \"size of short = %d bytes \\n \" , sizeof ( a )); printf ( \"size of long = %d bytes \\n \" , sizeof ( b )); printf ( \"size of long long = %d bytes \\n \" , sizeof ( c )); printf ( \"size of long double= %d bytes \\n \" , sizeof ( d )); return 0 ; } signed and unsigned \u00b6 Signed and unsigned are type modifiers in C. You may use them to change the data storage of a data type. As an example, unsigned int x ; int y ; Because we applied the unsigned modifier, the variable x can only retain zero and positive numbers. Given that int has a capacity of 4 bytes , variable y can have values ranging from - \\(2^{31}\\) to \\(2^{31}-1\\) , But variable x can hold values ranging from \\(0\\) to \\(2^{32}-1\\) . Other data types defined in C programming are: \u00b6 bool Type Enumerated type Complex types Derived Data Types \u00b6 Derived types are data types that are derived from basic data types. Arrays, pointers, function types, structures, and so on are examples. C Input Output (I/O) \u00b6 In this lesson, you will learn how to utilize the scanf() function to accept user input and the printf() method to display output to the user. C Output \u00b6 printf() is a common output function in C programming. The function outputs formatted data to the screen. As an example, Example 1: C Output \u00b6 #include <stdio.h> int main () { // Displays the string inside quotations printf ( \"C Programming\" ); return 0 ; } Output C Programming How does this software function? The main() function is required in all legal C programs. The execution of the code begins at the commencement of the main() function. The printf() function is a library function that is used to provide formatted output to the screen. The string is printed within quote marks by the function. In order to utilize printf() in our program, we must include the stdio.h header file using the #include <stdio.h> declaration. The \"Exit status\" of the program is the return 0; statement within the main() method. It's entirely voluntary. Example 2: Integer Output \u00b6 #include <stdio.h> int main () { int testInteger = 5 ; printf ( \"Number = %d\" , testInteger ); return 0 ; } Output Number = 5 To print int types, we utilize the %d format specifier. The value of testInteger will be used in instead of the %d inside the quotes. Example 3: float and double Output \u00b6 #include <stdio.h> int main () { float number1 = 13.5 ; double number2 = 12.4 ; printf ( \"number1 = %f \\n \" , number1 ); printf ( \"number2 = %lf\" , number2 ); return 0 ; } Output number1 = 13 .500000 number2 = 12 .400000 We utilize the %f format specifier to print floats . Similarly, to display double numbers, we use %lf . Example 4: Print Characters \u00b6 #include <stdio.h> int main () { char chr = 'a' ; printf ( \"character = %c\" , chr ); return 0 ; } Output character = a We utilize the %c format specifier to print char. C Input \u00b6 scanf() is a widely used function in C programming to accept user input. The scanf() function reads formatted input from typical input devices like keyboards. Example 5: Integer Input/Output \u00b6 #include <stdio.h> int main () { int testInteger ; printf ( \"Enter an integer: \" ); scanf ( \"%d\" , & testInteger ); printf ( \"Number = %d\" , testInteger ); return 0 ; } Output Enter an integer: 4 Number = 4 To accept int input from the user, we utilized the %d format specifier inside the scanf() method. When a user enters an integer, it is saved in the variable testInteger . You'll see that we used &testInteger within scanf () . This is due to the fact that &testInteger obtains the address of testInteger , and the value given by the user is saved in that address. Example 6: Float and Double Input/Output \u00b6 #include <stdio.h> int main () { float num1 ; double num2 ; printf ( \"Enter a number: \" ); scanf ( \"%f\" , & num1 ); printf ( \"Enter another number: \" ); scanf ( \"%lf\" , & num2 ); printf ( \"num1 = %f \\n \" , num1 ); printf ( \"num2 = %lf\" , num2 ); return 0 ; } Output Enter a number: 12 .523 Enter another number: 10 .2 num1 = 12 .523000 num2 = 10 .200000 For float and double , we use the format specifiers %f and %lf , respectively. Example 7: C Character I/O \u00b6 #include <stdio.h> int main () { char chr ; printf ( \"Enter a character: \" ); scanf ( \"%c\" , & chr ); printf ( \"You entered %c.\" , chr ); return 0 ; } Output Enter a character: g You entered g When a user enters a character into the aforementioned software, the character itself is not saved. An integer value (ASCII value) is instead stored. When we use the %c text format to represent that value, the input character is displayed. The ASCII value of the character is printed when we utilize %d to show it. Example 8: ASCII Value \u00b6 #include <stdio.h> int main () { char chr ; printf ( \"Enter a character: \" ); scanf ( \"%c\" , & chr ); // When %c is used, a character is displayed printf ( \"You entered %c. \\n \" , chr ); // When %d is used, ASCII value is displayed printf ( \"ASCII value is %d.\" , chr ); return 0 ; } Output Enter a character: g You entered g. ASCII value is 103 . I/O Multiple Values \u00b6 Here's how to take numerous user inputs and show them. #include <stdio.h> int main () { int a ; float b ; printf ( \"Enter integer and then a float: \" ); // Taking multiple inputs scanf ( \"%d%f\" , & a , & b ); printf ( \"You entered %d and %f\" , a , b ); return 0 ; } Output Enter integer and then a float: -3 3 .4 You entered -3 and 3 .400000 Format Specifiers for I/O \u00b6 As you can see from the samples above, we apply %d for int %f for float %lf for double %c for char The following is a collection of widely used C data types and associated format specifiers. Type Size(bytes) Format Specifiers int at least 2, usually 4 %d %i char 1 %c float 4 %f double 8 %lf short int 2 usually %hd unsigned int at least 2, usually 4 %u long int at least 4, usually 8 %ld %li long long int at least 8 %lld %lli unsigned long int at least 4 %lu unsigned long long int at least 8 %llu signed char 1 %c usigned char 1 %c long double at least 10, usually 12 or 16 %Lf C Programming Operators \u00b6 With the assistance of examples, you will learn about several operators in C programming in this course. An operator is a symbol that performs an operation on a value or variable. For example, the operator + is used to compute addition. C has a diverse set of operators to execute a variety of tasks. C Arithmetic Operators \u00b6 An arithmetic operator performs mathematical operations such as addition, subtraction, multiplication, division etc on numerical values (constants and variables). Operator Meaning of Operator + Addition or unary plus - Substraction or unary minus * Multiplication / Division % Remainder after division (modulo division) Example 1: Arithmetic Operators \u00b6 // Working of arithmetic operators #include <stdio.h> int main () { int a = 9 , b = 4 , c ; c = a + b ; printf ( \"a+b = %d \\n \" , c ); c = a - b ; printf ( \"a-b = %d \\n \" , c ); c = a * b ; printf ( \"a*b = %d \\n \" , c ); c = a / b ; printf ( \"a/b = %d \\n \" , c ); c = a % b ; printf ( \"Remainder when a divided by b = %d \\n \" , c ); return 0 ; } Output a+b = 13 a-b = 5 a*b = 36 a/b = 2 Remainder when a divided by b = 1 As you might guess, the operators +, -, and * calculate addition, subtraction, and multiplication, respectively. 9/4 Equals 2.25 in standard math. In the program, however, the result is 2 . This is due to the fact that both variables a and b are integers. As a result, the output is also an integer. The compiler ignores the word following the decimal point and displays response 2 rather than 2.25 . The residual is computed using the modulo operator percent. The remaining is 1 when a=9 is divided by b=4 . Only integers can be used with the percent operator. Assume that a = 5.0, b = 2.0, c = 5 , and d = 2 . After that, in C programming. // Either one of the operands is a floating-point number a/b = 2 .5 a/d = 2 .5 c/b = 2 .5 // Both operands are integers c/d = 2 C Increment and Decrement Operators \u00b6 To alter the value of an operand (constant or variable) by one, C programming offers two operators: increment ++ and decrease -- . Increment ++ raises the value by one, and decrement -- lowers the value by one. These two operators are unary, which means they only work on a single operand. Example 2: Increment and Decrement Operators \u00b6 // Working of increment and decrement operators #include <stdio.h> int main () { int a = 10 , b = 100 ; float c = 10.5 , d = 100.5 ; printf ( \"++a = %d \\n \" , ++ a ); printf ( \"--b = %d \\n \" , -- b ); printf ( \"++c = %f \\n \" , ++ c ); printf ( \"--d = %f \\n \" , -- d ); return 0 ; } Output ++a = 11 --b = 99 ++c = 11 .500000 --d = 99 .500000 The operators ++ and -- are used as prefixes here. These two operators, like a++ and a-- can also be used as postfixes. Increment ++ and Decrement -- Operator as Prefix and Postfix \u00b6 The increment operator ++ in programming (Java, C, C++, JavaScript, and so on) increments the value of a variable by one. Similarly, the decrement operator -- reduces a variable's value by one. a = 5 ++a ; // a becomes 6 a++ ; // a becomes 7 --a ; // a becomes 6 a-- ; // a becomes 5 So far, so straightforward. When these two operators are employed as a prefix and a postfix, there is a significant difference. ++ and -- operator as prefix and postfix \u00b6 When you use the ++ operator as a prefix, such as: ++var, the value of var is increased by one and then returned. If you use the ++ operator as a postfix, such as var++, the original value of var is returned first, followed by a one-digit increase of var. The -- operator functions similarly to the ++ operator, except that it reduces the value by one. Example 1: C Programming \u00b6 #include <stdio.h> int main () { int var1 = 5 , var2 = 5 ; // 5 is displayed // Then, var1 is increased to 6. printf ( \"%d \\n \" , var1 ++ ); // var2 is increased to 6 // Then, it is displayed. printf ( \"%d \\n \" , ++ var2 ); return 0 ; } Output 5 6 C Assignment Operators \u00b6 An assignment operator is a type of operator that is used to assign a value to a variable. = is the most commonly used assignment operator. Operator Example Same as = a=b a=b += a+=b a=a+b -= a-=b a=a-b *= a*=b a=a*b /= a/=b a=a/b %= a%=b a=a%b Example 3: Assignment Operators \u00b6 // Working of assignment operators #include <stdio.h> int main () { int a = 5 , c ; c = a ; // c is 5 printf ( \"c = %d \\n \" , c ); c += a ; // c is 10 printf ( \"c = %d \\n \" , c ); c -= a ; // c is 5 printf ( \"c = %d \\n \" , c ); c *= a ; // c is 25 printf ( \"c = %d \\n \" , c ); c /= a ; // c is 5 printf ( \"c = %d \\n \" , c ); c %= a ; // c = 0 printf ( \"c = %d \\n \" , c ); return 0 ; } Output c = 5 c = 10 c = 5 c = 25 c = 5 c = 0 C Relational Operators \u00b6 A relational operator verifies the relationship of two operands. If the relationship is true, it returns 1; if the relationship is false, it returns 0. Operator Meaning of Operator Example == Equal to 5 == 3 is evaluated to 0 > Greater than 5 > 3 is evaluated to 1 < Less than 5 < 3 is evaluated to 0 != Not equal to 5 != 3 is evaluated to 1 >= Greater than or equal to 5 >= 3 is evaluated to 1 <= Less than or equal to 5 <= 3 is evaluated to 0 Example 4: Relational Operators \u00b6 // Working of relational operators #include <stdio.h> int main () { int a = 5 , b = 5 , c = 10 ; printf ( \"%d == %d is %d \\n \" , a , b , a == b ); printf ( \"%d == %d is %d \\n \" , a , c , a == c ); printf ( \"%d > %d is %d \\n \" , a , b , a > b ); printf ( \"%d > %d is %d \\n \" , a , c , a > c ); printf ( \"%d < %d is %d \\n \" , a , b , a < b ); printf ( \"%d < %d is %d \\n \" , a , c , a < c ); printf ( \"%d != %d is %d \\n \" , a , b , a != b ); printf ( \"%d != %d is %d \\n \" , a , c , a != c ); printf ( \"%d >= %d is %d \\n \" , a , b , a >= b ); printf ( \"%d >= %d is %d \\n \" , a , c , a >= c ); printf ( \"%d <= %d is %d \\n \" , a , b , a <= b ); printf ( \"%d <= %d is %d \\n \" , a , c , a <= c ); return 0 ; } Output 5 == 5 is 1 5 == 10 is 0 5 > 5 is 0 5 > 10 is 0 5 < 5 is 0 5 < 10 is 1 5 ! = 5 is 0 5 ! = 10 is 1 5 > = 5 is 1 5 > = 10 is 0 5 < = 5 is 1 5 < = 10 is 1 C Logical Operators \u00b6 A logical operator expression returns either 0 or 1, depending on whether the expression is true or false. Operator Meaning Example && Logical AND. True only if all operands are true If c = 5 and d = 2 then, expression ((c==5) && (d>5)) equals to 0. | Logical OR. True only if either one operand is true ! Logical NOT. True only if the operand is 0 If c = 5 then, expression !(c==5) equals to 0. Example 5: Logical Operators \u00b6 // Working of logical operators #include <stdio.h> int main () { int a = 5 , b = 5 , c = 10 , result ; result = ( a == b ) && ( c > b ); printf ( \"(a == b) && (c > b) is %d \\n \" , result ); result = ( a == b ) && ( c < b ); printf ( \"(a == b) && (c < b) is %d \\n \" , result ); result = ( a == b ) || ( c < b ); printf ( \"(a == b) || (c < b) is %d \\n \" , result ); result = ( a != b ) || ( c < b ); printf ( \"(a != b) || (c < b) is %d \\n \" , result ); result = ! ( a != b ); printf ( \"!(a != b) is %d \\n \" , result ); result = ! ( a == b ); printf ( \"!(a == b) is %d \\n \" , result ); return 0 ; } Output ( a == b ) && ( c > b ) is 1 ( a == b ) && ( c < b ) is 0 ( a == b ) || ( c < b ) is 1 ( a ! = b ) || ( c < b ) is 0 ! ( a ! = b ) is 1 ! ( a == b ) is 0 Explanation of logical operator program (a == b) && (c > 5) evaluates to 1 because both operands (a == b) and (c > b) is 1 (true). (a == b) && (c < b) evaluates to 0 because operand (c < b) is 0 (false). (a == b) || (c < b) evaluates to 1 because (a = b) is 1 (true). (a != b) || (c < b) evaluates to 0 because both operand (a != b) and (c < b) are 0 (false). !(a != b) evaluates to 1 because operand (a != b) is 0 (false). Hence, !(a != b) is 1 (true). !(a == b) evaluates to 0 because (a == b) is 1 (true). Hence, !(a == b) is 0 (false). C Bitwise Operators \u00b6 Mathematical operations like as addition, subtraction, multiplication, division, and so on are transformed to bit-level during computation, which speeds up processing and saves power. In C programming, bitwise operators are used to execute bit-level operations. Operators Meaning of Operators & Bitwise AND ^ Bitwise exclusive OR ~ Bitwise complement << Shift left >> Shift right Other Operators \u00b6 Comma Operator \u00b6 Comma operators are used to connect similar expressions. As an example: int a , c = 5 , d ; The sizeof operator \u00b6 sizeof is a unary operator that returns the data size (constants, variables, array, structure, etc). Example 6: sizeof Operator \u00b6 #include <stdio.h> int main () { int a ; float b ; double c ; char d ; printf ( \"Size of int=%lu bytes \\n \" , sizeof ( a )); printf ( \"Size of float=%lu bytes \\n \" , sizeof ( b )); printf ( \"Size of double=%lu bytes \\n \" , sizeof ( c )); printf ( \"Size of char=%lu byte \\n \" , sizeof ( d )); return 0 ; } Output Size of int = 4 bytes Size of float = 4 bytes Size of double = 8 bytes Size of char = 1 byte Other operators, such as the ternary operator ?: , the reference operato r & , the dereference operator * , and the member selection operator -> , will be covered in more detail later. C Flow Control \u00b6 C if...else Statement \u00b6 With the assistance of examples, you will learn about the if statement (including if...else and nested if...else) in C programming. C if Statement \u00b6 In C programming, the if statement has the following syntax: if ( test expression ) { // code } How if statement works? \u00b6 The test expression inside the parentheses is evaluated by the if statement (). If the test expression is true, the statements within the if body are performed. If the test expression is interpreted as false, the statements within the if body are not performed. Check relational and logical operators to understand more about when a test expression is evaluated to true (non-zero value) and false (0). Example 1: if statement \u00b6 // Program to display a number if it is negative #include <stdio.h> int main () { int number ; printf ( \"Enter an integer: \" ); scanf ( \"%d\" , & number ); // true if number is less than 0 if ( number < 0 ) { printf ( \"You entered %d. \\n \" , number ); } printf ( \"The if statement is easy.\" ); return 0 ; } Output 1 Enter an integer: -2 You entered -2. The if statement is easy. When the user types -2, the test expression number 0 is evaluated as true. As a result, the value -2 that you typed is displayed on the screen. Output 2 Enter an integer: 5 The if statement is easy. When the user enters 5, the test expression number 0 is assessed as false, and the statement within the body of the if is not performed. C if...else Statement \u00b6 An else block is optional in the if statement. The if...else sentence has the following syntax: if ( test expression ) { // run code if test expression is true } else { // run code if test expression is false } How if...else statement works? \u00b6 If the test expression is found to be true, Statements within the if body are performed. Statements within the body of else are not executed. If the test expression is found to be false, Phrases inside the body of else are performed; statements within the body of if are skipped. Example 2: if...else statement \u00b6 // Check whether an integer is odd or even #include <stdio.h> int main () { int number ; printf ( \"Enter an integer: \" ); scanf ( \"%d\" , & number ); // True if the remainder is 0 if ( number % 2 == 0 ) { printf ( \"%d is an even integer.\" , number ); } else { printf ( \"%d is an odd integer.\" , number ); } return 0 ; } Output Enter an integer: 7 7 is an odd integer. When the user enters 7, the test expression number% 2==0 returns false. As a result, the statement within the body of else is performed. C if...else Ladder \u00b6 Depending on whether the test phrase is true or false, the if...else statement runs two separate programs. Sometimes a decision must be made between more than two options. You may use the if...else ladder to compare numerous test expressions and execute various statements. Syntax of if...else Ladder \u00b6 if ( test expression1 ) { // statement(s) } else if ( test expression2 ) { // statement(s) } else if ( test expression3 ) { // statement(s) } . . else { // statement(s) } Example 3: C if...else Ladder \u00b6 // Program to relate two integers using =, > or < symbol #include <stdio.h> int main () { int number1 , number2 ; printf ( \"Enter two integers: \" ); scanf ( \"%d %d\" , & number1 , & number2 ); //checks if the two integers are equal. if ( number1 == number2 ) { printf ( \"Result: %d = %d\" , number1 , number2 ); } //checks if number1 is greater than number2. else if ( number1 > number2 ) { printf ( \"Result: %d > %d\" , number1 , number2 ); } //checks if both test expressions are false else { printf ( \"Result: %d < %d\" , number1 , number2 ); } return 0 ; } Output Enter two integers: 12 23 Result: 12 < 23 Nested if...else \u00b6 An if...else statement can be included within the body of another if...else statement. Example 4: Nested if...else \u00b6 This program, similar to the if...else ladder's example, compares two numbers using, >, and =. To fix this problem, we will utilize a layered if...else expression. #include <stdio.h> int main () { int number1 , number2 ; printf ( \"Enter two integers: \" ); scanf ( \"%d %d\" , & number1 , & number2 ); if ( number1 >= number2 ) { if ( number1 == number2 ) { printf ( \"Result: %d = %d\" , number1 , number2 ); } else { printf ( \"Result: %d > %d\" , number1 , number2 ); } } else { printf ( \"Result: %d < %d\" , number1 , number2 ); } return 0 ; } You do not need to use brackets if the body of an if...else statement contains only one sentence. if ( a > b ) { printf ( \"Hello\" ); } printf ( \"Hi\" ); is equivalent to if ( a > b ) printf ( \"Hello\" ); printf ( \"Hi\" ); C for Loop \u00b6 With the assistance of examples, you will learn how to design a for loop in C programming in this article. A loop is a programming construct that is used to repeat a block of code until the stated condition is fulfilled. Loops in C programming are classified into three types: while loop for loop do..while loop This lesson will teach us about the for loop. The while and do...while loops will be covered in the next tutorial. for Loop \u00b6 The for loop has the following syntax: for ( initializationStatement ; testExpression ; updateStatement ) { // statements inside the body of loop } How for loop works? \u00b6 The initialization statement is only used once. The test expression is then evaluated. The for loop is ended if the test statement is interpreted as false. If the test expression is true, the statements inside the for loop's body are performed, and the update expression is updated. The test expression is examined once more. This procedure is repeated until the test expression is false. The loop is terminated when the test expression is false. Example 1: for loop \u00b6 // Print numbers from 1 to 10 #include <stdio.h> int main () { int i ; for ( i = 1 ; i < 11 ; ++ i ) { printf ( \"%d \" , i ); } return 0 ; } Output 1 2 3 4 5 6 7 8 9 10 i is initialized to 1. The test expression i < 11 is evaluated. Since 1 less than 11 is true, the body of for loop is executed. This will print the 1 (value of i) on the screen. The update statement ++i is executed. Now, the value of i will be 2. Again, the test expression is evaluated to true, and the body of for loop is executed. This will print 2 (value of i) on the screen. Again, the update statement ++i is executed and the test expression i < 11 is evaluated. This process goes on until i becomes 11. When i becomes 11, i < 11 will be false, and the for loop terminates. Example 2: for loop \u00b6 // Program to calculate the sum of first n natural numbers // Positive integers 1,2,3...n are known as natural numbers #include <stdio.h> int main () { int num , count , sum = 0 ; printf ( \"Enter a positive integer: \" ); scanf ( \"%d\" , & num ); // for loop terminates when num is less than count for ( count = 1 ; count <= num ; ++ count ) { sum += count ; } printf ( \"Sum = %d\" , sum ); return 0 ; } Output Enter a positive integer: 10 Sum = 55 The value entered by the user is stored in the variable num. Suppose, the user entered 10. The count is initialized to 1 and the test expression is evaluated. Since the test expression count<=num (1 less than or equal to 10) is true, the body of for loop is executed and the value of sum will equal to 1. Then, the update statement ++count is executed and count will equal to 2. Again, the test expression is evaluated. Since 2 is also less than 10, the test expression is evaluated to true and the body of the for loop is executed. Now, sum will equal 3. This process goes on and the sum is calculated until the count reaches 11. When the count is 11, the test expression is evaluated to 0 (false), and the loop terminates. Then, the value of sum is printed on the screen. C while and do...while Loop \u00b6 In this tutorial, you will learn to create while and do...while loop in C programming with the help of examples. In programming, loops are used to repeat a block of code until a specified condition is met. C programming has three types of loops. for loop while loop do...while loop In the previous tutorial, we learned about for loop. In this tutorial, we will learn about while and do..while loop. while loop \u00b6 The syntax of the while loop is: while ( testExpression ) { // the body of the loop } How while loop works? \u00b6 The while loop evaluates the testExpression inside the parentheses () . If testExpression is true , statements inside the body of while loop are executed. Then, testExpression is evaluated again. The process goes on until testExpression is evaluated to false . If testExpression is false , the loop terminates (ends). Example 1: while loop \u00b6 // Print numbers from 1 to 5 #include <stdio.h> int main () { int i = 1 ; while ( i <= 5 ) { printf ( \"%d \\n \" , i ); ++ i ; } return 0 ; } Output 1 2 3 4 5 Here, we have initialized i to 1. When i = 1 , the test expression i <= 5 is true . Hence, the body of the while loop is executed. This prints 1 on the screen and the value of i is increased to 2 . Now, i = 2 , the test expression i <= 5 is again true . The body of the while loop is executed again. This prints 2 on the screen and the value of i is increased to 3 . This process goes on until i becomes 6. Then, the test expression i <= 5 will be false and the loop terminates. do...while loop \u00b6 The do..while loop is similar to the while loop with one important difference. The body of do...while loop is executed at least once. Only then, the test expression is evaluated. The syntax of the do...while loop is: do { // the body of the loop } while ( testExpression ); How do...while loop works? \u00b6 The body of do...while loop is executed once. Only then, the testExpression is evaluated. If testExpression is true , the body of the loop is executed again and testExpression is evaluated once more. This process goes on until testExpression becomes false . If testExpression is false , the loop ends. Flowchart of do...while Loop \u00b6 Example 2: do...while loop \u00b6 // Program to add numbers until the user enters zero #include <stdio.h> int main () { double number , sum = 0 ; // the body of the loop is executed at least once do { printf ( \"Enter a number: \" ); scanf ( \"%lf\" , & number ); sum += number ; } while ( number != 0.0 ); printf ( \"Sum = %.2lf\" , sum ); return 0 ; } Output Enter a number: 1 .5 Enter a number: 2 .4 Enter a number: -3.4 Enter a number: 4 .2 Enter a number: 0 Sum = 4 .70 Here, we have used a do...while loop to prompt the user to enter a number. The loop works as long as the input number is not 0 . The do...while loop executes at least once i.e. the first iteration runs without checking the condition. The condition is checked only after the first iteration has been executed. do { printf ( \"Enter a number: \" ); scanf ( \"%lf\" , & number ); sum += number ; } while ( number != 0.0 ); So, if the first input is a non-zero number, that number is added to the sum variable and the loop continues to the next iteration. This process is repeated until the user enters 0 . But if the first input is 0, there will be no second iteration of the loop and sum becomes 0.0 . Outside the loop, we print the value of sum. C break and continue \u00b6 We learned about loops in previous tutorials. In this tutorial, we will learn to use break and continue statements with the help of examples. C break \u00b6 The break statement ends the loop immediately when it is encountered. Its syntax is: break ; The break statement is almost always used with if...else statement inside the loop. Example 1: break statement \u00b6 // Program to calculate the sum of numbers (10 numbers max) // If the user enters a negative number, the loop terminates #include <stdio.h> int main () { int i ; double number , sum = 0.0 ; for ( i = 1 ; i <= 10 ; ++ i ) { printf ( \"Enter n%d: \" , i ); scanf ( \"%lf\" , & number ); // if the user enters a negative number, break the loop if ( number < 0.0 ) { break ; } sum += number ; // sum = sum + number; } printf ( \"Sum = %.2lf\" , sum ); return 0 ; } Output Enter n1: 2 .4 Enter n2: 4 .5 Enter n3: 3 .4 Enter n4: -3 Sum = 10 .30 This program calculates the sum of a maximum of 10 numbers. Why a maximum of 10 numbers? It's because if the user enters a negative number, the break statement is executed. This will end the for loop, and the sum is displayed. In C, break is also used with the switch statement. This will be discussed in the next tutorial. C continue \u00b6 The continue statement skips the current iteration of the loop and continues with the next iteration. Its syntax is: continue ; The continue statement is almost always used with the if...else statement. How continue statement works? \u00b6 Example 2: continue statement \u00b6 // Program to calculate the sum of numbers (10 numbers max) // If the user enters a negative number, it's not added to the result #include <stdio.h> int main () { int i ; double number , sum = 0.0 ; for ( i = 1 ; i <= 10 ; ++ i ) { printf ( \"Enter a n%d: \" , i ); scanf ( \"%lf\" , & number ); if ( number < 0.0 ) { continue ; } sum += number ; // sum = sum + number; } printf ( \"Sum = %.2lf\" , sum ); return 0 ; } Output Enter n1: 1 .1 Enter n2: 2 .2 Enter n3: 5 .5 Enter n4: 4 .4 Enter n5: -3.4 Enter n6: -45.5 Enter n7: 34 .5 Enter n8: -4.2 Enter n9: -1000 Enter n10: 12 Sum = 59 .70 In this program, when the user enters a positive number, the sum is calculated using sum += number; statement. When the user enters a negative number, the continue statement is executed and it skips the negative number from the calculation. C switch Statement \u00b6 In this tutorial, you will learn to create the switch statement in C programming with the help of an example. The switch statement allows us to execute one code block among many alternatives. You can do the same thing with the if...else..if ladder. However, the syntax of the switch statement is much easier to read and write. Syntax of switch...case \u00b6 switch ( expression ) { case constant1 : // statements break ; case constant2 : // statements break ; . . . default : // default statements } How does the switch statement work? The expression is evaluated once and compared with the values of each case label. If there is a match, the corresponding statements after the matching label are executed. For example, if the value of the expression is equal to constant2, statements after case constant2: are executed until break is encountered. If there is no match, the default statements are executed. If we do not use break , all statements after the matching label are executed. By the way, the default clause inside the switch statement is optional. Example: Simple Calculator \u00b6 // Program to create a simple calculator #include <stdio.h> int main () { char operator ; double n1 , n2 ; printf ( \"Enter an operator (+, -, *, /): \" ); scanf ( \"%c\" , & operator ); printf ( \"Enter two operands: \" ); scanf ( \"%lf %lf\" , & n1 , & n2 ); switch ( operator ) { case '+' : printf ( \"%.1lf + %.1lf = %.1lf\" , n1 , n2 , n1 + n2 ); break ; case '-' : printf ( \"%.1lf - %.1lf = %.1lf\" , n1 , n2 , n1 - n2 ); break ; case '*' : printf ( \"%.1lf * %.1lf = %.1lf\" , n1 , n2 , n1 * n2 ); break ; case '/' : printf ( \"%.1lf / %.1lf = %.1lf\" , n1 , n2 , n1 / n2 ); break ; // operator doesn't match any case constant +, -, *, / default : printf ( \"Error! operator is not correct\" ); } return 0 ; } Output Enter an operator ( +, -, *, ) : - Enter two operands: 32 .5 12 .4 32 .5 - 12 .4 = 20 .1 The - operator entered by the user is stored in the operator variable. And, two operands 32.5 and 12.4 are stored in variables n1 and n2 respectively. Since the operator is - , the control of the program jumps to printf ( \"%.1lf - %.1lf = %.1lf\" , n1 , n2 , n1 - n2 ); Finally, the break statement terminates the switch statement. C goto Statement \u00b6 In this tutorial, you will learn to create the goto statement in C programming. Also, you will learn when to use a goto statement and when not to use it. The goto statement allows us to transfer control of the program to the specified label. Syntax of goto Statement \u00b6 goto label ; ... .. ... ... .. ... label : statement ; The label is an identifier. When the goto statement is encountered, the control of the program jumps to label: and starts executing the code. Example: goto Statement \u00b6 // Program to calculate the sum and average of positive numbers // If the user enters a negative number, the sum and average are displayed. #include <stdio.h> int main () { const int maxInput = 100 ; int i ; double number , average , sum = 0.0 ; for ( i = 1 ; i <= maxInput ; ++ i ) { printf ( \"%d. Enter a number: \" , i ); scanf ( \"%lf\" , & number ); // go to jump if the user enters a negative number if ( number < 0.0 ) { goto jump ; } sum += number ; } jump : average = sum / ( i - 1 ); printf ( \"Sum = %.2f \\n \" , sum ); printf ( \"Average = %.2f\" , average ); return 0 ; } Output 1 . Enter a number: 3 2 . Enter a number: 4 .3 3 . Enter a number: 9 .3 4 . Enter a number: -2.9 Sum = 16 .60 Average = 5 .53 Reasons to avoid goto \u00b6 The use of goto statement may lead to code that is buggy and hard to follow. For example, one : for ( i = 0 ; i < number ; ++ i ) { test += i ; goto two ; } two : if ( test > 5 ) { goto three ; } ... .. ... Also, the goto statement allows you to do bad stuff such as jump out of the scope. That being said, goto can be useful sometimes. For example: to break from nested loops. Should you use goto? \u00b6 If you think the use of goto statement simplifies your program, you can use it. That being said, goto is rarely useful and you can create any C program without using goto altogether. Here's a quote from Bjarne Stroustrup, creator of C++, \"The fact that 'goto' can do anything is exactly why we don't use it.\" C Functions C User-defined functions Types of User-defined Functions in C Programming C Recursion (Recursive function) C Storage Class C Function Examples C Arrays (With Examples) C Multidimensional Arrays (2d and 3d Array) Pass arrays to a function in C for Pointers check CS50 visuals in PDF C Pointers (With Examples) Relationship Between Arrays and Pointers in C Programming (With Examples) C Pass Addresses and Pointers to Functions C Dynamic Memory Allocation Using malloc(), calloc(), free() & realloc() C Array and Pointer Examples Strings in C (With Examples) String Manipulations In C Programming Using Library Functions String Examples in C Programming c. C Functions i. C Programming Functions ii. C User-defined Functions iii. C Function Types iv. C Recursion v. C Storage Class vi. C Function Examples d. C Programming Arrays i. C Programming Arrays ii. C Multi-dimensional Arrays iii. C Arrays & Functions e. C Programming Pointers i. C Programming Pointers ii. C Pointers & Arrays iii. C Pointers and Functions iv. C Memory Allocation v. Array & Pointer Examples f. C Programming Strings i. C Programming Strings ii. C String Functions iii. C String Examples g. C Structure and Union i. C Structure ii. C Struct & Pointers iii. C Struct & Functions iv. C Unions v. C Struct Examples h. C Programming Files i. C Files Input/Output ii. C Files Examples i. Additional Topics i. C Enumeration ii. C Preprocessors iii. C Standard Library C Programming Examples https://cdnvideo.eba.gov.tr/fatihkalem/fatihkalem_portable.zip https://cdnvideo.eba.gov.tr/fatihkalem/fatihkalem_setup.exe Extras \u00b6","title":"Week-5 (C Console Programming)"},{"location":"tr/week-5-c/ce103-week-5-c/#ce103-algorithms-and-programming-i","text":"","title":"CE103 Algorithms and Programming I"},{"location":"tr/week-5-c/ce103-week-5-c/#week-5","text":"","title":"Week-5"},{"location":"tr/week-5-c/ce103-week-5-c/#fall-semester-2021-2022","text":"Download DOC , SLIDE , PPTX","title":"Fall Semester, 2021-2022"},{"location":"tr/week-5-c/ce103-week-5-c/#c-functional-console-programming","text":"","title":"C Functional Console Programming"},{"location":"tr/week-5-c/ce103-week-5-c/#books-and-resources","text":"free-programming-books/free-programming-books-langs.md at master \u00b7 EbookFoundation/free-programming-books \u00b7 GitHub","title":"Books and Resources"},{"location":"tr/week-5-c/ce103-week-5-c/#c-functional-console-programming_1","text":"We will use the following course notes and examples. Learn C Programming C Tutorials - Introduction to C Programming Language The C and C++ programming tutorials, hands-on approach with program examples, code samples and tons of output images using Visual C++, C++ Builder, Linux gcc and g++ compilers and IDE CS50x 2021 C Programming For Dummies C reference - cppreference.com https://c.happycodings.com/","title":"C Functional Console Programming"},{"location":"tr/week-5-c/ce103-week-5-c/#c-programming","text":"C is a versatile programming language. It is useful for creating software such as operating systems, databases, and compilers. For novices, C programming is a great language to learn to code in. Our C tutorials will take you step by step through the process of learning C programming. Before starting you should check your development enviroment. You will open visual studio community edition and create a C++ console application then rename *.cpp file to *.c for triggering c complier. Before starting you should understand the executable generation flows #include <stdio.h> int main ( void ) { printf ( \"hello, world\" ); } and how we convert source code to binary codehere is a sandbox in CS50 harvard course Week 0 - CS50x https://sandbox.cs50.io/ you can use it for online compiler $ make hello clang -fsanitize = signed-integer-overflow -fsanitize = undefined -ggdb3 -O0 -std = c11 -Wall -Werror -Wextra -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wshadow hello.c -lcrypt -lcs50 -lm -o hello $ ./hello hello, world if you want to make samething in windows environment you should create the following makefile near the hello.c Makefile # This is the default target, which will be built when # you invoke make .PHONY : all all : hello # This rule tells make how to build hello from hello.cpp hello : hello . c g++ -o hello hello.c # This rule tells make to copy hello to the binaries subdirectory, # creating it if necessary .PHONY : install install : mkdir -p binaries cp -p hello binaries # This rule tells make to delete hello and hello.o .PHONY : clean clean : rm -f hello C: \\U sers \\u gur.coruh \\D esktop \\h ello-make>make hello g++ -o hello hello.c C: \\U sers \\u gur.coruh \\D esktop \\h ello-make>dir Volume in drive C is Windows Volume Serial Number is 8C3C-8F8C Directory of C: \\U sers \\u gur.coruh \\D esktop \\h ello-make 11 /02/2021 01 :44 AM <DIR> . 11 /02/2021 01 :44 AM <DIR> .. 11 /02/2021 01 :15 AM 73 hello.c 11 /02/2021 01 :44 AM 54 ,022 hello.exe 11 /02/2021 01 :43 AM 458 Makefile 3 File ( s ) 54 ,553 bytes 2 Dir ( s ) 101 ,382,164,480 bytes free C: \\U sers \\u gur.coruh \\D esktop \\h ello-make>hello.exe hello, world C: \\U sers \\u gur.coruh \\D esktop \\h ello-make> $ clang hello.c $ ls a.out* hello* hello.c $ ./a.out hello, world $ clang -o hello hello.c $ ls a.out* hello* hello.c $ ./hello hello, world $ ls hello . c $ clang - o hello hello . c - lcs50 $ ls hello * hello . c $ . / hello hello , world $ Also you can use visual studio community edition.","title":"C Programming"},{"location":"tr/week-5-c/ce103-week-5-c/#preprocessing","text":"get included file declarations #include <cs50.h> #include <stdio.h> int main ( void ) { string name = get_string ( \"What's your name? \" ); printf ( \"hello, %s \\n \" , name ); } to this string get_string ( string prompt ); int printf ( string format , ...); int main ( void ) { string name = get_string ( \"What's your name? \" ); printf ( \"hello, %s \\n \" , name ); }","title":"preprocessing"},{"location":"tr/week-5-c/ce103-week-5-c/#compiling","text":"convert source code to assembler code ... main: # @main .cfi_startproc # BB#0: pushq %rbp .Ltmp0: .cfi_def_cfa_offset 16 .Ltmp1: .cfi_offset %rbp, -16 movq %rsp, %rbp .Ltmp2: .cfi_def_cfa_register %rbp subq $16, %rsp xorl %eax, %eax movl %eax, %edi movabsq $.L.str, %rsi movb $0, %al callq get_string movabsq $.L.str.1, %rdi movq %rax, -8(%rbp) movq -8(%rbp), %rsi movb $0, %al callq printf ...","title":"compiling"},{"location":"tr/week-5-c/ce103-week-5-c/#assembling","text":"convert assembler to opcodes ... main: # @main .cfi_startproc # BB#0: pushq %rbp .Ltmp0: .cfi_def_cfa_offset 16 .Ltmp1: .cfi_offset %rbp, -16 movq %rsp, %rbp .Ltmp2: .cfi_def_cfa_register %rbp subq $16, %rsp xorl %eax, %eax movl %eax, %edi movabsq $.L.str, %rsi movb $0, %al callq get_string movabsq $.L.str.1, %rdi movq %rax, -8(%rbp) movq -8(%rbp), %rsi movb $0, %al callq printf ... to thistitle":"assembling"},{"location":"tr/week-5-c/ce103-week-5-c/#linking","text":"hello.c cs50.c stdio.ccombine binary codes to generate exetitle":"linking"},{"location":"tr/week-5-c/ce103-week-5-c/#c-introduction","text":"","title":"C Introduction"},{"location":"tr/week-5-c/ce103-week-5-c/#keywords-and-identifiers","text":"This tutorial will teach you about keywords, which are reserved words in C programming that are part of the syntax. You will also be taught about identifiers and how to name them.","title":"Keywords and Identifiers"},{"location":"tr/week-5-c/ce103-week-5-c/#character-set","text":"A character set is a collection of alphabets, letters, and special characters that are supported by the C programming language. As variables and functions, C accepts both lowercase and uppercase alphabets.","title":"Character set"},{"location":"tr/week-5-c/ce103-week-5-c/#alphabets","text":"Uppercase : A B C ................................... X Y Z Lowercase : a b c ...................................... x y z","title":"Alphabets"},{"location":"tr/week-5-c/ce103-week-5-c/#digits","text":"0 1 2 3 4 5 6 7 8 9","title":"Digits"},{"location":"tr/week-5-c/ce103-week-5-c/#special-characters","text":"Special Characters in C Programming , < > . - ( ) ; $ : % [ ] # ? ' & { } \" ^ ! * / - \\ ~ + White space Characters A newline, a horizontal tab, a carriage return, and a form feed are all examples of punctuation.","title":"Special Characters"},{"location":"tr/week-5-c/ce103-week-5-c/#c-keywords","text":"Keywords are reserved words in programming that have special meanings to the compiler. Keywords are syntax elements that cannot be used as identifiers. As an example: int money ; In this case, int is a keyword indicating that money is a variable of type int (integer). Because C is a case-sensitive language, all keywords must be written in lowercase. The following is a list of all the keywords permitted in ANSI C. C Keywords auto double int struct break else long switch case enum register typedef char extern return union continue for signed void do if static while default goto sizeof volatile const float short unsigned All of these keywords, as well as their syntax and application, will be covered in their respective topics. The Complete List of all 32 C Programming Keywords (With Examples) - Programiz","title":"C Keywords"},{"location":"tr/week-5-c/ce103-week-5-c/#c-identifiers","text":"The term \"identifier\" refers to the name given to entities such as variables, functions, structures, and so on. Identifiers must be distinct. They are created to give a unique name to an entity in order to identify it during program execution. As an example: int money ; double accountBalance ; money and accountBalance are identifiers in this context. Also, keep in mind that identifier names must be distinct from keyword names. Because int is a keyword, it cannot be used as an identifier.","title":"C Identifiers"},{"location":"tr/week-5-c/ce103-week-5-c/#rules-for-naming-identifiers","text":"Letters (including capital and lowercase letters), numbers, and underscores can all be used in a valid identification. An identifier's initial letter should be either a letter or an underscore. Keywords such as int, while, and so on cannot be used as identifiers. There are no restrictions on the length of an identification. However, if the identifier is larger than 31 characters, you may have issues with some compilers. If you follow the above criterion, you can use any name as an identifier; nevertheless, provide meaningful names to identifiers that make sense.","title":"Rules for naming identifiers"},{"location":"tr/week-5-c/ce103-week-5-c/#c-variables-constants-and-literals","text":"This article will teach you about variables and the rules for naming variables. You will also learn about different literals and how to build constants in C programming.","title":"C Variables, Constants and Literals"},{"location":"tr/week-5-c/ce103-week-5-c/#variables","text":"A variable in programming is a container (storage space) for data. Each variable should be given a unique name to denote the storage region (identifier). Variable names are simply a graphical representation of a memory location. As an example: int playerScore = 95 ; In this case, playerScore is an int variable. The variable is given the integer value 95 in this case. A variable's value may be altered, thus the term variable. char ch = 'a' ; // some code ch = 'l' ;","title":"Variables"},{"location":"tr/week-5-c/ce103-week-5-c/#rules-for-naming-a-variable","text":"A variable name can only contain characters (uppercase and lowercase), numbers, and underscores. A variable's initial letter should be either a letter or an underscore. There are no restrictions on the length of a variable name (identifier). However, if the variable name is larger than 31 characters, you may have issues with some compilers. Please keep in mind that you should always aim to give variables meaningful names. For example, firstName is a more appropriate variable name than fn . C is a highly typed programming language. This means that once a variable is declared, it cannot be modified. As an example: int number = 5 ; // integer variable number = 5.5 ; // error double number ; // error In this case, the type of number variable is int. This variable cannot be assigned the floating-point (decimal) value 5.5. Furthermore, you cannot change the variable's data type to double. By the way, in order to hold decimal values in C, you must designate their type as double or float.","title":"Rules for naming a variable"},{"location":"tr/week-5-c/ce103-week-5-c/#literals","text":"Literals are data that are used to represent fixed values. They can be directly utilized in the code. For example: 1, 2.5, 'c,' and so on. Literals are 1, 2.5, and 'c' in this case. Why? These words cannot have various values assigned to them.","title":"Literals"},{"location":"tr/week-5-c/ce103-week-5-c/#1-integers","text":"An integer is a numeric literal (related with numbers) that does not have any fractional or exponential components. In C programming, there are three types of integer literals: digits (base 10) the number octal (base 8) hexadecimal (base 16) For example: Decimal : 0 , -9 , 22 etc Octal : 021 , 077 , 033 etc Hexadecimal : 0x7f , 0x2a , 0x521 etc In C, octal begins with a 0 while hexadecimal begins with a 0x.","title":"1. Integers"},{"location":"tr/week-5-c/ce103-week-5-c/#2-floating-point-literals","text":"A floating-point literal is a numeric literal with a fractional or exponent form. As an example: -2.0 0.0000234 -0.22E-5 Please note that \\[ E-5 = 10^{-5} \\]","title":"2. Floating-point Literals"},{"location":"tr/week-5-c/ce103-week-5-c/#3-characters","text":"Enclosing a single character inside single quote marks yields a character literal. For example, 'a','m', 'F', '2', \", and so on.","title":"3. Characters"},{"location":"tr/week-5-c/ce103-week-5-c/#4-escape-sequences","text":"In C programming, it is sometimes important to employ characters that cannot be typed or have specific meaning. For instance, newline (enter), tab, question mark, and so on. Escape sequences are utilized to utilise these characters. Escape Sequences Character \\b Backspace \\f Form feed \\n Newline \\r Return \\t Horizontal Tab \\v Vertical Tab `\\\\ Backslash \\' Single quotation mark \\\" Double quotation mark \\? Question mark \\0 Null character","title":"4. Escape Sequences"},{"location":"tr/week-5-c/ce103-week-5-c/#5-string-literals","text":"A string literal is a string of characters surrounded by double quotation marks. As an example: \"good\" //string constant \"\" //null string constant \" \" //string constant of six white space \"x\" //string constant having a single character. \"Earth is round \\n \" //prints string with a newline","title":"5. String Literals"},{"location":"tr/week-5-c/ce103-week-5-c/#constants","text":"The const keyword can be used to declare a variable whose value cannot be modified. This will result in a constant. As an example, const double PI = 3.14 ; We've introduced the keyword const. PI is a symbolic constant in this context; its value cannot be modified. const double PI = 3.14 ; PI = 2.9 ; //Error You may also use the #define preprocessor directive to declare a constant.","title":"Constants"},{"location":"tr/week-5-c/ce103-week-5-c/#c-data-types","text":"In this course, you will learn about basic data types in C programming, such as int, float, and char. Data types are variable declarations in C programming. The kind and quantity of data linked with variables are determined by this. As an example, int myVar ; In this case, myVar is an int (integer) variable. int has a size of 4 bytes.","title":"C Data Types"},{"location":"tr/week-5-c/ce103-week-5-c/#basic-types","text":"Here's a table containing commonly used types in C programming for quick access. Type Size(bytes) Format Specifiers int at least 2, usually 4 %d %i char 1 %c float 4 %f double 8 %lf short int 2 usually %hd unsigned int at least 2, usually 4 %u long int at least 4, usually 8 %ld %li long long int at least 8 %lld %lli unsigned long int at least 4 %lu unsigned long long int at least 8 %llu signed char 1 %c usigned char 1 %c long double at least 10, usually 12 or 16 %Lf","title":"Basic types"},{"location":"tr/week-5-c/ce103-week-5-c/#int","text":"Integers are entire integers with zero, positive, and negative values but no decimal values. For instance, \\(0\\) , \\(-5\\) , and \\(10\\) In order to declare an integer variable, we can use int . int id ; In this case, id is an integer variable. In C programming, you can define many variables at the same time. As an example, int id , age ; Integers are typically \\(\\text{4 bytes}\\) in size ( \\(\\text{32 bits}\\) ). It may also take $2^{32} $ different states from \\(-2147483648\\) to \\(2147483647\\) .","title":"int"},{"location":"tr/week-5-c/ce103-week-5-c/#float-and-double","text":"Real values are stored in float and double variables. float salary ; double price ; Floating-point numbers in C can also be expressed in exponential form. As an example, float normalizationFactor = 22.442e2 ; What is the distinction between float and double? Float (single precision float data type) has a size of 4 bytes. And double (double precision float data type) is 8 bytes in size.","title":"float and double"},{"location":"tr/week-5-c/ce103-week-5-c/#char","text":"The keyword char is used to declare variables of the character type. As an example, char test = 'h' ; The character variable is 1 byte in size.","title":"char"},{"location":"tr/week-5-c/ce103-week-5-c/#void","text":"void is an unfinished type. It signifies \"nothing\" or \"nothing of the sort.\" You might conceive of emptiness as the absence of something. If a function does not return anything, its return type should be void. It is important to note that void variables cannot be created.","title":"void"},{"location":"tr/week-5-c/ce103-week-5-c/#short-and-long","text":"If you need to utilize a huge number, a type specifier long can be used. Here's how it works: long a ; long long b ; long double c ; Variables a and b can store integer values in this case. In addition, c may hold a floating-point number. You can use short if you are certain that just a tiny integer range between \\(-32767, +32767\\) will be utilized. short d ; The sizeof() operator may always be used to determine the size of a variable. #include <stdio.h> int main () { short a ; long b ; long long c ; long double d ; printf ( \"size of short = %d bytes \\n \" , sizeof ( a )); printf ( \"size of long = %d bytes \\n \" , sizeof ( b )); printf ( \"size of long long = %d bytes \\n \" , sizeof ( c )); printf ( \"size of long double= %d bytes \\n \" , sizeof ( d )); return 0 ; }","title":"short and long"},{"location":"tr/week-5-c/ce103-week-5-c/#signed-and-unsigned","text":"Signed and unsigned are type modifiers in C. You may use them to change the data storage of a data type. As an example, unsigned int x ; int y ; Because we applied the unsigned modifier, the variable x can only retain zero and positive numbers. Given that int has a capacity of 4 bytes , variable y can have values ranging from - \\(2^{31}\\) to \\(2^{31}-1\\) , But variable x can hold values ranging from \\(0\\) to \\(2^{32}-1\\) .","title":"signed and unsigned"},{"location":"tr/week-5-c/ce103-week-5-c/#other-data-types-defined-in-c-programming-are","text":"bool Type Enumerated type Complex types","title":"Other data types defined in C programming are:"},{"location":"tr/week-5-c/ce103-week-5-c/#derived-data-types","text":"Derived types are data types that are derived from basic data types. Arrays, pointers, function types, structures, and so on are examples.","title":"Derived Data Types"},{"location":"tr/week-5-c/ce103-week-5-c/#c-input-output-io","text":"In this lesson, you will learn how to utilize the scanf() function to accept user input and the printf() method to display output to the user.","title":"C Input Output (I/O)"},{"location":"tr/week-5-c/ce103-week-5-c/#c-output","text":"printf() is a common output function in C programming. The function outputs formatted data to the screen. As an example,","title":"C Output"},{"location":"tr/week-5-c/ce103-week-5-c/#example-1-c-output","text":"#include <stdio.h> int main () { // Displays the string inside quotations printf ( \"C Programming\" ); return 0 ; } Output C Programming How does this software function? The main() function is required in all legal C programs. The execution of the code begins at the commencement of the main() function. The printf() function is a library function that is used to provide formatted output to the screen. The string is printed within quote marks by the function. In order to utilize printf() in our program, we must include the stdio.h header file using the #include <stdio.h> declaration. The \"Exit status\" of the program is the return 0; statement within the main() method. It's entirely voluntary.","title":"Example 1: C Output"},{"location":"tr/week-5-c/ce103-week-5-c/#example-2-integer-output","text":"#include <stdio.h> int main () { int testInteger = 5 ; printf ( \"Number = %d\" , testInteger ); return 0 ; } Output Number = 5 To print int types, we utilize the %d format specifier. The value of testInteger will be used in instead of the %d inside the quotes.","title":"Example 2: Integer Output"},{"location":"tr/week-5-c/ce103-week-5-c/#example-3-float-and-double-output","text":"#include <stdio.h> int main () { float number1 = 13.5 ; double number2 = 12.4 ; printf ( \"number1 = %f \\n \" , number1 ); printf ( \"number2 = %lf\" , number2 ); return 0 ; } Output number1 = 13 .500000 number2 = 12 .400000 We utilize the %f format specifier to print floats . Similarly, to display double numbers, we use %lf .","title":"Example 3: float and double Output"},{"location":"tr/week-5-c/ce103-week-5-c/#example-4-print-characters","text":"#include <stdio.h> int main () { char chr = 'a' ; printf ( \"character = %c\" , chr ); return 0 ; } Output character = a We utilize the %c format specifier to print char.","title":"Example 4: Print Characters"},{"location":"tr/week-5-c/ce103-week-5-c/#c-input","text":"scanf() is a widely used function in C programming to accept user input. The scanf() function reads formatted input from typical input devices like keyboards.","title":"C Input"},{"location":"tr/week-5-c/ce103-week-5-c/#example-5-integer-inputoutput","text":"#include <stdio.h> int main () { int testInteger ; printf ( \"Enter an integer: \" ); scanf ( \"%d\" , & testInteger ); printf ( \"Number = %d\" , testInteger ); return 0 ; } Output Enter an integer: 4 Number = 4 To accept int input from the user, we utilized the %d format specifier inside the scanf() method. When a user enters an integer, it is saved in the variable testInteger . You'll see that we used &testInteger within scanf () . This is due to the fact that &testInteger obtains the address of testInteger , and the value given by the user is saved in that address.","title":"Example 5: Integer Input/Output"},{"location":"tr/week-5-c/ce103-week-5-c/#example-6-float-and-double-inputoutput","text":"#include <stdio.h> int main () { float num1 ; double num2 ; printf ( \"Enter a number: \" ); scanf ( \"%f\" , & num1 ); printf ( \"Enter another number: \" ); scanf ( \"%lf\" , & num2 ); printf ( \"num1 = %f \\n \" , num1 ); printf ( \"num2 = %lf\" , num2 ); return 0 ; } Output Enter a number: 12 .523 Enter another number: 10 .2 num1 = 12 .523000 num2 = 10 .200000 For float and double , we use the format specifiers %f and %lf , respectively.","title":"Example 6: Float and Double Input/Output"},{"location":"tr/week-5-c/ce103-week-5-c/#example-7-c-character-io","text":"#include <stdio.h> int main () { char chr ; printf ( \"Enter a character: \" ); scanf ( \"%c\" , & chr ); printf ( \"You entered %c.\" , chr ); return 0 ; } Output Enter a character: g You entered g When a user enters a character into the aforementioned software, the character itself is not saved. An integer value (ASCII value) is instead stored. When we use the %c text format to represent that value, the input character is displayed. The ASCII value of the character is printed when we utilize %d to show it.","title":"Example 7: C Character I/O"},{"location":"tr/week-5-c/ce103-week-5-c/#example-8-ascii-value","text":"#include <stdio.h> int main () { char chr ; printf ( \"Enter a character: \" ); scanf ( \"%c\" , & chr ); // When %c is used, a character is displayed printf ( \"You entered %c. \\n \" , chr ); // When %d is used, ASCII value is displayed printf ( \"ASCII value is %d.\" , chr ); return 0 ; } Output Enter a character: g You entered g. ASCII value is 103 .","title":"Example 8: ASCII Value"},{"location":"tr/week-5-c/ce103-week-5-c/#io-multiple-values","text":"Here's how to take numerous user inputs and show them. #include <stdio.h> int main () { int a ; float b ; printf ( \"Enter integer and then a float: \" ); // Taking multiple inputs scanf ( \"%d%f\" , & a , & b ); printf ( \"You entered %d and %f\" , a , b ); return 0 ; } Output Enter integer and then a float: -3 3 .4 You entered -3 and 3 .400000","title":"I/O Multiple Values"},{"location":"tr/week-5-c/ce103-week-5-c/#format-specifiers-for-io","text":"As you can see from the samples above, we apply %d for int %f for float %lf for double %c for char The following is a collection of widely used C data types and associated format specifiers. Type Size(bytes) Format Specifiers int at least 2, usually 4 %d %i char 1 %c float 4 %f double 8 %lf short int 2 usually %hd unsigned int at least 2, usually 4 %u long int at least 4, usually 8 %ld %li long long int at least 8 %lld %lli unsigned long int at least 4 %lu unsigned long long int at least 8 %llu signed char 1 %c usigned char 1 %c long double at least 10, usually 12 or 16 %Lf","title":"Format Specifiers for I/O"},{"location":"tr/week-5-c/ce103-week-5-c/#c-programming-operators","text":"With the assistance of examples, you will learn about several operators in C programming in this course. An operator is a symbol that performs an operation on a value or variable. For example, the operator + is used to compute addition. C has a diverse set of operators to execute a variety of tasks.","title":"C Programming Operators"},{"location":"tr/week-5-c/ce103-week-5-c/#c-arithmetic-operators","text":"An arithmetic operator performs mathematical operations such as addition, subtraction, multiplication, division etc on numerical values (constants and variables). Operator Meaning of Operator + Addition or unary plus - Substraction or unary minus * Multiplication / Division % Remainder after division (modulo division)","title":"C Arithmetic Operators"},{"location":"tr/week-5-c/ce103-week-5-c/#example-1-arithmetic-operators","text":"// Working of arithmetic operators #include <stdio.h> int main () { int a = 9 , b = 4 , c ; c = a + b ; printf ( \"a+b = %d \\n \" , c ); c = a - b ; printf ( \"a-b = %d \\n \" , c ); c = a * b ; printf ( \"a*b = %d \\n \" , c ); c = a / b ; printf ( \"a/b = %d \\n \" , c ); c = a % b ; printf ( \"Remainder when a divided by b = %d \\n \" , c ); return 0 ; } Output a+b = 13 a-b = 5 a*b = 36 a/b = 2 Remainder when a divided by b = 1 As you might guess, the operators +, -, and * calculate addition, subtraction, and multiplication, respectively. 9/4 Equals 2.25 in standard math. In the program, however, the result is 2 . This is due to the fact that both variables a and b are integers. As a result, the output is also an integer. The compiler ignores the word following the decimal point and displays response 2 rather than 2.25 . The residual is computed using the modulo operator percent. The remaining is 1 when a=9 is divided by b=4 . Only integers can be used with the percent operator. Assume that a = 5.0, b = 2.0, c = 5 , and d = 2 . After that, in C programming. // Either one of the operands is a floating-point number a/b = 2 .5 a/d = 2 .5 c/b = 2 .5 // Both operands are integers c/d = 2","title":"Example 1: Arithmetic Operators"},{"location":"tr/week-5-c/ce103-week-5-c/#c-increment-and-decrement-operators","text":"To alter the value of an operand (constant or variable) by one, C programming offers two operators: increment ++ and decrease -- . Increment ++ raises the value by one, and decrement -- lowers the value by one. These two operators are unary, which means they only work on a single operand.","title":"C Increment and Decrement Operators"},{"location":"tr/week-5-c/ce103-week-5-c/#example-2-increment-and-decrement-operators","text":"// Working of increment and decrement operators #include <stdio.h> int main () { int a = 10 , b = 100 ; float c = 10.5 , d = 100.5 ; printf ( \"++a = %d \\n \" , ++ a ); printf ( \"--b = %d \\n \" , -- b ); printf ( \"++c = %f \\n \" , ++ c ); printf ( \"--d = %f \\n \" , -- d ); return 0 ; } Output ++a = 11 --b = 99 ++c = 11 .500000 --d = 99 .500000 The operators ++ and -- are used as prefixes here. These two operators, like a++ and a-- can also be used as postfixes.","title":"Example 2: Increment and Decrement Operators"},{"location":"tr/week-5-c/ce103-week-5-c/#increment-and-decrement-operator-as-prefix-and-postfix","text":"The increment operator ++ in programming (Java, C, C++, JavaScript, and so on) increments the value of a variable by one. Similarly, the decrement operator -- reduces a variable's value by one. a = 5 ++a ; // a becomes 6 a++ ; // a becomes 7 --a ; // a becomes 6 a-- ; // a becomes 5 So far, so straightforward. When these two operators are employed as a prefix and a postfix, there is a significant difference.","title":"Increment ++ and Decrement -- Operator as Prefix and Postfix"},{"location":"tr/week-5-c/ce103-week-5-c/#and-operator-as-prefix-and-postfix","text":"When you use the ++ operator as a prefix, such as: ++var, the value of var is increased by one and then returned. If you use the ++ operator as a postfix, such as var++, the original value of var is returned first, followed by a one-digit increase of var. The -- operator functions similarly to the ++ operator, except that it reduces the value by one.","title":"++ and -- operator as prefix and postfix"},{"location":"tr/week-5-c/ce103-week-5-c/#example-1-c-programming","text":"#include <stdio.h> int main () { int var1 = 5 , var2 = 5 ; // 5 is displayed // Then, var1 is increased to 6. printf ( \"%d \\n \" , var1 ++ ); // var2 is increased to 6 // Then, it is displayed. printf ( \"%d \\n \" , ++ var2 ); return 0 ; } Output 5 6","title":"Example 1: C Programming"},{"location":"tr/week-5-c/ce103-week-5-c/#c-assignment-operators","text":"An assignment operator is a type of operator that is used to assign a value to a variable. = is the most commonly used assignment operator. Operator Example Same as = a=b a=b += a+=b a=a+b -= a-=b a=a-b *= a*=b a=a*b /= a/=b a=a/b %= a%=b a=a%b","title":"C Assignment Operators"},{"location":"tr/week-5-c/ce103-week-5-c/#example-3-assignment-operators","text":"// Working of assignment operators #include <stdio.h> int main () { int a = 5 , c ; c = a ; // c is 5 printf ( \"c = %d \\n \" , c ); c += a ; // c is 10 printf ( \"c = %d \\n \" , c ); c -= a ; // c is 5 printf ( \"c = %d \\n \" , c ); c *= a ; // c is 25 printf ( \"c = %d \\n \" , c ); c /= a ; // c is 5 printf ( \"c = %d \\n \" , c ); c %= a ; // c = 0 printf ( \"c = %d \\n \" , c ); return 0 ; } Output c = 5 c = 10 c = 5 c = 25 c = 5 c = 0","title":"Example 3: Assignment Operators"},{"location":"tr/week-5-c/ce103-week-5-c/#c-relational-operators","text":"A relational operator verifies the relationship of two operands. If the relationship is true, it returns 1; if the relationship is false, it returns 0. Operator Meaning of Operator Example == Equal to 5 == 3 is evaluated to 0 > Greater than 5 > 3 is evaluated to 1 < Less than 5 < 3 is evaluated to 0 != Not equal to 5 != 3 is evaluated to 1 >= Greater than or equal to 5 >= 3 is evaluated to 1 <= Less than or equal to 5 <= 3 is evaluated to 0","title":"C Relational Operators"},{"location":"tr/week-5-c/ce103-week-5-c/#example-4-relational-operators","text":"// Working of relational operators #include <stdio.h> int main () { int a = 5 , b = 5 , c = 10 ; printf ( \"%d == %d is %d \\n \" , a , b , a == b ); printf ( \"%d == %d is %d \\n \" , a , c , a == c ); printf ( \"%d > %d is %d \\n \" , a , b , a > b ); printf ( \"%d > %d is %d \\n \" , a , c , a > c ); printf ( \"%d < %d is %d \\n \" , a , b , a < b ); printf ( \"%d < %d is %d \\n \" , a , c , a < c ); printf ( \"%d != %d is %d \\n \" , a , b , a != b ); printf ( \"%d != %d is %d \\n \" , a , c , a != c ); printf ( \"%d >= %d is %d \\n \" , a , b , a >= b ); printf ( \"%d >= %d is %d \\n \" , a , c , a >= c ); printf ( \"%d <= %d is %d \\n \" , a , b , a <= b ); printf ( \"%d <= %d is %d \\n \" , a , c , a <= c ); return 0 ; } Output 5 == 5 is 1 5 == 10 is 0 5 > 5 is 0 5 > 10 is 0 5 < 5 is 0 5 < 10 is 1 5 ! = 5 is 0 5 ! = 10 is 1 5 > = 5 is 1 5 > = 10 is 0 5 < = 5 is 1 5 < = 10 is 1","title":"Example 4: Relational Operators"},{"location":"tr/week-5-c/ce103-week-5-c/#c-logical-operators","text":"A logical operator expression returns either 0 or 1, depending on whether the expression is true or false. Operator Meaning Example && Logical AND. True only if all operands are true If c = 5 and d = 2 then, expression ((c==5) && (d>5)) equals to 0. | Logical OR. True only if either one operand is true ! Logical NOT. True only if the operand is 0 If c = 5 then, expression !(c==5) equals to 0.","title":"C Logical Operators"},{"location":"tr/week-5-c/ce103-week-5-c/#example-5-logical-operators","text":"// Working of logical operators #include <stdio.h> int main () { int a = 5 , b = 5 , c = 10 , result ; result = ( a == b ) && ( c > b ); printf ( \"(a == b) && (c > b) is %d \\n \" , result ); result = ( a == b ) && ( c < b ); printf ( \"(a == b) && (c < b) is %d \\n \" , result ); result = ( a == b ) || ( c < b ); printf ( \"(a == b) || (c < b) is %d \\n \" , result ); result = ( a != b ) || ( c < b ); printf ( \"(a != b) || (c < b) is %d \\n \" , result ); result = ! ( a != b ); printf ( \"!(a != b) is %d \\n \" , result ); result = ! ( a == b ); printf ( \"!(a == b) is %d \\n \" , result ); return 0 ; } Output ( a == b ) && ( c > b ) is 1 ( a == b ) && ( c < b ) is 0 ( a == b ) || ( c < b ) is 1 ( a ! = b ) || ( c < b ) is 0 ! ( a ! = b ) is 1 ! ( a == b ) is 0 Explanation of logical operator program (a == b) && (c > 5) evaluates to 1 because both operands (a == b) and (c > b) is 1 (true). (a == b) && (c < b) evaluates to 0 because operand (c < b) is 0 (false). (a == b) || (c < b) evaluates to 1 because (a = b) is 1 (true). (a != b) || (c < b) evaluates to 0 because both operand (a != b) and (c < b) are 0 (false). !(a != b) evaluates to 1 because operand (a != b) is 0 (false). Hence, !(a != b) is 1 (true). !(a == b) evaluates to 0 because (a == b) is 1 (true). Hence, !(a == b) is 0 (false).","title":"Example 5: Logical Operators"},{"location":"tr/week-5-c/ce103-week-5-c/#c-bitwise-operators","text":"Mathematical operations like as addition, subtraction, multiplication, division, and so on are transformed to bit-level during computation, which speeds up processing and saves power. In C programming, bitwise operators are used to execute bit-level operations. Operators Meaning of Operators & Bitwise AND ^ Bitwise exclusive OR ~ Bitwise complement << Shift left >> Shift right","title":"C Bitwise Operators"},{"location":"tr/week-5-c/ce103-week-5-c/#other-operators","text":"","title":"Other Operators"},{"location":"tr/week-5-c/ce103-week-5-c/#comma-operator","text":"Comma operators are used to connect similar expressions. As an example: int a , c = 5 , d ;","title":"Comma Operator"},{"location":"tr/week-5-c/ce103-week-5-c/#the-sizeof-operator","text":"sizeof is a unary operator that returns the data size (constants, variables, array, structure, etc).","title":"The sizeof operator"},{"location":"tr/week-5-c/ce103-week-5-c/#example-6-sizeof-operator","text":"#include <stdio.h> int main () { int a ; float b ; double c ; char d ; printf ( \"Size of int=%lu bytes \\n \" , sizeof ( a )); printf ( \"Size of float=%lu bytes \\n \" , sizeof ( b )); printf ( \"Size of double=%lu bytes \\n \" , sizeof ( c )); printf ( \"Size of char=%lu byte \\n \" , sizeof ( d )); return 0 ; } Output Size of int = 4 bytes Size of float = 4 bytes Size of double = 8 bytes Size of char = 1 byte Other operators, such as the ternary operator ?: , the reference operato r & , the dereference operator * , and the member selection operator -> , will be covered in more detail later.","title":"Example 6: sizeof Operator"},{"location":"tr/week-5-c/ce103-week-5-c/#c-flow-control","text":"","title":"C Flow Control"},{"location":"tr/week-5-c/ce103-week-5-c/#c-ifelse-statement","text":"With the assistance of examples, you will learn about the if statement (including if...else and nested if...else) in C programming.","title":"C if...else Statement"},{"location":"tr/week-5-c/ce103-week-5-c/#c-if-statement","text":"In C programming, the if statement has the following syntax: if ( test expression ) { // code }","title":"C if Statement"},{"location":"tr/week-5-c/ce103-week-5-c/#how-if-statement-works","text":"The test expression inside the parentheses is evaluated by the if statement (). If the test expression is true, the statements within the if body are performed. If the test expression is interpreted as false, the statements within the if body are not performed. Check relational and logical operators to understand more about when a test expression is evaluated to true (non-zero value) and false (0).","title":"How if statement works?"},{"location":"tr/week-5-c/ce103-week-5-c/#example-1-if-statement","text":"// Program to display a number if it is negative #include <stdio.h> int main () { int number ; printf ( \"Enter an integer: \" ); scanf ( \"%d\" , & number ); // true if number is less than 0 if ( number < 0 ) { printf ( \"You entered %d. \\n \" , number ); } printf ( \"The if statement is easy.\" ); return 0 ; } Output 1 Enter an integer: -2 You entered -2. The if statement is easy. When the user types -2, the test expression number 0 is evaluated as true. As a result, the value -2 that you typed is displayed on the screen. Output 2 Enter an integer: 5 The if statement is easy. When the user enters 5, the test expression number 0 is assessed as false, and the statement within the body of the if is not performed.","title":"Example 1: if statement"},{"location":"tr/week-5-c/ce103-week-5-c/#c-ifelse-statement_1","text":"An else block is optional in the if statement. The if...else sentence has the following syntax: if ( test expression ) { // run code if test expression is true } else { // run code if test expression is false }","title":"C if...else Statement"},{"location":"tr/week-5-c/ce103-week-5-c/#how-ifelse-statement-works","text":"If the test expression is found to be true, Statements within the if body are performed. Statements within the body of else are not executed. If the test expression is found to be false, Phrases inside the body of else are performed; statements within the body of if are skipped.","title":"How if...else statement works?"},{"location":"tr/week-5-c/ce103-week-5-c/#example-2-ifelse-statement","text":"// Check whether an integer is odd or even #include <stdio.h> int main () { int number ; printf ( \"Enter an integer: \" ); scanf ( \"%d\" , & number ); // True if the remainder is 0 if ( number % 2 == 0 ) { printf ( \"%d is an even integer.\" , number ); } else { printf ( \"%d is an odd integer.\" , number ); } return 0 ; } Output Enter an integer: 7 7 is an odd integer. When the user enters 7, the test expression number% 2==0 returns false. As a result, the statement within the body of else is performed.","title":"Example 2: if...else statement"},{"location":"tr/week-5-c/ce103-week-5-c/#c-ifelse-ladder","text":"Depending on whether the test phrase is true or false, the if...else statement runs two separate programs. Sometimes a decision must be made between more than two options. You may use the if...else ladder to compare numerous test expressions and execute various statements.","title":"C if...else Ladder"},{"location":"tr/week-5-c/ce103-week-5-c/#syntax-of-ifelse-ladder","text":"if ( test expression1 ) { // statement(s) } else if ( test expression2 ) { // statement(s) } else if ( test expression3 ) { // statement(s) } . . else { // statement(s) }","title":"Syntax of if...else Ladder"},{"location":"tr/week-5-c/ce103-week-5-c/#example-3-c-ifelse-ladder","text":"// Program to relate two integers using =, > or < symbol #include <stdio.h> int main () { int number1 , number2 ; printf ( \"Enter two integers: \" ); scanf ( \"%d %d\" , & number1 , & number2 ); //checks if the two integers are equal. if ( number1 == number2 ) { printf ( \"Result: %d = %d\" , number1 , number2 ); } //checks if number1 is greater than number2. else if ( number1 > number2 ) { printf ( \"Result: %d > %d\" , number1 , number2 ); } //checks if both test expressions are false else { printf ( \"Result: %d < %d\" , number1 , number2 ); } return 0 ; } Output Enter two integers: 12 23 Result: 12 < 23","title":"Example 3: C if...else Ladder"},{"location":"tr/week-5-c/ce103-week-5-c/#nested-ifelse","text":"An if...else statement can be included within the body of another if...else statement.","title":"Nested if...else"},{"location":"tr/week-5-c/ce103-week-5-c/#example-4-nested-ifelse","text":"This program, similar to the if...else ladder's example, compares two numbers using, >, and =. To fix this problem, we will utilize a layered if...else expression. #include <stdio.h> int main () { int number1 , number2 ; printf ( \"Enter two integers: \" ); scanf ( \"%d %d\" , & number1 , & number2 ); if ( number1 >= number2 ) { if ( number1 == number2 ) { printf ( \"Result: %d = %d\" , number1 , number2 ); } else { printf ( \"Result: %d > %d\" , number1 , number2 ); } } else { printf ( \"Result: %d < %d\" , number1 , number2 ); } return 0 ; } You do not need to use brackets if the body of an if...else statement contains only one sentence. if ( a > b ) { printf ( \"Hello\" ); } printf ( \"Hi\" ); is equivalent to if ( a > b ) printf ( \"Hello\" ); printf ( \"Hi\" );","title":"Example 4: Nested if...else"},{"location":"tr/week-5-c/ce103-week-5-c/#c-for-loop","text":"With the assistance of examples, you will learn how to design a for loop in C programming in this article. A loop is a programming construct that is used to repeat a block of code until the stated condition is fulfilled. Loops in C programming are classified into three types: while loop for loop do..while loop This lesson will teach us about the for loop. The while and do...while loops will be covered in the next tutorial.","title":"C for Loop"},{"location":"tr/week-5-c/ce103-week-5-c/#for-loop","text":"The for loop has the following syntax: for ( initializationStatement ; testExpression ; updateStatement ) { // statements inside the body of loop }","title":"for Loop"},{"location":"tr/week-5-c/ce103-week-5-c/#how-for-loop-works","text":"The initialization statement is only used once. The test expression is then evaluated. The for loop is ended if the test statement is interpreted as false. If the test expression is true, the statements inside the for loop's body are performed, and the update expression is updated. The test expression is examined once more. This procedure is repeated until the test expression is false. The loop is terminated when the test expression is false.","title":"How for loop works?"},{"location":"tr/week-5-c/ce103-week-5-c/#example-1-for-loop","text":"// Print numbers from 1 to 10 #include <stdio.h> int main () { int i ; for ( i = 1 ; i < 11 ; ++ i ) { printf ( \"%d \" , i ); } return 0 ; } Output 1 2 3 4 5 6 7 8 9 10 i is initialized to 1. The test expression i < 11 is evaluated. Since 1 less than 11 is true, the body of for loop is executed. This will print the 1 (value of i) on the screen. The update statement ++i is executed. Now, the value of i will be 2. Again, the test expression is evaluated to true, and the body of for loop is executed. This will print 2 (value of i) on the screen. Again, the update statement ++i is executed and the test expression i < 11 is evaluated. This process goes on until i becomes 11. When i becomes 11, i < 11 will be false, and the for loop terminates.","title":"Example 1: for loop"},{"location":"tr/week-5-c/ce103-week-5-c/#example-2-for-loop","text":"// Program to calculate the sum of first n natural numbers // Positive integers 1,2,3...n are known as natural numbers #include <stdio.h> int main () { int num , count , sum = 0 ; printf ( \"Enter a positive integer: \" ); scanf ( \"%d\" , & num ); // for loop terminates when num is less than count for ( count = 1 ; count <= num ; ++ count ) { sum += count ; } printf ( \"Sum = %d\" , sum ); return 0 ; } Output Enter a positive integer: 10 Sum = 55 The value entered by the user is stored in the variable num. Suppose, the user entered 10. The count is initialized to 1 and the test expression is evaluated. Since the test expression count<=num (1 less than or equal to 10) is true, the body of for loop is executed and the value of sum will equal to 1. Then, the update statement ++count is executed and count will equal to 2. Again, the test expression is evaluated. Since 2 is also less than 10, the test expression is evaluated to true and the body of the for loop is executed. Now, sum will equal 3. This process goes on and the sum is calculated until the count reaches 11. When the count is 11, the test expression is evaluated to 0 (false), and the loop terminates. Then, the value of sum is printed on the screen.","title":"Example 2: for loop"},{"location":"tr/week-5-c/ce103-week-5-c/#c-while-and-dowhile-loop","text":"In this tutorial, you will learn to create while and do...while loop in C programming with the help of examples. In programming, loops are used to repeat a block of code until a specified condition is met. C programming has three types of loops. for loop while loop do...while loop In the previous tutorial, we learned about for loop. In this tutorial, we will learn about while and do..while loop.","title":"C while and do...while Loop"},{"location":"tr/week-5-c/ce103-week-5-c/#while-loop","text":"The syntax of the while loop is: while ( testExpression ) { // the body of the loop }","title":"while loop"},{"location":"tr/week-5-c/ce103-week-5-c/#how-while-loop-works","text":"The while loop evaluates the testExpression inside the parentheses () . If testExpression is true , statements inside the body of while loop are executed. Then, testExpression is evaluated again. The process goes on until testExpression is evaluated to false . If testExpression is false , the loop terminates (ends).","title":"How while loop works?"},{"location":"tr/week-5-c/ce103-week-5-c/#example-1-while-loop","text":"// Print numbers from 1 to 5 #include <stdio.h> int main () { int i = 1 ; while ( i <= 5 ) { printf ( \"%d \\n \" , i ); ++ i ; } return 0 ; } Output 1 2 3 4 5 Here, we have initialized i to 1. When i = 1 , the test expression i <= 5 is true . Hence, the body of the while loop is executed. This prints 1 on the screen and the value of i is increased to 2 . Now, i = 2 , the test expression i <= 5 is again true . The body of the while loop is executed again. This prints 2 on the screen and the value of i is increased to 3 . This process goes on until i becomes 6. Then, the test expression i <= 5 will be false and the loop terminates.","title":"Example 1: while loop"},{"location":"tr/week-5-c/ce103-week-5-c/#dowhile-loop","text":"The do..while loop is similar to the while loop with one important difference. The body of do...while loop is executed at least once. Only then, the test expression is evaluated. The syntax of the do...while loop is: do { // the body of the loop } while ( testExpression );","title":"do...while loop"},{"location":"tr/week-5-c/ce103-week-5-c/#how-dowhile-loop-works","text":"The body of do...while loop is executed once. Only then, the testExpression is evaluated. If testExpression is true , the body of the loop is executed again and testExpression is evaluated once more. This process goes on until testExpression becomes false . If testExpression is false , the loop ends.","title":"How do...while loop works?"},{"location":"tr/week-5-c/ce103-week-5-c/#flowchart-of-dowhile-loop","text":"","title":"Flowchart of do...while Loop"},{"location":"tr/week-5-c/ce103-week-5-c/#example-2-dowhile-loop","text":"// Program to add numbers until the user enters zero #include <stdio.h> int main () { double number , sum = 0 ; // the body of the loop is executed at least once do { printf ( \"Enter a number: \" ); scanf ( \"%lf\" , & number ); sum += number ; } while ( number != 0.0 ); printf ( \"Sum = %.2lf\" , sum ); return 0 ; } Output Enter a number: 1 .5 Enter a number: 2 .4 Enter a number: -3.4 Enter a number: 4 .2 Enter a number: 0 Sum = 4 .70 Here, we have used a do...while loop to prompt the user to enter a number. The loop works as long as the input number is not 0 . The do...while loop executes at least once i.e. the first iteration runs without checking the condition. The condition is checked only after the first iteration has been executed. do { printf ( \"Enter a number: \" ); scanf ( \"%lf\" , & number ); sum += number ; } while ( number != 0.0 ); So, if the first input is a non-zero number, that number is added to the sum variable and the loop continues to the next iteration. This process is repeated until the user enters 0 . But if the first input is 0, there will be no second iteration of the loop and sum becomes 0.0 . Outside the loop, we print the value of sum.","title":"Example 2: do...while loop"},{"location":"tr/week-5-c/ce103-week-5-c/#c-break-and-continue","text":"We learned about loops in previous tutorials. In this tutorial, we will learn to use break and continue statements with the help of examples.","title":"C break and continue"},{"location":"tr/week-5-c/ce103-week-5-c/#c-break","text":"The break statement ends the loop immediately when it is encountered. Its syntax is: break ; The break statement is almost always used with if...else statement inside the loop.","title":"C break"},{"location":"tr/week-5-c/ce103-week-5-c/#example-1-break-statement","text":"// Program to calculate the sum of numbers (10 numbers max) // If the user enters a negative number, the loop terminates #include <stdio.h> int main () { int i ; double number , sum = 0.0 ; for ( i = 1 ; i <= 10 ; ++ i ) { printf ( \"Enter n%d: \" , i ); scanf ( \"%lf\" , & number ); // if the user enters a negative number, break the loop if ( number < 0.0 ) { break ; } sum += number ; // sum = sum + number; } printf ( \"Sum = %.2lf\" , sum ); return 0 ; } Output Enter n1: 2 .4 Enter n2: 4 .5 Enter n3: 3 .4 Enter n4: -3 Sum = 10 .30 This program calculates the sum of a maximum of 10 numbers. Why a maximum of 10 numbers? It's because if the user enters a negative number, the break statement is executed. This will end the for loop, and the sum is displayed. In C, break is also used with the switch statement. This will be discussed in the next tutorial.","title":"Example 1: break statement"},{"location":"tr/week-5-c/ce103-week-5-c/#c-continue","text":"The continue statement skips the current iteration of the loop and continues with the next iteration. Its syntax is: continue ; The continue statement is almost always used with the if...else statement.","title":"C continue"},{"location":"tr/week-5-c/ce103-week-5-c/#how-continue-statement-works","text":"","title":"How continue statement works?"},{"location":"tr/week-5-c/ce103-week-5-c/#example-2-continue-statement","text":"// Program to calculate the sum of numbers (10 numbers max) // If the user enters a negative number, it's not added to the result #include <stdio.h> int main () { int i ; double number , sum = 0.0 ; for ( i = 1 ; i <= 10 ; ++ i ) { printf ( \"Enter a n%d: \" , i ); scanf ( \"%lf\" , & number ); if ( number < 0.0 ) { continue ; } sum += number ; // sum = sum + number; } printf ( \"Sum = %.2lf\" , sum ); return 0 ; } Output Enter n1: 1 .1 Enter n2: 2 .2 Enter n3: 5 .5 Enter n4: 4 .4 Enter n5: -3.4 Enter n6: -45.5 Enter n7: 34 .5 Enter n8: -4.2 Enter n9: -1000 Enter n10: 12 Sum = 59 .70 In this program, when the user enters a positive number, the sum is calculated using sum += number; statement. When the user enters a negative number, the continue statement is executed and it skips the negative number from the calculation.","title":"Example 2: continue statement"},{"location":"tr/week-5-c/ce103-week-5-c/#c-switch-statement","text":"In this tutorial, you will learn to create the switch statement in C programming with the help of an example. The switch statement allows us to execute one code block among many alternatives. You can do the same thing with the if...else..if ladder. However, the syntax of the switch statement is much easier to read and write.","title":"C switch Statement"},{"location":"tr/week-5-c/ce103-week-5-c/#syntax-of-switchcase","text":"switch ( expression ) { case constant1 : // statements break ; case constant2 : // statements break ; . . . default : // default statements } How does the switch statement work? The expression is evaluated once and compared with the values of each case label. If there is a match, the corresponding statements after the matching label are executed. For example, if the value of the expression is equal to constant2, statements after case constant2: are executed until break is encountered. If there is no match, the default statements are executed. If we do not use break , all statements after the matching label are executed. By the way, the default clause inside the switch statement is optional.","title":"Syntax of switch...case"},{"location":"tr/week-5-c/ce103-week-5-c/#example-simple-calculator","text":"// Program to create a simple calculator #include <stdio.h> int main () { char operator ; double n1 , n2 ; printf ( \"Enter an operator (+, -, *, /): \" ); scanf ( \"%c\" , & operator ); printf ( \"Enter two operands: \" ); scanf ( \"%lf %lf\" , & n1 , & n2 ); switch ( operator ) { case '+' : printf ( \"%.1lf + %.1lf = %.1lf\" , n1 , n2 , n1 + n2 ); break ; case '-' : printf ( \"%.1lf - %.1lf = %.1lf\" , n1 , n2 , n1 - n2 ); break ; case '*' : printf ( \"%.1lf * %.1lf = %.1lf\" , n1 , n2 , n1 * n2 ); break ; case '/' : printf ( \"%.1lf / %.1lf = %.1lf\" , n1 , n2 , n1 / n2 ); break ; // operator doesn't match any case constant +, -, *, / default : printf ( \"Error! operator is not correct\" ); } return 0 ; } Output Enter an operator ( +, -, *, ) : - Enter two operands: 32 .5 12 .4 32 .5 - 12 .4 = 20 .1 The - operator entered by the user is stored in the operator variable. And, two operands 32.5 and 12.4 are stored in variables n1 and n2 respectively. Since the operator is - , the control of the program jumps to printf ( \"%.1lf - %.1lf = %.1lf\" , n1 , n2 , n1 - n2 ); Finally, the break statement terminates the switch statement.","title":"Example: Simple Calculator"},{"location":"tr/week-5-c/ce103-week-5-c/#c-goto-statement","text":"In this tutorial, you will learn to create the goto statement in C programming. Also, you will learn when to use a goto statement and when not to use it. The goto statement allows us to transfer control of the program to the specified label.","title":"C goto Statement"},{"location":"tr/week-5-c/ce103-week-5-c/#syntax-of-goto-statement","text":"goto label ; ... .. ... ... .. ... label : statement ; The label is an identifier. When the goto statement is encountered, the control of the program jumps to label: and starts executing the code.","title":"Syntax of goto Statement"},{"location":"tr/week-5-c/ce103-week-5-c/#example-goto-statement","text":"// Program to calculate the sum and average of positive numbers // If the user enters a negative number, the sum and average are displayed. #include <stdio.h> int main () { const int maxInput = 100 ; int i ; double number , average , sum = 0.0 ; for ( i = 1 ; i <= maxInput ; ++ i ) { printf ( \"%d. Enter a number: \" , i ); scanf ( \"%lf\" , & number ); // go to jump if the user enters a negative number if ( number < 0.0 ) { goto jump ; } sum += number ; } jump : average = sum / ( i - 1 ); printf ( \"Sum = %.2f \\n \" , sum ); printf ( \"Average = %.2f\" , average ); return 0 ; } Output 1 . Enter a number: 3 2 . Enter a number: 4 .3 3 . Enter a number: 9 .3 4 . Enter a number: -2.9 Sum = 16 .60 Average = 5 .53","title":"Example: goto Statement"},{"location":"tr/week-5-c/ce103-week-5-c/#reasons-to-avoid-goto","text":"The use of goto statement may lead to code that is buggy and hard to follow. For example, one : for ( i = 0 ; i < number ; ++ i ) { test += i ; goto two ; } two : if ( test > 5 ) { goto three ; } ... .. ... Also, the goto statement allows you to do bad stuff such as jump out of the scope. That being said, goto can be useful sometimes. For example: to break from nested loops.","title":"Reasons to avoid goto"},{"location":"tr/week-5-c/ce103-week-5-c/#should-you-use-goto","text":"If you think the use of goto statement simplifies your program, you can use it. That being said, goto is rarely useful and you can create any C program without using goto altogether. Here's a quote from Bjarne Stroustrup, creator of C++, \"The fact that 'goto' can do anything is exactly why we don't use it.\" C Functions C User-defined functions Types of User-defined Functions in C Programming C Recursion (Recursive function) C Storage Class C Function Examples C Arrays (With Examples) C Multidimensional Arrays (2d and 3d Array) Pass arrays to a function in C for Pointers check CS50 visuals in PDF C Pointers (With Examples) Relationship Between Arrays and Pointers in C Programming (With Examples) C Pass Addresses and Pointers to Functions C Dynamic Memory Allocation Using malloc(), calloc(), free() & realloc() C Array and Pointer Examples Strings in C (With Examples) String Manipulations In C Programming Using Library Functions String Examples in C Programming c. C Functions i. C Programming Functions ii. C User-defined Functions iii. C Function Types iv. C Recursion v. C Storage Class vi. C Function Examples d. C Programming Arrays i. C Programming Arrays ii. C Multi-dimensional Arrays iii. C Arrays & Functions e. C Programming Pointers i. C Programming Pointers ii. C Pointers & Arrays iii. C Pointers and Functions iv. C Memory Allocation v. Array & Pointer Examples f. C Programming Strings i. C Programming Strings ii. C String Functions iii. C String Examples g. C Structure and Union i. C Structure ii. C Struct & Pointers iii. C Struct & Functions iv. C Unions v. C Struct Examples h. C Programming Files i. C Files Input/Output ii. C Files Examples i. Additional Topics i. C Enumeration ii. C Preprocessors iii. C Standard Library C Programming Examples https://cdnvideo.eba.gov.tr/fatihkalem/fatihkalem_portable.zip https://cdnvideo.eba.gov.tr/fatihkalem/fatihkalem_setup.exe","title":"Should you use goto?"},{"location":"tr/week-5-c/ce103-week-5-c/#extras","text":"","title":"Extras"},{"location":"tr/week-5-c/sources/console-snake-game/","text":"Console Snake Game \u00b6 Description \u00b6 A console snake game that can (or should) work in linux & windows environments. This was created in my first year at Murdoch University, Perth Western Australia. Compiling \u00b6 Linux \u00b6 wget https://raw.githubusercontent.com/Contagious06/console-snake-game/master/src/snake.c gcc snake.c \u2013lm \u2013o snake.out chmod +x snake.out ./snake.out Windows \u00b6 Download https://raw.githubusercontent.com/Contagious06/console-snake-game/master/src/snake.c bcc32 snake.c snake.exe Demo \u00b6","title":"Console Snake Game"},{"location":"tr/week-5-c/sources/console-snake-game/#console-snake-game","text":"","title":"Console Snake Game"},{"location":"tr/week-5-c/sources/console-snake-game/#description","text":"A console snake game that can (or should) work in linux & windows environments. This was created in my first year at Murdoch University, Perth Western Australia.","title":"Description"},{"location":"tr/week-5-c/sources/console-snake-game/#compiling","text":"","title":"Compiling"},{"location":"tr/week-5-c/sources/console-snake-game/#linux","text":"wget https://raw.githubusercontent.com/Contagious06/console-snake-game/master/src/snake.c gcc snake.c \u2013lm \u2013o snake.out chmod +x snake.out ./snake.out","title":"Linux"},{"location":"tr/week-5-c/sources/console-snake-game/#windows","text":"Download https://raw.githubusercontent.com/Contagious06/console-snake-game/master/src/snake.c bcc32 snake.c snake.exe","title":"Windows"},{"location":"tr/week-5-c/sources/console-snake-game/#demo","text":"","title":"Demo"},{"location":"tr/week-6-cpp/ce103-week-6-cpp/","text":"CE103 Algorithms and Programming I \u00b6 Week-6 \u00b6 Fall Semester, 2021-2022 \u00b6 Download DOC , SLIDE , PPTX C++ Functional Console Programming \u00b6 Books and Resources \u00b6 free-programming-books/free-programming-books-langs.md at master \u00b7 EbookFoundation/free-programming-books \u00b7 GitHub C++ Functional Console Programming \u00b6 We will follow the following topics Learn C++ Programming Introduction to C++ | C Plus Plus Programming Language Tutorials The C and C++ programming tutorials, hands-on approach with program examples, code samples and tons of output images using Visual C++, C++ Builder, Linux gcc and g++ compilers and IDE Cpp Programming a. C++ Introduction i. C++ Variables and Literals ii. C++ Data Types iii. C++ Basic I/O iv. C++ Type Conversion C++ String to Int and Vice-Versa C++ String to Float, Double and Vice-Versa v. C++ Operators vi. C++ Comments b. C++ Flow Control i. C++ if..else ii. C++ for loop iii. C++ do..while loop iv. C++ break statement v. C++ continue statement vi. C++ switch statement vii. C++ goto statement c. C++ Functions i. C++ Functions ii. C++ Function Types iii. C++ Function Overloading iv. C++ Default Argument v. C++ Storage Class vi. C++ Recursion vii. C++ Return Reference d. C++ Arrays & String i. C++ Arrays ii. Multidimensional Arrays iii. C++ Function and Array iv. C++ String e. C++ Structures i. C++ Structures ii. Structure and Function iii. C++ Pointers to Structure iv. C++ Enumeration f. C++ Object & Class i. C++ Objects and Class ii. C++ Constructors iii. C++ Objects & Function iv. C++ Operator Overloading g. C++ Pointers i. C++ Pointer ii. C++ Pointers and Arrays iii. C++ Pointers and Functions iv. C++ Memory Management h. C++ Inheritance i. C++ Inheritance ii. Inheritance Access Control iii. C++ Function Overriding iv. Multiple & Multilevel Inheritance v. C++ Friend Function vi. C++ Virtual Function C++ Templates","title":"Week-6 (C++ Console Programming)"},{"location":"tr/week-6-cpp/ce103-week-6-cpp/#ce103-algorithms-and-programming-i","text":"","title":"CE103 Algorithms and Programming I"},{"location":"tr/week-6-cpp/ce103-week-6-cpp/#week-6","text":"","title":"Week-6"},{"location":"tr/week-6-cpp/ce103-week-6-cpp/#fall-semester-2021-2022","text":"Download DOC , SLIDE , PPTX","title":"Fall Semester, 2021-2022"},{"location":"tr/week-6-cpp/ce103-week-6-cpp/#c-functional-console-programming","text":"","title":"C++ Functional Console Programming"},{"location":"tr/week-6-cpp/ce103-week-6-cpp/#books-and-resources","text":"free-programming-books/free-programming-books-langs.md at master \u00b7 EbookFoundation/free-programming-books \u00b7 GitHub","title":"Books and Resources"},{"location":"tr/week-6-cpp/ce103-week-6-cpp/#c-functional-console-programming_1","text":"We will follow the following topics Learn C++ Programming Introduction to C++ | C Plus Plus Programming Language Tutorials The C and C++ programming tutorials, hands-on approach with program examples, code samples and tons of output images using Visual C++, C++ Builder, Linux gcc and g++ compilers and IDE Cpp Programming a. C++ Introduction i. C++ Variables and Literals ii. C++ Data Types iii. C++ Basic I/O iv. C++ Type Conversion C++ String to Int and Vice-Versa C++ String to Float, Double and Vice-Versa v. C++ Operators vi. C++ Comments b. C++ Flow Control i. C++ if..else ii. C++ for loop iii. C++ do..while loop iv. C++ break statement v. C++ continue statement vi. C++ switch statement vii. C++ goto statement c. C++ Functions i. C++ Functions ii. C++ Function Types iii. C++ Function Overloading iv. C++ Default Argument v. C++ Storage Class vi. C++ Recursion vii. C++ Return Reference d. C++ Arrays & String i. C++ Arrays ii. Multidimensional Arrays iii. C++ Function and Array iv. C++ String e. C++ Structures i. C++ Structures ii. Structure and Function iii. C++ Pointers to Structure iv. C++ Enumeration f. C++ Object & Class i. C++ Objects and Class ii. C++ Constructors iii. C++ Objects & Function iv. C++ Operator Overloading g. C++ Pointers i. C++ Pointer ii. C++ Pointers and Arrays iii. C++ Pointers and Functions iv. C++ Memory Management h. C++ Inheritance i. C++ Inheritance ii. Inheritance Access Control iii. C++ Function Overriding iv. Multiple & Multilevel Inheritance v. C++ Friend Function vi. C++ Virtual Function C++ Templates","title":"C++ Functional Console Programming"},{"location":"tr/week-7-csharp/ce103-week-7-csharp/","text":"CE103 Algorithms and Programming I \u00b6 Week-7 \u00b6 Fall Semester, 2021-2022 \u00b6 Download DOC , SLIDE , PPTX C# Functional Console Programming \u00b6 We will follow the following topics Learn C# Programming Books Free C# Programming Book free-programming-books/free-programming-books-langs.md at master \u00b7 EbookFoundation/free-programming-books \u00b7 GitHub Extras \u00b6 Creating a Simple Dynamic-Link Library - Win32 apps | Microsoft Docs Dynamic-Link Library Creation - Win32 apps | Microsoft Docs Exporting from a DLL | Microsoft Docs Exporting from a DLL Using DEF Files | Microsoft Docs How to create a DLL library in C and then use it with C# - CodeProject DLL - How to Write DLL - Dynamic Link Library in C - Steps to Create and Use https://www.codementor.io/@a_hathon/building-and-using-dlls-in-c-d7rrd4caz DLL Injection - free code corner GitHub - dennisbabkin/InjectAll: Tutorial that demonstrates how to code a Windows driver to inject a custom DLL into all running processes. I coded it from start to finish using C++ and x86/x64 Assembly language in Microsoft Visual Studio. The solution includes a kernel driver project, a DLL project and a C++ test console project. Coding Windows Kernel Driver - InjectAll - Making the Visual Studio solution for DLL injection into all running processes. Others \u00b6 std::dec, std::hex, std::oct - cppreference.com std::setbase - cppreference.com C++ Tutorial: Multi-Threaded Programming - Thread for Win32 - 2020 Csharp Programming a. Introduction i. C# Hello World ii. C# Keywords & Identifiers iii. C# Variables iv. C# Operators v. C# Basic I/O vi. C# Expressions & Statements vii. C# Comments b. Flow Control i. C# if..else ii. C# for loop iii. C# while loop iv. C# foreach loop v. C# switch statement vi. C# ternary operator c. Exception Handling d. Other Topics i. C# Bitwise Operators ii. C# Preprocessor Directives iii. C# Namespaces iv. C# Partial Class & Method","title":"Week-7 (C# Console Programming)"},{"location":"tr/week-7-csharp/ce103-week-7-csharp/#ce103-algorithms-and-programming-i","text":"","title":"CE103 Algorithms and Programming I"},{"location":"tr/week-7-csharp/ce103-week-7-csharp/#week-7","text":"","title":"Week-7"},{"location":"tr/week-7-csharp/ce103-week-7-csharp/#fall-semester-2021-2022","text":"Download DOC , SLIDE , PPTX","title":"Fall Semester, 2021-2022"},{"location":"tr/week-7-csharp/ce103-week-7-csharp/#c-functional-console-programming","text":"We will follow the following topics Learn C# Programming Books Free C# Programming Book free-programming-books/free-programming-books-langs.md at master \u00b7 EbookFoundation/free-programming-books \u00b7 GitHub","title":"C# Functional Console Programming"},{"location":"tr/week-7-csharp/ce103-week-7-csharp/#extras","text":"Creating a Simple Dynamic-Link Library - Win32 apps | Microsoft Docs Dynamic-Link Library Creation - Win32 apps | Microsoft Docs Exporting from a DLL | Microsoft Docs Exporting from a DLL Using DEF Files | Microsoft Docs How to create a DLL library in C and then use it with C# - CodeProject DLL - How to Write DLL - Dynamic Link Library in C - Steps to Create and Use https://www.codementor.io/@a_hathon/building-and-using-dlls-in-c-d7rrd4caz DLL Injection - free code corner GitHub - dennisbabkin/InjectAll: Tutorial that demonstrates how to code a Windows driver to inject a custom DLL into all running processes. I coded it from start to finish using C++ and x86/x64 Assembly language in Microsoft Visual Studio. The solution includes a kernel driver project, a DLL project and a C++ test console project. Coding Windows Kernel Driver - InjectAll - Making the Visual Studio solution for DLL injection into all running processes.","title":"Extras"},{"location":"tr/week-7-csharp/ce103-week-7-csharp/#others","text":"std::dec, std::hex, std::oct - cppreference.com std::setbase - cppreference.com C++ Tutorial: Multi-Threaded Programming - Thread for Win32 - 2020 Csharp Programming a. Introduction i. C# Hello World ii. C# Keywords & Identifiers iii. C# Variables iv. C# Operators v. C# Basic I/O vi. C# Expressions & Statements vii. C# Comments b. Flow Control i. C# if..else ii. C# for loop iii. C# while loop iv. C# foreach loop v. C# switch statement vi. C# ternary operator c. Exception Handling d. Other Topics i. C# Bitwise Operators ii. C# Preprocessor Directives iii. C# Namespaces iv. C# Partial Class & Method","title":"Others"},{"location":"tr/week-8-midterm/ce103-week-8-midterm/","text":"CE103 Algorithms and Programming I \u00b6 Week-8 (Midterm) \u00b6 Fall Semester, 2021-2022 \u00b6 Download DOC , SLIDE , PPTX Midterm \u00b6","title":"Week-8 (Midterm)"},{"location":"tr/week-8-midterm/ce103-week-8-midterm/#ce103-algorithms-and-programming-i","text":"","title":"CE103 Algorithms and Programming I"},{"location":"tr/week-8-midterm/ce103-week-8-midterm/#week-8-midterm","text":"","title":"Week-8 (Midterm)"},{"location":"tr/week-8-midterm/ce103-week-8-midterm/#fall-semester-2021-2022","text":"Download DOC , SLIDE , PPTX","title":"Fall Semester, 2021-2022"},{"location":"tr/week-8-midterm/ce103-week-8-midterm/#midterm","text":"","title":"Midterm"},{"location":"tr/week-9-java-I/ce103-week-9-java-I/","text":"CE103 Algorithms and Programming I \u00b6 Week-9 (Java Functional Console Programming-I) \u00b6 Fall Semester, 2021-2022 \u00b6 Download DOC , SLIDE , PPTX Java Functional Console Programming-I \u00b6 Java Programming a. Java Introduction i. Java Hello World ii. Java JVM, JRE, and JDK iii. Java Variables iv. Java Data Types v. Java Operators vi. Java Input and Output vii. Java Expressions & Blocks viii. Java Comment b. Java Flow Control i. Java if..else ii. Java switch statement iii. Java for loop iv. Java for-each loop v. Java while loop vi. Java break statement vii. Java continue statement c. Java Arrays i. Java Arrays ii. Multidimensional Array Java Copy Array","title":"Week-9 (Java Console Programming-I)"},{"location":"tr/week-9-java-I/ce103-week-9-java-I/#ce103-algorithms-and-programming-i","text":"","title":"CE103 Algorithms and Programming I"},{"location":"tr/week-9-java-I/ce103-week-9-java-I/#week-9-java-functional-console-programming-i","text":"","title":"Week-9 (Java Functional Console Programming-I)"},{"location":"tr/week-9-java-I/ce103-week-9-java-I/#fall-semester-2021-2022","text":"Download DOC , SLIDE , PPTX","title":"Fall Semester, 2021-2022"},{"location":"tr/week-9-java-I/ce103-week-9-java-I/#java-functional-console-programming-i","text":"Java Programming a. Java Introduction i. Java Hello World ii. Java JVM, JRE, and JDK iii. Java Variables iv. Java Data Types v. Java Operators vi. Java Input and Output vii. Java Expressions & Blocks viii. Java Comment b. Java Flow Control i. Java if..else ii. Java switch statement iii. Java for loop iv. Java for-each loop v. Java while loop vi. Java break statement vii. Java continue statement c. Java Arrays i. Java Arrays ii. Multidimensional Array Java Copy Array","title":"Java Functional Console Programming-I"}]}