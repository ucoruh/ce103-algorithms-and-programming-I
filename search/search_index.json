{"config":{"lang":["en","tr"],"separator":"[\\s\\-]+","pipeline":["trimmer","stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Hello World</p>"},{"location":"license/","title":"License","text":""},{"location":"license/#license","title":"License","text":"<p>MIT License</p> <p>Copyright \u00a9 2019-2021 U\u011fur CORUH</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#changelog","title":"Changelog","text":""},{"location":"changelog/#material-for-software-developers","title":"Material for Software Developers","text":""},{"location":"changelog/#1.0.0","title":"1.0.0 _ October 20, 2020","text":"<ul> <li>Initial release</li> </ul>"},{"location":"resume/","title":"Resume","text":""},{"location":"resume/#resume","title":"Resume","text":"<p>Download </p> <ul> <li> <p>Resume-English</p> </li> <li> <p>Resume-Turkish</p> </li> </ul> English Turkish"},{"location":"syllabus/syllabus/","title":"CE103 Algorithms and Programming-I","text":""},{"location":"syllabus/syllabus/#recep-tayyip-erdogan-university","title":"Recep Tayyip Erdogan University","text":""},{"location":"syllabus/syllabus/#faculty-of-engineering-and-architecture","title":"Faculty of Engineering and Architecture","text":""},{"location":"syllabus/syllabus/#computer-engineering","title":"Computer Engineering","text":""},{"location":"syllabus/syllabus/#ce103-algorithms-and-programming-i","title":"CE103 Algorithms and Programming-I","text":""},{"location":"syllabus/syllabus/#syllabus","title":"Syllabus","text":""},{"location":"syllabus/syllabus/#fall-semester-2023-2024","title":"Fall Semester, 2023-2024","text":"<p>Download DOC, SLIDE, PPTX</p> Instructor Asst. Prof. Dr. U\u011fur CORUH Contact Information ugur.coruh@erdogan.edu.tr Office No F-301 Google Classroom Code TBD Microsoft Teams Code etj1k7b Lecture Hours and Days Wednesday 09:00 - 12:00 (Theory) / Thursday 13:00 - 14:30 (Lab) Lecture Classroom \u0130\u0130BF-414 (Level-4) Office Hours Scheduled through your university account, meetings will take place via Google Meet and are coordinated by request through email. To expedite responses, please initiate your email subject line with the [CE103] tag and maintain a formal, concise, and clear email body. Lecture and Communication Language English Theory/Laboratory Course Hour Per Week 3/2 Hours Credit 4 Prerequisite TBD Corequisite TBD Requirement TBD <p>*TBD: To Be Defined.</p>"},{"location":"syllabus/syllabus/#a-course-description","title":"A.    Course Description","text":"<p>The objective of this course is to systematically build foundational skills in algorithms and programming, aimed at enhancing students' career prospects. The instructional approach focuses on the transfer of expert knowledge while guiding students in identifying effective learning techniques and practical applications within the realm of algorithms and programming. Emphasis is placed on hands-on projects and applications, fortifying the learning experience through practice over pure theory. The course covers functional programming in C, C++, C#, and Java, utilizing the latest development environments.</p>"},{"location":"syllabus/syllabus/#b-course-learning-outcomes","title":"B.    Course Learning Outcomes","text":"<p>After completing this course satisfactorily, a student will be able to:</p> <ul> <li> <p>Understand a software developer's road map and qualifications.</p> </li> <li> <p>Use different types of development environments to build applications.</p> </li> </ul> <ul> <li> <p>Understand the relation between real-life problems and their programming practices.</p> </li> <li> <p>Use language features in C, C++, C#, and Java for functional programming and evaluate their relative benefits.</p> </li> <li> <p>Understand application generation flows and outputs in detail, such as binaries and executables. </p> </li> </ul> <ul> <li> <p>Use the source code, version management systems, and portals based on GIT</p> </li> <li> <p>Work on the remote systems with remote connection tools.</p> </li> <li> <p>Use common developer tools that help application developers</p> </li> </ul> <ul> <li> <p>Create application libraries such as static, shared libraries for code reusability and functional packaging. </p> </li> <li> <p>Create unit tests for their applications to automate tests for their algorithms. </p> </li> <li> <p>Create console and GUI-based applications for their solutions.</p> </li> <li> <p>Create documentation for their applications.</p> </li> </ul>"},{"location":"syllabus/syllabus/#c-course-topics","title":"C.    Course Topics","text":"<ul> <li> <p>Developer Road Map</p> </li> <li> <p>Algorithm Design and Basics</p> </li> <li> <p>Basic Operating System Information for Development Requirement</p> </li> </ul> <ul> <li> <p>Basic Remote Connection and Working Know-How</p> </li> <li> <p>Source Code Version Management Systems (GIT)</p> </li> <li> <p>Integrated Development Environments</p> </li> </ul> <ul> <li> <p>Application Test Automation</p> </li> <li> <p>Application Debugging and Bugfixing</p> </li> <li> <p>Functional Programming (C,C++, C#, Java)</p> </li> </ul> <ul> <li> <p>Continues Integration and Continues Development Processes</p> </li> <li> <p>Software Development Principles</p> </li> <li> <p>Application Documentation Automation</p> </li> <li> <p>Shared and Static Library Development and Test in Cross-Environment</p> </li> </ul>"},{"location":"syllabus/syllabus/#d-textbooks-and-required-hardware-or-equipment","title":"D.    Textbooks and Required Hardware or Equipment","text":"<p>This course does not require a coursebook. If necessary, you can use the following books and open-source online resources.</p> <ul> <li> <p>Paul Deitel and Harvey Deitel. 2012. C How to Program (7th. ed.). Prentice Hall Press, USA.</p> </li> <li> <p>Intro to Java Programming, Comprehensive Version (10th Edition) 10th Edition by Y. Daniel Liang</p> </li> <li> <p>Introduction to Algorithms, Third Edition By Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, and Clifford Stein</p> </li> </ul> <ul> <li> <p>Problem Solving and Program Design in C, J.R. Hanly, and E.B. Koffman, 6th Edition.</p> </li> <li> <p>Robert Sedgewick and Kevin Wayne. 2011. Algorithms (4th. ed.). Addison-Wesley Professional.</p> </li> <li> <p>Harvey M. Deitel and Paul J. Deitel. 2001. Java How to Program (4th. ed.). Prentice Hall PTR, USA.</p> </li> </ul> <ul> <li> <p>Paul Deitel and Harvey Deitel. 2016. Visual C# How to Program (6th. ed.). Pearson.</p> </li> <li> <p>Additional Books TBD</p> </li> </ul> <p>During this course, you should have a laptop for programming practices. You will have your development environment, and you will use this for examination and assignments also classroom practices. </p>"},{"location":"syllabus/syllabus/#e-grading-system","title":"E.    Grading System","text":"<p>Midterm and Final grades will be calculated with the weighted average of the project or homework-based examinations. Midterm grades will be calculated between term beginning to the midterm week, and Final grades will be calculated between Midterm and Final week homeworks or projects as follow</p> \\[ a_n=\\text{Homework or Project Weight} \\] \\[ HW_n=\\text{Homework or Project Points} \\] \\[ n=\\text{Number of Homework or Project} \\] \\[ Grade=(a_1HW_1+a_2HW_2+...+a_nHW_n)/n \\] Homework Weight Midterm %40 Final %60 \\[ \\text{Passing Grade}=(40*Midterm_{Grade}+60*Final_{Grade})/100 \\]"},{"location":"syllabus/syllabus/#f-instructional-strategies-and-methods","title":"F. Instructional Strategies and Methods","text":"<p>The basic teaching method of this course will be planned to be face-to-face in the classroom, and support resources, homeworks, and announcements will be shared over google classroom. Students are expected to be in the university. This responsibility is very important to complete this course with success. If pandemic situation changes and distance education is required during this course, this course will be done using synchronous and asynchronous distance education methods. In this scenario, students are expected to be in the online platform, zoom, or meet at the time specified in the course schedule. Attendance will be taken.</p>"},{"location":"syllabus/syllabus/#g-late-homework","title":"G. Late Homework","text":"<p>Throughout the semester, assignments must be submitted as specified by the announced deadline. Your grade will be reduced by 10% of the full points for each calendar day for overdue assignments.</p> <p>Overdue assignments will not be accepted after three (3) days.</p> <p>Unexpected situations must be reported to the instructor for late homeworks by students.</p>"},{"location":"syllabus/syllabus/#h-course-platform-and-communication","title":"H. Course Platform and Communication","text":"<p>Google Classroom will be used as a course learning management system. All electronic resources and announcements about the course will be shared on this platform. It is very important to check the course page daily, access the necessary resources and announcements, and communicate with the instructor as you needed to complete the course with success</p>"},{"location":"syllabus/syllabus/#i-academic-integrity-plagiarism-cheating","title":"I. Academic Integrity, Plagiarism &amp; Cheating","text":"<p>Academic Integrity is one of the most important principles of RTE\u00dc University. Anyone who breaches the principles of academic honesty is severely punished.</p> <p>It is natural to interact with classmates and others to \"study together\". It may also be the case where a student asks to help from someone else, paid or unpaid, better understand a difficult topic or a whole course. However, what is the borderline between \"studying together\" or \"taking private lessons\" and \"academic dishonesty\"? When is it plagiarism, when is it cheating?</p> <p>It is obvious that looking at another student's paper or any source other than what is allowed during the exam is cheating and will be punished. However, it is known that many students come to university with very little experience concerning what is acceptable and what counts as \"copying\", especially for assignments.</p> <p>The following are attempted as guidelines for the Faculty of Engineering and Architecture students to highlight the philosophy of academic honesty for assignments for which the student will be graded. Should a situation arise which is not described below, the student is advised to ask the instructor or assistant of the course whether what they intend to do would remain within the framework of academic honesty or not.</p>"},{"location":"syllabus/syllabus/#a-what-is-acceptable-when-preparing-an-assignment","title":"a. What is acceptable when preparing an assignment?","text":"<ul> <li>Communicating with classmates about the assignment to understand it better</li> </ul> <ul> <li> <p>Putting ideas, quotes, paragraphs, small pieces of code (snippets) that you find online   or elsewhere into your assignment, provided that</p> </li> <li> <p>these are not themselves the whole solution to the assignment,</p> </li> <li> <p>you cite the origins of these</p> </li> </ul> <ul> <li> <p>Asking sources for help in guiding you for the English language content of your   assignment.</p> </li> <li> <p>Sharing small pieces of your assignment in the classroom to create a class discussion   on some controversial topics.</p> </li> </ul> <ul> <li> <p>Turning to the web or elsewhere for instructions, references, and solutions to   technical difficulties, but not for direct answers to the assignment</p> </li> <li> <p>Discuss solutions to assignments with others using diagrams or summarized statements but not actual text or code.</p> </li> <li> <p>Working with (and even paying) a tutor to help you with the course, provided the tutor does not do your assignment for you.</p> </li> </ul>"},{"location":"syllabus/syllabus/#b-what-is-not-acceptable","title":"b. What is not acceptable?","text":"<ul> <li> <p>Ask a classmate to see their solution to a problem before submitting your own.</p> </li> <li> <p>Failing to cite the origins of any text (or code for programming courses) that you discover outside of the course's lessons and integrate into your work</p> </li> <li> <p>Giving or showing a classmate your solution to a problem when the classmate is struggling to solve it.</p> </li> </ul>"},{"location":"syllabus/syllabus/#j-expectations","title":"J. Expectations","text":"<p>You are expected to attend classes on time by completing weekly course requirements (readings and assignments) during the semester. The main communication channel between the instructor and the students will be emailed. Please send your questions to the instructor's email address about the course via the email address provided to you by the university. Ensure that you include the course name in the subject field of your message and your name in the text field. In addition, the instructor will contact you via email if necessary. For this reason, it is very important to check your email address every day for healthy communication.</p>"},{"location":"syllabus/syllabus/#k-lecture-content-and-syllabus-updates","title":"K. Lecture Content and Syllabus Updates","text":"<p>If deemed necessary, changes in the lecture content or course schedule can be made. If any changes are made in the scope of this document, the instructor will inform you about this.</p>"},{"location":"syllabus/syllabus/#course-schedule-overview","title":"Course Schedule Overview","text":"Weeks Dates Subjects Other Tasks Week 1 04.10.2023 05.10.2023 Course Plan and Communication,Grading System, Assignments, and Exams,Computer Engineering Job Qualifications and Road Map,Google Search Basics,Programming Introduction (Operating System Basics, Computer Network Basics, Numerical System Basics, Character Sets) TBD Week 2 11.10.2023 12.10.2023 Algorithm Basics, Flowgorithm, Pseudocode, Programming Environment Setup and Configuration for C, C++, Java, and C#, Common Developer Tools, Online Programming Envoriments TBD Week 3 18.10.2023 19.10.2023 Source Code Sharing and Version Management. TBD Week 4 25.10.2023 26.10.2023 Shared Library Development and Application Test Automation for C, C++, C#  and Java, TDD (Test Driven Development) TBD Week 5 01.11.2023 02.11.2023 C Functional Console Programming Week-6 08.11.2023 09.11.2023 C++ Functional Console Programming TBD Week-7 15.11.2023 16.11.2023 C# Functional Console Programming TBD Week-8 TBD Midterm TBD Week-9 29.11.2023 30.11.2023 Java Functional Console Programming-I TBD Week-10 06.11.2023 07.11.2023 Java Functional Console Programming-II TBD Week-11 13.11.2023 14.11.2023 Java Functional Console Programming-III TBD Week-12 20.11.2023 21.11.2023 C / C++ Graphical User Interface (GUI) Programming TBD Week-13 27.11.2023 28.11.2023 C# Graphical User Interface (GUI) Programming-I TBD Week-14 03.12.2023 04.12.2023 C# Graphical User Interface (GUI) Programming-II TBD Week-15 10.12.2023 11.12.2023 Java Graphical User Interface Programming TBD Week-16 TBD Final TBD"},{"location":"syllabus/syllabus/#bologna-information","title":"Bologna Information","text":"<p>\\(End-Of-CE103-Syllabus\\)</p>"},{"location":"week-1-intro/ce103-week-1-intro/","title":"CE103 Algorithms and Programming I","text":""},{"location":"week-1-intro/ce103-week-1-intro/#ce103-algorithms-and-programming-i","title":"CE103 Algorithms and Programming I","text":""},{"location":"week-1-intro/ce103-week-1-intro/#week-1","title":"Week-1","text":""},{"location":"week-1-intro/ce103-week-1-intro/#introduction-and-developer-roadmap","title":"Introduction and Developer Roadmap","text":"<p>Download DOC, SLIDE, PPTX</p>"},{"location":"week-1-intro/ce103-week-1-intro/#outline","title":"Outline","text":"<ul> <li>Computer Engineering Roles</li> <li>Developer Roadmaps</li> <li>Building a Social Profile and Resume</li> <li>Job Qualifications </li> <li>Using Google</li> <li>Operating Systems </li> <li>Introduction to Internet (IP, Port etc.)</li> <li>Windows Helper Utilities</li> <li>Shortcuts </li> <li>Command-Line Interface and Usefull Commands</li> </ul>"},{"location":"week-1-intro/ce103-week-1-intro/#brief-description-of-course-and-rules","title":"Brief Description of Course and Rules","text":"<p>We will first talk about, </p> <ol> <li> <p>Course Plan and Communication</p> </li> <li> <p>Grading System, Homework,s and Exams</p> </li> </ol> <p>please read the syllabus carefully. </p>"},{"location":"week-1-intro/ce103-week-1-intro/#computer-engineering-roles","title":"Computer Engineering Roles","text":"<ul> <li> <p>Software Development</p> </li> <li> <p>Hardware Development</p> </li> <li> <p>Network Organization and Management</p> </li> <li> <p>Database Organization and Management</p> </li> <li> <p>Hardware and Software Testing</p> </li> <li> <p>Audit (Cyber Security, Policy etc.)</p> </li> <li> <p>Etc.</p> </li> </ul>"},{"location":"week-1-intro/ce103-week-1-intro/#computer-engineering-areas","title":"Computer Engineering Areas","text":"<ul> <li> <p>Computer Vision</p> </li> <li> <p>Social</p> </li> <li> <p>Analytics </p> </li> <li> <p>Mobility</p> </li> </ul> <ul> <li> <p>IoT</p> </li> <li> <p>Security</p> </li> <li> <p>Web-Scale IT</p> </li> <li> <p>Cloud</p> </li> </ul> <ul> <li> <p>Smart Machines</p> </li> <li> <p>Pervasive</p> </li> <li> <p>Fintech</p> </li> <li> <p>Etc.</p> </li> </ul>"},{"location":"week-1-intro/ce103-week-1-intro/#our-focus-is-software-development","title":"Our focus is Software Development","text":"<p>for this reason, we will focus on software-based road-maps</p> <p>we can use common developer road maps from</p> <p>https://roadmap.sh/</p>"},{"location":"week-1-intro/ce103-week-1-intro/#what-will-you-see-in-the-roadmap","title":"What will you see in the roadmap?","text":"<ul> <li> <p>Frontend Developer Roadmap: Learn to become a modern frontend developer</p> </li> <li> <p>Backend Developer Roadmap: Learn to become a modern backend developer</p> </li> <li> <p>DevOps Roadmap: Learn to become a DevOps Engineer or SRE</p> </li> <li> <p>DBA Roadmap: Learn to become a database administrator with PostgreSQL</p> </li> </ul> <p>and more</p>"},{"location":"week-1-intro/ce103-week-1-intro/#open-a-formal-e-mail-account","title":"Open a formal e-mail account","text":"<p>name.surname@gmail.com</p> <p>n.surname@gmail.com</p> <p>surname.name@gmail.com</p> <p>namesurname@gmail.com</p> <p>etc. do not have numbers in your e-mail adress</p>"},{"location":"week-1-intro/ce103-week-1-intro/#social-media-and-job-search-profiles","title":"Social Media and Job Search Profiles","text":"<ul> <li> <p>Open the following accounts</p> </li> <li> <p>Linkedin</p> </li> <li> <p>Gitlab</p> </li> <li> <p>Bitbucket</p> </li> <li> <p>Docker</p> </li> <li> <p>Github</p> </li> <li> <p>ORCID</p> </li> <li> <p>ARB\u0130S</p> </li> <li> <p>Hackerrank</p> </li> <li> <p>Publons</p> </li> </ul>"},{"location":"week-1-intro/ce103-week-1-intro/#social-media-and-job-search-profiles_1","title":"Social Media and Job Search Profiles","text":"<ul> <li> <p>Open the following accounts</p> </li> <li> <p>https://www.kariyer.net/</p> </li> <li> <p>https://www.yenibiris.com/</p> </li> <li> <p>https://www.secretcv.com/</p> </li> </ul> <p>and more...</p>"},{"location":"week-1-intro/ce103-week-1-intro/#also-you-need-soft-skills","title":"Also, you need soft skills","text":"<ul> <li>Excellent written and oral communication skills, including public speaking and presenting</li> <li>Decisiveness under pressure and strong critical thinking skills</li> <li>Willingness to work off-core-hours, when necessary, to deploy software or upgrade hardware</li> </ul>"},{"location":"week-1-intro/ce103-week-1-intro/#if-you-need-more-information-about-your-profession","title":"If you need more information about your profession","text":"<p>Visit Job Search Web Portals and Look at Requirements to Understand What is Real Life Need</p> <ul> <li> <p>https://www.kariyer.net/</p> </li> <li> <p>https://www.yenibiris.com/</p> </li> <li> <p>https://www.secretcv.com/</p> </li> <li> <p>https://www.linkedin.com/</p> </li> <li> <p>Etc.</p> </li> </ul>"},{"location":"week-1-intro/ce103-week-1-intro/#using-google","title":"Using Google","text":"<ul> <li> <p>Google Scholar</p> </li> <li> <p>Google Patents</p> </li> <li> <p>Google Images</p> </li> </ul>"},{"location":"week-1-intro/ce103-week-1-intro/#operating-system-list","title":"Operating System List","text":""},{"location":"week-1-intro/ce103-week-1-intro/#operating-system-architecture","title":"Operating System Architecture","text":"<p>reference</p>"},{"location":"week-1-intro/ce103-week-1-intro/#operating-systems-key-comparing-factor","title":"Operating Systems Key Comparing Factor","text":"<p>reference</p>"},{"location":"week-1-intro/ce103-week-1-intro/#operating-system-comparisons","title":"Operating System Comparisons","text":"<p>reference</p>"},{"location":"week-1-intro/ce103-week-1-intro/#operating-system-comparisons_1","title":"Operating System Comparisons","text":""},{"location":"week-1-intro/ce103-week-1-intro/#operating-system-comparisons_2","title":"Operating System Comparisons","text":""},{"location":"week-1-intro/ce103-week-1-intro/#operating-system-comparisons_3","title":"Operating System Comparisons","text":""},{"location":"week-1-intro/ce103-week-1-intro/#operating-system-comparisons_4","title":"Operating System Comparisons","text":""},{"location":"week-1-intro/ce103-week-1-intro/#operating-system-comparisons_5","title":"Operating System Comparisons","text":""},{"location":"week-1-intro/ce103-week-1-intro/#intro-to-the-internet","title":"Intro to the Internet","text":""},{"location":"week-1-intro/ce103-week-1-intro/#what-is-ip-address","title":"What is IP Address?","text":""},{"location":"week-1-intro/ce103-week-1-intro/#what-is-ip-address_1","title":"What is IP Address?","text":""},{"location":"week-1-intro/ce103-week-1-intro/#what-is-ip-address_2","title":"What is IP Address?","text":""},{"location":"week-1-intro/ce103-week-1-intro/#what-is-port","title":"What is Port?","text":"<p>In computer networking, a port is a communication endpoint. At the software level, within an operating system, a port is a logical construct that identifies a specific process or a type of network service. A port is identified for each transport protocol and address combination by a 16-bit unsigned number, known as the port number. The most common transport protocols that use port numbers are the Transmission Control Protocol (TCP) and the User Datagram Protocol (UDP).</p> <p>reference</p>"},{"location":"week-1-intro/ce103-week-1-intro/#what-is-port_1","title":"What is Port?","text":""},{"location":"week-1-intro/ce103-week-1-intro/#what-is-port-forwarding-and-nat","title":"What is Port Forwarding and NAT","text":""},{"location":"week-1-intro/ce103-week-1-intro/#what-is-port-forwarding-and-nat_1","title":"What is Port Forwarding and NAT","text":"<p>https://www.networkantics.com/sonicwall-port-forwarding/</p> <p>https://en.wikipedia.org/wiki/Network_address_translation</p>"},{"location":"week-1-intro/ce103-week-1-intro/#what-is-internet-packet-ip","title":"What is Internet Packet (IP)","text":""},{"location":"week-1-intro/ce103-week-1-intro/#what-is-domain-name-server-dns","title":"What is Domain Name Server (DNS)?","text":""},{"location":"week-1-intro/ce103-week-1-intro/#the-submarine-cable-map","title":"The Submarine Cable Map","text":"<p>https://www.submarinecablemap.com/</p>"},{"location":"week-1-intro/ce103-week-1-intro/#shortcuts","title":"Shortcuts","text":"\\[ \\text{Before starting to do anything, if there are shortcuts, try to learn them.} \\]"},{"location":"week-1-intro/ce103-week-1-intro/#microsoft-helper-toolkits","title":"Microsoft Helper Toolkits","text":"<ul> <li>Install Power Toys Utility</li> <li>https://learn.microsoft.com/en-us/windows/powertoys/</li> <li>Download Sysinternals Suite (Toolkit)</li> <li>https://learn.microsoft.com/en-us/sysinternals/downloads/sysinternals-suite</li> </ul>"},{"location":"week-1-intro/ce103-week-1-intro/#windows-shortcuts","title":"Windows Shortcuts","text":"<ul> <li>Copy: <code>Ctrl+C</code></li> <li>Cut: <code>Ctrl+X</code></li> <li>Paste: <code>Ctrl+V</code></li> </ul>"},{"location":"week-1-intro/ce103-week-1-intro/#windows-shortcuts_1","title":"Windows Shortcuts","text":"<ul> <li>Snipping Tool: <code>Win+Shift+S</code></li> <li>Depending on your hardware take a screenshot</li> <li><code>Win+PrtScn</code></li> <li><code>Fn+Win+Space</code>. </li> </ul>"},{"location":"week-1-intro/ce103-week-1-intro/#windows-shortcuts-power-toys","title":"Windows Shortcuts (Power Toys)","text":"<ul> <li>Power Toys Run: <code>Alt+Space</code></li> <li>Always-on-Top: <code>Win+Ctrl+T</code> </li> <li>Color Picker : <code>Win+Shift+C</code></li> <li>Screen Ruler : <code>Win+Shift+T</code></li> <li>Video Conf. Mute : <code>Win+Shift+Q</code></li> </ul>"},{"location":"week-1-intro/ce103-week-1-intro/#windows-shortcuts_2","title":"Windows Shortcuts","text":"<ul> <li>Maximize Window: <code>F11</code> or <code>Win+UpArrow</code> </li> <li>Open Task View: <code>Win+Tab</code></li> <li>Display and hide the desktop: <code>Win+D</code></li> <li>Switch between open apps: <code>Alt+Tab</code></li> <li>Open the Quick Link menu: <code>Win+X</code></li> <li>Lock your PC: <code>Win+L</code></li> </ul>"},{"location":"week-1-intro/ce103-week-1-intro/#introduction-to-the-command-line-interface","title":"Introduction to the command line interface","text":"<ul> <li>Reference Books</li> <li>Bash Notes For Professionals </li> <li>Linux Notes For Professionals</li> <li>PowerShell Notes For Professionals</li> </ul>"},{"location":"week-1-intro/ce103-week-1-intro/#what-is-the-command-line","title":"What is the command line?","text":"<p>The window, which is usually called the command line or command-line interface, is a text-based application for viewing, handling, and manipulating files on your computer. It's much like Windows Explorer or Finder on the Mac, but without the graphical interface. Other names for the command line are: </p> <p><code>cmd, CLI, prompt, console or terminal</code></p> <p>While there are many commands you can use with CLI, they all fall into two categories:</p> <ul> <li> <p>The commands that handle the processes</p> </li> <li> <p>The commands that handle the files</p> </li> </ul> <p>reference</p>"},{"location":"week-1-intro/ce103-week-1-intro/#why-would-you-use-cli-over-gui","title":"Why Would You Use CLI over GUI?","text":"<ul> <li>Less Resource   It is not a secret that the text-based program needs very little resources of your computer. This means that with CLI you can do similar tasks with minimum resources.</li> </ul>"},{"location":"week-1-intro/ce103-week-1-intro/#why-would-you-use-cli-over-gui_1","title":"Why Would You Use CLI over GUI?","text":"<ul> <li>High Precision   You can use a specific command to target specific destinations with ease. As long as you don\u2019t type the wrong command, it will work like a charm. Once you learn the basics, writing syntax is not as hard as you might think.</li> </ul>"},{"location":"week-1-intro/ce103-week-1-intro/#why-would-you-use-cli-over-gui_2","title":"Why Would You Use CLI over GUI?","text":"<ul> <li>Repetitive Tasks Friendly   GUI has developed well over the years. But, the operating system may not give you all the menus and buttons to perform all tasks. One of the reasons is safety. This leaves you overwhelmed if you have to do repetitive tasks. For example, when you have to handle hundreds of files within a folder, CLI enables you to use a single command to do automate the repetition easily.</li> </ul>"},{"location":"week-1-intro/ce103-week-1-intro/#why-would-you-use-cli-over-gui_3","title":"Why Would You Use CLI over GUI?","text":"<ul> <li>Powerful   Most operating systems today prevent you from messing up the system\u2019s core process. Windows has system protection and MacOS has SIP (System Integrity Protection). You won\u2019t be able to perform certain tasks which are system protected. However, with CLI, you will have full control over your system.</li> </ul>"},{"location":"week-1-intro/ce103-week-1-intro/#open-the-command-line-interface-windows","title":"Open the command-line interface (Windows)","text":"<ul> <li> <p>Go to the Start menu or screen, and enter <code>Command Prompt</code> in the search field.</p> </li> <li> <p>Go to <code>Start menu \u2192 Windows System \u2192 Command Prompt</code>.</p> </li> <li> <p>Go to <code>Start Menu \u2192 All Programs \u2192 Accessories \u2192 Command Prompt</code>.</p> </li> <li> <p>Go to the Start screen, hover your mouse in the lower-left corner of the screen, and click the down arrow that appears (on a touch screen, instead flick up from the bottom of the screen). The Apps page should open. Click on Command Prompt in the Windows System section.</p> </li> <li> <p>Hold the special Windows key on your keyboard and press the \"X\" key. Choose \"Command Prompt\" from the pop-up menu.</p> </li> <li> <p>Hold the Windows key and press the \"R\" key to get a \"Run\" window. Type \"cmd\" in the box, and click the OK key.</p> </li> </ul>"},{"location":"week-1-intro/ce103-week-1-intro/#open-the-command-line-interface-windows_1","title":"Open the command-line interface (Windows)","text":""},{"location":"week-1-intro/ce103-week-1-intro/#open-the-command-line-interface-windows_2","title":"Open the command-line interface (Windows)","text":""},{"location":"week-1-intro/ce103-week-1-intro/#open-the-command-line-interface-windows_3","title":"Open the command-line interface (Windows)","text":""},{"location":"week-1-intro/ce103-week-1-intro/#open-the-command-line-interface-windows_4","title":"Open the command-line interface (Windows)","text":""},{"location":"week-1-intro/ce103-week-1-intro/#open-the-command-line-interface-windows_5","title":"Open the command-line interface (Windows)","text":""},{"location":"week-1-intro/ce103-week-1-intro/#open-the-command-line-interface-linux","title":"Open the command-line interface (Linux)","text":"<p>It's probably under </p> <ul> <li>Applications \u2192 Accessories \u2192 Terminal,   or </li> <li>Applications \u2192 System \u2192 Terminal,    but that may depend on your system.    If it's not there, you can try to Google it. :)</li> </ul>"},{"location":"week-1-intro/ce103-week-1-intro/#open-the-command-line-interface-linux_1","title":"Open the command-line interface (Linux)","text":""},{"location":"week-1-intro/ce103-week-1-intro/#open-the-command-line-interface-macos","title":"Open the command-line interface (MacOS)","text":"<ul> <li>Go to Applications \u2192 Utilities \u2192 Terminal</li> </ul>"},{"location":"week-1-intro/ce103-week-1-intro/#command-basics","title":"Command Basics","text":""},{"location":"week-1-intro/ce103-week-1-intro/#command-basics-computer-namecurrent-directory-path","title":"Command Basics (Computer Name,Current Directory Path)","text":"<pre><code>&gt; whoami (hit enter)\n</code></pre> - Result: laptop-rqnns9ig\\ugur.coruh   - Computer will print username"},{"location":"week-1-intro/ce103-week-1-intro/#command-basics-computer-namecurrent-directory-path_1","title":"Command Basics (Computer Name,Current Directory Path)","text":"<pre><code>&gt; pwd \n</code></pre> - Result: /Users/ugur.coruh   - Current Working Directory for Linux and OS X"},{"location":"week-1-intro/ce103-week-1-intro/#command-basics-computer-namecurrent-directory-path_2","title":"Command Basics (Computer Name,Current Directory Path)","text":"<pre><code>&gt;cd\n</code></pre> - Result: C:\\Users\\ugur.coruh   - Current Working Directory for Windows"},{"location":"week-1-intro/ce103-week-1-intro/#learn-command-details-in-linux-and-os-x","title":"Learn Command Details in Linux and OS X","text":"<pre><code>&gt;man &lt;command_name&gt;\n</code></pre> Sample  <pre><code>&gt;man pwd\n</code></pre> - OS X and Linux have a man command,which gives you help on commands <ul> <li>Use the <code>space</code> bar to move to the next page, and <code>q</code> to quit looking at the help</li> </ul>"},{"location":"week-1-intro/ce103-week-1-intro/#learn-command-details-in-window","title":"Learn Command Details in Window","text":"<ul> <li>Adding a <code>/?</code> suffix to most commands will print the help page</li> <li>Sample</li> </ul> <pre><code>&gt;cd /? \n</code></pre>"},{"location":"week-1-intro/ce103-week-1-intro/#list-files-and-directories-in-linux-and-os-x","title":"List files and directories in Linux and OS X","text":"<pre><code>&gt;ls\n</code></pre> <ul> <li>Applications</li> <li>Desktop</li> <li>Downloads</li> <li>Music</li> <li>...</li> </ul>"},{"location":"week-1-intro/ce103-week-1-intro/#list-files-and-directories-in-linux-and-os-x_1","title":"List files and directories in Linux and OS X","text":"<pre><code>&gt;ls -R\n</code></pre> - will list all the files in the sub-directories as well"},{"location":"week-1-intro/ce103-week-1-intro/#list-files-and-directories-in-linux-and-os-x_2","title":"List files and directories in Linux and OS X","text":"<pre><code>&gt;ls -a\n</code></pre> - will show the hidden files"},{"location":"week-1-intro/ce103-week-1-intro/#list-files-and-directories-in-linux-and-os-x_3","title":"List files and directories in Linux and OS X","text":"<pre><code>&gt;ls -al\n</code></pre> - will list the files and directories with detailed information like the permissions, size,owner, etc."},{"location":"week-1-intro/ce103-week-1-intro/#list-files-and-directories-in-windows","title":"List files and directories in Windows","text":"<pre><code>&gt;dir\n</code></pre> Result:  <pre><code>Volume in drive C is Windows\nVolume Serial Number is 8C3C-8F8C\nDirectory of C:\\Users\\ugur.coruh\n10/14/2020\u00a0 09:57 AM\u00a0\u00a0\u00a0 &lt;DIR&gt;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 .\n10/14/2020\u00a0 09:57 AM\u00a0\u00a0\u00a0 &lt;DIR&gt;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 ..\n08/15/2020\u00a0 11:00 PM\u00a0\u00a0\u00a0 &lt;DIR&gt;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 .android\n06/28/2020\u00a0 03:02 AM\u00a0\u00a0\u00a0 &lt;DIR&gt;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 AndroidStudio4.0\n</code></pre>"},{"location":"week-1-intro/ce103-week-1-intro/#list-files-and-directories-in-linux-os-x","title":"List files and directories in Linux, OS X","text":"<ul> <li>you should install with <code>brew install tree</code></li> </ul>"},{"location":"week-1-intro/ce103-week-1-intro/#list-files-and-directories-in-windows_1","title":"List files and directories in Windows","text":"<pre><code>&gt; tree\n</code></pre> Result: <pre><code>C:\\Users\\ugur.coruh\\Desktop\\Samples&gt;tree\nFolder PATH listing for volume Windows\nVolume serial number is 8C3C-8F8C\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 C:.\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u251c\u2500\u2500\u2500C\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500\u2500HelloWorld\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u2502\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u2514\u2500\u2500\u2500.vscode\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u251c\u2500\u2500\u2500Cpp\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u251c\u2500\u2500\u2500Csharp\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u2514\u2500\u2500\u2500Java\n</code></pre>"},{"location":"week-1-intro/ce103-week-1-intro/#change-current-directory-in-windows-linux-and-os-x","title":"Change Current Directory in Windows / Linux and OS X","text":"<pre><code>&gt;cd &lt;path&gt;\n</code></pre> <pre><code>cd Desktop\u00a0\n</code></pre>"},{"location":"week-1-intro/ce103-week-1-intro/#change-current-directory-in-windows-linux-and-os-x_1","title":"Change Current Directory in Windows / Linux and OS X","text":"<ul> <li>print case-sensitive prefix of targer folder and use <code>tab</code> to complete or find correct folder</li> </ul> <pre><code>&gt; cd ..\n</code></pre> <ul> <li>This command moves current working directory to parent directory.</li> <li>You can use <code>cd ..\\..\\..</code> to go 3 level up.</li> </ul>"},{"location":"week-1-intro/ce103-week-1-intro/#change-current-directory-in-windows-linux-and-os-x_2","title":"Change Current Directory in Windows / Linux and OS X","text":"<ul> <li>Also you can change relative path such as </li> <li><code>cd ..\\..\\target\\child</code><ul> <li>go 2 level up and then go to target and child folders.</li> </ul> </li> <li>To directly go to folder write full path of file <code>cd C:\\temp\\build\\target\\child</code></li> </ul>"},{"location":"week-1-intro/ce103-week-1-intro/#change-current-directory-in-windows-linux-and-os-x_3","title":"Change Current Directory in Windows / Linux and OS X","text":"<p><code>&gt;cd-</code> (with a hyphen) to move to your previous directory</p> <ul> <li>We will use this feature with CMAKE!</li> </ul>"},{"location":"week-1-intro/ce103-week-1-intro/#create-directory-in-windows-linux-os-x","title":"Create Directory in Windows, Linux, OS X","text":"<pre><code>&gt; mkdir folder_name\n</code></pre> - To generate a new directory inside another directory, use this Linux basic command <code>mkdir Music/Newfile</code>"},{"location":"week-1-intro/ce103-week-1-intro/#create-directory-in-windows-linux-os-x_1","title":"Create Directory in Windows, Linux, OS X","text":"<ul> <li> <p>use the <code>p</code> (parents) option to create a directory in between two existing directories.</p> </li> <li> <p>For example, <code>mkdir -p Music/2020/Newfile</code> will create the new \u201c2020\u201d file.</p> </li> </ul>"},{"location":"week-1-intro/ce103-week-1-intro/#create-directory-in-windows-linux-os-x_2","title":"Create Directory in Windows, Linux, OS X","text":"<ul> <li>Check folder creation is succeed with list commands </li> <li>Linux,OS X -&gt; <code>ls</code></li> <li>Windows -&gt; <code>dir</code> or <code>tree</code></li> </ul> <pre><code>&gt; dir\n</code></pre> - Use cd folder_name from current directory for going to created folder <pre><code>&gt; cd folder_name\n</code></pre>"},{"location":"week-1-intro/ce103-week-1-intro/#remove-directory-in-windows-powershell-os-x-and-linux","title":"Remove Directory in Windows Powershell, OS X and Linux","text":"<pre><code>&gt; rm \u2013r\u00a0 folder_path\n</code></pre> <pre><code>&gt;rmdir\n</code></pre> <ul> <li> <p><code>-r</code> is used for recursive deletion of folders.</p> </li> <li> <p>However, <code>rmdir</code> only allows you to delete empty directories</p> </li> </ul>"},{"location":"week-1-intro/ce103-week-1-intro/#remove-directory-in-windows-powershell","title":"Remove Directory in Windows Powershell","text":"<pre><code>&gt; rmdir /S folder_path\n</code></pre> <pre><code>folder_path, Are you sure\n&lt;Y/N&gt;? Y\n</code></pre> - Check deletion with folder listing commands."},{"location":"week-1-intro/ce103-week-1-intro/#command-basics-delete-file-in-windows","title":"Command Basics (Delete File) in Windows","text":"<pre><code>&gt;DEL /F untitled.txt*\n</code></pre> - If you want to add the options like force deletion, you can add it before the file name"},{"location":"week-1-intro/ce103-week-1-intro/#copy-files-in-linux","title":"Copy Files in Linux","text":"<ul> <li> <p>Use the <code>cp</code> command to copy files from the current directory to a different directory.</p> </li> <li> <p>For instance, the command <code>cp scenery.jpg /home/username/Pictures</code> would create a copy of <code>scenery.jpg</code> (from your current directory) into the <code>Pictures</code> directory.</p> </li> </ul>"},{"location":"week-1-intro/ce103-week-1-intro/#copy-files-in-windows","title":"Copy Files in Windows","text":"<ul> <li><code>cd-</code> (with a hyphen) to move to your previous directoryCopy a file in the current folder</li> </ul> <pre><code>&gt;COPY source_file.doc newfile.doc\n</code></pre> - Copy from a different <code>folder/directory:</code>"},{"location":"week-1-intro/ce103-week-1-intro/#copy-cmy-worksome-filedoc-dnew-docsnewfiledoc","title":"<pre><code>&gt;COPY \"C:\\my work\\some file.doc\" \"D:\\New docs\\newfile.doc\"\n</code></pre>","text":""},{"location":"week-1-intro/ce103-week-1-intro/#copy-files-in-windows_1","title":"Copy Files in Windows","text":"<ul> <li>Specify the source only, with a wildcard will copy all the files into the current directory:*</li> </ul> <pre><code>&gt;COPY \"C:\\my work\\*.doc\"\n</code></pre> - Specify the source with a wildcard and the destination as a single file, this is generally only useful with plain text files. <pre><code>&gt;COPY \"C:\\my work\\*.txt\" \"D:\\New docs\\combined.txt\"\n</code></pre>"},{"location":"week-1-intro/ce103-week-1-intro/#copy-files-in-windows_2","title":"Copy Files in Windows","text":"<ul> <li>Quiet copy (no feedback on screen)*</li> </ul> <pre><code>COPY source_file.doc newfile.doc &gt;nul\n</code></pre> - Copy a file, but do not overwrite if the destination file already exists, this technique only works for a single file, no wildcards:"},{"location":"week-1-intro/ce103-week-1-intro/#echo-ncopy-y-cdemosource_filetxt-cdirdesttxt","title":"<pre><code>Echo n|COPY /-y c:\\demo\\source_file.txt c:\\dir\\dest.txt\n</code></pre>","text":""},{"location":"week-1-intro/ce103-week-1-intro/#renaming-file-in-windows","title":"Renaming File in Windows","text":"<pre><code>&gt;REN d:untitled.txt untitled1.txt*\n</code></pre> - To rename a file within a specific folder, use  <pre><code>REN [drive:][path] [source] [target]\n</code></pre> - If you mention the location, that means the renamed file will be saved in the same folder <pre><code>&gt;REN d:untitled.txt ..\\..\\folder\\untitled1.txt*\n</code></pre> <pre><code>&gt;REN d:untitled.txt C:\\folder\\untitled1.txt\n</code></pre>"},{"location":"week-1-intro/ce103-week-1-intro/#renaming-file-in-linux-and-os-x","title":"Renaming File in  Linux and OS X","text":"<pre><code>&gt;mv [OPTIONS] source destination*\n</code></pre> <pre><code>&gt;mv file1.txt file2.txt*\n</code></pre> <ul> <li>Optional <code>sudo apt install rename</code></li> </ul>"},{"location":"week-1-intro/ce103-week-1-intro/#move-files-in-windows","title":"Move Files in Windows","text":"<ul> <li>In the current folder</li> </ul> <pre><code>&gt;MOVE oldfile.wp newfile.doc\n</code></pre> - Full path specified <pre><code>&gt;MOVE g:\\department\\oldfile.wp \"c:\\Files to\nConvert\\newfile.doc\"\n</code></pre> - Specify the drive and filename (assumes the current folder on both drives is correct)"},{"location":"week-1-intro/ce103-week-1-intro/#move-aoldfilewp-cnewfiledoc","title":"<pre><code>&gt;MOVE a:oldfile.wp c:newfile.doc\n</code></pre>","text":""},{"location":"week-1-intro/ce103-week-1-intro/#move-files-in-windows_1","title":"Move Files in Windows","text":"<ul> <li>Specify source only (will copy the file to current folder, keeping the same filename)</li> </ul> <pre><code>&gt;MOVE g:\\department\\oldfile.wp\n</code></pre> - Quiet move (no feedback on screen) <pre><code>&gt;MOVE oldfile.wp newfile.doc &gt;nul\n</code></pre> - Move a file, but do not overwrite if the destination file already exists, this technique only works for a single file, no wildcards - ( /-y is required): <pre><code>&gt;Echo n|MOVE /-y c:\\file1.txt c:\\dir\\file1.txt\n</code></pre>"},{"location":"week-1-intro/ce103-week-1-intro/#move-files-in-linux-and-os-x","title":"Move Files in Linux and OS X","text":"<ul> <li> <p>Check <code>mv</code> command</p> </li> <li> <p>For example: <code>mv file.txt /home/username/Documents</code></p> </li> </ul>"},{"location":"week-1-intro/ce103-week-1-intro/#command-basics-renaming-a-volume-disk-in-windows","title":"Command Basics (Renaming a Volume Disk) in Windows","text":"<pre><code>D:\\ &gt; LABEL d:MyData\n</code></pre>"},{"location":"week-1-intro/ce103-week-1-intro/#measure-processing-time-in-windows-powershell","title":"Measure Processing Time in Windows Powershell","text":"<pre><code>&gt; Measure-Command {echo hi}\n</code></pre> <pre><code>Days\u00a0 : 0\nHours : 0\nMinutes\u00a0\u00a0\u00a0 : 0\nSeconds\u00a0\u00a0\u00a0 : 0\nMilliseconds\u00a0\u00a0\u00a0\u00a0 : 0\nTicks\u00a0 : 1318\nTotalDays : 1.52546296296296E-09\nTotalHours\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 : 3.66111111111111E-08\nTotalMinutes\u00a0\u00a0 : 2.19666666666667E-06\nTotalSeconds\u00a0\u00a0\u00a0 : 0.0001318\nTotalMilliseconds : 0.1318\n</code></pre>"},{"location":"week-1-intro/ce103-week-1-intro/#measure-processing-time-in-windows-command-prompt","title":"Measure Processing Time in Windows Command Prompt","text":""},{"location":"week-1-intro/ce103-week-1-intro/#powershell-command-measure-command-echo-hi","title":"<pre><code>&gt; powershell -Command \"Measure-Command {echo hi}\"\n</code></pre>","text":""},{"location":"week-1-intro/ce103-week-1-intro/#command-basics-measure-processing-time","title":"Command Basics (Measure Processing Time)","text":"<p>timecmd.bat</p>"},{"location":"week-1-intro/ce103-week-1-intro/#echo-off-setlocal-set-starttime-runs-your-command-cmd-c-set-endtime-set-optionstokens1-4-delims-for-f-options-a-in-start-do-set-start_haset-a-start_m100b-100set-a-start_s100c-100set-a-start_ms100d-100-for-f-options-a-in-end-do-set-end_haset-a-end_m100b-100set-a-end_s100c-100set-a-end_ms100d-100-set-a-hoursend_h-start_h-set-a-minsend_m-start_m-set-a-secsend_s-start_s-set-a-msend_ms-start_ms-if-ms-lss-0-set-a-secs-secs-1-set-a-ms-100ms-if-secs-lss-0-set-a-mins-mins-1-set-a-secs-60secs-if-mins-lss-0-set-a-hours-hours-1-set-a-mins-60mins-if-hours-lss-0-set-a-hours-24hours-if-1ms-lss-100-set-ms0ms-mission-accomplished-set-a-totalsecs-hours3600-mins60-secs-echo-command-took-hoursminssecsms-totalsecsmss-total","title":"<pre><code>@echo off\n@setlocal\nset start=%time%\n:: Runs your command\ncmd /c %*\nset end=%time%\nset options=\"tokens=1-4 delims=:.,\"\nfor /f %options% %%a in (\"%start%\") do set start_h=%%a&amp;set /a start_m=100%%b %% 100&amp;set /a start_s=100%%c %% 100&amp;set /a start_ms=100%%d %% 100\nfor /f %options% %%a in (\"%end%\") do set end_h=%%a&amp;set /a end_m=100%%b %% 100&amp;set /a end_s=100%%c %% 100&amp;set /a end_ms=100%%d %% 100\nset /a hours=%end_h%-%start_h%\nset /a mins=%end_m%-%start_m%\nset /a secs=%end_s%-%start_s%\nset /a ms=%end_ms%-%start_ms%\nif %ms% lss 0 set /a secs = %secs% - 1 &amp; set /a ms = 100%ms%\nif %secs% lss 0 set /a mins = %mins% - 1 &amp; set /a secs = 60%secs%\nif %mins% lss 0 set /a hours = %hours% - 1 &amp; set /a mins = 60%mins%\nif %hours% lss 0 set /a hours = 24%hours%\nif 1%ms% lss 100 set ms=0%ms%\n:: Mission accomplished\nset /a totalsecs = %hours%*3600 + %mins%*60 + %secs%\necho command took %hours%:%mins%:%secs%.%ms% (%totalsecs%.%ms%s total)\n</code></pre>","text":""},{"location":"week-1-intro/ce103-week-1-intro/#command-basics-measure-processing-time_1","title":"Command Basics (Measure Processing Time)","text":"<p>Usage</p> <ul> <li>If you put <code>timecmd.bat</code> in a directory in your path, you can call it from anywhere like this:</li> </ul> <p></p><pre><code>&gt;timecmd [your command]\n</code></pre> - E.g. <pre><code>C:\\&gt;timecmd\npause\nPress any key to continue .\n. . command took 0:0:1.18\n</code></pre>"},{"location":"week-1-intro/ce103-week-1-intro/#command-basics-measure-processing-time_2","title":"Command Basics (Measure Processing Time)","text":"<ul> <li>If you want to do output redirection, you can quote the command like this:</li> </ul> <pre><code>timecmd \"dir c:\\windows /s &gt; nul\"\n</code></pre> <ul> <li>This should handle commands that run from before- to after-midnight, but the output will be wrong if your command runs for 24 hours or more.</li> </ul>"},{"location":"week-1-intro/ce103-week-1-intro/#useful-linux-commands","title":"Useful Linux Commands","text":"<ul> <li>Use Online Sandbox to</li> <li>Try Commands Yourself</li> <li>https://ubunlog.com/en/gnulinux-online-terminals-browser/<ul> <li>https://bellard.org/jslinux/vm.html?url=alpine-x86.cfg&amp;mem=192</li> </ul> </li> </ul>"},{"location":"week-1-intro/ce103-week-1-intro/#cat-command","title":"cat command","text":"<ul> <li> <p><code>cat</code> (short for concatenate) is one of the most frequently used commands in Linux. It is used to list the contents of a file on the standard output (sdout). To run this command, type <code>cat</code> followed by the file\u2019s name and its extension. For instance: <code>cat file.txt</code>.</p> </li> <li> <p>Here are other ways to use the <code>cat</code> command:</p> </li> <li> <p><code>cat &gt; filename</code> creates a new file</p> </li> <li> <p><code>cat filename1 filename2&gt;filename3</code> joins two files (1 and 2) and stores the output of them in a new file (3)</p> </li> <li> <p>to convert a file to upper or lower case use, cat filename | tr a-z A-Z &gt;output.txt</p> </li> </ul>"},{"location":"week-1-intro/ce103-week-1-intro/#touch-command","title":"touch command","text":"<ul> <li>The <code>touch</code> command allows you to create a blank new file through the Linux command line. As an example, enter touch <code>/home/username Documents/Web.html</code> to create an HTML file entitled <code>Web</code> under the <code>Documents</code> directory.  </li> </ul>"},{"location":"week-1-intro/ce103-week-1-intro/#locate-command","title":"locate command","text":"<ul> <li> <p>You can use this command to <code>locate</code> a file, just like the search command in Windows. What\u2019s more, using the <code>-i</code> argument along with this command will make it case-insensitive, so you can search for a file even if you don\u2019t remember its exact name.</p> </li> <li> <p>To search for a file that contains two or more words, use an asterisk (<code>*</code>). For example, <code>locate -i school*note*</code> command will search for any file that contains the word \u201c<code>school</code>\u201d and \u201c<code>note</code>\u201d, whether it is uppercase or lowercase.</p> </li> </ul>"},{"location":"week-1-intro/ce103-week-1-intro/#find-command","title":"find command","text":"<ul> <li> <p>Similar to the <code>locate</code> command, using <code>find</code> also searches for files and directories. The difference is, you use the <code>find</code> command to locate files within a given directory.</p> </li> <li> <p>As an example, find <code>/home/ -name notes.txt</code> command will search for a file called <code>notes.txt</code> within the home directory and its subdirectories.</p> </li> <li> <p>Other variations when using the <code>find</code> are:</p> </li> <li> <p>To find files in the current directory use, <code>find -name notes.txt</code></p> </li> <li> <p>To look for directories use, <code>/ -type d -name notes. txt</code></p> </li> </ul>"},{"location":"week-1-intro/ce103-week-1-intro/#grep-command","title":"grep command","text":"<ul> <li> <p>Another basic Linux command that is undoubtedly helpful for everyday use is <code>grep</code>. It lets you search through all the text in a given file.</p> </li> <li> <p>To illustrate, <code>grep blue notepad.txt</code> will search for the word blue in the notepad file. Lines that contain the searched word will be displayed fully.</p> </li> </ul>"},{"location":"week-1-intro/ce103-week-1-intro/#sudo-command","title":"sudo command","text":"<ul> <li>Short for \"SuperUser Do\", this command enables you  to perform tasks that require administrative or root permissions. However, it is not advisable to use this command for daily use because it might be easy for an error to occur if you did something wrong.  </li> </ul>"},{"location":"week-1-intro/ce103-week-1-intro/#df-command","title":"df command","text":"<ul> <li>Use <code>df</code> command to get a report on the system\u2019s disk space usage, shown in percentage and KBs. If you want to see the report in megabytes, type <code>df -m</code>.  </li> </ul>"},{"location":"week-1-intro/ce103-week-1-intro/#du-command","title":"du command","text":"<ul> <li>If you want to check how much space a file or a directory takes, the <code>du</code> (Disk Usage) command is the answer. However, the disk usage summary will show disk block numbers instead of the usual size format. If you want to see it in bytes, kilobytes, and megabytes, add the <code>-h</code> argument to the command line.</li> </ul>"},{"location":"week-1-intro/ce103-week-1-intro/#head-command","title":"head command","text":"<p>\u2022 The <code>head</code> command is used to view the first lines of any text file. By default, it will show the first ten lines, but you can change this number to your liking. For example, if you only want to show the first five lines, type <code>head -n 5 filename.ext</code>.  </p>"},{"location":"week-1-intro/ce103-week-1-intro/#tail-command","title":"tail command","text":"<ul> <li>This one has a similar function to the head command, but instead of showing the first lines, the <code>tail</code> command will display the last ten lines of a text file. For example, <code>tail -n filename.ext.</code> </li> </ul>"},{"location":"week-1-intro/ce103-week-1-intro/#diff-command","title":"diff command","text":"<ul> <li> <p>Short for difference, the <code>diff</code> command compares the contents of two files line by line. After analyzing the files, it will output the lines that do not match. Programmers often use this command when they need to make program alterations instead of rewriting the entire source code.</p> </li> <li> <p>The simplest form of this command is <code>diff file1.ext file2.ext</code></p> </li> </ul>"},{"location":"week-1-intro/ce103-week-1-intro/#tar-command","title":"tar command","text":"<ul> <li> <p>The <code>tar</code> command is the most used command to archive multiple files into a <code>tarball</code> \u2014 a common Linux file format that is similar to zip format, with compression being optional.</p> </li> <li> <p>https://www.linuxtechi.com/17-tar-command-examples-in-linux/</p> </li> </ul>"},{"location":"week-1-intro/ce103-week-1-intro/#chmod-command","title":"chmod command","text":"<ul> <li> <p><code>chmod</code> is another Linux command, used to change the read, write, and execute permissions of files and directories.</p> </li> <li> <p>https://www.computerhope.com/unix/uchmod.htm </p> </li> </ul>"},{"location":"week-1-intro/ce103-week-1-intro/#chown-command","title":"chown command","text":"<ul> <li>In Linux, all files are owned by a specific user. The <code>chown</code> command enables you to change or transfer the ownership of a file to the specified username. For instance, <code>chown linuxuser2 file.ext</code> will make <code>linuxuser2</code> as the owner of the <code>file.ext</code>.  </li> </ul>"},{"location":"week-1-intro/ce103-week-1-intro/#jobs-command","title":"jobs command","text":"<ul> <li><code>jobs</code> command will display all current jobs along with their statuses. A job is basically a process that is started by the shell.</li> <li>The jobs command displays the status of jobs started in the current terminal window. Jobs are numbered starting from 1 for each session. The job ID numbers are used by some programs instead of PIDs (for example, by fg and bg commands).</li> </ul>"},{"location":"week-1-intro/ce103-week-1-intro/#kill-command","title":"kill command","text":"<ul> <li> <p>If you have an unresponsive program, you can terminate it manually by using the <code>kill</code> command. It will send a certain signal to the misbehaving app and instructs the app to terminate itself.</p> </li> <li> <p>There is a total of sixty-four-signals that you can use, but people usually only use two signals:</p> </li> </ul>"},{"location":"week-1-intro/ce103-week-1-intro/#kill-command_1","title":"kill command","text":"<ul> <li><code>SIGTERM (15)</code>: requests a program to stop running and gives it some time to save all of its progress. If you don\u2019t specify the signal when entering the kill command, this signal will be used.</li> </ul>"},{"location":"week-1-intro/ce103-week-1-intro/#kill-command_2","title":"kill command","text":"<ul> <li> <p><code>SIGKILL (9)</code>: forces programs to stop immediately. Unsaved progress will be lost.</p> </li> <li> <p>Besides knowing the signals, you also need to know the process identification number (PID) of the program you want to <code>kill</code>. If you don\u2019t know the PID, simply run the command <code>ps ux</code>.</p> </li> <li> <p>After knowing what signal you want to use and the PID of the program, enter the following syntax: <code>kill [signal option] PID</code>.</p> </li> <li> <p>https://linoxide.com/linux-how-to/linux-signals-part-1/</p> </li> </ul>"},{"location":"week-1-intro/ce103-week-1-intro/#ping-command","title":"ping command","text":"<ul> <li>Use the <code>ping</code> command to check your connectivity status to a server. For example, by simply entering <code>ping google.com</code>, the command will check whether you\u2019re able to connect to Google and also measure the response time.  </li> </ul>"},{"location":"week-1-intro/ce103-week-1-intro/#wget-command","title":"wget command","text":"<ul> <li>The Linux command line is super useful \u2014 you can even download files from the internet with the help of the <code>wget</code> command. To do so, simply type <code>wget</code> followed by the download link.  </li> </ul>"},{"location":"week-1-intro/ce103-week-1-intro/#uname-command","title":"uname command","text":"<ul> <li>The <code>uname</code> command, short for Unix Name, will print detailed information about your Linux system like the machine name, operating system, kernel, and so on.</li> </ul>"},{"location":"week-1-intro/ce103-week-1-intro/#top-command","title":"top command","text":"<ul> <li>As a terminal equivalent to Task Manager in Windows, the <code>top</code> command will display a list of running processes and how much CPU each process uses. It\u2019s very useful to monitor system resource usage, especially knowing which process needs to be terminated because it consumes too many resources.</li> </ul>"},{"location":"week-1-intro/ce103-week-1-intro/#history-command","title":"history command","text":"<ul> <li>When you\u2019ve been using Linux for a certain period of time, you\u2019ll quickly notice that you can run hundreds of commands every day. As such, running <code>history</code> command is particularly useful if you want to review the commands you\u2019ve entered before.  </li> </ul>"},{"location":"week-1-intro/ce103-week-1-intro/#echo-command","title":"echo command","text":"<ul> <li>This command is used to move some data into a file. For example, if you want to add the text, \u201c<code>Hello, my name is John</code>\u201d into a file called <code>name.txt</code>, you would type <code>echo Hello, my name is John &gt;&gt; name.txt</code> </li> </ul>"},{"location":"week-1-intro/ce103-week-1-intro/#zip-unzip-command","title":"zip, unzip command","text":"<ul> <li>Use the <code>zip</code> command to compress your files into a zip archive, and use the <code>unzip</code> command to extract the zipped files from a zip archive.  </li> </ul>"},{"location":"week-1-intro/ce103-week-1-intro/#hostname-command","title":"hostname command","text":"<ul> <li> <p>If you want to know the name of your host/network simply type <code>hostname</code>. Adding a <code>-I</code> to the end will display the IP address of your network.</p> </li> <li> <p>Hostnamectl</p> </li> <li>https://www.cyberciti.biz/faq/find-my-linux-machine-name/</li> </ul>"},{"location":"week-1-intro/ce103-week-1-intro/#host-command","title":"host command","text":"<ul> <li> <p>host command is a simple utility for performing DNS lookups. It is normally used to convert names to IP addresses and vice versa. When no arguments or options are given, host command displays a short summary of its command line arguments and options. The syntax is as follows:</p> </li> <li> <p><code>host example.com</code></p> </li> <li><code>host -t TYPE example.com</code></li> <li> <p><code>host -t a example.com</code></p> </li> <li> <p>https://www.cyberciti.biz/faq/unix-linux-dns-lookup-command/</p> </li> </ul>"},{"location":"week-1-intro/ce103-week-1-intro/#host-command_1","title":"host command","text":"<ul> <li>Installation of host command if not found</li> </ul> <p><code>root@user:~# apt-get update</code> <code>root@user:~# apt-get install dnsutils \u2013y</code></p> <ul> <li>https://www.crybit.com/install-dig-nslookup-host-commands/</li> </ul>"},{"location":"week-1-intro/ce103-week-1-intro/#useradd-userdel-command","title":"useradd, userdel command","text":"<ul> <li> <p>Since Linux is a multi-user system, this means more than one person can interact with the same system at the same time. <code>useradd</code> is used to create a new user, while <code>passwd</code> is adding a password to that user\u2019s account. To add a new person named John type, <code>useradd John</code> and then to add his password type, <code>passwd 123456789</code>. </p> </li> <li> <p>To remove a user is very similar to adding a new user. To delete the users account type, <code>userdel UserName</code></p> </li> </ul>"},{"location":"week-1-intro/ce103-week-1-intro/#tips-and-tricks-for-linux-cli","title":"Tips and Tricks for Linux CLI","text":"<ul> <li> <p>Try the <code>TAB</code> button to autofill what you are typing</p> </li> <li> <p>For example, if you need to type Documents, begin to type a command (let\u2019s go with <code>cd Docu</code> then hit the TAB key) and the terminal will fill in the rest, showing you <code>cd Documents</code></p> </li> <li> <p><code>Ctrl+C</code> and <code>Ctrl+Z</code> are used to stop any command that is currently working. <code>Ctrl+C</code> will stop and terminate the command, while <code>Ctrl+Z</code> will simply pause the command.</p> </li> </ul>"},{"location":"week-1-intro/ce103-week-1-intro/#tips-and-tricks-for-linux-cli_1","title":"Tips and Tricks for Linux CLI","text":"<ul> <li> <p>If you accidental freeze your terminal by using <code>Ctrl+S</code>, simply undo this with the unfreeze <code>Ctrl+Q</code>.</p> </li> <li> <p><code>Ctrl+A</code> moves you to the beginning of the line while <code>Ctrl+E</code> moves you to the end</p> </li> <li> <p>You can run multiple commands in one single command by using the <code>;</code> to separate them. For example <code>Command1; Command2; Command3</code> Or use <code>&amp;&amp;</code> if you only want the next command to run when the first one is successful.</p> </li> </ul>"},{"location":"week-1-intro/ce103-week-1-intro/#useful-windows-commands","title":"Useful Windows Commands","text":""},{"location":"week-1-intro/ce103-week-1-intro/#assoc-fix-file-associations","title":"ASSOC: Fix File Associations","text":"<ul> <li> <p>One of the most powerful tools in the CMD command library is the ASSOC command.</p> </li> <li> <p>Your computer associates certain file extensions with certain programs. This is how your computer knows to open Adobe when you double click a PDF file, or Microsoft Word when you double click a DOC file.</p> </li> <li> <p>You can view all the file associations your computer knows about by typing <code>ASSOC</code> in the command window. You\u2019ll see the file extension and the program it\u2019s associated with.</p> </li> <li> <p>You can set the association by typing something like <code>assoc .doc=Word.Document.8</code>.</p> </li> </ul>"},{"location":"week-1-intro/ce103-week-1-intro/#fc-file-compare","title":"FC: File Compare","text":"<ul> <li>Sometimes when files are changed over time, it\u2019s hard to remember what the differences were between versions. You may not know that a CMD command offers the ability to compare files and see all differences, but it\u2019s true. </li> <li> <p>The <code>FC</code> command performs either an ascii or a binary file comparison and will list all of the differences that it finds.</p> </li> <li> <p><code>Fc /a File1.txt File2.txt</code> will compare two ascii files.</p> </li> <li><code>Fc /b Picture1.jpg Picture2.jpg</code> will do a binary compare on two images.</li> </ul>"},{"location":"week-1-intro/ce103-week-1-intro/#ipconfig","title":"IPCONFIG","text":"<ul> <li>Network troubleshooting is never simple, but one command that makes it much easier is <code>IPCONFIG</code>.</li> <li>Using this command in the CMD command prompt returns detailed information about your current network adapter connection including:</li> <li>Current IP Address</li> <li>Subnet Mask</li> <li>Default Gateway IP</li> <li>Current domain</li> </ul> <p>This information can help you troubleshoot router issues and other connection issues you could be having with your network adapter.</p>"},{"location":"week-1-intro/ce103-week-1-intro/#ipconfig_1","title":"IPCONFIG","text":"<p>Examples: </p><pre><code>&gt; ipconfig\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 ... Show information\n&gt; ipconfig /all\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 ... Show detailed information\n&gt; ipconfig /renew\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 ... renew all adapters\n&gt; ipconfig /renew EL*\u00a0\u00a0\u00a0\u00a0\u00a0 ... renew any connection that has its name starting with EL\n&gt; ipconfig /release *Con*\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 ... release all matching connections, eg.\n</code></pre>"},{"location":"week-1-intro/ce103-week-1-intro/#ipconfig_2","title":"IPCONFIG","text":"<p>\"Wired Ethernet Connection 1\" or \"Wired Ethernet Connection 2\" <code>&gt; ipconfig /all</code> compartments\u00a0 ... Show information about all compartments <code>&gt; ipconfig /all</code> compartments /all ... Show detailed information about all compartments <code>/?</code>\u00a0Display this help message <code>/all</code>Display full configuration information. <code>/release</code> Release the IPv4 address for the specified adapter. <code>/release6</code>\u00a0Release the IPv6 address for the specified adapter.</p>"},{"location":"week-1-intro/ce103-week-1-intro/#ipconfig_3","title":"IPCONFIG","text":"<p><code>/renew</code>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Renew the IPv4 address for the specified adapter. <code>/renew6</code>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Renew the IPv6 address for the specified adapter. <code>/flushdns</code>\u00a0 Purges the DNS Resolver cache. <code>/registerdns</code>\u00a0\u00a0\u00a0\u00a0\u00a0 Refreshes all DHCP leases and re-registers DNS names <code>/displaydns</code>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Display the contents of the DNS Resolver Cache. <code>/showclassid</code>\u00a0\u00a0\u00a0 Displays all the dhcp class IDs allowed for adapter. <code>/setclassid</code> Modifies the dhcp class id. <code>/showclassid6</code>\u00a0\u00a0\u00a0 Displays all the IPv6 DHCP class IDs allowed for adapter. <code>/setclassid6</code>\u00a0\u00a0\u00a0\u00a0 Modifies the IPv6 DHCP class id.</p>"},{"location":"week-1-intro/ce103-week-1-intro/#netstat-network-statistics","title":"NETSTAT: Network Statistics","text":"<ul> <li>Concerned that you could have malware running on your computer that\u2019s connecting to internet locations without you knowing about it?</li> <li>If you run a <code>NETSTAT</code> command in the command prompt, you can get a list of all active TCP connections from your computer.</li> </ul>"},{"location":"week-1-intro/ce103-week-1-intro/#ping-send-test-packets","title":"PING: Send Test Packets","text":"<ul> <li> <p>An IT Analyst\u2019s best friend is the <code>PING</code> command. Running this command sends test packets over the network to the target system.</p> </li> <li> <p>You can use the <code>PING</code> command to test whether your computer can access another computer, a server, or even a website. It can help with revealing network disconnections. It also provides transit time for the packets in milliseconds, so it also reveals a bad network connection as well.\u00a0\u00a0 </p> </li> </ul>"},{"location":"week-1-intro/ce103-week-1-intro/#ping-send-test-packets_1","title":"PING: Send Test Packets","text":"<ul> <li>https://ipstack.com/</li> <li>ipstack offers one of the leading</li> </ul>"},{"location":"week-1-intro/ce103-week-1-intro/#tracert-trace-route-ip-to-geolocation","title":"TRACERT: Trace Route IP to geolocation","text":"<ul> <li>APIs and global IP database services worldwide.</li> </ul>"},{"location":"week-1-intro/ce103-week-1-intro/#powercfg-power-configuration","title":"POWERCFG: Power Configuration","text":"<ul> <li>Are you frustrated with how quickly your laptop seems to run out of power? It could be that your power settings are configured as efficiently as possible. There\u2019s a windows CMD command called <code>POWERCFG</code> (power configuration) that can help. </li> </ul>"},{"location":"week-1-intro/ce103-week-1-intro/#powercfg-power-configuration_1","title":"POWERCFG: Power Configuration","text":"<p>Run the command prompt as an administrator and type</p> <ul> <li> <p><code>powercfg \u2013 energy</code> to get a full power efficiency report.</p> </li> <li> <p>The process can take up to about a minute, but when it\u2019s done, you\u2019ll see whether there are any warnings or errors that might help you improve the power efficiency of your system.</p> </li> </ul>"},{"location":"week-1-intro/ce103-week-1-intro/#shutdown-turn-off-computer","title":"SHUTDOWN: Turn Off Computer","text":"<ul> <li> <p>The <code>SHUTDOWN</code> command is a pretty versatile command that lets you shutdown the computer but control the behavior of that shutdown. It\u2019s commonly used as a scheduled task or part of an IT batch job after patches have been applied to a computer system.</p> </li> <li> <p>Typing <code>shutdown /i</code> from the command prompt will initiate a shutdown, but it\u2019ll upon a GUI to give the user an option on whether to restart or do a full shutdown. If you don\u2019t want to have any GUI pop up, you can just issue a <code>shutdown /s</code> command.</p> </li> <li> <p>There is a long list of other parameters you can use to do a log off, hibernate, restart, and more. Just type <code>shutdown</code> without any arguments to see them all.</p> </li> </ul>"},{"location":"week-1-intro/ce103-week-1-intro/#systeminfo-system-information","title":"SYSTEMINFO: System Information","text":"<ul> <li> <p>If you need to know what brand of network card you have, processor details, or the exact version of your Windows OS, the <code>SYSTEMINFO</code> command can help.</p> </li> <li> <p>This command polls your system and pulls the most important information about your system. It lists the information in a clean format that\u2019s easy to read.</p> </li> </ul>"},{"location":"week-1-intro/ce103-week-1-intro/#sfc-system-file-checker","title":"SFC: System File Checker","text":"<ul> <li> <p>If you\u2019re ever concerned that a virus or some other software might have corrupted your core system files, there\u2019s a Windows command that can scan those files and ensure their integrity.</p> </li> <li> <p>You need to launch CMD as administrator (right click and choose Run as Administrator). Typing <code>SFC /SCANNOW</code> will check the integrity of all protected system files. If a problem is found, the files will be repaired with backed-up system files.</p> </li> </ul>"},{"location":"week-1-intro/ce103-week-1-intro/#sfc-system-file-checker_1","title":"SFC: System File Checker","text":"<ul> <li>The SFC command also lets you:</li> <li><code>/VERIFYONLY</code>: Check the integrity but don\u2019t repair the files.</li> <li><code>/SCANFILE</code>: Scan the integrity of specific files and fix if corrupted.</li> <li><code>/VERIFYFILE</code>: Verify the integrity of specific files but don\u2019t repair them.</li> <li><code>/OFFBOOTDIR</code>: Use this to do repairs on an offline boot directory.</li> <li><code>/OFFWINDIR</code>: Use this to do repairs on an offline Windows directory.</li> <li><code>/OFFLOGFILE</code>: Specify a path to save a log file with scan results.</li> <li>The scan can take up to 10 or 15 minutes, so give it time.\u00a0\u00a0\u00a0 </li> </ul>"},{"location":"week-1-intro/ce103-week-1-intro/#net-use-map-drives","title":"NET USE: Map drives","text":"<ul> <li> <p>If you want to map a new drive, you could always open File Explorer, right click on This PC, and go through the Map Network Drive wizard. However, using the <code>NET USE</code> command, you can do the same thing with one command string.</p> </li> <li> <p>For example, if you have a share folder on a computer on your network called <code>\\\\OTHER-COMPUTER\\SHARE\\</code>, you can map this as your own <code>Z:</code> drive by typing the command:</p> </li> <li> <p><code>NET USE Z: \u201c\\\\OTHER-COMPUTER\\SHARE\u201d /persistent:yes</code></p> </li> <li> <p>The <code>persistent</code> switch tells your computer that you want this drive remapped every time you log back into your computer.</p> </li> </ul>"},{"location":"week-1-intro/ce103-week-1-intro/#chkdsk-check-disk","title":"CHKDSK: Check Disk","text":"<ul> <li>While the SFC command only checks the integrity of core system files, you can use the CHKDSK command to scan an entire drive.</li> <li>The command to check the C: drive and repair any problems, launch the command window as an administrator and type <code>CHKDSK /f C:</code>.</li> <li>This command checks for things like:</li> <li>File fragmentation</li> <li>Disk errors</li> <li>Bad sectors</li> <li>The command can fix any disk errors (if possible). When the command is finished, you\u2019ll see a status of the scan and what actions were taken.</li> </ul>"},{"location":"week-1-intro/ce103-week-1-intro/#schtasks-schedule-tasks","title":"SCHTASKS: Schedule Tasks","text":"<ul> <li> <p>Windows comes with a wizard for creating scheduled tasks. For example, maybe you have a BAT file stored on C:\\temp that you want to run every day at noon.</p> </li> <li> <p>You\u2019d have to click through the Scheduled Task wizard to configure this. Or you can type a single SCHTASKS command to set it up.</p> </li> <li> <p><code>SCHTASKS /Create /SC HOURLY /MO 12 /TR Example /TN c:\\temp\\File1.bat</code></p> </li> <li> <p>The scheduled switch accepts arguments like minute, hourly, daily, and monthly. Then you specify the frequency with the /MO command.</p> </li> <li>If you typed the command correctly, you\u2019ll see the response, SUCCESS: The scheduled task \u201cExample\u201d has successfully been created.</li> </ul>"},{"location":"week-1-intro/ce103-week-1-intro/#attrib-change-file-attributes","title":"ATTRIB: Change File Attributes","text":"<ul> <li>In Windows, you can change file attributes by right clicking on a file and finding the right property to change. However, instead of hunting around for the file attribute, you can use the ATTRIB command to set the file attributes.</li> <li>For example, if you type: <code>ATTRIB +R +H C:\\temp\\File1.bat</code>, it\u2019ll set File1.bat as a hidden, read-only file.</li> <li>There is no response when it\u2019s successful, so unless you see an error message, the command worked.</li> </ul>"},{"location":"week-1-intro/ce103-week-1-intro/#other-windows-cmd-commands","title":"Other Windows CMD Commands","text":"<ul> <li><code>BITSADMIN</code>: Initiate upload or download jobs over the network or internet and monitor the current state of those file transfers.</li> <li><code>COLOR</code>: Change the background color of the command prompt window.</li> <li><code>COMP</code>: Compare the contents of any two files to see the differences.</li> <li><code>FIND/FINDSTR</code>: Search for strings inside of any ASCII files.</li> <li><code>PROMPT</code>: Change the command prompt from C:&gt; to something else.</li> <li><code>TITLE</code>: Change the title of the command prompt window.</li> <li><code>REGEDIT</code>: Edit keys in the Windows registry (use with caution).</li> <li><code>ROBOCOPY</code>: A powerful file copy utility built right into Windows.</li> </ul>"},{"location":"week-1-intro/ce103-week-1-intro/#references","title":"References","text":"<ul> <li> <p>GitHub - kamranahmedse/developer-roadmap: Roadmap to becoming a web developer in 2021</p> </li> <li> <p>GitHub - jwasham/coding-interview-university: A complete computer science study plan to become a software engineer.</p> </li> <li> <p>GitHub - sindresorhus/awesome: \ud83d\ude0e Awesome lists about all kinds of interesting topics</p> </li> </ul>"},{"location":"week-1-intro/ce103-week-1-intro/#references_1","title":"References","text":"<ul> <li> <p>https://www.hostinger.com/tutorials/what-is-cli</p> </li> <li> <p>https://www.hostinger.com/tutorials/linux-commands</p> </li> <li> <p>https://tutorial.djangogirls.org/en/intro_to_command_line/</p> </li> <li> <p>https://stackoverflow.com/questions/673523/how-do-i-measure-execution-time-of-a-command-on-the-windows-command-line</p> </li> </ul>"},{"location":"week-1-intro/ce103-week-1-intro/#references_2","title":"References","text":"<ul> <li> <p>https://helpdeskgeek.com/help-desk/21-cmd-commands-all-windows-users-should-know/</p> </li> <li> <p>Introduction to CMake by Example | derekmolloy.ie</p> </li> <li> <p>CMake - Cross Platform Make</p> </li> <li> <p>Windows commands | Microsoft Learn</p> </li> </ul>"},{"location":"week-10-java-II/ce103-week-10-java-II/","title":"CE103 Algorithms and Programming I","text":""},{"location":"week-10-java-II/ce103-week-10-java-II/#ce103-algorithms-and-programming-i","title":"CE103 Algorithms and Programming I","text":""},{"location":"week-10-java-II/ce103-week-10-java-II/#week-10-java-functional-console-programming-ii","title":"Week-10 (Java Functional Console Programming-II)","text":""},{"location":"week-10-java-II/ce103-week-10-java-II/#fall-semester-2021-2022","title":"Fall Semester, 2021-2022","text":"<p>Download DOC, SLIDE, PPTX</p>"},{"location":"week-10-java-II/ce103-week-10-java-II/#java-functional-console-programming-ii","title":"Java Functional Console Programming-II","text":"<p>a. Java Exception Handling</p> <p>i. Java Exceptions</p> <p>ii. Java Exception Handling</p> <p>iii. Java try..catch</p> <p>iv. Java throw and throws</p> <p>v. Java catch Multiple Exceptions</p> <p>vi. Java try-with-resources</p> <p>vii. Java Annotations</p> <p>viii. Java Annotation Types</p> <p>ix. Java Logging</p> <p>x. Java Assertions</p> <p>b. Java List</p> <p>i. Java Collection Framework</p> <p>ii. Java Collection Interface</p> <p>iii. Java List Interface</p> <p>iv. Java ArrayList</p> <p>v. Java Vector</p> <p>vi. Java Stack</p> <p>c. Java Queue</p> <p>i. Java Queue Interface</p> <p>ii. Java PriorityQueue Interface</p> <p>iii. Java Deque Interface</p> <p>iv. Java LinkedList</p> <p>v. Java ArrayDeque</p> <p>vi. Java BlockingQueue Interface</p> <p>vii. Java ArrayBlockingQueue</p> <p>viii. Java LinkedBlocking Queue</p> <p>d. Java Map</p> <p>i. Java Map Interface</p> <p>ii. Java HashMap</p> <p>iii. Java LinkedHashMap</p> <p>iv. Java WeakHashMap</p> <p>v. Java EnumMap</p> <p>vi. Java SortedMap Interface</p> <p>vii. Java NavigableMap Interface</p> <p>viii. Java TreeMap</p> <p>ix. Java ConcurrentMap Interface</p> <p>x. Java ConcurrentHashMap</p> <p>e. Java Set</p> <p>i. Java Set Interface</p> <p>ii. Java HashSet</p> <p>iii. Java EnumSet</p> <p>iv. Java LinkedHashSet</p> <p>v. Java SortedSet Interface</p> <p>vi. Java NavigableSet Interface</p> <p>vii. Java TreeSet</p> <p>viii. Java Algorithms</p> <p>ix. Java Iterator</p> <p>Java ListIterator</p>"},{"location":"week-10-java-II/ce103-week-10-java-II/#out-of-scope","title":"Out of Scope","text":"<p>a. Java OOP-I</p> <p>i. Java Class and Objects</p> <p>ii. Java Methods</p> <p>iii. Java Constructor</p> <p>iv. Java Strings</p> <p>v. Java Access Modifiers</p> <p>vi. Java this keyword</p> <p>vii. Java final keyword</p> <p>viii. Java recursion</p> <p>ix. Java instanceof operator</p> <p>b. Java OOP-II</p> <p>i. Java Inheritance</p> <p>ii. Java Method Overriding</p> <p>iii. Java super keyword</p> <p>iv. Abstract Class &amp; Method</p> <p>v. Java Interfaces</p> <p>vi. Java Polymorphism</p> <p>vii. Java Encapsulation</p> <p>c. Java OOP-III</p> <p>i. Nested &amp; Inner Class</p> <p>ii. Java Static Class</p> <p>iii. Java Anonymous Class</p> <p>iv. Java Singleton</p> <p>v. Java enum class</p> <p>vi. Java enum constructor</p> <p>vii. Java enum string</p> <p>Java reflection</p>"},{"location":"week-11-java-III/ce103-week-11-java-III/","title":"CE103 Algorithms and Programming I","text":""},{"location":"week-11-java-III/ce103-week-11-java-III/#ce103-algorithms-and-programming-i","title":"CE103 Algorithms and Programming I","text":""},{"location":"week-11-java-III/ce103-week-11-java-III/#week-11-java-functional-console-programming-iii","title":"Week-11 (Java Functional Console Programming-III)","text":""},{"location":"week-11-java-III/ce103-week-11-java-III/#fall-semester-2021-2022","title":"Fall Semester, 2021-2022","text":"<p>Download DOC, SLIDE, PPTX</p>"},{"location":"week-11-java-III/ce103-week-11-java-III/#java-functional-console-programming-iii","title":"Java Functional Console Programming-III","text":"<p>i.    Java I/O Streams i.    Java I/O Streams ii.    Java InputStream iii.    Java OutputStream iv.    Java FileInputStream v.    Java FileOutputStream vi.    Java ByteArrayInputStream vii.    Java ByteArrayOutputStream viii.    Java ObjectInputStream ix.    Java ObjectOutputStream x.    Java BufferedInputStream xi.    Java BufferedOutputStream xii.    Java PrintStream j.    Java Reader/Writer i.    Java Reader ii.    Java Writer iii.    Java InputStreamReader iv.    Java OutputStreamWriter v.    Java FileReader vi.    Java FileWriter vii.    Java BufferedReader viii.    Java BufferedWriter ix.    Java StringReader x.    Java StringWriter xi.    Java PrintWriter k.    Additional Topics i.    Java Scanner Class ii.    Java Type Casting iii.    Java autoboxing and unboxing iv.    Java Lambda Expression v.    Java Generics vi.    Java File Class vii.    Java Wrapper Class viii.    Java Command Line Arguments ix.    JNLP (Java Network Launch Protocol)</p> <p>JNI</p> <p>Sample JNI/C++ HelloWorld \u00b7 GitHub</p> <p>Set up JNI development in Gradle project | IntelliJ\u00a0IDEA</p>"},{"location":"week-12-c-cpp-gui/ce103-week-12-c-cpp-gui/","title":"CE103 Algorithms and Programming I","text":""},{"location":"week-12-c-cpp-gui/ce103-week-12-c-cpp-gui/#ce103-algorithms-and-programming-i","title":"CE103 Algorithms and Programming I","text":""},{"location":"week-12-c-cpp-gui/ce103-week-12-c-cpp-gui/#week-12-ccpp-gui-programming","title":"Week-12 (C/Cpp GUI Programming)","text":""},{"location":"week-12-c-cpp-gui/ce103-week-12-c-cpp-gui/#fall-semester-2021-2022","title":"Fall Semester, 2021-2022","text":"<p>Download DOC, SLIDE, PPTX</p>"},{"location":"week-12-c-cpp-gui/ce103-week-12-c-cpp-gui/#ccpp-gui-programming","title":"C/Cpp GUI Programming","text":"<p>The Microsoft Foundation Class</p> <p>MFC Tutorial</p> <p>Visual C++ / MFC Calculator 3 - YouTube</p> <p>MFC C++ : My videos source code download available now to members - YouTube</p> <p>The Windows GUI interface programming using Microsoft Foundation Classes (MFC) with Visual C++ and .Net hands-on approach tutorials</p> <p>Module 1: Using Visual C++ 6.0, .Net and Windows MFC Graphic User Interface (GUI) programming hands-on tutorial-Module1</p> <p></p> <p></p> <p></p> <p>GTK 4 </p> <p>https://www.msys2.org/</p> <p>https://www.msys2.org/</p> <p>Programming with gtkmm 4 </p> <p>Build and run GTK 4 applications with Visual Studio</p> <p>https://www.gtk.org/</p> <p>The Meson Build system </p> <p>The GTK Project - A free and open-source cross-platform widget toolkit</p> <pre><code>// Include gtk\n#include &lt;gtk/gtk.h&gt;\nstatic void on_activate (GtkApplication *app) {\n// Create a new window\nGtkWidget *window = gtk_application_window_new (app);\n// Create a new button\nGtkWidget *button = gtk_button_new_with_label (\"Hello, World!\");\n// When the button is clicked, close the window passed as an argument\ng_signal_connect_swapped (button, \"clicked\", G_CALLBACK (gtk_window_close), window);\ngtk_window_set_child (GTK_WINDOW (window), button);\ngtk_window_present (GTK_WINDOW (window));\n}\nint main (int argc, char *argv[]) {\n// Create a new application\nGtkApplication *app = gtk_application_new (\"com.example.GtkApplication\",\nG_APPLICATION_FLAGS_NONE);\ng_signal_connect (app, \"activate\", G_CALLBACK (on_activate), NULL);\nreturn g_application_run (G_APPLICATION (app), argc, argv);\n}\n</code></pre> <p>eBooks by Tags | RIP Tutorial</p>"},{"location":"week-13-csharp-gui-I/ce103-week-13-csharp-gui-I/","title":"CE103 Algorithms and Programming I","text":""},{"location":"week-13-csharp-gui-I/ce103-week-13-csharp-gui-I/#ce103-algorithms-and-programming-i","title":"CE103 Algorithms and Programming I","text":""},{"location":"week-13-csharp-gui-I/ce103-week-13-csharp-gui-I/#week-13-c-gui-programming-i","title":"Week-13 (C# GUI Programming-I)","text":""},{"location":"week-13-csharp-gui-I/ce103-week-13-csharp-gui-I/#fall-semester-2021-2022","title":"Fall Semester, 2021-2022","text":"<p>Download DOC, SLIDE, PPTX</p>"},{"location":"week-13-csharp-gui-I/ce103-week-13-csharp-gui-I/#c-gui-programming-i","title":"C# GUI Programming-I","text":""},{"location":"week-14-csharp-gui-II/ce103-week-14-csharp-gui-II/","title":"CE103 Algorithms and Programming I","text":""},{"location":"week-14-csharp-gui-II/ce103-week-14-csharp-gui-II/#ce103-algorithms-and-programming-i","title":"CE103 Algorithms and Programming I","text":""},{"location":"week-14-csharp-gui-II/ce103-week-14-csharp-gui-II/#week-14-c-gui-programming-ii","title":"Week-14 (C# GUI Programming-II)","text":""},{"location":"week-14-csharp-gui-II/ce103-week-14-csharp-gui-II/#fall-semester-2021-2022","title":"Fall Semester, 2021-2022","text":"<p>Download DOC, SLIDE, PPTX</p>"},{"location":"week-14-csharp-gui-II/ce103-week-14-csharp-gui-II/#c-gui-programming-ii","title":"C# GUI Programming-II","text":""},{"location":"week-15-java-gui/ce103-week-15-java-gui/","title":"CE103 Algorithms and Programming I","text":""},{"location":"week-15-java-gui/ce103-week-15-java-gui/#ce103-algorithms-and-programming-i","title":"CE103 Algorithms and Programming I","text":""},{"location":"week-15-java-gui/ce103-week-15-java-gui/#week-15-java-gui-programming","title":"Week-15 (Java GUI Programming)","text":""},{"location":"week-15-java-gui/ce103-week-15-java-gui/#fall-semester-2021-2022","title":"Fall Semester, 2021-2022","text":"<p>Download DOC, SLIDE, PPTX</p>"},{"location":"week-15-java-gui/ce103-week-15-java-gui/#java-gui-programming","title":"Java GUI Programming","text":""},{"location":"week-15-java-gui/ce103-week-15-java-gui/#javafx-gui-programming","title":"JavaFX GUI Programming","text":""},{"location":"week-15-java-gui/ce103-week-15-java-gui/#1-install-gluon-scene-builder","title":"1-Install Gluon Scene Builder","text":"<p>Download and Install Gluon Scene Builder from URL</p> <p>Scene Builder - Gluon</p> <p>We will use gluon scene builder as an external designer for NetBeans, Eclipse, and IntelliJ idea tools.</p> <p></p> <p></p> <p></p> <p>you can save this design as an FXML file from File-&gt;Save As</p>"},{"location":"week-15-java-gui/ce103-week-15-java-gui/#2-install-apache-netbeans","title":"2-Install Apache Netbeans","text":"<p>Download and install apache Netbeans</p> <p>https://netbeans.apache.org/</p> <p></p> <p></p> <p></p> <p></p> <p></p>"},{"location":"week-15-java-gui/ce103-week-15-java-gui/#3-configure-javafx-scene-builder-for-apache-netbeans","title":"3- Configure JavaFX Scene Builder for Apache Netbeans","text":"<p>Open Tools-&gt;Options-&gt;Java-&gt;JavaFX</p> <p></p> <p></p> <p>Select builder home</p> <p></p> <p></p> <p>you can find old integration documentation here</p> <p>Using JavaFX Scene Builder with Java IDEs: Using Scene Builder with NetBeans IDE | JavaFX 2 Tutorials and Documentation </p>"},{"location":"week-15-java-gui/ce103-week-15-java-gui/#4-create-first-application","title":"4-Create First Application","text":"<p>Select File-&gt;New Project</p> <p></p> <p>Select Java With Maven Types</p> <p>FXML JavaFX Maven Archetype (Gluon)</p> <p></p> <p>Set project properties</p> <p></p> <p>Open Project Resources and Click FXML files to run Scene Builder</p> <p></p> <p></p> <p>In designer properties tab will show control properties, code tab will show action bindings</p> <p></p> <p>Then you can run applications from Netbeans.</p> <p></p> <p>for introduction level information please check the following examples</p> <p>JavaFX Simple Calculator - Design and Code - YouTube</p> <p>JavaFX Library Management System Development #0: Introduction - YouTube</p> <p>for more information about JavaFX please check the following </p> <p>JavaFX Tutorial - javatpoint</p>"},{"location":"week-15-java-gui/ce103-week-15-java-gui/#java-swing-gui-programming","title":"Java Swing GUI Programming","text":"<p>Select File-&gt;New Project -&gt; Java with Maven -&gt; Java Application</p> <p></p> <p>Configure Project</p> <p></p> <p>Open project and select package then select right-click -&gt; New -&gt; JFrame Form</p> <p></p> <p>Give a name to your frame</p> <p></p> <p>Swing GUI Builder is integrated with Netbeans</p> <p></p> <p>Drag-and-drop controls to panel from the palette </p> <p></p> <p>And from the events tab, add custom actions.</p> <p></p> <p>you can configure control properties from the properties screen</p> <p></p> <p>We can add simple events such as when the moclickscked to button write text on the text field</p> <p>\"Hello World\"</p> <p></p> <p>When you run application, you will see the following screen</p> <p></p>"},{"location":"week-15-java-gui/ce103-week-15-java-gui/#references","title":"References","text":"<p>...</p> <p>..</p>"},{"location":"week-16-final/ce103-week-16-final/","title":"CE103 Algorithms and Programming I","text":""},{"location":"week-16-final/ce103-week-16-final/#ce103-algorithms-and-programming-i","title":"CE103 Algorithms and Programming I","text":""},{"location":"week-16-final/ce103-week-16-final/#week-16-final","title":"Week-16 (Final)","text":""},{"location":"week-16-final/ce103-week-16-final/#fall-semester-2021-2022","title":"Fall Semester, 2021-2022","text":"<p>Download DOC, SLIDE, PPTX</p>"},{"location":"week-16-final/ce103-week-16-final/#final","title":"Final","text":""},{"location":"week-2-setup/ce103-week-2-setup/","title":"CE103 Algorithms and Programming I","text":""},{"location":"week-2-setup/ce103-week-2-setup/#ce103-algorithms-and-programming-i","title":"CE103 Algorithms and Programming I","text":""},{"location":"week-2-setup/ce103-week-2-setup/#week-2","title":"Week-2","text":""},{"location":"week-2-setup/ce103-week-2-setup/#software-development-environments","title":"Software Development Environments","text":"<p>Download DOC, SLIDE, PPTX</p>"},{"location":"week-2-setup/ce103-week-2-setup/#outline","title":"Outline","text":"<ul> <li>Flowgorithm</li> <li>Introduction to Analysis of Algorithms</li> <li>Programming Environment Setup and Configuration<ul> <li>C/C++ (DevCpp,Code Blocks,MinGW,LLVM,VsCode,VisualStudio,Notepad++,Vi/Vim,Eclipse,Netbeans,Cmake/Make)</li> <li>Java (VsCode,Notepad++,Eclipse,Netbeans,Cmake)</li> <li>C# (VsCode,Notepad++,VsCode,VisualStudio,Cmake)</li> </ul> </li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#outline_1","title":"Outline","text":"<ul> <li>Common Tools and Platforms<ul> <li>Fatih Kalem, Notepad++,HxD, MarktextApp,Cygwin,Dependency Walker,Doxygen,Sonarlint, Codepen.io, Codebeautify.org, Codeshare.io,AsciiFlow.com, Freemind, Mockflow, Wireflow, PlantUML,Drawio,Putty, MobaXterm,Teamviewer,AnyDesk,Paletton.com,Colorhunt.co,Understand,JD Project,Cutter,IDA Pro / Freeware,pythontutor,godbolt,scrcpy,Travis-CI,AppVeyor,Jenkins,Vagrant,Docker / Docker Compose / Kubernetes,Nuget,SCV Cryptomanager,Addario CryptoBench,Raymond's MD5 &amp; SHA Checksum Utility,SlavaSoft HashCalc,Portable PGP, and more ...</li> </ul> </li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#algorithm-basics","title":"Algorithm Basics","text":""},{"location":"week-2-setup/ce103-week-2-setup/#flowgorithm-1","title":"Flowgorithm (1)","text":"<ul> <li> <p>http://www.flowgorithm.org/</p> </li> <li> <p>Flowgorithm - Documentation</p> </li> <li> <p>https://github.com/timoteoponce/flowgorithm-examples</p> </li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#flowgorithm-2","title":"Flowgorithm (2)","text":"<ul> <li>Main Window</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#flowgorithm-3","title":"Flowgorithm (3)","text":"<ul> <li>Console Window</li> <li>The classic method to interact with the computer is to use the \"Console\". Flowgorithm attempts to make it look like a typical instant messenger window. The \"chat bubbles\" are color coded to match the Input and Output shapes used in the flowchart. If you don't want to use the chat bubbles, you can also toggle between them and the classical plain text.</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#flowgorithm-4","title":"Flowgorithm (4)","text":"<ul> <li>Console Window</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#flowgorithm-5","title":"Flowgorithm (5)","text":"<ul> <li>Source Code Viewer Window</li> <li>The Source Code Viewer can convert your flowchart to several major programming languages. So, if you planning to learn a high-level language, then this feature should help you along the way.</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#flowgorithm-6","title":"Flowgorithm (6)","text":"<ul> <li>Source Code Viewer Window</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#flowgorithm-7","title":"Flowgorithm (7)","text":"<ul> <li>Variable Watch Window</li> <li>The variable watch window is used to keep track of how your variables are changing as your program executes. Each variable is color-coded based on its data type. At a glance, you can tell exactly what type of data is being stored - and catch where you may want to use a different data type.</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#flowgorithm-8","title":"Flowgorithm (8)","text":"<ul> <li>Variable Watch Window</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#flowgorithm-8_1","title":"Flowgorithm (8)","text":"<ul> <li>More Resources for Flowgorithm</li> <li>Flowgorithm Tutorial - TestingDocs.com</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#pseudocode-1","title":"Pseudocode (1)","text":"<ul> <li> <p>Algorithm design language</p> </li> <li> <p>Pseudocode - Wikipedia</p> </li> <li> <p>Pseudocode Examples</p> </li> <li> <p>How to write a Pseudo Code? - GeeksforGeeks</p> </li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#introduction-to-analysis-of-algorithms","title":"Introduction to Analysis of Algorithms","text":"<ul> <li> <p>In this course, we will learn how to code with several development environments and next term we will see an analysis of algorithms in detail.</p> </li> <li> <p>This topic is covered in the following link:</p> </li> <li> <p>CE100 Introduction to Analysis of Algorithms</p> </li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#programming-environment-setup-and-configuration","title":"Programming Environment Setup and Configuration","text":"<ul> <li>Programming life is not about only learning how to code. Mostly you need to use several code development environments and you need to learn how to use them efficiently.</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#c-c-environment-and-development","title":"C / C++ Environment and Development","text":""},{"location":"week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-1","title":"DevCpp (Install / Compile / Run / Debug) (1)","text":"<ul> <li>Download DevC++ IDE from the following link</li> <li>https://www.bloodshed.net/</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-2","title":"DevCpp (Install / Compile / Run / Debug) (2)","text":"<ul> <li>Open DevC++ IDE for C Project Generation <code>Open File-&gt;New-&gt;Project</code></li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-3","title":"DevCpp (Install / Compile / Run / Debug) (3)","text":"<p>Select Console Application from Basic tab and with C Project Option and write a project name such as \"Hello\" then press OK</p> <p>Select a folder and save Hello.dev project file.</p>"},{"location":"week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-4","title":"DevCpp (Install / Compile / Run / Debug) (4)","text":"<ul> <li>You will see a sample main with an empty body</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-5","title":"DevCpp (Install / Compile / Run / Debug) (5)","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n/* run this program using the console pauser or add your own getch, s,ystem(\"pause\") or input loop */\nint main(int argc, char *argv[]) {\nretAdd 0;\n}\n</code></pre>"},{"location":"week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-6","title":"DevCpp (Install / Compile / Run / Debug) (6)","text":"<ul> <li>Add the following line in the main function. This will write \"Hello, World!\" on the screen and then wait for a keypress to exit from the application</li> </ul> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n/* run this program using the console pauser or add your own getch, system(\"pause\") or input loop */\nint main(int argc, char *argv[]) {\nprintf(\"Hello, World!\");\ngetchar();\nreturn 0;\n}\n</code></pre>"},{"location":"week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-7","title":"DevCpp (Install / Compile / Run / Debug) (7)","text":"<ul> <li>Then save the file</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-8","title":"DevCpp (Install / Compile / Run / Debug) (8)","text":"<ul> <li>Use from menu <code>Execute-&gt;Compile F5</code> to generate <code>Hello.exe</code></li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-9","title":"DevCpp (Install / Compile / Run / Debug) (9)","text":"<ul> <li>You can find the generated <code>Hello.exe</code> path from Compile.log as follow. Check the Output Filename</li> </ul> <pre><code>Compiling project changes...\n--------\n- Project Filename: E:\\UgurCoruh\\RTEU\\Lectures\\2021-2022 G\u00fcz CE103 - Algorithms and Programming I\\Lectures\\ce103-algorithms-and-programming-I\\Week-2\\devcpp-hello-world-apps\\Hello.dev\n- Compiler Name: TDM-GCC 4.9.2 64-bit Release\n\nBuilding makefile...\n--------\n- Filename: E:\\UgurCoruh\\RTEU\\Lectures\\2021-2022 G\u00fcz CE103 - Algorithms and Programming I\\Lectures\\ce103-algorithms-and-programming-I\\Week-2\\devcpp-hello-world-apps\\Makefile.win\n\nProcessing makefile...\n--------\n- Makefile Processor: C:\\Program Files (x86)\\Dev-Cpp\\MinGW64\\bin\\mingw32-make.exe\n- Command: mingw32-make.exe -f \"E:\\UgurCoruh\\RTEU\\Lectures\\2021-2022 G\u00fcz CE103 - Algorithms and Programming I\\Lectures\\ce103-algorithms-and-programming-I\\Week-2\\devcpp-hello-world-apps\\Makefile.win\" all\n\ngcc.exe -c main.c -o main.o -I\"C:/Program Files (x86)/Dev-Cpp/MinGW64/include\" -I\"C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include\" -I\"C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include\"\ngcc.exe main.o -o Hello.exe -L\"C:/Program Files (x86)/Dev-Cpp/MinGW64/lib\" -L\"C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/lib\" -static-libgcc\n\nCompilation results...\n--------\n- Errors: 0\n- Warnings: 0\n- Output Filename: E:\\UgurCoruh\\RTEU\\Lectures\\2021-2022 G\u00fcz CE103 - Algorithms and Programming I\\Lectures\\ce103-algorithms-and-programming-I\\Week-2\\devcpp-hello-world-apps\\Hello.exe\n- Output Size: 128,103515625 KiB\n- Compilation Time: 2,13s\n</code></pre>"},{"location":"week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-10","title":"DevCpp (Install / Compile / Run / Debug) (10)","text":"<ul> <li>Then you can run with <code>Execute-&gt;Run F10</code> or Directly <code>Compile&amp;Run F11</code></li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-11","title":"DevCpp (Install / Compile / Run / Debug) (11)","text":"<p>for debugging operations, just change the code and add more statements as follow</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n/* run this program using the console pauser or add your getch, system(\",pause\") or input loop */\nint main(int argc, char *argv[]) {\nprintf(\"Hello, World! Step-1\\n\");\nprintf(\"Hello, World! Step-2\\n\");\nprintf(\"Hello, World! Step-3\\n\");\nprintf(\"Hello, World! Step-4\\n\");\nprintf(\"Hello, World! Step-5\\n\");\nprintf(\"Hello, World! Step-6\\n\");\ngetchar();\nreturn 0;\n}\n</code></pre>"},{"location":"week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-12","title":"DevCpp (Install / Compile / Run / Debug) (12)","text":"<p>Click on line numbers and add breakpoints for the debugger. This red point will be debugger stop points</p> <p></p>"},{"location":"week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-13","title":"DevCpp (Install / Compile / Run / Debug) (13)","text":"<ul> <li>In the menu section, select the compiler with debug option</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-14","title":"DevCpp (Install / Compile / Run / Debug) (14)","text":"<ul> <li>Compile application with debugging setting and in Execute Section use Debug F5 to start debugging</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-15","title":"DevCpp (Install / Compile / Run / Debug) (15)","text":"<ul> <li>The debugger will stop at the breakpoint at the debug point (blue line)</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-16","title":"DevCpp (Install / Compile / Run / Debug) (16)","text":"<ul> <li>Moving to the next statement can be done via control buttons or shortcuts</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-17","title":"DevCpp (Install / Compile / Run / Debug) (17)","text":"<p>-Press <code>F8</code>to step-by-step continue</p> <ul> <li>Then go to <code>Project Options -&gt; Compiler -&gt; Linker</code> and set Generate debugging information to \"yes\", and make sure you are not using any optimization options (they're not good for debug mode). Also, check the Parameters tab, and make sure you don't have any optimization options (like <code>-O2</code> or <code>-O3</code>, but <code>-O0</code> is ok because it means no optimization) or strip option (<code>-s</code>).</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-18","title":"DevCpp (Install / Compile / Run / Debug) (18)","text":"<ul> <li>After that, do a full rebuild (<code>Ctrl-F11</code>), then set a breakpoint(s) where you want the debugger to stop (otherwise it will just run the program). To set a breakpoint on a line, just click on the gutter (the gray band on the left), or press <code>Ctrl-F5</code>.</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-19","title":"DevCpp (Install / Compile / Run / Debug) (19)","text":"<ul> <li>Now you are ready to launch the debugger, by pressing F8 or clicking the debug button. If everything goes well, the program will start, and then stop at the first breakpoint. Then you can step through the code, entering function calls, by pressing <code>Shift-F7</code> or the \"step into\" button, or stepping over the function calls, by pressing <code>F7</code> or the \"next step\" button. You can press <code>Ctrl-F7</code> or the \"<code>continue</code>\" button to continue execution till the next breakpoint. At any time, you can add or remove breakpoints.</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-20","title":"DevCpp (Install / Compile / Run / Debug) (20)","text":"<p>When the program stopped at a breakpoint and you are stepping through the code, you can display the values of various variables in your program by putting your mouse over them, or you can display variables and expressions by pressing <code>F4</code>or the \"add watch\" button and typing the expression.</p>"},{"location":"week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-21","title":"DevCpp (Install / Compile / Run / Debug) (21)","text":"<p>How do I debug using Dev-C++</p>"},{"location":"week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-1","title":"Code Blocks (Install / Compile / Run / Debug) (1)","text":"<p>Download Code Blocks from the following link</p> <p>Binary releases - Code::Blocks</p>"},{"location":"week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-2","title":"Code Blocks (Install / Compile / Run / Debug) (2)","text":"<p>Open Code Blocks and</p> <p>Select <code>File-&gt;New-&gt;Project</code></p> <p></p>"},{"location":"week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-3","title":"Code Blocks (Install / Compile / Run / Debug) (3)","text":"<p>Select <code>Console Application</code></p> <p>Click <code>Next</code> from Opening Window</p> <p></p>"},{"location":"week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-4","title":"Code Blocks (Install / Compile / Run / Debug) (4)","text":"<p>Select <code>C</code> for Sample Project</p> <p></p>"},{"location":"week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-5","title":"Code Blocks (Install / Compile / Run / Debug) (5)","text":"<p>Write a project name and title also set a project folder</p> <p></p>"},{"location":"week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-6","title":"Code Blocks (Install / Compile / Run / Debug) (6)","text":"<p>Select a compiler for this project we selected <code>GCC</code> but you can select C compilers from the list. Set Debug and Release executable output folders.</p> <p></p>"},{"location":"week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-7","title":"Code Blocks (Install / Compile / Run / Debug) (7)","text":"<ul> <li>After this wizard, you will have the following code</li> </ul> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\nint main()\n{\nprintf(\"Hello world!\\n\");\nreturn 0;\n}\n</code></pre>"},{"location":"week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-8","title":"Code Blocks (Install / Compile / Run / Debug) (8)","text":"<p>Select <code>Debug</code> Build from the menu</p> <p></p>"},{"location":"week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-9","title":"Code Blocks (Install / Compile / Run / Debug) (9)","text":"<p>Run with Build and Run <code>F9</code></p> <p></p>"},{"location":"week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-10","title":"Code Blocks (Install / Compile / Run / Debug) (10)","text":"<ul> <li>You should see the following output</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-11","title":"Code Blocks (Install / Compile / Run / Debug) (11)","text":"<ul> <li>Add the following lines to your source code for debugging</li> </ul> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\nint main()\n{\nprintf(\"Hello world! Step-1\\n\");\nprintf(\"Hello world! Step-2\\n\");\nprintf(\"Hello world! Step-3\\n\");\nprintf(\"Hello world! Step-4\\n\");\nprintf(\"Hello world! Step-5\\n\");\nprintf(\"Hello world! Step-6\\n\");\nreturn 0;\n}\n</code></pre>"},{"location":"week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-12","title":"Code Blocks (Install / Compile / Run / Debug) (12)","text":"<ul> <li>and add breakpoints with <code>F5</code> or mouse click</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-13","title":"Code Blocks (Install / Compile / Run / Debug) (13)","text":"<ul> <li>select <code>Debug-&gt;Start/Continue</code> to start debugger</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-14","title":"Code Blocks (Install / Compile / Run / Debug) (14)","text":"<ul> <li>If you see the following error this is related to long or turkish characters including the path. Just move the project to a shorter path and try again</li> </ul> <pre><code>Setting breakpoints\nDebugger name and version: GNU gdb (GDB) 8.1\nStarting the debuggee failed: No executable specified, use `target exec'.\nDebugger finished with status 0\n</code></pre>"},{"location":"week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-15","title":"Code Blocks (Install / Compile / Run / Debug) (15)","text":"<p>You will see the following yellow pointer for the debugger</p> <p></p>"},{"location":"week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-16","title":"Code Blocks (Install / Compile / Run / Debug) (16)","text":"<p>You can use the following menu or shortcuts for step-by-step debugging.</p> <p></p>"},{"location":"week-2-setup/ce103-week-2-setup/#gccg-complier-mingw-clang-cl-llvm-1","title":"GCC/G++ Complier (MinGW) / Clang-cl (LLVM) (1)","text":"<p>Download and install <code>MinGW</code> or <code>LLVM</code> compiler (if you downloaded then skip this step)</p> <ul> <li> <p>MinGW installer (clang)</p> </li> <li> <p>Download MinGW-w64 - for 32 and 64-bit Windows from SourceForge.net</p> </li> <li> <p>If you have a problem try `Github`` builds</p> </li> <li> <p>https://github.com/niXman/mingw-builds-binaries/releases</p> </li> <li> <p>https://github.com/niXman/mingw-builds-binaries/releases/download/12.2.0-rt_v10-rev0/x86_64-12.2.0-release-win32-seh-rt_v10-rev0.7z</p> </li> <li> <p>LLVM installer (gcc/g++)</p> </li> <li> <p>Download LLVM releases</p> </li> <li> <p>Also use the following notes</p> <ul> <li>https://llvm.org/devmtg/2014-04/PDFs/Talks/clang-cl.pdf</li> </ul> </li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#gccg-complier-mingw-clang-cl-llvm-2","title":"GCC/G++ Complier (MinGW) / Clang-cl (LLVM) (2)","text":"<p>Open a console with \"<code>cmd</code>\" and test the following commands if commands are not recognized then set the system environment variable to add <code>gcc</code> and <code>g++</code> executable paths to the path variable (add to both system and user path variable)</p> <pre><code>gcc --version\n\ng++ --version\n</code></pre> <pre><code>C:\\Users\\ugur.coruh&gt;gcc --version\ngcc (x86_64-win32-seh-rev0, Built by MinGW-W64 project) 8.1.0\nCopyright (C) 2018 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n</code></pre> <pre><code>clang --version\n</code></pre>"},{"location":"week-2-setup/ce103-week-2-setup/#gccg-complier-mingw-clang-cl-llvm-3","title":"GCC/G++ Complier (MinGW) / Clang-cl (LLVM) (3)","text":"<ul> <li>for <code>gcc.exe</code>, <code>g++.exe</code> and <code>gdb.exe</code></li> </ul> <pre><code>C:\\Program Files\\mingw-w64\\x86_64-8.1.0-win32-seh-rt_v6-rev0\\mingw64\\bin\n</code></pre> <ul> <li>for <code>clang.exe</code>, <code>lldb.exe</code></li> </ul> <pre><code>C:\\Program Files\\LLVM\\bin\n</code></pre> <p>This folder path changes according to your setup</p>"},{"location":"week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-1","title":"VSCode (Install / Compile / Run / Debug) (1)","text":"<p>Download Visual Studio Code from the following link</p> <p>Download Visual Studio Code - Mac, Linux, Windows</p>"},{"location":"week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-2","title":"VSCode (Install / Compile / Run / Debug) (2)","text":"<p>In this sample, you will find MinGW and LLVM compiler combinations for C and C++</p> <p>Create a folder and enter this folder then open this folder with vscode by right click</p> <p></p>"},{"location":"week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-3","title":"VSCode (Install / Compile / Run / Debug) (3)","text":"<p>or enter the folder via console</p> <p></p> <p>write</p> <pre><code>code .\n</code></pre>"},{"location":"week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-4","title":"VSCode (Install / Compile / Run / Debug) (4)","text":"<ul> <li>This will open vscode for the current folder, (.) dot present current folder.</li> <li>You will see an empty folder in the right window</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-5","title":"VSCode (Install / Compile / Run / Debug) (5)","text":""},{"location":"week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-6","title":"VSCode (Install / Compile / Run / Debug) (6)","text":"<ul> <li>Create a <code>hello.c</code> file and write the following content</li> </ul> <pre><code>#include &lt;stdio.h&gt;\nint main() {\n// printf() displays the string inside quotation\nprintf(\"Hello, World!\");\nreturn 0;\n}\n</code></pre>"},{"location":"week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-7","title":"VSCode (Install / Compile / Run / Debug) (7)","text":"<p>use <code>CTRL+SHIFT+B</code> (you should be on the source code section) to build a file</p> <p></p>"},{"location":"week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-8","title":"VSCode (Install / Compile / Run / Debug) (8)","text":"<p>Select <code>GCC</code>or <code>CLANG</code>for this sample we can use <code>GCC</code></p> <p>You will see the output generated `Hello.exe``</p> <p></p>"},{"location":"week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-9","title":"VSCode (Install / Compile / Run / Debug) (9)","text":"<p>for debugging just put a breakpoint and build again</p> <p></p>"},{"location":"week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-10","title":"VSCode (Install / Compile / Run / Debug) (10)","text":"<ul> <li>after building for debug press <code>CTRL+SHIFT+D</code> (you should be in the source code section)and in the right window select create <code>launch.json</code></li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-11","title":"VSCode (Install / Compile / Run / Debug) (11)","text":"<ul> <li>from opening, window select <code>C++ GDB/LLDB</code></li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-12","title":"VSCode (Install / Compile / Run / Debug) (12)","text":"<ul> <li>from the next opening, menu select <code>mingw-w64 gcc.exe</code></li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-13","title":"VSCode (Install / Compile / Run / Debug) (13)","text":"<p>this will run the debugger and you will see debug points activated</p> <p></p>"},{"location":"week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-14","title":"VSCode (Install / Compile / Run / Debug) (14)","text":"<p>then you can step-by-step debug your code.</p> <p>the following <code>task.json</code> and <code>launch.json</code> automatically generated with your selections</p> <p></p>"},{"location":"week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-15","title":"VSCode (Install / Compile / Run / Debug) (15)","text":"<p>launch.json</p> <pre><code>{\n// Olas\u0131 \u00f6znitelikler hakk\u0131nda bilgi edinmek i\u00e7in IntelliSense kullan\u0131n.\n// Mevcut \u00f6zniteliklerin a\u00e7\u0131klamalar\u0131n\u0131 g\u00f6r\u00fcnt\u00fclemek i\u00e7in \u00fczerine gelin.\n// Daha fazla bilgi i\u00e7in \u015fu adresi ziyaret edin: https://go.microsoft.com/fwlink/?linkid=830387\n\"version\": \"0.2.0\",\n\"configurations\": [\n{\n\"name\": \"gcc.exe - Etkin dosyay\u0131 derle ve dosyada hata ay\u0131kla\",\n\"type\": \"cppdbg\",\n\"request\": \"launch\",\n\"program\": \"${fileDirname}\\\\${fileBasenameNoExtension}.exe\",\n\"args\": [],\n\"stopAtEntry\": false,\n\"cwd\": \"${fileDirname}\",\n\"environment\": [],\n\"externalConsole\": false,\n\"MIMode\": \"gdb\",\n\"miDebuggerPath\": \"C:\\\\Program Files\\\\mingw-w64\\\\x86_64-8.1.0-win32-seh-rt_v6-rev0\\\\mingw64\\\\bin\\\\gdb.exe\",\n\"setupCommands\": [\n{\n\"description\": \"gdb i\u00e7in d\u00fczg\u00fcn yazd\u0131rmay\u0131 etkinle\u015ftir\",\n\"text\": \"-enable-pretty-printing\",\n\"ignoreFailures\": true\n}\n],\n\"preLaunchTask\": \"C/C++: gcc.exe etkin dosyay\u0131 derle\"\n}\n]\n}\n</code></pre>"},{"location":"week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-16","title":"VSCode (Install / Compile / Run / Debug) (16)","text":"<p>task.json</p> <pre><code>{\n\"tasks\": [\n{\n\"type\": \"cppbuild\",\n\"label\": \"C/C++: gcc.exe etkin dosyay\u0131 derle\",\n\"command\": \"C:\\\\Program Files\\\\mingw-w64\\\\x86_64-8.1.0-win32-seh-rt_v6-rev0\\\\mingw64\\\\bin\\\\gcc.exe\",\n\"args\": [\n\"-fdiagnostics-color=always\",\n\"-g\",\n\"${file}\",\n\"-o\",\n\"${fileDirname}\\\\${fileBasenameNoExtension}.exe\"\n],\n\"options\": {\n\"cwd\": \"${fileDirname}\"\n},\n\"problemMatcher\": [\"$gcc\"],\n\"group\": {\n\"kind\": \"build\",\n\"isDefault\": true\n},\n\"detail\": \"Hata Ay\u0131klay\u0131c\u0131s\u0131 taraf\u0131ndan olu\u015fturulan g\u00f6rev.\"\n}\n],\n\"version\": \"2.0.0\"\n}\n</code></pre>"},{"location":"week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-17","title":"VSCode (Install / Compile / Run / Debug) (17)","text":"<ul> <li>You can do the same thing for other compilers and C++ source codes. LLVM does not support debugging on vscode now.</li> </ul> <p>for C++ VsCode you can check the following links</p> <ul> <li> <p>for Windows</p> </li> <li> <p>https://code.visualstudio.com/docs/cpp/config-mingw</p> </li> <li> <p>for Linux</p> </li> <li> <p>https://code.visualstudio.com/docs/cpp/config-linux</p> </li> <li> <p>for WSL</p> </li> <li> <p>https://code.visualstudio.com/docs/cpp/config-wsl</p> </li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-18","title":"VSCode (Install / Compile / Run / Debug) (18)","text":"<p>in the launch file if you start debugging with <code>F5</code></p> <p>(you can select debugger with <code>CTRL+SHIFT+P</code> and then write Debug and Selecting Configure Debugger Option)</p>"},{"location":"week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-19","title":"VSCode (Install / Compile / Run / Debug) (19)","text":"<ul> <li> <p>the following line will be your debugging application path</p> </li> <li> <p>if you start debugging with <code>F5</code>in <code>Hello.c</code> file this will set <code>&lt;Hello.c base path&gt;/Hello.exe</code></p> </li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-20","title":"VSCode (Install / Compile / Run / Debug) (20)","text":"<p>You should set this correct for both <code>LLVM</code>and <code>GCC</code> configuration in launch.json</p> <pre><code> \"program\": \"${fileDirname}\\\\${fileBasenameNoExtension}.exe\",\n</code></pre> <p>Also you should set your installed debugger paths</p> <p>for GCC</p> <pre><code>\"miDebuggerPath\": \"C:\\\\Program Files\\\\mingw-w64\\\\x86_64-8.1.0-win32-seh-rt_v6-rev0\\\\mingw64\\\\bin\\\\gdb.exe\",\n</code></pre> <p>for LLVM</p> <pre><code>\"miDebuggerPath\": \"C:\\\\Program Files\\\\LLVM\\\\bin\\\\lldb.exe\",\n</code></pre> <p>for more details please check the sample source codes.</p>"},{"location":"week-2-setup/ce103-week-2-setup/#visual-studio-code-extension-list-1","title":"Visual Studio Code Extension List (1)","text":"<p>My Extension List</p> <ul> <li>Listing Installed Extensions</li> </ul> <pre><code>PS C:\\Users\\ugur.coruh\\Desktop&gt; code --list-extensions | % { \"code --install-extension $_\" }\n</code></pre> <p>Following topic can help you</p> <p>How can you export the Visual Studio Code extension list? - Stack Overflow</p>"},{"location":"week-2-setup/ce103-week-2-setup/#visual-studio-code-extension-list-2","title":"Visual Studio Code Extension List (2)","text":"<pre><code>code --install-extension 2gua.rainbow-brackets\ncode --install-extension aaron-bond.better-comments\ncode --install-extension abusaidm.html-snippets\ncode --install-extension ACharLuk.easy-cpp-projects\ncode --install-extension chris-noring.node-snippets\ncode --install-extension cschlosser.doxdocgen\ncode --install-extension csholmq.excel-to-markdown-table\ncode --install-extension DaChuiOpenSource.FreeMind\ncode --install-extension dannysteenman.cloudformation-yaml-snippets\ncode --install-extension Dart-Code.dart-code\ncode --install-extension Dart-Code.flutter\ncode --install-extension digized.umple\ncode --install-extension DotJoshJohnson.xml\ncode --install-extension DougFinke.vscode-pandoc\ncode --install-extension dzhavat.bracket-pair-toggler\ncode --install-extension esbenp.prettier-vscode\ncode --install-extension formulahendry.dotnet\ncode --install-extension franneck94.c-cpp-runner\ncode --install-extension gcc.\n</code></pre>"},{"location":"week-2-setup/ce103-week-2-setup/#visual-studio-code-extension-list-3","title":"Visual Studio Code Extension List (3)","text":"<pre><code>vscode-plugin-billionbottle\ncode --install-extension geeklearningio.graphviz-markdown-preview\ncode --install-extension geyao.html-snippets\ncode --install-extension GitHub.copilot-nightly\ncode --install-extension GrapeCity.gc-excelviewer\ncode --install-extension Ionide.Ionide-fsharp\ncode --install-extension ionut-botizan.vscode-cypher-ql\ncode --install-extension ipedrazas.kubernetes-snippets\ncode --install-extension JakeWilson.vscode-picture\ncode --install-extension James-Yu.latex-workshop\ncode --install-extension JasonMejane.base64viewer\ncode --install-extension jasonnutter.search-node-modules\ncode --install-extension jebbs.plantuml\ncode --install-extension jeff-hykin.better-cpp-syntax\ncode --install-extension Katacoda.vscode\ncode --install-extension KenDomino.Antlrvsix-vscode\ncode --install-extension l7ssha.tag-inserter\ncode --install-extension lolkush.quickstart\ncode --install-extension marp-team.marp-vscode\ncode --install-extension mindaro-dev.file-downloader\ncode --install-extension mindaro.mindaro\ncode --install-extension ms-azuretools.vscode-docker\ncode --install-extension MS-CEINTL.vscode-language-pack-tr\n</code></pre>"},{"location":"week-2-setup/ce103-week-2-setup/#visual-studio-code-extension-list-4","title":"Visual Studio Code Extension List (4)","text":"<pre><code>code --install-extension ms-dotnettools.csharp\ncode --install-extension ms-dotnettools.dotnet-interactive-vscode\ncode --install-extension ms-dotnettools.vscode-dotnet-pack\ncode --install-extension ms-dotnettools.vscode-dotnet-runtime\ncode --install-extension ms-kubernetes-tools.vscode-aks-tools\ncode --install-extension ms-kubernetes-tools.vscode-kubernetes-tools\ncode --install-extension ms-python.python\ncode --install-extension ms-python.vscode-pylance\ncode --install-extension ms-toolsai.jupyter\ncode --install-extension ms-toolsai.jupyter-keymap\ncode --install-extension ms-toolsai.jupyter-renderers\ncode --install-extension ms-vscode-remote.remote-containers\ncode --install-extension ms-vscode-remote.remote-ssh\ncode --install-extension ms-vscode-remote.remote-ssh-edit\ncode --install-extension ms-vscode-remote.remote-wsl\n</code></pre>"},{"location":"week-2-setup/ce103-week-2-setup/#visual-studio-code-extension-list-5","title":"Visual Studio Code Extension List (5)","text":"<pre><code>code --install-extension ms-vscode.azure-account\ncode --install-extension ms-vscode.brackets-keybindings\ncode --install-extension ms-vscode.brackets-pack\ncode --install-extension ms-vscode.cmake-tools\ncode --install-extension ms-vscode.cpptools\ncode --install-extension ms-vscode.cpptools-extension-pack\ncode --install-extension ms-vscode.cpptools-themes\ncode --install-extension ms-vscode.live-server\ncode --install-extension ms-vsliveshare.vsliveshare\ncode --install-extension oleg-shilo.cs-script\ncode --install-extension PascalReitermann93.vscode-yaml-sort\n</code></pre>"},{"location":"week-2-setup/ce103-week-2-setup/#visual-studio-code-extension-list-6","title":"Visual Studio Code Extension List (6)","text":"<pre><code>code --install-extension Pivotal.vscode-boot-dev-pack\ncode --install-extension Pivotal.vscode-concourse\ncode --install-extension Pivotal.vscode-manifest-yaml\ncode --install-extension Pivotal.vscode-spring-boot\ncode --install-extension PKief.material-icon-theme\ncode --install-extension platformio.platformio-ide\ncode --install-extension pranaygp.vscode-css-peek\ncode --install-extension redhat.fabric8-analytics\ncode --install-extension redhat.java\ncode --install-extension redhat.vscode-commons\ncode --install-extension redhat.vscode-xml\ncode --install-extension redhat.vscode-yaml\ncode --install-extension ritwickdey.LiveServer\ncode --install-extension sidthesloth.html5-boilerplate\ncode --install-extension TaodongWu.ejs-snippets\ncode --install-extension tht13.python\ncode --install-extension tomoki1207.pdf\ncode --install-extension twxs.cmake\ncode --install-extension vadimcn.vscode-lldb\n</code></pre>"},{"location":"week-2-setup/ce103-week-2-setup/#visual-studio-code-extension-list-7","title":"Visual Studio Code Extension List (7)","text":"<pre><code>code --install-extension VisualStudioExptTeam.intellicode-api-usage-examples\ncode --install-extension VisualStudioExptTeam.vscodeintellicode\ncode --install-extension vscjava.vscode-java-debug\ncode --install-extension vscjava.vscode-java-dependency\ncode --install-extension vscjava.vscode-java-pack\ncode --install-extension vscjava.vscode-java-test\ncode --install-extension vscjava.vscode-maven\ncode --install-extension vscjava.vscode-spring-boot-dashboard\ncode --install-extension vscjava.vscode-spring-initializr\ncode --install-extension walkme.HTML5-extension-pack\ncode --install-extension webfreak.debug\ncode --install-extension well-ar.plantuml\ncode --install-extension wildboar.asn1\ncode --install-extension Zignd.html-css-class-completion\n</code></pre>"},{"location":"week-2-setup/ce103-week-2-setup/#visual-studio-community-edition-install-compile-run-debug-1","title":"Visual Studio Community Edition (Install / Compile / Run / Debug) (1)","text":"<ul> <li>Download and install <code>Visual Studio Community Edition</code></li> <li>Select All Development Environments from Installer.</li> </ul> <p>\u00dccretsiz Geli\u015ftirici Yaz\u0131l\u0131mlar\u0131 ve Hizmetleri - Visual Studio</p> <p></p>"},{"location":"week-2-setup/ce103-week-2-setup/#visual-studio-community-edition-install-compile-run-debug-2","title":"Visual Studio Community Edition (Install / Compile / Run / Debug) (2)","text":"<ul> <li>After installation open <code>Visual Studio</code>2022` from the menu.</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#visual-studio-community-edition-install-compile-run-debug-3","title":"Visual Studio Community Edition (Install / Compile / Run / Debug) (3)","text":"<ul> <li>The application will start...</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#visual-studio-community-edition-install-compile-run-debug-4","title":"Visual Studio Community Edition (Install / Compile / Run / Debug) (4)","text":"<ul> <li>From Opening Window Select <code>Create a new project</code></li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#visual-studio-community-edition-install-compile-run-debug-5","title":"Visual Studio Community Edition (Install / Compile / Run / Debug) (5)","text":"<ul> <li> <p>There will be several options, you can review them.</p> </li> <li> <p>Select <code>Windows</code>, <code>C++</code>, <code>Console Application</code> from Combobox.</p> </li> <li> <p>Select <code>Console Application</code></p> </li> </ul> <p></p>"},{"location":"week-2-setup/ce103-week-2-setup/#visual-studio-community-edition-install-compile-run-debug-6","title":"Visual Studio Community Edition (Install / Compile / Run / Debug) (6)","text":"<ul> <li>Give a solution and project name.</li> <li>Select save location</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#visual-studio-community-edition-install-compile-run-debug-7","title":"Visual Studio Community Edition (Install / Compile / Run / Debug) (7)","text":"<ul> <li>You will have C++ basic Hello World application.</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#visual-studio-community-edition-install-compile-run-debug-8","title":"Visual Studio Community Edition (Install / Compile / Run / Debug) (8)","text":"<ul> <li>You will have C++ basic Hello World application.</li> </ul> <pre><code>// ConsoleApplication1.cpp : This file contains the 'main' function. Program execution begins and ends there.\n//\n#include &lt;iostream&gt;\nint main()\n{\nstd::cout &lt;&lt; \"Hello World!\\n\";\n}\n// Run program: Ctrl + F5 or Debug &gt; Start Without Debugging menu\n// Debug program: F5 or Debug &gt; Start Debugging menu\n// Tips for Getting Started:\n//   1. Use the Solution Explorer window to add/manage files\n//   2. Use the Team Explorer window to connect to source control\n//   3. Use the Output window to see build output and other messages\n//   4. Use the Error List window to view errors\n//   5. Go to Project &gt; Add New Item to create new code files, or Project &gt; Add Existing Item to add existing code files to the project\n//   6. In the future, to open this project again, go to File &gt; Open &gt; Project and select the .sln file\n</code></pre>"},{"location":"week-2-setup/ce103-week-2-setup/#visual-studio-community-edition-install-compile-run-debug-9","title":"Visual Studio Community Edition (Install / Compile / Run / Debug) (9)","text":"<ul> <li>We need to rename the file extension to <code>c</code> from <code>cpp</code></li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#visual-studio-community-edition-install-compile-run-debug-10","title":"Visual Studio Community Edition (Install / Compile / Run / Debug) (10)","text":"<ul> <li>If you compile the source C compiler will be used.</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#visual-studio-community-edition-install-compile-run-debug-11","title":"Visual Studio Community Edition (Install / Compile / Run / Debug) (11)","text":"<ul> <li>We need to update our source for <code>C</code> as follows</li> </ul> <pre><code>// ConsoleApplication1.c : This file contains the 'main' function. Program execution begins and ends there.\n//\n#include &lt;stdio.h&gt;\nint main(){\nprintf(\"Hello World!\\n\");\n}\n</code></pre>"},{"location":"week-2-setup/ce103-week-2-setup/#visual-studio-community-edition-install-compile-run-debug-12","title":"Visual Studio Community Edition (Install / Compile / Run / Debug) (12)","text":"<ul> <li>We need to update our source for <code>C</code> as follows</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#visual-studio-community-edition-install-compile-run-debug-13","title":"Visual Studio Community Edition (Install / Compile / Run / Debug) (13)","text":"<ul> <li>Put a breakpoint by clicking the following location. Breakpoints will be stop points for our debugging operations.</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#visual-studio-community-edition-install-compile-run-debug-14","title":"Visual Studio Community Edition (Install / Compile / Run / Debug) (14)","text":"<ul> <li>Then select Debug configuration and according to your operating system select x64 or x86 configuration and click <code>Local Windows Debugger</code></li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#visual-studio-community-edition-install-compile-run-debug-15","title":"Visual Studio Community Edition (Install / Compile / Run / Debug) (15)","text":"<ul> <li>Update your source code as follow</li> </ul> <pre><code>// ConsoleApplication1.c : This file contains the 'main' function. Program execution begins and ends there.\n//\n#include &lt;stdio.h&gt;\nint sum(int input1, int input2);\nint main(){\nint number = 5;\nprintf(\"Before Increment : %d\\n\",number);\nnumber = sum(number, 5);\nprintf(\"After Increment : %d\\n\", number);\n}\nint sum(int input1, int input2){\nreturn input1 + input2;\n}\n</code></pre>"},{"location":"week-2-setup/ce103-week-2-setup/#visual-studio-community-edition-install-compile-run-debug-16","title":"Visual Studio Community Edition (Install / Compile / Run / Debug) (16)","text":"<ul> <li>Put the following breakpoints and run the debugger. On number, the variable pins the variable to see its value in real-time.</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#visual-studio-community-edition-install-compile-run-debug-17","title":"Visual Studio Community Edition (Install / Compile / Run / Debug) (17)","text":"<ul> <li>Open Debug-&gt;Windows-&gt;Memory-&gt;Memory1 to see value in memory</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#visual-studio-community-edition-install-compile-run-debug-18","title":"Visual Studio Community Edition (Install / Compile / Run / Debug) (18)","text":"<ul> <li>In the memory window copy variable name (number) with address operator (&amp;) and then (&amp;number) press enter.</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#visual-studio-community-edition-install-compile-run-debug-19","title":"Visual Studio Community Edition (Install / Compile / Run / Debug) (19)","text":"<ul> <li>You can see its value in memory with hexadecimal form (<code>05 00 00 00</code>)</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#visual-studio-community-edition-install-compile-run-debug-20","title":"Visual Studio Community Edition (Install / Compile / Run / Debug) (20)","text":"<ul> <li>If you change value with pinned control your memory value and your current value will be updated. 20 in hexadecimal 0x14 (integer is 4 bytes length for this reason memory shows <code>14 00 00 00</code>)</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#visual-studio-community-edition-install-compile-run-debug-21","title":"Visual Studio Community Edition (Install / Compile / Run / Debug) (21)","text":"<ul> <li>If you close some windows such as solution explorer, and properties windows you can open them from the View menu.</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#visual-studio-community-edition-install-compile-run-debug-22","title":"Visual Studio Community Edition (Install / Compile / Run / Debug) (22)","text":"<ul> <li>Solution and Projects have several configurations for each setup such as Release - x86, Release-x64, Debug- x86, and Debug-x64 you need to configure all of them for your requirements. You can access configurations by right-clicking to project and then selecting properties.</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#visual-studio-community-edition-install-compile-run-debug-23","title":"Visual Studio Community Edition (Install / Compile / Run / Debug) (23)","text":"<ul> <li>Project properties has several settings</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#notepad-install-compile-1","title":"Notepad++ (Install / Compile ) (1)","text":"<ul> <li>Please download Notepad++ from the following link</li> <li>Downloads | Notepad++</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#notepad-install-compile-2","title":"Notepad++ (Install / Compile ) (2)","text":"<p>Download and install MinGW or LLVM compiler (if you downloded then skip this step)</p> <p>MinGW installer (gcc / g++)</p> <ul> <li>A complete runtime environment for gcc</li> <li>https://sourceforge.net/projects/mingw-w64/</li> <li>https://sourceforge.net/projects/mingw-w64/files/latest/download</li> <li>w64devkit is a portable C and C++ development kit for x64 (and x86) Windows.</li> <li>https://www.mingw-w64.org/downloads/#w64devkit</li> <li>Also, see the following notes</li> <li>https://www.hanshq.net/building-gcc.html</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#notepad-install-compile-3","title":"Notepad++ (Install / Compile ) (3)","text":"<p>LLVM installer (clang)</p> <ul> <li>Download</li> <li>https://releases.llvm.org/</li> <li>Also, use the following notes</li> <li>https://llvm.org/devmtg/2014-04/PDFs/Talks/clang-cl.pdf</li> <li>https://www.hanshq.net/clang-plugin-example.html</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#notepad-install-compile-4","title":"Notepad++ (Install / Compile ) (4)","text":"<p>Open a console with \"<code>cmd</code>\" and test the following commands if commands are not recognized then set the system environment variable to add <code>gcc</code> and <code>g++</code> executable paths to the path variable (add to both system and user path variable)</p> <pre><code>gcc --version\n\ng++ --version\n</code></pre> <pre><code>C:\\Users\\ugur.coruh&gt;gcc --version\ngcc (x86_64-win32-seh-rev0, Built by MinGW-W64 project) 8.1.0\nCopyright (C) 2018 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n</code></pre>"},{"location":"week-2-setup/ce103-week-2-setup/#notepad-install-compile-5","title":"Notepad++ (Install / Compile ) (5)","text":"<ul> <li>Open system environments to update path variable for gcc/g++ and clang</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#notepad-install-compile-6","title":"Notepad++ (Install / Compile ) (6)","text":"<ul> <li>Open \"Environment Variables\"</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#notepad-install-compile-7","title":"Notepad++ (Install / Compile ) (7)","text":"<ul> <li>Select path variable from user section.</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#notepad-install-compile-8","title":"Notepad++ (Install / Compile ) (8)","text":"<ul> <li>Select path variable from system section.   </li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#notepad-install-compile-9","title":"Notepad++ (Install / Compile ) (9)","text":"<ul> <li>Update variables add <code>MinGW</code> and <code>LLVM</code> to path <code>gcc.exe</code> <code>g++.exe</code> <code>clang.exe</code> will be in bin folders. Then we can run this commands from command line.</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#notepad-install-compile-9_1","title":"Notepad++ (Install / Compile ) (9)","text":"<ul> <li>Update variables add <code>MinGW</code> and <code>LLVM</code> to path <code>gcc.exe</code> <code>g++.exe</code> <code>clang.exe</code> will be in bin folders. Then we can run this commands from command line.</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#notepad-install-compile-10","title":"Notepad++ (Install / Compile ) (10)","text":"<ul> <li>for <code>gcc.exe</code>, <code>g++.exe</code> and <code>gdb.exe</code></li> </ul> <pre><code>C:\\Program Files\\mingw-w64\\x86_64-8.1.0-win32-seh-rt_v6-rev0\\mingw64\\bin\n</code></pre>"},{"location":"week-2-setup/ce103-week-2-setup/#notepad-install-compile-11","title":"Notepad++ (Install / Compile ) (11)","text":"<ul> <li>for <code>clang.exe</code> , <code>lldb.exe</code> we will use the following path</li> </ul> <pre><code>C:\\Program Files\\LLVM\\bin\n</code></pre>"},{"location":"week-2-setup/ce103-week-2-setup/#notepad-install-compile-12","title":"Notepad++ (Install / Compile ) (12)","text":"<ul> <li> <p>This folder paths changes according to your setup</p> </li> <li> <p>Open <code>NppExec</code> extension (install from extension manager if not exist)</p> </li> </ul> <p></p>"},{"location":"week-2-setup/ce103-week-2-setup/#notepad-install-compile-13","title":"Notepad++ (Install / Compile ) (13)","text":"<ul> <li>Write the following commands in the box</li> </ul> <pre><code>NPP_SAVE // save current file\ncd $(CURRENT_DIRECTORY) // go to directory of the current file\ngcc  -Wall -Wextra -Wpedantic -std=c++11 -o \"$(NAME_PART)\" \"$(FILE_NAME)\"\n</code></pre>"},{"location":"week-2-setup/ce103-week-2-setup/#notepad-install-compile-14","title":"Notepad++ (Install / Compile ) (14)","text":"<ul> <li> <p>Save the script as <code>gcc-build</code> and for more information check the following link</p> </li> <li> <p>You can modify or add multiple scripts for another task.</p> </li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#msys2","title":"MSYS2","text":"<ul> <li>Software Distribution and Building Platform for Windows</li> </ul> <p>https://www.msys2.org/</p>"},{"location":"week-2-setup/ce103-week-2-setup/#vivim-cc-for-windows-1","title":"Vi/Vim (C/C++) for Windows (1)","text":"<ul> <li>Vim is a command-line editor for programming</li> <li>Use the following links to download Vim for Windows</li> <li>https://github.com/vim/vim-win32-installer/releases</li> <li>download : vim online</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#vivim-cc-for-windows-2","title":"Vi/Vim (C/C++) for Windows (2)","text":"<ul> <li>Run setup to install the application on your computer.</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#vivim-cc-for-windows-3","title":"Vi/Vim (C/C++) for Windows (3)","text":""},{"location":"week-2-setup/ce103-week-2-setup/#vivim-cc-for-windows-4","title":"Vi/Vim (C/C++) for Windows (4)","text":"<ul> <li>Installation steps.</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#vivim-cc-for-windows-5","title":"Vi/Vim (C/C++) for Windows (5)","text":"<ul> <li>Installation steps.</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#vivim-cc-for-windows-6","title":"Vi/Vim (C/C++) for Windows (6)","text":"<ul> <li>Installation steps.</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#vivim-cc-for-windows-7","title":"Vi/Vim (C/C++) for Windows (7)","text":"<ul> <li>Installation steps.</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#vivim-cc-for-windows-8","title":"Vi/Vim (C/C++) for Windows (8)","text":"<ul> <li>Installation steps.</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#vivim-cc-for-windows-9","title":"Vi/Vim (C/C++) for Windows (9)","text":"<ul> <li>Installation steps.</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#vivim-cc-for-windows-10","title":"Vi/Vim (C/C++) for Windows (10)","text":"<ul> <li>Generated shortcuts on your desktop</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#vivim-cc-for-windows-11","title":"Vi/Vim (C/C++) for Windows (11)","text":"<ul> <li>Run <code>vim hello.c</code> on your command-line to open a c file with vim editor.</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#vivim-cc-for-windows-12","title":"Vi/Vim (C/C++) for Windows (12)","text":"<ul> <li>You will have the following editor.</li> <li>Use INSERT to change edit options.</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#vivim-cc-for-windows-13","title":"Vi/Vim (C/C++) for Windows (13)","text":"<ul> <li>Sample source code</li> </ul> <pre><code>#include &lt;stdio.h&gt;\nint main()\n{\nchar name[20];\nprintf(\"Enter Name:\");\nscanf(\"%s\",name);\nprintf(\"Your name is %s\",name);\nreturn 0;\n}\n</code></pre>"},{"location":"week-2-setup/ce103-week-2-setup/#vivim-cc-for-windows-14","title":"Vi/Vim (C/C++) for Windows (14)","text":"<ul> <li>Write source code</li> <li>Press\u00a0the <code>Esc</code> button to enter command mode</li> <li>Then type <code>:wq</code>. It will save the file and exit from Vim</li> <li>w: write</li> <li>q: quit</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#vivim-cc-for-windows-15","title":"Vi/Vim (C/C++) for Windows (15)","text":"<ul> <li>compile source code with <code>gcc</code></li> <li>link the objects and</li> <li>run executable</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#vivim-cc-for-windows-17","title":"Vi/Vim (C/C++) for Windows (17)","text":"<ul> <li>In the folder, you can find your executable. <code>hello.exe</code></li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#vivim-cc-for-windows-16","title":"Vi/Vim (C/C++) for Windows (16)","text":"<ul> <li>compile, link and execute flow will be as follow;</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#eclipse-cc-compile-only-debugging-has-problem-1","title":"Eclipse (C/C++) - Compile Only / Debugging Has Problem (1)","text":"<ul> <li>Download and install Eclipse IDE from the following link</li> <li>Eclipse IDE for C/C++ Developers | Eclipse Packages</li> <li>Run Installer</li> <li>Select <code>Eclipse IDE for C/C++ Developers</code></li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#eclipse-cc-compile-only-debugging-has-problem-2","title":"Eclipse (C/C++) - Compile Only / Debugging Has Problem (2)","text":"<ul> <li>Select Java Version and Installation Path</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#eclipse-cc-compile-only-debugging-has-problem-3","title":"Eclipse (C/C++) - Compile Only / Debugging Has Problem (3)","text":"<ul> <li>After installation you can LAUNCH eclipse IDE</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#eclipse-cc-compile-only-debugging-has-problem-4","title":"Eclipse (C/C++) - Compile Only / Debugging Has Problem (4)","text":""},{"location":"week-2-setup/ce103-week-2-setup/#eclipse-cc-compile-only-debugging-has-problem-5","title":"Eclipse (C/C++) - Compile Only / Debugging Has Problem (5)","text":"<ul> <li>Select a workspace that your project will be saved</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#eclipse-cc-compile-only-debugging-has-problem-6","title":"Eclipse (C/C++) - Compile Only / Debugging Has Problem (6)","text":"<ul> <li>You can find your installation under your user folder</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#eclipse-cc-compile-only-debugging-has-problem-7","title":"Eclipse (C/C++) - Compile Only / Debugging Has Problem (7)","text":"<ul> <li>You can create shortcut to desktop for your working eclipse version.</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#eclipse-cc-compile-only-debugging-has-problem-8","title":"Eclipse (C/C++) - Compile Only / Debugging Has Problem (8)","text":"<ul> <li>File -&gt; New -&gt; Project</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#eclipse-cc-compile-only-debugging-has-problem-9","title":"Eclipse (C/C++) - Compile Only / Debugging Has Problem (9)","text":"<ul> <li>Select C/C++ Project</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#eclipse-cc-compile-only-debugging-has-problem-10","title":"Eclipse (C/C++) - Compile Only / Debugging Has Problem (10)","text":"<ul> <li>Select C Managed Build, Eclipse CDT will do job for us.</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#eclipse-cc-compile-only-debugging-has-problem-11","title":"Eclipse (C/C++) - Compile Only / Debugging Has Problem (11)","text":"<ul> <li>Give project name and select a basic template executable with MinGW GCC.</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#eclipse-cc-compile-only-debugging-has-problem-12","title":"Eclipse (C/C++) - Compile Only / Debugging Has Problem (12)","text":"<ul> <li>Configura Basic Settings</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#eclipse-cc-compile-only-debugging-has-problem-13","title":"Eclipse (C/C++) - Compile Only / Debugging Has Problem (13)","text":"<ul> <li>There are default Debug and Release configurations you can add your customized configurations from Advanced Settings.</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#eclipse-cc-compile-only-debugging-has-problem-14","title":"Eclipse (C/C++) - Compile Only / Debugging Has Problem (14)","text":"<ul> <li> <p>Project settings will be C Select Debug/Release configuration and then Build Application Project-&gt;Build All (Ctrl+B)</p> </li> <li> <p>HelloWorldC.exe will be generated</p> </li> </ul> <pre><code>gcc -O0 -g3 -Wall -c -fmessage-length=0 -o \"src\\\\HelloWorldC.o\" \"..\\\\src\\\\HelloWorldC.c\"\ngcc -o HelloWorldC.exe \"src\\\\HelloWorldC.o\"\n</code></pre> <p></p>"},{"location":"week-2-setup/ce103-week-2-setup/#eclipse-cc-compile-only-debugging-has-problem-15","title":"Eclipse (C/C++) - Compile Only / Debugging Has Problem (15)","text":"<ul> <li> <p>Before build if you want to debug application select debug configuration, put your breakpoints and then Build application again.</p> </li> <li> <p>Right click the generated executable Debug As -&gt; Local C/C++ Application</p> </li> </ul> <p></p>"},{"location":"week-2-setup/ce103-week-2-setup/#eclipse-cc-compile-only-debugging-has-problem-16","title":"Eclipse (C/C++) - Compile Only / Debugging Has Problem (16)","text":"<ul> <li>Debugger will start and stop at breakpoint as follow.</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#eclipse-cc-compile-only-debugging-has-problem-16_1","title":"Eclipse (C/C++) - Compile Only / Debugging Has Problem (16)","text":"<ul> <li>Check debug control shortcuts and use them</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#eclipse-cc-compile-only-debugging-has-problem-17","title":"Eclipse (C/C++) - Compile Only / Debugging Has Problem (17)","text":"<ul> <li>To watch variables use Expressions and Variables</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#eclipse-cc-compile-only-debugging-has-problem-18","title":"Eclipse (C/C++) - Compile Only / Debugging Has Problem (18)","text":""},{"location":"week-2-setup/ce103-week-2-setup/#eclipse-cc-compile-only-debugging-has-problem-19","title":"Eclipse (C/C++) - Compile Only / Debugging Has Problem (19)","text":"<ul> <li> <p>for more visit eclipse webpage</p> </li> <li> <p>Effective Techniques for Debugging C &amp; C++ | The Eclipse Foundation</p> </li> <li> <p>Help - Eclipse IDE</p> </li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#eclipse-cc-compile-only-debugging-has-problem-20","title":"Eclipse (C/C++) - Compile Only / Debugging Has Problem (20)","text":"<ul> <li>Generate CMAKE project from new Project and Select CMake Project Template</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#eclipse-cc-compile-only-debugging-has-problem-21","title":"Eclipse (C/C++) - Compile Only / Debugging Has Problem (21)","text":"<ul> <li>Give project name</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#eclipse-cc-compile-only-debugging-has-problem-22","title":"Eclipse (C/C++) - Compile Only / Debugging Has Problem (22)","text":"<ul> <li>This will generate default C++ Hello World project</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#eclipse-cc-compile-only-debugging-has-problem-23","title":"Eclipse (C/C++) - Compile Only / Debugging Has Problem (23)","text":"<ul> <li>Build Project</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#eclipse-cc-compile-only-debugging-has-problem-24","title":"Eclipse (C/C++) - Compile Only / Debugging Has Problem (24)","text":"<ul> <li> <p>It will give following errors, for missing configurations. This errors are generated by CMAKE</p> </li> <li> <p>Then clean and rebuild again.</p> </li> </ul> <pre><code>Errors occurred during the build.\nErrors running builder 'CDT Core Builder' on project 'HelloWorldCmakeC'.\nResource '/HelloWorldCmakeC/build/cmake.debug.win32.x86_64/compile_commands.json' does not exist.\nResource '/HelloWorldCmakeC/build/cmake.debug.win32.x86_64/compile_commands.json' does not exist.\nResource '/HelloWorldCmakeC/build/cmake.debug.win32.x86_64/compile_commands.json' does not exist.\nResource '/HelloWorldCmakeC/build/cmake.debug.win32.x86_64/compile_commands.json' does not exist.\n</code></pre>"},{"location":"week-2-setup/ce103-week-2-setup/#eclipse-cc-compile-only-debugging-has-problem-25","title":"Eclipse (C/C++) - Compile Only / Debugging Has Problem (25)","text":""},{"location":"week-2-setup/ce103-week-2-setup/#eclipse-cc-compile-only-debugging-has-problem-26","title":"Eclipse (C/C++) - Compile Only / Debugging Has Problem (26)","text":"<ul> <li>After this operation first Clean project from Project menu and then Build All again</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#eclipse-cc-compile-only-debugging-has-problem-27","title":"Eclipse (C/C++) - Compile Only / Debugging Has Problem (27)","text":"<ul> <li> <p>Eclipse with CMake project on windows</p> </li> <li> <p>JV - Science and stuff.</p> </li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#eclipse-cc-compile-only-debugging-has-problem-28","title":"Eclipse (C/C++) - Compile Only / Debugging Has Problem (28)","text":""},{"location":"week-2-setup/ce103-week-2-setup/#eclipse-cc-compile-only-debugging-has-problem-29","title":"Eclipse (C/C++) - Compile Only / Debugging Has Problem (29)","text":""},{"location":"week-2-setup/ce103-week-2-setup/#netbeans-cc-manuel-buildcleanrun-command-setting-not-good-option-for-cc-development-1","title":"Netbeans (C/C++) - Manuel Build/Clean/Run Command Setting Not Good Option for C/C++ Development (1)","text":"<ul> <li> <p>https://netbeans.apache.org/</p> </li> <li> <p>C and C++ Tutorials</p> </li> </ul> <p></p>"},{"location":"week-2-setup/ce103-week-2-setup/#netbeans-cc-manuel-buildcleanrun-command-setting-not-good-option-for-cc-development-2","title":"Netbeans (C/C++) - Manuel Build/Clean/Run Command Setting Not Good Option for C/C++ Development (2)","text":""},{"location":"week-2-setup/ce103-week-2-setup/#netbeans-cc-manuel-buildcleanrun-command-setting-not-good-option-for-cc-development-3","title":"Netbeans (C/C++) - Manuel Build/Clean/Run Command Setting Not Good Option for C/C++ Development (3)","text":""},{"location":"week-2-setup/ce103-week-2-setup/#netbeans-cc-manuel-buildcleanrun-command-setting-not-good-option-for-cc-development-4","title":"Netbeans (C/C++) - Manuel Build/Clean/Run Command Setting Not Good Option for C/C++ Development (4)","text":""},{"location":"week-2-setup/ce103-week-2-setup/#netbeans-cc-manuel-buildcleanrun-command-setting-not-good-option-for-cc-development-5","title":"Netbeans (C/C++) - Manuel Build/Clean/Run Command Setting Not Good Option for C/C++ Development (5)","text":""},{"location":"week-2-setup/ce103-week-2-setup/#netbeans-cc-manuel-buildcleanrun-command-setting-not-good-option-for-cc-development-6","title":"Netbeans (C/C++) - Manuel Build/Clean/Run Command Setting Not Good Option for C/C++ Development (6)","text":""},{"location":"week-2-setup/ce103-week-2-setup/#netbeans-cc-manuel-buildcleanrun-command-setting-not-good-option-for-cc-development-7","title":"Netbeans (C/C++) - Manuel Build/Clean/Run Command Setting Not Good Option for C/C++ Development (7)","text":""},{"location":"week-2-setup/ce103-week-2-setup/#netbeans-cc-manuel-buildcleanrun-command-setting-not-good-option-for-cc-development-8","title":"Netbeans (C/C++) - Manuel Build/Clean/Run Command Setting Not Good Option for C/C++ Development (8)","text":""},{"location":"week-2-setup/ce103-week-2-setup/#turbo-cc-1","title":"Turbo C/C++ (1)","text":"<p>Download Turbo.C.3.2.zip</p> <ul> <li> <p>Download Turbo C++ for Windows 7, 8, 8.1, 10 and Windows 11 (32-64 bit) with full/window screen mode and many more extra features</p> </li> <li> <p>Turbo C++ Shortcuts - C Programming Language Tutorials</p> </li> </ul> <p></p>"},{"location":"week-2-setup/ce103-week-2-setup/#turbo-cc-2","title":"Turbo C/C++ (2)","text":""},{"location":"week-2-setup/ce103-week-2-setup/#cmake-cc-1","title":"Cmake (C++/C) (1)","text":"<p>CMake (http://www.cmake.org/) is a program which generates the Makefiles used by Make.</p>"},{"location":"week-2-setup/ce103-week-2-setup/#cmake-cc-2","title":"Cmake (C++/C) (2)","text":"<p>Why use CMake ?</p> <ul> <li>Eases Make use</li> <li>but the same way of thinking</li> <li>generate the Makefile</li> <li>Separate the compilation from the sources</li> <li>Multi-platfoms</li> <li>Very flexible</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#cmake-cc-3","title":"Cmake (C++/C) (3)","text":"<ul> <li>Check if the libraries/programs are available on your system</li> <li>File generator (configure_file)</li> <li>Calling programs or scripts (doxygen)</li> <li>One of the new standards</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#cmake-cc-4-download-and-install","title":"Cmake (C++/C) (4) (Download and Install)","text":"<p>use the following link for download</p> <p>Download | CMake</p>"},{"location":"week-2-setup/ce103-week-2-setup/#cmake-cc-5-wsl-and-linux-environment","title":"Cmake (C++/C) (5) (WSL and Linux Environment)","text":"<p>Hello world with CMake</p>"},{"location":"week-2-setup/ce103-week-2-setup/#cmake-cc-6-windows-environment","title":"Cmake (C++/C) (6) (Windows Environment)","text":"<p>main.c</p> <pre><code>#include &lt;stdio.h&gt;\nint main()\n{\nchar name[20];\nprintf(\"Enter name: \");\nscanf(\"%s\", name);\nprintf(\"Your name is %s.\", name);\nreturn 0;\n}\n</code></pre> <p>CMakeLists.txt</p> <pre><code>cmake_minimum_required(VERSION 3.7.2)\nproject(scanf-sample)\nadd_executable(scanf-sample main.c)\n</code></pre>"},{"location":"week-2-setup/ce103-week-2-setup/#cmake-cc-7-windows-environment","title":"Cmake (C++/C) (7) (Windows Environment)","text":"<p>put main.c and CMakeLists.txt file in sample-scanf folder and from command line</p> <p></p> <p>run the following cmake command with dot (.) to create solution file for c project</p> <pre><code>C:\\Users\\ugur.coruh\\Desktop\\sample-scanf&gt;cmake .\n</code></pre>"},{"location":"week-2-setup/ce103-week-2-setup/#cmake-cc-8-windows-environment","title":"Cmake (C++/C) (8) (Windows Environment)","text":"<p>I have Visual Studio 2022 Community Edition Installed on My Computer, for these reason build tools are selected for visual studio environment and the following outputs are generated</p> <pre><code>C:\\Users\\ugur.coruh\\Desktop\\sample-scanf&gt;cmake .\n-- Building for: Visual Studio 17 2022\n-- Selecting Windows SDK version 10.0.22000.0 to target Windows 10.0.19043.\n-- The C compiler identification is MSVC 19.30.30704.0\n-- The CXX compiler identification is MSVC 19.30.30704.0\n-- Detecting C compiler ABI info\n-- Detecting C compiler ABI info - done\n-- Check for working C compiler: C:/Program Files/Microsoft Visual Studio/2022/Community/VC/Tools/MSVC/14.30.30704/bin/Hostx64/x64/cl.exe - skipped\n-- Detecting C compile features\n-- Detecting C compile features - done\n-- Detecting CXX compiler ABI info\n-- Detecting CXX compiler ABI info - done\n-- Check for working CXX compiler: C:/Program Files/Microsoft Visual Studio/2022/Community/VC/Tools/MSVC/14.30.30704/bin/Hostx64/x64/cl.exe - skipped\n-- Detecting CXX compile features\n-- Detecting CXX compile features - done\n-- Configuring done\n-- Generating done\n-- Build files have been written to: C:/Users/ugur.coruh/Desktop/sample-scanf\n\nC:\\Users\\ugur.coruh\\Desktop\\sample-scanf&gt;\n</code></pre>"},{"location":"week-2-setup/ce103-week-2-setup/#cmake-cc-9-windows-environment","title":"Cmake (C++/C) (9) (Windows Environment)","text":"<p>also following files are generated</p> <p></p>"},{"location":"week-2-setup/ce103-week-2-setup/#cmake-cc-10-windows-environment","title":"Cmake (C++/C) (10) (Windows Environment)","text":"<p>if we open scanf-sample.sln file we will have automated generated project files</p> <p></p>"},{"location":"week-2-setup/ce103-week-2-setup/#cmake-cc-11-windows-environment","title":"Cmake (C++/C) (11) (Windows Environment)","text":"<p>you can make scanf-sample with startup project with right click and then run on visual studio.</p> <p>if you want to configure for another build tool you can use Cmake-GUI installed with setup on your computer</p> <p></p>"},{"location":"week-2-setup/ce103-week-2-setup/#cmake-cc-12-windows-environment","title":"Cmake (C++/C) (12) (Windows Environment)","text":"<p>Open GUI and Select File-&gt; Delete Cache</p> <p></p>"},{"location":"week-2-setup/ce103-week-2-setup/#cmake-cc-13-windows-environment","title":"Cmake (C++/C) (13) (Windows Environment)","text":"<p>then you can click \"Configure\" to select build tool</p> <p></p>"},{"location":"week-2-setup/ce103-week-2-setup/#cmake-cc-14-windows-environment","title":"Cmake (C++/C) (14) (Windows Environment)","text":""},{"location":"week-2-setup/ce103-week-2-setup/#cmake-cc-15-windows-environment","title":"Cmake (C++/C) (15) (Windows Environment)","text":"<p>if you click \"Configure\" twice it will generate the visual studio solution in build folder</p> <p>for more detailed examples that include also docker and travis-ci sample you can check the following repo</p> <p>GitHub - ttroy50/cmake-examples: Useful CMake Examples</p>"},{"location":"week-2-setup/ce103-week-2-setup/#make-1","title":"Make (1)","text":"<p>Sample</p> <p>hello.c</p> <pre><code>#include &lt;stdio.h&gt;\nint main(void)\n{\nprintf(\"hello, world\\n\");\n}\n</code></pre>"},{"location":"week-2-setup/ce103-week-2-setup/#make-2","title":"Make (2)","text":"<p>Makefile</p> <pre><code># This is the default target, which will be built when\n# you invoke make\n.PHONY: all\nall: hello\n# This rule tells make how to build hello from hello.cpp\nhello: hello.c\ng++ -o hello hello.c\n\n# This rule tells make to copy hello to the binaries subdirectory,\n# creating it if necessary\n.PHONY: install\ninstall:\nmkdir -p binaries\n    cp -p hello binaries\n\n# This rule tells make to delete hello and hello.o\n.PHONY: clean\nclean:\nrm -f hello\n</code></pre>"},{"location":"week-2-setup/ce103-week-2-setup/#make-3","title":"Make (3)","text":"<p>compile.bat</p> <pre><code>make all .\n</code></pre> <p>will create hello.exe</p> <p>check hello-make sample</p>"},{"location":"week-2-setup/ce103-week-2-setup/#make-4","title":"Make (4)","text":""},{"location":"week-2-setup/ce103-week-2-setup/#java-environment-and-development","title":"JAVA Environment and Development","text":""},{"location":"week-2-setup/ce103-week-2-setup/#jdk-and-jre-setup-1","title":"JDK and JRE Setup (1)","text":""},{"location":"week-2-setup/ce103-week-2-setup/#jdk-and-jre-setup-2","title":"JDK and JRE Setup (2)","text":"<ul> <li> <p>JDK\u00a0(Java Development Kit) is a Kit that provides the environment to\u00a0develop and execute(run)\u00a0the Java program. JDK is a kit(or package) that includes two things</p> </li> <li> <p>Development Tools(to provide an environment to develop your java programs)</p> </li> <li> <p>JRE (to execute your java program).</p> </li> <li> <p>JRE\u00a0(Java Runtime Environment) is an installation package that provides an environment to\u00a0only run(not develop)\u00a0the java program(or application)onto your machine. JRE is only used by those who only want to run Java programs that are end-users of your system.</p> </li> <li> <p>JVM\u00a0(Java Virtual Machine)\u00a0is a very important part of both JDK and JRE because it is contained or inbuilt in both. Whatever Java program you run using JRE or JDK goes into JVM and JVM is responsible for executing the java program line by line, hence it is also known as an\u00a0**i*****nterpreter***.</p> </li> </ul> <ul> <li>Difference between JDK, JRE, JVM - TutorialAndExample</li> </ul> <p></p>"},{"location":"week-2-setup/ce103-week-2-setup/#system-environments-and-paths-for-java-1","title":"System Environments and Paths for Java (1)","text":""},{"location":"week-2-setup/ce103-week-2-setup/#system-environments-and-paths-for-java-2","title":"System Environments and Paths for Java (2)","text":"<ul> <li>Select path variable (JDK should be set there)</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#system-environments-and-paths-for-java-3","title":"System Environments and Paths for Java (3)","text":"<ul> <li>JAVA_HOME also should be set</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#netbeans-java-1","title":"Netbeans (Java) (1)","text":"<ul> <li>Open New Project -&gt; Java Project</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#netbeans-java-2","title":"Netbeans (Java) (2)","text":""},{"location":"week-2-setup/ce103-week-2-setup/#netbeans-java-3","title":"Netbeans (Java) (3)","text":""},{"location":"week-2-setup/ce103-week-2-setup/#netbeans-java-4","title":"Netbeans (Java) (4)","text":""},{"location":"week-2-setup/ce103-week-2-setup/#netbeans-java-5","title":"Netbeans (Java) (5)","text":""},{"location":"week-2-setup/ce103-week-2-setup/#netbeans-java-6","title":"Netbeans (Java) (6)","text":"<p>Update code and run</p> <p></p> <pre><code>/*\n * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license\n * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template\n */\npackage com.ucoruh.mavenproject1;\n/**\n *\n * @author ugur.coruh\n */\npublic class NewClass {\nstatic                  //static block\n{\nSystem.out.println(\"Static block\");\n}\npublic static void main(String args[])  //static method\n{\nSystem.out.println(\"Static method\");\n}\n}\n</code></pre>"},{"location":"week-2-setup/ce103-week-2-setup/#netbeans-java-7","title":"Netbeans (Java) (7)","text":""},{"location":"week-2-setup/ce103-week-2-setup/#netbeans-java-8","title":"Netbeans (Java) (8)","text":""},{"location":"week-2-setup/ce103-week-2-setup/#netbeans-java-9","title":"Netbeans (Java) (9)","text":""},{"location":"week-2-setup/ce103-week-2-setup/#netbeans-java-10","title":"Netbeans (Java) (10)","text":""},{"location":"week-2-setup/ce103-week-2-setup/#eclipse-java-1","title":"Eclipse (Java) (1)","text":"<ul> <li>Select File -&gt; New Project</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#eclipse-java-2","title":"Eclipse (Java) (2)","text":""},{"location":"week-2-setup/ce103-week-2-setup/#eclipse-java-3","title":"Eclipse (Java) (3)","text":""},{"location":"week-2-setup/ce103-week-2-setup/#eclipse-java-4","title":"Eclipse (Java) (4)","text":""},{"location":"week-2-setup/ce103-week-2-setup/#eclipse-java-5","title":"Eclipse (Java) (5)","text":""},{"location":"week-2-setup/ce103-week-2-setup/#eclipse-java-6","title":"Eclipse (Java) (6)","text":"<ul> <li>Update source</li> </ul> <pre><code>package ucoruh;\npublic class HelloClass {\nstatic {\nSystem.out.println(\"Static Block\");\n}\npublic static void main(String[] args) {\n// TODO Auto-generated method stub\nSystem.out.println(\"Static Method\");\n}\n}\n</code></pre>"},{"location":"week-2-setup/ce103-week-2-setup/#eclipse-java-7","title":"Eclipse (Java) (7)","text":""},{"location":"week-2-setup/ce103-week-2-setup/#eclipse-java-8","title":"Eclipse (Java) (8)","text":""},{"location":"week-2-setup/ce103-week-2-setup/#intellij-idea-jet-brains-java","title":"Intellij Idea (Jet Brains) (Java)","text":"<ul> <li> <p>Download IntelliJ IDEA: The Capable &amp; Ergonomic Java IDE by JetBrains</p> </li> <li> <p>Select Community Version or Student Ultimate Version</p> </li> </ul> <p></p>"},{"location":"week-2-setup/ce103-week-2-setup/#vscode-java","title":"VSCode (Java)","text":"<ul> <li>Java Extension Run&amp;Debug Java Files</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#notepad-java","title":"Notepad++ (Java)","text":"<ul> <li>How to Compile and Run Java Programs Using Notepad++</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#cmake-java","title":"Cmake (Java)","text":"<ul> <li> <p>UseJava \u2014 CMake 3.24.2 Documentation</p> </li> <li> <p>GitHub - ptitpoulpe/cmake-swig-java-example: An example of combining cmake, swig and java</p> </li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#c-environment-and-development","title":"C# Environment and Development","text":""},{"location":"week-2-setup/ce103-week-2-setup/#visual-studio-community-edition-c","title":"Visual Studio Community Edition (C#)","text":"<p>//TODO//</p> <p></p>"},{"location":"week-2-setup/ce103-week-2-setup/#notepad-c","title":"Notepad++ (C#)","text":"<ul> <li> <p>This use command-line utilities for csharp, nppexec should be configured for this utility.</p> </li> <li> <p>Compiling/Executing a C# Source File in Command Prompt - Stack Overflow</p> </li> </ul> <pre><code>c:\\windows\\Microsoft.NET\\Framework\\v3.5\\\n</code></pre> <pre><code>c:\\windows\\Microsoft.NET\\Framework\\v3.5\\bin\\csc.exe\n            /t:exe /out:MyApplication.exe MyApplication.cs  ...\n</code></pre>"},{"location":"week-2-setup/ce103-week-2-setup/#cmake-c","title":"Cmake (C#)","text":"<ul> <li>GitHub - crud89/DotNetWithCMake: Your swiss army knife for creating .NET assemblies with CMake and integrating unmanaged code.</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#common-tools-and-platforms","title":"Common Tools and Platforms","text":""},{"location":"week-2-setup/ce103-week-2-setup/#fatih-kalem","title":"Fatih Kalem","text":"<p>https://cdnvideo.eba.gov.tr/fatihkalem/fatihkalem_portable.zip</p> <p>https://cdnvideo.eba.gov.tr/fatihkalem/fatihkalem_setup.exe</p> <p></p>"},{"location":"week-2-setup/ce103-week-2-setup/#notepad-notepad-for-source-code","title":"Notepad++ (Notepad for Source Code)","text":"<p>Downloads | Notepad++</p> <p></p>"},{"location":"week-2-setup/ce103-week-2-setup/#hxd-hex-editor","title":"HxD (Hex Editor)","text":"<p>HxD - Freeware Hex Editor and Disk Editor | mh-nexus</p> <p></p>"},{"location":"week-2-setup/ce103-week-2-setup/#marktextapp-markdown-syntax-editor","title":"MarktextApp (Markdown Syntax Editor)","text":"<ul> <li>https://marktext.app/</li> <li>https://github.com/marktext/marktext/releases</li> <li>Download latest version</li> <li>https://github.com/marktext/marktext/releases/tag/v0.17.1</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#cygwin-linux-environment-for-windows","title":"Cygwin (Linux environment for Windows)","text":"<ul> <li>https://www.cygwin.com/</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#dependency-walker-32-bit-or-64-bit-windows-module-dependency-checker","title":"Dependency Walker (32-bit or 64-bit Windows module dependency checker)","text":"<ul> <li>https://www.dependencywalker.com/</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#doxygen-code-documentation","title":"Doxygen (Code Documentation)","text":"<p>Doxygen: Doxygen</p> <p></p>"},{"location":"week-2-setup/ce103-week-2-setup/#sonarlint-code-quality-and-code-security-extension","title":"Sonarlint (Code Quality and Code Security Extension)","text":"<p>https://www.sonarlint.org/</p>"},{"location":"week-2-setup/ce103-week-2-setup/#codepenio-online-code-sharing","title":"Codepen.io (online code sharing)","text":"<ul> <li> <p>https://codepen.io/</p> </li> <li> <p>CodePen is a social development environment. At its heart, it allows you to write code in the browser, and see the results of it as you build.</p> </li> <li> <p>A useful and liberating online code editor for developers of any skill, and particularly empowering for people learning to code. We focus primarily on front-end languages like HTML, CSS, JavaScript, and preprocessing syntaxes that turn into those things</p> </li> </ul> <p></p>"},{"location":"week-2-setup/ce103-week-2-setup/#codepenio-online-code-sharing_1","title":"Codepen.io (online code sharing)","text":"<ul> <li>Credit Card Sample on Codepen</li> <li>https://codepen.io/quinlo/pen/YONMEa</li> <li>Checkout trends https://codepen.io/trending</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#codeshareio-real-time-code-sharing","title":"Codeshare.io (real-time code sharing)","text":"<ul> <li> <p>https://codeshare.io/</p> </li> <li> <p>Share Code in Real-time with Developers, An online code editor for interviews, troubleshooting, teaching &amp; more\u2026</p> </li> </ul> <p></p>"},{"location":"week-2-setup/ce103-week-2-setup/#codebeautifyorg-online-data-conversion-tools","title":"Codebeautify.org (online data conversion tools)","text":"<ul> <li>Has several tools for developers (Code Formatter, JSON Beautifier, XML Viewer, Hex Converters and more...)</li> <li>https://codebeautify.org/</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#asciiflowcom-ascii-drawing-tool","title":"AsciiFlow.com (ASCII drawing tool)","text":"<ul> <li> <p>Asciflow provides ascii based drawings that you can copy directly to textfiles and source codes. Visit the following link</p> </li> <li> <p>https://asciiflow.com/</p> </li> </ul> <p></p>"},{"location":"week-2-setup/ce103-week-2-setup/#freemind-opensource-mindmap-application","title":"Freemind (opensource mindmap application)","text":"<ul> <li> <p>Freemind is open source java based desktop mindmap application. Can export files to several formats</p> </li> <li> <p>Main Page - FreeMind</p> </li> </ul> <p></p>"},{"location":"week-2-setup/ce103-week-2-setup/#mockup-designers","title":"Mockup Designers","text":"<ul> <li> <p>Mockflow</p> </li> <li> <p>Signup - MockFlow</p> </li> <li> <p>Wireflow</p> </li> <li> <p>https://wireflow.co/</p> </li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#plantuml-software-designer","title":"PlantUML (software designer)","text":"<ul> <li> <p>Text based designer for software engineers</p> </li> <li> <p>https://plantuml.com/</p> </li> <li> <p></p> </li> <li> <p>Also visit course notes that related to plantuml CE204 Object-Oriented Programming - RTEU C204 Object Oriented Programming Course Notes</p> </li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#drawio-drawing-tool","title":"Drawio (drawing tool)","text":"<ul> <li> <p>Online and Offline Drawing Tool</p> </li> <li> <p>https://app.diagrams.net/</p> </li> <li> <p>Offline Installer</p> </li> <li> <p>Releases \u00b7 jgraph/drawio-desktop \u00b7 GitHub</p> </li> </ul> <p></p>"},{"location":"week-2-setup/ce103-week-2-setup/#putty-remote-connection","title":"Putty (Remote Connection)","text":"<ul> <li>Commonly use for SSH connection</li> </ul> <ul> <li>We can run a SSH server with MobaXterm and can connect to same computer with Putty.</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#download-file-over-ssh-protocol","title":"Download file over SSH Protocol","text":"<ul> <li>How to Download and Upload Files over SSH \u2013 TecAdmin</li> </ul> <p>Here are some useful examples for downloading files from the remote system over SSH protocol.</p> <ul> <li>This will connect to example.com server with user \u201cusername\u201d and copy the\u00a0/backup/file.zip\u00a0file to local system directory\u00a0/local/dir. To use theis command replace the values as per your environment.</li> </ul> <pre><code>scp username@example.com:/backup/file.zip /local/dir\n</code></pre> <ul> <li>If the SSH is running on a non-standard port, You can specify the port using\u00a0<code>-P</code>\u00a0option with SCP command.</li> </ul> <pre><code>scp -P 2222 username@example.com:/backup/file.zip /local/dir\n</code></pre> <ul> <li>If your remote server required a private key to connect server, You can use\u00a0<code>-i</code>\u00a0followed by a private key file path to connect your server using the SCP command. This can be helpful for AWS servers.</li> </ul> <pre><code>scp -i private_key.pem username@example.com:/backup/file.zip /local/dir\n</code></pre>"},{"location":"week-2-setup/ce103-week-2-setup/#upload-file-using-ssh","title":"Upload file using SSH","text":"<p>You can also upload files to the remote server using SSH protocol using the SCP command. Use the following example command for uploading files to the SSH server.</p> <pre><code>scp file.zip username@example.com:/remote/dir\n</code></pre> <p>Similarity you can use\u00a0-P\u00a0switch to define port of the SSH server and\u00a0-i\u00a0to define private key for the user authentication.</p> <ul> <li> <p>Also you can use SSH tunnels for remote code development</p> </li> <li> <p>Developing on Remote Machines using SSH and Visual Studio Code</p> </li> <li> <p>Visual Studio Code Server</p> </li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#mobaxterm-remote-connection","title":"MobaXterm (Remote Connection)","text":"<ul> <li>Multip Purpose Remote Connection Toolkit</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#teamviewer-remote-connection","title":"Teamviewer (Remote Connection)","text":"<ul> <li> <p>Remote connection tool</p> </li> <li> <p>TeamViewer \u2013 Uzaktan Destek, Uzaktan Eri\u015fim, Hizmet Masas\u0131, \u00c7evrimi\u00e7i \u0130\u015fbirli\u011fi ve Toplant\u0131lar</p> </li> </ul> <p></p>"},{"location":"week-2-setup/ce103-week-2-setup/#anydesk","title":"AnyDesk","text":"<ul> <li> <p>Remote connection tool</p> </li> <li> <p>The Fast Remote Desktop Application \u2013 AnyDesk</p> </li> </ul> <p></p>"},{"location":"week-2-setup/ce103-week-2-setup/#palettoncom-and-colorhuntco-color-chooser","title":"Paletton.com and Colorhunt.co (Color Chooser)","text":"<ul> <li> <p>Generates color pallettes and sample usages</p> </li> <li> <p>Paletton - The Color Scheme Designer</p> </li> <li> <p>https://colorhunt.co/</p> </li> <li> <p>Also check Colors Tutorial</p> </li> </ul> <p></p> <p></p>"},{"location":"week-2-setup/ce103-week-2-setup/#understand-static-code-analysis","title":"Understand (Static Code Analysis)","text":"<ul> <li>https://emenda.com/scitools-understand/</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#jd-project-java-decompiler","title":"JD Project (Java Decompiler)","text":"<ul> <li> <p>Java Decompiler for Jar and Class Files, If code is not obfuscated it recover source code from compiled files. Just drag and drop files to GUI</p> </li> <li> <p>http://java-decompiler.github.io/</p> </li> <li> <p>You can use it standalone app or with eclipse</p> </li> </ul> <p></p>"},{"location":"week-2-setup/ce103-week-2-setup/#cutter-multi-platform-reverse-engineering-tool","title":"Cutter (Multi-Platform Reverse Engineering Tool)","text":"<ul> <li> <p>Cutter's goal is to be an advanced FREE and open-source reverse-engineering platform while keeping the user experience at mind. Cutter is created by reverse engineers for reverse engineers.</p> </li> <li> <p>https://cutter.re/</p> </li> </ul> <p></p>"},{"location":"week-2-setup/ce103-week-2-setup/#ida-pro-freeware-native-reverse-engineering-tool","title":"IDA Pro / Freeware (Native Reverse Engineering Tool)","text":"<ul> <li>IDA Pro as a disassembler is capable of creating maps of their execution to show the binary instructions that are actually executed by the processor in a symbolic representation (assembly language). Advanced techniques have been implemented into IDA Pro so that it can generate assembly language source code from machine-executable code and make this complex code more human-readable.</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#ida-pro-freeware-native-reverse-engineering-tool_1","title":"IDA Pro / Freeware (Native Reverse Engineering Tool)","text":"<ul> <li>Hex Rays - State-of-the-art binary code analysis solutions</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#ida-pro-freeware-native-reverse-engineering-tool_2","title":"IDA Pro / Freeware (Native Reverse Engineering Tool)","text":""},{"location":"week-2-setup/ce103-week-2-setup/#code-visualization-python-c-c-java","title":"Code Visualization (Python, C , C++ , Java)","text":"<ul> <li> <p>This coding tutor tool helps you learn Python, JavaScript, C, C++, and Java by visualizing code execution.</p> </li> <li> <p>https://pythontutor.com/</p> </li> </ul> <p></p>"},{"location":"week-2-setup/ce103-week-2-setup/#assembly-of-c-code","title":"Assembly of C Code","text":"<ul> <li> <p>Multilanguage supported. Convert source code to assembly codes</p> </li> <li> <p>https://godbolt.org/</p> </li> </ul> <p></p>"},{"location":"week-2-setup/ce103-week-2-setup/#mobile-device-screen-sharing-for-demo","title":"Mobile Device Screen Sharing for Demo","text":"<ul> <li> <p>Show USB or Wifi connected Mobile Device Screen on PC and Provide Controls</p> </li> <li> <p>GitHub - Genymobile/scrcpy: Display and control your Android device</p> </li> <li> <p>Run <code>scrcpy</code> for single mobile phone.</p> </li> <li> <p>Open Source Project - Scrcpy now works wirelessly</p> </li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#travis-ci","title":"Travis-CI","text":"<ul> <li> <p>Travis-CI is a continues integration platform</p> </li> <li> <p>Travis-CI free option removed for this reason, its not in our scope.</p> </li> <li> <p>It uses Travis.yml files for actions.</p> </li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#appveyor","title":"AppVeyor","text":"<ul> <li> <p>Another CI platform it has free option for public builds.</p> </li> <li> <p>https://www.appveyor.com</p> </li> <li> <p>GitHub - Kimserey/hello-world-nuget</p> </li> <li> <p>hello-world-nuget/appveyor.yml at master \u00b7 Kimserey/hello-world-nuget \u00b7 GitHub</p> </li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#jenkins","title":"Jenkins","text":"<ul> <li> <p>Self-hosted solution for CI operations, Has integration with Github and several platforms.</p> </li> <li> <p>https://www.jenkins.io/</p> </li> <li> <p>https://www.jenkins.io/doc/pipeline/tour/hello-world/</p> </li> </ul> <p></p>"},{"location":"week-2-setup/ce103-week-2-setup/#jenkins_1","title":"Jenkins","text":""},{"location":"week-2-setup/ce103-week-2-setup/#jenkins_2","title":"Jenkins","text":"<ul> <li>https://www.jenkins.io/solutions/github/</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#vagrant","title":"Vagrant","text":"<ul> <li> <p>Vagrant is a tool for building and managing virtual machine environments in a single workflow. With an easy-to-use workflow and focus on automation, Vagrant lowers development environment setup time, increases production parity, and makes the \"works on my machine\" excuse a relic of the past.</p> </li> <li> <p>https://www.vagrantup.com/</p> </li> <li> <p>Setup Development Environment with Vagrant</p> </li> <li> <p>Setting Up Development Environment Using Vagrant - Edureka</p> </li> <li> <p>development-environment/Vagrantfile at master \u00b7 gantsign/development-environment \u00b7 GitHub</p> </li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#docker-docker-compose-kubernetes-1","title":"Docker / Docker Compose / Kubernetes (1)","text":"<ul> <li> <p>Docker takes away repetitive, mundane configuration tasks and is used throughout the development lifecycle for fast, easy and portable application development \u2013 desktop and cloud.</p> </li> <li> <p>https://www.youtube.com/watch?v=nBwJm0onzeo&amp;ab_channel=GaryExplains Dockerfile</p> </li> <li> <p>https://devopedia.org/docker</p> </li> <li> <p>DockerHub</p> </li> <li> <p>Docker Compose Yaml</p> </li> <li> <p>Dockerrun.aws.json (AWS)</p> </li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#docker-docker-compose-kubernetes-2","title":"Docker / Docker Compose / Kubernetes (2)","text":""},{"location":"week-2-setup/ce103-week-2-setup/#docker-docker-compose-kubernetes-3","title":"Docker / Docker Compose / Kubernetes (3)","text":""},{"location":"week-2-setup/ce103-week-2-setup/#docker-docker-compose-kubernetes-4","title":"Docker / Docker Compose / Kubernetes (4)","text":""},{"location":"week-2-setup/ce103-week-2-setup/#docker-docker-compose-kubernetes-5","title":"Docker / Docker Compose / Kubernetes (5)","text":""},{"location":"week-2-setup/ce103-week-2-setup/#docker-docker-compose-kubernetes-6","title":"Docker / Docker Compose / Kubernetes (6)","text":""},{"location":"week-2-setup/ce103-week-2-setup/#nuget-packages-1","title":"Nuget Packages (1)","text":"<ul> <li> <p>https://www.nuget.org/packages</p> </li> <li> <p>What is NuGet and what does it do? | Microsoft Learn</p> </li> </ul> <p></p>"},{"location":"week-2-setup/ce103-week-2-setup/#nuget-tools-2","title":"NuGet Tools (2)","text":""},{"location":"week-2-setup/ce103-week-2-setup/#managing-dependencies-3","title":"Managing dependencies (3)","text":""},{"location":"week-2-setup/ce103-week-2-setup/#tracking-references-and-restoring-packages-4","title":"Tracking references and restoring packages (4)","text":""},{"location":"week-2-setup/ce103-week-2-setup/#scv-cryptomanager","title":"SCV Cryptomanager","text":"<ul> <li>SCV Crypto Manager has several tools for cryptographic operations.</li> <li>https://cryptomanager.com/download.php</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#addario-cryptobench","title":"Addario CryptoBench","text":"<ul> <li>CryptoBench can be used for hash and symmetric asymmetric encryption-decryption operations.</li> <li>CryptoBench Download Page</li> <li>http://www.addario.org/files/CryptoBench%20v1.0.1.zip</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#raymonds-md5-sha-checksum-utility","title":"Raymond's MD5 &amp; SHA Checksum Utility","text":"<ul> <li> <p>Hash Calculation Utility</p> </li> <li> <p>MD5 &amp; SHA Checksum Utility | Raymond's WordPress</p> </li> </ul> <p></p>"},{"location":"week-2-setup/ce103-week-2-setup/#slavasoft-hashcalc","title":"SlavaSoft HashCalc","text":"<ul> <li>SlavaSoft HashCalc - Hash, CRC, and HMAC Calculator</li> </ul>"},{"location":"week-2-setup/ce103-week-2-setup/#portable-pgp","title":"Portable PGP","text":"<ul> <li> <p>Portable PGP uses for the generation of PGP keys to transfer files securely via e-mail or other channels. You can encrypt or sign your documents with this tool then the receiver can open or verify your e-mail.</p> </li> <li> <p>https://ppgp.sourceforge.net/</p> </li> </ul> <p></p>"},{"location":"week-2-setup/ce103-week-2-setup/#online-programming-envoriments","title":"Online Programming Envoriments","text":"<ul> <li> <p>Hackerrank</p> </li> <li> <p>https://www.hackerrank.com/</p> </li> <li> <p>CS50 Sandbox</p> </li> <li> <p>https://sandbox.cs50.io/</p> </li> <li> <p>Programiz C Online Complier</p> </li> <li> <p>Online C Compiler</p> </li> </ul> \\[ End-Of-Week-2 \\]"},{"location":"week-2-setup/sources/llvm-clang-hello-world-apps/","title":"Index","text":"<p>String Literals, Character Encodings, and Multiplatform C++ | PSPDFKit</p>"},{"location":"week-2-setup/sources/mingw-gcc-hello-world-apps/","title":"Index","text":"<p>MinGW-w64 - for 32 and 64 bit Windows / Wiki2 / Unicode apps</p>"},{"location":"week-2-setup/sources/npp-gcc-hello-world-apps/","title":"Index","text":"<p>How To Setup Notepad for Writing C++ Programs</p>"},{"location":"week-3-git/ce103-week-3-git/","title":"CE103 Algorithms and Programming I","text":""},{"location":"week-3-git/ce103-week-3-git/#ce103-algorithms-and-programming-i","title":"CE103 Algorithms and Programming I","text":""},{"location":"week-3-git/ce103-week-3-git/#week-3","title":"Week-3","text":""},{"location":"week-3-git/ce103-week-3-git/#introduction-to-source-code-version-management-systems","title":"Introduction to Source Code Version Management Systems","text":"<p>Download DOC, SLIDE, PPTX</p>"},{"location":"week-3-git/ce103-week-3-git/#outline","title":"Outline","text":"<ul> <li>Introduction to Source Code Version Management Systems</li> <li>Features of Source Code Management Systems</li> <li>Why Do We Need Source Code Management Systems</li> <li>Centralized/Distrubuted Version Control Systems</li> <li>Introduction to Git</li> <li>Git Installation and Configuration</li> </ul>"},{"location":"week-3-git/ce103-week-3-git/#outline_1","title":"Outline","text":"<ul> <li>Git Init Repository</li> <li>Git Add Files </li> <li>Git Commit Changes</li> <li>Git Pull/Fetch Changes from Remote Repo</li> <li>Git Push Local Changes to Remote Repo</li> <li>Git Branching </li> <li>Git Merging and Conflict Solving</li> <li>Git Rebasing</li> <li>Git Reset</li> <li>Git Logs and Monitoring </li> <li>Git Decision Tree</li> <li>Git Visualize Logs</li> </ul>"},{"location":"week-3-git/ce103-week-3-git/#introduction-to-source-code-version-management-systems_1","title":"Introduction to Source Code Version Management Systems","text":""},{"location":"week-3-git/ce103-week-3-git/#git-github-gitlab-bitbucket-maven-svn-tfs","title":"Git, Github, Gitlab, Bitbucket, Maven, SVN, TFS","text":"<p>Source code management (SCM) is used to track modifications to a source code repository. SCM tracks a running history of changes to a code base and helps resolve conflicts when merging updates from multiple contributors. SCM is also synonymous with Version control.\u00a0 As software projects grow in lines of code and contributor head count, the costs of communication overhead and management complexity also grow. SCM is a critical tool to alleviate the organizational strain of growing development costs.</p>"},{"location":"week-3-git/ce103-week-3-git/#features-of-source-code-management-systems","title":"Features of Source Code Management Systems","text":"<ul> <li> <p>Authenticated access for commits</p> </li> <li> <p>Revision history on files</p> </li> <li> <p>Atomic commits of multiple files</p> </li> <li> <p>Versioning/Tagging</p> </li> </ul>"},{"location":"week-3-git/ce103-week-3-git/#why-do-we-need-source-code-management-systems-1","title":"Why Do We Need Source Code Management Systems? (1)","text":"<p>We can save the file with a different name if it\u2019s our school project or one-time papers but for a well-equipped software development? Not a chance.</p>"},{"location":"week-3-git/ce103-week-3-git/#why-do-we-need-source-code-management-systems-2","title":"Why Do We Need Source Code Management Systems? (2)","text":"<p>Big projects need a version control system to track the changes and avoid misunderstanding. A good SCM does the following:</p> <ul> <li>Backup and Restore</li> <li>Synchronization</li> <li>Short-Term Undo</li> <li>Long-Term Undo</li> <li>Track Changes</li> <li>Ownership</li> <li>Branching and Merging</li> </ul>"},{"location":"week-3-git/ce103-week-3-git/#why-do-we-need-source-code-management-systems-3","title":"Why Do We Need Source Code Management Systems? (3)","text":"<p>Backup and Restore \u2013 Files can be saved at any moment and can be restored from the last saved.</p>"},{"location":"week-3-git/ce103-week-3-git/#why-do-we-need-source-code-management-systems-4","title":"Why Do We Need Source Code Management Systems? (4)","text":"<p>Synchronization \u2013 Programmers can get the latest code and fetch the up-to-date codes from the repository.</p>"},{"location":"week-3-git/ce103-week-3-git/#why-do-we-need-source-code-management-systems-5","title":"Why Do We Need Source Code Management Systems? (5)","text":"<p>Short-Term Undo \u2013 Working with a file and messed it up. We can do a short-term undo to the last known version.</p>"},{"location":"week-3-git/ce103-week-3-git/#why-do-we-need-source-code-management-systems-6","title":"Why Do We Need Source Code Management Systems? (6)","text":"<p>Long-Term Undo \u2013 It helps when we have to make a release version rollback. Something like going to the last version which was created a year</p>"},{"location":"week-3-git/ce103-week-3-git/#why-do-we-need-source-code-management-systems-7","title":"Why Do We Need Source Code Management Systems? (7)","text":"<p>Track Changes\u2013 We can track the changes as when anyone is making any change, he can leave a commit message as for why the change was done.</p>"},{"location":"week-3-git/ce103-week-3-git/#why-do-we-need-source-code-management-systems-8","title":"Why Do We Need Source Code Management Systems? (8)","text":"<p>Ownership\u2013 With every commit made to the master branch, it will ask the owner permission to merge it.</p>"},{"location":"week-3-git/ce103-week-3-git/#why-do-we-need-source-code-management-systems-9","title":"Why Do We Need Source Code Management Systems? (9)","text":"<p>Branching and Merging \u2013 You can create a branch of your source code and create the changes. Once the changes are approved, you can merge it with the master branch.</p>"},{"location":"week-3-git/ce103-week-3-git/#why-do-we-need-source-code-management-systems-10","title":"Why Do We Need Source Code Management Systems? (10)","text":""},{"location":"week-3-git/ce103-week-3-git/#types-of-version-control-systems","title":"Types of Version Control Systems","text":"<ul> <li>Centralized Version Control (TFS, Subversion)</li> <li>Distributed Version Control (Git and Mercurial)</li> </ul>"},{"location":"week-3-git/ce103-week-3-git/#centralized-version-control-tfs-subversion-1","title":"Centralized Version Control (TFS, Subversion) (1)","text":"<p>The main concept of Centralized Version Control is that it works in a client and server relationship. The repository is located in one place and allows access to multiple clients.</p>"},{"location":"week-3-git/ce103-week-3-git/#centralized-version-control-tfs-subversion-2","title":"Centralized Version Control (TFS, Subversion) (2)","text":""},{"location":"week-3-git/ce103-week-3-git/#centralized-version-control-tfs-subversion-3","title":"Centralized Version Control (TFS, Subversion) (3)","text":""},{"location":"week-3-git/ce103-week-3-git/#centralized-version-control-tfs-subversion-4","title":"Centralized Version Control (TFS, Subversion) (4)","text":"<p>It\u2019s very similar to FTP where you have FTP clients which connect to FTP server. Here all the user changes and commits have to pass through the central server. For Ex: Subversion.</p>"},{"location":"week-3-git/ce103-week-3-git/#centralized-version-control-tfs-subversion-5","title":"Centralized Version Control (TFS, Subversion) (5)","text":"<p>The benefits of centralized version control are:</p> <ul> <li> <p>It\u2019s easy to understand.</p> </li> <li> <p>There are more GUI and IDE clients.</p> </li> <li> <p>You have more control over the users and access.</p> </li> </ul>"},{"location":"week-3-git/ce103-week-3-git/#centralized-version-control-tfs-subversion-6","title":"Centralized Version Control (TFS, Subversion) (6)","text":"<p>We do have drawbacks also:</p> <ul> <li> <p>It is dependent on the access to the server.</p> </li> <li> <p>It can be slower because every command from the client has to pass the server.</p> </li> <li> <p>Branching and merging strategies are difficult to use.</p> </li> </ul>"},{"location":"week-3-git/ce103-week-3-git/#distributed-version-control-git-and-mercurial-1","title":"Distributed Version Control (Git and Mercurial) (1)","text":"<p>These systems are newer to use. In Distributed Version Control, each user has their own copy of the entire repository as well as the files and history. For Ex: Git and Mercurial</p>"},{"location":"week-3-git/ce103-week-3-git/#distributed-version-control-git-and-mercurial-2","title":"Distributed Version Control (Git and Mercurial) (2)","text":""},{"location":"week-3-git/ce103-week-3-git/#distributed-version-control-git-and-mercurial-3","title":"Distributed Version Control (Git and Mercurial) (3)","text":""},{"location":"week-3-git/ce103-week-3-git/#distributed-version-control-git-and-mercurial-4","title":"Distributed Version Control (Git and Mercurial) (4)","text":"<p>The benefits of distributed version control are:</p> <ul> <li> <p>More powerful and easy change tracking.</p> </li> <li> <p>No need of a centralized server. Most of the functionalities work in offline mode also apart from sharing the repositories.</p> </li> <li> <p>Branching and Merging strategies are more easy and reliable.</p> </li> <li> <p>It\u2019s faster than the other one.</p> </li> </ul>"},{"location":"week-3-git/ce103-week-3-git/#list-of-source-code-version-management-tools-1","title":"List of Source Code Version Management Tools (1)","text":""},{"location":"week-3-git/ce103-week-3-git/#list-of-source-code-version-management-tools-2","title":"List of Source Code Version Management Tools (2)","text":"<ul> <li> <p>Github</p> </li> <li> <p>GitLab</p> </li> <li> <p>BitBucket</p> </li> <li> <p>SourceForge</p> </li> <li> <p>Beanstalk</p> </li> </ul>"},{"location":"week-3-git/ce103-week-3-git/#list-of-source-code-version-management-tools-3","title":"List of Source Code Version Management Tools (3)","text":"<ul> <li> <p>Apache Allura</p> </li> <li> <p>AWS CodeCommit</p> </li> <li> <p>Launchpad</p> </li> <li> <p>Phabricator</p> </li> <li> <p>GitBucket</p> </li> </ul>"},{"location":"week-3-git/ce103-week-3-git/#git-distributed-source-code-management-1","title":"GIT (Distributed Source Code Management) (1)","text":""},{"location":"week-3-git/ce103-week-3-git/#git-distributed-source-code-management-2","title":"GIT (Distributed Source Code Management) (2)","text":""},{"location":"week-3-git/ce103-week-3-git/#git-distributed-source-code-management-3","title":"GIT (Distributed Source Code Management) (3)","text":""},{"location":"week-3-git/ce103-week-3-git/#git-distributed-source-code-management-4","title":"GIT (Distributed Source Code Management) (4)","text":""},{"location":"week-3-git/ce103-week-3-git/#git-distributed-source-code-management-5","title":"GIT (Distributed Source Code Management) (5)","text":""},{"location":"week-3-git/ce103-week-3-git/#a-basic-overview-of-how-git-works-1","title":"A Basic Overview of How Git Works (1)","text":"<ul> <li> <p>Create a \"repository\" (project) with a git hosting tool (like Bitbucket)</p> </li> <li> <p>Copy (or clone) the repository to your local machine</p> </li> <li> <p>Add a file to your local repo and \u201ccommit\u201d (save) the changes</p> </li> <li> <p>\u201cPush\u201d your changes to your master branch</p> </li> </ul>"},{"location":"week-3-git/ce103-week-3-git/#git-distributed-source-code-management-6","title":"GIT (Distributed Source Code Management) (6)","text":""},{"location":"week-3-git/ce103-week-3-git/#a-basic-overview-of-how-git-works-2","title":"A Basic Overview of How Git Works (2)","text":"<ul> <li> <p>Make a change to your file with a git hosting tool and commit</p> </li> <li> <p>\u201cPull\u201d the changes to your local machine</p> </li> <li> <p>Create a \u201cbranch\u201d (version), make a change, commit the change</p> </li> <li> <p>Open a \u201cpull request\u201d.</p> </li> <li> <p>\u201cMerge\u201d your branch to the master branch</p> </li> </ul>"},{"location":"week-3-git/ce103-week-3-git/#git-distributed-source-code-management-7","title":"GIT (Distributed Source Code Management) (7)","text":""},{"location":"week-3-git/ce103-week-3-git/#some-of-the-basic-operations-in-git-are","title":"Some of The Basic Operations in GIT are","text":"<ul> <li> <p>Initialize</p> </li> <li> <p>Add</p> </li> <li> <p>Commit</p> </li> <li> <p>Pull</p> </li> <li> <p>Push</p> </li> </ul>"},{"location":"week-3-git/ce103-week-3-git/#git-distributed-source-code-management-8","title":"GIT (Distributed Source Code Management) (8)","text":""},{"location":"week-3-git/ce103-week-3-git/#some-of-the-basic-operations-in-git-are_1","title":"Some of The Basic Operations in GIT are","text":""},{"location":"week-3-git/ce103-week-3-git/#git-distributed-source-code-management-9","title":"GIT (Distributed Source Code Management) (9)","text":""},{"location":"week-3-git/ce103-week-3-git/#some-of-the-basic-operations-in-git-are_2","title":"Some of The Basic Operations in GIT are","text":"<ul> <li> <p>Branching</p> </li> <li> <p>Merging</p> </li> <li> <p>Rebasing</p> </li> </ul>"},{"location":"week-3-git/ce103-week-3-git/#git-distributed-source-code-management-10","title":"GIT (Distributed Source Code Management) (10)","text":""},{"location":"week-3-git/ce103-week-3-git/#some-of-the-basic-operations-in-git-are_3","title":"Some of The Basic Operations in GIT are","text":""},{"location":"week-3-git/ce103-week-3-git/#git-distributed-source-code-management-8_1","title":"GIT (Distributed Source Code Management) (8)","text":""},{"location":"week-3-git/ce103-week-3-git/#a-brief-idea-about-how-these-operations-work-with-the-git-repositories-1","title":"A brief idea about how these operations work with the Git repositories (1)","text":""},{"location":"week-3-git/ce103-week-3-git/#git-distributed-source-code-management-9_1","title":"GIT (Distributed Source Code Management) (9)","text":""},{"location":"week-3-git/ce103-week-3-git/#a-brief-idea-about-how-these-operations-work-with-the-git-repositories-2","title":"A brief idea about how these operations work with the Git repositories (2)","text":""},{"location":"week-3-git/ce103-week-3-git/#git-distributed-source-code-management-10_1","title":"GIT (Distributed Source Code Management) (10)","text":""},{"location":"week-3-git/ce103-week-3-git/#a-brief-idea-about-how-these-operations-work-with-the-git-repositories-3","title":"A brief idea about how these operations work with the Git repositories (3)","text":"<p>For more detailed cheetsheat please check the following interactive map</p> <p>NDP Software :: Git Cheatsheet</p> <p></p>"},{"location":"week-3-git/ce103-week-3-git/#installation-of-git-1","title":"Installation of GIT (1)","text":"<p>Check Installation Already Completed</p> <pre><code>git --version\n</code></pre> <p></p>"},{"location":"week-3-git/ce103-week-3-git/#installation-of-git-2","title":"Installation of GIT (2)","text":"<p>If your console gives error about git command follow the steps in the link</p> <p>Install Git | Atlassian Git Tutorial</p> <p>In this link you will should download following setup according to your operating system</p>"},{"location":"week-3-git/ce103-week-3-git/#installation-of-git-3","title":"Installation of GIT (3)","text":""},{"location":"week-3-git/ce103-week-3-git/#git-setup-files","title":"GIT Setup Files","text":"<ul> <li>Download git for OSX</li> <li>Download git for Windows</li> <li>Download git for Linux</li> </ul>"},{"location":"week-3-git/ce103-week-3-git/#installation-of-git-4","title":"Installation of GIT (4)","text":"<ul> <li>Download and install GIT from the following links (both have same github release path)</li> </ul> <p>Git - Downloads</p>"},{"location":"week-3-git/ce103-week-3-git/#installation-of-git-5","title":"Installation of GIT (5)","text":"<ul> <li>After running setup follow the steps below</li> </ul>"},{"location":"week-3-git/ce103-week-3-git/#installation-of-git-6","title":"Installation of GIT (6)","text":"<ul> <li>Select the following configurations</li> </ul>"},{"location":"week-3-git/ce103-week-3-git/#installation-of-git-7","title":"Installation of GIT (7)","text":"<ul> <li>You can select to use git from Git Bash Only, Also you can use it from command-line by selecting second option. Third option override some Windows executable so your operating system can be affected from this selection. </li> </ul>"},{"location":"week-3-git/ce103-week-3-git/#installation-of-git-8","title":"Installation of GIT (8)","text":"<ul> <li>Git Credential Manager will be use to configure your remote connection.</li> </ul>"},{"location":"week-3-git/ce103-week-3-git/#installation-of-git-9","title":"Installation of GIT (9)","text":""},{"location":"week-3-git/ce103-week-3-git/#installation-of-git-10","title":"Installation of GIT (10)","text":"<ul> <li>MSYS2 MinTTY provide better visual and colorful console outputs</li> </ul>"},{"location":"week-3-git/ce103-week-3-git/#installation-of-git-extension-windows-1","title":"Installation of GIT Extension (Windows) (1)","text":"<ul> <li> <p>Git user interface can be installed by the following applications</p> </li> <li> <p>You can install Git GUI from https://git-scm.com/downloads/guis</p> </li> <li>I prefer to use git extension https://gitextensions.github.io/ </li> <li> <p>and https://tortoisegit.org/ together</p> </li> <li> <p>Also Download KDiff3 KDiff3 - Browse Files at SourceForge.net</p> </li> <li> <p>These extensions provide GUI for git operations to make process easier.</p> </li> </ul>"},{"location":"week-3-git/ce103-week-3-git/#enter-git-extension-configurations","title":"Enter GIT Extension Configurations","text":"<p>Right click to any where on right click menu you will see git extension settings as follow</p> <p></p>"},{"location":"week-3-git/ce103-week-3-git/#configuration-of-git-extension-windows-1","title":"Configuration of GIT Extension (Windows) (1)","text":"<ul> <li>Git extension provides you missing setups or wrong configurations. If everyting is green that mean everything should work perfectly.</li> </ul>"},{"location":"week-3-git/ce103-week-3-git/#configuration-of-git-extension-windows-2","title":"Configuration of GIT Extension (Windows) (2)","text":"<ul> <li>If you install git everything should be green and this configuration is stored on .gitconfig on your home <code>C:/Windows/Users/&lt;user&gt;/.gitconfig</code></li> </ul>"},{"location":"week-3-git/ce103-week-3-git/#configuration-of-git-extension-windows-3","title":"Configuration of GIT Extension (Windows) (3)","text":"<ul> <li>You can use the following template and fix your settings. Git GUI edit this settings. But you can also edit them manually. </li> </ul>"},{"location":"week-3-git/ce103-week-3-git/#configuration-of-git-extension-windows-3_1","title":"Configuration of GIT Extension (Windows) (3)","text":"<p>C:/Windows/Users//.gitconfig</p> <pre><code>[core]\neditor = \\\"C:/Program Files (x86)/GitExtensions/GitExtensions.exe\\\" fileeditor\n    autocrlf = true\nquotePath = false\ncommitGraph = true\nlongpaths = true\n[user]\nemail = xxxxxxx@gmail.com\n    name = xxxx xxxxxx\n[filter \"lfs\"]\nclean = git-lfs clean -- %f\n    smudge = git-lfs smudge -- %f\n    process = git-lfs filter-process\n    required = true\n[pull]\nrebase = false\n[fetch]\nprune = false\n[rebase]\nautoStash = false\n[credential]\nhelper = manager\n[diff]\nguitool = kdiff3\n[difftool \"kdiff3\"]\npath = C:/Program Files/KDiff3/kdiff3.exe\n    cmd = \\\"C:/Program Files/KDiff3/kdiff3.exe\\\" \\\"$LOCAL\\\" \\\"$REMOTE\\\"\n[merge]\nguitool = tortoisemerge\n[mergetool \"tortoisemerge\"]\npath = C:/Program Files/TortoiseGit/bin/TortoiseGitMerge.exe\n    cmd = \\\"C:/Program Files/TortoiseGit/bin/TortoiseGitMerge.exe\\\" -base:\\\"$BASE\\\" -mine:\\\"$LOCAL\\\" -theirs:\\\"$REMOTE\\\" -merged:\\\"$MERGED\\\"\n[receive]\nadvertisePushOptions = true\n[gc]\nwriteCommitGraph = true\n</code></pre>"},{"location":"week-3-git/ce103-week-3-git/#configuration-of-git-extension-windows-4","title":"Configuration of GIT Extension (Windows) (4)","text":"<ul> <li>Also in extension you can see similar settings</li> </ul>"},{"location":"week-3-git/ce103-week-3-git/#configuration-of-git-extension-windows-5","title":"Configuration of GIT Extension (Windows) (5)","text":"<p>Samples</p> <p>MergeTool</p> <pre><code>tortoisemerge\n</code></pre> <p>Path to mergetool</p> <pre><code>C:/Program Files/TortoiseGit/bin/TortoiseGitMerge.exe\n</code></pre> <p>Mergetool command</p> <pre><code>\"C:/Program Files/TortoiseGit/bin/TortoiseGitMerge.exe\" -base:\"$BASE\" -mine:\"$LOCAL\" -theirs:\"$REMOTE\" -merged:\"$MERGED\"\n</code></pre>"},{"location":"week-3-git/ce103-week-3-git/#configuration-of-git-extension-windows-6","title":"Configuration of GIT Extension (Windows) (6)","text":"<p>Difftool</p> <pre><code>kdiff3\n</code></pre> <p>Path to difftool</p> <pre><code>C:/Program Files/KDiff3/kdiff3.exe\n</code></pre> <p>Difftool command</p> <pre><code>\"C:/Program Files/KDiff3/kdiff3.exe\" \"$LOCAL\" \"$REMOTE\"\n</code></pre>"},{"location":"week-3-git/ce103-week-3-git/#configuration-of-git-extension-windows-7","title":"Configuration of GIT Extension (Windows) (7)","text":"<ul> <li> <p>If you see something as merge and diff tool is not configured, follow the similar settings above on your computer. If you installed kdiff3, tortoisegit and extension you will have same diff and merge tools</p> </li> <li> <p>This topic also help you</p> </li> <li> <p>Git: How can I configure KDiff3 as a merge tool and diff tool? - Stack Overflow</p> </li> </ul>"},{"location":"week-3-git/ce103-week-3-git/#configuration-of-git-extension-windows-8","title":"Configuration of GIT Extension (Windows) (8)","text":"<ul> <li>Merge, Diff and Shell Tool Configuration Missing.</li> </ul>"},{"location":"week-3-git/ce103-week-3-git/#configuration-of-git-extension-windows-9","title":"Configuration of GIT Extension (Windows) (9)","text":"<ul> <li>Open Git-&gt;Config, in your settings you will see path to mergetool and difftool will be empty fill settings like that below find executables in your computer and copy paths to here.</li> </ul>"},{"location":"week-3-git/ce103-week-3-git/#configuration-of-git-extension-windows-10","title":"Configuration of GIT Extension (Windows) (10)","text":""},{"location":"week-3-git/ce103-week-3-git/#configuration-of-git-extension-windows-11","title":"Configuration of GIT Extension (Windows) (11)","text":"<ul> <li>Also if we want to change and use different diff and merge tool then we can do this with gitbash console as below</li> </ul> <pre><code>C:\\Program Files\\TortoiseGit\\bin\n</code></pre> <ul> <li>Find TortoiseGitIDiff.exe and TortoiseGitMerge.exe</li> </ul>"},{"location":"week-3-git/ce103-week-3-git/#configuration-of-git-extension-windows-12","title":"Configuration of GIT Extension (Windows) (12)","text":"<ul> <li>Copy path of this applications</li> </ul> <pre><code>C:\\Program Files\\TortoiseGit\\bin\\TortoiseGitMerge.exe\nC:\\Program Files\\TortoiseGit\\bin\\TortoiseGitIDiff.exe\n</code></pre>"},{"location":"week-3-git/ce103-week-3-git/#configuration-of-git-extension-windows-13","title":"Configuration of GIT Extension (Windows) (13)","text":"<ul> <li>Open a gitbash console and run following commands</li> </ul> <pre><code>git config --global merge.tool TortoiseGitMerge\ngit config --global mergetool.TortoiseGitMerge.path \"C:/Program Files/TortoiseGit/bin/TortoiseGitMerge.exe\"\ngit config --global mergetool.TortoiseGitMerge.trustExitCode false\ngit config --global diff.guitool TortoiseGitIDiff\ngit config --global difftool.TortoiseGitIDiff.path \"C:/Program Files/TortoiseGit/bin/TortoiseGitIDiff.exe\"\ngit config --global difftool.TortoiseGitIDiff.trustExitCode false\n</code></pre> <p>This updates will be stored on .gitconfig</p>"},{"location":"week-3-git/ce103-week-3-git/#using-the-git-extension-1","title":"Using the GIT Extension (1)","text":"<p>right click in the git folder and use Git Extension menu for operations.</p> <p>for sample commit click \"Commit\"</p> <p></p>"},{"location":"week-3-git/ce103-week-3-git/#using-the-git-extension-1_1","title":"Using the GIT Extension (1)","text":"<p>from opening window first stage related files and then write a good commit message</p> <p>finally click commit to local. You can also commit&amp;push it to remote repository.</p> <p></p>"},{"location":"week-3-git/ce103-week-3-git/#git-installation-completed","title":"GIT Installation Completed..","text":""},{"location":"week-3-git/ce103-week-3-git/#installation-of-gig-git-ignore-creator-1","title":"Installation of gig (git ignore creator) (1)","text":"<p>Requirements</p> <ul> <li> <p>Python &gt;= 3.6</p> </li> <li> <p>Internet connection</p> </li> </ul> <p>https://github.com/sloria/gig</p> <pre><code>pip install -U gig\n</code></pre>"},{"location":"week-3-git/ce103-week-3-git/#installation-of-gig-git-ignore-creator-2","title":"Installation of gig (git ignore creator) (2)","text":""},{"location":"week-3-git/ce103-week-3-git/#installation-of-gig-git-ignore-creator-3","title":"Installation of gig (git ignore creator) (3)","text":"<pre><code>gig --version\n</code></pre>"},{"location":"week-3-git/ce103-week-3-git/#usage-of-gig-1","title":"Usage of gig (1)","text":"<p>List all gitignore templates</p> <pre><code>gig list\ngig list -global\n</code></pre>"},{"location":"week-3-git/ce103-week-3-git/#usage-of-gig-2","title":"Usage of gig (2)","text":"<p>Sample gitignore for C Java and Visual Studio</p> <pre><code>gig C Java VisualStudio &gt; .gitignore\n</code></pre>"},{"location":"week-3-git/ce103-week-3-git/#usage-of-gig-3","title":"Usage of gig (3)","text":"<p>There is a portal for this also by Toptal</p> <p>\u2022gitignore.io - Create Useful .gitignore Files For Your Project</p> <p></p>"},{"location":"week-3-git/ce103-week-3-git/#usage-of-gig-4","title":"Usage of gig (4)","text":"<p>for samples you can check the following links.</p> <p>https://github.com/github/gitignore</p> <p>https://dev.to/shihanng/gig-a-gitignore-generator-opc</p>"},{"location":"week-3-git/ce103-week-3-git/#configuration-of-git-1","title":"Configuration of GIT (1)","text":"<p>It is important to configure your Git because any commits that you make are associated with your configuration details.</p> <p>configuring Git with your username and email. In order to do that, type the following commands in your Git Bash:</p> <pre><code>git config - - global user.name \"&lt;your name&gt;\"\n\ngit config - - global user.email \"&lt;your email&gt;\"\n</code></pre>"},{"location":"week-3-git/ce103-week-3-git/#configuration-of-git-2","title":"Configuration of GIT (2)","text":""},{"location":"week-3-git/ce103-week-3-git/#configuration-of-git-3","title":"Configuration of GIT (3)","text":"<p>git configuration files are located on the user folder</p> <p></p>"},{"location":"week-3-git/ce103-week-3-git/#configuration-of-git-4","title":"Configuration of GIT (4)","text":"<p>If you want to view all your configuration details, use the command below</p> <pre><code>git config --list\n</code></pre> <p></p>"},{"location":"week-3-git/ce103-week-3-git/#using-gitignore-files-with-git-extension-1","title":"Using .gitignore files with git-extension (1)","text":"<p>with gitignore file</p> <p></p>"},{"location":"week-3-git/ce103-week-3-git/#using-gitignore-files-with-git-extension-2","title":"Using .gitignore files with git-extension (2)","text":"<p>without gitignore file (just move to another location)</p> <p></p>"},{"location":"week-3-git/ce103-week-3-git/#github-create-repo","title":"Github Create Repo","text":""},{"location":"week-3-git/ce103-week-3-git/#initilization-of-repo-not-existing-in-github","title":"Initilization of Repo (not existing in github)","text":""},{"location":"week-3-git/ce103-week-3-git/#git-init","title":"git init","text":"<ul> <li> <p>In order to do that, we use the command git init.</p> </li> <li> <p>git init creates an empty Git repository or re-initializes an existing one. It basically creates a .git directory with sub directories and template files. Running a git init in an existing repository will not overwrite things that are already there. It rather picks up the newly added templates.</p> </li> </ul> <pre><code>git init\n</code></pre>"},{"location":"week-3-git/ce103-week-3-git/#git-init_1","title":"git init","text":""},{"location":"week-3-git/ce103-week-3-git/#adding-initiated-repo-remote-upstream-repo-link-with-github-repo-1","title":"Adding Initiated Repo Remote Upstream Repo (Link with Github Repo) (1)","text":"<ul> <li>If you enter following command in the git folder you will see nothing</li> </ul> <pre><code>git remote -v\n</code></pre> <ul> <li>That mean this repository do not have a remote upstream repository such as a github or bitbucket repo.</li> </ul>"},{"location":"week-3-git/ce103-week-3-git/#adding-initiated-repo-remote-upstream-repo-link-with-github-repo-2","title":"Adding Initiated Repo Remote Upstream Repo (Link with Github Repo) (2)","text":"<p>Open the github and bitbucket repository and copy project path from</p> <p></p>"},{"location":"week-3-git/ce103-week-3-git/#adding-initiated-repo-remote-upstream-repo-link-with-github-repo-3","title":"Adding Initiated Repo Remote Upstream Repo (Link with Github Repo) (3)","text":"<p>you will see the following sample from github code button</p> <pre><code>https://github.com/ucoruh/ce103-sample-text.git\n</code></pre>"},{"location":"week-3-git/ce103-week-3-git/#adding-initiated-repo-remote-upstream-repo-link-with-github-repo-4","title":"Adding Initiated Repo Remote Upstream Repo (Link with Github Repo) (4)","text":"<ul> <li>Copy link and use with following command</li> </ul> <pre><code>git remote add origin https://github.com/ucoruh/ce103-sample-text.git\n</code></pre> <ul> <li>Then verify that you correctly updated remote repository setting with the following command</li> </ul> <pre><code>git remote -v\n</code></pre> - You should see similar outputs <pre><code>origin  https://github.com/ucoruh/ce103-sample-text.git (fetch)\norigin  https://github.com/ucoruh/ce103-sample-text.git (push)\n</code></pre> <p>You can check the following sample How to Add a New Remote to your Git Repo | Assembla Help Center</p>"},{"location":"week-3-git/ce103-week-3-git/#now-you-can-push-your-local-changes-to-remote-repository","title":"Now you can push your local changes to remote repository","text":""},{"location":"week-3-git/ce103-week-3-git/#if-you-see-a-repository-on-github-then-you-can-download-with-following-operation","title":"If you see a repository on Github then you can download with following operation","text":""},{"location":"week-3-git/ce103-week-3-git/#checkout-a-repository-1","title":"Checkout a Repository (1)","text":"<p>create a working copy of a local repository by running the command</p> <pre><code>git clone /path/to/repository\n</code></pre>"},{"location":"week-3-git/ce103-week-3-git/#checkout-a-repository-2","title":"Checkout a Repository (2)","text":"<p>Sample clone command</p> <pre><code>git clone https://github.com/ucoruh/ce103-sample-text.git\n</code></pre>"},{"location":"week-3-git/ce103-week-3-git/#checkout-a-repository-3","title":"Checkout a Repository (3)","text":"<p>when using a remote server, your command will be</p> <pre><code>git clone username@host:/path/to/repository\n</code></pre>"},{"location":"week-3-git/ce103-week-3-git/#checking-repository-status-1","title":"Checking Repository Status (1)","text":""},{"location":"week-3-git/ce103-week-3-git/#git-status","title":"git status","text":"<p>The git status command lists all the modified files which are ready to be added to the local repository.</p> <pre><code>git status\n</code></pre>"},{"location":"week-3-git/ce103-week-3-git/#checking-repository-status-2","title":"Checking Repository Status (2)","text":""},{"location":"week-3-git/ce103-week-3-git/#git-status_1","title":"git status","text":""},{"location":"week-3-git/ce103-week-3-git/#adding-files-to-index-1","title":"Adding Files to Index (1)","text":""},{"location":"week-3-git/ce103-week-3-git/#git-add","title":"git add","text":"<p>This command updates the index using the current content found in the working tree and then prepares the content in the staging area for the next commit.</p> <pre><code>git add &lt;directory&gt;\ngit add &lt;file&gt;\ngit add *\n</code></pre>"},{"location":"week-3-git/ce103-week-3-git/#adding-files-to-index-1_1","title":"Adding Files to Index (1)","text":""},{"location":"week-3-git/ce103-week-3-git/#git-add_1","title":"git add","text":"<p>Created two more files edureka3.txt and edureka4.txt. Let us add the files using the command git add -A. This command will add all the files to the index which are in the directory but not updated in the index yet.</p> <p></p>"},{"location":"week-3-git/ce103-week-3-git/#commit-changes-1","title":"Commit Changes (1)","text":""},{"location":"week-3-git/ce103-week-3-git/#git-commit","title":"git commit","text":"<ul> <li>It refers to recording snapshots of the repository at a given time. Committed   snapshots will never change unless done explicitly.</li> </ul>"},{"location":"week-3-git/ce103-week-3-git/#commit-changes-2","title":"Commit Changes (2)","text":""},{"location":"week-3-git/ce103-week-3-git/#git-commit_1","title":"git commit","text":"<ul> <li>Let me explain how commit works with the diagram below</li> </ul> <ul> <li>Here, C1 is the initial commit, i.e. the snapshot of the first change from which   another snapshot is created with changes named C2. Note that the master points   to the latest commit. Now, when I commit again, another snapshot C3 is created and now the master points to C3 instead of C2.</li> </ul>"},{"location":"week-3-git/ce103-week-3-git/#commit-changes-3","title":"Commit Changes (3)","text":""},{"location":"week-3-git/ce103-week-3-git/#git-commit_2","title":"git commit","text":"<ul> <li>Commands:</li> </ul> <pre><code>git commit -m \"&lt;message&gt;\"\n</code></pre> <ul> <li>Now, if you want to commit a snapshot of all the changes in the working directory at   once, you can use the command below</li> </ul>"},{"location":"week-3-git/ce103-week-3-git/#commit-changes-4","title":"Commit Changes (4)","text":""},{"location":"week-3-git/ce103-week-3-git/#git-commit_3","title":"git commit","text":"<ul> <li>Please check writing good commit messages article below</li> <li>How to write a good commit message - DEV Community</li> </ul>"},{"location":"week-3-git/ce103-week-3-git/#writing-good-commit-messages-1","title":"Writing Good Commit Messages (1)","text":"<pre><code>type: subject\n\nbody (optional)\n\nfooter (optional)\n</code></pre>"},{"location":"week-3-git/ce103-week-3-git/#writing-good-commit-messages-2","title":"Writing Good Commit Messages (2)","text":""},{"location":"week-3-git/ce103-week-3-git/#1-type","title":"1. Type","text":"<ul> <li>feat - a new feature</li> <li>fix - a bug fix</li> <li>docs - changes in documentation</li> <li>style - everything related to styling</li> <li>refactor - code changes that neither fixes a bug or adds a feature</li> <li>test - everything related to testing</li> <li>chore - updating build tasks, package manager configs, etc</li> </ul>"},{"location":"week-3-git/ce103-week-3-git/#writing-good-commit-messages-3","title":"Writing Good Commit Messages (3)","text":""},{"location":"week-3-git/ce103-week-3-git/#2-subject","title":"2. Subject","text":"<p>This contains a short description of the changes made. It shouldn't be greater than 50 characters, should begin with a capital letter and written in the imperative eg. Add instead of Added or Adds.</p>"},{"location":"week-3-git/ce103-week-3-git/#writing-good-commit-messages-4","title":"Writing Good Commit Messages (4)","text":""},{"location":"week-3-git/ce103-week-3-git/#3-body","title":"3. Body","text":"<p>The body is used to explain what changes you made and why you made them. Not all commits are complex enough that they need a body, especially if you are working on a personal project alone, and as such writing a body is optional.</p> <p>A blank line between the body and the subject is required and each line should have no more than 72 characters.</p>"},{"location":"week-3-git/ce103-week-3-git/#writing-good-commit-messages-5","title":"Writing Good Commit Messages (5)","text":""},{"location":"week-3-git/ce103-week-3-git/#4footer","title":"4.Footer","text":"<p>The footer is also optional and mainly used when you are using an issue tracker to reference the issue ID.</p>"},{"location":"week-3-git/ce103-week-3-git/#writing-good-commit-messages-6","title":"Writing Good Commit Messages (6)","text":""},{"location":"week-3-git/ce103-week-3-git/#example-commit-message","title":"Example Commit Message","text":"<pre><code>feat: Summarize changes in around 50 characters or less\n\nMore detailed explanatory text, if necessary. Wrap it to about 72\ncharacters or so. In some contexts, the first line is treated as the\nsubject of the commit and the rest of the text as the body. The\nblank line separating the summary from the body is critical (unless\nyou omit the body entirely); various tools like `log`, `shortlog`\nand `rebase` can get confused if you run the two together.\n\nExplain the problem that this commit is solving. Focus on why you\nare making this change as opposed to how (the code explains that).\nAre there side effects or other unintuitive consequences of this\nchange? Here's the place to explain them.\n\nFurther paragraphs come after blank lines.\n\n - Bullet points are okay, too\n\n - Typically a hyphen or asterisk is used for the bullet, preceded\n   by a single space, with blank lines in between, but conventions\n   vary here\n\nIf you use an issue tracker, put references to them at the bottom,\nlike this:\n\nResolves: #123\nSee also: #456, #789\n</code></pre>"},{"location":"week-3-git/ce103-week-3-git/#writing-good-commit-messages-7","title":"Writing Good Commit Messages (7)","text":"<ul> <li>You can edit last commit with the following command </li> </ul> <pre><code>git commit -a -m \"New commit message\"\n</code></pre> <pre><code>git commit --amend -m \"New commit message\"\n</code></pre>"},{"location":"week-3-git/ce103-week-3-git/#writing-good-commit-messages-7_1","title":"Writing Good Commit Messages (7)","text":"<ul> <li>Edit last commit output</li> </ul>"},{"location":"week-3-git/ce103-week-3-git/#add-files-to-index-1","title":"Add Files to Index (1)","text":"<p>I have created two more text files in my working directory viz. edureka5.txt and edureka6.txt but they are not added to the index yet.</p> <p>I am adding edureka5.txt using the command</p> <pre><code>git add edureka5.txt\n</code></pre>"},{"location":"week-3-git/ce103-week-3-git/#add-files-to-index-2","title":"Add Files to Index (2)","text":""},{"location":"week-3-git/ce103-week-3-git/#add-files-to-index-3","title":"Add Files to Index (3)","text":"<p>I have added edureka5.txt to the index explicitly but not edureka6.txt and made changes in the previous files. I want to commit all changes in the directory at once.</p>"},{"location":"week-3-git/ce103-week-3-git/#add-files-to-index-4","title":"Add Files to Index (4)","text":"<p>This command will commit a snapshot of all changes in the working directory but only includes modifications to tracked files i.e. the files that have been added with git add at some point in their history. Hence, edureka6.txt was not committed because it was not added to the index yet. But changes in all previous files present in the repository were committed, i.e. edureka1.txt, edureka2.txt, edureka3.txt, edureka4.txt and edureka5.txt. Now I have made my desired commits in my local repository</p>"},{"location":"week-3-git/ce103-week-3-git/#add-files-to-index-5","title":"Add Files to Index (5)","text":"<p>your local repository consists of three \"trees\" maintained by git. the first one is your Working Directory which holds the actual files. the second one is the Index which acts as a staging area and finally the HEAD which points to the last commit you've made</p>"},{"location":"week-3-git/ce103-week-3-git/#add-files-to-index-6","title":"Add Files to Index (6)","text":""},{"location":"week-3-git/ce103-week-3-git/#update-local-repo-before-sending-1","title":"Update local repo before sending (1)","text":""},{"location":"week-3-git/ce103-week-3-git/#fetching","title":"Fetching","text":"<p>If we have a remote Git branch, for example a branch on Github, it can happen that the remote branch has commits that the current branch doesn't have! Maybe another branch got merged, your colleague pushed a quick fix, and so on.</p>"},{"location":"week-3-git/ce103-week-3-git/#update-local-repo-before-sending-2","title":"Update local repo before sending (2)","text":""},{"location":"week-3-git/ce103-week-3-git/#fetching_1","title":"Fetching","text":"<p>We can get these changes locally, by performing a <code>git fetch</code> on the remote branch! It doesn't affect your local branch in any way: a <code>fetch</code> simply downloads new data.</p>"},{"location":"week-3-git/ce103-week-3-git/#update-local-repo-before-sending-3","title":"Update local repo before sending (3)","text":""},{"location":"week-3-git/ce103-week-3-git/#fetching_2","title":"Fetching","text":""},{"location":"week-3-git/ce103-week-3-git/#update-local-repo-before-sending-4","title":"Update local repo before sending (4)","text":""},{"location":"week-3-git/ce103-week-3-git/#fetching_3","title":"Fetching","text":"<p>We can now see all the changes that have been made since we last pushed! We can decide what we want to do with the new data now that we have it locally.</p>"},{"location":"week-3-git/ce103-week-3-git/#update-local-repo-before-sending-5","title":"Update local repo before sending (5)","text":""},{"location":"week-3-git/ce103-week-3-git/#pulling","title":"Pulling","text":"<p>Although a <code>git fetch</code> is very useful in order to get the remote information of a branch, we can also perform a <code>git pull</code>. A <code>git pull</code> is actually two commands in one: a <code>git fetch</code>, and a <code>git merge</code>. When we're pulling changes from the origin, we're first fetching all the data like we did with a <code>git fetch</code>, after which the latest changes are automatically merged into the local branch</p>"},{"location":"week-3-git/ce103-week-3-git/#update-local-repo-before-sending-6","title":"Update local repo before sending (6)","text":""},{"location":"week-3-git/ce103-week-3-git/#pulling_1","title":"Pulling","text":""},{"location":"week-3-git/ce103-week-3-git/#update-local-repo-before-sending-7","title":"Update local repo before sending (7)","text":""},{"location":"week-3-git/ce103-week-3-git/#pulling_2","title":"Pulling","text":"<p>Awesome, we're now perfectly in sync with the remote branch and have all the latest changes!</p>"},{"location":"week-3-git/ce103-week-3-git/#update-local-repo-before-sending-8","title":"Update local repo before sending (8)","text":""},{"location":"week-3-git/ce103-week-3-git/#pulling_3","title":"Pulling","text":""},{"location":"week-3-git/ce103-week-3-git/#git-pull","title":"git pull","text":"<p>Note that before you affect changes to the central repository you should always pull changes from the central repository to your local repository to get updated with the work of all the collaborators that have been contributing in the central repository. For that we will use the pull command.</p>"},{"location":"week-3-git/ce103-week-3-git/#update-local-repo-before-sending-9","title":"Update local repo before sending (9)","text":""},{"location":"week-3-git/ce103-week-3-git/#pulling_4","title":"Pulling","text":""},{"location":"week-3-git/ce103-week-3-git/#git-pull_1","title":"git pull","text":"<p>But first, you need to set your central repository as origin using the command</p> <pre><code>git remote add origin &lt;link of your central repository&gt;\n</code></pre>"},{"location":"week-3-git/ce103-week-3-git/#update-local-repo-before-sending-10","title":"Update local repo before sending (10)","text":""},{"location":"week-3-git/ce103-week-3-git/#pulling-git-pull","title":"Pulling / <code>git pull</code>","text":"<p>Now that my origin is set</p>"},{"location":"week-3-git/ce103-week-3-git/#update-local-repo-before-sending-11","title":"Update local repo before sending (11)","text":""},{"location":"week-3-git/ce103-week-3-git/#pulling-git-pull_1","title":"Pulling / <code>git pull</code>","text":"<p>let us extract files from the origin using pull. For that use the command</p> <pre><code>git pull origin master\n</code></pre>"},{"location":"week-3-git/ce103-week-3-git/#update-local-repo-before-sending-12","title":"Update local repo before sending (12)","text":""},{"location":"week-3-git/ce103-week-3-git/#pulling-git-pull_2","title":"Pulling / <code>git pull</code>","text":"<p>This command will copy all the files from the master branch of remote repository to your local repository.</p>"},{"location":"week-3-git/ce103-week-3-git/#update-local-repo-before-sending-13","title":"Update local repo before sending (13)","text":""},{"location":"week-3-git/ce103-week-3-git/#pulling-git-pull_3","title":"Pulling / <code>git pull</code>","text":"<p>Since my local repository was already updated with files from master branch, hence the message is Already up-to-date. Refer to the screen shot above</p>"},{"location":"week-3-git/ce103-week-3-git/#update-local-repo-before-sending-14","title":"Update local repo before sending (14)","text":""},{"location":"week-3-git/ce103-week-3-git/#pulling-git-pull_4","title":"Pulling / <code>git pull</code>","text":"<p>One can also try pulling files from a different branch using the following command:</p> <pre><code>git pull origin &lt;branch-name&gt;\n</code></pre>"},{"location":"week-3-git/ce103-week-3-git/#update-local-repo-before-sending-15","title":"Update local repo before sending (15)","text":""},{"location":"week-3-git/ce103-week-3-git/#pulling-git-pull_5","title":"Pulling / <code>git pull</code>","text":"<p>Your local Git repository is now updated with all the recent changes. It is time you make changes in the central repository by using the push command.</p>"},{"location":"week-3-git/ce103-week-3-git/#send-changes-to-remote-repo-1","title":"Send Changes to Remote Repo (1)","text":""},{"location":"week-3-git/ce103-week-3-git/#git-push","title":"git push","text":"<ul> <li>This command transfers commits from your local repository to your remote repository. It is the opposite of pull operation.</li> </ul>"},{"location":"week-3-git/ce103-week-3-git/#send-changes-to-remote-repo-2","title":"Send Changes to Remote Repo (2)","text":""},{"location":"week-3-git/ce103-week-3-git/#git-push_1","title":"git push","text":"<ul> <li>Pulling imports commits to local repositories whereas pushing exports commits to the remote repositories</li> </ul>"},{"location":"week-3-git/ce103-week-3-git/#send-changes-to-remote-repo-3","title":"Send Changes to Remote Repo (3)","text":""},{"location":"week-3-git/ce103-week-3-git/#git-push_2","title":"git push","text":"<ul> <li>The use of git push is to publish your local changes to a central repository. After you\u2019ve accumulated several local commits and are ready to share them with the rest of the team,</li> </ul>"},{"location":"week-3-git/ce103-week-3-git/#send-changes-to-remote-repo-4","title":"Send Changes to Remote Repo (4)","text":""},{"location":"week-3-git/ce103-week-3-git/#git-push_3","title":"git push","text":"<p>you can then push them to the central repository by using the following command</p> <pre><code>git push &lt;remote&gt;\n</code></pre>"},{"location":"week-3-git/ce103-week-3-git/#send-changes-to-remote-repo-5","title":"Send Changes to Remote Repo (5)","text":""},{"location":"week-3-git/ce103-week-3-git/#git-push_4","title":"git push","text":"<p>This remote refers to the remote repository which had been set before using the pull command.</p>"},{"location":"week-3-git/ce103-week-3-git/#send-changes-to-remote-repo-6","title":"Send Changes to Remote Repo (6)","text":""},{"location":"week-3-git/ce103-week-3-git/#git-push_5","title":"git push","text":"<ul> <li>This pushes the changes from the local repository to the remote repository along with all the necessary commits and internal objects. This creates a local branch in the destination repository</li> </ul>"},{"location":"week-3-git/ce103-week-3-git/#send-changes-to-remote-repo-7","title":"Send Changes to Remote Repo (7)","text":""},{"location":"week-3-git/ce103-week-3-git/#git-push_6","title":"git push","text":"<p>The below files are the files which we have already committed previously in the commit section and they are all \u201cpush-ready\u201c.</p>"},{"location":"week-3-git/ce103-week-3-git/#send-changes-to-remote-repo-8","title":"Send Changes to Remote Repo (8)","text":""},{"location":"week-3-git/ce103-week-3-git/#git-push_7","title":"git push","text":"<p>I will use the command <code>git push origin master</code> to reflect these files in the master branch of my central repository.</p>"},{"location":"week-3-git/ce103-week-3-git/#send-changes-to-remote-repo-9","title":"Send Changes to Remote Repo (9)","text":""},{"location":"week-3-git/ce103-week-3-git/#git-push_8","title":"git push","text":""},{"location":"week-3-git/ce103-week-3-git/#send-changes-to-remote-repo-10","title":"Send Changes to Remote Repo (10)","text":""},{"location":"week-3-git/ce103-week-3-git/#git-push_9","title":"git push","text":""},{"location":"week-3-git/ce103-week-3-git/#send-changes-to-remote-repo-11","title":"Send Changes to Remote Repo (11)","text":""},{"location":"week-3-git/ce103-week-3-git/#git-push_10","title":"git push","text":""},{"location":"week-3-git/ce103-week-3-git/#send-changes-to-remote-repo-12","title":"Send Changes to Remote Repo (12)","text":""},{"location":"week-3-git/ce103-week-3-git/#git-push_11","title":"git push","text":"<p>To prevent overwriting, Git does not allow push when it results in a non-fast forward merge in the destination repository.</p>"},{"location":"week-3-git/ce103-week-3-git/#send-changes-to-remote-repo-13","title":"Send Changes to Remote Repo (13)","text":""},{"location":"week-3-git/ce103-week-3-git/#git-push_12","title":"git push","text":"<p>A non-fast forward merge means an upstream merge i.e. merging with ancestor or parent branches from a child branch To enable such merge, use the command below</p> <pre><code>git push &lt;remote&gt; -force\n</code></pre> <p>The above command forces the push operation even if it results in a non-fast forward merge</p>"},{"location":"week-3-git/ce103-week-3-git/#branching-1","title":"Branching (1)","text":""},{"location":"week-3-git/ce103-week-3-git/#git-branch","title":"git branch","text":"<p>Branches in Git are nothing but pointers to a specific commit. Git generally prefers to keep its branches as lightweight as possible.</p>"},{"location":"week-3-git/ce103-week-3-git/#branching-2","title":"Branching (2)","text":""},{"location":"week-3-git/ce103-week-3-git/#git-branch_1","title":"git branch","text":"<p>There are basically two types of branches viz.</p> <ul> <li> <p>local branches</p> </li> <li> <p>remote tracking branches.</p> </li> </ul>"},{"location":"week-3-git/ce103-week-3-git/#branching-3","title":"Branching (3)","text":""},{"location":"week-3-git/ce103-week-3-git/#git-branch_2","title":"git branch","text":"<p>A local branch is just another path of your working tree. On the other hand, remote tracking branches have special purposes. Some of them are:</p> <p>They link your work from the local repository to the work on central repository.</p>"},{"location":"week-3-git/ce103-week-3-git/#branching-4","title":"Branching (4)","text":""},{"location":"week-3-git/ce103-week-3-git/#git-branch_3","title":"git branch","text":"<p>They automatically detect which remote branches to get changes from, when you use git pull.</p> <p></p>"},{"location":"week-3-git/ce103-week-3-git/#branching-5","title":"Branching (5)","text":""},{"location":"week-3-git/ce103-week-3-git/#learn-current-branch","title":"Learn current branch","text":"<p>You can check what your current branch is by using the command</p> <pre><code>git branch\n</code></pre> <p>The one mantra that you should always be chanting while branching is \u201cbranch early, and branch often\u201d</p>"},{"location":"week-3-git/ce103-week-3-git/#branching-6","title":"Branching (6)","text":""},{"location":"week-3-git/ce103-week-3-git/#list-local-branches","title":"List Local Branches","text":"<pre><code>git branch -l\n</code></pre>"},{"location":"week-3-git/ce103-week-3-git/#branching-7","title":"Branching (7)","text":""},{"location":"week-3-git/ce103-week-3-git/#list-remote-branches","title":"List Remote Branches","text":"<pre><code>git branch -r\n</code></pre>"},{"location":"week-3-git/ce103-week-3-git/#branching-8","title":"Branching (8)","text":""},{"location":"week-3-git/ce103-week-3-git/#list-all-local-and-remote-branches","title":"List All Local and Remote Branches","text":"<pre><code>git branch -a\n</code></pre>"},{"location":"week-3-git/ce103-week-3-git/#branching-9","title":"Branching (9)","text":"<p>Removing merged git branches</p> <p>(after pull-request action in github)</p> <p>If you merged your branch to base branch in github and delete it on github your local branch list will not be updated by it self. You have to use the following command to update local and remote branch lists. Use the following command to syncronize your repository with remote upstream repo.</p> <pre><code>git remote update --prune\n</code></pre>"},{"location":"week-3-git/ce103-week-3-git/#branching-10","title":"Branching (10)","text":""},{"location":"week-3-git/ce103-week-3-git/#create-branch","title":"Create Branch","text":"<p>To create a new branch we use the following command</p> <pre><code>git branch &lt;branch-name&gt;\n</code></pre> <p>The diagram below shows the workflow when a new branch is created. When we create a new branch it originates from the master branch itself.</p>"},{"location":"week-3-git/ce103-week-3-git/#branching-11","title":"Branching (11)","text":""},{"location":"week-3-git/ce103-week-3-git/#create-branch_1","title":"Create Branch","text":""},{"location":"week-3-git/ce103-week-3-git/#branching-12","title":"Branching (12)","text":""},{"location":"week-3-git/ce103-week-3-git/#create-branch_2","title":"Create Branch","text":"<p>Since there is no storage/memory overhead with making many branches, it is easier to logically divide up your work rather than have big chunky branches</p> <p>You can create and change branch with following command, create a new branch named \"feature_x\" and switch to it using</p> <pre><code>git checkout -b feature_x\n</code></pre>"},{"location":"week-3-git/ce103-week-3-git/#branching-13","title":"Branching (13)","text":""},{"location":"week-3-git/ce103-week-3-git/#change-branch","title":"Change Branch","text":"<pre><code>git checkout &lt;branch-name&gt;\n</code></pre> Example: <pre><code>git checkout master\n</code></pre>"},{"location":"week-3-git/ce103-week-3-git/#branching-14","title":"Branching (14)","text":""},{"location":"week-3-git/ce103-week-3-git/#change-branch_1","title":"Change Branch","text":"<p>Branching includes the work of a particular commit along with all parent commits. As you can see in the diagram above, the newBranch has detached itself from the master and hence will create a different path</p>"},{"location":"week-3-git/ce103-week-3-git/#branching-15","title":"Branching (15)","text":""},{"location":"week-3-git/ce103-week-3-git/#delete-local-branch","title":"Delete Local Branch","text":"<p>and delete the branch again, before doing this switch to main or master branches.</p> <pre><code>git branch -d feature_x\n</code></pre>"},{"location":"week-3-git/ce103-week-3-git/#branching-16","title":"Branching (16)","text":""},{"location":"week-3-git/ce103-week-3-git/#delete-remote-branch","title":"Delete Remote Branch","text":"<p>and delete the branch again, before doing this switch to main or master branches.</p> <pre><code>git push origin --delete feature_x\n</code></pre> <p>How to delete remote branches in Git</p>"},{"location":"week-3-git/ce103-week-3-git/#branching-17","title":"Branching (17)","text":""},{"location":"week-3-git/ce103-week-3-git/#push-specific-branch-to-remote","title":"Push Specific Branch to Remote","text":"<p>A branch is not available to others unless you push the branch to your remote repository</p> <pre><code>git push origin &lt;branch&gt;\n</code></pre>"},{"location":"week-3-git/ce103-week-3-git/#branching-18","title":"Branching (18)","text":""},{"location":"week-3-git/ce103-week-3-git/#update-merge-conflicts","title":"Update &amp; Merge (Conflicts)","text":"<p>to update your local repository to the newest commit, execute</p> <pre><code>git pull\n</code></pre> <p>in your working directory to fetch and merge remote changes.</p> <p>to merge another branch into your active branch (e.g. master), use</p> <pre><code>git merge &lt;branch&gt;\n</code></pre>"},{"location":"week-3-git/ce103-week-3-git/#branching-19","title":"Branching (19)","text":""},{"location":"week-3-git/ce103-week-3-git/#update-merge-conflicts_1","title":"Update &amp; Merge (Conflicts)","text":"<p>in both cases git tries to auto-merge changes. Unfortunately, this is not always possible and results in conflicts. You are responsible to merge those conflicts manually by editing the files shown by git. After changing, you need to mark them as merged with</p> <pre><code>git add &lt;filename&gt;\n</code></pre> <p>before merging changes, you can also preview them by using</p> <pre><code>git diff &lt;source_branch&gt; &lt;target_branch&gt;\n</code></pre> <p>Git merge conflicts | Atlassian Git Tutorial</p>"},{"location":"week-3-git/ce103-week-3-git/#branching-20","title":"Branching (20)","text":""},{"location":"week-3-git/ce103-week-3-git/#update-merge-conflicts_2","title":"Update &amp; Merge (Conflicts)","text":"<p>There are two types of merges Git can perform: a fast-forward, or a no-fast-forward</p>"},{"location":"week-3-git/ce103-week-3-git/#branching-21","title":"Branching (21)","text":""},{"location":"week-3-git/ce103-week-3-git/#update-merge-conflicts_3","title":"Update &amp; Merge (Conflicts)","text":""},{"location":"week-3-git/ce103-week-3-git/#fast-forward-ff","title":"Fast-forward (<code>--ff</code>)","text":"<p>A fast-forward merge can happen when the current branch has no extra commits compared to the branch we\u2019re merging. Git is... lazy and will first try to perform the easiest option: the fast-forward! This type of merge doesn\u2019t create a new commit, but rather merges the commit(s) on the branch we\u2019re merging right in the current branch</p>"},{"location":"week-3-git/ce103-week-3-git/#branching-22","title":"Branching (22)","text":""},{"location":"week-3-git/ce103-week-3-git/#update-merge-conflicts_4","title":"Update &amp; Merge (Conflicts)","text":""},{"location":"week-3-git/ce103-week-3-git/#fast-forward-ff_1","title":"Fast-forward (<code>--ff</code>)","text":""},{"location":"week-3-git/ce103-week-3-git/#branching-23","title":"Branching (23)","text":""},{"location":"week-3-git/ce103-week-3-git/#update-merge-conflicts_5","title":"Update &amp; Merge (Conflicts)","text":"<p>Perfect! We now have all the changes that were made on the <code>dev</code> branch available on the <code>master</code> branch. So, what's the no-fast-forward all about?</p>"},{"location":"week-3-git/ce103-week-3-git/#branching-24","title":"Branching (24)","text":""},{"location":"week-3-git/ce103-week-3-git/#update-merge-conflicts_6","title":"Update &amp; Merge (Conflicts)","text":""},{"location":"week-3-git/ce103-week-3-git/#no-fast-foward-no-ff","title":"No-fast-foward (<code>--no-ff</code>)","text":"<p>It's great if your current branch doesn't have any extra commits compared to the branch that you want to merge, but unfortunately that's rarely the case! If we committed changes on the current branch that the branch we want to merge doesn't have, git will perform a no-fast-forward merge.</p>"},{"location":"week-3-git/ce103-week-3-git/#branching-25","title":"Branching (25)","text":""},{"location":"week-3-git/ce103-week-3-git/#update-merge-conflicts_7","title":"Update &amp; Merge (Conflicts)","text":""},{"location":"week-3-git/ce103-week-3-git/#no-fast-foward-no-ff_1","title":"No-fast-foward (<code>--no-ff</code>)","text":"<p>With a no-fast-forward merge, Git creates a new merging commit on the active branch. The commit's parent commits point to both the active branch and the branch that we want to merge!</p>"},{"location":"week-3-git/ce103-week-3-git/#branching-26","title":"Branching (26)","text":""},{"location":"week-3-git/ce103-week-3-git/#update-merge-conflicts_8","title":"Update &amp; Merge (Conflicts)","text":""},{"location":"week-3-git/ce103-week-3-git/#no-fast-foward-no-ff_2","title":"No-fast-foward (<code>--no-ff</code>)","text":""},{"location":"week-3-git/ce103-week-3-git/#branching-27","title":"Branching (27)","text":""},{"location":"week-3-git/ce103-week-3-git/#update-merge-conflicts_9","title":"Update &amp; Merge (Conflicts)","text":""},{"location":"week-3-git/ce103-week-3-git/#no-fast-foward-no-ff_3","title":"No-fast-foward (<code>--no-ff</code>)","text":"<p>No big deal, a perfect merge! The <code>master</code> branch now contains all the changes that we've made on the <code>dev</code> branch.</p>"},{"location":"week-3-git/ce103-week-3-git/#branching-28","title":"Branching (28)","text":""},{"location":"week-3-git/ce103-week-3-git/#merge-conflicts","title":"Merge Conflicts","text":"<p>Although Git is good at deciding how to merge branches and add changes to files, it cannot always make this decision all by itself This can happen when the two branches we're trying to merge have changes on the same line in the same file, or if one branch deleted a file that another branch modified, and so on.</p>"},{"location":"week-3-git/ce103-week-3-git/#branching-29","title":"Branching (29)","text":""},{"location":"week-3-git/ce103-week-3-git/#merge-conflicts_1","title":"Merge Conflicts","text":"<p>In that case, Git will ask you to help decide which of the two options we want to keep! Let's say that on both branches, we edited the first line in the <code>README.md</code>.</p>"},{"location":"week-3-git/ce103-week-3-git/#branching-30","title":"Branching (30)","text":""},{"location":"week-3-git/ce103-week-3-git/#merge-conflicts_2","title":"Merge Conflicts","text":"<p>If we want to merge <code>dev</code> into <code>master</code>, this will end up in a merge conflict: would you like the title to be <code>Hello!</code> or <code>Hey!</code>?</p>"},{"location":"week-3-git/ce103-week-3-git/#branching-31","title":"Branching (31)","text":""},{"location":"week-3-git/ce103-week-3-git/#merge-conflicts_3","title":"Merge Conflicts","text":"<p>When trying to merge the branches, Git will show you where the conflict happens. We can manually remove the changes we don't want to keep, save the changes, add the changed file again, and commit the changes</p> <p></p>"},{"location":"week-3-git/ce103-week-3-git/#branching-32","title":"Branching (32)","text":""},{"location":"week-3-git/ce103-week-3-git/#merge-conflicts_4","title":"Merge Conflicts","text":"<p>Although merge conflicts are often quite annoying, it makes total sense: Git shouldn't just assume which change we want to keep</p>"},{"location":"week-3-git/ce103-week-3-git/#branching-33","title":"Branching (33)","text":""},{"location":"week-3-git/ce103-week-3-git/#sample-conflict-1","title":"Sample Conflict -1","text":"<p>participants.txt</p> <p>(I added a hyphen before each name)</p> <pre><code>Finance team\n Charles\n Lisa\n John\n Stacy\n Alexander\n</code></pre> <p></p><pre><code>git init\n</code></pre> <pre><code>git add .\n</code></pre> <pre><code>git commit \u2013m 'Initial list for finance team'\n</code></pre>"},{"location":"week-3-git/ce103-week-3-git/#branching-34","title":"Branching (34)","text":""},{"location":"week-3-git/ce103-week-3-git/#sample-conflict-1_1","title":"Sample Conflict -1","text":"<p>Create a new branch called marketing using the following syntax</p> <pre><code>git checkout \u2013b marketing\n</code></pre>"},{"location":"week-3-git/ce103-week-3-git/#branching-35","title":"Branching (35)","text":""},{"location":"week-3-git/ce103-week-3-git/#sample-conflict-1_2","title":"Sample Conflict -1","text":"<p>Now open the <code>participants.txt</code> file and start entering the names for the marketing department below the finance team list, as follows: (I added a hyphen before each name)</p> <pre><code>Marketing team\n Collins\n Linda\n Patricia\n Morgan\n</code></pre> <pre><code>git add .\n</code></pre> <pre><code>git commit \u2013m 'Unfinished list of marketing team'\n</code></pre> <pre><code>git checkout master\n</code></pre>"},{"location":"week-3-git/ce103-week-3-git/#branching-36","title":"Branching (36)","text":""},{"location":"week-3-git/ce103-week-3-git/#sample-conflict-1_3","title":"Sample Conflict -1","text":"<p>Open the file and delete the names Alexander and Stacy, save, close, add the changes, and commit with the commit message Final list from Finance team</p> <pre><code>git add .\n</code></pre> <pre><code>git commit \u2013m \"Final list from Finance team\"\n</code></pre> <pre><code>git checkout marketing\n</code></pre>"},{"location":"week-3-git/ce103-week-3-git/#branching-37","title":"Branching (37)","text":""},{"location":"week-3-git/ce103-week-3-git/#sample-conflict-1_4","title":"Sample Conflict -1","text":"<p>Open the file and add the fifth name, Amanda, for the marketing team, save, add, and commit</p> <pre><code>git add .\n</code></pre> <pre><code>git commit \u2013m \"Initial list of marketing team\"\n</code></pre> <p>names entered for marketing have been confirmed; now we need to merge these two lists, which can be done by the following command</p> <pre><code>git merge master\n</code></pre>"},{"location":"week-3-git/ce103-week-3-git/#branching-38","title":"Branching (38)","text":""},{"location":"week-3-git/ce103-week-3-git/#sample-conflict-1_5","title":"Sample Conflict -1","text":"<pre><code>Auto-merging participants.txt\nCONFLICT (content): Merge conflict in participants.txt\nAutomatic merge failed; fix conflicts and then commit the result.\n</code></pre>"},{"location":"week-3-git/ce103-week-3-git/#branching-39","title":"Branching (39)","text":""},{"location":"week-3-git/ce103-week-3-git/#sample-conflict-1_6","title":"Sample Conflict -1","text":"<pre><code>Finance team\n-Charles\n-Lisa\n-John\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\n-Stacy\n-Alexander\n\nMarketing team\n- Collins\n- Linda\n- Patricia\n- Morgan\n- Amanda\n=======\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; master\n</code></pre>"},{"location":"week-3-git/ce103-week-3-git/#branching-40","title":"Branching (40)","text":""},{"location":"week-3-git/ce103-week-3-git/#sample-conflict-1_7","title":"Sample Conflict -1","text":"<pre><code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;\nChanges made on the branch that is being merged into. In most cases,\nthis is the branch that I have currently checked out (i.e. HEAD).\n|||||||\nThe common ancestor version.\n=======\nChanges made on the branch that is being merged in. This is often a\nfeature/topic branch.\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n</code></pre>"},{"location":"week-3-git/ce103-week-3-git/#branching-41","title":"Branching (41)","text":""},{"location":"week-3-git/ce103-week-3-git/#sample-conflict-1_8","title":"Sample Conflict -1","text":"<ul> <li>remove them</li> <li>keep the lines you want to see in the final version of the file</li> <li>add and commit</li> </ul>"},{"location":"week-3-git/ce103-week-3-git/#branching-42","title":"Branching (42)","text":""},{"location":"week-3-git/ce103-week-3-git/#sample-conflict-1_9","title":"Sample Conflict -1","text":"<p>If we want to save all to our version</p> <pre><code>git checkout --ours .  # checkout our local version of all files\n</code></pre> <pre><code>git add -u             # mark all conflicted files as merged\n</code></pre> <pre><code>git commit             # commit the merge\n</code></pre>"},{"location":"week-3-git/ce103-week-3-git/#branching-43","title":"Branching (43)","text":""},{"location":"week-3-git/ce103-week-3-git/#sample-conflict-1_10","title":"Sample Conflict -1","text":"<p>If we want to discard all our revision</p> <pre><code>git checkout --theirs .  # checkout remote version of all files\n</code></pre> <pre><code>git add -u             # mark all conflicted files as merged\n</code></pre> <pre><code>git commit             # commit the merge\n</code></pre>"},{"location":"week-3-git/ce103-week-3-git/#branching-44","title":"Branching (44)","text":""},{"location":"week-3-git/ce103-week-3-git/#sample-conflict-2","title":"Sample Conflict -2","text":"<p>You're going to pull some changes, but oops, you're not up to date:</p> <pre><code>git fetch origin\n</code></pre> <p></p><pre><code>git pull origin master\n</code></pre> Output <pre><code>From ssh://gitosis@example.com:22/projectname\n * branch            master     -&gt; FETCH_HEAD\nUpdating a030c3a..ee25213\nerror: Entry 'filename.c' not uptodate. Cannot merge.\n</code></pre>"},{"location":"week-3-git/ce103-week-3-git/#branching-45","title":"Branching (45)","text":""},{"location":"week-3-git/ce103-week-3-git/#sample-conflict-2_1","title":"Sample Conflict -2","text":"<p>So you get up-to-date and try again, but have a conflict:</p> <pre><code>git add filename.c\n</code></pre> <pre><code>git commit -m \"made some wild and crazy changes\"\n</code></pre> <p></p><pre><code>git pull origin master\n</code></pre> Output <pre><code>From ssh://gitosis@example.com:22/projectname\n * branch            master     -&gt; FETCH_HEAD\nAuto-merging filename.c\nCONFLICT (content): Merge conflict in filename.c\nAutomatic merge failed; fix conflicts and then commit the result.\n</code></pre>"},{"location":"week-3-git/ce103-week-3-git/#branching-46","title":"Branching (46)","text":""},{"location":"week-3-git/ce103-week-3-git/#sample-conflict-2_2","title":"Sample Conflict -2","text":"<p>So you decide to take a look at the changes:</p> <pre><code>git mergetool\n</code></pre> <p>Oh my, oh my, upstream changed some things, but just to use my changes...no...their changes...</p> <pre><code>git checkout --ours filename.c\n</code></pre> <pre><code>git checkout --theirs filename.c\n</code></pre> <pre><code>git add filename.c\n</code></pre> <pre><code>git commit -m \"using theirs\"\n</code></pre>"},{"location":"week-3-git/ce103-week-3-git/#branching-47","title":"Branching (47)","text":""},{"location":"week-3-git/ce103-week-3-git/#sample-conflict-2_3","title":"Sample Conflict -2","text":"<p>And then we try a final time</p> <p></p><pre><code>git pull origin master\n</code></pre> Output <pre><code>From ssh://gitosis@example.com:22/projectname\n * branch            master     -&gt; FETCH_HEAD\nAlready up-to-date.\n</code></pre>"},{"location":"week-3-git/ce103-week-3-git/#tagging","title":"Tagging","text":"<p>it's recommended to create tags for software releases. this is a known concept, which also exists in SVN. You can create a new tag named 1.0.0 by executing</p> <pre><code>git tag 1.0.0 1b2e1d63ff\n</code></pre> <p>the 1b2e1d63ff stands for the first 10 characters of the commit id you want to reference with your tag. You can get the commit id by looking at the...</p>"},{"location":"week-3-git/ce103-week-3-git/#log-1","title":"Log (1)","text":"<p>in its simplest form, you can study repository history using.. git log</p> <p>You can add a lot of parameters to make the log look like what you want. To see only the commits of a certain author:</p> <pre><code>git log --author=bob\n</code></pre>"},{"location":"week-3-git/ce103-week-3-git/#log-2","title":"Log (2)","text":"<p>To see a very compressed log where each commit is one line:</p> <pre><code>git log --pretty=oneline\n</code></pre>"},{"location":"week-3-git/ce103-week-3-git/#log-3","title":"Log (3)","text":"<p>Or maybe you want to see an ASCII art tree of all the branches, decorated with the names of tags and branches:</p> <pre><code>git log --graph --oneline --decorate --all\n</code></pre>"},{"location":"week-3-git/ce103-week-3-git/#log-4","title":"Log (4)","text":"<p>See only which files have changed:</p> <pre><code>git log --name-status\n</code></pre>"},{"location":"week-3-git/ce103-week-3-git/#log-5","title":"Log (5)","text":"<pre><code>git log --pretty=format:\"%h%x09%an%x09%ad%x09%s\"\n</code></pre>"},{"location":"week-3-git/ce103-week-3-git/#log-6","title":"Log (6)","text":"<p>These are just a few of the possible parameters you can use. For more, see</p> <pre><code>git log --help\n</code></pre>"},{"location":"week-3-git/ce103-week-3-git/#replace-local-changes-1","title":"Replace Local Changes (1)","text":"<p>In case you did something wrong, which for sure never happens ;), you can replace local changes using the command</p> <pre><code>git checkout -- &lt;filename&gt;\n</code></pre> <p>this replaces the changes in your working tree with the last content in HEAD. Changes already added to the index, as well as new files, will be kept.</p>"},{"location":"week-3-git/ce103-week-3-git/#replace-local-changes-2","title":"Replace Local Changes (2)","text":"<p>if you use dot (.) then all local changes will be rollbacked.</p> <pre><code> git checkout -- .\n</code></pre>"},{"location":"week-3-git/ce103-week-3-git/#replace-local-changes-3","title":"Replace Local Changes (3)","text":"<p>If you instead want to drop all your local changes and commits, fetch the latest history from the server and point your local master branch at it like this</p> <pre><code>git fetch origin\n</code></pre> <pre><code>git reset --hard origin/master\n</code></pre>"},{"location":"week-3-git/ce103-week-3-git/#reflog-1","title":"Reflog (1)","text":"<p>Everyone makes mistakes, and that's totally okay! Sometimes it may feel like you've corrupt your git repo so badly that you just want to delete it entirely.</p>"},{"location":"week-3-git/ce103-week-3-git/#reflog-2","title":"Reflog (2)","text":"<p><code>git reflog</code> is a very useful command in order to show a log of all the actions that have been taken! This includes merges, resets, reverts: basically any alteration to your branch.</p>"},{"location":"week-3-git/ce103-week-3-git/#reflog-3","title":"Reflog (3)","text":""},{"location":"week-3-git/ce103-week-3-git/#reflog-4","title":"Reflog (4)","text":"<p>If you made a mistake, you can easily redo this by resetting <code>HEAD</code> based on the information that <code>reflog</code> gives us!</p> <p>Say that we actually didn't want to merge the origin branch. When we execute the <code>git reflog</code> command, we see that the state of the repo before the merge is at <code>HEAD@{1}</code>. Let's perform a <code>git reset</code> to point HEAD back to where it was on <code>HEAD@{1}</code>!</p>"},{"location":"week-3-git/ce103-week-3-git/#reflog-5","title":"Reflog (5)","text":"<p>We can see that the latest action has been pushed to the <code>reflog</code></p>"},{"location":"week-3-git/ce103-week-3-git/#resetting-1","title":"Resetting (1)","text":"<p>It can happen that we committed changes that we didn't want later on. Maybe it's a <code>WIP</code> commit, or maybe a commit that introduced bugs! In that case, we can perform a <code>git reset</code>.</p>"},{"location":"week-3-git/ce103-week-3-git/#resetting-2","title":"Resetting (2)","text":"<p>A <code>git reset</code> gets rid of all the current staged files and gives us control over where <code>HEAD</code> should point to.</p>"},{"location":"week-3-git/ce103-week-3-git/#soft-reset-1","title":"Soft Reset (1)","text":"<p>A soft reset moves <code>HEAD</code> to the specified commit (or the index of the commit compared to <code>HEAD</code>), without getting rid of the changes that were introduced on the commits afterward!</p>"},{"location":"week-3-git/ce103-week-3-git/#soft-reset-2","title":"Soft Reset (2)","text":"<p>Let's say that we don't want to keep the commit <code>9e78i</code> which added a <code>style.css</code> file, and we also don't want to keep the commit <code>035cc</code> which added an <code>index.js</code> file. However, we do want to keep the newly added <code>style.css</code> and <code>index.js</code> file! A perfect use case for a soft reset.</p>"},{"location":"week-3-git/ce103-week-3-git/#soft-reset-3","title":"Soft Reset (3)","text":""},{"location":"week-3-git/ce103-week-3-git/#soft-reset-2_1","title":"Soft Reset (2)","text":"<p>When typing <code>git status</code>, you'll see that we still have access to all the changes that were made on the previous commits. This is great, as this means that we can fix the contents of these files and commit them again later on!</p>"},{"location":"week-3-git/ce103-week-3-git/#hard-reset-1","title":"Hard reset (1)","text":"<p>Sometimes, we don't want to keep the changes that were introduced by certain commits. Unlike a soft reset, we shouldn't need to have access to them any more. Git should simply reset its state back to where it was on the specified commit: this even includes the changes in your working directory and staged files!</p>"},{"location":"week-3-git/ce103-week-3-git/#hard-reset-2","title":"Hard reset (2)","text":"<p>Git has discarded the changes that were introduced on <code>9e78i</code> and <code>035cc</code>, and reset its state to where it was on commit <code>ec5be</code>.</p> <p></p>"},{"location":"week-3-git/ce103-week-3-git/#reverting-1","title":"Reverting (1)","text":"<p>Another way of undoing changes is by performing a <code>git revert</code>. By reverting a certain commit, we create a new commit that contains the reverted changes!</p>"},{"location":"week-3-git/ce103-week-3-git/#reverting-2","title":"Reverting (2)","text":"<p>Let's say that <code>ec5be</code> added an <code>index.js</code> file. Later on, we actually realize we didn't want this change introduced by this commit anymore! Let's revert the <code>ec5be</code> commit.</p> <p>Perfect! Commit <code>9e78i</code> reverted the changes that were introduced by the <code>ec5be</code> commit.</p> <p></p>"},{"location":"week-3-git/ce103-week-3-git/#reverting-3","title":"Reverting (3)","text":"<p>Performing a <code>git revert</code> is very useful in order to undo a certain commit, without modifying the history of the branch.</p>"},{"location":"week-3-git/ce103-week-3-git/#cherry-picking-1","title":"Cherry-picking (1)","text":"<p>When a certain branch contains a commit that introduced changes we need on our active branch, we can <code>cherry-pick</code> that command! By <code>cherry-pick</code>ing a commit, we create a new commit on our active branch that contains the changes that were introduced by the\u00a0<code>cherry-pick</code>ed commit.</p>"},{"location":"week-3-git/ce103-week-3-git/#cherry-picking-1_1","title":"Cherry-picking (1)","text":"<p>Say that commit <code>76d12</code> on the <code>dev</code> branch added a change to the <code>index.js</code> file that we want in our <code>master</code> branch. We don't want the entire we just care about this one single commit!</p> <p></p> <p>Cool, the master branch now contains the changes that <code>76d12</code> introduced</p>"},{"location":"week-3-git/ce103-week-3-git/#rebasing-1","title":"Rebasing (1)","text":"<p>We just saw how we could apply changes from one branch to another by performing a <code>git merge</code>. Another way of adding changes from one branch to another is by performing a <code>git rebase</code>.</p>"},{"location":"week-3-git/ce103-week-3-git/#rebasing-2","title":"Rebasing (2)","text":"<p>A <code>git rebase</code> copies the commits from the current branch, and puts these copied commits on top of the specified branch.</p> <p></p> <p>Perfect, we now have all the changes that were made on the <code>master</code> branch available on the <code>dev</code> branch!</p>"},{"location":"week-3-git/ce103-week-3-git/#rebasing-3","title":"Rebasing (3)","text":"<p>A big difference compared to merging, is that Git won't try to find out which files to keep and not keep. The branch that we're rebasing always has the latest changes that we want to keep! You won't run into any merging conflicts this way, and keeps a nice linear Git history.</p>"},{"location":"week-3-git/ce103-week-3-git/#rebasing-4","title":"Rebasing (4)","text":"<p>This example shows rebasing on the <code>master</code> branch. In bigger projects, however, you usually don't want to do that. A <code>git rebase</code> changes the history of the project as new hashes are created for the copied commits!</p>"},{"location":"week-3-git/ce103-week-3-git/#rebasing-5","title":"Rebasing (5)","text":"<p>Rebasing is great whenever you're working on a feature branch, and the master branch has been updated. You can get all the updates on your branch, which would prevent future merging conflicts!</p>"},{"location":"week-3-git/ce103-week-3-git/#interactive-rebase-1","title":"Interactive Rebase (1)","text":"<p>Before rebasing the commits, we can modify them! We can do so with an interactive rebase. An interactive rebase can also be useful on the branch you're currently working on, and want to modify some commits.</p>"},{"location":"week-3-git/ce103-week-3-git/#interactive-rebase-2","title":"Interactive Rebase (2)","text":"<p>There are 6 actions we can perform on the commits we're rebasing:</p> <ul> <li><code>reword</code>: Change the commit message</li> <li><code>edit</code>: Amend this commit</li> <li><code>squash</code>: Meld commit into the previous commit</li> <li><code>fixup</code>: Meld commit into the previous commit, without keeping the commit's log message</li> <li><code>exec</code>: Run a command on each commit we want to rebase</li> <li><code>drop</code>: Remove the commit</li> </ul>"},{"location":"week-3-git/ce103-week-3-git/#interactive-rebase-3","title":"Interactive Rebase (3)","text":"<p>Awesome! This way, we can have full control over our commits. If we want to remove a commit, we can just <code>drop</code> it.</p> <p></p>"},{"location":"week-3-git/ce103-week-3-git/#interactive-rebase-4","title":"Interactive Rebase (4)","text":"<ul> <li>Or if we want to squash multiple commits together to get a cleaner history, no problem!</li> <li>Interactive rebasing gives you a lot of control over the commits you're trying to rebase, even on the current active branch</li> </ul>"},{"location":"week-3-git/ce103-week-3-git/#useful-hints-1","title":"Useful Hints (1)","text":"<p>built-in git GUI</p> <pre><code>gitk\n</code></pre>"},{"location":"week-3-git/ce103-week-3-git/#useful-hints-2","title":"Useful Hints (2)","text":"<p>use colorful git output</p> <pre><code>git config color.ui true\n</code></pre>"},{"location":"week-3-git/ce103-week-3-git/#useful-hints-3","title":"Useful Hints (3)","text":"<p>show log on just one line per commit</p> <pre><code>git config format.pretty oneline\n</code></pre>"},{"location":"week-3-git/ce103-week-3-git/#useful-hints-4","title":"Useful Hints (4)","text":"<p>use interactive adding</p> <pre><code>git add -i\n</code></pre> <pre><code>HEAD~2          // previous two commits fro head\nHEAD~~         // previous two commits from head\nHEAD@{2}     // reflog order\n18fe5              // previous commit hash\n</code></pre>"},{"location":"week-3-git/ce103-week-3-git/#git-flow","title":"GIT Flow","text":"<p>A successful Git branching model \u00bb nvie.com</p>"},{"location":"week-3-git/ce103-week-3-git/#hotfix","title":"Hotfix","text":"<p>Reference:  -OneFlow \u2013 a Git branching model and workflow | End of Line Blog - a simple git branching model \u00b7 GitHub</p>"},{"location":"week-3-git/ce103-week-3-git/#git-decision-tree","title":"GIT Decision Tree","text":"<p>reference url</p>"},{"location":"week-3-git/ce103-week-3-git/#git-in-action-1","title":"GIT in action (1)","text":""},{"location":"week-3-git/ce103-week-3-git/#git-in-action-2","title":"GIT in action (2)","text":""},{"location":"week-3-git/ce103-week-3-git/#git-in-action-3","title":"GIT in action (3)","text":""},{"location":"week-3-git/ce103-week-3-git/#git-in-action-4","title":"GIT in action (4)","text":""},{"location":"week-3-git/ce103-week-3-git/#git-in-action-5","title":"GIT in action (5)","text":""},{"location":"week-3-git/ce103-week-3-git/#git-in-action-6","title":"GIT in action (6)","text":""},{"location":"week-3-git/ce103-week-3-git/#git-in-action-7","title":"GIT in action (7)","text":""},{"location":"week-3-git/ce103-week-3-git/#gource","title":"Gource","text":"<p>https://gource.io/</p> <p></p>"},{"location":"week-3-git/ce103-week-3-git/#review-git-with-gitmagic-standford-notes","title":"Review GIT with GitMagic Standford Notes","text":"<p>Visit : https://crypto.stanford.edu/~blynn/gitmagic/book.html</p>"},{"location":"week-3-git/ce103-week-3-git/#basic-tricks","title":"Basic Tricks","text":"<p>Rather than diving into a sea of Git commands, use these elementary examples to get your feet wet. Despite their simplicity, each of them are useful. Indeed, in my first months with Git I never ventured beyond the material in this chapter.</p>"},{"location":"week-3-git/ce103-week-3-git/#saving-state","title":"Saving State","text":"<p>About to attempt something drastic? Before you do, take a snapshot of all files in the current directory with:</p> <pre><code>git init\n</code></pre> <pre><code>git add .\n</code></pre> <pre><code>git commit -m \"My first backup\"\n</code></pre> <p>Now if your new edits go awry, restore the pristine version:</p> <pre><code>git reset --hard\n</code></pre> <p>To save the state again:</p> <pre><code>git commit -a -m \"Another backup\"\n</code></pre>"},{"location":"week-3-git/ce103-week-3-git/#add-delete-rename","title":"Add, Delete, Rename","text":"<p>The above only keeps track of the files that were present when you first ran\u00a0git add. If you add new files or subdirectories, you\u2019ll have to tell Git:</p> <pre><code>git add readme.txt Documentation\n</code></pre> <p>Similarly, if you want Git to forget about certain files:</p> <pre><code>git rm kludge.h obsolete.c\n</code></pre> <pre><code>git rm -r incriminating/evidence/\n</code></pre> <p>Git deletes these files for you if you haven\u2019t already.</p> <p>Renaming a file is the same as removing the old name and adding the new name. There\u2019s also the shortcut\u00a0git mv\u00a0which has the same syntax as the\u00a0mv\u00a0command. For example:</p> <pre><code>git mv bug.c feature.c\n</code></pre>"},{"location":"week-3-git/ce103-week-3-git/#advanced-undoredo","title":"Advanced Undo/Redo","text":"<p>Sometimes you just want to go back and forget about every change past a certain point because they\u2019re all wrong. Then:</p> <pre><code>git log\n</code></pre> <p>shows you a list of recent commits, and their SHA1 hashes:</p> <pre><code>commit 766f9881690d240ba334153047649b8b8f11c664\nAuthor: Bob &lt;bob@example.com&gt;\nDate:   Tue Mar 14 01:59:26 2000 -0800\n\nReplace printf() with write().\n\ncommit 82f5ea346a2e651544956a8653c0f58dc151275c\nAuthor: Alice &lt;alice@example.com&gt;\nDate:   Thu Jan 1 00:00:00 1970 +0000\n\nInitial commit.\n</code></pre> <p>The first few characters of the hash are enough to specify the commit; alternatively, copy and paste the entire hash. Type:</p> <pre><code>git reset --hard 766f\n</code></pre> <p>to restore the state to a given commit and erase all newer commits from the record permanently.</p> <p>Other times you want to hop to an old state briefly. In this case, type:</p> <pre><code>git checkout 82f5\n</code></pre> <p>This takes you back in time, while preserving newer commits. However, like time travel in a science-fiction movie, if you now edit and commit, you will be in an alternate reality, because your actions are different to what they were the first time around.</p> <p>This alternate reality is called a\u00a0branch, For now, just remember that</p> <pre><code>git checkout master\n</code></pre> <p>will take you back to the present. Also, to stop Git complaining, always commit or reset your changes before running checkout.</p> <p>To take the computer game analogy again:</p> <ul> <li> <p><code>git reset --hard</code>: load an old save and delete all saved games newer than the one just loaded.</p> </li> <li> <p><code>git checkout</code>: load an old game, but if you play on, the game state will deviate from the newer saves you made the first time around. Any saved games you make now will end up in a separate branch representing the alternate reality you have entered.\u00a0</p> </li> </ul> <p>You can choose only to restore particular files and subdirectories by appending them after the command:</p> <pre><code>git checkout 82f5 some.file another.file\n</code></pre> <p>Take care, as this form of\u00a0checkout\u00a0can silently overwrite files. To prevent accidents, commit before running any checkout command, especially when first learning Git. </p> <p>In general, whenever you feel unsure about any operation, Git command or not, first run\u00a0git commit -a.</p> <p>Don\u2019t like cutting and pasting hashes? Then use:</p> <pre><code>git checkout :/\"My first b\"\n</code></pre> <p>to jump to the commit that starts with a given message. </p> <p>You can also ask for the 5th-last saved state:</p> <pre><code>git checkout master~5\n</code></pre>"},{"location":"week-3-git/ce103-week-3-git/#reverting","title":"Reverting","text":"<p>In a court of law, events can be stricken from the record. Likewise, you can pick specific commits to undo.</p> <pre><code>git commit -a\n</code></pre> <pre><code>git revert 1b6d\n</code></pre> <p>will undo just the commit with the given hash. The revert is recorded as a new commit, which you can confirm by running\u00a0git log.</p>"},{"location":"week-3-git/ce103-week-3-git/#changelog-generation","title":"Changelog Generation","text":"<p>Some projects require a\u00a0changelog. Generate one by typing:</p> <pre><code>git log &gt; ChangeLog\n</code></pre>"},{"location":"week-3-git/ce103-week-3-git/#downloading-files","title":"Downloading Files","text":"<p>Get a copy of a project managed with Git by typing:</p> <pre><code>git clone git://server/path/to/files\n</code></pre> <p>For example, to get all the files I used to create this site:</p> <pre><code>git clone git://git.or.cz/gitmagic.git\n</code></pre> <p>We\u2019ll have much to say about the\u00a0clone\u00a0command soon.</p>"},{"location":"week-3-git/ce103-week-3-git/#the-bleeding-edge","title":"The Bleeding Edge","text":"<p>If you\u2019ve already downloaded a copy of a project using\u00a0git clone, you can upgrade to the latest version with:</p> <pre><code>git pull\n</code></pre>"},{"location":"week-3-git/ce103-week-3-git/#instant-publishing","title":"Instant Publishing","text":"<p>Suppose you\u2019ve written a script you\u2019d like to share with others. You could just tell them to download from your computer, but if they do so while you\u2019re improving the script or making experimental changes, they could wind up in trouble. Of course, this is why release cycles exist. Developers may work on a project frequently, but they only make the code available when they feel it is presentable.</p> <p>To do this with Git, in the directory where your script resides:</p> <pre><code>git init\n</code></pre> <pre><code>git add .\n</code></pre> <pre><code>git commit -m \"First release\"\n</code></pre> <p>Then tell your users to run:</p> <pre><code>git clone your.computer:/path/to/script\n</code></pre> <p>to download your script. </p> <p>This assumes they have ssh access. If not, run\u00a0git daemon\u00a0and tell your users to instead run:</p> <pre><code>git clone git://your.computer/path/to/script\n</code></pre> <p>From now on, every time your script is ready for release, execute:</p> <pre><code>git commit -a -m \"Next release\"\n</code></pre> <p>and your users can upgrade their version by changing to the directory containing your script and typing:</p> <pre><code>git pull\n</code></pre> <p>Your users will never end up with a version of your script you don\u2019t want them to see.</p>"},{"location":"week-3-git/ce103-week-3-git/#what-have-i-done","title":"What Have I Done?","text":"<p>Find out what changes you\u2019ve made since the last commit with:</p> <pre><code>git diff\n</code></pre> <p>Or since yesterday:</p> <pre><code>git diff \"@{yesterday}\"\n</code></pre> <p>Or between a particular version and 2 versions ago:</p> <pre><code>git diff 1b6d \"master~2\"\n</code></pre> <p>In each case the output is a patch that can be applied with\u00a0git apply. Try also:</p> <pre><code>git whatchanged --since=\"2 weeks ago\"\n</code></pre> <p>Often I\u2019ll browse history with\u00a0qgit\u00a0instead, due to its slick photogenic interface, or\u00a0tig, a text-mode interface that works well over slow connections. Alternatively, install a web server, run\u00a0git instaweb\u00a0and fire up any web browser.</p>"},{"location":"week-3-git/ce103-week-3-git/#exercise","title":"Exercise","text":"<p>Let A, B, C, D be four successive commits where B is the same as A except some files have been removed. We want to add the files back at D. How can we do this?</p> <p>There are at least three solutions. Assuming we are at D:</p> <ol> <li>The difference between A and B are the removed files. We can create a patch representing this difference and apply it:</li> </ol> <pre><code>git diff B A | git apply\n</code></pre> <ol> <li>Since we saved the files back at A, we can retrieve them:</li> </ol> <pre><code>git checkout A foo.c bar.h\n</code></pre> <ol> <li>We can view going from A to B as a change we want to undo:</li> </ol> <pre><code>git revert B\n</code></pre> <p>Which choice is best? Whichever you prefer most. It is easy to get what you want with Git, and often there are many ways to get it.</p>"},{"location":"week-3-git/ce103-week-3-git/#cloning-around","title":"Cloning Around","text":"<p>In older version control systems, checkout is the standard operation to get files. You retrieve a bunch of files in a particular saved state.</p> <p>In Git and other distributed version control systems, cloning is the standard operation. To get files, you create a\u00a0clone\u00a0of the entire repository. In other words, you practically mirror the central server. Anything the main repository can do, you can do.</p>"},{"location":"week-3-git/ce103-week-3-git/#sync-computers","title":"Sync Computers","text":"<p>I can tolerate making tarballs or using\u00a0rsync\u00a0for backups and basic syncing. But sometimes I edit on my laptop, other times on my desktop, and the two may not have talked to each other in between.</p> <p>Initialize a Git repository and commit your files on one machine. Then on the other:</p> <pre><code>git clone other.computer:/path/to/files\n</code></pre> <p>to create a second copy of the files and Git repository. From now on,</p> <pre><code>git commit -a\n</code></pre> <pre><code>git pull other.computer:/path/to/files HEAD\n</code></pre> <p>will\u00a0pull\u00a0in the state of the files on the other computer into the one you\u2019re working on. If you\u2019ve recently made conflicting edits in the same file, Git will let you know and you should commit again after resolving them.</p>"},{"location":"week-3-git/ce103-week-3-git/#classic-source-control","title":"Classic Source Control","text":"<p>Initialize a Git repository for your files:</p> <pre><code>git init\n</code></pre> <pre><code>git add .\n</code></pre> <pre><code>git commit -m \"Initial commit\"\n</code></pre> <p>On the central server, initialize a\u00a0bare repository\u00a0in some directory:</p> <pre><code>mkdir proj.git\n</code></pre> <pre><code>cd proj.git\n</code></pre> <pre><code>git --bare init\n</code></pre> <pre><code>touch proj.git/git-daemon-export-ok\n</code></pre> <p>Start the Git daemon if necessary:</p> <pre><code>git daemon --detach  # it may already be running\n</code></pre> <p>For Git hosting services, follow the instructions to setup the initially empty Git repository. Typically one fills in a form on a webpage.</p> <p>Push\u00a0your project to the central server with:</p> <pre><code>git push central.server/path/to/proj.git HEAD\n</code></pre> <p>To check out the source, a developer types:</p> <pre><code>git clone central.server/path/to/proj.git\n</code></pre> <p>After making changes, the developer saves changes locally:</p> <pre><code>git commit -a\n</code></pre> <p>To update to the latest version:</p> <pre><code>git pull\n</code></pre> <p>Any merge conflicts should be resolved then committed:</p> <pre><code>git commit -a\n</code></pre> <p>To check in local changes into the central repository:</p> <pre><code>git push\n</code></pre> <p>If the main server has new changes due to activity by other developers, the push fails, and the developer should pull the latest version, resolve any merge conflicts, then try again.</p> <p>Developers must have SSH access for the above pull and push commands. However, anyone can see the source by typing:</p> <pre><code>git clone git://central.server/path/to/proj.git\n</code></pre> <p>The native git protocol is like HTTP: there is no authentication, so anyone can retrieve the project. Accordingly, by default, pushing is forbidden via the git protocol.</p>"},{"location":"week-3-git/ce103-week-3-git/#secret-source","title":"Secret Source","text":"<p>For a closed-source project, omit the touch command, and ensure you never create a file named\u00a0<code>git-daemon-export-ok</code>. The repository can no longer be retrieved via the git protocol; only those with SSH access can see it. If all your repos are closed, running the git daemon is unnecessary because all communication occurs via SSH.</p>"},{"location":"week-3-git/ce103-week-3-git/#bare-repositories","title":"Bare repositories","text":"<p>A bare repository is so named because it has no working directory; it only contains files that are normally hidden away in the\u00a0<code>.git</code>\u00a0subdirectory. In other words, it maintains the history of a project, and never holds a snapshot of any given version.</p> <p>A bare repository plays a role similar to that of the main server in a centralized version control system: the home of your project. Developers clone your project from it, and push the latest official changes to it. Typically it resides on a server that does little else but disseminate data. Development occurs in the clones, so the home repository can do without a working directory.</p> <p>Many Git commands fail on bare repositories unless the\u00a0<code>GIT_DIR</code>\u00a0environment variable is set to the repository path, or the\u00a0<code>--bare</code>\u00a0option is supplied.</p>"},{"location":"week-3-git/ce103-week-3-git/#push-versus-pull","title":"Push versus Pull","text":"<p>Why did we introduce the push command, rather than rely on the familiar pull command? Firstly, pulling fails on bare repositories: instead you must\u00a0fetch, a command we later discuss. </p> <p>But even if we kept a normal repository on the central server, pulling into it would still be cumbersome. We would have to login to the server first, and give the pull command the network address of the machine we\u2019re pulling from. Firewalls may interfere, and what if we have no shell access to the server in the first place?</p> <p>However, apart from this case, we discourage pushing into a repository, because confusion can ensue when the destination has a working directory.</p> <p>In short, while learning Git, only push when the target is a bare repository; otherwise pull.</p>"},{"location":"week-3-git/ce103-week-3-git/#forking-a-project","title":"Forking a Project","text":"<p>Sick of the way a project is being run? Think you could do a better job? Then on your server:</p> <pre><code>git clone git://main.server/path/to/files\n</code></pre> <p>Next, tell everyone about your fork of the project at your server.</p> <p>At any later time, you can merge in the changes from the original project with:</p> <pre><code>git pull\n</code></pre>"},{"location":"week-3-git/ce103-week-3-git/#ultimate-backups","title":"Ultimate Backups","text":"<p>Want numerous tamper-proof geographically diverse redundant archives? If your project has many developers, don\u2019t do anything! Every clone of your code is effectively a backup. Not just of the current state, but of your project\u2019s entire history. Thanks to cryptographic hashing, if anyone\u2019s clone becomes corrupted, it will be spotted as soon as they try to communicate with others.</p> <p>If your project is not so popular, find as many servers as you can to host clones.</p> <p>The truly paranoid should always write down the latest 20-byte SHA1 hash of the HEAD somewhere safe. It has to be safe, not private. For example, publishing it in a newspaper would work well, because it\u2019s hard for an attacker to alter every copy of a newspaper.</p>"},{"location":"week-3-git/ce103-week-3-git/#light-speed-multitask","title":"Light-Speed Multitask","text":"<p>Say you want to work on several features in parallel. Then commit your project and run:</p> <pre><code>git clone . /some/new/directory\n</code></pre> <p>Thanks to\u00a0hardlinking, local clones require less time and space than a plain backup.</p> <p>You can now work on two independent features simultaneously. </p> <p>For example, you can edit one clone while the other is compiling. At any time, you can commit and pull changes from the other clone:</p> <pre><code>git pull /the/other/clone HEAD\n</code></pre>"},{"location":"week-3-git/ce103-week-3-git/#guerilla-version-control","title":"Guerilla Version Control","text":"<p>Are you working on a project that uses some other version control system, and you sorely miss Git? Then initialize a Git repository in your working directory:</p> <pre><code>git init\n</code></pre> <pre><code>git add .\n</code></pre> <pre><code>git commit -m \"Initial commit\"\n</code></pre> <p>then clone it:</p> <pre><code>git clone . /some/new/directory\n</code></pre> <p>Now go to the new directory and work here instead, using Git to your heart\u2019s content. Once in a while, you\u2019ll want to sync with everyone else, in which case go to the original directory, sync using the other version control system, and type:</p> <pre><code>git add .\n</code></pre> <pre><code>git commit -m \"Sync with everyone else\"\n</code></pre> <p>Then go to the new directory and run:</p> <pre><code>git commit -a -m \"Description of my changes\"\n</code></pre> <pre><code>git pull\n</code></pre> <p>The procedure for giving your changes to everyone else depends on the other version control system. The new directory contains the files with your changes. Run whatever commands of the other version control system are needed to upload them to the central repository.</p> <p>Subversion, perhaps the best centralized version control system, is used by countless projects. The\u00a0git svn\u00a0command automates the above for Subversion repositories, and can also be used to\u00a0export a Git project to a Subversion repository.</p>"},{"location":"week-3-git/ce103-week-3-git/#mercurial","title":"Mercurial","text":"<p>Mercurial is a similar version control system that can almost seamlessly work in tandem with Git. With the\u00a0<code>hg-git</code>\u00a0plugin, a Mercurial user can losslessly push to and pull from a Git repository.</p> <p>Obtain the\u00a0<code>hg-git</code>\u00a0plugin with Git:</p> <pre><code>git clone git://github.com/schacon/hg-git.git\n</code></pre> <p>or Mercurial:</p> <pre><code>hg clone http://bitbucket.org/durin42/hg-git/\n</code></pre> <p>Sadly, I am unaware of an analogous plugin for Git. For this reason, I advocate Git over Mercurial for the main repository, even if you prefer Mercurial. </p> <p>With a Mercurial project, usually a volunteer maintains a parallel Git repository to accommodate Git users, whereas thanks to the\u00a0<code>hg-git</code>\u00a0plugin, a Git project automatically accommodates Mercurial users.</p> <p>Although the plugin can convert a Mercurial repository to a Git repository by pushing to an empty repository, this job is easier with the\u00a0<code>hg-fast-export.sh</code>\u00a0script, available from:</p> <pre><code>git clone git://repo.or.cz/fast-export.git\n</code></pre> <p>To convert, in an empty directory:</p> <pre><code>git init\n</code></pre> <pre><code>hg-fast-export.sh -r /hg/repo\n</code></pre> <p>after adding the script to your\u00a0<code>$PATH</code>.</p>"},{"location":"week-3-git/ce103-week-3-git/#bazaar","title":"Bazaar","text":"<p>We briefly mention Bazaar because it is the most popular free distributed version control system after Git and Mercurial.</p> <p>Bazaar has the advantage of hindsight, as it is relatively young; its designers could learn from mistakes of the past, and sidestep minor historical warts. </p> <p>Additionally, its developers are mindful of portability and interoperation with other version control systems.</p> <p>A\u00a0<code>bzr-git</code>\u00a0plugin lets Bazaar users work with Git repositories to some extent. </p> <p>The\u00a0<code>tailor</code>\u00a0program converts Bazaar repositories to Git repositories, and can do so incrementally, while\u00a0<code>bzr-fast-export</code>\u00a0is well-suited for one-shot conversions.</p>"},{"location":"week-3-git/ce103-week-3-git/#branch-wizardry","title":"Branch Wizardry","text":"<p>Instant branching and merging are the most lethal of Git\u2019s killer features.</p> <p>Problem: External factors inevitably necessitate context switching. A severe bug manifests in the released version without warning. The deadline for a certain feature is moved closer. A developer whose help you need for a key section of the project is about to leave. In all cases, you must abruptly drop what you are doing and focus on a completely different task.</p> <p>Interrupting your train of thought can be detrimental to your productivity, and the more cumbersome it is to switch contexts, the greater the loss. With centralized version control we must download a fresh working copy from the central server. Distributed systems fare better, as we can clone the desired version locally.</p> <p>But cloning still entails copying the whole working directory as well as the entire history up to the given point. Even though Git reduces the cost of this with file sharing and hard links, the project files themselves must be recreated in their entirety in the new working directory.</p> <p>Solution: Git has a better tool for these situations that is much faster and more space-efficient than cloning:\u00a0git branch.</p> <p>With this magic word, the files in your directory suddenly shapeshift from one version to another. This transformation can do more than merely go back or forward in history. Your files can morph from the last release to the experimental version to the current development version to your friend\u2019s version and so on.</p>"},{"location":"week-3-git/ce103-week-3-git/#the-boss-key","title":"The Boss Key","text":"<p>Ever played one of those games where at the push of a button (\u201cthe boss key\u201d), the screen would instantly display a spreadsheet or something? So if the boss walked in the office while you were playing the game you could quickly hide it away?</p> <p>In some directory:</p> <pre><code>echo \"I'm smarter than my boss\" &gt; myfile.txt\n</code></pre> <pre><code>git init\n</code></pre> <pre><code>git add .\n</code></pre> <pre><code>git commit -m \"Initial commit\"\n</code></pre> <p>We have created a Git repository that tracks one text file containing a certain message. Now type:</p> <pre><code>git checkout -b boss  # nothing seems to change after this\n</code></pre> <pre><code>echo \"My boss is smarter than me\" &gt; myfile.txt\n</code></pre> <pre><code>git commit -a -m \"Another commit\"\n</code></pre> <p>It looks like we\u2019ve just overwritten our file and committed it. But it\u2019s an illusion. Type:</p> <pre><code>git checkout master  # switch to original version of the file\n</code></pre> <p>and hey presto! The text file is restored. And if the boss decides to snoop around this directory, type:</p> <pre><code>git checkout boss  # switch to version suitable for boss' eyes\n</code></pre> <p>You can switch between the two versions of the file as much as you like, and commit to each independently.</p>"},{"location":"week-3-git/ce103-week-3-git/#dirty-work","title":"Dirty Work","text":"<p>Say you\u2019re working on some feature, and for some reason, you need to go back three versions and temporarily put in a few print statements to see how something works. Then:</p> <pre><code>git commit -a\n</code></pre> <pre><code>git checkout HEAD~3\n</code></pre> <p>Now you can add ugly temporary code all over the place. You can even commit these changes. When you\u2019re done,</p> <pre><code>git checkout master\n</code></pre> <p>to return to your original work. Observe that any uncommitted changes are carried over.</p> <p>What if you wanted to save the temporary changes after all? Easy:</p> <pre><code>git checkout -b dirty\n</code></pre> <p>and commit before switching back to the master branch. Whenever you want to return to the dirty changes, simply type:</p> <pre><code>git checkout dirty\n</code></pre> <p>We touched upon this command in an earlier chapter, when discussing loading old states. At last we can tell the whole story: the files change to the requested state, but we must leave the master branch. Any commits made from now on take your files down a different road, which can be named later.</p> <p>In other words, after checking out an old state, Git automatically puts you in a new, unnamed branch, which can be named and saved with\u00a0git checkout -b.</p>"},{"location":"week-3-git/ce103-week-3-git/#quick-fixes","title":"Quick Fixes","text":"<p>You\u2019re in the middle of something when you are told to drop everything and fix a newly discovered bug in commit\u00a0<code>1b6d...</code>:</p> <pre><code>git commit -a\n</code></pre> <pre><code>git checkout -b fixes 1b6d\n</code></pre> <p>Then once you\u2019ve fixed the bug:</p> <pre><code>git commit -a -m \"Bug fixed\"\n</code></pre> <pre><code>git checkout master\n</code></pre> <p>and resume work on your original task. You can even\u00a0merge\u00a0in the freshly baked bugfix:</p> <pre><code>git merge fixes\n</code></pre>"},{"location":"week-3-git/ce103-week-3-git/#merging","title":"Merging","text":"<p>With some version control systems, creating branches is easy but merging them back together is tough. With Git, merging is so trivial that you might be unaware of it happening.</p> <p>We actually encountered merging long ago. The\u00a0pull\u00a0command in fact\u00a0fetches\u00a0commits and then merges them into your current branch. If you have no local changes, then the merge is a\u00a0fast forward, a degenerate case akin to fetching the latest version in a centralized version control system. But if you do have local changes, Git will automatically merge, and report any conflicts.</p> <p>Ordinarily, a commit has exactly one\u00a0parent commit, namely, the previous commit. Merging branches together produces a commit with at least two parents. This begs the question: what commit does\u00a0<code>HEAD~10</code>\u00a0really refer to? A commit could have multiple parents, so which one do we follow?</p> <p>It turns out this notation chooses the first parent every time. This is desirable because the current branch becomes the first parent during a merge; frequently you\u2019re only concerned with the changes you made in the current branch, as opposed to changes merged in from other branches.</p> <p>You can refer to a specific parent with a caret. For example, to show the logs from the second parent:</p> <pre><code>git log HEAD^2\n</code></pre> <p>You may omit the number for the first parent. For example, to show the differences with the first parent:</p> <pre><code>git diff HEAD^\n</code></pre> <p>You can combine this notation with other types. For example:</p> <pre><code>git checkout 1b6d^^2~10 -b ancient\n</code></pre> <p>starts a new branch \u201cancient\u201d representing the state 10 commits back from the second parent of the first parent of the commit starting with 1b6d.</p>"},{"location":"week-3-git/ce103-week-3-git/#uninterrupted-workflow","title":"Uninterrupted Workflow","text":"<p>Often in hardware projects, the second step of a plan must await the completion of the first step. A car undergoing repairs might sit idly in a garage until a particular part arrives from the factory. A prototype might wait for a chip to be fabricated before construction can continue.</p> <p>Software projects can be similar. The second part of a new feature may have to wait until the first part has been released and tested. Some projects require your code to be reviewed before accepting it, so you might wait until the first part is approved before starting the second part.</p> <p>Thanks to painless branching and merging, we can bend the rules and work on Part II before Part I is officially ready. Suppose you have committed Part I and sent it for review. Let\u2019s say you\u2019re in the\u00a0<code>master</code>\u00a0branch. Then branch off:</p> <pre><code>git checkout -b part2\n</code></pre> <p>Next, work on Part II, committing your changes along the way. To err is human, and often you\u2019ll want to go back and fix something in Part I. If you\u2019re lucky, or very good, you can skip these lines.</p> <pre><code>git checkout master  # Go back to Part I.\n</code></pre> <pre><code>fix_problem\n</code></pre> <pre><code>git commit -a        # Commit the fixes.\n</code></pre> <pre><code>git checkout part2   # Go back to Part II.\n</code></pre> <pre><code>git merge master     # Merge in those fixes.\n</code></pre> <p>Eventually, Part I is approved:</p> <pre><code>git checkout master  # Go back to Part I.\n</code></pre> <pre><code>submit files         # Release to the world!\n</code></pre> <pre><code>git merge part2      # Merge in Part II.\n</code></pre> <pre><code>git branch -d part2  # Delete \"part2\" branch.\n</code></pre> <p>Now you\u2019re in the\u00a0<code>master</code>\u00a0branch again, with Part II in the working directory.</p> <p>It\u2019s easy to extend this trick for any number of parts. It\u2019s also easy to branch off retroactively: suppose you belatedly realize you should have created a branch 7 commits ago. Then type:</p> <pre><code>git branch -m master part2  # Rename \"master\" branch to \"part2\".\n</code></pre> <pre><code>git branch master HEAD~7    # Create new \"master\", 7 commits upstream.\n</code></pre> <p>The\u00a0<code>master</code>\u00a0branch now contains just Part I, and the\u00a0<code>part2</code>\u00a0branch contains the rest. We are in the latter branch; we created\u00a0<code>master</code>\u00a0without switching to it, because we want to continue work on\u00a0<code>part2</code>. This is unusual. Until now, we\u2019ve been switching to branches immediately after creation, as in:</p> <pre><code>git checkout HEAD~7 -b master  # Create a branch, and switch to it.\n</code></pre>"},{"location":"week-3-git/ce103-week-3-git/#reorganizing-a-medley","title":"Reorganizing a Medley","text":"<p>Perhaps you like to work on all aspects of a project in the same branch. You want to keep works-in-progress to yourself and want others to see your commits only when they have been neatly organized. Start a couple of branches:</p> <pre><code>git branch sanitized    # Create a branch for sanitized commits.\n</code></pre> <pre><code>git checkout -b medley  # Create and switch to a branch to work in.\n</code></pre> <p>Next, work on anything: fix bugs, add features, add temporary code, and so forth, committing often along the way. Then:</p> <pre><code>git checkout sanitized\n</code></pre> <pre><code>git cherry-pick medley^^\n</code></pre> <p>applies the grandparent of the head commit of the \u201cmedley\u201d branch to the \u201csanitized\u201d branch. With appropriate cherry-picks you can construct a branch that contains only permanent code, and has related commits grouped together.</p>"},{"location":"week-3-git/ce103-week-3-git/#managing-branches","title":"Managing Branches","text":"<p>List all branches by typing:</p> <pre><code>git branch\n</code></pre> <p>By default, you start in a branch named \u201cmaster\u201d. Some advocate leaving the \u201cmaster\u201d branch untouched and creating new branches for your own edits.</p> <p>The\u00a0-d\u00a0and\u00a0-m\u00a0options allow you to delete and move (rename) branches. See\u00a0git help branch.</p> <p>The \u201cmaster\u201d branch is a useful custom. Others may assume that your repository has a branch with this name, and that it contains the official version of your project. Although you can rename or obliterate the \u201cmaster\u201d branch, you might as well respect this convention.</p>"},{"location":"week-3-git/ce103-week-3-git/#temporary-branches","title":"Temporary Branches","text":"<p>After a while you may realize you are creating short-lived branches frequently for similar reasons: every other branch merely serves to save the current state so you can briefly hop back to an older state to fix a high-priority bug or something.</p> <p>It\u2019s analogous to changing the TV channel temporarily to see what else is on. </p> <p>But instead of pushing a couple of buttons, you have to create, check out, merge, and delete temporary branches. Luckily, Git has a shortcut that is as convenient as a TV remote control:</p> <pre><code>git stash\n</code></pre> <p>This saves the current state in a temporary location (a\u00a0stash) and restores the previous state. </p> <p>Your working directory appears exactly as it was before you started editing, and you can fix bugs, pull in upstream changes, and so on. When you want to go back to the stashed state, type:</p> <pre><code>git stash apply  # You may need to resolve some conflicts.\n</code></pre> <p>You can have multiple stashes, and manipulate them in various ways. See\u00a0git help stash. As you may have guessed, Git maintains branches behind the scenes to perform this magic trick.</p>"},{"location":"week-3-git/ce103-week-3-git/#work-how-you-want","title":"Work How You Want","text":"<p>You might wonder if branches are worth the bother. After all, clones are almost as fast, and you can switch between them with\u00a0cd\u00a0instead of esoteric Git commands.</p> <p>Consider web browsers. Why support multiple tabs as well as multiple windows? Because allowing both accommodates a wide variety of styles. Some users like to keep only one browser window open, and use tabs for multiple webpages. Others might insist on the other extreme: multiple windows with no tabs anywhere. Others still prefer something in between.</p> <p>Branching is like tabs for your working directory, and cloning is like opening a new browser window. These operations are fast and local, so why not experiment to find the combination that best suits you? Git lets you work exactly how you want.</p>"},{"location":"week-3-git/ce103-week-3-git/#lessons-of-history","title":"Lessons of History","text":"<p>A consequence of Git\u2019s distributed nature is that history can be edited easily. But if you tamper with the past, take care: only rewrite that part of history which you alone possess. Just as nations forever argue over who committed what atrocity, if someone else has a clone whose version of history differs to yours, you will have trouble reconciling when your trees interact.</p> <p>Some developers strongly feel history should be immutable, warts and all. Others feel trees should be made presentable before they are unleashed in public. Git accommodates both viewpoints. Like cloning, branching, and merging, rewriting history is simply another power Git gives you. It is up to you to use it wisely.</p>"},{"location":"week-3-git/ce103-week-3-git/#i-stand-corrected","title":"I Stand Corrected","text":"<p>Did you just commit, but wish you had typed a different message? Then run:</p> <pre><code>git commit --amend\n</code></pre> <p>to change the last message. Realized you forgot to add a file? Run\u00a0git add\u00a0to add it, and then run the above command.</p> <p>--</p> <p>Want to include a few more edits in that last commit? Then make those edits and run:</p> <pre><code>git commit --amend -a\n</code></pre>"},{"location":"week-3-git/ce103-week-3-git/#and-then-some","title":"\u2026 And Then Some","text":"<p>Suppose the previous problem is ten times worse. After a lengthy session you\u2019ve made a bunch of commits. But you\u2019re not quite happy with the way they\u2019re organized, and some of those commit messages could use rewording. Then type:</p> <pre><code>git rebase -i HEAD~10\n</code></pre> <p>and the last 10 commits will appear in your favourite $EDITOR. A sample excerpt:</p> <pre><code>pick 5c6eb73 Added repo.or.cz link\n</code></pre> <pre><code>pick a311a64 Reordered analogies in \"Work How You Want\"\n</code></pre> <pre><code>pick 100834f Added push target to Makefile\n</code></pre> <p>Older commits precede newer commits in this list, unlike the\u00a0<code>log</code>\u00a0command. Here, 5c6eb73 is the oldest commit, and 100834f is the newest. Then:</p> <ul> <li> <p>Remove commits by deleting lines. Like the revert command, but off the record: it will be as if the commit never existed.</p> </li> <li> <p>Reorder commits by reordering lines.</p> </li> <li> <p>Replace\u00a0<code>pick</code>\u00a0with:</p> </li> <li> <p><code>edit</code>\u00a0to mark a commit for amending.</p> </li> <li> <p><code>reword</code>\u00a0to change the log message.</p> </li> <li> <p><code>squash</code>\u00a0to merge a commit with the previous one.</p> </li> <li> <p><code>fixup</code>\u00a0to merge a commit with the previous one and discard the log message.</p> </li> </ul> <p>For example, we might replace the second\u00a0<code>pick</code>\u00a0with\u00a0<code>squash</code>:</p> <pre><code>pick 5c6eb73 Added repo.or.cz link\n</code></pre> <pre><code>squash a311a64 Reordered analogies in \"Work How You Want\"\n</code></pre> <pre><code>pick 100834f Added push target to Makefile\n</code></pre> <p>After we save and quit, Git merges a311a64 into 5c6eb73. Thus\u00a0squash\u00a0merges into the next commit up: think \u201csquash up\u201d.</p> <p>Git then combines their log messages and presents them for editing. The command\u00a0fixup\u00a0skips this step; the squashed log message is simply discarded.</p> <p>If you marked a commit with\u00a0edit, Git returns you to the past, to the oldest such commit. You can amend the old commit as described in the previous section, and even create new commits that belong here. Once you\u2019re pleased with the \u201cretcon\u201d, go forward in time by running:</p> <pre><code>git rebase --continue\n</code></pre> <p>Git replays commits until the next\u00a0edit, or to the present if none remain.</p> <p>You can also abandon the rebase with:</p> <pre><code>git rebase --abort\n</code></pre> <p>So commit early and commit often: you can tidy up later with rebase.</p>"},{"location":"week-3-git/ce103-week-3-git/#local-changes-last","title":"Local Changes Last","text":"<p>You\u2019re working on an active project. You make some local commits over time, and then you sync with the official tree with a merge. This cycle repeats itself a few times before you\u2019re ready to push to the central tree.</p> <p>But now the history in your local Git clone is a messy jumble of your changes and the official changes. You\u2019d prefer to see all your changes in one contiguous section, and after all the official changes.</p> <p>This is a job for\u00a0git rebase\u00a0as described above. In many cases you can use the\u00a0--onto\u00a0flag and avoid interaction.</p> <p>Also see\u00a0git help rebase\u00a0for detailed examples of this amazing command. You can split commits. You can even rearrange branches of a tree.</p> <p>Take care: rebase is a powerful command. For complicated rebases, first make a backup with\u00a0git clone.</p>"},{"location":"week-3-git/ce103-week-3-git/#rewriting-history","title":"Rewriting History","text":"<p>Occasionally, you need the source control equivalent of airbrushing people out of official photos, erasing them from history in a Stalinesque fashion. For example, suppose we intend to release a project, but it involves a file that should be kept private for some reason. Perhaps I left my credit card number in a text file and accidentally added it to the project. Deleting the file is insufficient, for the file can be accessed from older commits. </p> <p>We must remove the file from all commits:</p> <pre><code>git filter-branch --tree-filter 'rm top/secret/file' HEAD\n</code></pre> <p>See\u00a0git help filter-branch, which discusses this example and gives a faster method. In general,\u00a0filter-branch\u00a0lets you alter large sections of history with a single command.</p> <p>Afterwards, the\u00a0<code>.git/refs/original</code>\u00a0directory describes the state of affairs before the operation. Check the filter-branch command did what you wanted, then delete this directory if you wish to run more filter-branch commands.</p> <p>Lastly, replace clones of your project with your revised version if you want to interact with them later.</p>"},{"location":"week-3-git/ce103-week-3-git/#making-history","title":"Making History","text":"<p>Want to migrate a project to Git? If it\u2019s managed with one of the more well-known systems, then chances are someone has already written a script to export the whole history to Git.</p> <p>Otherwise, look up\u00a0git fast-import, which reads text input in a specific format to create Git history from scratch. Typically a script using this command is hastily cobbled together and run once, migrating the project in a single shot.</p> <p>As an example, paste the following listing into temporary file, such as\u00a0<code>/tmp/history</code>:</p> <pre><code>commit refs/heads/master\ncommitter Alice &lt;alice@example.com&gt; Thu, 01 Jan 1970 00:00:00 +0000\ndata &lt;&lt;EOT\nInitial commit.\nEOT\nM 100644 inline hello.c\ndata &lt;&lt;EOT\n#include &lt;stdio.h&gt;\nint main() {\n  printf(\"Hello, world!\\n\");\n  return 0;\n}\nEOT\ncommit refs/heads/master\ncommitter Bob &lt;bob@example.com&gt; Tue, 14 Mar 2000 01:59:26 -0800\ndata &lt;&lt;EOT\nReplace printf() with write().\nEOT\nM 100644 inline hello.c\ndata &lt;&lt;EOT\n#include &lt;unistd.h&gt;\nint main() {\n  write(1, \"Hello, world!\\n\", 14);\n  return 0;\n}\nEOT\n</code></pre> <p>Then create a Git repository from this temporary file by typing:</p> <pre><code>mkdir project; cd project; git init\n</code></pre> <pre><code>git fast-import --date-format=rfc2822 &lt; /tmp/history\n</code></pre> <p>You can checkout the latest version of the project with:</p> <pre><code>git checkout master .\n</code></pre> <p>The\u00a0git fast-export\u00a0command converts any repository to the\u00a0git fast-import\u00a0format, whose output you can study for writing exporters, and also to transport repositories in a human-readable format. Indeed, these commands can send repositories of text files over text-only channels.</p>"},{"location":"week-3-git/ce103-week-3-git/#where-did-it-all-go-wrong","title":"Where Did It All Go Wrong?","text":"<p>You\u2019ve just discovered a broken feature in your program which you know for sure was working a few months ago. Argh! Where did this bug come from? If only you had been testing the feature as you developed.</p> <p>It\u2019s too late for that now. However, provided you\u2019ve been committing often, Git can pinpoint the problem:</p> <pre><code>git bisect start\n</code></pre> <pre><code>git bisect bad HEAD\n</code></pre> <pre><code>git bisect good 1b6d\n</code></pre> <p>Git checks out a state halfway in between. Test the feature, and if it\u2019s still broken:</p> <pre><code>git bisect bad\n</code></pre> <p>If not, replace \"bad\" with \"good\". Git again transports you to a state halfway between the known good and bad versions, narrowing down the possibilities. </p> <p>After a few iterations, this binary search will lead you to the commit that caused the trouble. Once you\u2019ve finished your investigation, return to your original state by typing:</p> <pre><code>git bisect reset\n</code></pre> <p>Instead of testing every change by hand, automate the search by running:</p> <pre><code>git bisect run my_script\n</code></pre> <p>Git uses the return value of the given command, typically a one-off script, to decide whether a change is good or bad: the command should exit with code 0 when good, 125 when the change should be skipped, and anything else between 1 and 127 if it is bad. A negative return value aborts the bisect.</p> <p>You can do much more: the help page explains how to visualize bisects, examine or replay the bisect log, and eliminate known innocent changes for a speedier search.</p>"},{"location":"week-3-git/ce103-week-3-git/#who-made-it-all-go-wrong","title":"Who Made It All Go Wrong?","text":"<p>Like many other version control systems, Git has a blame command:</p> <pre><code>git blame bug.c\n</code></pre> <p>which annotates every line in the given file showing who last changed it, and when. Unlike many other version control systems, this operation works offline, reading only from local disk.</p>"},{"location":"week-3-git/ce103-week-3-git/#multiplayer-git","title":"Multiplayer Git","text":"<p>Initially I used Git on a private project where I was the sole developer. Amongst the commands related to Git\u2019s distributed nature, I needed only\u00a0pull\u00a0and\u00a0clone\u00a0so could I keep the same project in different places.</p> <p>Later I wanted to publish my code with Git, and include changes from contributors. I had to learn how to manage projects with multiple developers from all over the world. Fortunately, this is Git\u2019s forte, and arguably its raison d\u2019\u00eatre.</p>"},{"location":"week-3-git/ce103-week-3-git/#who-am-i","title":"Who Am I?","text":"<p>Every commit has an author name and email, which is shown by\u00a0git log. By default, Git uses system settings to populate these fields. To set them explicitly, type:</p> <pre><code>git config --global user.name \"John Doe\"\n</code></pre> <pre><code>git config --global user.email johndoe@example.com\n</code></pre> <p>Omit the global flag to set these options only for the current repository.</p>"},{"location":"week-3-git/ce103-week-3-git/#git-over-ssh-http","title":"Git Over SSH, HTTP","text":"<p>Suppose you have SSH access to a web server, but Git is not installed. Though less efficient than its native protocol, Git can communicate over HTTP.</p> <p>Download, compile and install Git in your account, and create a repository in your web directory:</p> <pre><code>GIT_DIR=proj.git git init\n</code></pre> <pre><code>cd proj.git\n</code></pre> <pre><code>git --bare update-server-info\n</code></pre> <pre><code>cp hooks/post-update.sample hooks/post-update\n</code></pre> <p>For older versions of Git, the copy command fails and you should run:</p> <pre><code>chmod a+x hooks/post-update\n</code></pre> <p>Now you can publish your latest edits via SSH from any clone:</p> <pre><code>git push web.server:/path/to/proj.git master\n</code></pre> <p>and anybody can get your project with:</p> <pre><code>git clone http://web.server/proj.git\n</code></pre>"},{"location":"week-3-git/ce103-week-3-git/#git-over-anything","title":"Git Over Anything","text":"<p>Want to synchronize repositories without servers, or even a network connection? Need to improvise during an emergency? We\u2019ve seen\u00a0git fast-export\u00a0and\u00a0git fast-import\u00a0can convert repositories to a single file and back. We could shuttle such files back and forth to transport git repositories over any medium, but a more efficient tool is\u00a0git bundle.</p> <p>The sender creates a\u00a0bundle:</p> <pre><code>git bundle create somefile HEAD\n</code></pre> <p>then transports the bundle,\u00a0<code>somefile</code>, to the other party somehow: email, thumb drive, an\u00a0xxd\u00a0printout and an OCR scanner, reading bits over the phone, smoke signals, etc. </p> <p>The receiver retrieves commits from the bundle by typing:</p> <pre><code>git pull somefile\n</code></pre> <p>The receiver can even do this from an empty repository. Despite its size,\u00a0<code>somefile</code>\u00a0contains the entire original git repository.</p> <p>In larger projects, eliminate waste by bundling only changes the other repository lacks. For example, suppose the commit \u201c1b6d\u2026\u201d is the most recent commit shared by both parties:</p> <pre><code>git bundle create somefile HEAD ^1b6d\n</code></pre> <p>If done frequently, one could easily forget which commit was last sent. The help page suggests using tags to solve this. Namely, after you send a bundle, type:</p> <pre><code>git tag -f lastbundle HEAD\n</code></pre> <p>and create new refresher bundles with:</p> <pre><code>git bundle create newbundle HEAD ^lastbundle\n</code></pre>"},{"location":"week-3-git/ce103-week-3-git/#patches-the-global-currency","title":"Patches: The Global Currency","text":"<p>Patches are text representations of your changes that can be easily understood by computers and humans alike. This gives them universal appeal. You can email a patch to developers no matter what version control system they\u2019re using. As long as your audience can read their email, they can see your edits. Similarly, on your side, all you require is an email account: there\u2019s no need to setup an online Git repository.</p> <p>Recall from the first chapter:</p> <pre><code>git diff 1b6d &gt; my.patch\n</code></pre> <p>outputs a patch which can be pasted into an email for discussion. In a Git repository, type:</p> <pre><code>git apply &lt; my.patch\n</code></pre> <p>to apply the patch.</p> <p>In more formal settings, when author names and perhaps signatures should be recorded, generate the corresponding patches past a certain point by typing:</p> <pre><code>git format-patch 1b6d\n</code></pre> <p>The resulting files can be given to\u00a0git-send-email, or sent by hand. You can also specify a range of commits:</p> <pre><code>git format-patch 1b6d..HEAD^^\n</code></pre> <p>On the receiving end, save an email to a file, then type:</p> <pre><code>git am &lt; email.txt\n</code></pre> <p>This applies the incoming patch and also creates a commit, including information such as the author.</p> <p>With a browser email client, you may need to click a button to see the email in its raw original form before saving the patch to a file.</p> <p>There are slight differences for mbox-based email clients, but if you use one of these, you\u2019re probably the sort of person who can figure them out easily without reading tutorials!</p>"},{"location":"week-3-git/ce103-week-3-git/#sorry-weve-moved","title":"Sorry, We\u2019ve Moved","text":"<p>After cloning a repository, running\u00a0git push\u00a0or\u00a0git pull\u00a0will automatically push to or pull from the original URL. How does Git do this? The secret lies in config options created with the clone. Let\u2019s take a peek:</p> <pre><code>git config --list\n</code></pre> <p>The\u00a0<code>remote.origin.url</code>\u00a0option controls the source URL; \u201corigin\u201d is a nickname given to the source repository. As with the \u201cmaster\u201d branch convention, we may change or delete this nickname but there is usually no reason for doing so.</p> <p>If the original repository moves, we can update the URL via:</p> <pre><code>git config remote.origin.url git://new.url/proj.git\n</code></pre> <p>The\u00a0<code>branch.master.merge</code>\u00a0option specifies the default remote branch in a\u00a0git pull. During the initial clone, it is set to the current branch of the source repository, so even if the HEAD of the source repository subsequently moves to a different branch, a later pull will faithfully follow the original branch.</p> <p>This option only applies to the repository we first cloned from, which is recorded in the option\u00a0<code>branch.master.remote</code>. If we pull in from other repositories we must explicitly state which branch we want:</p> <pre><code>git pull git://example.com/other.git master\n</code></pre> <p>The above explains why some of our earlier push and pull examples had no arguments.</p>"},{"location":"week-3-git/ce103-week-3-git/#remote-branches","title":"Remote Branches","text":"<p>When you clone a repository, you also clone all its branches. You may not have noticed this because Git hides them away: you must ask for them specifically. This prevents branches in the remote repository from interfering with your branches, and also makes Git easier for beginners.</p> <p>List the remote branches with:</p> <pre><code>git branch -r\n</code></pre> <p>You should see something like:</p> <pre><code>origin/HEAD\norigin/master\norigin/experimental\n</code></pre> <p>These represent branches and the HEAD of the remote repository, and can be used in regular Git commands. For example, suppose you have made many commits, and wish to compare against the last fetched version. </p> <p>You could search through the logs for the appropriate SHA1 hash, but it\u2019s much easier to type:</p> <pre><code>git diff origin/HEAD\n</code></pre> <p>Or you can see what the \u201cexperimental\u201d branch has been up to:</p> <pre><code>git log origin/experimental\n</code></pre>"},{"location":"week-3-git/ce103-week-3-git/#multiple-remotes","title":"Multiple Remotes","text":"<p>Suppose two other developers are working on our project, and we want to keep tabs on both. We can follow more than one repository at a time with:</p> <pre><code>git remote add other git://example.com/some_repo.git\n</code></pre> <pre><code>git pull other some_branch\n</code></pre> <p>Now we have merged in a branch from the second repository, and we have easy access to all branches of all repositories:</p> <pre><code>git diff origin/experimental^ other/some_branch~5\n</code></pre> <p>But what if we just want to compare their changes without affecting our own work? </p> <p>In other words, we want to examine their branches without having their changes invade our working directory. Then rather than pull, run:</p> <pre><code>git fetch        # Fetch from origin, the default.\n</code></pre> <pre><code>git fetch other  # Fetch from the second programmer.\n</code></pre> <p>This just fetches histories. Although the working directory remains untouched, we can refer to any branch of any repository in a Git command because we now possess a local copy.</p> <p>Recall that behind the scenes, a pull is simply a\u00a0fetch\u00a0then\u00a0merge. Usually we\u00a0pull\u00a0because we want to merge the latest commit after a fetch; this situation is a notable exception.</p> <p>See\u00a0git help remote\u00a0for how to remove remote repositories, ignore certain branches, and more.</p>"},{"location":"week-3-git/ce103-week-3-git/#preferences","title":"Preferences","text":"<p>For my projects, I like contributors to prepare repositories from which I can pull. Some Git hosting services let you host your own fork of a project with the click of a button.</p> <p>After I fetch a tree, I run Git commands to navigate and examine the changes, which ideally are well-organized and well-described. I merge my own changes, and perhaps make further edits. Once satisfied, I push to the main repository.</p> <p>Though I infrequently receive contributions, I believe this approach scales well. See\u00a0this blog post by Linus Torvalds.</p> <p>Staying in the Git world is slightly more convenient than patch files, as it saves me from converting them to Git commits. Furthermore, Git handles details such as recording the author\u2019s name and email address, as well as the time and date, and asks the author to describe their own change.</p>"},{"location":"week-3-git/ce103-week-3-git/#git-grandmastery","title":"Git Grandmastery","text":"<p>By now, you should be able to navigate the\u00a0git help\u00a0pages and understand almost everything. However, pinpointing the exact command required to solve a given problem can be tedious. Perhaps I can save you some time: below are some recipes I have needed in the past.</p>"},{"location":"week-3-git/ce103-week-3-git/#source-releases","title":"Source Releases","text":"<p>For my projects, Git tracks exactly the files I\u2019d like to archive and release to users. To create a tarball of the source code, I run:</p> <pre><code>git archive --format=tar --prefix=proj-1.2.3/ HEAD\n</code></pre>"},{"location":"week-3-git/ce103-week-3-git/#commit-what-changed","title":"Commit What Changed","text":"<p>Telling Git when you\u2019ve added, deleted and renamed files is troublesome for certain projects. Instead, you can type:</p> <pre><code>git add .\ngit add -u\n</code></pre> <p>Git will look at the files in the current directory and work out the details by itself. Instead of the second add command, run\u00a0<code>git commit -a</code>\u00a0if you also intend to commit at this time. See\u00a0git help ignore\u00a0for how to specify files that should be ignored.</p> <p>You can perform the above in a single pass with:</p> <pre><code>git ls-files -d -m -o -z | xargs -0 git update-index --add --remove\n</code></pre> <p>The\u00a0-z\u00a0and\u00a0-0\u00a0options prevent ill side-effects from filenames containing strange characters. As this command adds ignored files, you may want to use the\u00a0<code>-x</code>\u00a0or\u00a0<code>-X</code>\u00a0option.</p>"},{"location":"week-3-git/ce103-week-3-git/#my-commit-is-too-big","title":"My Commit Is Too Big!","text":"<p>Have you neglected to commit for too long? Been coding furiously and forgotten about source control until now? Made a series of unrelated changes, because that\u2019s your style?</p> <p>No worries. Run:</p> <pre><code>git add -p\n</code></pre> <p>For each edit you made, Git will show you the hunk of code that was changed, and ask if it should be part of the next commit. Answer with \"y\" or \"n\". You have other options, such as postponing the decision; type \"?\" to learn more.</p> <p>Once you\u2019re satisfied, type</p> <pre><code>git commit\n</code></pre> <p>to commit precisely the changes you selected (the\u00a0staged\u00a0changes). Make sure you omit the\u00a0-a\u00a0option, otherwise Git will commit all the edits.</p> <p>What if you\u2019ve edited many files in many places? Reviewing each change one by one becomes frustratingly mind-numbing. In this case, use\u00a0git add -i, whose interface is less straightforward, but more flexible. With a few keystrokes, you can stage or unstage several files at a time, or review and select changes in particular files only. Alternatively, run\u00a0git commit --interactive\u00a0which automatically commits after you\u2019re done.</p>"},{"location":"week-3-git/ce103-week-3-git/#the-index-gits-staging-area","title":"The Index: Git\u2019s Staging Area","text":"<p>So far we have avoided Git\u2019s famous\u00a0index, but we must now confront it to explain the above. The index is a temporary staging area. Git seldom shuttles data directly between your project and its history. Rather, Git first writes data to the index, and then copies the data in the index to its final destination.</p> <p>For example,\u00a0commit -a\u00a0is really a two-step process. The first step places a snapshot of the current state of every tracked file into the index. The second step permanently records the snapshot now in the index. Committing without the\u00a0-a\u00a0option only performs the second step, and only makes sense after running commands that somehow change the index, such as\u00a0git add.</p> <p>Usually we can ignore the index and pretend we are reading straight from and writing straight to the history. On this occasion, we want finer control, so we manipulate the index. We place a snapshot of some, but not all, of our changes into the index, and then permanently record this carefully rigged snapshot.</p>"},{"location":"week-3-git/ce103-week-3-git/#dont-lose-your-head","title":"Don\u2019t Lose Your HEAD","text":"<p>The HEAD tag is like a cursor that normally points at the latest commit, advancing with each new commit. Some Git commands let you move it. For example:</p> <pre><code>git reset HEAD~3\n</code></pre> <p>will move the HEAD three commits back. Thus all Git commands now act as if you hadn\u2019t made those last three commits, while your files remain in the present. See the help page for some applications.</p> <p>But how can you go back to the future? The past commits know nothing of the future.</p> <p>If you have the SHA1 of the original HEAD then:</p> <pre><code>git reset 1b6d\n</code></pre> <p>--</p> <p>But suppose you never took it down? Don\u2019t worry: for commands like these, Git saves the original HEAD as a tag called ORIG_HEAD, and you can return safe and sound with:</p> <pre><code>git reset ORIG_HEAD\n</code></pre>"},{"location":"week-3-git/ce103-week-3-git/#head-hunting","title":"HEAD-hunting","text":"<p>Perhaps ORIG_HEAD isn\u2019t enough. Perhaps you\u2019ve just realized you made a monumental mistake and you need to go back to an ancient commit in a long-forgotten branch.</p> <p>By default, Git keeps a commit for at least two weeks, even if you ordered Git to destroy the branch containing it. The trouble is finding the appropriate hash. You could look at all the hash values in\u00a0<code>.git/objects</code>\u00a0and use trial and error to find the one you want. But there\u2019s a much easier way.</p> <p>Git records every hash of a commit it computes in\u00a0<code>.git/logs</code>. The subdirectory\u00a0<code>refs</code>\u00a0contains the history of all activity on all branches, while the file\u00a0<code>HEAD</code>\u00a0shows every hash value it has ever taken. The latter can be used to find hashes of commits on branches that have been accidentally lopped off.</p> <p>The reflog command provides a friendly interface to these log files. Try</p> <pre><code>git reflog\n</code></pre> <p>Instead of cutting and pasting hashes from the reflog, try:</p> <pre><code>git checkout \"@{10 minutes ago}\"\n</code></pre> <p>Or checkout the 5th-last visited commit via:</p> <pre><code>git checkout \"@{5}\"\n</code></pre> <p>See the \u201cSpecifying Revisions\u201d section of\u00a0git help rev-parse\u00a0for more.</p> <p>You may wish to configure a longer grace period for doomed commits. For example:</p> <pre><code>git config gc.pruneexpire \"30 days\"\n</code></pre> <p>means a deleted commit will only be permanently lost once 30 days have passed and\u00a0git gc\u00a0is run.</p> <p>--</p> <p>You may also wish to disable automatic invocations of\u00a0git gc:</p> <pre><code>git config gc.auto 0\n</code></pre> <p>in which case commits will only be deleted when you run\u00a0git gc\u00a0manually.</p>"},{"location":"week-3-git/ce103-week-3-git/#building-on-git","title":"Building On Git","text":"<p>In true UNIX fashion, Git\u2019s design allows it to be easily used as a low-level component of other programs, such as GUI and web interfaces, alternative command-line interfaces, patch managements tools, importing and conversion tools and so on. In fact, some Git commands are themselves scripts standing on the shoulders of giants. With a little tinkering, you can customize Git to suit your preferences.</p> <p>One easy trick is to use built-in Git aliases to shorten your most frequently used commands:</p> <pre><code>git config --global alias.co checkout\n</code></pre> <pre><code>git config --global --get-regexp alias  # display current aliases\n</code></pre> <pre><code>alias.co checkout\n</code></pre> <pre><code>git co foo                              # same as 'git checkout foo'\n</code></pre> <p>Another is to print the current branch in the prompt, or window title. Invoking</p> <pre><code>git symbolic-ref HEAD\n</code></pre> <p>shows the current branch name. In practice, you most likely want to remove the \"refs/heads/\" and ignore errors:</p> <pre><code>git symbolic-ref HEAD 2&gt; /dev/null | cut -b 12-\n</code></pre> <p>The\u00a0<code>contrib</code>\u00a0subdirectory is a treasure trove of tools built on Git. In time, some of them may be promoted to official commands. On Debian and Ubuntu, this directory lives at\u00a0<code>/usr/share/doc/git-core/contrib</code>.</p> <p>One popular resident is\u00a0<code>workdir/git-new-workdir</code>. Via clever symlinking, this script creates a new working directory whose history is shared with the original repository:</p> <pre><code>git-new-workdir an/existing/repo new/directory\n</code></pre> <p>The new directory and the files within can be thought of as a clone, except since the history is shared, the two trees automatically stay in sync. There\u2019s no need to merge, push, or pull.</p>"},{"location":"week-3-git/ce103-week-3-git/#daring-stunts","title":"Daring Stunts","text":"<p>These days, Git makes it difficult for the user to accidentally destroy data. But if you know what you are doing, you can override safeguards for common commands.</p> <p>Checkout: Uncommitted changes cause checkout to fail. To destroy your changes, and checkout a given commit anyway, use the force flag:</p> <pre><code>git checkout -f HEAD^\n</code></pre> <p>On the other hand, if you specify particular paths for checkout, then there are no safety checks. The supplied paths are quietly overwritten. Take care if you use checkout in this manner.</p> <p>Reset: Reset also fails in the presence of uncommitted changes. To force it through, run:</p> <pre><code>git reset --hard 1b6d\n</code></pre> <p>Branch: Deleting branches fails if this causes changes to be lost. To force a deletion, type:</p> <pre><code>git branch -D dead_branch  # instead of -d\n</code></pre> <p>Similarly, attempting to overwrite a branch via a move fails if data loss would ensue. To force a branch move, type:</p> <pre><code>git branch -M source target  # instead of -m\n</code></pre> <p>Unlike checkout and reset, these two commands defer data destruction. The changes are still stored in the .git subdirectory, and can be retrieved by recovering the appropriate hash from\u00a0<code>.git/logs</code>\u00a0(see \"HEAD-hunting\" above). By default, they will be kept for at least two weeks.</p> <p>Clean: Some git commands refuse to proceed because they\u2019re worried about clobbering untracked files. If you\u2019re certain that all untracked files and directories are expendable, then delete them mercilessly with:</p> <pre><code>git clean -f -d\n</code></pre> <p>Next time, that pesky command will work!</p>"},{"location":"week-3-git/ce103-week-3-git/#preventing-bad-commits","title":"Preventing Bad Commits","text":"<p>Stupid mistakes pollute my repositories. Most frightening are missing files due to a forgotten\u00a0git add. </p> <p>Lesser transgressions are trailing whitespace and unresolved merge conflicts: though harmless, I wish these never appeared on the public record.</p> <p>If only I had bought idiot insurance by using a\u00a0hook\u00a0to alert me about these problems:</p> <pre><code>cd .git/hooks\n</code></pre> <pre><code>cp pre-commit.sample pre-commit  # Older Git versions: chmod +x pre-commit\n</code></pre> <p>Now Git aborts a commit if useless whitespace or unresolved merge conflicts are detected.</p> <p>For this guide, I eventually added the following to the beginning of the\u00a0pre-commit\u00a0hook to guard against absent-mindedness:</p> <pre><code>if git ls-files -o | grep '\\.txt$'; then\necho FAIL! Untracked .txt files.\n  exit 1\nfi\n</code></pre> <p>Several git operations support hooks; see\u00a0git help hooks. We activated the sample\u00a0post-update\u00a0hook earlier when discussing Git over HTTP. This runs whenever the head moves. The sample post-update script updates files Git needs for communication over Git-agnostic transports such as HTTP.</p>"},{"location":"week-3-git/ce103-week-3-git/#secrets-revealed","title":"Secrets Revealed","text":"<p>We take a peek under the hood and explain how Git performs its miracles. I will skimp over details. For in-depth descriptions refer to\u00a0the user manual.</p>"},{"location":"week-3-git/ce103-week-3-git/#invisibility","title":"Invisibility","text":"<p>How can Git be so unobtrusive? Aside from occasional commits and merges, you can work as if you were unaware that version control exists. That is, until you need it, and that\u2019s when you\u2019re glad Git was watching over you the whole time.</p> <p>Other version control systems force you to constantly struggle with red tape and bureaucracy. Permissions of files may be read-only unless you explicitly tell a central server which files you intend to edit. The most basic commands may slow to a crawl as the number of users increases. Work grinds to a halt when the network or the central server goes down.</p> <p>In contrast, Git simply keeps the history of your project in the\u00a0<code>.git</code>\u00a0directory in your working directory. This is your own copy of the history, so you can stay offline until you want to communicate with others. You have total control over the fate of your files because Git can easily recreate a saved state from\u00a0<code>.git</code>\u00a0at any time.</p>"},{"location":"week-3-git/ce103-week-3-git/#integrity","title":"Integrity","text":"<p>Most people associate cryptography with keeping information secret, but another equally important goal is keeping information safe. Proper use of cryptographic hash functions can prevent accidental or malicious data corruption.</p> <p>A SHA1 hash can be thought of as a unique 160-bit ID number for every string of bytes you\u2019ll encounter in your life. Actually more than that: every string of bytes that any human will ever use over many lifetimes.</p> <p>As a SHA1 hash is itself a string of bytes, we can hash strings of bytes containing other hashes. This simple observation is surprisingly useful: look up\u00a0hash chains. We\u2019ll later see how Git uses it to efficiently guarantee data integrity.</p> <p>Briefly, Git keeps your data in the\u00a0<code>.git/objects</code>\u00a0subdirectory, where instead of normal filenames, you\u2019ll find only IDs. By using IDs as filenames, as well as a few lockfiles and timestamping tricks, Git transforms any humble filesystem into an efficient and robust database.</p>"},{"location":"week-3-git/ce103-week-3-git/#intelligence","title":"Intelligence","text":"<p>How does Git know you renamed a file, even though you never mentioned the fact explicitly? Sure, you may have run\u00a0git mv, but that is exactly the same as a\u00a0git rm\u00a0followed by a\u00a0git add.</p> <p>Git heuristically ferrets out renames and copies between successive versions. In fact, it can detect chunks of code being moved or copied around between files! Though it cannot cover all cases, it does a decent job, and this feature is always improving. If it fails to work for you, try options enabling more expensive copy detection, and consider upgrading.</p>"},{"location":"week-3-git/ce103-week-3-git/#indexing","title":"Indexing","text":"<p>For every tracked file, Git records information such as its size, creation time and last modification time in a file known as the\u00a0index. To determine whether a file has changed, Git compares its current stats with those cached in the index. If they match, then Git can skip reading the file again.</p> <p>Since stat calls are considerably faster than file reads, if you only edit a few files, Git can update its state in almost no time.</p> <p>We stated earlier that the index is a staging area. Why is a bunch of file stats a staging area? Because the add command puts files into Git\u2019s database and updates these stats, while the commit command, without options, creates a commit based only on these stats and the files already in the database.</p>"},{"location":"week-3-git/ce103-week-3-git/#gits-origins","title":"Git\u2019s Origins","text":"<p>This\u00a0Linux Kernel Mailing List post\u00a0describes the chain of events that led to Git. The entire thread is a fascinating archaeological site for Git historians.</p>"},{"location":"week-3-git/ce103-week-3-git/#the-object-database","title":"The Object Database","text":"<p>Every version of your data is kept in the\u00a0object database, which lives in the subdirectory\u00a0<code>.git/objects</code>; the other residents of\u00a0<code>.git/</code>\u00a0hold lesser data: the index, branch names, tags, configuration options, logs, the current location of the head commit, and so on. The object database is elementary yet elegant, and the source of Git\u2019s power.</p> <p>Each file within\u00a0<code>.git/objects</code>\u00a0is an\u00a0object. There are 3 kinds of objects that concern us:\u00a0blob\u00a0objects,\u00a0tree\u00a0objects, and\u00a0commit\u00a0objects.</p>"},{"location":"week-3-git/ce103-week-3-git/#blobs","title":"Blobs","text":"<p>First, a magic trick. Pick a filename, any filename. In an empty directory:</p> <pre><code>echo sweet &gt; YOUR_FILENAME\n</code></pre> <pre><code>git init\n</code></pre> <pre><code>git add .\n</code></pre> <pre><code>find .git/objects -type f\n</code></pre> <p>You\u2019ll see\u00a0<code>.git/objects/aa/823728ea7d592acc69b36875a482cdf3fd5c8d</code>.</p> <p>How do I know this without knowing the filename? It\u2019s because the SHA1 hash of:</p> <pre><code>\"blob\" SP \"6\" NUL \"sweet\" LF\n</code></pre> <p>is <code>aa823728ea7d592acc69b36875a482cdf3fd5c8d</code>, where SP is a space, NUL is a zero byte and LF is a linefeed. You can verify this by typing:</p> <pre><code>printf \"blob 6\\000sweet\\n\" | sha1sum\n</code></pre> <p>Git is\u00a0content-addressable: files are not stored according to their filename, but rather by the hash of the data they contain, in a file we call a\u00a0blob object. We can think of the hash as a unique ID for a file\u2019s contents, so in a sense we are addressing files by their content. The initial\u00a0<code>blob 6</code>\u00a0is merely a header consisting of the object type and its length in bytes; it simplifies internal bookkeeping.</p> <p>Thus I could easily predict what you would see. The file\u2019s name is irrelevant: only the data inside is used to construct the blob object.</p> <p>You may be wondering what happens to identical files. Try adding copies of your file, with any filenames whatsoever. The contents of\u00a0<code>.git/objects</code>\u00a0stay the same no matter how many you add. Git only stores the data once.</p> <p>By the way, the files within\u00a0<code>.git/objects</code>\u00a0are compressed with zlib so you should not stare at them directly. Filter them through\u00a0zpipe -d, or type:</p> <pre><code>git cat-file -p aa823728ea7d592acc69b36875a482cdf3fd5c8d\n</code></pre> <p>which pretty-prints the given object.</p>"},{"location":"week-3-git/ce103-week-3-git/#trees","title":"Trees","text":"<p>But where are the filenames? They must be stored somewhere at some stage. Git gets around to the filenames during a commit:</p> <pre><code>git commit  # Type some message.\n</code></pre> <pre><code>find .git/objects -type f\n</code></pre> <p>You should now see 3 objects. This time I cannot tell you what the 2 new files are, as it partly depends on the filename you picked. We\u2019ll proceed assuming you chose \u201crose\u201d. If you didn\u2019t, you can rewrite history to make it look like you did:</p> <pre><code>git filter-branch --tree-filter 'mv YOUR_FILENAME rose'\n</code></pre> <pre><code>find .git/objects -type f\n</code></pre> <p>Now you should see the file\u00a0<code>.git/objects/05/b217bb859794d08bb9e4f7f04cbda4b207fbe9</code>, because this is the SHA1 hash of its contents:</p> <pre><code>\"tree\" SP \"32\" NUL \"100644 rose\" NUL 0xaa823728ea7d592acc69b36875a482cdf3fd5c8d\n</code></pre> <p>Check this file does indeed contain the above by typing:</p> <pre><code>echo 05b217bb859794d08bb9e4f7f04cbda4b207fbe9 | git cat-file --batch\n</code></pre> <p>With zpipe, it\u2019s easy to verify the hash:</p> <pre><code>zpipe -d &lt; .git/objects/05/b217bb859794d08bb9e4f7f04cbda4b207fbe9 | sha1sum\n</code></pre> <p>Hash verification is trickier via cat-file because its output contains more than the raw uncompressed object file.</p> <p>This file is a\u00a0tree\u00a0object: a list of tuples consisting of a file type, a filename, and a hash. In our example, the file type is 100644, which means \u2018rose<code>is a normal file, and the hash is the blob object that contains the contents of</code>rose\u2019. Other possible file types are executables, symlinks or directories. In the last case, the hash points to a tree object.</p> <p>If you ran filter-branch, you\u2019ll have old objects you no longer need. Although they will be jettisoned automatically once the grace period expires, we\u2019ll delete them now to make our toy example easier to follow:</p> <pre><code>rm -r .git/refs/original\n</code></pre> <pre><code>git reflog expire --expire=now --all\n</code></pre> <pre><code>git prune\n</code></pre> <p>For real projects you should typically avoid commands like this, as you are destroying backups. If you want a clean repository, it is usually best to make a fresh clone. Also, take care when directly manipulating\u00a0<code>.git</code>: what if a Git command is running at the same time, or a sudden power outage occurs? In general, refs should be deleted with\u00a0git update-ref -d, though usually it\u2019s safe to remove\u00a0<code>refs/original</code>\u00a0by hand.</p>"},{"location":"week-3-git/ce103-week-3-git/#commits","title":"Commits","text":"<p>We\u2019ve explained 2 of the 3 objects. The third is a\u00a0commit\u00a0object. Its contents depend on the commit message as well as the date and time it was created. To match what we have here, we\u2019ll have to tweak it a little:</p> <pre><code>git commit --amend -m Shakespeare  # Change the commit message.\n</code></pre> <pre><code>git filter-branch --env-filter 'export\n    GIT_AUTHOR_DATE=\"Fri 13 Feb 2009 15:31:30 -0800\"\n    GIT_AUTHOR_NAME=\"Alice\"\n    GIT_AUTHOR_EMAIL=\"alice@example.com\"\n    GIT_COMMITTER_DATE=\"Fri, 13 Feb 2009 15:31:30 -0800\"\n    GIT_COMMITTER_NAME=\"Bob\"\n    GIT_COMMITTER_EMAIL=\"bob@example.com\"'  # Rig timestamps and authors.\nfind .git/objects -type f\n</code></pre> <p>You should now see\u00a0<code>.git/objects/49/993fe130c4b3bf24857a15d7969c396b7bc187</code>\u00a0which is the SHA1 hash of its contents:</p> <pre><code>\"commit 158\" NUL\n\"tree 05b217bb859794d08bb9e4f7f04cbda4b207fbe9\" LF\n\"author Alice &lt;alice@example.com&gt; 1234567890 -0800\" LF\n\"committer Bob &lt;bob@example.com&gt; 1234567890 -0800\" LF\nLF\n\"Shakespeare\" LF\n</code></pre> <p>As before, you can run zpipe or cat-file to see for yourself.</p> <p>This is the first commit, so there are no parent commits, but later commits will always contain at least one line identifying a parent commit.</p>"},{"location":"week-3-git/ce103-week-3-git/#indistinguishable-from-magic","title":"Indistinguishable From Magic","text":"<p>Git\u2019s secrets seem too simple. It looks like you could mix together a few shell scripts and add a dash of C code to cook it up in a matter of hours: a melange of basic filesystem operations and SHA1 hashing, garnished with lock files and fsyncs for robustness. In fact, this accurately describes the earliest versions of Git. Nonetheless, apart from ingenious packing tricks to save space, and ingenious indexing tricks to save time, we now know how Git deftly changes a filesystem into a database perfect for version control.</p> <p>For example, if any file within the object database is corrupted by a disk error, then its hash will no longer match, alerting us to the problem. By hashing hashes of other objects, we maintain integrity at all levels. Commits are atomic, that is, a commit can never only partially record changes: we can only compute the hash of a commit and store it in the database after we already have stored all relevant trees, blobs and parent commits. The object database is immune to unexpected interruptions such as power outages.</p> <p>We defeat even the most devious adversaries. Suppose somebody attempts to stealthily modify the contents of a file in an ancient version of a project. To keep the object database looking healthy, they must also change the hash of the corresponding blob object since it\u2019s now a different string of bytes. </p> <p>This means they\u2019ll have to change the hash of any tree object referencing the file, and in turn change the hash of all commit objects involving such a tree, in addition to the hashes of all the descendants of these commits. This implies the hash of the official head differs to that of the bad repository. </p> <p>By following the trail of mismatching hashes we can pinpoint the mutilated file, as well as the commit where it was first corrupted.</p> <p>In short, so long as the 20 bytes representing the last commit are safe, it\u2019s impossible to tamper with a Git repository.</p> <p>What about Git\u2019s famous features? Branching? Merging? Tags? Mere details. </p> <p>The current head is kept in the file\u00a0<code>.git/HEAD</code>, which contains a hash of a commit object. The hash gets updated during a commit as well as many other commands. </p> <p>Branches are almost the same: they are files in\u00a0<code>.git/refs/heads</code>. Tags too: they live in\u00a0<code>.git/refs/tags</code>\u00a0but they are updated by a different set of commands.</p>"},{"location":"week-3-git/ce103-week-3-git/#git-shortcomings","title":"Git Shortcomings","text":"<p>There are some Git issues I\u2019ve swept under the carpet. Some can be handled easily with scripts and hooks, some require reorganizing or redefining the project, and for the few remaining annoyances, one will just have to wait. Or better yet, pitch in and help!</p>"},{"location":"week-3-git/ce103-week-3-git/#sha1-weaknesses","title":"SHA1 Weaknesses","text":"<p>As time passes, cryptographers discover more and more SHA1 weaknesses. Already, finding hash collisions is feasible for well-funded organizations. Within years, perhaps even a typical PC will have enough computing power to silently corrupt a Git repository.</p> <p>Hopefully Git will migrate to a better hash function before further research destroys SHA1.</p>"},{"location":"week-3-git/ce103-week-3-git/#unrelated-files","title":"Unrelated Files","text":"<p>If your project is very large and contains many unrelated files that are constantly being changed, Git may be disadvantaged more than other systems because single files are not tracked. Git tracks changes to the whole project, which is usually beneficial.</p> <p>A solution is to break up your project into pieces, each consisting of related files. Use\u00a0git submodule\u00a0if you still want to keep everything in a single repository.</p>"},{"location":"week-3-git/ce103-week-3-git/#whos-editing-what","title":"Who\u2019s Editing What?","text":"<p>Some version control systems force you to explicitly mark a file in some way before editing. While this is especially annoying when this involves talking to a central server, it does have two benefits:</p> <ol> <li> <p>Diffs are quick because only the marked files need be examined.</p> </li> <li> <p>One can discover who else is working on the file by asking the central server who has marked it for editing.</p> </li> </ol> <p>With appropriate scripting, you can achieve the same with Git. This requires cooperation from the programmer, who should execute particular scripts when editing a file.</p>"},{"location":"week-3-git/ce103-week-3-git/#file-history","title":"File History","text":"<p>Since Git records project-wide changes, reconstructing the history of a single file requires more work than in version control systems that track individual files.</p> <p>The penalty is typically slight, and well worth having as other operations are incredibly efficient. For example,\u00a0<code>git checkout</code>\u00a0is faster than\u00a0<code>cp -a</code>, and project-wide deltas compress better than collections of file-based deltas.</p>"},{"location":"week-3-git/ce103-week-3-git/#initial-clone","title":"Initial Clone","text":"<p>Creating a clone is more expensive than checking out code in other version control systems when there is a lengthy history.</p> <p>The initial cost is worth paying in the long run, as most future operations will then be fast and offline. However, in some situations, it may be preferable to create a shallow clone with the\u00a0<code>--depth</code>\u00a0option. This is much faster, but the resulting clone has reduced functionality.</p>"},{"location":"week-3-git/ce103-week-3-git/#volatile-projects","title":"Volatile Projects","text":"<p>Git was written to be fast with respect to the size of the changes. Humans make small edits from version to version. A one-liner bugfix here, a new feature there, emended comments, and so forth. But if your files are radically different in successive revisions, then on each commit, your history necessarily grows by the size of your whole project.</p> <p>There is nothing any version control system can do about this, but standard Git users will suffer more since normally histories are cloned.</p> <p>The reasons why the changes are so great should be examined. Perhaps file formats should be changed. Minor edits should only cause minor changes to at most a few files.</p> <p>Or perhaps a database or backup/archival solution is what is actually being sought, not a version control system. For example, version control may be ill-suited for managing photos periodically taken from a webcam.</p> <p>If the files really must be constantly morphing and they really must be versioned, a possibility is to use Git in a centralized fashion. One can create shallow clones, which checks out little or no history of the project. Of course, many Git tools will be unavailable, and fixes must be submitted as patches. This is probably fine as it\u2019s unclear why anyone would want the history of wildly unstable files.</p> <p>Another example is a project depending on firmware, which takes the form of a huge binary file. The history of the firmware is uninteresting to users, and updates compress poorly, so firmware revisions would unnecessarily blow up the size of the repository.</p> <p>In this case, the source code should be stored in a Git repository, and the binary file should be kept separately. To make life easier, one could distribute a script that uses Git to clone the code, and rsync or a Git shallow clone for the firmware.</p>"},{"location":"week-3-git/ce103-week-3-git/#global-counter","title":"Global Counter","text":"<p>Some centralized version control systems maintain a positive integer that increases when a new commit is accepted. Git refers to changes by their hash, which is better in many circumstances.</p> <p>But some people like having this integer around. Luckily, it\u2019s easy to write scripts so that with every update, the central Git repository increments an integer, perhaps in a tag, and associates it with the hash of the latest commit.</p> <p>Every clone could maintain such a counter, but this would probably be useless, since only the central repository and its counter matters to everyone.</p>"},{"location":"week-3-git/ce103-week-3-git/#empty-subdirectories","title":"Empty Subdirectories","text":"<p>Empty subdirectories cannot be tracked. Create dummy files to work around this problem.</p> <p>The current implementation of Git, rather than its design, is to blame for this drawback. With luck, once Git gains more traction, more users will clamour for this feature and it will be implemented.</p>"},{"location":"week-3-git/ce103-week-3-git/#initial-commit","title":"Initial Commit","text":"<p>A stereotypical computer scientist counts from 0, rather than 1. Unfortunately, with respect to commits, git does not adhere to this convention. Many commands are unfriendly before the initial commit. Additionally, some corner cases must be handled specially, such as rebasing a branch with a different initial commit.</p> <p>Git would benefit from defining the zero commit: as soon as a repository is constructed, HEAD would be set to the string consisting of 20 zero bytes. This special commit represents an empty tree, with no parent, at some time predating all Git repositories.</p> <p>Then running git log, for example, would inform the user that no commits have been made yet, instead of exiting with a fatal error. Similarly for other tools.</p> <p>Every initial commit is implicitly a descendant of this zero commit.</p> <p>However there are some problem cases unfortunately. If several branches with different initial commits are merged together, then rebasing the result requires substantial manual intervention.</p>"},{"location":"week-3-git/ce103-week-3-git/#interface-quirks","title":"Interface Quirks","text":"<p>For commits A and B, the meaning of the expressions \"A..B\" and \"A\u2026B\" depends on whether the command expects two endpoints or a range. See\u00a0git help diff\u00a0and\u00a0git help rev-parse.</p>"},{"location":"week-3-git/ce103-week-3-git/#references-1","title":"References (1)","text":"<p>Source Code Management | Atlassian Git Tutorial.</p> <p>What is Source Code Management or Version Control ? - The Linux Juggernaut</p> <p>https://www.edureka.co/blog/how-to-use-github/</p> <p>https://www.edureka.co/blog/git-tutorial/</p> <p>https://www.edureka.co/blog/install-git/</p>"},{"location":"week-3-git/ce103-week-3-git/#references-2","title":"References (2)","text":"<p>git - the simple guide - no deep shit!</p> <p>GitHub - rogerdudler/git-guide: git - the simple guide</p> <p>https://dev.to/lydiahallie/cs-visualized-useful-git-commands-37p1#merge</p> <p>How to write a good commit message - DEV Community</p> <p>https://blog.xebialabs.com/2016/06/14/periodic-table-devops-tools-v-2/</p>"},{"location":"week-3-git/ce103-week-3-git/#references-3","title":"References (3)","text":"<p>https://harness.io/2018/01/devops-tools-lifecycle-mesh-2018/</p> <p>https://medium.com/swlh/how-to-become-an-devops-engineer-in-2020-80b8740d5a52</p> <p>https://www.lucidchart.com/blog/devops-process-flow</p> <p>https://www.researchgate.net/publication/262450962_Rugby_An_Agile_Process_Model_Based_on_Continuous_Delivery</p>"},{"location":"week-3-git/ce103-week-3-git/#references-4","title":"References (4)","text":"<p>git - the simple guide - no deep shit!</p> <p>Git Tutorial | Commands And Operations In Git | Edureka</p> <p>How to write a good commit message - DEV Community</p> <p>An Introduction to Git and GitHub by Brian Yu - YouTube</p>"},{"location":"week-3-git/ce103-week-3-git/#references-5","title":"References (5)","text":"<p>https://education.github.com/git-cheat-sheet-education.pdf</p> <p>NDP Software :: Git Cheatsheet;</p> <p>Learn Git Branching</p> <p>https://guides.github.com/introduction/git-handbook/</p> \\[ End-Of-Week-3 \\]"},{"location":"week-4-test/ce103-week-4-test/","title":"CE103 Algorithms and Programming I","text":""},{"location":"week-4-test/ce103-week-4-test/#ce103-algorithms-and-programming-i","title":"CE103 Algorithms and Programming I","text":""},{"location":"week-4-test/ce103-week-4-test/#week-4","title":"Week-4","text":""},{"location":"week-4-test/ce103-week-4-test/#introduction-to-code-reusability-and-automated-testing","title":"Introduction to Code Reusability and Automated Testing","text":"<p>Download DOC, SLIDE, PPTX</p>"},{"location":"week-4-test/ce103-week-4-test/#outline","title":"Outline","text":"<ul> <li>Introduction to Code Reusability and Automated Testing</li> <li>Shared Library Development<ul> <li>C</li> <li>C++</li> <li>C#</li> <li>Java</li> </ul> </li> <li>Unit Testing<ul> <li>C</li> <li>C++</li> <li>C#</li> <li>Java</li> </ul> </li> <li>Continues Integration Platforms </li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#introduction-to-code-reusability-and-automated-testing_1","title":"Introduction to Code Reusability and Automated Testing","text":"<ul> <li>During this course, we will use entry-level shared library development and their tests and test automation. Also, we will see TDD(Test Driven Development) approach.</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#selected-development-environment","title":"Selected Development Environment","text":"<ul> <li>During this course, we will use Windows OS, Eclipse and Visual Studio Community Edition environments for examples.</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#example-content","title":"Example Content","text":"<ul> <li>Each example will include two function</li> <li>\"<code>Hello &lt;name&gt;</code>\" printing function with name <code>sayHelloTo(name)</code> and sum of two variable function for basic, <code>sum = sum(a,b)</code>. This sum function will add a to b and return the result to the sum variable.</li> <li>We will locate them in the library and use them from a console application, also we will create unit tests for testing their functionalities and return variables</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development","title":"Shared Library Development","text":""},{"location":"week-4-test/ce103-week-4-test/#c-programming-static-library","title":"C Programming (Static Library)","text":""},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition","title":"Visual Studio Community Edition","text":""},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-1","title":"Shared Library Development - (VS C Static Library)-1","text":"<ul> <li>In this sample, we will create a c-lib-sample project that contains a library, executable, unit tests and unit test runners.</li> <li>First of all, you install Visual Studio Community Edition from the website<ul> <li>Visual Studio 2019 Community Edition - Son \u00dccretsiz S\u00fcr\u00fcm\u00fc \u0130ndir</li> </ul> </li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-2","title":"Shared Library Development - (VS C Static Library)-2","text":"<ul> <li>Open visual studio community edition and select create a new project</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-3","title":"Shared Library Development - (VS C Static Library)-3","text":"<ul> <li>Select create a new project</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-4","title":"Shared Library Development - (VS C Static Library)-4","text":"<ul> <li>Select C++ static library from the project list</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-5","title":"Shared Library Development - (VS C Static Library)-5","text":"<ul> <li>Give static library project name</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-6","title":"Shared Library Development - (VS C Static Library)-6","text":"<ul> <li>Default configuration come with C++ project types and setting</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-7","title":"Shared Library Development - (VS C Static Library)-7","text":"<p>In the c-sample-lib.cpp you will sample function</p> <pre><code>void fncsamplelib(){\n}\n</code></pre>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-8","title":"Shared Library Development - (VS C Static Library)-8","text":"<p>Delete pch.h and pch.c files. Also disable use precompiled header settings from configurations and change to \"Not Using Precomplied Headers\", also you can delete precomplied Header File.</p> <p></p>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-9","title":"Shared Library Development - (VS C Static Library)-9","text":"<ul> <li> <p>Customize library header name and update <code>framework.h</code> to <code>samplelib.h</code></p> </li> <li> <p>Insert your functions inside the <code>c-sample-lib.c</code> and update header files also.</p> </li> </ul> <pre><code>// c-sample-lib.cpp : Defines the functions for the static library.\n//\n#include \"samplelib.h\"\n#include \"stdio.h\"\n/// &lt;summary&gt;\n///\n/// &lt;/summary&gt;\n/// &lt;param name=\"name\"&gt;&lt;/param&gt;\nvoid sayHelloTo(char* name){\nif (name != NULL){\nprintf(\"Hello %s \\n\",name);\n}\nelse {\nprintf(\"Hello There\\n\");\n}\n}\n/// &lt;summary&gt;\n///\n/// &lt;/summary&gt;\n/// &lt;param name=\"a\"&gt;&lt;/param&gt;\n/// &lt;param name=\"b\"&gt;&lt;/param&gt;\n/// &lt;returns&gt;&lt;/returns&gt;\nint sum(int a, int b){\nint c = 0;\nc = a + b;\nreturn c;\n}\n</code></pre>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-10","title":"Shared Library Development - (VS C Static Library)-10","text":"<ul> <li>Also, update <code>samplelib.h</code> as follows.</li> </ul> <pre><code>#pragma once\n#define WIN32_LEAN_AND_MEAN             // Exclude rarely-used stuff from Windows headers\nvoid sayHelloTo(char* name);\nint sum(int a, int b);\n</code></pre>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-11","title":"Shared Library Development - (VS C Static Library)-11","text":"<ul> <li>If you check the configuration you will see that for C compiler we are using Microsoft Environment and Toolkits</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-12","title":"Shared Library Development - (VS C Static Library)-12","text":"<ul> <li>Now we can compile our library</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-13","title":"Shared Library Development - (VS C Static Library)-13","text":"<ul> <li>You can follow operation from the output window</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-14","title":"Shared Library Development - (VS C Static Library)-14","text":"<ul> <li>In the debug folder, we will see our output</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-15","title":"Shared Library Development - (VS C Static Library)-15","text":"<ul> <li>Now we will add a console application c-sample-app and use our library</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-16","title":"Shared Library Development - (VS C Static Library)-16","text":"<p>select C++ Windows Console Application from list</p> <p></p>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-17","title":"Shared Library Development - (VS C Static Library)-17","text":"<ul> <li>C++ Console Application Selection will generate a C++ console project we can change extension to C to compile our application as C application.</li> </ul> <p>we will convert <code>c-sample-app.c</code> to following code</p> <pre><code>#include &lt;stdio.h&gt;\n/// &lt;summary&gt;\n///\n/// &lt;/summary&gt;\n/// &lt;returns&gt;&lt;/returns&gt;\nint main()\n{\nprintf(\"Hello World!\\n\");\n}\n</code></pre>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-18","title":"Shared Library Development - (VS C Static Library)-18","text":"<p>after conversion set <code>c-sample-app</code> as startup project and build it</p> <p></p> <ul> <li>this will create <code>c-sample-app.exe</code> in the same folder with <code>c-sample-lib.lib</code> library</li> </ul> <p></p> <ul> <li>if we run the application we will see only \u00a0\u00a0<code>\"Hello World\"</code></li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-19","title":"Shared Library Development - (VS C Static Library)-19","text":"<ul> <li>now we will see two options to add a library as references in our application and use its functions.</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-20","title":"Shared Library Development - (VS C Static Library)-20","text":"<p>First option</p> <ul> <li>right click references for c-sample-app and add current library as reference</li> </ul> <p></p>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-21","title":"Shared Library Development - (VS C Static Library)-21","text":"<ul> <li>Select Add Reference</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-22","title":"Shared Library Development - (VS C Static Library)-22","text":"<ul> <li>Browse for solution and select <code>c-sample-lib</code></li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-23","title":"Shared Library Development - (VS C Static Library)-23","text":"<p>You can check added reference from references section</p> <p></p>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-24","title":"Shared Library Development - (VS C Static Library)-24","text":"<ul> <li> <p>Now we can include required headers from <code>c-sample-lib</code> folder and use it.</p> </li> <li> <p>We can include required header with relative path as follow or with configuration</p> </li> </ul> <pre><code>#include &lt;stdio.h&gt;\n#include \"..\\c-sample-lib\\samplelib.h\"\n/// &lt;summary&gt;\n///\n/// &lt;/summary&gt;\n/// &lt;returns&gt;&lt;/returns&gt;\nint main()\n{\nprintf(\"Hello World!\\n\");\n}\n</code></pre>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-25","title":"Shared Library Development - (VS C Static Library)-25","text":"<ul> <li>we can build our <code>c-sample-app</code></li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-26","title":"Shared Library Development - (VS C Static Library)-26","text":"<ul> <li>Also we can only write header name</li> </ul> <pre><code>#include &lt;samplelib.h&gt;\n</code></pre>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-27","title":"Shared Library Development - (VS C Static Library)-27","text":"<ul> <li>For this option, we need to configure include directories</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-28","title":"Shared Library Development - (VS C Static Library)-28","text":"<p>select c-sample-lib header file location</p> <p></p> <p>browse for folder</p> <p></p>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-29","title":"Shared Library Development - (VS C Static Library)-29","text":"<p>your full path will be added to your configuration</p> <p></p>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-30","title":"Shared Library Development - (VS C Static Library)-30","text":"<p>if you add header file paths to your configuration you can use header files by name in your source code</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;samplelib.h&gt;\n/// &lt;summary&gt;\n///\n/// &lt;/summary&gt;\n/// &lt;returns&gt;&lt;/returns&gt;\nint main()\n{\nprintf(\"Hello World!\\n\");\n}\n</code></pre>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-31","title":"Shared Library Development - (VS C Static Library)-31","text":"<ul> <li>we can compile the following we don't have problems but here we need to configure relative paths for configuration open include library settings and update with relative path</li> </ul> <pre><code>..\\c-sample-lib\n</code></pre>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-32","title":"Shared Library Development - (VS C Static Library)-32","text":"<ul> <li>now we have portable source code configuration. we can call our functions and then we can update header and library folder configurations.</li> </ul> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;samplelib.h&gt;\n/// &lt;summary&gt;\n///\n/// &lt;/summary&gt;\n/// &lt;returns&gt;&lt;/returns&gt;\nint main()\n{\nint result = 0;\n//printf(\"Hello World!\\n\");\nresult = sum(5, 4);\nsayHelloTo(\"Computer\");\nprintf(\"Result is %d \\n\",result);\nprintf(\"Press any key to continue...\\n\");\ngetchar();\nreturn 0;\n}\n</code></pre>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-33","title":"Shared Library Development - (VS C Static Library)-33","text":"<ul> <li>when you run you will see the following outputs, which mean we called library functions.</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-34","title":"Shared Library Development - (VS C Static Library)-34","text":"<ul> <li>A static library is a code-sharing approach if you want to share your source code with your customers then you can share static libraries and header files. In another case you can use a precompiled static library with you or this library can be part of any installation then if there is an installed app and static libraries are placed on the system folder or any different location then you can use configuration files to set library path and included header paths</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-35","title":"Shared Library Development - (VS C Static Library)-35","text":"<ul> <li>Now we can remove the project from c-sample-app references but we will set library file in configuration</li> </ul> <p>Before this copy static library and header files to a folder like that</p> <pre><code>DebugStaticLibDeployment\n</code></pre> <ul> <li>Set C/C++ -&gt; General -&gt; Additional Include Directories</li> </ul> <p>There is a bug in configurations and relative path not finding headers so for this reason we will set full path but this is not a good practice for team working</p>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-36","title":"Shared Library Development - (VS C Static Library)-36","text":"<p>Not Working Solution</p> <pre><code>..\\c-sample-lib\\DebugStaticLibDeployment\n</code></pre> <p></p>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-37","title":"Shared Library Development - (VS C Static Library)-37","text":"<p>Working Solution</p> <pre><code>E:\\...\\c-lib-sample\\c-sample-lib\\DebugStaticLibDeployment\n</code></pre> <p></p>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-38","title":"Shared Library Development - (VS C Static Library)-38","text":"<p>Now we will set library folder that our static library placed</p> <p>we will set VC++ Directories -&gt; Library Directories</p> <p>Here is the same issue if we use relative path it doesn't work we need to set full path for library folder</p>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-39","title":"Shared Library Development - (VS C Static Library)-39","text":"<p>Working Solution</p> <pre><code>E:\\...\\c-lib-sample\\c-sample-lib\\DebugStaticLibDeployment\n</code></pre> <p></p>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-40","title":"Shared Library Development - (VS C Static Library)-40","text":""},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-41","title":"Shared Library Development - (VS C Static Library)-41","text":"<p>Not Working</p> <pre><code>..\\c-sample-lib\\DebugStaticLibDeployment\n</code></pre> <p></p>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-42","title":"Shared Library Development - (VS C Static Library)-42","text":""},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-43","title":"Shared Library Development - (VS C Static Library)-43","text":"<p>If we set full path for both libraries and headers then we need to set library name for project</p> <p>Linker-&gt;Input-&gt;Additional Dependencies</p> <p></p> <p>In this case we will compile c-sample-app and we do not need to compile c-sample-lib because we copied output files to a different location and they are ready to use.</p>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-44","title":"Shared Library Development - (VS C Static Library)-44","text":"<p>current source code will be like that nothing changed</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;samplelib.h&gt;\n/// &lt;summary&gt;\n///\n/// &lt;/summary&gt;\n/// &lt;returns&gt;&lt;/returns&gt;\nint main()\n{\nint result = 0;\n//printf(\"Hello World!\\n\");\nresult = sum(5, 4);\nsayHelloTo(\"Computer\");\nprintf(\"Result is %d \\n\",result);\nprintf(\"Press any key to continue...\\n\");\ngetchar();\nreturn 0;\n}\n</code></pre>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-45","title":"Shared Library Development - (VS C Static Library)-45","text":"<ul> <li>and output will be as follow</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-46","title":"Shared Library Development - (VS C Static Library)-46","text":"<p>There is a option about portability that we can set for team works</p> <p>We will remove all library related settings from configurations and we will write them in source code</p> <p>Clear linker-&gt;general-&gt;additional library directories</p> <p></p>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-47","title":"Shared Library Development - (VS C Static Library)-47","text":"<p>Clear C/C++ -&gt; General -&gt; Additional Include Directories</p> <p></p>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-48","title":"Shared Library Development - (VS C Static Library)-48","text":"<p>Clear Linker-&gt;Input-&gt;Additional Dependencies</p> <p></p>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-c-static-library-49","title":"Shared Library Development - (VS C Static Library)-49","text":"<p>Now we can set this configurations in source code as follow</p> <pre><code>#pragma comment(lib, \"..\\\\DebugStaticLibDeployment\\\\c-sample-lib.lib\")\n#include \"..\\DebugStaticLibDeployment\\samplelib.h\"\n#include &lt;stdio.h&gt;\n/// &lt;summary&gt;\n///\n/// &lt;/summary&gt;\n/// &lt;returns&gt;&lt;/returns&gt;\nint main()\n{\nint result = 0;\n//printf(\"Hello World!\\n\");\nresult = sum(5, 4);\nsayHelloTo(\"Computer\");\nprintf(\"Result is %d \\n\",result);\nprintf(\"Press any key to continue...\\n\");\ngetchar();\nreturn 0;\n}\n</code></pre> <p>with this configuration if your friends download this code then they can run them with their environment without setting a path.</p>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development_1","title":"Shared Library Development","text":""},{"location":"week-4-test/ce103-week-4-test/#c-programming-static-library_1","title":"C++ Programming (Static Library)","text":""},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition_1","title":"Visual Studio Community Edition","text":""},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-cpp-static-library-1","title":"Shared Library Development - (VS Cpp Static Library)-1","text":"<ul> <li> <p>All steps are similar with C programming above, but you do not need to delete pch.h</p> </li> <li> <p>You should take care about compiled source codes</p> </li> <li> <p>for example if your code is compiled for x86 then your application also should use the x86 configuration else x64 then library should be x64 complied version.</p> </li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-cpp-static-library-2","title":"Shared Library Development - (VS Cpp Static Library)-2","text":"<ul> <li>Source will look like the following</li> </ul> <pre><code>// cpp-sample-app.cpp : This file contains the 'main' function. Program execution begins and ends there.\n//\n#pragma comment(lib, \"..\\\\DebugStaticLibDeployment\\\\cpp-sample-lib.lib\")\n#include \"..\\DebugStaticLibDeployment\\samplelib.h\"\n#include &lt;iostream&gt;\nint main()\n{\nstd::cout &lt;&lt; \"Hello World!\\n\";\nint result = 0;\n//printf(\"Hello World!\\n\");\nresult = sum(5, 4);\nsayHelloTo(\"Computer\");\nprintf(\"Result is %d \\n\", result);\nprintf(\"Press any key to continue...\\n\");\ngetchar();\nreturn 0;\n}\n</code></pre>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development_2","title":"Shared Library Development","text":""},{"location":"week-4-test/ce103-week-4-test/#c-programming-static-library_2","title":"C++ Programming (Static Library)","text":""},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-wsl-option","title":"Visual Studio Community Edition WSL Option","text":""},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-cpp-wsl-static-library-1","title":"Shared Library Development - (VS Cpp WSL Static Library)-1","text":"<ul> <li>Install WSL2<ul> <li>GitHub - ucoruh/ns3-wsl-win10-setup: ns3 windows 10 WSL2 setup and usage</li> </ul> </li> <li>Create a Linux project </li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-cpp-wsl-static-library-2","title":"Shared Library Development - (VS Cpp WSL Static Library)-2","text":"<ul> <li>Configure Platform Toolset to WSL</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-cpp-wsl-static-library-3","title":"Shared Library Development - (VS Cpp WSL Static Library)-3","text":"<ul> <li>Select GCC for Windows Subsystem for Linux</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-cpp-wsl-static-library-4","title":"Shared Library Development - (VS Cpp WSL Static Library)-4","text":"<p>Put a breakpoint and run debugger</p> <p></p>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-cpp-wsl-static-library-5","title":"Shared Library Development - (VS Cpp WSL Static Library)-5","text":"<p>In the debugger for WSL you can use local WSL installation but if you want to run it on Release setting it require a SSH connection.</p> <p></p>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-cpp-wsl-static-library-6","title":"Shared Library Development - (VS Cpp WSL Static Library)-6","text":"<ul> <li>Configure SSH parameters</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-cpp-wsl-static-library-7","title":"Shared Library Development - (VS Cpp WSL Static Library)-7","text":"<ul> <li>so you have to complete the following steps.</li> <li>C/C++ Remote Linux Option over SSH<ul> <li>Enable SSH<ul> <li>SSH on Windows Subsystem for Linux (WSL) | Illuminia Studios</li> </ul> </li> <li>Connect to Remote WSL Environment<ul> <li>Ba\u011flan hedef Linux sisteminize Visual Studio | Microsoft Docs</li> </ul> </li> </ul> </li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development_3","title":"Shared Library Development","text":""},{"location":"week-4-test/ce103-week-4-test/#c-programming-dinamik-library","title":"C# Programming (Dinamik Library)","text":""},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition_2","title":"Visual Studio Community Edition","text":""},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-csharp-dynamic-library-1","title":"Shared Library Development - (VS Csharp Dynamic Library)-1","text":"<ul> <li>In C# project we will create class library we have several options </li> <li>for this sample we will select .NET core that we can build cross platform library</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-csharp-dynamic-library-2","title":"Shared Library Development - (VS Csharp Dynamic Library)-2","text":"<ul> <li>There is no static library option</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-csharp-dynamic-library-3","title":"Shared Library Development - (VS Csharp Dynamic Library)-3","text":"<ul> <li>We will select .Net Core 3.1</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-csharp-dynamic-library-4","title":"Shared Library Development - (VS Csharp Dynamic Library)-4","text":"<ul> <li>You will have default empty class library file</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-csharp-dynamic-library-5","title":"Shared Library Development - (VS Csharp Dynamic Library)-5","text":"<ul> <li>In the project you can see .NETcore reference</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-csharp-dynamic-library-6","title":"Shared Library Development - (VS Csharp Dynamic Library)-6","text":"<ul> <li>We can build empty class library that generate dll for our application</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-csharp-dynamic-library-7","title":"Shared Library Development - (VS Csharp Dynamic Library)-7","text":"<ul> <li>Now we will add Console Application but this will also use .NETCore</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-csharp-dynamic-library-8","title":"Shared Library Development - (VS Csharp Dynamic Library)-8","text":"<ul> <li>Select New Project</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-csharp-dynamic-library-9","title":"Shared Library Development - (VS Csharp Dynamic Library)-9","text":"<ul> <li>Set project name</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-csharp-dynamic-library-10","title":"Shared Library Development - (VS Csharp Dynamic Library)-10","text":"<ul> <li>Select .NETCore framework</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-csharp-dynamic-library-11","title":"Shared Library Development - (VS Csharp Dynamic Library)-11","text":"<ul> <li>You will have the following sample main.cs file</li> </ul> <pre><code>using System;\nnamespace csharp_sample_app\n{\nclass Program\n{\nstatic void Main(string[] args)\n{\nConsole.WriteLine(\"Hello World!\");\n}\n}\n}\n</code></pre>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-csharp-dynamic-library-12","title":"Shared Library Development - (VS Csharp Dynamic Library)-12","text":"<ul> <li>Now we can link projects with adding references open reference section</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-csharp-dynamic-library-13","title":"Shared Library Development - (VS Csharp Dynamic Library)-13","text":"<ul> <li>browse for class library project output folder and select output dll file for console application</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-csharp-dynamic-library-14","title":"Shared Library Development - (VS Csharp Dynamic Library)-14","text":"<ul> <li> <p>now we can update our library code and use it in console application</p> </li> <li> <p>copy following sample to sampleLibClass file in the library</p> </li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-csharp-dynamic-library-15","title":"Shared Library Development - (VS Csharp Dynamic Library)-15","text":"<pre><code>using System;\nnamespace csharp_sample_lib\n{\npublic class sampleLibClass\n{\npublic static void sayHelloTo(string name)\n{\nif (!String.IsNullOrEmpty(name))\n{\nConsole.WriteLine(\"Hello \" + name);\n}\nelse\n{\nConsole.WriteLine(\"Hello There\");\n}\n}\npublic static int sum(int a, int b)\n{\nint c = 0;\nc = a + b;\nreturn c;\n}\n}\n}\n</code></pre>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-csharp-dynamic-library-16","title":"Shared Library Development - (VS Csharp Dynamic Library)-16","text":"<ul> <li>After this operation copy following sample to console application and build app then you can run</li> </ul> <pre><code>using csharp_sample_lib;\nusing System;\nnamespace csharp_sample_app\n{\nclass Program\n{\nstatic void Main(string[] args)\n{\nConsole.WriteLine(\"Hello World!\");\nsampleLibClass.sayHelloTo(\"Computer\");\nint result = sampleLibClass.sum(5, 4);\nConsole.WriteLine(\"Results is\" + result);\nConsole.WriteLine(\"Results is {0}\", result);\nConsole.Read();\n}\n}\n}\n</code></pre>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-csharp-dynamic-library-17","title":"Shared Library Development - (VS Csharp Dynamic Library)-17","text":"<ul> <li>You will see following output that mean we called DLL functions</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-csharp-dynamic-library-18","title":"Shared Library Development - (VS Csharp Dynamic Library)-18","text":"<ul> <li> <p>Also we can publish this console application with dll for linux environment or others</p> </li> <li> <p>for linux environment we should install .NETCore</p> </li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-csharp-dynamic-library-19","title":"Shared Library Development - (VS Csharp Dynamic Library)-19","text":"<ul> <li> <p>follow the link below or commands that I shared with you as below for deployment</p> </li> <li> <p>How to Install Dotnet Core on Ubuntu 20.04 \u2013 TecAdmin</p> </li> </ul> <p>Step 1 \u2013 Enable Microsoft PPA</p> <pre><code> wget https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb\nsudo dpkg -i packages-microsoft-prod.deb\n</code></pre>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-csharp-dynamic-library-20","title":"Shared Library Development - (VS Csharp Dynamic Library)-20","text":"<p>Step 2 \u2013 Installing Dotnet Core SDK</p> <pre><code>sudo apt update\nsudo apt install apt-transport-https\nsudo apt install dotnet-sdk-3.1\n</code></pre>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-csharp-dynamic-library-21","title":"Shared Library Development - (VS Csharp Dynamic Library)-21","text":"<p>Step 3 \u2013 Install Dotnet Core Runtime Only</p> <p>To install .NET Core Runtime on Ubuntu 20.04 LTS system, execute the commands:</p> <pre><code>sudo apt update\n</code></pre>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-csharp-dynamic-library-22","title":"Shared Library Development - (VS Csharp Dynamic Library)-22","text":"<p>To install the previous version of .Net core runtime 2.1, type:</p> <pre><code>sudo apt install dotnet-runtime-2.1\n</code></pre> <p>Press \u201cy\u201d for any input prompted by the installer.</p>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-csharp-dynamic-library-23","title":"Shared Library Development - (VS Csharp Dynamic Library)-23","text":"<p>Step 4 \u2013 (Optional) Check .NET Core Version</p> <p>You can use dotnet command line utility to check installed version of .NET Core on your system. To check dotnet version, type:</p> <pre><code>dotnet --version\n</code></pre> <p></p>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-csharp-dynamic-library-24","title":"Shared Library Development - (VS Csharp Dynamic Library)-24","text":"<ul> <li>Now we will publish our application as single executable</li> <li>Open publish menu</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-csharp-dynamic-library-25","title":"Shared Library Development - (VS Csharp Dynamic Library)-25","text":"<ul> <li>Select netcoreapp3.1 and Release for linux-x64</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-csharp-dynamic-library-26","title":"Shared Library Development - (VS Csharp Dynamic Library)-26","text":"<ul> <li>Select produce single file</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-csharp-dynamic-library-27","title":"Shared Library Development - (VS Csharp Dynamic Library)-27","text":"<ul> <li>After succesfull publish you will have linux binary that you can run with WSL</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-csharp-dynamic-library-28","title":"Shared Library Development - (VS Csharp Dynamic Library)-28","text":"<ul> <li>Open WSL and enter the path where this folder located</li> <li>And run application as follow</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-csharp-dynamic-library-29","title":"Shared Library Development - (VS Csharp Dynamic Library)-29","text":"<p>check dotnet --version and then run application</p> <p></p> <ul> <li>you will see similar output</li> </ul> <p></p>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-csharp-dynamic-library-30","title":"Shared Library Development - (VS Csharp Dynamic Library)-30","text":"<p>In this sample we created single application from settings lets try with shared library located option uncheck the \"produce single file\" option and publish again.</p> <p>Then you will have the following outputs</p> <p></p>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-vs-csharp-dynamic-library-31","title":"Shared Library Development - (VS Csharp Dynamic Library)-31","text":"<ul> <li> <p>If you run csharp-sample-app</p> </li> <li> <p>you will have the same output</p> </li> </ul> <p></p>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development_4","title":"Shared Library Development","text":""},{"location":"week-4-test/ce103-week-4-test/#java-programming","title":"Java Programming","text":""},{"location":"week-4-test/ce103-week-4-test/#eclipse-ide","title":"Eclipse IDE","text":""},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-1","title":"Shared Library Development - (Eclipse Java Jar Library)-1","text":"<ul> <li>You should download and install eclipse installer and then you should select Eclipse IDE for Java Developers<ul> <li>Eclipse Installer 2021-09 R | Eclipse Packages</li> </ul> </li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-2","title":"Shared Library Development - (Eclipse Java Jar Library)-2","text":""},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-3","title":"Shared Library Development - (Eclipse Java Jar Library)-3","text":""},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-4","title":"Shared Library Development - (Eclipse Java Jar Library)-4","text":""},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-5","title":"Shared Library Development - (Eclipse Java Jar Library)-5","text":"<ul> <li>select create a project</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-6","title":"Shared Library Development - (Eclipse Java Jar Library)-6","text":"<p>select java project</p> <p></p>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-7","title":"Shared Library Development - (Eclipse Java Jar Library)-7","text":"<ul> <li>give project name</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-8","title":"Shared Library Development - (Eclipse Java Jar Library)-8","text":"<ul> <li>select finish</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-9","title":"Shared Library Development - (Eclipse Java Jar Library)-9","text":"<ul> <li>first we need to add a default package to keep everything organized</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-10","title":"Shared Library Development - (Eclipse Java Jar Library)-10","text":"<ul> <li>then we can create our class that includes our functions</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-11","title":"Shared Library Development - (Eclipse Java Jar Library)-11","text":"<ul> <li>give class a name</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-12","title":"Shared Library Development - (Eclipse Java Jar Library)-12","text":"<ul> <li>you will have following class with main</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-13","title":"Shared Library Development - (Eclipse Java Jar Library)-13","text":"<ul> <li>We will create sample java library with static functions as below.</li> </ul> <pre><code>package ce103;\nimport java.io.IOException;\npublic class JavaSampleLib {\npublic static void sayHelloTo(String name) {\nif(name.isBlank() || name.isEmpty())\n{\nSystem.out.println(\"Hello \"+name);\n}else {\nSystem.out.println(\"Hello There\");\n}\n}\npublic static int sum(int a,int b)\n{\nint c = 0;\nc = a+b;\nreturn c;\n}\npublic static void main(String[] args) {\n// TODO Auto-generated method stub\nSystem.out.println(\"Hello World!\");\nJavaSampleLib.sayHelloTo(\"Computer\");\nint result = JavaSampleLib.sum(5, 4);\nSystem.out.println(\"Results is\" + result);\nSystem.out.printf(\"Results is %d \\n\", result);\ntry {\nSystem.in.read();\n} catch (IOException e) {\n// TODO Auto-generated catch block\ne.printStackTrace();\n}\n}\n}\n</code></pre>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-14","title":"Shared Library Development - (Eclipse Java Jar Library)-14","text":"<p>also we can add main method to run our library functions. If we run this file its process main function</p> <p></p>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-15","title":"Shared Library Development - (Eclipse Java Jar Library)-15","text":"<ul> <li>we can see output from console as below</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-16","title":"Shared Library Development - (Eclipse Java Jar Library)-16","text":"<ul> <li>There is no exe files java runtime environment run class files but we can export this as an executable.</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-17","title":"Shared Library Development - (Eclipse Java Jar Library)-17","text":"<ul> <li>Select Java-&gt;Runnable JAR File</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-18","title":"Shared Library Development - (Eclipse Java Jar Library)-18","text":"<p>click next and set output path for jar file</p> <p></p>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-19","title":"Shared Library Development - (Eclipse Java Jar Library)-19","text":"<ul> <li> <p>If our project has several external dependecy then we can extract this required files (jar, so, dll) in seperated folder or we can combine them and generate a single executable jar</p> </li> <li> <p>Lets pack everthing together, Select launch configuration that has main function</p> </li> </ul> <p></p>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-20","title":"Shared Library Development - (Eclipse Java Jar Library)-20","text":"<p>end of this operation we will have the following jar that we can by click</p> <p></p>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-21","title":"Shared Library Development - (Eclipse Java Jar Library)-21","text":"<ul> <li> <p>When you click application if cannot run then try command line to see problem</p> </li> <li> <p>enter jar folder and run the following command</p> </li> </ul> <pre><code>java -jar JavaSampleLibExecutable.jar\n</code></pre> <p></p> <p>In my case eclipse build JDK is newer than that I installed and set for my OS</p> <p>If we check version we can see problem Java version 1.8.0_231</p> <p></p>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-22","title":"Shared Library Development - (Eclipse Java Jar Library)-22","text":"<p>We can found installed and builded JDK for our application from Eclipse setting</p> <p></p>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-23","title":"Shared Library Development - (Eclipse Java Jar Library)-23","text":"<ul> <li>select environments</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-24","title":"Shared Library Development - (Eclipse Java Jar Library)-24","text":"<ul> <li>select installed JRE or JDK</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-25","title":"Shared Library Development - (Eclipse Java Jar Library)-25","text":"<ul> <li>you can see installed JRE or JDK home</li> </ul> <pre><code>C:\\Program Files\\Java\\jdk-16.0.1\n</code></pre>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-26","title":"Shared Library Development - (Eclipse Java Jar Library)-26","text":"<ul> <li>Open system environment to fix this problem</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-27","title":"Shared Library Development - (Eclipse Java Jar Library)-27","text":""},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-28","title":"Shared Library Development - (Eclipse Java Jar Library)-28","text":"<ul> <li>Check user settings first</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-29","title":"Shared Library Development - (Eclipse Java Jar Library)-29","text":""},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-30","title":"Shared Library Development - (Eclipse Java Jar Library)-30","text":"<ul> <li>Check system settings</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-31","title":"Shared Library Development - (Eclipse Java Jar Library)-31","text":""},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-32","title":"Shared Library Development - (Eclipse Java Jar Library)-32","text":"<ul> <li>we will move up the JDK 16 configuration then command line will run first java</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-33","title":"Shared Library Development - (Eclipse Java Jar Library)-33","text":"<ul> <li>Also in system setting check JAVA_HOME</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-34","title":"Shared Library Development - (Eclipse Java Jar Library)-34","text":"<ul> <li>After this settings close current command line and open new one</li> <li>Write</li> </ul> <pre><code>java --version\n</code></pre> <ul> <li>if you see java version updated and 16.0.1 then settings are correct</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-35","title":"Shared Library Development - (Eclipse Java Jar Library)-35","text":"<p>and now if we enter and run application as follow we will see output</p> <p></p>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-36","title":"Shared Library Development - (Eclipse Java Jar Library)-36","text":"<ul> <li>But when you click this jar its not running as you see so we have options to provide a clickable application there</li> <li>Launch4j is an option here<ul> <li>Launch4j - Cross-platform Java executable wrapper</li> </ul> </li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-37","title":"Shared Library Development - (Eclipse Java Jar Library)-37","text":"<ul> <li>you can watch this tutorial also<ul> <li>How to convert jar to exe using Launch4J Full explanation - YouTube</li> </ul> </li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-38","title":"Shared Library Development - (Eclipse Java Jar Library)-38","text":"<ul> <li>Download and install launch4j and open application</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-39","title":"Shared Library Development - (Eclipse Java Jar Library)-39","text":"<ul> <li>Configure your application settings similar to below select jar file and exe output path</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-40","title":"Shared Library Development - (Eclipse Java Jar Library)-40","text":"<ul> <li>We can customize main class if have multiple main class</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-41","title":"Shared Library Development - (Eclipse Java Jar Library)-41","text":"<p>select console from setting for this application</p> <p></p>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-42","title":"Shared Library Development - (Eclipse Java Jar Library)-42","text":"<ul> <li>we can provide a single running application, this setting avoid to run multiple instances</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-43","title":"Shared Library Development - (Eclipse Java Jar Library)-43","text":"<ul> <li>we need to set runtime environment versions</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-44","title":"Shared Library Development - (Eclipse Java Jar Library)-44","text":"<p>you can set system parameters before running application</p> <p></p>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-45","title":"Shared Library Development - (Eclipse Java Jar Library)-45","text":"<ul> <li>with splash screen you can show a splash screen image for your application</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-46","title":"Shared Library Development - (Eclipse Java Jar Library)-46","text":"<ul> <li>File attributes such as version product information is configured from version info tab</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-47","title":"Shared Library Development - (Eclipse Java Jar Library)-47","text":"<p>if your application runtime condition has an error then you can show this customized messages also</p> <p></p>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-48","title":"Shared Library Development - (Eclipse Java Jar Library)-48","text":"<ul> <li>with this options save configuration file xml</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-49","title":"Shared Library Development - (Eclipse Java Jar Library)-49","text":"<ul> <li>and compile settings</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-50","title":"Shared Library Development - (Eclipse Java Jar Library)-50","text":"<ul> <li>You will see generated output file in log screen</li> </ul> <pre><code>Compiling resources\nLinking\nWrapping\nWARNING: Sign the executable to minimize antivirus false positives or use launching instead of wrapping.\nSuccessfully created C:\\Users\\ugur.coruh\\Desktop\\java-export-sample\\JavaSampleLibExecutable.exe\n</code></pre>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-51","title":"Shared Library Development - (Eclipse Java Jar Library)-51","text":"<ul> <li>now we can run exe by click</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-52","title":"Shared Library Development - (Eclipse Java Jar Library)-52","text":"<p>another option here adding a bat file to run current jar file</p>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-53","title":"Shared Library Development - (Eclipse Java Jar Library)-53","text":"<p>JavaSampleLibExecutable.bat</p> <pre><code>java -jar JavaSampleLibExecutable.jar\n</code></pre> <p></p> <ul> <li>if we click bat file then we will automate command line task for current jar file</li> </ul> <p></p>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-54","title":"Shared Library Development - (Eclipse Java Jar Library)-54","text":"<p>Now return back to our java library and create another console application that use library functions</p> <p></p>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-55","title":"Shared Library Development - (Eclipse Java Jar Library)-55","text":""},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-56","title":"Shared Library Development - (Eclipse Java Jar Library)-56","text":""},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-57","title":"Shared Library Development - (Eclipse Java Jar Library)-57","text":"<ul> <li>You can set libraries in this step from but our library should exported for our solution</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-58","title":"Shared Library Development - (Eclipse Java Jar Library)-58","text":"<ul> <li>Select Add External JARs...</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-59","title":"Shared Library Development - (Eclipse Java Jar Library)-59","text":"<ul> <li>Open Exported jar folder and select</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-60","title":"Shared Library Development - (Eclipse Java Jar Library)-60","text":"<ul> <li>Or we can select by Add jar from current workspace</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-61","title":"Shared Library Development - (Eclipse Java Jar Library)-61","text":"<p>but in this step I won't add anything I'll add references later</p> <p></p>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-62","title":"Shared Library Development - (Eclipse Java Jar Library)-62","text":"<ul> <li>we will have the following project</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-63","title":"Shared Library Development - (Eclipse Java Jar Library)-63","text":"<ul> <li>lets create a package</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-64","title":"Shared Library Development - (Eclipse Java Jar Library)-64","text":""},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-65","title":"Shared Library Development - (Eclipse Java Jar Library)-65","text":"<ul> <li>and lets create a main class for our application</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-66","title":"Shared Library Development - (Eclipse Java Jar Library)-66","text":"<ul> <li>check create main function</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-67","title":"Shared Library Development - (Eclipse Java Jar Library)-67","text":""},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-68","title":"Shared Library Development - (Eclipse Java Jar Library)-68","text":"<ul> <li>right click to project and add reference</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-69","title":"Shared Library Development - (Eclipse Java Jar Library)-69","text":"<ul> <li>you can enter same configurations from project properties</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-70","title":"Shared Library Development - (Eclipse Java Jar Library)-70","text":"<p>Lets export our library as a JAR file and then add to our classpath</p> <p></p>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-71","title":"Shared Library Development - (Eclipse Java Jar Library)-71","text":"<p>Select JAR file</p> <p></p>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-72","title":"Shared Library Development - (Eclipse Java Jar Library)-72","text":"<p>we configured output as</p> <pre><code>C:\\Users\\ugur.coruh\\Desktop\\java-export-sample\\JavaSampleLib.jar\n</code></pre> <p></p>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-73","title":"Shared Library Development - (Eclipse Java Jar Library)-73","text":""},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-74","title":"Shared Library Development - (Eclipse Java Jar Library)-74","text":""},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-75","title":"Shared Library Development - (Eclipse Java Jar Library)-75","text":"<p>In the same export folder now we have JavaSampleLib.jar</p> <p></p>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-76","title":"Shared Library Development - (Eclipse Java Jar Library)-76","text":"<p>return back to java-sample-app and then add this jar file to our project</p> <p>Build Path-&gt;Add External Archives</p> <p></p>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-77","title":"Shared Library Development - (Eclipse Java Jar Library)-77","text":"<p>you will see its added to reference libraries</p> <p></p>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-78","title":"Shared Library Development - (Eclipse Java Jar Library)-78","text":"<p>in our JavaSampleApp.java we can use the following source codes</p> <pre><code>package ce103;\nimport java.io.IOException;\npublic class JavaSampleApp {\npublic static void main(String[] args) {\n// TODO Auto-generated method stub\nSystem.out.println(\"Hello World!\");\nJavaSampleLib.sayHelloTo(\"Computer\");\nint result = JavaSampleLib.sum(5, 4);\nSystem.out.println(\"Results is\" + result);\nSystem.out.printf(\"Results is %d \\n\", result);\ntry {\nSystem.in.read();\n} catch (IOException e) {\n// TODO Auto-generated catch block\ne.printStackTrace();\n}\n}\n}\n</code></pre>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-79","title":"Shared Library Development - (Eclipse Java Jar Library)-79","text":"<p>When we run application we will see similar output</p> <p></p>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-80","title":"Shared Library Development - (Eclipse Java Jar Library)-80","text":"<p>Lets export this application with its dependent library</p> <p></p>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-81","title":"Shared Library Development - (Eclipse Java Jar Library)-81","text":"<p>Select runnable jar</p> <p></p>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-82","title":"Shared Library Development - (Eclipse Java Jar Library)-82","text":"<p>Set Launch configuration and Export destination</p> <pre><code>C:\\Users\\ugur.coruh\\Desktop\\java-export-sample\\JavaSampleAppSingle.jar\n</code></pre> <p></p>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-83","title":"Shared Library Development - (Eclipse Java Jar Library)-83","text":"<p>In this option we will have single jar file</p> <p>In the export folder we do not see reference libraries</p> <p></p> <p>and we can run with command line</p> <p></p>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-84","title":"Shared Library Development - (Eclipse Java Jar Library)-84","text":"<p>only change copy required libraries setting and then give a new name for new jar file and export</p> <pre><code>C:\\Users\\ugur.coruh\\Desktop\\java-export-sample\\JavaSampleAppMultiple.jar\n</code></pre> <p></p>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-85","title":"Shared Library Development - (Eclipse Java Jar Library)-85","text":"<p>now we have a folder that contains our libraries referenced</p> <p></p>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-86","title":"Shared Library Development - (Eclipse Java Jar Library)-86","text":"<p>in this file we can find our library</p> <p></p>"},{"location":"week-4-test/ce103-week-4-test/#shared-library-development-eclipse-java-jar-library-87","title":"Shared Library Development - (Eclipse Java Jar Library)-87","text":"<p>if we test our application we will see it will work</p> <p></p> <p>if we delete JavaSampleLib.jar and then try running application we will get error</p> <p></p>"},{"location":"week-4-test/ce103-week-4-test/#application-testing","title":"Application Testing","text":"<ul> <li>C</li> <li>C++</li> <li>C#</li> <li>Java</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#unit-test-development","title":"Unit Test Development","text":"<p>Wikipedia Unit Test Library List for Each Language</p> <p>https://en.wikipedia.org/wiki/List_of_unit_testing_frameworks</p>"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition_3","title":"Visual Studio Community Edition","text":""},{"location":"week-4-test/ce103-week-4-test/#c-unit-tests","title":"C Unit Tests","text":""},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-tests","title":"Visual Studio Community Edition - C Unit Tests","text":"<ul> <li>There is no direct C source testing but with additional frameworks. Visual Studio can test C sources. </li> <li>You can check the following entry<ul> <li>https://stackoverflow.com/questions/65820/unit-testing-c-code</li> </ul> </li> <li>Recommended framework is Check <ul> <li>https://libcheck.github.io/check/web/install.html</li> <li>https://github.com/libcheck/check/releases</li> </ul> </li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition_4","title":"Visual Studio Community Edition","text":""},{"location":"week-4-test/ce103-week-4-test/#c-unit-tests_1","title":"C++ Unit Tests","text":""},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-tests-1","title":"Visual Studio Community Edition - C++ Unit Tests-1","text":"<ul> <li>C/C++ i\u00e7in birim testleri yazma - Visual Studio (Windows) | Microsoft Docs</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-tests-2","title":"Visual Studio Community Edition - C++ Unit Tests-2","text":"<ul> <li>Use cpp-sample-lib project and add</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-tests-3","title":"Visual Studio Community Edition - C++ Unit Tests-3","text":"<ul> <li>Select Native Unit Test</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-tests-4","title":"Visual Studio Community Edition - C++ Unit Tests-4","text":"<ul> <li>Set project path and name</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-tests-5","title":"Visual Studio Community Edition - C++ Unit Tests-5","text":"<ul> <li>You will have <code>cpp-sample-test</code> project</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-tests-6","title":"Visual Studio Community Edition - C++ Unit Tests-6","text":"<ul> <li>Add library project from references</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-tests-7","title":"Visual Studio Community Edition - C++ Unit Tests-7","text":"<ul> <li>Add <code>cpp-sample-lib</code> to <code>cpp-sample-test</code> project</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-tests-8","title":"Visual Studio Community Edition - C++ Unit Tests-8","text":"<p>cpp-sample-test.cpp</p> <pre><code>#include \"pch.h\"\n#include \"CppUnitTest.h\"\n#include \"..\\cpp-sample-lib\\samplelib.h\"\nusing namespace Microsoft::VisualStudio::CppUnitTestFramework;\nnamespace cppsampletest\n{\nTEST_CLASS(cppsampletest)\n{\npublic:\nTEST_METHOD(TestSumCorrect)\n{\nAssert::AreEqual(9, sum(4, 5));\n}\nTEST_METHOD(TestSumInCorrect)\n{\nAssert::AreEqual(10, sum(4, 5));\n}\n};\n}\n</code></pre>"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-tests-9","title":"Visual Studio Community Edition - C++ Unit Tests-9","text":""},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition_5","title":"Visual Studio Community Edition","text":""},{"location":"week-4-test/ce103-week-4-test/#c-unit-tests_2","title":"C# Unit Tests","text":"<ul> <li>MSTest + .Net</li> <li>Fine Code Coverage</li> <li>NUnit + .NetCore</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-test-mstestv2net-1","title":"Visual Studio Community Edition (C# Unit Test + MSTestV2+.Net)-1","text":"<ul> <li>Install extension fine code coverage</li> </ul> <p>https://marketplace.visualstudio.com/items?itemName=FortuneNgwenya.FineCodeCoverage</p>"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-test-mstestv2net-2","title":"Visual Studio Community Edition (C# Unit Test + MSTestV2+.Net)-2","text":"<ul> <li>Create a .Net Framework Library</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-test-mstestv2net-3","title":"Visual Studio Community Edition (C# Unit Test + MSTestV2+.Net)-3","text":"<ul> <li>Set project framework and path</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-test-mstestv2net-4","title":"Visual Studio Community Edition (C# Unit Test + MSTestV2+.Net)-4","text":"<ul> <li>Create library functions</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-test-mstestv2net-5","title":"Visual Studio Community Edition (C# Unit Test + MSTestV2+.Net)-5","text":"<pre><code>using System;\nusing System.Collections.Generic;\nusing System.Text;\nnamespace cs_lib_sample\n{\npublic class SampleLibClass\n{\npublic static string sayHelloTo(string name)\n{\nstring result = String.Empty;\nif (!String.IsNullOrEmpty(name))\n{\nresult = \"Hello \" + name;\n}\nelse\n{\nresult = \"Hello There\";\n}\nConsole.WriteLine(result);\nreturn result;\n}\npublic static int sum(int a, int b)\n{\nint c = 0;\nc = a + b;\nreturn c;\n}\npublic int multiply(int a, int b)\n{\nreturn a * b;\n}\n}\n}\n</code></pre>"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-test-mstestv2net-6","title":"Visual Studio Community Edition (C# Unit Test + MSTestV2+.Net)-6","text":"<ul> <li>Right click and then create unit test project</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-test-mstestv2net-7","title":"Visual Studio Community Edition (C# Unit Test + MSTestV2+.Net)-7","text":"<ul> <li>Press OK</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-test-mstestv2net-8","title":"Visual Studio Community Edition (C# Unit Test + MSTestV2+.Net)-8","text":"<ul> <li>Enter test code</li> </ul> <pre><code>using Microsoft.VisualStudio.TestTools.UnitTesting;\nusing cs_lib_sample;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nnamespace cs_lib_sample.Tests\n{\n[TestClass()]\npublic class SampleLibClassTests\n{\n[TestMethod()]\npublic void testSayHelloTo()\n{\nAssert.AreEqual(\"Hello Computer\", SampleLibClass.sayHelloTo(\"Computer\"), \"Regular say hello should work\");\n}\n[TestMethod()]\npublic void testSayHelloToWrong()\n{\nAssert.AreEqual(\"Hello All\", SampleLibClass.sayHelloTo(\"Computer\"), \"Regular say hello won't work\");\n}\n[TestMethod()]\npublic void testSumCorrect()\n{\nAssert.AreEqual(9, SampleLibClass.sum(4, 5), \"Regular sum should work\");\n}\n[TestMethod()]\npublic void testSumWrong()\n{\nAssert.AreEqual(10, SampleLibClass.sum(4, 5), \"Regular sum shouldn't work\");\n}\n[TestMethod()]\npublic void testMultiply()\n{\nSampleLibClass sampleLib = new SampleLibClass();\nAssert.AreEqual(20, sampleLib.multiply(4, 5), \"Regular multiplication should work\");\n}\n}\n}\n</code></pre>"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-test-mstestv2net-9","title":"Visual Studio Community Edition (C# Unit Test + MSTestV2+.Net)-9","text":"<ul> <li>Run tests</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-test-mstestv2net-10","title":"Visual Studio Community Edition (C# Unit Test + MSTestV2+.Net)-10","text":"<p>you will code coverage and entered or passed branches</p> <p></p>"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition_6","title":"Visual Studio Community Edition","text":""},{"location":"week-4-test/ce103-week-4-test/#c-unit-test-nunit-netcore","title":"C# Unit Test + NUnit + .NETCore","text":""},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-testnunitnetcore-1","title":"Visual Studio Community Edition (C# Unit Test+NUnit+.NETCore)-1","text":"<ul> <li>Use <code>cshar-sample-lib</code> for this example</li> <li>Create and add a unit test project to solution</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-testnunitnetcore-2","title":"Visual Studio Community Edition (C# Unit Test+NUnit+.NETCore)-2","text":""},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-testnunitnetcore-3","title":"Visual Studio Community Edition (C# Unit Test+NUnit+.NETCore)-3","text":""},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-testnunitnetcore-4","title":"Visual Studio Community Edition (C# Unit Test+NUnit+.NETCore)-4","text":""},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-testnunitnetcore-5","title":"Visual Studio Community Edition (C# Unit Test+NUnit+.NETCore)-5","text":"<ul> <li>Add project reference</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-testnunitnetcore-6","title":"Visual Studio Community Edition (C# Unit Test+NUnit+.NETCore)-6","text":""},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-testnunitnetcore-7","title":"Visual Studio Community Edition (C# Unit Test+NUnit+.NETCore)-7","text":"<p>SampleLibraryTestClasss in NUnit Project</p> <pre><code>using csharp_sample_lib;\nusing NUnit.Framework;\nnamespace csharp_sample_lib_test\n{\npublic class SampleLibraryTestClass\n{\nsampleLibClass sampleLib;\n[SetUp]\npublic void Setup()\n{\nsampleLib = new sampleLibClass();\n}\n[Test]\npublic void testSayHelloTo()\n{\nAssert.AreEqual(\"Hello Computer\", sampleLibClass.sayHelloTo(\"Computer\"), \"Regular say hello should work\");\n}\n[Test]\npublic void testSayHelloToWrong()\n{\nAssert.AreEqual(\"Hello All\", sampleLibClass.sayHelloTo(\"Computer\"), \"Regular say hello won't work\");\n}\n[Test]\npublic void testSumCorrect()\n{\nAssert.AreEqual(9, sampleLibClass.sum(4, 5), \"Regular sum should work\");\n}\n[Test]\npublic void testSumWrong()\n{\nAssert.AreEqual(10, sampleLibClass.sum(4, 5), \"Regular sum shouldn't work\");\n}\n[Test]\npublic void testMultiply()\n{\nAssert.AreEqual(20, sampleLib.multiply(4, 5), \"Regular multiplication should work\");\n}\n}\n}\n</code></pre>"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-testnunitnetcore-8","title":"Visual Studio Community Edition (C# Unit Test+NUnit+.NETCore)-8","text":"<ul> <li>Sample class library</li> </ul> <pre><code>using System;\nnamespace csharp_sample_lib\n{\npublic class sampleLibClass\n{\npublic static string sayHelloTo(string name)\n{\nstring result = String.Empty;\nif (!String.IsNullOrEmpty(name))\n{\nresult = \"Hello \" + name;\n}\nelse\n{\nresult = \"Hello There\";\n}\nConsole.WriteLine(result);\nreturn result;\n}\npublic static int sum(int a, int b)\n{\nint c = 0;\nc = a + b;\nreturn c;\n}\npublic int multiply(int a, int b)\n{\nreturn a * b;\n}\n}\n}\n</code></pre>"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-testnunitnetcore-9","title":"Visual Studio Community Edition (C# Unit Test+NUnit+.NETCore)-9","text":"<ul> <li>Open test explorer and run tests</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-testnunitnetcore-10","title":"Visual Studio Community Edition (C# Unit Test+NUnit+.NETCore)-10","text":"<ul> <li>or you can run from project</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-testnunitnetcore-11","title":"Visual Studio Community Edition (C# Unit Test+NUnit+.NETCore)-11","text":"<ul> <li>Also we can create unit test from library class,</li> <li>Right click the sampleLibClass and select create unit tests but this option do not provide nunit tests.</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-testnunitnetcore-12","title":"Visual Studio Community Edition (C# Unit Test+NUnit+.NETCore)-12","text":""},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-testnunitnetcore-13","title":"Visual Studio Community Edition (C# Unit Test+NUnit+.NETCore)-13","text":""},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-testnunitnetcore-14","title":"Visual Studio Community Edition (C# Unit Test+NUnit+.NETCore)-14","text":""},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-testnunitnetcore-15","title":"Visual Studio Community Edition (C# Unit Test+NUnit+.NETCore)-15","text":"<pre><code>using Microsoft.VisualStudio.TestTools.UnitTesting;\nusing csharp_sample_lib;\nusing System;\nusing System.Collections.Generic;\nusing System.Text;\nnamespace csharp_sample_lib.Tests\n{\n[TestClass()]\npublic class sampleLibClassTests\n{\n[TestMethod()]\npublic void sayHelloToTest()\n{\nAssert.Fail();\n}\n[TestMethod()]\npublic void sumTest()\n{\nAssert.Fail();\n}\n[TestMethod()]\npublic void multiplyTest()\n{\nAssert.Fail();\n}\n}\n}\n</code></pre>"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-testnunitnetcore-16","title":"Visual Studio Community Edition (C# Unit Test+NUnit+.NETCore)-16","text":"<ul> <li>We will not commit this changes and continue from nunit test project, the fine code</li> <li>Coverage also work for nunit test but not provide inline highlighting</li> <li>If we run tests we will have the following outputs</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-testnunitnetcore-17","title":"Visual Studio Community Edition (C# Unit Test+NUnit+.NETCore)-17","text":"<ul> <li>Inline code highlight is part of enterprise visual studio edition<ul> <li>Analyzing code coverage in Visual Studio - DEV Community</li> </ul> </li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-testopencover-nunit-runner-report","title":"Visual Studio Community Edition (C# Unit Test+OpenCover + Nunit Runner + Report)","text":""},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-testopencover-nunit-runner-report-1","title":"Visual Studio Community Edition (C# Unit Test+OpenCover + Nunit Runner + Report)-1","text":""},{"location":"week-4-test/ce103-week-4-test/#tldr","title":"TL;DR","text":"<ul> <li> <p>Additional information you can use OpenCover + Nunit Runner + Report Generator together to setup a code coverage report but it has complex batch running process. After a few try I decided to use fine code coverage but here is the usage not tested well.</p> </li> <li> <p>First unit test runner tool doesn't support .Net Core</p> </li> </ul> <p>c# - The NUnit 3 driver encountered an error while executing reflected code (NUnit.Engine.NUnitEngineException) - Stack Overflow</p> <ul> <li> <p>Follow the instructions on the link</p> <ul> <li>CMD OpenCover \u00b7 sukhoi1/Useful-Notes Wiki \u00b7 GitHub</li> </ul> </li> <li> <p>Install OpenCover, ReportGenerator, Nunit,Runners packages then use the package installation folder to get tools that you need</p> </li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-testopencover-nunit-runner-report-2","title":"Visual Studio Community Edition (C# Unit Test+OpenCover + Nunit Runner + Report)-2","text":"<ul> <li>Here is a sample for open cover, select package and copy path</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-testopencover-nunit-runner-report-3","title":"Visual Studio Community Edition (C# Unit Test+OpenCover + Nunit Runner + Report)-3","text":"<ul> <li>Goto path and tools</li> </ul> <pre><code>C:\\Users\\ugur.coruh\\.nuget\\packages\\opencover\\4.7.1221\n</code></pre> <ul> <li>You need to setup some batch similar with following</li> </ul> <p>run-test-coverage.bat</p> <pre><code>set pathA=C:\\Users\\ugur.coruh\\.nuget\\packages\\opencover\\4.7.1221\\tools\nset pathB=C:\\Users\\ugur.coruh\\.nuget\\packages\\nunit.consolerunner\\3.12.0\\tools\nset pathC=C:\\Users\\ugur.coruh\\.nuget\\packages\\reportgenerator\\4.8.13\\tools\\netcoreapp3.0\nset dllpath=C:\\Users\\ugur.coruh\\Desktop\\csharp-sample-lib\\csharp-sample-lib-test\\bin\\Debug\\netcoreapp3.1\n\n\"%pathA%\\OpenCover.Console.exe\" ^\n-targetargs:\"%dllpath%\\csharp-sample-lib-test.dll\" ^\n-filter:\"+[csharp-sample-lib*]* -[*test]*\" ^\n-target:\"%pathB%\\nunit3-console.exe\" ^\n-output:\"%dllpath%\\coverReport.xml\" ^\n-skipautoprops -register:user &amp;&amp; \"%pathC%\\ReportGenerator.exe\" -reports:\"%dllpath%\\coverReport.xml\" -targetdir:\"\"%dllpath%\\coverage\"\npause\n</code></pre>"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-testopencover-nunit-runner-report-4","title":"Visual Studio Community Edition (C# Unit Test+OpenCover + Nunit Runner + Report)-4","text":"<ul> <li>but <code>nunit3-console.exe</code> gives error</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-testopencover-nunit-runner-report-5","title":"Visual Studio Community Edition (C# Unit Test+OpenCover + Nunit Runner + Report)-5","text":"<ul> <li> <p>For this compatibility issues I prefer to use fine code coverage extension.</p> </li> <li> <p>OpenCover related studies</p> <ul> <li>Code coverage of manual or automated tests with OpenCover for .NET applications \u2013 Automation Rhapsody</li> <li>Code coverage of .NET Core unit tests with OpenCover \u2013 Automation Rhapsody</li> </ul> </li> <li> <p>Sample OpenCover report</p> <ul> <li>Summary - Coverage Report</li> </ul> </li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-testopencover-nunit-runner-report-6","title":"Visual Studio Community Edition (C# Unit Test+OpenCover + Nunit Runner + Report)-6","text":""},{"location":"week-4-test/ce103-week-4-test/#download-and-setup-opencover-nunit-console-report-generator-without-package-manager","title":"Download and Setup OpenCover, NUnit Console, Report Generator without Package Manager","text":"<ul> <li>You can also download the tools from github project pages and install on your operating system,</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-testopencover-nunit-runner-report-7","title":"Visual Studio Community Edition (C# Unit Test+OpenCover + Nunit Runner + Report)-7","text":""},{"location":"week-4-test/ce103-week-4-test/#opencover","title":"OpenCover","text":"<ul> <li>Releases \u00b7 OpenCover/opencover \u00b7 GitHub</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-testopencover-nunit-runner-report-8","title":"Visual Studio Community Edition (C# Unit Test+OpenCover + Nunit Runner + Report)-8","text":""},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-testopencover-nunit-runner-report-9","title":"Visual Studio Community Edition (C# Unit Test+OpenCover + Nunit Runner + Report)-9","text":"<p>Select advanced and then install for all users</p> <p></p>"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-testopencover-nunit-runner-report-10","title":"Visual Studio Community Edition (C# Unit Test+OpenCover + Nunit Runner + Report)-10","text":""},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-testopencover-nunit-runner-report-11","title":"Visual Studio Community Edition (C# Unit Test+OpenCover + Nunit Runner + Report)-11","text":""},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-testopencover-nunit-runner-report-12","title":"Visual Studio Community Edition (C# Unit Test+OpenCover + Nunit Runner + Report)-12","text":""},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-testopencover-nunit-runner-report-13","title":"Visual Studio Community Edition (C# Unit Test+OpenCover + Nunit Runner + Report)-13","text":""},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-testopencover-nunit-runner-report-14","title":"Visual Studio Community Edition (C# Unit Test+OpenCover + Nunit Runner + Report)-14","text":""},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-testopencover-nunit-runner-report-15","title":"Visual Studio Community Edition (C# Unit Test+OpenCover + Nunit Runner + Report)-15","text":""},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-testopencover-nunit-runner-report-16","title":"Visual Studio Community Edition (C# Unit Test+OpenCover + Nunit Runner + Report)-16","text":""},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-testopencover-nunit-runner-report-17","title":"Visual Studio Community Edition (C# Unit Test+OpenCover + Nunit Runner + Report)-17","text":""},{"location":"week-4-test/ce103-week-4-test/#reportgenerator","title":"ReportGenerator","text":"<ul> <li>Release ReportGenerator_4.8.13 \u00b7 danielpalme/ReportGenerator \u00b7 GitHub</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-testopencover-nunit-runner-report-18","title":"Visual Studio Community Edition (C# Unit Test+OpenCover + Nunit Runner + Report)-18","text":""},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-testopencover-nunit-runner-report-19","title":"Visual Studio Community Edition (C# Unit Test+OpenCover + Nunit Runner + Report)-19","text":""},{"location":"week-4-test/ce103-week-4-test/#nunit-console","title":"NUnit Console","text":"<ul> <li>Downloads</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-testopencover-nunit-runner-report-20","title":"Visual Studio Community Edition (C# Unit Test+OpenCover + Nunit Runner + Report)-20","text":""},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-testopencover-nunit-runner-report-21","title":"Visual Studio Community Edition (C# Unit Test+OpenCover + Nunit Runner + Report)-21","text":""},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-testopencover-nunit-runner-report-22","title":"Visual Studio Community Edition (C# Unit Test+OpenCover + Nunit Runner + Report)-22","text":"<ul> <li>Download setup </li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-testopencover-nunit-runner-report-23","title":"Visual Studio Community Edition (C# Unit Test+OpenCover + Nunit Runner + Report)-23","text":"<ul> <li>Install setup </li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#visual-studio-community-edition-c-unit-testopencover-nunit-runner-report-24","title":"Visual Studio Community Edition (C# Unit Test+OpenCover + Nunit Runner + Report)-24","text":""},{"location":"week-4-test/ce103-week-4-test/#nunit-mstest-batch-report-generation-not-tested","title":"NUnit + MSTest Batch Report Generation (Not Tested)","text":"<ul> <li> <p>OpenCover and ReportGenerator Unit Test Coverage in Visual Studio 2013 and 2015 \u2013 CodeHelper.Net</p> </li> <li> <p>OpenCover and ReportGenerator Unit Test Coverage in Visual Studio 2013 and 2015 - CodeProject</p> </li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#java-unit-tests","title":"Java Unit Tests","text":""},{"location":"week-4-test/ce103-week-4-test/#eclipse-ide-junit4-junit5","title":"Eclipse IDE (JUnit4 , JUnit5)","text":""},{"location":"week-4-test/ce103-week-4-test/#eclipse-ide-junit4-junit5-java-unit-test","title":"Eclipse IDE (JUnit4 , JUnit5) + Java Unit Test","text":"<p>In this sample we will create two example for similar library</p> <p>Please check the following links</p> <p>JUnit 5 tutorial - Learn how to write unit tests</p> <p>JUnit 5</p> <p>JUnit 5 User Guide</p> <p>https://www.eclemma.org/</p> <p>JUnit Hello World Example - Examples Java Code Geeks - 2021</p> <p>https://yasinmemic.medium.com/java-ile-unit-test-yazmak-birim-test-ca15cf0d024b</p>"},{"location":"week-4-test/ce103-week-4-test/#eclipse-ide-junit4-junit5-java-unit-test_1","title":"Eclipse IDE (JUnit4 , JUnit5) + Java Unit Test","text":"<p>In normal java application we can right click the project java-sample-lib and add Junit case</p> <p></p>"},{"location":"week-4-test/ce103-week-4-test/#eclipse-ide-junit4-junit5-java-unit-test_2","title":"Eclipse IDE (JUnit4 , JUnit5) + Java Unit Test","text":""},{"location":"week-4-test/ce103-week-4-test/#eclipse-ide-junit4-junit5-java-unit-test_3","title":"Eclipse IDE (JUnit4 , JUnit5) + Java Unit Test","text":""},{"location":"week-4-test/ce103-week-4-test/#eclipse-ide-junit4-junit5-java-unit-test_4","title":"Eclipse IDE (JUnit4 , JUnit5) + Java Unit Test","text":""},{"location":"week-4-test/ce103-week-4-test/#eclipse-ide-junit4-junit5-java-unit-test_5","title":"Eclipse IDE (JUnit4 , JUnit5) + Java Unit Test","text":""},{"location":"week-4-test/ce103-week-4-test/#eclipse-ide-junit4-junit5-java-unit-test_6","title":"Eclipse IDE (JUnit4, JUnit5) + Java Unit Test","text":"<p>and you will have the following test class</p> <p></p>"},{"location":"week-4-test/ce103-week-4-test/#eclipse-ide-junit4-junit5-java-unit-test_7","title":"Eclipse IDE (JUnit4, JUnit5) + Java Unit Test","text":"<p>Now we will create tests that check our function flowchart and return values</p> <p>We need to cover all code branches that we coded</p> <p>I have updated <code>JavaSampleLib.java</code> as follows to check outputs</p> <p>JavaSampleLib.java</p> <pre><code>package ce103;\npublic class JavaSampleLib {\npublic static String sayHelloTo(String name) {\nString output = \"\";\nif(!name.isBlank() &amp;&amp; !name.isEmpty()){\noutput = \"Hello \"+name;\n}else {\noutput = \"Hello There\";\n}\nSystem.out.println(output);\nreturn output;\n}\npublic static int sum(int a,int b)\n{\nint c = 0;\nc = a+b;\nreturn c;\n}\npublic int multiply(int a, int b) {\nreturn a * b;\n}\n//    public static void main(String[] args) {\n//        // TODO Auto-generated method stub\n//        System.out.println(\"Hello World!\");\n//\n//        JavaSampleLib.sayHelloTo(\"Computer\");\n//        int result = JavaSampleLib.sum(5, 4);\n//        System.out.println(\"Results is\" + result);\n//        System.out.printf(\"Results is %d \\n\", result);\n//\n//\n//        try {\n//            System.in.read();\n//        } catch (IOException e) {\n//            // TODO Auto-generated catch block\n//            e.printStackTrace();\n//        }\n//\n//    }\n}\n</code></pre>"},{"location":"week-4-test/ce103-week-4-test/#eclipse-ide-junit4-junit5-java-unit-test_8","title":"Eclipse IDE (JUnit4 , JUnit5) + Java Unit Test","text":"<p>and JavaSampleLibTest.java</p> <pre><code>package ce103;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.AfterAll;\nimport org.junit.jupiter.api.AfterEach;\nimport org.junit.jupiter.api.BeforeAll;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.RepeatedTest;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.MethodSource;\nclass JavaSampleLibTest {\nJavaSampleLib sampleLib;\n@BeforeAll\nstatic void setUpBeforeClass() throws Exception {\n}\n@AfterAll\nstatic void tearDownAfterClass() throws Exception {\n}\n@BeforeEach\nvoid setUp() throws Exception {\nsampleLib = new JavaSampleLib();\n}\n@AfterEach\nvoid tearDown() throws Exception {\n}\n@Test\n@DisplayName(\"Simple Say Hello should work\")\nvoid testSayHelloTo() {\nassertEquals(\"Hello Computer\", JavaSampleLib.sayHelloTo(\"Computer\"), \"Regular say hello should work\");\n}\n@Test\n@DisplayName(\"Simple Say Hello shouldn' work\")\nvoid testSayHelloToWrong() {\nassertEquals(\"Hello All\", JavaSampleLib.sayHelloTo(\"Computer\"), \"Regular say hello won't work\");\n}\n@Test\n@DisplayName(\"Simple sum should work\")\nvoid testSumCorrect() {\nassertEquals(9, JavaSampleLib.sum(4, 5), \"Regular sum should work\");\n}\n@Test\n@DisplayName(\"Simple sum shouldn't work\")\nvoid testSumWrong() {\nassertEquals(10, JavaSampleLib.sum(4, 5), \"Regular sum shouldn't work\");\n}\n@Test\n@DisplayName(\"Simple multiplication should work\")\nvoid testMultiply() {\nassertEquals(20, sampleLib.multiply(4, 5), \"Regular multiplication should work\");\n}\n@RepeatedTest(5)\n@DisplayName(\"Ensure correct handling of zero\")\nvoid testMultiplyWithZero() {\nassertEquals(0, sampleLib.multiply(0, 5), \"Multiple with zero should be zero\");\nassertEquals(0, sampleLib.multiply(5, 0), \"Multiple with zero should be zero\");\n}\npublic static int[][] data() {\nreturn new int[][] { { 1, 2, 2 }, { 5, 3, 15 }, { 121, 4, 484 },{ 2, 2, 2 } };\n}\n@ParameterizedTest\n@MethodSource(value = \"data\")\nvoid testWithStringParameter(int[] data) {\nJavaSampleLib tester = new JavaSampleLib();\nint m1 = data[0];\nint m2 = data[1];\nint expected = data[2];\nassertEquals(expected, tester.multiply(m1, m2));\n}\n}\n</code></pre>"},{"location":"week-4-test/ce103-week-4-test/#eclipse-ide-junit4-junit5-java-unit-test_9","title":"Eclipse IDE (JUnit4 , JUnit5) + Java Unit Test","text":"<p>if we run tests</p> <p></p>"},{"location":"week-4-test/ce103-week-4-test/#eclipse-ide-junit4-junit5-java-unit-test_10","title":"Eclipse IDE (JUnit4 , JUnit5) + Java Unit Test","text":"<p>we will see all results there</p> <p></p>"},{"location":"week-4-test/ce103-week-4-test/#eclipse-ide-junit4-junit5-java-unit-test_11","title":"Eclipse IDE (JUnit4 , JUnit5) + Java Unit Test","text":"<p>also we can see the code coverage of tests</p> <p></p>"},{"location":"week-4-test/ce103-week-4-test/#eclipse-ide-junit4-junit5-java-unit-test_12","title":"Eclipse IDE (JUnit4 , JUnit5) + Java Unit Test","text":"<p>when we open our source code (just close and open again another case highlighting will not work) you will see tested part of your codes</p> <p></p>"},{"location":"week-4-test/ce103-week-4-test/#eclipse-ide-junit4-junit5-java-unit-test_13","title":"Eclipse IDE (JUnit4 , JUnit5) + Java Unit Test","text":""},{"location":"week-4-test/ce103-week-4-test/#maven-java-application-junit","title":"Maven Java Application + JUnit","text":"<p>Lets create Maven project with tests</p> <p>Create a maven project</p> <p>File -&gt; New -&gt; Maven Project</p> <p></p>"},{"location":"week-4-test/ce103-week-4-test/#eclipse-ide-junit4-junit5-java-unit-test_14","title":"Eclipse IDE (JUnit4 , JUnit5) + Java Unit Test","text":""},{"location":"week-4-test/ce103-week-4-test/#eclipse-ide-junit4-junit5-java-unit-test_15","title":"Eclipse IDE (JUnit4 , JUnit5) + Java Unit Test","text":"<p>Lets convert our sample java-sample-lib directories to standard folder structure for test and app division</p> <p>Maven \u2013 Introduction to the Standard Directory Layout</p> <p>Also for intro you can use this</p> <p>JUnit Hello World Example - Examples Java Code Geeks - 2021</p> <p>Eclipse Maven Java JUnit 4.12 (pulled by Maven automatically)</p>"},{"location":"week-4-test/ce103-week-4-test/#eclipse-ide-junit4-junit5-java-unit-test_16","title":"Eclipse IDE (JUnit4 , JUnit5) + Java Unit Test","text":"<p>Lets give new sample java-sample-lib-mvnbut in this time we will create a maven project</p> <p></p>"},{"location":"week-4-test/ce103-week-4-test/#eclipse-ide-junit4-junit5-java-unit-test_17","title":"Eclipse IDE (JUnit4 , JUnit5) + Java Unit Test","text":""},{"location":"week-4-test/ce103-week-4-test/#eclipse-ide-junit4-junit5-java-unit-test_18","title":"Eclipse IDE (JUnit4 , JUnit5) + Java Unit Test","text":"<p>pom.xml file</p> <pre><code>&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n&lt;groupId&gt;com.ce103&lt;/groupId&gt;\n&lt;artifactId&gt;java-sample-lib-ext&lt;/artifactId&gt;\n&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;\n&lt;name&gt;Java Sample Lib&lt;/name&gt;\n&lt;description&gt;Java Sample with Unit Test&lt;/description&gt;\n&lt;/project&gt;\n</code></pre>"},{"location":"week-4-test/ce103-week-4-test/#eclipse-ide-junit4-junit5-java-unit-test_19","title":"Eclipse IDE (JUnit4 , JUnit5) + Java Unit Test","text":"<p>we will add JUnit 5 for our project</p> <pre><code>&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\nxsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n&lt;groupId&gt;com.ce103&lt;/groupId&gt;\n&lt;artifactId&gt;java-sample-lib-ext&lt;/artifactId&gt;\n&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;\n&lt;name&gt;Java Sample Lib&lt;/name&gt;\n&lt;description&gt;Java Sample with Unit Test&lt;/description&gt;\n&lt;dependencies&gt;\n&lt;dependency&gt;\n&lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;\n&lt;artifactId&gt;junit-jupiter-params&lt;/artifactId&gt;\n&lt;version&gt;5.7.1&lt;/version&gt;\n&lt;scope&gt;test&lt;/scope&gt;\n&lt;/dependency&gt;\n&lt;/dependencies&gt;\n&lt;/project&gt;\n</code></pre>"},{"location":"week-4-test/ce103-week-4-test/#eclipse-ide-junit4-junit5-java-unit-test_20","title":"Eclipse IDE (JUnit4 , JUnit5) + Java Unit Test","text":"<p>it will automatically download libraries</p> <p></p>"},{"location":"week-4-test/ce103-week-4-test/#eclipse-ide-junit4-junit5-java-unit-test_21","title":"Eclipse IDE (JUnit4 , JUnit5) + Java Unit Test","text":""},{"location":"week-4-test/ce103-week-4-test/#eclipse-ide-junit4-junit5-java-unit-test_22","title":"Eclipse IDE (JUnit4 , JUnit5) + Java Unit Test","text":"<p>Create java sample library in ce103 package, first create java package</p> <p></p>"},{"location":"week-4-test/ce103-week-4-test/#eclipse-ide-junit4-junit5-java-unit-test_23","title":"Eclipse IDE (JUnit4 , JUnit5) + Java Unit Test","text":"<p>In this package create library class</p> <p></p>"},{"location":"week-4-test/ce103-week-4-test/#eclipse-ide-junit4-junit5-java-unit-test_24","title":"Eclipse IDE (JUnit4 , JUnit5) + Java Unit Test","text":""},{"location":"week-4-test/ce103-week-4-test/#eclipse-ide-junit4-junit5-java-unit-test_25","title":"Eclipse IDE (JUnit4 , JUnit5) + Java Unit Test","text":"<p>copy content from other library</p> <pre><code>package ce103;\npublic class JavaSampleLib {\npublic static String sayHelloTo(String name) {\nString output = \"\";\nif(!name.isBlank() &amp;&amp; !name.isEmpty()){\noutput = \"Hello \"+name;\n}else {\noutput = \"Hello There\";\n}\nSystem.out.println(output);\nreturn output;\n}\npublic static int sum(int a,int b)\n{\nint c = 0;\nc = a+b;\nreturn c;\n}\npublic int multiply(int a, int b) {\nreturn a * b;\n}\n}\n</code></pre>"},{"location":"week-4-test/ce103-week-4-test/#eclipse-ide-junit4-junit5-java-unit-test_26","title":"Eclipse IDE (JUnit4 , JUnit5) + Java Unit Test","text":"<p>Now lets create tests inf src/test/java</p> <p></p>"},{"location":"week-4-test/ce103-week-4-test/#eclipse-ide-junit4-junit5-java-unit-test_27","title":"Eclipse IDE (JUnit4 , JUnit5) + Java Unit Test","text":""},{"location":"week-4-test/ce103-week-4-test/#eclipse-ide-junit4-junit5-java-unit-test_28","title":"Eclipse IDE (JUnit4 , JUnit5) + Java Unit Test","text":"<p>create a JUnit Case</p> <p></p>"},{"location":"week-4-test/ce103-week-4-test/#eclipse-ide-junit4-junit5-java-unit-test_29","title":"Eclipse IDE (JUnit4, JUnit5) + Java Unit Test","text":""},{"location":"week-4-test/ce103-week-4-test/#eclipse-ide-junit4-junit5-java-unit-test_30","title":"Eclipse IDE (JUnit4, JUnit5) + Java Unit Test","text":""},{"location":"week-4-test/ce103-week-4-test/#eclipse-ide-junit4-junit5-java-unit-test_31","title":"Eclipse IDE (JUnit4, JUnit5) + Java Unit Test","text":""},{"location":"week-4-test/ce103-week-4-test/#eclipse-ide-junit4-junit5-java-unit-test_32","title":"Eclipse IDE (JUnit4, JUnit5) + Java Unit Test","text":"<p>you will simple template</p> <pre><code>package ce103;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.AfterAll;\nimport org.junit.jupiter.api.AfterEach;\nimport org.junit.jupiter.api.BeforeAll;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nclass JavaSampleLibTest {\n@BeforeAll\nstatic void setUpBeforeClass() throws Exception {\n}\n@AfterAll\nstatic void tearDownAfterClass() throws Exception {\n}\n@BeforeEach\nvoid setUp() throws Exception {\n}\n@AfterEach\nvoid tearDown() throws Exception {\n}\n@Test\nvoid testSayHelloTo() {\nfail(\"Not yet implemented\");\n}\n@Test\nvoid testSum() {\nfail(\"Not yet implemented\");\n}\n@Test\nvoid testMultiply() {\nfail(\"Not yet implemented\");\n}\n}\n</code></pre>"},{"location":"week-4-test/ce103-week-4-test/#eclipse-ide-junit4-junit5-java-unit-test_33","title":"Eclipse IDE (JUnit4, JUnit5) + Java Unit Test","text":"<p>now lets copy tests from other projects</p> <pre><code>Convert source codes to java codes...\n</code></pre>"},{"location":"week-4-test/ce103-week-4-test/#eclipse-ide-junit4-junit5-java-unit-test_34","title":"Eclipse IDE (JUnit4, JUnit5) + Java Unit Test","text":""},{"location":"week-4-test/ce103-week-4-test/#eclipse-ide-junit4-junit5-java-unit-test_35","title":"Eclipse IDE (JUnit4, JUnit5) + Java Unit Test","text":""},{"location":"week-4-test/ce103-week-4-test/#eclipse-ide-junit4-junit5-java-unit-test_36","title":"Eclipse IDE (JUnit4, JUnit5) + Java Unit Test","text":""},{"location":"week-4-test/ce103-week-4-test/#eclipse-ide-junit4-junit5-java-unit-test_37","title":"Eclipse IDE (JUnit4, JUnit5) + Java Unit Test","text":"<p>That's a part of java unit testing...</p>"},{"location":"week-4-test/ce103-week-4-test/#tdd-test-driven-development","title":"TDD (Test Driven Development)","text":"<ul> <li>Test Driven Development (TDD) <ul> <li>https://en.wikipedia.org/wiki/Test-driven_development</li> </ul> </li> <li> <p>Acceptance Test Driven Development (ATDD) </p> <ul> <li>https://en.wikipedia.org/wiki/Acceptance_test-driven_development</li> </ul> </li> <li> <p>Also check out </p> <ul> <li>https://en.wikipedia.org/wiki/Kent_Beck</li> </ul> </li> <li> <p>Extreme Programming </p> <ul> <li>https://en.wikipedia.org/wiki/Extreme_programming</li> </ul> </li> <li> <p>Software Design Patterns</p> <ul> <li>https://en.wikipedia.org/wiki/Software_design_pattern</li> </ul> </li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#test-and-deployment-automation-management","title":"Test and Deployment Automation Management","text":"<p>There are several Continues-Integration services online as follow; - Travis-CI - Appveyor - Jenkins - CircleCI - GitLab - Pantheon - GitHub - Bitrise - Flosum - Buddy - Semaphore </p>"},{"location":"week-4-test/ce103-week-4-test/#test-and-deployment-automation-management_1","title":"Test and Deployment Automation Management","text":"<ul> <li>Github provides Github Actions for Releases and Tests</li> <li>Jenkins has on promise solutions private development</li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#test-and-deployment-automation-management_2","title":"Test and Deployment Automation Management","text":"<ul> <li>GitHub Actions provide several actions and marketspace <ul> <li>https://github.com/marketplace/actions/build-c-project</li> </ul> </li> <li>Also, we Can Provide Our Custom Actions <pre><code>name: hello-world\non: push\njobs:\nmy-job:\nruns-on: ubuntu-latest\nsteps:\n- name: my-step\nrun: echo \"Hello World!\"\n</code></pre></li> </ul>"},{"location":"week-4-test/ce103-week-4-test/#test-and-deployment-automation-management_3","title":"Test and Deployment Automation Management","text":""},{"location":"week-4-test/ce103-week-4-test/#test-and-deployment-automation-management_4","title":"Test and Deployment Automation Management","text":"<ul> <li>https://github.com/ucoruh/project-cleaner/blob/main/.github/workflows/dotnet-desktop.yml</li> </ul> <p>This action build c# application and generates setup manually. </p> <ul> <li>Also there is a nice web example<ul> <li>https://dev.to/geromegrignon/github-actions-full-ci-cd-javascript-workflow-39om</li> </ul> </li> </ul> <p></p>"},{"location":"week-4-test/ce103-week-4-test/#references","title":"References","text":"<p>GitHub - MicrosoftDocs/cpp-docs: C++ Documentation</p> \\[ End-Of-Week-4 \\]"},{"location":"week-5-c/ce103-week-5-c/","title":"CE103 Algorithms and Programming I","text":""},{"location":"week-5-c/ce103-week-5-c/#ce103-algorithms-and-programming-i","title":"CE103 Algorithms and Programming I","text":""},{"location":"week-5-c/ce103-week-5-c/#week-5","title":"Week-5","text":""},{"location":"week-5-c/ce103-week-5-c/#c-functional-console-programming","title":"C Functional Console Programming","text":"<p>Download DOC, SLIDE, PPTX</p>"},{"location":"week-5-c/ce103-week-5-c/#c-functional-console-programming_1","title":"C Functional Console Programming","text":""},{"location":"week-5-c/ce103-week-5-c/#books-and-resources","title":"Books and Resources","text":"<ul> <li> <p>free-programming-books/free-programming-books-langs.md at master \u00b7 EbookFoundation/free-programming-books \u00b7 GitHub</p> </li> <li> <p>goalkicker-C Programming Notes for Professionals book</p> </li> </ul>"},{"location":"week-5-c/ce103-week-5-c/#c-functional-console-programming_2","title":"C Functional Console Programming","text":"<ul> <li>We will use the following course notes and examples.</li> </ul> <ul> <li>Learn C Programming</li> </ul> <ul> <li>C Tutorials - Introduction to C Programming Language</li> </ul> <ul> <li>The C and C++ programming tutorials, hands-on approach with program examples, code samples and tons of output images using Visual C++, C++ Builder, Linux gcc and g++ compilers and IDE</li> </ul> <ul> <li>CS50x 2021</li> </ul> <p>C Programming For Dummies</p> <p></p> <p>C reference - cppreference.com</p> <p></p> <p>https://c.happycodings.com/</p> <p></p>"},{"location":"week-5-c/ce103-week-5-c/#c-programming","title":"C Programming","text":"<p>C is a versatile programming language. It is useful for creating software such as operating systems, databases, and compilers. For novices, C programming is a great language to learn to code in.</p> <p>Our C tutorials will take you step by step through the process of learning C programming.</p> <p>Before starting you should check your development enviroment. </p> <p>You will open visual studio community edition and create a C++ console application then rename *.cpp file to *.c  for triggering c complier.</p> <p></p> <p></p> <p>Before starting you should understand the executable generation flows </p> <pre><code>#include &lt;stdio.h&gt;\nint main(void)\n{\nprintf(\"hello, world\");\n}\n</code></pre> <p>and how we convert source code to binary code</p> <pre><code>01111111 01000101 01001100 01000110 00000010 00000001 00000001 00000000\n00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000\n00000010 00000000 00111110 00000000 00000001 00000000 00000000 00000000\n10110000 00000101 01000000 00000000 00000000 00000000 00000000 00000000\n01000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000\n11010000 00010011 00000000 00000000 00000000 00000000 00000000 00000000\n00000000 00000000 00000000 00000000 01000000 00000000 00111000 00000000\n00001001 00000000 01000000 00000000 00100100 00000000 00100001 00000000\n00000110 00000000 00000000 00000000 00000101 00000000 00000000 00000000\n01000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000\n01000000 00000000 01000000 00000000 00000000 00000000 00000000 00000000\n01000000 00000000 01000000 00000000 00000000 00000000 00000000 00000000\n11111000 00000001 00000000 00000000 00000000 00000000 00000000 00000000\n11111000 00000001 00000000 00000000 00000000 00000000 00000000 00000000\n00001000 00000000 00000000 00000000 00000000 00000000 00000000 00000000\n00000011 00000000 00000000 00000000 00000100 00000000 00000000 00000000\n00111000 00000010 00000000 00000000 00000000 00000000 00000000 00000000\n...\n</code></pre> <p>There is a sandbox in CS50 harvard course Week 0 - CS50x</p> <p>https://sandbox.cs50.io/ you can use it for online compiler</p> <p></p> <p></p> <pre><code>$ make hello\nclang -fsanitize=signed-integer-overflow -fsanitize=undefined -ggdb3 -O0 -std=c11 -Wall -Werror -Wextra -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wshadow    hello.c  -lcrypt -lcs50 -lm -o hello\n$ ./hello\nhello, world\n</code></pre> <p>if you want to make samething in windows environment you should create the following makefile near the hello.c</p> <p></p> <p>Makefile</p> <pre><code># This is the default target, which will be built when \n# you invoke make\n.PHONY: all\nall: hello\n# This rule tells make how to build hello from hello.cpp\nhello: hello.c\ng++ -o hello hello.c\n\n# This rule tells make to copy hello to the binaries subdirectory,\n# creating it if necessary\n.PHONY: install\ninstall:\nmkdir -p binaries\n    cp -p hello binaries\n\n# This rule tells make to delete hello and hello.o\n.PHONY: clean \nclean:\nrm -f hello\n</code></pre> <p></p> <pre><code>C:\\Users\\ugur.coruh\\Desktop\\hello-make&gt;make hello\ng++ -o hello hello.c\n\nC:\\Users\\ugur.coruh\\Desktop\\hello-make&gt;dir\n Volume in drive C is Windows\n Volume Serial Number is 8C3C-8F8C\n\nDirectory of C:\\Users\\ugur.coruh\\Desktop\\hello-make\n\n11/02/2021  01:44 AM    &lt;DIR&gt;          .\n11/02/2021  01:44 AM    &lt;DIR&gt;          ..\n11/02/2021  01:15 AM                73 hello.c\n11/02/2021  01:44 AM            54,022 hello.exe\n11/02/2021  01:43 AM               458 Makefile\n               3 File(s)         54,553 bytes\n               2 Dir(s)  101,382,164,480 bytes free\n\nC:\\Users\\ugur.coruh\\Desktop\\hello-make&gt;hello.exe\nhello, world\n\nC:\\Users\\ugur.coruh\\Desktop\\hello-make&gt;\n</code></pre> <p></p> <pre><code>$ clang hello.c\n$ ls\na.out*  hello*  hello.c\n$ ./a.out hello, world\n</code></pre> <p></p> <pre><code>$ clang -o hello hello.c\n$ ls\na.out*  hello*  hello.c\n$ ./hello hello, world\n</code></pre> <p></p> <pre><code>$ ls\nhello.c\n$ clang -o hello hello.c -lcs50\n$ ls\nhello*  hello.c\n$ ./hello hello, world\n$ </code></pre> <p>Also you can use visual studio community edition. </p>"},{"location":"week-5-c/ce103-week-5-c/#preprocessing","title":"Preprocessing","text":"<p>get included file declarations</p> <pre><code>#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\nint main(void)\n{\nstring name = get_string(\"What's your name? \");\nprintf(\"hello, %s\\n\", name);\n}\n</code></pre> <p>to this</p> <pre><code>string get_string(string prompt);\nint printf(string format, ...);\nint main(void)\n{\nstring name = get_string(\"What's your name? \");\nprintf(\"hello, %s\\n\", name);\n}\n</code></pre>"},{"location":"week-5-c/ce103-week-5-c/#compiling","title":"Compiling","text":"<p>convert source code to assembler code</p> <pre><code>...\nmain:                                   # @main\n    .cfi_startproc\n# BB#0:\n    pushq    %rbp\n.Ltmp0:\n    .cfi_def_cfa_offset 16\n.Ltmp1:\n    .cfi_offset %rbp, -16\n    movq    %rsp, %rbp\n.Ltmp2:\n    .cfi_def_cfa_register %rbp\n    subq    $16, %rsp\n    xorl    %eax, %eax\n    movl    %eax, %edi\n    movabsq    $.L.str, %rsi\n    movb    $0, %al\n    callq    get_string\n    movabsq    $.L.str.1, %rdi\n    movq    %rax, -8(%rbp)\n    movq    -8(%rbp), %rsi\n    movb    $0, %al\n    callq    printf\n    ...\n</code></pre>"},{"location":"week-5-c/ce103-week-5-c/#assembling","title":"Assembling","text":"<p>convert assembler to opcodes</p> <pre><code>...\nmain:                                   # @main\n    .cfi_startproc\n# BB#0:\n    pushq    %rbp\n.Ltmp0:\n    .cfi_def_cfa_offset 16\n.Ltmp1:\n    .cfi_offset %rbp, -16\n    movq    %rsp, %rbp\n.Ltmp2:\n    .cfi_def_cfa_register %rbp\n    subq    $16, %rsp\n    xorl    %eax, %eax\n    movl    %eax, %edi\n    movabsq    $.L.str, %rsi\n    movb    $0, %al\n    callq    get_string\n    movabsq    $.L.str.1, %rdi\n    movq    %rax, -8(%rbp)\n    movq    -8(%rbp), %rsi\n    movb    $0, %al\n    callq    printf\n    ...\n</code></pre> <p>to this</p> <pre><code>01111111010001010100110001000110\n00000010000000010000000100000000\n00000000000000000000000000000000\n00000000000000000000000000000000\n00000001000000000011111000000000\n00000001000000000000000000000000\n00000000000000000000000000000000\n00000000000000000000000000000000\n00000000000000000000000000000000\n00000000000000000000000000000000\n10100000000000100000000000000000\n00000000000000000000000000000000\n00000000000000000000000000000000\n01000000000000000000000000000000\n00000000000000000100000000000000\n00001010000000000000000100000000\n01010101010010001000100111100101\n01001000100000111110110000010000\n00110001110000001000100111000111\n01001000101111100000000000000000\n00000000000000000000000000000000\n00000000000000001011000000000000\n11101000000000000000000000000000\n00000000010010001011111100000000\n00000000000000000000000000000000\n00000000000000000000000001001000\n...\n</code></pre>"},{"location":"week-5-c/ce103-week-5-c/#linking","title":"Linking","text":"<p>hello.c</p> <pre><code>01111111 01000101 01001100 01000110 00000010 00000001 00000001 00000000\n00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000\n...\n</code></pre> <p>stdio.c</p> <pre><code>01111111 01000101 01001100 01000110 00000010 00000001 00000001 00000000\n00000000 00000000 00000000 00000000 00000000\n...\n</code></pre> <p>cs50.c</p> <pre><code>01111111 01000101 01001100 01000110 00000010 00000001 00000001 00000000\n00000000 00000000 00000000 00000000 00000000\n...\n</code></pre> <p>combine binary codes to generate exe</p> <pre><code>011111110100010101001100010001100000001000000001000000010000000000000000000000000000000000000000000000\n000000000000000000000000000000000100000000001111100000000000000001000000000000000000000000000000000000\n000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n000000000000001010000000000010000000000000000000000000000000000000000000000000000000000000000000000000\n000000000100000000000000000000000000000000000000000000000100000000000000000010100000000000000001000000\n000101010101001000100010011110010101001000100000111110110000010000001100011100000010001001110001110100\n100010111110000000000000000000000000000000000000000000000000000000000000000010110000000000001110100000\n000000000000000000000000000000010010001011111100000000000000000000000000000000000000000000000000000000\n0000000001001000...01111111010001010100110001000110000000100000000100000001000000000000000000000000000\n000000000000000000000000000000000000000000000000000110000000000111110000000000000000100000000000000000\n000000011000000000011110000000000000000000000000000000000000000000000000100000000000000000000000000000\n000000000000000000000000000000000001010000011001000000000000000000000000000000000000000000000000000000\n000000000000000000000000000010000000000000000111000000000000000011100000000010000000000000000011100000\n000000001100100000000000000010000000000000000000000000000010100000000000000000000000000000000000000000\n000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n000000000000000000000000000000000000000000000000000000000000000000000000001011100001001010000000000000\n00000000000000000000000000000000000...0010111101101100011010010110001001100011001011100111001101101111\n001011100011011000100000001011110111010101110011011100100010111101101100011010010110001000101111011110\n000011100000110110010111110011011000110100001011010110110001101001011011100111010101111000001011010110\n011101101110011101010010111101101100011010010110001001100011010111110110111001101111011011100111001101\n101000011000010111001001100101011001000010111001100001001000000010000001000001010100110101111101001110\n010001010100010101000100010001010100010000100000001010000010000000101111011011000110100101100010001011\n110111100000111000001101100101111100110110001101000010110101101100011010010110111001110101011110000010\n110101100111011011100111010100101111011011000110010000101101011011000110100101101110011101010111100000\n101101011110000011100000110110001011010011011000110100...\n</code></pre>"},{"location":"week-5-c/ce103-week-5-c/#c-introduction","title":"C Introduction","text":""},{"location":"week-5-c/ce103-week-5-c/#keywords-and-identifiers","title":"Keywords and Identifiers","text":"<p>This tutorial will teach you about keywords, which are reserved words in C programming that are part of the syntax. You will also be taught about identifiers and how to name them.</p>"},{"location":"week-5-c/ce103-week-5-c/#character-set","title":"Character set","text":"<p>A character set is a collection of alphabets, letters, and special characters that are supported by the C programming language. As variables and functions, C accepts both lowercase and uppercase alphabets.</p>"},{"location":"week-5-c/ce103-week-5-c/#alphabets","title":"Alphabets","text":"<pre><code>Uppercase: A B C ................................... X Y Z\nLowercase: a b c ...................................... x y z\n</code></pre>"},{"location":"week-5-c/ce103-week-5-c/#digits","title":"Digits","text":"<pre><code>0 1 2 3 4 5 6 7 8 9\n</code></pre>"},{"location":"week-5-c/ce103-week-5-c/#special-characters","title":"Special Characters","text":"<p>Special Characters in C Programming</p> , &lt; &gt; . - ( ) ; $ : % [ ] # ? ' &amp; { } \" ^ ! * / - \\ ~ + <p>White space Characters</p> <p>A newline, a horizontal tab, a carriage return, and a form feed are all examples of punctuation.</p>"},{"location":"week-5-c/ce103-week-5-c/#c-keywords","title":"C Keywords","text":"<p>Keywords are reserved words in programming that have special meanings to the compiler. Keywords are syntax elements that cannot be used as identifiers. As an example:</p> <pre><code>int money;\n</code></pre> <p>In this case, <code>int</code> is a keyword indicating that <code>money</code>is a variable of type <code>int</code>(integer).</p> <p>Because C is a case-sensitive language, all keywords must be written in lowercase. The following is a list of all the keywords permitted in ANSI C.</p> <p>C Keywords</p> auto double int struct break else long switch case enum register typedef char extern return union continue for signed void do if static while default goto sizeof volatile const float short unsigned <p>All of these keywords, as well as their syntax and application, will be covered in their respective topics.</p> <p>The Complete List of all 32 C Programming Keywords (With Examples) - Programiz</p>"},{"location":"week-5-c/ce103-week-5-c/#c-identifiers","title":"C Identifiers","text":"<p>The term \"identifier\" refers to the name given to entities such as variables, functions, structures, and so on. Identifiers must be distinct. They are created to give a unique name to an entity in order to identify it during program execution. As an example:</p> <pre><code>int money;\ndouble accountBalance;\n</code></pre> <p><code>money</code>and <code>accountBalance</code>are identifiers in this context. Also, keep in mind that identifier names must be distinct from keyword names. Because <code>int</code>is a keyword, it cannot be used as an identifier.</p>"},{"location":"week-5-c/ce103-week-5-c/#rules-for-naming-identifiers","title":"Rules for naming identifiers","text":"<ol> <li> <p>Letters (including capital and lowercase letters), numbers, and underscores can all be used in a valid identification.</p> </li> <li> <p>An identifier's initial letter should be either a letter or an underscore.</p> </li> <li> <p>Keywords such as int, while, and so on cannot be used as identifiers.</p> </li> <li> <p>There are no restrictions on the length of an identification. However, if the identifier is larger than 31 characters, you may have issues with some compilers.</p> </li> </ol> <p>If you follow the above criterion, you can use any name as an identifier; nevertheless, provide meaningful names to identifiers that make sense.</p>"},{"location":"week-5-c/ce103-week-5-c/#c-variables-constants-and-literals","title":"C Variables, Constants and Literals","text":"<p>This article will teach you about variables and the rules for naming variables. You will also learn about different literals and how to build constants in C programming.</p>"},{"location":"week-5-c/ce103-week-5-c/#variables","title":"Variables","text":"<p>A variable in programming is a container (storage space) for data. Each variable should be given a unique name to denote the storage region (identifier). Variable names are simply a graphical representation of a memory location. As an example:</p> <pre><code>int playerScore = 95;\n</code></pre> <p>In this case, <code>playerScore</code> is an <code>int</code> variable. The variable is given the integer value <code>95</code>in this case.</p> <p>A variable's value may be altered, thus the term variable.</p> <pre><code>char ch = 'a';\n// some code\nch = 'l';\n</code></pre>"},{"location":"week-5-c/ce103-week-5-c/#rules-for-naming-a-variable","title":"Rules for naming a variable","text":"<ol> <li> <p>A variable name can only contain characters (uppercase and lowercase), numbers, and underscores.</p> </li> <li> <p>A variable's initial letter should be either a letter or an underscore.</p> </li> <li> <p>There are no restrictions on the length of a variable name (identifier). However, if the variable name is larger than <code>31</code>characters, you may have issues with some compilers.</p> </li> </ol> <p>Please keep in mind that you should always aim to give variables meaningful names. For example, <code>firstName</code> is a more appropriate variable name than <code>fn</code>.</p> <p>C is a highly typed programming language. This means that once a variable is declared, it cannot be modified. As an example:</p> <pre><code>int number = 5;      // integer variable\nnumber = 5.5;        // error\ndouble number;       // error\n</code></pre> <p>In this case, the type of number variable is int. This variable cannot be assigned the floating-point (decimal) value 5.5. Furthermore, you cannot change the variable's data type to double. By the way, in order to hold decimal values in C, you must designate their type as double or float.</p>"},{"location":"week-5-c/ce103-week-5-c/#literals","title":"Literals","text":"<p>Literals are data that are used to represent fixed values. They can be directly utilized in the code. For example: 1, 2.5, 'c,' and so on. Literals are 1, 2.5, and 'c' in this case. Why? These words cannot have various values assigned to them.</p>"},{"location":"week-5-c/ce103-week-5-c/#1-integers","title":"1. Integers","text":"<p>An integer is a numeric literal (related with numbers) that does not have any fractional or exponential components. In C programming, there are three types of integer literals:</p> <ul> <li> <p>digits (base 10)</p> </li> <li> <p>the number octal (base 8)</p> </li> <li> <p>hexadecimal (base 16)</p> </li> </ul> <p>For example:</p> <pre><code>Decimal: 0, -9, 22 etc\nOctal: 021, 077, 033 etc\nHexadecimal: 0x7f, 0x2a, 0x521 etc\n</code></pre> <p>In C, octal begins with a 0 while hexadecimal begins with a 0x.</p>"},{"location":"week-5-c/ce103-week-5-c/#2-floating-point-literals","title":"2. Floating-point Literals","text":"<p>A floating-point literal is a numeric literal with a fractional or exponent form. As an example:</p> <pre><code>-2.0\n0.0000234\n-0.22E-5\n</code></pre> <p>Please note that</p> \\[ E-5 = 10^{-5} \\]"},{"location":"week-5-c/ce103-week-5-c/#3-characters","title":"3. Characters","text":"<p>Enclosing a single character inside single quote marks yields a character literal. For example, 'a','m', 'F', '2', \", and so on.</p>"},{"location":"week-5-c/ce103-week-5-c/#4-escape-sequences","title":"4. Escape Sequences","text":"<p>In C programming, it is sometimes important to employ characters that cannot be typed or have specific meaning. For instance, newline (enter), tab, question mark, and so on.</p> <p>Escape sequences are utilized to utilise these characters.</p> Escape Sequences Character <code>\\b</code> Backspace <code>\\f</code> Form feed <code>\\n</code> Newline <code>\\r</code> Return <code>\\t</code> Horizontal Tab <code>\\v</code> Vertical Tab `\\\\ Backslash <code>\\'</code> Single quotation mark <code>\\\"</code> Double quotation mark <code>\\?</code> Question mark <code>\\0</code> Null character"},{"location":"week-5-c/ce103-week-5-c/#5-string-literals","title":"5. String Literals","text":"<p>A string literal is a string of characters surrounded by double quotation marks. As an example:</p> <pre><code>\"good\"                  //string constant\n\"\"                     //null string constant\n\"      \"               //string constant of six white space\n\"x\"                    //string constant having a single character.\n\"Earth is round\\n\"         //prints string with a newline\n</code></pre>"},{"location":"week-5-c/ce103-week-5-c/#constants","title":"Constants","text":"<p>The const keyword can be used to declare a variable whose value cannot be modified. This will result in a constant. As an example,</p> <pre><code>const double PI = 3.14;\n</code></pre> <p>We've introduced the keyword const. PI is a symbolic constant in this context; its value cannot be modified.</p> <pre><code>const double PI = 3.14;\nPI = 2.9; //Error\n</code></pre> <p>You may also use the <code>#define</code> preprocessor directive to declare a constant.</p>"},{"location":"week-5-c/ce103-week-5-c/#c-data-types","title":"C Data Types","text":"<p>In this course, you will learn about basic data types in C programming, such as int, float, and char.</p> <p>Data types are variable declarations in C programming. The kind and quantity of data linked with variables are determined by this. As an example,</p> <pre><code>int myVar;\n</code></pre> <p>In this case, <code>myVar</code> is an <code>int</code> (integer) variable. <code>int</code> has a size of 4 bytes.</p>"},{"location":"week-5-c/ce103-week-5-c/#basic-types","title":"Basic types","text":"<p>Here's a table containing commonly used types in C programming for quick access.</p> Type Size(bytes) Format Specifiers int at least 2, usually 4 %d %i char 1 %c float 4 %f double 8 %lf short int 2 usually %hd unsigned int at least 2, usually 4 %u long int at least 4, usually 8 %ld %li long long int at least 8 %lld %lli unsigned long int at least 4 %lu unsigned long long int at least 8 %llu signed char 1 %c usigned char 1 %c long double at least 10, usually 12 or 16 %Lf"},{"location":"week-5-c/ce103-week-5-c/#int","title":"int","text":"<p>Integers are entire integers with zero, positive, and negative values but no decimal values. For instance, \\(0\\), \\(-5\\), and \\(10\\)</p> <p>In order to declare an integer variable, we can use <code>int</code>.</p> <pre><code>int id;\n</code></pre> <p>In this case, id is an integer variable.</p> <p>In C programming, you can define many variables at the same time. As an example,</p> <pre><code>int id, age;\n</code></pre> <p>Integers are typically \\(\\text{4 bytes}\\) in size (\\(\\text{32 bits}\\)). It may also take   $2^{32} $ different states from \\(-2147483648\\) to \\(2147483647\\).</p>"},{"location":"week-5-c/ce103-week-5-c/#float-and-double","title":"float and double","text":"<p>Real values are stored in float and double variables.</p> <pre><code>float salary;\ndouble price;\n</code></pre> <p>Floating-point numbers in C can also be expressed in exponential form. As an example,</p> <pre><code>float normalizationFactor = 22.442e2;\n</code></pre> <p>What is the distinction between float and double?</p> <p>Float (single precision float data type) has a size of 4 bytes. And double (double precision float data type) is 8 bytes in size.</p>"},{"location":"week-5-c/ce103-week-5-c/#char","title":"char","text":"<p>The keyword char is used to declare variables of the character type. As an example, </p> <pre><code>char test = 'h';\n</code></pre> <p>The character variable is 1 byte in size.</p>"},{"location":"week-5-c/ce103-week-5-c/#void","title":"void","text":"<p>void is an unfinished type. It signifies \"nothing\" or \"nothing of the sort.\" You might conceive of emptiness as the absence of something.</p> <p>If a function does not return anything, its return type should be void.</p> <p>It is important to note that void variables cannot be created.</p>"},{"location":"week-5-c/ce103-week-5-c/#short-and-long","title":"short and long","text":"<p>If you need to utilize a huge number, a type specifier <code>long</code> can be used. Here's how it works:</p> <pre><code>long a;\nlong long b;\nlong double c;\n</code></pre> <p>Variables a and b can store integer values in this case. In addition, c may hold a floating-point number.</p> <p>You can use <code>short</code> if you are certain that just a tiny integer range between</p> <p>\\(-32767, +32767\\)  will be utilized.</p> <pre><code>short d;\n</code></pre> <p>The <code>sizeof()</code> operator may always be used to determine the size of a variable.</p> <pre><code>#include &lt;stdio.h&gt;    int main() {\nshort a;\nlong b;\nlong long c;\nlong double d;\nprintf(\"size of short = %d bytes\\n\", sizeof(a));\nprintf(\"size of long = %d bytes\\n\", sizeof(b));\nprintf(\"size of long long = %d bytes\\n\", sizeof(c));\nprintf(\"size of long double= %d bytes\\n\", sizeof(d));\nreturn 0;\n}\n</code></pre>"},{"location":"week-5-c/ce103-week-5-c/#signed-and-unsigned","title":"signed and unsigned","text":"<p>Signed and unsigned are type modifiers in C. You may use them to change the data storage of a data type. As an example,</p> <pre><code>unsigned int x;\nint y;\n</code></pre> <p>Because we applied the unsigned modifier, the variable <code>x</code> can only retain zero and positive numbers.</p> <p>Given that <code>int</code> has a capacity of <code>4 bytes</code>, variable <code>y</code> can have values ranging from</p> <p>-\\(2^{31}\\) to  \\(2^{31}-1\\), </p> <p>But variable <code>x</code>can hold values ranging from</p> <p>\\(0\\) to  \\(2^{32}-1\\).</p>"},{"location":"week-5-c/ce103-week-5-c/#other-data-types-defined-in-c-programming-are","title":"Other data types defined in C programming are:","text":"<ul> <li>bool Type</li> <li>Enumerated type</li> <li>Complex types</li> </ul>"},{"location":"week-5-c/ce103-week-5-c/#derived-data-types","title":"Derived Data Types","text":"<p>Derived types are data types that are derived from basic data types. Arrays, pointers, function types, structures, and so on are examples.</p>"},{"location":"week-5-c/ce103-week-5-c/#c-input-output-io","title":"C Input Output (I/O)","text":"<p>In this lesson, you will learn how to utilize the <code>scanf()</code> function to accept user input and the <code>printf()</code> method to display output to the user.</p>"},{"location":"week-5-c/ce103-week-5-c/#c-output","title":"C Output","text":"<p><code>printf()</code> is a common output function in C programming. The function outputs formatted data to the screen. As an example,</p>"},{"location":"week-5-c/ce103-week-5-c/#example-1-c-output","title":"Example 1: C Output","text":"<pre><code>#include &lt;stdio.h&gt;    int main()\n{ // Displays the string inside quotations\nprintf(\"C Programming\");\nreturn 0;\n}\n</code></pre> <p>Output</p> <pre><code>C Programming\n</code></pre> <p>How does this software function?</p> <p>The <code>main()</code> function is required in all legal C programs. </p> <p>The execution of the code begins at the commencement of the main() function.</p> <p>The <code>printf()</code> function is a library function that is used to provide formatted output to the screen. </p> <p>The string is printed within quote marks by the function.</p> <p>In order to utilize printf() in our program, we must include the <code>stdio.h</code> header file using the <code>#include &lt;stdio.h&gt;</code> declaration.</p> <p>The \"Exit status\" of the program is the return 0; statement within the main() method. It's entirely voluntary.</p>"},{"location":"week-5-c/ce103-week-5-c/#example-2-integer-output","title":"Example 2: Integer Output","text":"<pre><code>#include &lt;stdio.h&gt;\nint main()\n{\nint testInteger = 5;\nprintf(\"Number = %d\", testInteger);\nreturn 0;\n}\n</code></pre> <p>Output</p> <pre><code>Number = 5\n</code></pre> <p>To print <code>int</code>types, we utilize the <code>%d</code> format specifier. The value of <code>testInteger</code> will be used in instead of the <code>%d</code> inside the quotes.</p>"},{"location":"week-5-c/ce103-week-5-c/#example-3-float-and-double-output","title":"Example 3: float and double Output","text":"<pre><code>#include &lt;stdio.h&gt;\nint main()\n{\nfloat number1 = 13.5;\ndouble number2 = 12.4;\nprintf(\"number1 = %f\\n\", number1);\nprintf(\"number2 = %lf\", number2);\nreturn 0;\n}\n</code></pre> <p>Output</p> <pre><code>number1 = 13.500000\nnumber2 = 12.400000\n</code></pre> <p>We utilize the <code>%f</code> format specifier to print <code>floats</code>. Similarly, to display <code>double</code> numbers, we use <code>%lf</code>.</p>"},{"location":"week-5-c/ce103-week-5-c/#example-4-print-characters","title":"Example 4: Print Characters","text":"<pre><code>#include &lt;stdio.h&gt;\nint main()\n{\nchar chr = 'a';    printf(\"character = %c\", chr);  return 0;\n} </code></pre> <p>Output</p> <pre><code>character = a\n</code></pre> <p>We utilize the <code>%c</code> format specifier to print char.</p>"},{"location":"week-5-c/ce103-week-5-c/#c-input","title":"C Input","text":"<p><code>scanf()</code> is a widely used function in C programming to accept user input. The <code>scanf()</code> function reads formatted input from typical input devices like keyboards.</p>"},{"location":"week-5-c/ce103-week-5-c/#example-5-integer-inputoutput","title":"Example 5: Integer Input/Output","text":"<pre><code>#include &lt;stdio.h&gt;\nint main()\n{\nint testInteger;\nprintf(\"Enter an integer: \");\nscanf(\"%d\", &amp;testInteger);  printf(\"Number = %d\",testInteger);\nreturn 0;\n}\n</code></pre> <p>Output</p> <pre><code>Enter an integer: 4\nNumber = 4\n</code></pre> <p>To accept <code>int</code> input from the user, we utilized the <code>%d</code> format specifier inside the <code>scanf()</code> method. When a user enters an integer, it is saved in the variable <code>testInteger</code>.</p> <p>You'll see that we used <code>&amp;testInteger</code> within <code>scanf ()</code>. This is due to the fact that <code>&amp;testInteger</code> obtains the address of <code>testInteger</code>, and the value given by the user is saved in that address.</p>"},{"location":"week-5-c/ce103-week-5-c/#example-6-float-and-double-inputoutput","title":"Example 6: Float and Double Input/Output","text":"<pre><code>#include &lt;stdio.h&gt;\nint main()\n{\nfloat num1;\ndouble num2;\nprintf(\"Enter a number: \");\nscanf(\"%f\", &amp;num1);\nprintf(\"Enter another number: \");\nscanf(\"%lf\", &amp;num2);\nprintf(\"num1 = %f\\n\", num1);\nprintf(\"num2 = %lf\", num2);\nreturn 0;\n}\n</code></pre> <p>Output</p> <pre><code>Enter a number: 12.523\nEnter another number: 10.2\nnum1 = 12.523000\nnum2 = 10.200000\n</code></pre> <p>For <code>float</code>and <code>double</code>, we use the format specifiers <code>%f</code> and <code>%lf</code>, respectively.</p>"},{"location":"week-5-c/ce103-week-5-c/#example-7-c-character-io","title":"Example 7: C Character I/O","text":"<pre><code>#include &lt;stdio.h&gt;\nint main()\n{\nchar chr;\nprintf(\"Enter a character: \");\nscanf(\"%c\",&amp;chr);     printf(\"You entered %c.\", chr);  return 0;\n}   </code></pre> <p>Output</p> <pre><code>Enter a character: g\nYou entered g\n</code></pre> <p>When a user enters a character into the aforementioned software, the character itself is not saved. An integer value (ASCII value) is instead stored.</p> <p>When we use the <code>%c</code> text format to represent that value, the input character is displayed. The ASCII value of the character is printed when we utilize <code>%d</code> to show it.</p>"},{"location":"week-5-c/ce103-week-5-c/#example-8-ascii-value","title":"Example 8: ASCII Value","text":"<pre><code>#include &lt;stdio.h&gt;\nint main()\n{\nchar chr;\nprintf(\"Enter a character: \");\nscanf(\"%c\", &amp;chr);     // When %c is used, a character is displayed\nprintf(\"You entered %c.\\n\",chr);  // When %d is used, ASCII value is displayed\nprintf(\"ASCII value is %d.\", chr);  return 0;\n}\n</code></pre> <p>Output</p> <pre><code>Enter a character: g\nYou entered g.\nASCII value is 103.\n</code></pre>"},{"location":"week-5-c/ce103-week-5-c/#io-multiple-values","title":"I/O Multiple Values","text":"<p>Here's how to take numerous user inputs and show them.</p> <pre><code>#include &lt;stdio.h&gt;\nint main()\n{\nint a;\nfloat b;\nprintf(\"Enter integer and then a float: \");\n// Taking multiple inputs\nscanf(\"%d%f\", &amp;a, &amp;b);\nprintf(\"You entered %d and %f\", a, b);  return 0;\n}\n</code></pre> <p>Output</p> <pre><code>Enter integer and then a float: -3\n3.4\nYou entered -3 and 3.400000\n</code></pre>"},{"location":"week-5-c/ce103-week-5-c/#format-specifiers-for-io","title":"Format Specifiers for I/O","text":"<p>As you can see from the samples above, we apply</p> <ul> <li><code>%d</code> for <code>int</code></li> <li><code>%f</code> for <code>float</code></li> <li><code>%lf</code> for <code>double</code></li> <li><code>%c</code> for <code>char</code></li> </ul> <p>The following is a collection of widely used C data types and associated format specifiers.</p> Type Size(bytes) Format Specifiers int at least 2, usually 4 %d %i char 1 %c float 4 %f double 8 %lf short int 2 usually %hd unsigned int at least 2, usually 4 %u long int at least 4, usually 8 %ld %li long long int at least 8 %lld %lli unsigned long int at least 4 %lu unsigned long long int at least 8 %llu signed char 1 %c usigned char 1 %c long double at least 10, usually 12 or 16 %Lf"},{"location":"week-5-c/ce103-week-5-c/#c-programming-operators","title":"C Programming Operators","text":"<p>With the assistance of examples, you will learn about several operators in C programming in this course.</p> <p>An operator is a symbol that performs an operation on a value or variable. For example, the operator + is used to compute addition.</p> <p>C has a diverse set of operators to execute a variety of tasks.</p>"},{"location":"week-5-c/ce103-week-5-c/#c-arithmetic-operators","title":"C Arithmetic Operators","text":"<p>An arithmetic operator performs mathematical operations such as addition, subtraction, multiplication, division etc on numerical values (constants and variables).</p> Operator Meaning of Operator + Addition or unary plus - Substraction or unary minus * Multiplication / Division % Remainder after division (modulo division)"},{"location":"week-5-c/ce103-week-5-c/#example-1-arithmetic-operators","title":"Example 1: Arithmetic Operators","text":"<pre><code>// Working of arithmetic operators\n#include &lt;stdio.h&gt;\nint main()\n{\nint a = 9,b = 4, c;\nc = a+b;\nprintf(\"a+b = %d \\n\",c);\nc = a-b;\nprintf(\"a-b = %d \\n\",c);\nc = a*b;\nprintf(\"a*b = %d \\n\",c);\nc = a/b;\nprintf(\"a/b = %d \\n\",c);\nc = a%b;\nprintf(\"Remainder when a divided by b = %d \\n\",c);\nreturn 0;\n}\n</code></pre> <p>Output</p> <pre><code>a+b = 13\na-b = 5\na*b = 36\na/b = 2\nRemainder when a divided by b=1\n</code></pre> <p>As you might guess, the operators +, -, and * calculate addition, subtraction, and multiplication, respectively.</p> <p><code>9/4</code>Equals <code>2.25</code> in standard math. In the program, however, the result is <code>2</code>.</p> <p>This is due to the fact that both variables a and b are integers. As a result, the output is also an integer. The compiler ignores the word following the decimal point and displays response <code>2</code> rather than <code>2.25</code>.</p> <p>The residual is computed using the modulo operator percent. The remaining is <code>1</code> when <code>a=9</code> is divided by <code>b=4</code>. Only integers can be used with the percent operator.</p> <p>Assume that <code>a = 5.0, b = 2.0, c = 5</code>, and <code>d = 2</code>. After that, in C programming.</p> <pre><code>// Either one of the operands is a floating-point number\na/b = 2.5  a/d = 2.5  c/b = 2.5  // Both operands are integers\nc/d = 2\n</code></pre>"},{"location":"week-5-c/ce103-week-5-c/#c-increment-and-decrement-operators","title":"C Increment and Decrement Operators","text":"<p>To alter the value of an operand (constant or variable) by one, C programming offers two operators: increment <code>++</code> and decrease <code>--</code>.</p> <p>Increment <code>++</code> raises the value by one, and decrement <code>--</code> lowers the value by one. These two operators are unary, which means they only work on a single operand.</p>"},{"location":"week-5-c/ce103-week-5-c/#example-2-increment-and-decrement-operators","title":"Example 2: Increment and Decrement Operators","text":"<pre><code>// Working of increment and decrement operators\n#include &lt;stdio.h&gt;\nint main()\n{\nint a = 10, b = 100;\nfloat c = 10.5, d = 100.5;\nprintf(\"++a = %d \\n\", ++a);\nprintf(\"--b = %d \\n\", --b);\nprintf(\"++c = %f \\n\", ++c);\nprintf(\"--d = %f \\n\", --d);\nreturn 0;\n}\n</code></pre> <p>Output</p> <pre><code>++a = 11\n--b = 99\n++c = 11.500000\n--d = 99.500000\n</code></pre> <p>The operators <code>++</code> and <code>--</code> are used as prefixes here. These two operators, like <code>a++</code> and <code>a--</code> can also be used as postfixes.</p>"},{"location":"week-5-c/ce103-week-5-c/#increment-and-decrement-operator-as-prefix-and-postfix","title":"Increment ++ and Decrement -- Operator as Prefix and Postfix","text":"<p>The increment operator ++ in programming (Java, C, C++, JavaScript, and so on) increments the value of a variable by one. Similarly, the decrement operator -- reduces a variable's value by one.</p> <pre><code>a = 5\n++a;          // a becomes 6\na++;          // a becomes 7\n--a;          // a becomes 6\na--;          // a becomes 5\n</code></pre> <p>So far, so straightforward. When these two operators are employed as a prefix and a postfix, there is a significant difference.</p>"},{"location":"week-5-c/ce103-week-5-c/#and-operator-as-prefix-and-postfix","title":"++ and -- operator as prefix and postfix","text":"<p>When you use the ++ operator as a prefix, such as: ++var, the value of var is increased by one and then returned.</p> <p>If you use the ++ operator as a postfix, such as var++, the original value of var is returned first, followed by a one-digit increase of var.</p> <p>The -- operator functions similarly to the ++ operator, except that it reduces the value by one.</p>"},{"location":"week-5-c/ce103-week-5-c/#example-1-c-programming","title":"Example 1: C Programming","text":"<pre><code>#include &lt;stdio.h&gt;\nint main() {\nint var1 = 5, var2 = 5;\n// 5 is displayed\n// Then, var1 is increased to 6.\nprintf(\"%d\\n\", var1++);\n// var2 is increased to 6 \n// Then, it is displayed.\nprintf(\"%d\\n\", ++var2);\nreturn 0;\n}\n</code></pre> <p>Output</p> <pre><code>5\n6\n</code></pre>"},{"location":"week-5-c/ce103-week-5-c/#c-assignment-operators","title":"C Assignment Operators","text":"<p>An assignment operator is a type of operator that is used to assign a value to a variable. = is the most commonly used assignment operator.</p> Operator Example Same as = a=b a=b += a+=b a=a+b -= a-=b a=a-b *= a*=b a=a*b /= a/=b a=a/b %= a%=b a=a%b"},{"location":"week-5-c/ce103-week-5-c/#example-3-assignment-operators","title":"Example 3: Assignment Operators","text":"<pre><code>// Working of assignment operators\n#include &lt;stdio.h&gt;\nint main()\n{\nint a = 5, c;\nc = a;      // c is 5\nprintf(\"c = %d\\n\", c);\nc += a;     // c is 10 \nprintf(\"c = %d\\n\", c);\nc -= a;     // c is 5\nprintf(\"c = %d\\n\", c);\nc *= a;     // c is 25\nprintf(\"c = %d\\n\", c);\nc /= a;     // c is 5\nprintf(\"c = %d\\n\", c);\nc %= a;     // c = 0\nprintf(\"c = %d\\n\", c);\nreturn 0;\n}\n</code></pre> <p>Output</p> <pre><code>c = 5 c = 10 c = 5 c = 25 c = 5 c = 0\n</code></pre>"},{"location":"week-5-c/ce103-week-5-c/#c-relational-operators","title":"C Relational Operators","text":"<p>A relational operator verifies the relationship of two operands. If the relationship is true, it returns 1; if the relationship is false, it returns 0.</p> Operator Meaning of Operator Example == Equal to 5 == 3 is evaluated to 0 &gt; Greater than 5 &gt; 3 is evaluated to 1 &lt; Less than 5 &lt; 3 is evaluated to 0 != Not equal to 5 != 3 is evaluated to 1 &gt;= Greater than or equal to 5 &gt;= 3 is evaluated to 1 &lt;= Less than or equal to 5 &lt;= 3 is evaluated to 0"},{"location":"week-5-c/ce103-week-5-c/#example-4-relational-operators","title":"Example 4: Relational Operators","text":"<pre><code>// Working of relational operators\n#include &lt;stdio.h&gt;\nint main()\n{\nint a = 5, b = 5, c = 10;\nprintf(\"%d == %d is %d \\n\", a, b, a == b);\nprintf(\"%d == %d is %d \\n\", a, c, a == c);\nprintf(\"%d &gt; %d is %d \\n\", a, b, a &gt; b);\nprintf(\"%d &gt; %d is %d \\n\", a, c, a &gt; c);\nprintf(\"%d &lt; %d is %d \\n\", a, b, a &lt; b);\nprintf(\"%d &lt; %d is %d \\n\", a, c, a &lt; c);\nprintf(\"%d != %d is %d \\n\", a, b, a != b);\nprintf(\"%d != %d is %d \\n\", a, c, a != c);\nprintf(\"%d &gt;= %d is %d \\n\", a, b, a &gt;= b);\nprintf(\"%d &gt;= %d is %d \\n\", a, c, a &gt;= c);\nprintf(\"%d &lt;= %d is %d \\n\", a, b, a &lt;= b);\nprintf(\"%d &lt;= %d is %d \\n\", a, c, a &lt;= c);\nreturn 0;\n}\n</code></pre> <p>Output</p> <pre><code>5 == 5 is 1\n5 == 10 is 0\n5 &gt; 5 is 0\n5 &gt; 10 is 0\n5 &lt; 5 is 0\n5 &lt; 10 is 1\n5 != 5 is 0\n5 != 10 is 1\n5 &gt;= 5 is 1\n5 &gt;= 10 is 0\n5 &lt;= 5 is 1\n5 &lt;= 10 is 1 </code></pre>"},{"location":"week-5-c/ce103-week-5-c/#c-logical-operators","title":"C Logical Operators","text":"<p>A logical operator expression returns either 0 or 1, depending on whether the expression is true or false.</p> Operator Meaning Example &amp;&amp; Logical AND. True only if all operands are true If c = 5 and d = 2 then, expression ((c==5) &amp;&amp; (d&gt;5)) equals to 0. | Logical OR. True only if either one operand is true ! Logical NOT. True only if the operand is 0 If c = 5 then, expression !(c==5) equals to 0."},{"location":"week-5-c/ce103-week-5-c/#example-5-logical-operators","title":"Example 5: Logical Operators","text":"<pre><code>// Working of logical operators\n#include &lt;stdio.h&gt;\nint main()\n{\nint a = 5, b = 5, c = 10, result;\nresult = (a == b) &amp;&amp; (c &gt; b);\nprintf(\"(a == b) &amp;&amp; (c &gt; b) is %d \\n\", result);\nresult = (a == b) &amp;&amp; (c &lt; b);\nprintf(\"(a == b) &amp;&amp; (c &lt; b) is %d \\n\", result);\nresult = (a == b) || (c &lt; b);\nprintf(\"(a == b) || (c &lt; b) is %d \\n\", result);\nresult = (a != b) || (c &lt; b);\nprintf(\"(a != b) || (c &lt; b) is %d \\n\", result);\nresult = !(a != b);\nprintf(\"!(a != b) is %d \\n\", result);\nresult = !(a == b);\nprintf(\"!(a == b) is %d \\n\", result);\nreturn 0;\n}\n</code></pre> <p>Output</p> <pre><code>(a == b) &amp;&amp; (c &gt; b) is 1 (a == b) &amp;&amp; (c &lt; b) is 0 (a == b) || (c &lt; b) is 1 (a != b) || (c &lt; b) is 0 !(a != b) is 1 !(a == b) is 0 </code></pre> <p>Explanation of logical operator program</p> <ul> <li><code>(a == b) &amp;&amp; (c &gt; 5)</code> evaluates to 1 because both operands <code>(a == b)</code> and <code>(c &gt; b)</code> is 1 (true).</li> <li><code>(a == b) &amp;&amp; (c &lt; b)</code> evaluates to 0 because operand <code>(c &lt; b)</code> is 0 (false).</li> <li><code>(a == b) || (c &lt; b)</code> evaluates to 1 because <code>(a = b)</code> is 1 (true).</li> <li><code>(a != b) || (c &lt; b)</code> evaluates to 0 because both operand <code>(a != b)</code> and <code>(c &lt; b)</code> are 0 (false).</li> <li><code>!(a != b)</code> evaluates to 1 because operand <code>(a != b)</code> is 0 (false). Hence, !(a != b) is 1 (true).</li> <li><code>!(a == b)</code> evaluates to 0 because <code>(a == b)</code> is 1 (true). Hence, <code>!(a == b)</code> is 0 (false).</li> </ul>"},{"location":"week-5-c/ce103-week-5-c/#c-bitwise-operators","title":"C Bitwise Operators","text":"<p>Mathematical operations like as addition, subtraction, multiplication, division, and so on are transformed to bit-level during computation, which speeds up processing and saves power.</p> <p>In C programming, bitwise operators are used to execute bit-level operations.</p> Operators Meaning of Operators &amp; Bitwise AND ^ Bitwise exclusive OR ~ Bitwise complement &lt;&lt; Shift left &gt;&gt; Shift right"},{"location":"week-5-c/ce103-week-5-c/#other-operators","title":"Other Operators","text":""},{"location":"week-5-c/ce103-week-5-c/#comma-operator","title":"Comma Operator","text":"<p>Comma operators are used to connect similar expressions. As an example:</p> <pre><code>int a, c = 5, d;\n</code></pre>"},{"location":"week-5-c/ce103-week-5-c/#the-sizeof-operator","title":"The sizeof operator","text":"<p><code>sizeof</code> is a unary operator that returns the data size (constants, variables, array, structure, etc).</p>"},{"location":"week-5-c/ce103-week-5-c/#example-6-sizeof-operator","title":"Example 6: sizeof Operator","text":"<pre><code>#include &lt;stdio.h&gt;\nint main()\n{\nint a;\nfloat b;\ndouble c;\nchar d;\nprintf(\"Size of int=%lu bytes\\n\",sizeof(a));\nprintf(\"Size of float=%lu bytes\\n\",sizeof(b));\nprintf(\"Size of double=%lu bytes\\n\",sizeof(c));\nprintf(\"Size of char=%lu byte\\n\",sizeof(d));\nreturn 0;\n}\n</code></pre> <p>Output</p> <pre><code>Size of int = 4 bytes\nSize of float = 4 bytes\nSize of double = 8 bytes\nSize of char = 1 byte\n</code></pre> <p>Other operators, </p> <p>such as the ternary operator <code>?:</code>, </p> <p>the reference operator <code>&amp;</code>, </p> <p>the dereference operator <code>*</code>, and </p> <p>the member selection operator <code>-&gt;</code>, will be covered in more detail later.</p>"},{"location":"week-5-c/ce103-week-5-c/#c-flow-control","title":"C Flow Control","text":""},{"location":"week-5-c/ce103-week-5-c/#c-ifelse-statement","title":"C if...else Statement","text":"<p>With the assistance of examples, you will learn about the if statement (including if...else and nested if...else) in C programming.</p>"},{"location":"week-5-c/ce103-week-5-c/#c-if-statement","title":"C if Statement","text":"<p>In C programming, the if statement has the following syntax:</p> <pre><code>if (test expression) {\n// code\n}\n</code></pre>"},{"location":"week-5-c/ce103-week-5-c/#how-if-statement-works","title":"How if statement works?","text":"<p>The test expression inside the parentheses is evaluated by the if statement ().</p> <p>If the test expression is true, the statements within the if body are performed. If the test expression is interpreted as false, the statements within the if body are not performed.</p> <p>How if statement works?</p> <p></p> <p>Check relational and logical operators to understand more about when a test expression is evaluated to true (non-zero value) and false (0).</p>"},{"location":"week-5-c/ce103-week-5-c/#example-1-if-statement","title":"Example 1: if statement","text":"<pre><code>// Program to display a number if it is negative\n#include &lt;stdio.h&gt;\nint main() {\nint number;\nprintf(\"Enter an integer: \");\nscanf(\"%d\", &amp;number);\n// true if number is less than 0\nif (number &lt; 0) {\nprintf(\"You entered %d.\\n\", number);\n}\nprintf(\"The if statement is easy.\");\nreturn 0;\n}\n</code></pre> <p>Output 1</p> <pre><code>Enter an integer: -2\nYou entered -2.\nThe if statement is easy.\n</code></pre> <p>When the user types -2, the test expression number 0 is evaluated as true. As a result, the value -2 that you typed is displayed on the screen.</p> <p>Output 2</p> <pre><code>Enter an integer: 5\nThe if statement is easy.\n</code></pre> <p>When the user enters 5, the test expression number 0 is assessed as false, and the statement within the body of the if is not performed.</p>"},{"location":"week-5-c/ce103-week-5-c/#c-ifelse-statement_1","title":"C if...else Statement","text":"<p>An else block is optional in the if statement. The if...else sentence has the following syntax:</p> <pre><code>if (test expression) {\n// run code if test expression is true\n}\nelse {\n// run code if test expression is false\n}\n</code></pre>"},{"location":"week-5-c/ce103-week-5-c/#how-ifelse-statement-works","title":"How if...else statement works?","text":"<p>If the test expression is found to be true,</p> <p>Statements within the if body are performed. Statements within the body of else are not executed. If the test expression is found to be false,</p> <p>Phrases inside the body of else are performed; statements within the body of if are skipped.</p> <p>How if...else statement works?</p> <p></p>"},{"location":"week-5-c/ce103-week-5-c/#example-2-ifelse-statement","title":"Example 2: if...else statement","text":"<pre><code>// Check whether an integer is odd or even\n#include &lt;stdio.h&gt;\nint main() {\nint number;\nprintf(\"Enter an integer: \");\nscanf(\"%d\", &amp;number);\n// True if the remainder is 0\nif  (number%2 == 0) {\nprintf(\"%d is an even integer.\",number);\n}\nelse {\nprintf(\"%d is an odd integer.\",number);\n}\nreturn 0;\n}\n</code></pre> <p>Output</p> <pre><code>Enter an integer: 7\n7 is an odd integer.\n</code></pre> <p>When the user enters 7, the test expression <code>number% 2==0</code> returns false. As a result, the statement within the body of else is performed.</p>"},{"location":"week-5-c/ce103-week-5-c/#c-ifelse-ladder","title":"C if...else Ladder","text":"<p>Depending on whether the test phrase is true or false, the if...else statement runs two separate programs. Sometimes a decision must be made between more than two options. You may use the <code>if...else</code> ladder to compare numerous test expressions and execute various statements.</p>"},{"location":"week-5-c/ce103-week-5-c/#syntax-of-ifelse-ladder","title":"Syntax of if...else Ladder","text":"<pre><code>if (test expression1) {\n// statement(s)\n}\nelse if(test expression2) {\n// statement(s)\n}\nelse if (test expression3) {\n// statement(s)\n}\n.\n.\nelse {\n// statement(s)\n}\n</code></pre>"},{"location":"week-5-c/ce103-week-5-c/#example-3-c-ifelse-ladder","title":"Example 3: C if...else Ladder","text":"<pre><code>// Program to relate two integers using =, &gt; or &lt; symbol\n#include &lt;stdio.h&gt;\nint main() {\nint number1, number2;\nprintf(\"Enter two integers: \");\nscanf(\"%d %d\", &amp;number1, &amp;number2);\n//checks if the two integers are equal.\nif(number1 == number2) {\nprintf(\"Result: %d = %d\",number1,number2);\n}\n//checks if number1 is greater than number2.\nelse if (number1 &gt; number2) {\nprintf(\"Result: %d &gt; %d\", number1, number2);\n}\n//checks if both test expressions are false\nelse {\nprintf(\"Result: %d &lt; %d\",number1, number2);\n}\nreturn 0;\n}\n</code></pre> <p>Output</p> <pre><code>Enter two integers: 12\n23\nResult: 12 &lt; 23\n</code></pre>"},{"location":"week-5-c/ce103-week-5-c/#nested-ifelse","title":"Nested if...else","text":"<p>An <code>if...else</code> statement can be included within the body of another <code>if...else</code>statement.</p>"},{"location":"week-5-c/ce103-week-5-c/#example-4-nested-ifelse","title":"Example 4: Nested if...else","text":"<p>This program, similar to the if...else ladder's example, compares two numbers using, &gt;, and =. To fix this problem, we will utilize a layered if...else expression.</p> <pre><code>#include &lt;stdio.h&gt;\nint main() {\nint number1, number2;\nprintf(\"Enter two integers: \");\nscanf(\"%d %d\", &amp;number1, &amp;number2);\nif (number1 &gt;= number2) {\nif (number1 == number2) {\nprintf(\"Result: %d = %d\",number1,number2);\n}\nelse {\nprintf(\"Result: %d &gt; %d\", number1, number2);\n}\n}\nelse {\nprintf(\"Result: %d &lt; %d\",number1, number2);\n}\nreturn 0;\n}\n</code></pre> <p>You do not need to use brackets if the body of an if...else statement contains only one sentence.</p> <pre><code>if (a &gt; b) {\nprintf(\"Hello\");\n}\nprintf(\"Hi\");\n</code></pre> <p>is equivalent to</p> <pre><code>if (a &gt; b)\nprintf(\"Hello\");\nprintf(\"Hi\");\n</code></pre>"},{"location":"week-5-c/ce103-week-5-c/#c-for-loop","title":"C for Loop","text":"<p>With the assistance of examples, you will learn how to design a for loop in C programming in this article.</p> <p>A loop is a programming construct that is used to repeat a block of code until the stated condition is fulfilled.</p> <p>Loops in C programming are classified into three types:</p> <ul> <li> <p>while loop </p> </li> <li> <p>for loop</p> </li> <li> <p>do..while loop</p> </li> </ul> <p>This lesson will teach us about the for loop. The while and do...while loops will be covered in the next tutorial.</p>"},{"location":"week-5-c/ce103-week-5-c/#for-loop","title":"for Loop","text":"<p>The for loop has the following syntax:</p> <pre><code>for (initializationStatement; testExpression; updateStatement)\n{\n// statements inside the body of loop\n}\n</code></pre>"},{"location":"week-5-c/ce103-week-5-c/#how-for-loop-works","title":"How for loop works?","text":"<p>The initialization statement is only used once. The test expression is then evaluated. The for loop is ended if the test statement is interpreted as false. If the test expression is true, the statements inside the for loop's body are performed, and the update expression is updated. The test expression is examined once more. This procedure is repeated until the test expression is false. The loop is terminated when the test expression is false.</p> <p>How for loop works?</p> <p></p>"},{"location":"week-5-c/ce103-week-5-c/#example-1-for-loop","title":"Example 1: for loop","text":"<pre><code>// Print numbers from 1 to 10\n#include &lt;stdio.h&gt;\nint main() {\nint i;\nfor (i = 1; i &lt; 11; ++i)\n{\nprintf(\"%d \", i);\n}\nreturn 0;\n}\n</code></pre> <p>Output</p> <pre><code>1 2 3 4 5 6 7 8 9 10\n</code></pre> <ol> <li>i is initialized to 1.</li> <li>The test expression <code>i &lt; 11</code> is evaluated. Since 1 less than 11 is true, the body of <code>for</code> loop is executed. This will print the 1 (value of i) on the screen.</li> <li>The update statement <code>++i</code> is executed. Now, the value of i will be 2. Again, the test expression is evaluated to true, and the body of <code>for</code> loop is executed. This will print 2 (value of i) on the screen.</li> <li>Again, the update statement <code>++i</code> is executed and the test expression <code>i &lt; 11</code> is evaluated. This process goes on until i becomes 11.</li> <li>When i becomes 11, i &lt; 11 will be false, and the <code>for</code> loop terminates.</li> </ol>"},{"location":"week-5-c/ce103-week-5-c/#example-2-for-loop","title":"Example 2: for loop","text":"<pre><code>// Program to calculate the sum of first n natural numbers\n// Positive integers 1,2,3...n are known as natural numbers\n#include &lt;stdio.h&gt;\nint main()\n{\nint num, count, sum = 0;\nprintf(\"Enter a positive integer: \");\nscanf(\"%d\", &amp;num);\n// for loop terminates when num is less than count\nfor(count = 1; count &lt;= num; ++count)\n{\nsum += count;\n}\nprintf(\"Sum = %d\", sum);\nreturn 0;\n}\n</code></pre> <p>Output</p> <pre><code>Enter a positive integer: 10\nSum = 55\n</code></pre> <p>The value entered by the user is stored in the variable num. Suppose, the user entered 10.</p> <p>The count is initialized to 1 and the test expression is evaluated. Since the test expression <code>count&lt;=num</code> (1 less than or equal to 10) is true, the body of <code>for</code> loop is executed and the value of sum will equal to 1.</p> <p>Then, the update statement <code>++count</code> is executed and count will equal to 2. Again, the test expression is evaluated. Since 2 is also less than 10, the test expression is evaluated to true and the body of the <code>for</code> loop is executed. Now, sum will equal 3.</p> <p>This process goes on and the sum is calculated until the count reaches 11.</p> <p>When the count is 11, the test expression is evaluated to 0 (false), and the loop terminates.</p> <p>Then, the value of <code>sum</code> is printed on the screen.</p>"},{"location":"week-5-c/ce103-week-5-c/#c-while-and-dowhile-loop","title":"C while and do...while Loop","text":"<p>In this tutorial, you will learn to create while and do...while loop in C programming with the help of examples.</p> <p>In programming, loops are used to repeat a block of code until a specified condition is met.</p> <p>C programming has three types of loops.</p> <ol> <li>for loop</li> <li>while loop</li> <li>do...while loop</li> </ol> <p>In the previous tutorial, we learned about <code>for</code> loop. In this tutorial, we will learn about <code>while</code> and <code>do..while</code> loop.</p>"},{"location":"week-5-c/ce103-week-5-c/#while-loop","title":"while loop","text":"<p>The syntax of the <code>while</code> loop is:</p> <pre><code>while (testExpression) {\n// the body of the loop \n}\n</code></pre>"},{"location":"week-5-c/ce103-week-5-c/#how-while-loop-works","title":"How while loop works?","text":"<ul> <li>The <code>while</code> loop evaluates the <code>testExpression</code> inside the parentheses <code>()</code>.</li> <li>If <code>testExpression</code> is true, statements inside the body of <code>while</code> loop are executed. Then, <code>testExpression</code> is evaluated again.</li> <li>The process goes on until <code>testExpression</code> is evaluated to false.</li> <li>If <code>testExpression</code> is false, the loop terminates (ends).</li> </ul> <p>How while loop works?</p> <p></p>"},{"location":"week-5-c/ce103-week-5-c/#example-1-while-loop","title":"Example 1: while loop","text":"<pre><code>// Print numbers from 1 to 5\n#include &lt;stdio.h&gt;\nint main() {\nint i = 1;\nwhile (i &lt;= 5) {\nprintf(\"%d\\n\", i);\n++i;\n}\nreturn 0;\n}\n</code></pre> <p>Output</p> <pre><code>1\n2\n3\n4\n5\n</code></pre> <p>Here, we have initialized i to 1.</p> <ol> <li>When <code>i = 1</code>, the test expression <code>i &lt;= 5</code> is true. Hence, the body of the <code>while</code> loop is executed. This prints <code>1</code> on the screen and the value of i is increased to <code>2</code>.</li> <li>Now, <code>i = 2</code>, the test expression <code>i &lt;= 5</code> is again true. The body of the <code>while</code> loop is executed again. This prints <code>2</code> on the screen and the value of i is increased to <code>3</code>.</li> <li>This process goes on until i becomes 6. Then, the test expression <code>i &lt;= 5</code> will be false and the loop terminates.</li> </ol>"},{"location":"week-5-c/ce103-week-5-c/#dowhile-loop","title":"do...while loop","text":"<p>The <code>do..while</code> loop is similar to the <code>while</code> loop with one important difference. The body of <code>do...while</code> loop is executed at least once. Only then, the test expression is evaluated.</p> <p>The syntax of the <code>do...while</code> loop is:</p> <pre><code>do {\n// the body of the loop\n}\nwhile (testExpression);\n</code></pre>"},{"location":"week-5-c/ce103-week-5-c/#how-dowhile-loop-works","title":"How do...while loop works?","text":"<ul> <li>The body of <code>do...while</code> loop is executed once. Only then, the <code>testExpression</code> is evaluated.</li> <li>If <code>testExpression</code> is true, the body of the loop is executed again and <code>testExpression</code> is evaluated once more.</li> <li>This process goes on until <code>testExpression</code> becomes false.</li> <li>If <code>testExpression</code> is false, the loop ends.</li> </ul> <p>How do...while loop works?</p> <p></p>"},{"location":"week-5-c/ce103-week-5-c/#example-2-dowhile-loop","title":"Example 2: do...while loop","text":"<pre><code>// Program to add numbers until the user enters zero\n#include &lt;stdio.h&gt;\nint main() {\ndouble number, sum = 0;\n// the body of the loop is executed at least once\ndo {\nprintf(\"Enter a number: \");\nscanf(\"%lf\", &amp;number);\nsum += number;\n}\nwhile(number != 0.0);\nprintf(\"Sum = %.2lf\",sum);\nreturn 0;\n}\n</code></pre> <p>Output</p> <pre><code>Enter a number: 1.5\nEnter a number: 2.4\nEnter a number: -3.4\nEnter a number: 4.2\nEnter a number: 0\nSum = 4.70\n</code></pre> <p>Here, we have used a <code>do...while</code> loop to prompt the user to enter a number. The loop works as long as the input number is not <code>0</code>.</p> <p>The <code>do...while</code> loop executes at least once i.e. the first iteration runs without checking the condition. The condition is checked only after the first iteration has been executed.</p> <pre><code>do {\nprintf(\"Enter a number: \");\nscanf(\"%lf\", &amp;number);\nsum += number;\n}\nwhile(number != 0.0);\n</code></pre> <p>So, if the first input is a non-zero number, that number is added to the sum variable and the loop continues to the next iteration. This process is repeated until the user enters <code>0</code>.</p> <p>But if the first input is 0, there will be no second iteration of the loop and sum becomes <code>0.0</code>.</p> <p>Outside the loop, we print the value of sum.</p>"},{"location":"week-5-c/ce103-week-5-c/#c-break-and-continue","title":"C break and continue","text":"<p>We learned about loops in previous tutorials. In this tutorial, we will learn to use break and continue statements with the help of examples.</p>"},{"location":"week-5-c/ce103-week-5-c/#c-break","title":"C break","text":"<p>The break statement ends the loop immediately when it is encountered. Its syntax is:</p> <pre><code>break;\n</code></pre> <p>The break statement is almost always used with <code>if...else</code> statement inside the loop.</p> <p>How break statement works?</p> <p></p>"},{"location":"week-5-c/ce103-week-5-c/#example-1-break-statement","title":"Example 1: break statement","text":"<pre><code>// Program to calculate the sum of numbers (10 numbers max)\n// If the user enters a negative number, the loop terminates\n#include &lt;stdio.h&gt;\nint main() {\nint i;\ndouble number, sum = 0.0;\nfor (i = 1; i &lt;= 10; ++i) {\nprintf(\"Enter n%d: \", i);\nscanf(\"%lf\", &amp;number);\n// if the user enters a negative number, break the loop\nif (number &lt; 0.0) {\nbreak;\n}\nsum += number; // sum = sum + number;\n}\nprintf(\"Sum = %.2lf\", sum);\nreturn 0;\n}\n</code></pre> <p>Output</p> <pre><code>Enter n1: 2.4\nEnter n2: 4.5\nEnter n3: 3.4\nEnter n4: -3\nSum = 10.30\n</code></pre> <p>This program calculates the sum of a maximum of 10 numbers. Why a maximum of 10 numbers? It's because if the user enters a negative number, the <code>break</code> statement is executed. This will end the <code>for</code> loop, and the sum is displayed.</p> <p>In C, <code>break</code> is also used with the <code>switch</code> statement. This will be discussed in the next tutorial.</p>"},{"location":"week-5-c/ce103-week-5-c/#c-continue","title":"C continue","text":"<p>The <code>continue</code> statement skips the current iteration of the loop and continues with the next iteration. Its syntax is:</p> <pre><code>continue;\n</code></pre> <p>The <code>continue</code> statement is almost always used with the <code>if...else</code> statement.</p> <p>How continue statement works?</p> <p></p>"},{"location":"week-5-c/ce103-week-5-c/#example-2-continue-statement","title":"Example 2: continue statement","text":"<pre><code>// Program to calculate the sum of numbers (10 numbers max)\n// If the user enters a negative number, it's not added to the result\n#include &lt;stdio.h&gt;\nint main() {\nint i;\ndouble number, sum = 0.0;\nfor (i = 1; i &lt;= 10; ++i) {\nprintf(\"Enter a n%d: \", i);\nscanf(\"%lf\", &amp;number);\nif (number &lt; 0.0) {\ncontinue;\n}\nsum += number; // sum = sum + number;\n}\nprintf(\"Sum = %.2lf\", sum);\nreturn 0;\n}\n</code></pre> <p>Output</p> <pre><code>Enter n1: 1.1\nEnter n2: 2.2\nEnter n3: 5.5\nEnter n4: 4.4\nEnter n5: -3.4\nEnter n6: -45.5\nEnter n7: 34.5\nEnter n8: -4.2\nEnter n9: -1000\nEnter n10: 12\nSum = 59.70\n</code></pre> <p>In this program, when the user enters a positive number, the sum is calculated using <code>sum += number;</code> statement.</p> <p>When the user enters a negative number, the <code>continue</code> statement is executed and it skips the negative number from the calculation.</p>"},{"location":"week-5-c/ce103-week-5-c/#c-switch-statement","title":"C switch Statement","text":"<p>In this tutorial, you will learn to create the switch statement in C programming with the help of an example.</p> <p>The switch statement allows us to execute one code block among many alternatives.</p> <p>You can do the same thing with the <code>if...else..if</code> ladder. However, the syntax of the <code>switch</code> statement is much easier to read and write.</p>"},{"location":"week-5-c/ce103-week-5-c/#syntax-of-switchcase","title":"Syntax of switch...case","text":"<pre><code>switch (expression)\n{\ncase constant1:\n// statements\nbreak;\ncase constant2:\n// statements\nbreak;\n.\n.\n.\ndefault:\n// default statements\n}\n</code></pre>"},{"location":"week-5-c/ce103-week-5-c/#how-does-the-switch-statement-work","title":"How does the switch statement work?","text":"<p>The expression is evaluated once and compared with the values of each case label.</p> <ul> <li>If there is a match, the corresponding statements after the matching label are executed. For example, if the value of the expression is equal to constant2, statements after <code>case constant2:</code> are executed until <code>break</code> is encountered.</li> <li>If there is no match, the default statements are executed.</li> </ul> <p>If we do not use <code>break</code>, all statements after the matching label are executed.</p> <p>By the way, the <code>default</code> clause inside the <code>switch</code> statement is optional.</p> <p>How does the switch statement work?</p> <p></p>"},{"location":"week-5-c/ce103-week-5-c/#example-simple-calculator","title":"Example: Simple Calculator","text":"<pre><code>// Program to create a simple calculator\n#include &lt;stdio.h&gt;\nint main() {\nchar operator;\ndouble n1, n2;\nprintf(\"Enter an operator (+, -, *, /): \");\nscanf(\"%c\", &amp;operator);\nprintf(\"Enter two operands: \");\nscanf(\"%lf %lf\",&amp;n1, &amp;n2);\nswitch(operator)\n{\ncase '+':\nprintf(\"%.1lf + %.1lf = %.1lf\",n1, n2, n1+n2);\nbreak;\ncase '-':\nprintf(\"%.1lf - %.1lf = %.1lf\",n1, n2, n1-n2);\nbreak;\ncase '*':\nprintf(\"%.1lf * %.1lf = %.1lf\",n1, n2, n1*n2);\nbreak;\ncase '/':\nprintf(\"%.1lf / %.1lf = %.1lf\",n1, n2, n1/n2);\nbreak;\n// operator doesn't match any case constant +, -, *, /\ndefault:\nprintf(\"Error! operator is not correct\");\n}\nreturn 0;\n}\n</code></pre> <p>Output</p> <pre><code>Enter an operator (+, -, *,): -\nEnter two operands: 32.5\n12.4\n32.5 - 12.4 = 20.1\n</code></pre> <p>The - operator entered by the user is stored in the operator variable. And, two operands 32.5 and 12.4 are stored in variables n1 and n2 respectively.</p> <p>Since the operator is <code>-</code>, the control of the program jumps to</p> <pre><code>printf(\"%.1lf - %.1lf = %.1lf\", n1, n2, n1-n2);\n</code></pre> <p>Finally, the break statement terminates the switch statement.</p>"},{"location":"week-5-c/ce103-week-5-c/#c-goto-statement","title":"C goto Statement","text":"<p>In this tutorial, you will learn to create the goto statement in C programming. Also, you will learn when to use a goto statement and when not to use it.</p> <p>The <code>goto</code> statement allows us to transfer control of the program to the specified label.</p>"},{"location":"week-5-c/ce103-week-5-c/#syntax-of-goto-statement","title":"Syntax of goto Statement","text":"<pre><code>goto label;\n... .. ...\n... .. ...\nlabel: statement;\n</code></pre> <p>The label is an identifier. When the <code>goto</code> statement is encountered, the control of the program jumps to <code>label:</code> and starts executing the code.</p> <p>How goto statement work?</p> <p></p>"},{"location":"week-5-c/ce103-week-5-c/#example-goto-statement","title":"Example: goto Statement","text":"<pre><code>// Program to calculate the sum and average of positive numbers\n// If the user enters a negative number, the sum and average are displayed.\n#include &lt;stdio.h&gt;\nint main() {\nconst int maxInput = 100;\nint i;\ndouble number, average, sum = 0.0;\nfor (i = 1; i &lt;= maxInput; ++i) {\nprintf(\"%d. Enter a number: \", i);\nscanf(\"%lf\", &amp;number);\n// go to jump if the user enters a negative number\nif (number &lt; 0.0) {\ngoto jump;\n}\nsum += number;\n}\njump:\naverage = sum / (i - 1);\nprintf(\"Sum = %.2f\\n\", sum);\nprintf(\"Average = %.2f\", average);\nreturn 0;\n}\n</code></pre> <p>Output</p> <pre><code>1. Enter a number: 3\n2. Enter a number: 4.3\n3. Enter a number: 9.3\n4. Enter a number: -2.9\nSum = 16.60\nAverage = 5.53\n</code></pre>"},{"location":"week-5-c/ce103-week-5-c/#reasons-to-avoid-goto","title":"Reasons to avoid goto","text":"<p>The use of <code>goto</code> statement may lead to code that is buggy and hard to follow. For example,</p> <pre><code>one:\nfor (i = 0; i &lt; number; ++i)\n{\ntest += i;\ngoto two;\n}\ntwo: if (test &gt; 5) {\ngoto three;\n}\n... .. ...\n</code></pre> <p>Also, the <code>goto</code> statement allows you to do bad stuff such as jump out of the scope.</p> <p>That being said, <code>goto</code> can be useful sometimes. For example: to break from nested loops.</p>"},{"location":"week-5-c/ce103-week-5-c/#should-you-use-goto","title":"Should you use goto?","text":"<p>If you think the use of <code>goto</code> statement simplifies your program, you can use it. That being said, <code>goto</code> is rarely useful and you can create any C program without using <code>goto</code> altogether.</p> <p>Here's a quote from Bjarne Stroustrup, creator of C++, \"The fact that 'goto' can do anything is exactly why we don't use it.\"</p> <p>https://www.programiz.com/c-programming/c-decision-making-loops-examples</p>"},{"location":"week-5-c/ce103-week-5-c/#c-functions","title":"C Functions","text":"<p>In this tutorial, you will be introduced to functions (both user-defined and standard library functions) in C programming. Also, you will learn why functions are used in programming.</p> <p>A function is a block of code that performs a specific task.</p> <p>Suppose, you need to create a program to create a circle and color it. You can create two functions to solve this problem:</p> <ul> <li>create a circle function</li> <li>create a color function</li> </ul> <p>Dividing a complex problem into smaller chunks makes our program easy to understand and reuse.</p>"},{"location":"week-5-c/ce103-week-5-c/#types-of-function","title":"Types of function","text":"<p>There are two types of function in C programming:</p> <ul> <li>Standard library functions</li> <li>User-defined functions</li> </ul>"},{"location":"week-5-c/ce103-week-5-c/#standard-library-functions","title":"Standard library functions","text":"<p>The standard library functions are built-in functions in C programming.</p> <p>These functions are defined in header files.\u00a0For example,</p> <ul> <li>The\u00a0<code>printf()</code>\u00a0is a standard library function to send formatted output to the screen (display output on the screen). This function is defined in the\u00a0<code>stdio.h</code>\u00a0header file.   Hence, to use the\u00a0<code>printf()</code>function, we need to include the\u00a0<code>stdio.h</code>\u00a0header file using\u00a0<code>#include &lt;stdio.h&gt;</code>.</li> <li>The\u00a0<code>sqrt()</code>\u00a0function calculates the square root of a number. The function is defined in the\u00a0<code>math.h</code>\u00a0header file.\u00a0\u00a0</li> </ul> <p>Visit\u00a0standard library functions in C programming\u00a0to learn more.</p>"},{"location":"week-5-c/ce103-week-5-c/#user-defined-function","title":"User-defined function","text":"<p>You can also create functions as per your need. Such functions created by the user are known as user-defined functions.</p>"},{"location":"week-5-c/ce103-week-5-c/#how-user-defined-function-works","title":"How user-defined function works?","text":"<pre><code>#include &lt;stdio.h&gt;\nvoid functionName()\n{\n... .. ...\n... .. ...\n}\nint main()\n{\n... .. ...\n... .. ...\nfunctionName();\n... .. ...\n... .. ...\n}\n</code></pre> <p>The execution of a C program begins from the\u00a0<code>main()</code>\u00a0function.</p> <p>When the compiler encounters\u00a0<code>functionName();</code>, control of the program jumps to</p> <pre><code> void functionName()\n</code></pre> <p>And, the compiler starts executing the codes inside\u00a0<code>functionName()</code>.</p> <p>The control of the program jumps back to the\u00a0<code>main()</code>\u00a0function\u00a0once code\u00a0inside the function definition is executed.</p> <p>How functions are work in C?</p> <p></p> <p>Working of C Function</p> <p>Note, function names are identifiers and should be unique.</p> <p>This is just an overview of user-defined functions. Visit these pages to learn more on:</p> <ul> <li>User-defined Function in C programming</li> <li>Types of user-defined Functions</li> </ul>"},{"location":"week-5-c/ce103-week-5-c/#advantages-of-user-defined-function","title":"Advantages of user-defined function","text":"<ol> <li>The program will be easier to understand, maintain and debug.</li> <li>Reusable codes that can be used in other programs</li> <li>A large program can be divided into smaller modules. Hence, a large project can be divided among many programmers.</li> </ol>"},{"location":"week-5-c/ce103-week-5-c/#c-user-defined-functions","title":"C User-defined functions","text":"<p>In this tutorial, you will learn to create user-defined functions in C programming with the help of an example.</p> <p>A function is a block of code that performs a specific task.</p> <p>C allows you to define functions according to your need. These functions are known as user-defined functions. For example:</p> <p>Suppose, you need to create a circle and color it depending upon the radius and color. You can create two functions to solve this problem:</p> <ul> <li><code>createCircle()</code>\u00a0function</li> <li><code>color()</code>\u00a0function</li> </ul>"},{"location":"week-5-c/ce103-week-5-c/#example-user-defined-function","title":"Example: User-defined function","text":"<p>Here is an example to add two integers. To perform this task, we have created an user-defined\u00a0<code>addNumbers()</code>.</p> <pre><code>#include &lt;stdio.h&gt;\nint addNumbers(int a, int b);         // function prototype\nint main()\n{\nint n1,n2,sum;\nprintf(\"Enters two numbers: \");\nscanf(\"%d %d\",&amp;n1,&amp;n2);\nsum = addNumbers(n1, n2);        // function call\nprintf(\"sum = %d\",sum);\nreturn 0;\n}\nint addNumbers(int a, int b)         // function definition   \n{\nint result;\nresult = a+b;\nreturn result;                  // return statement\n}\n</code></pre>"},{"location":"week-5-c/ce103-week-5-c/#function-prototype","title":"Function prototype","text":"<p>A function prototype is simply the declaration of a function that specifies function's name, parameters and return type. It doesn't contain function body.</p> <p>A function prototype gives information to the compiler that the function may later be used in the program.</p>"},{"location":"week-5-c/ce103-week-5-c/#syntax-of-function-prototype","title":"Syntax of function prototype","text":"<p>returnType functionName(type1 argument1, type2 argument2, ...);</p> <p>In the above example,\u00a0<code>int addNumbers(int a, int b);</code>\u00a0is the function prototype which provides the following information to the compiler:</p> <ol> <li>name of the function is\u00a0<code>addNumbers()</code></li> <li>return type of the function is\u00a0<code>int</code></li> <li>two arguments of type\u00a0<code>int</code>\u00a0are passed to the function</li> </ol> <p>The function prototype is not needed if the user-defined function is defined before the\u00a0<code>main()</code>\u00a0function.</p>"},{"location":"week-5-c/ce103-week-5-c/#calling-a-function","title":"Calling a function","text":"<p>Control of the program is transferred to the user-defined function by calling it.</p>"},{"location":"week-5-c/ce103-week-5-c/#syntax-of-function-call","title":"Syntax of function call","text":"<p>functionName(argument1, argument2, ...);</p> <p>In the above example, the function call is made using\u00a0<code>addNumbers(n1, n2);</code>\u00a0statement inside the\u00a0<code>main()</code>\u00a0function.</p>"},{"location":"week-5-c/ce103-week-5-c/#function-definition","title":"Function definition","text":"<p>Function definition contains the block of code to perform a specific task. In our example, adding two numbers and returning it.</p>"},{"location":"week-5-c/ce103-week-5-c/#syntax-of-function-definition","title":"Syntax of function definition","text":"<pre><code>returnType functionName(type1 argument1, type2 argument2, ...)\n{\n//body of the function\n}\n</code></pre> <p>When a function is called, the control of the program is transferred to the function definition. And, the compiler starts executing the codes inside the body of a function.</p>"},{"location":"week-5-c/ce103-week-5-c/#passing-arguments-to-a-function","title":"Passing arguments to a function","text":"<p>In programming, argument refers to the variable passed to the function. In the above example, two variables\u00a0n1\u00a0and\u00a0n2\u00a0are passed during the function call.</p> <p>The parameters\u00a0a\u00a0and\u00a0b\u00a0accepts the passed arguments in the function definition. These arguments are called formal parameters of the function.</p> <p>How arguments passed to a function in C?</p> <p></p> <p>Passing Argument to Function</p> <p>The type of arguments passed to a function and the formal parameters must match, otherwise, the compiler will throw an error.</p> <p>If\u00a0n1\u00a0is of char type,\u00a0a\u00a0also should be of char type. If\u00a0n2\u00a0is of float type, variable\u00a0b\u00a0also should be of float type.</p> <p>A function can also be called without passing an argument.</p>"},{"location":"week-5-c/ce103-week-5-c/#return-statement","title":"Return Statement","text":"<p>The return statement terminates the execution of a function and returns a value to the calling function. The program control is transferred to the calling function after the return statement.</p> <p>In the above example, the value of the\u00a0result\u00a0variable is returned to the main function. The\u00a0sum\u00a0variable in the\u00a0<code>main()</code>\u00a0function is assigned this value.</p> <p>How return statement work?</p> <p></p>"},{"location":"week-5-c/ce103-week-5-c/#syntax-of-return-statement","title":"Syntax of return statement","text":"<pre><code>return (expression);     </code></pre> <p>For example,</p> <pre><code>return a;\nreturn (a+b);\n</code></pre> <p>The type of value returned from the function and the return type specified in the function prototype and function definition must match.</p> <p>Visit this page to learn more on\u00a0passing arguments and returning value from a function.</p>"},{"location":"week-5-c/ce103-week-5-c/#types-of-user-defined-functions-in-c-programming","title":"Types of User-defined Functions in C Programming","text":"<p>In this tutorial, you will learn about different approaches you can take to solve the same problem using functions.</p> <p>These 4 programs below check whether the integer entered by the user is a prime number or not.</p> <p>The output of all these programs below is the same, and we have created a user-defined function in each example. However, the approach we have taken in each example is different.</p>"},{"location":"week-5-c/ce103-week-5-c/#example-1-no-argument-passed-and-no-return-value","title":"Example 1: No Argument Passed and No Return Value","text":"<pre><code>#include &lt;stdio.h&gt;\nvoid checkPrimeNumber();\nint main() {\ncheckPrimeNumber();    // argument is not passed\nreturn 0;\n}\n// return type is void meaning doesn't return any value\nvoid checkPrimeNumber() {\nint n, i, flag = 0;\nprintf(\"Enter a positive integer: \");\nscanf(\"%d\",&amp;n);\n// 0 and 1 are not prime numbers    \nif (n == 0 || n == 1)\nflag = 1;\nfor(i = 2; i &lt;= n/2; ++i) {\nif(n%i == 0) {\nflag = 1;\nbreak;\n}\n}\nif (flag == 1)\nprintf(\"%d is not a prime number.\", n);\nelse\nprintf(\"%d is a prime number.\", n);\n}\n</code></pre> <p>Run Code</p> <p>The\u00a0<code>checkPrimeNumber()</code>\u00a0function takes input from the user, checks whether it is a prime number or not, and displays it on the screen.</p> <p>The empty parentheses in\u00a0<code>checkPrimeNumber();</code>\u00a0inside the\u00a0<code>main()</code>\u00a0function indicates that no argument is passed to the function.</p> <p>The return type of the function is\u00a0<code>void</code>. Hence, no value is returned from the function.</p>"},{"location":"week-5-c/ce103-week-5-c/#example-2-no-arguments-passed-but-returns-a-value","title":"Example 2: No Arguments Passed But\u00a0Returns a Value","text":"<pre><code>#include &lt;stdio.h&gt;\nint getInteger();\nint main() {\nint n, i, flag = 0;\n// no argument is passed\nn = getInteger();    // 0 and 1 are not prime numbers    \nif (n == 0 || n == 1)\nflag = 1;\nfor(i = 2; i &lt;= n/2; ++i) {\nif(n%i == 0){\nflag = 1;\nbreak;\n}\n}\nif (flag == 1)\nprintf(\"%d is not a prime number.\", n);\nelse\nprintf(\"%d is a prime number.\", n);\nreturn 0;\n}\n// returns integer entered by the user\nint getInteger() {\nint n;\nprintf(\"Enter a positive integer: \");\nscanf(\"%d\",&amp;n);\nreturn n;\n}\n</code></pre> <p>Run Code</p> <p>The empty parentheses in the\u00a0<code>n = getInteger();</code>\u00a0statement indicates that no argument is passed to the function. And, the value returned from the function is assigned to\u00a0n.</p> <p>Here, the\u00a0<code>getInteger()</code>\u00a0function takes input from the user and returns it. The code to check whether a number is prime or not is inside the\u00a0<code>main()</code>\u00a0function.</p>"},{"location":"week-5-c/ce103-week-5-c/#example-3-argument-passed-but-no-return-value","title":"Example 3: Argument Passed But No Return Value","text":"<pre><code>#include &lt;stdio.h&gt;\nvoid checkPrimeAndDisplay(int n);\nint main() {\nint n;\nprintf(\"Enter a positive integer: \");\nscanf(\"%d\",&amp;n);\n// n is passed to the function\ncheckPrimeAndDisplay(n);\nreturn 0;\n}\n// return type is void meaning doesn't return any value\nvoid checkPrimeAndDisplay(int n) {\nint i, flag = 0;\n// 0 and 1 are not prime numbers    \nif (n == 0 || n == 1)\nflag = 1;\nfor(i = 2; i &lt;= n/2; ++i) {\nif(n%i == 0){\nflag = 1;\nbreak;\n}\n}\nif(flag == 1)\nprintf(\"%d is not a prime number.\",n);\nelse\nprintf(\"%d is a prime number.\", n);\n}\n</code></pre> <p>Run Code</p> <p>The integer value entered by the user is passed to the\u00a0<code>checkPrimeAndDisplay()</code>\u00a0function.</p> <p>Here, the\u00a0<code>checkPrimeAndDisplay()</code>\u00a0function checks whether the argument passed is a prime number or not and displays the appropriate message.</p>"},{"location":"week-5-c/ce103-week-5-c/#example-4-argument-passed-and-returns-a-value","title":"Example 4: Argument Passed and Returns a Value","text":"<pre><code>#include &lt;stdio.h&gt;\nint checkPrimeNumber(int n);\nint main() {\nint n, flag;\nprintf(\"Enter a positive integer: \");\nscanf(\"%d\",&amp;n);\n// n is passed to the checkPrimeNumber() function\n// the returned value is assigned to the flag variable\nflag = checkPrimeNumber(n);\nif(flag == 1)\nprintf(\"%d is not a prime number\",n);\nelse\nprintf(\"%d is a prime number\",n);\nreturn 0;\n}\n// int is returned from the function\nint checkPrimeNumber(int n) {\n// 0 and 1 are not prime numbers    \nif (n == 0 || n == 1)\nreturn 1;\nint i;\nfor(i=2; i &lt;= n/2; ++i) {\nif(n%i == 0)\nreturn 1;\n}\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>The input from the user is passed to the\u00a0<code>checkPrimeNumber()</code>\u00a0function.</p> <p>The\u00a0<code>checkPrimeNumber()</code>\u00a0function checks whether the passed argument is prime or not.</p> <p>If the passed argument is a prime number, the function returns\u00a00. If the passed argument is a non-prime number, the function returns\u00a01. The return value is assigned to the\u00a0flag\u00a0variable.</p> <p>Depending on whether\u00a0flag\u00a0is\u00a00\u00a0or\u00a01, an appropriate message is printed from the\u00a0<code>main()</code>\u00a0function.</p>"},{"location":"week-5-c/ce103-week-5-c/#which-approach-is-better","title":"Which approach is better?","text":"<p>Well, it depends on the problem you are trying to solve. In this case, passing an argument and returning a value from the function (example 4) is better.</p> <p>A function should perform a specific task. The\u00a0<code>checkPrimeNumber()</code>\u00a0function doesn't take input from the user nor it displays the appropriate message. It only checks whether a number is prime or not.</p>"},{"location":"week-5-c/ce103-week-5-c/#c-recursion","title":"C Recursion","text":"<p>In this tutorial, you will learn to write recursive functions in C programming with the help of an example.</p> <p>A function that calls itself is known as a recursive function. And, this technique is known as recursion.</p>"},{"location":"week-5-c/ce103-week-5-c/#how-recursion-works","title":"How recursion works?","text":"<pre><code>void recurse()\n{\n... .. ...\nrecurse();\n... .. ...\n}\nint main()\n{\n... .. ...\nrecurse();\n... .. ...\n}\n</code></pre> <p>How recursion works ?</p> <p></p> <p>Working of Recursion</p> <p>The recursion continues until some condition is met to prevent it.</p> <p>To prevent infinite recursion,\u00a0if...else statement\u00a0(or similar approach) can be used where one branch makes the recursive call, and other doesn't.</p>"},{"location":"week-5-c/ce103-week-5-c/#example-sum-of-natural-numbers-using-recursion","title":"Example: Sum of Natural Numbers Using Recursion","text":"<pre><code>#include &lt;stdio.h&gt;\nint sum(int n);\nint main() {\nint number, result;\nprintf(\"Enter a positive integer: \");\nscanf(\"%d\", &amp;number);\nresult = sum(number);\nprintf(\"sum = %d\", result);\nreturn 0;\n}\nint sum(int n) {\nif (n != 0)\n// sum() function calls itself\nreturn n + sum(n-1); else\nreturn n;\n}\n</code></pre> <p>Output</p> <pre><code>Enter a positive integer:3\nsum = 6\n</code></pre> <p>Initially, the\u00a0<code>sum()</code>\u00a0is called from the\u00a0<code>main()</code>\u00a0function with\u00a0number\u00a0passed as an argument.</p> <p>Suppose, the value of\u00a0n\u00a0inside\u00a0<code>sum()</code>\u00a0is 3 initially. During the next function call, 2 is passed to the\u00a0<code>sum()</code>\u00a0function. This process continues until\u00a0n\u00a0is equal to 0.</p> <p>When\u00a0n\u00a0is equal to 0, the\u00a0<code>if</code>\u00a0condition fails and the\u00a0<code>else</code>\u00a0part is executed returning the sum of integers ultimately to the\u00a0<code>main()</code>\u00a0function.</p>"},{"location":"week-5-c/ce103-week-5-c/#sum-of-natural-numbers","title":"Sum of Natural Numbers","text":""},{"location":"week-5-c/ce103-week-5-c/#advantages-and-disadvantages-of-recursion","title":"Advantages and Disadvantages of Recursion","text":"<p>Recursion makes program elegant. However, if performance is vital, use loops instead as recursion is usually much slower.</p> <p>That being said, recursion is an important concept. It is frequently used in\u00a0data structure and algorithms. For example, it is common to use recursion in problems such as tree traversal.</p>"},{"location":"week-5-c/ce103-week-5-c/#c-storage-class","title":"C Storage Class","text":"<p>In this tutorial, you will learn about scope and lifetime of local and global variables. Also, you will learn about static and register variables.</p> <p>Every variable in C programming has two properties: type and storage class.</p> <p>Type refers to the data type of a variable. And, storage class determines the scope, visibility and lifetime of a variable.</p> <p>There are 4 types of storage class:</p> <ol> <li>automatic</li> <li>external</li> <li>static</li> <li>register</li> </ol>"},{"location":"week-5-c/ce103-week-5-c/#local-variable","title":"Local Variable","text":"<p>The variables declared inside a block are automatic or local variables. The local variables exist only inside the block in which it is declared.</p> <p>Let's take an example.</p> <pre><code>#include &lt;stdio.h&gt;\nint main(void) {\nfor (int i = 0; i &lt; 5; ++i) {\nprintf(\"C programming\");\n}\n// Error: i is not declared at this point\nprintf(\"%d\", i);  return 0;\n}\n</code></pre> <p>Run Code</p> <p>When you run the above program, you will get an error\u00a0undeclared identifier i. It's because\u00a0i\u00a0is declared inside the\u00a0<code>for</code>\u00a0loop block. Outside of the block, it's undeclared.</p> <p>Let's take another example.</p> <pre><code>int main() {\nint n1; // n1 is a local variable to main()\n}\nvoid func() {\nint n2;  // n2 is a local variable to func()\n}\n</code></pre> <p>In the above example,\u00a0n1\u00a0is local to\u00a0<code>main()</code>\u00a0and\u00a0n2\u00a0is local to\u00a0<code>func()</code>.</p> <p>This means you cannot access the\u00a0n1\u00a0variable inside\u00a0<code>func()</code>\u00a0as it only exists inside\u00a0<code>main()</code>. Similarly, you cannot access the\u00a0n2\u00a0variable inside\u00a0<code>main()</code>\u00a0as it only exists inside\u00a0<code>func()</code>.</p>"},{"location":"week-5-c/ce103-week-5-c/#global-variable","title":"Global Variable","text":"<p>Variables that are declared outside of all functions are known as external or global variables. They are accessible from any function inside the program.</p>"},{"location":"week-5-c/ce103-week-5-c/#example-1-global-variable","title":"Example 1: Global Variable","text":"<pre><code>#include &lt;stdio.h&gt;\nvoid display();\nint n = 5;  // global variable\nint main()\n{\n++n;     display();\nreturn 0;\n}\nvoid display()\n{\n++n;   printf(\"n = %d\", n);\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>n = 7\n</code></pre> <p>Suppose, a global variable is declared in\u00a0<code>file1</code>. If you try to use that variable in a different file\u00a0<code>file2</code>, the compiler will complain. To solve this problem, keyword\u00a0<code>extern</code>\u00a0is used in\u00a0<code>file2</code>\u00a0to indicate that the external variable is declared in another file.</p>"},{"location":"week-5-c/ce103-week-5-c/#register-variable","title":"Register Variable","text":"<p>The\u00a0<code>register</code>\u00a0keyword is used to declare register variables. Register variables were supposed to be faster than local variables.</p> <p>However, modern compilers are very good at code optimization, and there is a rare chance that using register variables will make your program faster.</p> <p>Unless you are working on embedded systems where you know how to optimize code for the given application, there is no use of register variables.</p>"},{"location":"week-5-c/ce103-week-5-c/#static-variable","title":"Static Variable","text":"<p>A static variable is declared by using the\u00a0<code>static</code>\u00a0keyword. For example;</p> <p>static int i;</p> <p>The value of a static variable persists until the end of the program.</p>"},{"location":"week-5-c/ce103-week-5-c/#example-2-static-variable","title":"Example 2: Static Variable","text":"<pre><code>#include &lt;stdio.h&gt;\nvoid display();\nint main()\n{\ndisplay();\ndisplay();\n}\nvoid display()\n{\nstatic int c = 1;\nc += 5;\nprintf(\"%d  \",c);\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>6 11\n</code></pre> <p>During the first function call, the value of\u00a0c\u00a0is initialized to 1. Its value is increased by 5. Now, the value of\u00a0c\u00a0is 6, which is printed on the screen.</p> <p>During the second function call,\u00a0c\u00a0is not initialized to 1 again. It's because\u00a0c\u00a0is a static variable. The value\u00a0c\u00a0is increased by 5. Now, its value will be 11, which is printed on the screen.</p> <p>C Function Examples</p>"},{"location":"week-5-c/ce103-week-5-c/#c-arrays","title":"C Arrays","text":"<p>In this tutorial, you will learn to work with arrays. You will learn to declare, initialize and access elements of an array with the help of examples.</p> <p>C Arrays </p> <p></p> <p>Arrays in C</p> <p>An array is a variable that can store multiple values. For example, if you want to store 100 integers, you can create an array for it.</p> <pre><code>int data[100];\n</code></pre>"},{"location":"week-5-c/ce103-week-5-c/#how-to-declare-an-array","title":"How to declare an array?","text":"<pre><code>dataType arrayName[arraySize];\n</code></pre> <p>For example,</p> <pre><code>float mark[5];\n</code></pre> <p>Here, we declared an array,\u00a0mark, of floating-point type. And its size is 5. Meaning, it can hold 5 floating-point values.</p> <p>It's important to note that\u00a0the size and type of an array cannot be changed once it is declared.</p>"},{"location":"week-5-c/ce103-week-5-c/#access-array-elements","title":"Access Array Elements","text":"<p>You can access elements of an array by indices.</p> <p>Suppose you declared an array\u00a0mark\u00a0as above. The first element is\u00a0mark[0], the second element is\u00a0mark[1]\u00a0and so on.</p>"},{"location":"week-5-c/ce103-week-5-c/#c-array-decleration","title":"C Array Decleration","text":""},{"location":"week-5-c/ce103-week-5-c/#declare-an-array","title":"Declare an Array","text":"<p>Few keynotes:</p> <ul> <li>Arrays have 0 as the first index, not 1. In this example,\u00a0mark[0]\u00a0is the first element.</li> <li>If the size of an array is\u00a0n, to access the last element, the\u00a0<code>n-1</code>\u00a0index is used. In this example,\u00a0mark[4]</li> <li>Suppose the starting address of\u00a0<code>mark[0]</code>\u00a0is\u00a02120d. Then, the address of the\u00a0<code>mark[1]</code>\u00a0will be\u00a02124d. Similarly, the address of\u00a0<code>mark[2]</code>\u00a0will be\u00a02128d\u00a0and so on.   This is because the size of a\u00a0<code>float</code>\u00a0is 4 bytes.</li> </ul>"},{"location":"week-5-c/ce103-week-5-c/#how-to-initialize-an-array","title":"How to initialize an array?","text":"<p>It is possible to initialize an array during declaration. For example,</p> <pre><code>int mark[5] = {19, 10, 8, 17, 9};\n</code></pre> <p>You can also initialize an array like this.</p> <pre><code>int mark[] = {19, 10, 8, 17, 9};\n</code></pre> <p>Here, we haven't specified the size. However, the compiler knows its size is 5 as we are initializing it with 5 elements.</p> <p>Initialize Array</p> <p></p> <p>Initialize an Array</p> <p>Here,</p> <pre><code>mark[0] is equal to 19\nmark[1] is equal to 10\nmark[2] is equal to 8\nmark[3] is equal to 17\nmark[4] is equal to 9\n</code></pre>"},{"location":"week-5-c/ce103-week-5-c/#change-value-of-array-elements","title":"Change Value of Array elements","text":"<pre><code>int mark[5] = {19, 10, 8, 17, 9}\n// make the value of the third element to -1\nmark[2] = -1;\n// make the value of the fifth element to 0\nmark[4] = 0;\n</code></pre>"},{"location":"week-5-c/ce103-week-5-c/#input-and-output-array-elements","title":"Input and Output Array Elements","text":"<p>Here's how you can take input from the user and store it in an array element.</p> <pre><code>// take input and store it in the 3rd element\n\u200bscanf(\"%d\", &amp;mark[2]);\n// take input and store it in the ith element\nscanf(\"%d\", &amp;mark[i-1]);\n</code></pre> <p>Here's how you can print an individual element of an array.</p> <pre><code>// print the first element of the array\nprintf(\"%d\", mark[0]);\n// print the third element of the array\nprintf(\"%d\", mark[2]);\n// print ith element of the array\nprintf(\"%d\", mark[i-1]);\n</code></pre>"},{"location":"week-5-c/ce103-week-5-c/#example-1-array-inputoutput","title":"Example 1: Array Input/Output","text":"<pre><code>// Program to take 5 values from the user and store them in an array\n// Print the elements stored in the array\n#include &lt;stdio.h&gt;\nint main() {\nint values[5];\nprintf(\"Enter 5 integers: \");\n// taking input and storing it in an array\nfor(int i = 0; i &lt; 5; ++i) {\nscanf(\"%d\", &amp;values[i]);\n}\nprintf(\"Displaying integers: \");\n// printing elements of an array\nfor(int i = 0; i &lt; 5; ++i) {\nprintf(\"%d\\n\", values[i]);\n}\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>Enter 5 integers: 1\n-3\n34\n0\n3\nDisplaying integers: 1\n-3\n34\n0\n3\n</code></pre> <p>Here, we have used a\u00a0<code>for</code>\u00a0loop to take 5 inputs from the user and store them in an array. Then, using another\u00a0<code>for</code>\u00a0loop, these elements are displayed on the screen.</p>"},{"location":"week-5-c/ce103-week-5-c/#example-2-calculate-average","title":"Example 2: Calculate Average","text":"<pre><code>// Program to find the average of n numbers using arrays\n#include &lt;stdio.h&gt;\nint main() {\nint marks[10], i, n, sum = 0;\ndouble average;\nprintf(\"Enter number of elements: \");\nscanf(\"%d\", &amp;n);\nfor(i=0; i &lt; n; ++i) {\nprintf(\"Enter number%d: \",i+1);\nscanf(\"%d\", &amp;marks[i]);\n// adding integers entered by the user to the sum variable\nsum += marks[i];\n}\n// explicitly convert sum to double\n// then calculate average\naverage = (double) sum / n;\nprintf(\"Average = %.2lf\", average);\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>Enter number of elements: 5\nEnter number1: 45\nEnter number2: 35\nEnter number3: 38\nEnter number4: 31\nEnter number5: 49\nAverage = 39.60\n</code></pre> <p>Here, we have computed the average of\u00a0n\u00a0numbers entered by the user.</p>"},{"location":"week-5-c/ce103-week-5-c/#access-elements-out-of-its-bound","title":"Access elements out of its bound!","text":"<p>Suppose you declared an array of 10 elements. Let's say,</p> <pre><code>int testArray[10];\n</code></pre> <p>You can access the array elements from\u00a0<code>testArray[0]</code>\u00a0to\u00a0<code>testArray[9]</code>.</p> <p>Now let's say if you try to access\u00a0<code>testArray[12]</code>. The element is not available. This may cause unexpected output (undefined behavior). Sometimes you might get an error and some other time your program may run correctly.</p> <p>Hence, you should never access elements of an array outside of its bound.</p>"},{"location":"week-5-c/ce103-week-5-c/#multidimensional-arrays","title":"Multidimensional arrays","text":"<p>In this tutorial, you learned about arrays. These arrays are called one-dimensional arrays.</p> <p>In the next tutorial, you will learn about\u00a0multidimensional arrays (array of an array).</p>"},{"location":"week-5-c/ce103-week-5-c/#c-multidimensional-arrays","title":"C Multidimensional Arrays","text":"<p>In this tutorial, you will learn to work with multidimensional arrays (two-dimensional and three-dimensional arrays) with the help of examples.</p> <p>In C programming, you can create an array of arrays. These arrays are known as multidimensional arrays. For example,</p> <pre><code>float x[3][4];\n</code></pre> <p>Here,\u00a0x\u00a0is a two-dimensional (2d) array. The array can hold 12 elements. You can think the array as a table with 3 rows and each row has 4 columns.</p> <p>Two dimensional array</p> <p></p> <p>Two dimensional Array</p> <p>Similarly, you can declare a three-dimensional (3d) array. For example,</p> <pre><code>float y[2][4][3];\n</code></pre> <p>Here, the array\u00a0y\u00a0can hold 24 elements.</p>"},{"location":"week-5-c/ce103-week-5-c/#initializing-a-multidimensional-array","title":"Initializing a multidimensional array","text":"<p>Here is how you can initialize two-dimensional and three-dimensional arrays:</p>"},{"location":"week-5-c/ce103-week-5-c/#initialization-of-a-2d-array","title":"Initialization of a 2d array","text":"<pre><code>// Different ways to initialize two-dimensional array\nint c[2][3] = {{1, 3, 0}, {-1, 5, 9}};\nint c[][3] = {{1, 3, 0}, {-1, 5, 9}};\nint c[2][3] = {1, 3, 0, -1, 5, 9};\n</code></pre>"},{"location":"week-5-c/ce103-week-5-c/#initialization-of-a-3d-array","title":"Initialization of a 3d array","text":"<p>You can initialize a three-dimensional array in a similar way to a two-dimensional array. Here's an example,</p> <pre><code>int test[2][3][4] = {\n{{3, 4, 2, 3}, {0, -3, 9, 11}, {23, 12, 23, 2}},\n{{13, 4, 56, 3}, {5, 9, 3, 5}, {3, 1, 4, 9}}};\n</code></pre>"},{"location":"week-5-c/ce103-week-5-c/#example-1-two-dimensional-array-to-store-and-print-values","title":"Example 1: Two-dimensional array to store and print values","text":"<pre><code>// C program to store temperature of two cities of a week and display it.\n#include &lt;stdio.h&gt;\nconst int CITY = 2;\nconst int WEEK = 7;\nint main()\n{\nint temperature[CITY][WEEK];\n// Using nested loop to store values in a 2d array\nfor (int i = 0; i &lt; CITY; ++i)\n{\nfor (int j = 0; j &lt; WEEK; ++j)\n{\nprintf(\"City %d, Day %d: \", i + 1, j + 1);\nscanf(\"%d\", &amp;temperature[i][j]);\n}\n}\nprintf(\"\\nDisplaying values: \\n\\n\");\n// Using nested loop to display vlues of a 2d array\nfor (int i = 0; i &lt; CITY; ++i)\n{\nfor (int j = 0; j &lt; WEEK; ++j)\n{\nprintf(\"City %d, Day %d = %d\\n\", i + 1, j + 1, temperature[i][j]);\n}\n}\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>City 1, Day 1: 33\nCity 1, Day 2: 34\nCity 1, Day 3: 35\nCity 1, Day 4: 33\nCity 1, Day 5: 32\nCity 1, Day 6: 31\nCity 1, Day 7: 30\nCity 2, Day 1: 23\nCity 2, Day 2: 22\nCity 2, Day 3: 21\nCity 2, Day 4: 24\nCity 2, Day 5: 22\nCity 2, Day 6: 25\nCity 2, Day 7: 26\nDisplaying values: City 1, Day 1 = 33\nCity 1, Day 2 = 34\nCity 1, Day 3 = 35\nCity 1, Day 4 = 33\nCity 1, Day 5 = 32\nCity 1, Day 6 = 31\nCity 1, Day 7 = 30\nCity 2, Day 1 = 23\nCity 2, Day 2 = 22\nCity 2, Day 3 = 21\nCity 2, Day 4 = 24\nCity 2, Day 5 = 22\nCity 2, Day 6 = 25\nCity 2, Day 7 = 26\n</code></pre>"},{"location":"week-5-c/ce103-week-5-c/#example-2-sum-of-two-matrices","title":"Example 2: Sum of two matrices","text":"<pre><code>// C program to find the sum of two matrices of order 2*2\n#include &lt;stdio.h&gt;\nint main()\n{\nfloat a[2][2], b[2][2], result[2][2];\n// Taking input using nested for loop\nprintf(\"Enter elements of 1st matrix\\n\");\nfor (int i = 0; i &lt; 2; ++i)\nfor (int j = 0; j &lt; 2; ++j)\n{\nprintf(\"Enter a%d%d: \", i + 1, j + 1);\nscanf(\"%f\", &amp;a[i][j]);\n}\n// Taking input using nested for loop\nprintf(\"Enter elements of 2nd matrix\\n\");\nfor (int i = 0; i &lt; 2; ++i)\nfor (int j = 0; j &lt; 2; ++j)\n{\nprintf(\"Enter b%d%d: \", i + 1, j + 1);\nscanf(\"%f\", &amp;b[i][j]);\n}\n// adding corresponding elements of two arrays\nfor (int i = 0; i &lt; 2; ++i)\nfor (int j = 0; j &lt; 2; ++j)\n{\nresult[i][j] = a[i][j] + b[i][j];\n}\n// Displaying the sum\nprintf(\"\\nSum Of Matrix:\");\nfor (int i = 0; i &lt; 2; ++i)\nfor (int j = 0; j &lt; 2; ++j)\n{\nprintf(\"%.1f\\t\", result[i][j]);\nif (j == 1)\nprintf(\"\\n\");\n}\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>Enter elements of 1st matrix\nEnter a11: 2;\nEnter a12: 0.5;\nEnter a21: -1.1;\nEnter a22: 2;\nEnter elements of 2nd matrix\nEnter b11: 0.2;\nEnter b12: 0;\nEnter b21: 0.23;\nEnter b22: 23;\nSum Of Matrix:\n2.2     0.5\n-0.9    25.0\n</code></pre>"},{"location":"week-5-c/ce103-week-5-c/#example-3-three-dimensional-array","title":"Example 3: Three-dimensional array","text":"<pre><code>// C Program to store and print 12 values entered by the user\n#include &lt;stdio.h&gt;\nint main()\n{\nint test[2][3][2];\nprintf(\"Enter 12 values: \\n\");\nfor (int i = 0; i &lt; 2; ++i)\n{\nfor (int j = 0; j &lt; 3; ++j)\n{\nfor (int k = 0; k &lt; 2; ++k)\n{\nscanf(\"%d\", &amp;test[i][j][k]);\n}\n}\n}\n// Printing values with the proper index.\nprintf(\"\\nDisplaying values:\\n\");\nfor (int i = 0; i &lt; 2; ++i)\n{\nfor (int j = 0; j &lt; 3; ++j)\n{\nfor (int k = 0; k &lt; 2; ++k)\n{\nprintf(\"test[%d][%d][%d] = %d\\n\", i, j, k, test[i][j][k]);\n}\n}\n}\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>Enter 12 values: 1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\nDisplaying Values:\ntest[0][0][0] = 1\ntest[0][0][1] = 2\ntest[0][1][0] = 3\ntest[0][1][1] = 4\ntest[0][2][0] = 5\ntest[0][2][1] = 6\ntest[1][0][0] = 7\ntest[1][0][1] = 8\ntest[1][1][0] = 9\ntest[1][1][1] = 10\ntest[1][2][0] = 11\ntest[1][2][1] = 12\n</code></pre>"},{"location":"week-5-c/ce103-week-5-c/#pass-arrays-to-a-function-in-c","title":"Pass arrays to a function in C","text":"<p>In this tutorial, you'll learn to pass arrays (both one-dimensional and multidimensional arrays) to a function in C programming with the help of examples.</p> <p>In C programming, you can pass an entire array to functions. Before we learn that, let's see how you can pass individual elements of an array to functions.</p>"},{"location":"week-5-c/ce103-week-5-c/#pass-individual-array-elements","title":"Pass\u00a0Individual Array Elements","text":"<p>Passing array elements to a function is similar to\u00a0passing variables to a function.</p>"},{"location":"week-5-c/ce103-week-5-c/#example-1-pass-individual-array-elements","title":"Example 1: Pass\u00a0Individual\u00a0Array Elements","text":"<pre><code>#include &lt;stdio.h&gt;\nvoid display(int age1, int age2) {\nprintf(\"%d\\n\", age1);\nprintf(\"%d\\n\", age2);\n}\nint main() {\nint ageArray[] = {2, 8, 4, 12};\n// pass second and third elements to display()\ndisplay(ageArray[1], ageArray[2]); return 0;\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>8\n4\n</code></pre> <p>Here, we have passed array parameters to the\u00a0<code>display()</code>\u00a0function in the same way we pass variables to a function.</p> <pre><code>// pass second and third elements to display()\ndisplay(ageArray[1], ageArray[2]);\n</code></pre> <p>We can see this in the function definition, where the function parameters are individual variables:</p> <pre><code>void display(int age1, int age2) {\n// code\n}\n</code></pre>"},{"location":"week-5-c/ce103-week-5-c/#example-2-pass-arrays-to-functions","title":"Example 2: Pass\u00a0Arrays to Functions","text":"<pre><code>// Program to calculate the sum of array elements by passing to a function \n#include &lt;stdio.h&gt;\nfloat calculateSum(float num[]);\nint main() {\nfloat result, num[] = {23.4, 55, 22.6, 3, 40.5, 18};\n// num array is passed to calculateSum()\nresult = calculateSum(num); printf(\"Result = %.2f\", result);\nreturn 0;\n}\nfloat calculateSum(float num[]) {\nfloat sum = 0.0;\nfor (int i = 0; i &lt; 6; ++i) {\nsum += num[i];\n}\nreturn sum;\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>Result = 162.50\n</code></pre> <p>To pass an entire array to a function, only the name of the array is passed as an argument.</p> <pre><code>result = calculateSum(num);\n</code></pre> <p>However, notice the use of\u00a0<code>[]</code>\u00a0in the function definition.</p> <pre><code>float calculateSum(float num[]) {\n... ..\n}\n</code></pre> <p>This informs the compiler that you are passing a one-dimensional array to the function.</p>"},{"location":"week-5-c/ce103-week-5-c/#pass-multidimensional-arrays-to-a-function","title":"Pass\u00a0Multidimensional Arrays to a Function","text":"<p>To pass multidimensional arrays to a function, only the name of the array is passed to the function (similar to one-dimensional arrays).</p>"},{"location":"week-5-c/ce103-week-5-c/#example-3-pass-two-dimensional-arrays","title":"Example 3: Pass\u00a0two-dimensional arrays","text":"<pre><code>#include &lt;stdio.h&gt;\nvoid displayNumbers(int num[2][2]);\nint main() {\nint num[2][2];\nprintf(\"Enter 4 numbers:\\n\");\nfor (int i = 0; i &lt; 2; ++i) {\nfor (int j = 0; j &lt; 2; ++j) {\nscanf(\"%d\", &amp;num[i][j]);\n}\n}\n// pass multi-dimensional array to a function\ndisplayNumbers(num);\nreturn 0;\n}\nvoid displayNumbers(int num[2][2]) {\nprintf(\"Displaying:\\n\");\nfor (int i = 0; i &lt; 2; ++i) {\nfor (int j = 0; j &lt; 2; ++j) {\nprintf(\"%d\\n\", num[i][j]);\n}\n}\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>Enter 4 numbers:\n2\n3\n4\n5\nDisplaying:\n2\n3\n4\n5\n</code></pre> <p>Notice the parameter\u00a0<code>int num[2][2]</code>\u00a0in the function prototype and function definition:</p> <pre><code>// function prototype\nvoid displayNumbers(int num[2][2]);\n</code></pre> <p>This signifies that the function takes a two-dimensional array as an argument. We can also pass arrays with more than 2 dimensions as a function argument.</p> <p>When passing two-dimensional arrays, it is not mandatory to specify the number of rows in the array. However, the number of columns should always be specified.</p> <p>For example,</p> <pre><code>void displayNumbers(int num[][2]) {\n// code\n}\n</code></pre> <p>Recommended Reading: Call by Reference in C</p>"},{"location":"week-5-c/ce103-week-5-c/#c-pointers","title":"C Pointers","text":"<p>In this tutorial, you'll learn about pointers; what pointers are, how do you use them and the common mistakes you might face when working with them with the help of examples.</p> <p>Pointers are powerful features of C and C++ programming. Before we learn pointers, let's learn about addresses in C programming.</p>"},{"location":"week-5-c/ce103-week-5-c/#address-in-c","title":"Address in C","text":"<p>If you have a variable\u00a0var\u00a0in your program,\u00a0<code>&amp;var</code>\u00a0will give you its address in the memory.</p> <p>We have used address numerous times while using the\u00a0<code>scanf()</code>\u00a0function.</p> <pre><code>scanf(\"%d\", &amp;var);\n</code></pre> <p>Here, the value entered by the user is stored in the address of\u00a0var\u00a0variable. Let's take a working example.</p> <pre><code>#include &lt;stdio.h&gt;\nint main()\n{\nint var = 5;\nprintf(\"var: %d\\n\", var);\n// Notice the use of &amp; before var\nprintf(\"address of var: %p\", &amp;var);  return 0;\n}\n</code></pre> <p>Output</p> <pre><code>var: 5 address of var: 2686778\n</code></pre> <p>Note:\u00a0You will probably get a different address when you run the above code.</p>"},{"location":"week-5-c/ce103-week-5-c/#c-pointers_1","title":"C Pointers","text":"<p>Pointers (pointer variables) are special variables that are used to store addresses rather than values.</p>"},{"location":"week-5-c/ce103-week-5-c/#pointer-syntax","title":"Pointer Syntax","text":"<p>Here is how we can declare pointers.</p> <pre><code>int* p;\n</code></pre> <p>Here, we have declared a pointer\u00a0p\u00a0of\u00a0<code>int</code>\u00a0type.</p> <p>You can also declare pointers in these ways.</p> <pre><code>int *p1;\nint * p2;\n</code></pre> <p>Let's take another example of declaring pointers.</p> <pre><code>int* p1, p2;\n</code></pre> <p>Here, we have declared a pointer\u00a0p1\u00a0and a normal variable\u00a0p2.</p>"},{"location":"week-5-c/ce103-week-5-c/#assigning-addresses-to-pointers","title":"Assigning addresses to Pointers","text":"<p>Let's take an example.</p> <pre><code>int* pc, c;\nc = 5;\npc = &amp;c;\n</code></pre> <p>Here, 5 is assigned to the\u00a0c\u00a0variable. And, the address of\u00a0c\u00a0is assigned to the\u00a0pc\u00a0pointer.</p>"},{"location":"week-5-c/ce103-week-5-c/#get-value-of-thing-pointed-by-pointers","title":"Get Value of Thing Pointed by Pointers","text":"<p>To get the value of the thing pointed by the pointers, we use the\u00a0<code>*</code>\u00a0operator. For example:</p> <pre><code>int* pc, c;\nc = 5;\npc = &amp;c;\nprintf(\"%d\", *pc);   // Output: 5\n</code></pre> <p>Here, the address of\u00a0<code>c</code>\u00a0is assigned to the\u00a0pc\u00a0pointer. To get the value stored in that address, we used\u00a0*pc.</p> <p>Note:\u00a0In the above example,\u00a0pc\u00a0is a pointer, not\u00a0<code>*pc</code>. You cannot and should not do something like\u00a0<code>*pc = &amp;c</code>;</p> <p>By the way,\u00a0<code>*</code>\u00a0is called the dereference operator (when working with pointers). It operates on a pointer and gives the value stored in that pointer.</p>"},{"location":"week-5-c/ce103-week-5-c/#changing-value-pointed-by-pointers","title":"Changing Value Pointed by Pointers","text":"<p>Let's take an example.</p> <pre><code>int* pc, c;\nc = 5;\npc = &amp;c;\nc = 1;\nprintf(\"%d\", c);    // Output: 1\nprintf(\"%d\", *pc);  // Ouptut: 1\n</code></pre> <p>We have assigned the address of\u00a0c\u00a0to the\u00a0pc\u00a0pointer.</p> <p>Then, we changed the value of\u00a0c\u00a0to 1. Since\u00a0pc\u00a0and the address of\u00a0c\u00a0is the same,\u00a0<code>*pc</code>\u00a0gives us 1.</p> <p>Let's take another example.</p> <pre><code>int* pc, c;\nc = 5;\npc = &amp;c;\n*pc = 1;\nprintf(\"%d\", *pc);  // Ouptut: 1\nprintf(\"%d\", c);    // Output: 1\n</code></pre> <p>We have assigned the address of\u00a0c\u00a0to the\u00a0pc\u00a0pointer.</p> <p>Then, we changed\u00a0<code>*pc</code>\u00a0to 1 using\u00a0<code>*pc = 1;</code>. Since\u00a0pc\u00a0and the address of\u00a0c\u00a0is the same,\u00a0c\u00a0will be equal to 1.</p> <p>Let's take one more example.</p> <pre><code>int* pc, c, d;\nc = 5;\nd = -15;\npc = &amp;c; printf(\"%d\", *pc); // Output: 5\npc = &amp;d; printf(\"%d\", *pc); // Ouptut: -15\n</code></pre> <p>Initially, the address of\u00a0c\u00a0is assigned to the\u00a0pc\u00a0pointer using\u00a0<code>pc = &amp;c;</code>. Since\u00a0c\u00a0is 5,\u00a0<code>*pc</code>\u00a0gives us 5.</p> <p>Then, the address of\u00a0d\u00a0is assigned to the\u00a0pc\u00a0pointer using\u00a0<code>pc = &amp;d;</code>. Since\u00a0d\u00a0is -15,\u00a0<code>*pc</code>\u00a0gives us -15.</p>"},{"location":"week-5-c/ce103-week-5-c/#example-working-of-pointers","title":"Example: Working of Pointers","text":"<p>Let's take a working example.</p> <pre><code>#include &lt;stdio.h&gt;\nint main()\n{\nint* pc, c;\nc = 22;\nprintf(\"Address of c: %p\\n\", &amp;c);\nprintf(\"Value of c: %d\\n\\n\", c);  // 22\npc = &amp;c;\nprintf(\"Address of pointer pc: %p\\n\", pc);\nprintf(\"Content of pointer pc: %d\\n\\n\", *pc); // 22\nc = 11;\nprintf(\"Address of pointer pc: %p\\n\", pc);\nprintf(\"Content of pointer pc: %d\\n\\n\", *pc); // 11\n*pc = 2;\nprintf(\"Address of c: %p\\n\", &amp;c);\nprintf(\"Value of c: %d\\n\\n\", c); // 2\nreturn 0;\n}\n</code></pre> <p>Output</p> <pre><code>Address of c: 2686784\nValue of c: 22\nAddress of pointer pc: 2686784\nContent of pointer pc: 22\nAddress of pointer pc: 2686784\nContent of pointer pc: 11\nAddress of c: 2686784\nValue of c: 2\n</code></pre> <p>Explanation of the program</p> <ol> <li><code>int* pc, c;</code> </li> </ol> <p></p> <p>Here, a pointer\u00a0pc\u00a0and a normal variable\u00a0c, both of type\u00a0<code>int</code>, is created.   Since\u00a0pc\u00a0and\u00a0c\u00a0are not initialized at initially, pointer\u00a0pc\u00a0points to either no address or a random address. And, variable\u00a0c\u00a0has an address but contains random garbage value.</p> <p>2. <code>c = 22;</code> </p> <p></p> <p>This assigns 22 to the variable\u00a0c. That is, 22 is stored in the memory location of variable\u00a0c.  </p> <ol> <li><code>pc = &amp;c;</code> </li> </ol> <p></p> <p>This assigns the address of variable\u00a0c\u00a0to the pointer\u00a0pc.  </p> <ol> <li><code>c = 11;</code> </li> </ol> <p></p> <p>This assigns 11 to variable\u00a0c.  </p> <ol> <li><code>*pc = 2;</code> </li> </ol> <p></p> <p>This change the value at the memory location pointed by the pointer\u00a0pc\u00a0to 2.</p>"},{"location":"week-5-c/ce103-week-5-c/#common-mistakes-when-working-with-pointers","title":"Common mistakes when working with pointers","text":"<p>Suppose, you want pointer\u00a0pc\u00a0to point to the address of\u00a0c. Then,</p> <pre><code>int c, *pc;\n// pc is address but c is not\npc = c;  // Error\n// &amp;c is address but *pc is not\n*pc = &amp;c;  // Error\n// both &amp;c and pc are addresses\npc = &amp;c;  // Not an error\n// both c and *pc are values \n*pc = c;  // Not an error\n</code></pre> <p>Here's an example of pointer syntax beginners often find confusing.</p> <pre><code>#include &lt;stdio.h&gt;\nint main() {\nint c = 5;\nint *p = &amp;c;\nprintf(\"%d\", *p);  // 5\nreturn 0; }\n</code></pre> <p>Why didn't we get an error when using\u00a0<code>int\u00a0*p = &amp;c;</code>?</p> <p>It's because</p> <pre><code>int *p = &amp;c;\n</code></pre> <p>is equivalent to</p> <pre><code>int *p:\np = &amp;c;\n</code></pre> <p>In both cases, we are creating a pointer\u00a0<code>p</code>\u00a0(not\u00a0<code>*p</code>) and assigning\u00a0<code>&amp;c</code>\u00a0to it.</p> <p>To avoid this confusion, we can use the statement like this:</p> <pre><code>int* p = &amp;c;\n</code></pre> <p>Now you know what pointers are, you will learn how pointers are related to arrays in the next tutorial.</p>"},{"location":"week-5-c/ce103-week-5-c/#relationship-between-arrays-and-pointers","title":"Relationship Between Arrays and Pointers","text":"<p>In this tutorial, you'll learn about the relationship between arrays and pointers in C programming. You will also learn to access array elements using pointers.</p> <p>Before you learn about the relationship between arrays and pointers, be sure to check these two topics:</p> <ul> <li>C Arrays</li> <li>C Pointers</li> </ul>"},{"location":"week-5-c/ce103-week-5-c/#relationship-between-arrays-and-pointers_1","title":"Relationship Between Arrays and Pointers","text":"<p>An array is a block of sequential data. Let's write a program to print addresses of array elements.</p> <pre><code>#include &lt;stdio.h&gt;\nint main() {\nint x[4];\nint i;\nfor(i = 0; i &lt; 4; ++i) {\nprintf(\"&amp;x[%d] = %p\\n\", i, &amp;x[i]);\n}\nprintf(\"Address of array x: %p\", x);\nreturn 0;\n}\n</code></pre> <p>Output</p> <pre><code>&amp;x[0] = 1450734448\n&amp;x[1] = 1450734452\n&amp;x[2] = 1450734456\n&amp;x[3] = 1450734460\nAddress of array x: 1450734448\n``` ---\n\nThere is a difference of 4 bytes between two consecutive elements of array\u00a0x. It is because the size of\u00a0`int`\u00a0is 4 bytes (on our compiler).\n\nNotice that, the address of\u00a0&amp;x[0]\u00a0and\u00a0x\u00a0is the same. It's because the variable name\u00a0x\u00a0points to the first element of the array.\n\n---\n\n### Arrays as Pointers\n![center height:300px](https://cdn.programiz.com/sites/tutorial2program/files/array-pointers.jpg)\n---\n\nRelation between Arrays and Pointers\n\nFrom the above example, it is clear that\u00a0`&amp;x[0]`\u00a0is equivalent to\u00a0x. And,\u00a0`x[0]`\u00a0is equivalent to\u00a0`*x`.\n\n---\n\nSimilarly,\n\n- `&amp;x[1]`\u00a0is equivalent to\u00a0`x+1`\u00a0and\u00a0`x[1]`\u00a0is equivalent to\u00a0`*(x+1)`.\n- `&amp;x[2]`\u00a0is equivalent to\u00a0`x+2`\u00a0and\u00a0`x[2]`\u00a0is equivalent to\u00a0`*(x+2)`.\n- ...\n- Basically,\u00a0`&amp;x[i]`\u00a0is equivalent to\u00a0`x+i`\u00a0and\u00a0`x[i]`\u00a0is equivalent to\u00a0`*(x+i)`.\n\n---\n\n### Example 1: Pointers and Arrays\n``` c\n#include &lt;stdio.h&gt;\nint main() {\nint i, x[6], sum = 0;\nprintf(\"Enter 6 numbers: \");\nfor(i = 0; i &lt; 6; ++i) {\n// Equivalent to scanf(\"%d\", &amp;x[i]);\nscanf(\"%d\", x+i);\n// Equivalent to sum += x[i]\nsum += *(x+i);\n}\nprintf(\"Sum = %d\", sum);\nreturn 0;\n}\n</code></pre> <p>When you run the program, the output will be:</p> <pre><code>Enter 6 numbers: 2\n3\n4\n4\n12\n4\nSum = 29\n</code></pre> <p>Here, we have declared an array\u00a0x\u00a0of 6 elements. To access elements of the array, we have used pointers.</p> <p>In most contexts, array names decay to pointers. In simple words, array names are converted to pointers. That's the reason why you can use pointers to access elements of arrays. However, you should remember that\u00a0pointers and arrays are not the same.</p> <p>There are a few cases where array names don't decay to pointers. To learn more, visit:\u00a0When does array name doesn't decay into a pointer?</p>"},{"location":"week-5-c/ce103-week-5-c/#example-2-arrays-and-pointers","title":"Example 2: Arrays and Pointers","text":"<pre><code>#include &lt;stdio.h&gt;\nint main() {\nint x[5] = {1, 2, 3, 4, 5};\nint* ptr;\n// ptr is assigned the address of the third element\nptr = &amp;x[2]; printf(\"*ptr = %d \\n\", *ptr);   // 3\nprintf(\"*(ptr+1) = %d \\n\", *(ptr+1)); // 4\nprintf(\"*(ptr-1) = %d\", *(ptr-1));  // 2\nreturn 0;\n}\n</code></pre> <p>When you run the program, the output will be:</p> <pre><code>*ptr = 3 *(ptr+1) = 4 *(ptr-1) = 2\n</code></pre> <p>In this example,\u00a0<code>&amp;x[2]</code>, the address of the third element, is assigned to the\u00a0ptr\u00a0pointer. Hence,\u00a0<code>3</code>\u00a0was displayed when we printed\u00a0<code>*ptr</code>.</p> <p>And, printing\u00a0<code>*(ptr+1)</code>\u00a0gives us the fourth element. Similarly, printing\u00a0<code>*(ptr-1)</code>\u00a0gives us the second element.</p>"},{"location":"week-5-c/ce103-week-5-c/#c-pass-addresses-and-pointers","title":"C Pass Addresses and Pointers","text":"<p>In this tutorial, you'll learn to pass addresses and pointers as arguments to functions with the help of examples.</p> <p>In C programming, it is also possible to pass addresses as arguments to functions.</p> <p>To accept these addresses in the function definition, we can use pointers. It's because pointers are used to store addresses. Let's take an example:</p>"},{"location":"week-5-c/ce103-week-5-c/#example-pass-addresses-to-functions","title":"Example: Pass Addresses to Functions","text":"<pre><code>#include &lt;stdio.h&gt;\nvoid swap(int *n1, int *n2);\nint main()\n{\nint num1 = 5, num2 = 10;\n// address of num1 and num2 is passed\nswap( &amp;num1, &amp;num2);\nprintf(\"num1 = %d\\n\", num1);\nprintf(\"num2 = %d\", num2);\nreturn 0;\n}\nvoid swap(int* n1, int* n2)\n{\nint temp;\ntemp = *n1;\n*n1 = *n2;\n*n2 = temp;\n}\n</code></pre> <p>Run Code</p> <p>When you run the program, the output will be:</p> <pre><code>num1 = 10\nnum2 = 5\n</code></pre> <p>The address of\u00a0num1\u00a0and\u00a0num2\u00a0are passed to the\u00a0<code>swap()</code>\u00a0function using\u00a0<code>swap(&amp;num1, &amp;num2);</code>.</p> <p>Pointers\u00a0n1\u00a0and\u00a0n2\u00a0accept these arguments in the function definition.</p> <pre><code>void swap(int* n1, int* n2) {\n... ..\n}\n</code></pre> <p>When\u00a0*n1\u00a0and\u00a0*n2\u00a0are changed inside the\u00a0<code>swap()</code>\u00a0function,\u00a0num1\u00a0and\u00a0num2\u00a0inside the\u00a0main()\u00a0function are also changed.</p> <p>Inside the\u00a0<code>swap()</code>\u00a0function,\u00a0<code>*n1</code>\u00a0and\u00a0<code>*n2</code>\u00a0swapped. Hence,\u00a0num1\u00a0and\u00a0num2\u00a0are also swapped.</p> <p>Notice that\u00a0<code>swap()</code>\u00a0is not returning anything; its return type is\u00a0<code>void</code>.</p>"},{"location":"week-5-c/ce103-week-5-c/#example-2-passing-pointers-to-functions","title":"Example 2: Passing Pointers to Functions","text":"<pre><code>#include &lt;stdio.h&gt;\nvoid addOne(int* ptr) {\n(*ptr)++; // adding 1 to *ptr\n}\nint main()\n{\nint* p, i = 10;\np = &amp;i;\naddOne(p);\nprintf(\"%d\", *p); // 11\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Here, the value stored at\u00a0p,\u00a0<code>*p</code>, is 10 initially.</p> <p>We then passed the pointer\u00a0p\u00a0to the\u00a0<code>addOne()</code>\u00a0function. The\u00a0ptr\u00a0pointer gets this address in the\u00a0<code>addOne()</code>\u00a0function.</p> <p>Inside the function, we increased the value stored at\u00a0ptr\u00a0by 1 using\u00a0<code>(*ptr)++;</code>. Since\u00a0ptr\u00a0and\u00a0p\u00a0pointers both have the same address,\u00a0<code>*p</code>\u00a0inside\u00a0<code>main()</code>\u00a0is also 11.</p>"},{"location":"week-5-c/ce103-week-5-c/#c-dynamic-memory-allocation","title":"C Dynamic Memory Allocation","text":"<p>In this tutorial, you'll learn to dynamically allocate memory in your C program using standard library functions: malloc(), calloc(), free() and realloc().</p> <p>As you know, an array is a collection of a fixed number of values. Once the size of an array is declared, you cannot change it.</p> <p>Sometimes the size of the array you declared may be insufficient. To solve this issue, you can allocate memory manually during run-time. This is known as dynamic memory allocation in C programming.</p> <p>To allocate memory dynamically, library functions are\u00a0<code>malloc()</code>,\u00a0<code>calloc()</code>,\u00a0<code>realloc()</code>\u00a0and\u00a0<code>free()</code>\u00a0are used. These functions are defined in the\u00a0<code>&lt;stdlib.h&gt;</code>\u00a0header file.</p>"},{"location":"week-5-c/ce103-week-5-c/#c-malloc","title":"C malloc()","text":"<p>The name \"malloc\" stands for memory allocation.</p> <p>The\u00a0<code>malloc()</code>\u00a0function reserves a block of memory of the specified number of bytes. And, it returns a\u00a0pointer\u00a0of\u00a0<code>void</code>\u00a0which can be casted into pointers of any form.</p>"},{"location":"week-5-c/ce103-week-5-c/#syntax-of-malloc","title":"Syntax of malloc()","text":"<pre><code>ptr = (castType*) malloc(size);\n</code></pre> <p>Example</p> <pre><code>ptr = (float*) malloc(100 * sizeof(float));\n</code></pre> <p>The above statement allocates 400 bytes of memory. It's because the size of\u00a0<code>float</code>\u00a0is 4 bytes. And, the pointer\u00a0ptr\u00a0holds the address of the first byte in the allocated memory.</p> <p>The expression results in a\u00a0<code>NULL</code>\u00a0pointer if the memory cannot be allocated.</p>"},{"location":"week-5-c/ce103-week-5-c/#c-calloc","title":"C calloc()","text":"<p>The name \"calloc\" stands for contiguous allocation.</p> <p>The\u00a0<code>malloc()</code>\u00a0function allocates memory and leaves the memory uninitialized, whereas the\u00a0<code>calloc()</code>\u00a0function allocates memory and initializes all bits to zero.</p>"},{"location":"week-5-c/ce103-week-5-c/#syntax-of-calloc","title":"Syntax of calloc()","text":"<pre><code>ptr = (castType*)calloc(n, size);\n</code></pre> <p>Example:</p> <pre><code>ptr = (float*) calloc(25, sizeof(float));\n</code></pre> <p>The above statement allocates contiguous space in memory for 25 elements of type\u00a0<code>float</code>.</p>"},{"location":"week-5-c/ce103-week-5-c/#c-free","title":"C free()","text":"<p>Dynamically allocated memory created with either\u00a0<code>calloc()</code>\u00a0or\u00a0<code>malloc()</code>\u00a0doesn't get freed on their own. You must explicitly use\u00a0<code>free()</code>\u00a0to release the space.</p>"},{"location":"week-5-c/ce103-week-5-c/#syntax-of-free","title":"Syntax of free()","text":"<pre><code>free(ptr);\n</code></pre> <p>This statement frees the space allocated in the memory pointed by\u00a0<code>ptr</code>.</p>"},{"location":"week-5-c/ce103-week-5-c/#example-1-malloc-and-free","title":"Example 1: malloc() and free()","text":"<pre><code>// Program to calculate the sum of n numbers entered by the user\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\nint main() {\nint n, i, *ptr, sum = 0;\nprintf(\"Enter number of elements: \");\nscanf(\"%d\", &amp;n);\nptr = (int*) malloc(n * sizeof(int));\n// if memory cannot be allocated\nif(ptr == NULL) {\nprintf(\"Error! memory not allocated.\");\nexit(0);\n}\nprintf(\"Enter elements: \");\nfor(i = 0; i &lt; n; ++i) {\nscanf(\"%d\", ptr + i);\nsum += *(ptr + i);\n}\nprintf(\"Sum = %d\", sum);\n// deallocating the memory\nfree(ptr);\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>Enter number of elements: 3\nEnter elements: 100\n20\n36\nSum = 156\n</code></pre> <p>Here, we have dynamically allocated the memory for\u00a0n\u00a0number of\u00a0<code>int</code>.</p>"},{"location":"week-5-c/ce103-week-5-c/#example-2-calloc-and-free","title":"Example 2: calloc() and free()","text":"<pre><code>// Program to calculate the sum of n numbers entered by the user\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\nint main() {\nint n, i, *ptr, sum = 0;\nprintf(\"Enter number of elements: \");\nscanf(\"%d\", &amp;n);\nptr = (int*) calloc(n, sizeof(int));\nif(ptr == NULL) {\nprintf(\"Error! memory not allocated.\");\nexit(0);\n}\nprintf(\"Enter elements: \");\nfor(i = 0; i &lt; n; ++i) {\nscanf(\"%d\", ptr + i);\nsum += *(ptr + i);\n}\nprintf(\"Sum = %d\", sum);\nfree(ptr);\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>Enter number of elements: 3\nEnter elements: 100\n20\n36\nSum = 156\n</code></pre>"},{"location":"week-5-c/ce103-week-5-c/#c-realloc","title":"C realloc()","text":"<p>If the dynamically allocated memory is insufficient or more than required, you can change the size of previously allocated memory using the\u00a0<code>realloc()</code>\u00a0function.</p>"},{"location":"week-5-c/ce103-week-5-c/#syntax-of-realloc","title":"Syntax of realloc()","text":"<pre><code>ptr = realloc(ptr, x);\n</code></pre> <p>Here,\u00a0ptr\u00a0is reallocated with a new size\u00a0x.</p>"},{"location":"week-5-c/ce103-week-5-c/#example-3-realloc","title":"Example 3: realloc()","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\nint main() {\nint *ptr, i , n1, n2;\nprintf(\"Enter size: \");\nscanf(\"%d\", &amp;n1);\nptr = (int*) malloc(n1 * sizeof(int));\nprintf(\"Addresses of previously allocated memory:\\n\");\nfor(i = 0; i &lt; n1; ++i)\nprintf(\"%pc\\n\",ptr + i);\nprintf(\"\\nEnter the new size: \");\nscanf(\"%d\", &amp;n2);\n// rellocating the memory\nptr = realloc(ptr, n2 * sizeof(int));\nprintf(\"Addresses of newly allocated memory:\\n\");\nfor(i = 0; i &lt; n2; ++i)\nprintf(\"%pc\\n\", ptr + i);\nfree(ptr);\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>Enter size: 2\nAddresses of previously allocated memory:\n26855472\n26855476\nEnter the new size: 4\nAddresses of newly allocated memory:\n26855472\n26855476\n26855480\n26855484\n</code></pre> <p>C Array and Pointer Examples</p>"},{"location":"week-5-c/ce103-week-5-c/#c-programming-strings","title":"C Programming Strings","text":"<p>In this tutorial, you'll learn about strings in C programming. You'll learn to declare them, initialize them and use them for various I/O operations with the help of examples.</p> <p>In C programming, a string is a sequence of characters terminated with a null character\u00a0<code>\\0</code>. For example:</p> <pre><code>char c[] = \"c string\";\n</code></pre> <p>When the compiler encounters a sequence of characters enclosed in the double quotation marks, it appends a null character\u00a0<code>\\0</code>\u00a0at the end by default.</p>"},{"location":"week-5-c/ce103-week-5-c/#strings-in-memory-diagram","title":"Strings in memory diagram","text":""},{"location":"week-5-c/ce103-week-5-c/#how-to-declare-a-string","title":"How to declare a string?","text":"<p>Here's how you can declare strings:</p> <pre><code>char s[5];\n</code></pre> <p>String Declaration in C</p> <p></p> <p>Here, we have declared a string of 5 characters.</p>"},{"location":"week-5-c/ce103-week-5-c/#how-to-initialize-strings","title":"How to initialize strings?","text":"<p>You can initialize strings in a number of ways.</p> <pre><code>char c[] = \"abcd\";\nchar c[50] = \"abcd\";\nchar c[] = {'a', 'b', 'c', 'd', '\\0'};\nchar c[5] = {'a', 'b', 'c', 'd', '\\0'};\n</code></pre> <p>String Initialization in C</p> <p></p> <p>Let's take another example:</p> <pre><code>char c[5] = \"abcde\";\n</code></pre> <p>Here, we are trying to assign 6 characters (the last character is\u00a0<code>'\\0'</code>) to a\u00a0<code>char</code>\u00a0array having 5 characters. This is bad and you should never do this.</p>"},{"location":"week-5-c/ce103-week-5-c/#assigning-values-to-strings","title":"Assigning Values to Strings","text":"<p>Arrays and strings are second-class citizens in C; they do not support the assignment operator once it is declared. For example,</p> <pre><code>char c[100];\nc = \"C programming\";  // Error! array type is not assignable.\n</code></pre> <p>Note:\u00a0Use the\u00a0strcpy() function\u00a0to copy the string instead.</p>"},{"location":"week-5-c/ce103-week-5-c/#read-string-from-the-user","title":"Read String from the user","text":"<p>You can use the\u00a0<code>scanf()</code>\u00a0function to read a string.</p> <p>The\u00a0<code>scanf()</code>\u00a0function reads the sequence of characters until it encounters\u00a0whitespace\u00a0(space, newline, tab, etc.).</p>"},{"location":"week-5-c/ce103-week-5-c/#example-1-scanf-to-read-a-string","title":"Example 1: scanf() to read a string","text":"<pre><code>#include &lt;stdio.h&gt;\nint main()\n{\nchar name[20];\nprintf(\"Enter name: \");\nscanf(\"%s\", name);\nprintf(\"Your name is %s.\", name);\nreturn 0;\n}\n</code></pre> <p>Output</p> <pre><code>Enter name: Dennis Ritchie\nYour name is Dennis.\n</code></pre> <p>Even though\u00a0Dennis Ritchie\u00a0was entered in the above program, only\u00a0\"Dennis\"\u00a0was stored in the\u00a0name\u00a0string. It's because there was a space after\u00a0Dennis.</p> <p>Also notice that we have used the code\u00a0name\u00a0instead of\u00a0<code>&amp;name</code>\u00a0with\u00a0<code>scanf()</code>.</p> <pre><code>scanf(\"%s\", name);\n</code></pre> <p>This is because\u00a0name\u00a0is a\u00a0<code>char</code>\u00a0array, and we know that array names decay to pointers in C.</p> <p>Thus, the\u00a0name\u00a0in\u00a0<code>scanf()</code>\u00a0already points to the address of the first element in the string, which is why we don't need to use\u00a0<code>&amp;</code>.</p>"},{"location":"week-5-c/ce103-week-5-c/#how-to-read-a-line-of-text","title":"How to read a line of text?","text":"<p>You can use the\u00a0<code>fgets()</code>\u00a0function to read a line of string. And, you can use\u00a0<code>puts()</code>\u00a0to display the string.</p>"},{"location":"week-5-c/ce103-week-5-c/#example-2-fgets-and-puts","title":"Example 2: fgets() and puts()","text":"<pre><code>#include &lt;stdio.h&gt;\nint main()\n{\nchar name[30];\nprintf(\"Enter name: \");\nfgets(name, sizeof(name), stdin);  // read string\nprintf(\"Name: \");\nputs(name);    // display string\nreturn 0;\n}\n</code></pre> <p>Output</p> <pre><code>Enter name: Tom Hanks\nName: Tom Hanks\n</code></pre> <p>Here, we have used\u00a0<code>fgets()</code>\u00a0function to read a string from the user.</p> <p><code>fgets(name, sizeof(name), stdlin); // read string</code></p> <p>The\u00a0<code>sizeof(name)</code>\u00a0results to 30. Hence, we can take a maximum of 30 characters as input which is the size of the\u00a0name\u00a0string.</p> <p>To print the string, we have used\u00a0<code>puts(name);</code>.</p> <p>Note:\u00a0The\u00a0<code>gets()</code>\u00a0function can also be to take input from the user. However, it is removed from the C standard.  </p> <p>It's because\u00a0<code>gets()</code>\u00a0allows you to input any length of characters. Hence, there might be a buffer overflow.</p>"},{"location":"week-5-c/ce103-week-5-c/#passing-strings-to-functions","title":"Passing Strings to Functions","text":"<p>Strings can be passed to a function in a similar way as arrays. Learn more about\u00a0passing arrays to a function.</p>"},{"location":"week-5-c/ce103-week-5-c/#example-3-passing-string-to-a-function","title":"Example 3: Passing string to a Function","text":"<pre><code>#include &lt;stdio.h&gt;\nvoid displayString(char str[]);\nint main()\n{\nchar str[50];\nprintf(\"Enter string: \");\nfgets(str, sizeof(str), stdin);             displayString(str);     // Passing string to a function.    \nreturn 0;\n}\nvoid displayString(char str[])\n{\nprintf(\"String Output: \");\nputs(str);\n}\n</code></pre>"},{"location":"week-5-c/ce103-week-5-c/#strings-and-pointers","title":"Strings and Pointers","text":"<p>Similar like arrays, string names are \"decayed\" to pointers. Hence, you can use pointers to manipulate elements of the string. We recommended you to check\u00a0C Arrays and Pointers\u00a0before you check this example.</p>"},{"location":"week-5-c/ce103-week-5-c/#example-4-strings-and-pointers","title":"Example 4: Strings and Pointers","text":"<pre><code>#include &lt;stdio.h&gt;\nint main(void) {\nchar name[] = \"Harry Potter\";\nprintf(\"%c\", *name);     // Output: H\nprintf(\"%c\", *(name+1));   // Output: a\nprintf(\"%c\", *(name+7));   // Output: o\nchar *namePtr;\nnamePtr = name;\nprintf(\"%c\", *namePtr);     // Output: H\nprintf(\"%c\", *(namePtr+1));   // Output: a\nprintf(\"%c\", *(namePtr+7));   // Output: o\n}\n</code></pre>"},{"location":"week-5-c/ce103-week-5-c/#commonly-used-string-functions","title":"Commonly Used String Functions","text":"<ul> <li>strlen()\u00a0- calculates the length of a string</li> <li>strcpy()\u00a0- copies a string to another</li> <li>strcmp()\u00a0- compares two strings</li> <li>strcat()\u00a0- concatenates two strings</li> </ul>"},{"location":"week-5-c/ce103-week-5-c/#string-manipulations-in-c-programming-using-library-functions","title":"String Manipulations In C Programming Using Library Functions","text":"<p>In this article, you'll learn to manipulate strings in C using library functions such as gets(), puts, strlen() and more. You'll learn to get string from the user and perform operations on the string.</p> <p>You need to often manipulate\u00a0strings\u00a0according to the need of a problem. Most, if not all, of the time string manipulation can be done manually but, this makes programming complex and large.</p> <p>To solve this, C supports a large number of string handling functions in the\u00a0standard library <code>\"string.h\"</code>.</p> <p>Few commonly used string handling functions are discussed below:</p> Function Work of Function strlen() computes string's length strcpy() copies a string to another strcat() concatenates(joins) two strings strcmp() compares two strings strlwr() converts string to lowercase strupr() converts string to uppercase <p>Strings handling functions are defined under\u00a0<code>\"string.h\"</code>\u00a0header file.</p>"},{"location":"week-5-c/ce103-week-5-c/#include","title":"include","text":"<p>Note:\u00a0You have to include the code below to run string handling functions.</p>"},{"location":"week-5-c/ce103-week-5-c/#gets-and-puts","title":"gets() and puts()","text":"<p>Functions gets() and puts() are two string functions to take string input from the user and display it respectively as mentioned in the\u00a0previous chapter.</p> <pre><code>#include&lt;stdio.h&gt;\nint main()\n{\nchar name[30];\nprintf(\"Enter name: \");\ngets(name);     //Function to read string from user.\nprintf(\"Name: \");\nputs(name);    //Function to display string.\nreturn 0;\n}\n</code></pre> <p>Note:\u00a0Though,\u00a0<code>gets()</code>\u00a0and\u00a0<code>puts()</code>\u00a0function handle strings, both these functions are defined in\u00a0<code>\"stdio.h\"</code>\u00a0header file.</p> <p>String Examples in C Programming</p>"},{"location":"week-5-c/ce103-week-5-c/#c-struct","title":"C struct","text":"<p>In this tutorial, you'll learn about struct types in C Programming with the help of examples.</p> <p>In C programming, a struct (or structure) is a collection of variables (can be of different types) under a single name.</p>"},{"location":"week-5-c/ce103-week-5-c/#define-structures","title":"Define Structures","text":"<p>Before you can create structure variables, you need to define its data type. To define a struct, the\u00a0<code>struct</code>\u00a0keyword is used.</p>"},{"location":"week-5-c/ce103-week-5-c/#syntax-of-struct","title":"Syntax of struct","text":"<pre><code>struct structureName {\ndataType member1;\ndataType member2;\n...\n};\n</code></pre> <p>For example,</p> <pre><code>struct Person {\nchar name[50];\nint citNo;\nfloat salary;\n};\n</code></pre> <p>Here, a derived type\u00a0<code>struct Person</code>\u00a0is defined. Now, you can create variables of this type.</p>"},{"location":"week-5-c/ce103-week-5-c/#create-struct-variables","title":"Create struct Variables","text":"<p>When a\u00a0<code>struct</code>\u00a0type is declared, no storage or memory is allocated. To allocate memory of a given structure type and work with it, we need to create variables.</p> <p>Here's how we create structure variables:</p> <pre><code>struct Person {\n// code\n};\nint main() {\nstruct Person person1, person2, p[20];\nreturn 0;\n}\n</code></pre> <p>Another way of creating a\u00a0<code>struct</code>\u00a0variable is:</p> <pre><code>struct Person {\n// code\n} person1, person2, p[20];\n</code></pre> <p>In both cases,</p> <ul> <li>person1\u00a0and\u00a0person2\u00a0are\u00a0<code>struct Person</code>\u00a0variables</li> <li><code>p[]</code>\u00a0is a\u00a0<code>struct Person</code>\u00a0array of size 20.</li> </ul>"},{"location":"week-5-c/ce103-week-5-c/#access-members-of-a-structure","title":"Access Members of a Structure","text":"<p>There are two types of operators used for accessing members of a structure.</p> <ol> <li><code>.</code>\u00a0- Member operator</li> <li><code>-&gt;</code>\u00a0- Structure pointer operator (will be discussed in the next tutorial)</li> </ol> <p>Suppose, you want to access the\u00a0salary\u00a0of\u00a0person2. Here's how you can do it.</p> <pre><code>person2.salary\n</code></pre>"},{"location":"week-5-c/ce103-week-5-c/#example-1-c-structs","title":"Example 1: C structs","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n// create struct with person1 variable\nstruct Person {\nchar name[50];\nint citNo;\nfloat salary;\n} person1;\nint main() {\n// assign value to name of person1\nstrcpy(person1.name, \"George Orwell\");\n// assign values to other person1 variables\nperson1.citNo = 1984;\nperson1. salary = 2500;\n// print struct variables\nprintf(\"Name: %s\\n\", person1.name);\nprintf(\"Citizenship No.: %d\\n\", person1.citNo);\nprintf(\"Salary: %.2f\", person1.salary);\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>Name: George Orwell\nCitizenship No.: 1984\nSalary: 2500.00\n</code></pre> <p>In this program, we have created a\u00a0<code>struct</code>\u00a0named\u00a0<code>Person</code>. We have also created a variable of\u00a0<code>Person</code>\u00a0named\u00a0person1.</p> <p>In\u00a0<code>main()</code>, we have assigned values to the variables defined in\u00a0<code>Person</code>\u00a0for the\u00a0person1\u00a0object.</p> <pre><code>strcpy(person1.name, \"George Orwell\");\nperson1.citNo = 1984;\nperson1. salary = 2500;\n</code></pre> <p>Notice that we have used\u00a0<code>strcpy()</code>\u00a0function to assign the value to\u00a0person1.name.</p> <p>This is because\u00a0name\u00a0is a\u00a0<code>char</code>\u00a0array (C-string) and we cannot use the assignment operator\u00a0<code>=</code>\u00a0with it after we have declared the string.</p> <p>Finally, we printed the data of\u00a0person1.</p>"},{"location":"week-5-c/ce103-week-5-c/#keyword-typedef","title":"Keyword typedef","text":"<p>We use the\u00a0<code>typedef</code>\u00a0keyword to create an alias name for data types. It is commonly used with structures to simplify the syntax of declaring variables.</p> <p>For example, let us look at the following code:</p> <pre><code>struct Distance{\nint feet;\nfloat inch;\n};\nint main() {\nstruct Distance d1, d2;\n}\n</code></pre> <p>We can use\u00a0<code>typedef</code>\u00a0to write an equivalent code with a simplified syntax:</p> <pre><code>typedef struct Distance {\nint feet;\nfloat inch;\n} distances;\nint main() {\ndistances d1, d2;\n}\n</code></pre>"},{"location":"week-5-c/ce103-week-5-c/#example-2-c-typedef","title":"Example 2: C typedef","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n// struct with typedef person\ntypedef struct Person {\nchar name[50];\nint citNo;\nfloat salary;\n} person;\nint main() {\n// create  Person variable\nperson p1;\n// assign value to name of p1\nstrcpy(p1.name, \"George Orwell\");\n// assign values to other p1 variables\np1.citNo = 1984;\np1. salary = 2500;\n// print struct variables\nprintf(\"Name: %s\\n\", p1.name);\nprintf(\"Citizenship No.: %d\\n\", p1.citNo);\nprintf(\"Salary: %.2f\", p1.salary);\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>Name: George Orwell\nCitizenship No.: 1984\nSalary: 2500.00\n</code></pre> <p>Here, we have used\u00a0<code>typedef</code>\u00a0with the\u00a0<code>Person</code>\u00a0structure to create an alias\u00a0<code>person</code>.</p> <pre><code>// struct with typedef person\ntypedef struct Person {\n// code\n} person;\n</code></pre> <p>Now, we can simply declare a\u00a0<code>Person</code>\u00a0variable using the\u00a0<code>person</code>\u00a0alias:</p> <pre><code>// equivalent to struct Person p1\nperson p1;\n</code></pre>"},{"location":"week-5-c/ce103-week-5-c/#nested-structures","title":"Nested Structures","text":"<p>You can create structures within a structure in C programming. For example,</p> <pre><code>struct complex {\nint imag;\nfloat real;\n};\nstruct number {\nstruct complex comp;\nint integers;\n} num1, num2;\n</code></pre> <p>Suppose, you want to set\u00a0imag\u00a0of\u00a0num2\u00a0variable to\u00a011. Here's how you can do it:</p> <pre><code>num2.comp.imag = 11;\n</code></pre>"},{"location":"week-5-c/ce103-week-5-c/#example-3-c-nested-structures","title":"Example 3: C Nested Structures","text":"<pre><code>#include &lt;stdio.h&gt;\nstruct complex {\nint imag;\nfloat real;\n};\nstruct number {\nstruct complex comp;\nint integer;\n} num1;\nint main() {\n// initialize complex variables\nnum1.comp.imag = 11;\nnum1.comp.real = 5.25;\n// initialize number variable\nnum1.integer = 6;\n// print struct variables\nprintf(\"Imaginary Part: %d\\n\", num1.comp.imag);\nprintf(\"Real Part: %.2f\\n\", num1.comp.real);\nprintf(\"Integer: %d\", num1.integer);\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>Imaginary Part: 11\nReal Part: 5.25\nInteger: 6\n</code></pre>"},{"location":"week-5-c/ce103-week-5-c/#why-structs-in-c","title":"Why structs in C?","text":"<p>Suppose you want to store information about a person: his/her name, citizenship number, and salary. You can create different variables\u00a0name,\u00a0citNo\u00a0and\u00a0salary\u00a0to store this information.</p> <p>What if you need to store information of more than one person? Now, you need to create different variables for each information per person:\u00a0name1,\u00a0citNo1,\u00a0salary1,\u00a0name2,\u00a0citNo2,\u00a0salary2, etc.</p> <p>A better approach would be to have a collection of all related information under a single name\u00a0<code>Person</code>\u00a0structure and use it for every person.</p>"},{"location":"week-5-c/ce103-week-5-c/#more-on-struct","title":"More on struct","text":"<ul> <li>Structures and pointers</li> <li>Passing structures to a function</li> </ul>"},{"location":"week-5-c/ce103-week-5-c/#c-structs-and-pointers","title":"C structs and Pointers","text":"<p>In this tutorial, you'll learn to use pointers to access members of structs in C programming. You will also learn to dynamically allocate memory of struct types.</p> <p>Before you learn about how pointers can be used with structs, be sure to check these tutorials:</p> <ul> <li>C Pointers</li> <li>C struct</li> </ul>"},{"location":"week-5-c/ce103-week-5-c/#c-pointers-to-struct","title":"C Pointers to struct","text":"<p>Here's how you can create pointers to structs.</p> <pre><code>struct name {\nmember1;\nmember2;\n.\n.\n};\nint main()\n{\nstruct name *ptr, Harry;\n}\n</code></pre> <p>Here,\u00a0ptr\u00a0is a pointer to\u00a0<code>struct</code>.</p>"},{"location":"week-5-c/ce103-week-5-c/#example-access-members-using-pointer","title":"Example: Access members using Pointer","text":"<p>To access members of a structure using pointers, we use the\u00a0<code>-&gt;</code>\u00a0operator.</p> <pre><code>#include &lt;stdio.h&gt;\nstruct person\n{\nint age;\nfloat weight;\n};\nint main()\n{\nstruct person *personPtr, person1;\npersonPtr = &amp;person1;   printf(\"Enter age: \");\nscanf(\"%d\", &amp;personPtr-&gt;age);\nprintf(\"Enter weight: \");\nscanf(\"%f\", &amp;personPtr-&gt;weight);\nprintf(\"Displaying:\\n\");\nprintf(\"Age: %d\\n\", personPtr-&gt;age);\nprintf(\"weight: %f\", personPtr-&gt;weight);\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>In this example, the address of\u00a0person1\u00a0is stored in the\u00a0personPtr\u00a0pointer using\u00a0<code>personPtr = &amp;person1;</code>.</p> <p>Now, you can access the members of\u00a0person1\u00a0using the\u00a0<code>personPtr</code>\u00a0pointer.</p> <p>By the way,</p> <ul> <li><code>personPtr-&gt;age</code>\u00a0is equivalent to\u00a0<code>(*personPtr).age</code></li> <li><code>personPtr-&gt;weight</code>\u00a0is equivalent to\u00a0<code>(*personPtr).weight</code></li> </ul>"},{"location":"week-5-c/ce103-week-5-c/#dynamic-memory-allocation-of-structs","title":"Dynamic memory allocation of structs","text":"<p>Before you proceed this section, we recommend you to check\u00a0C dynamic memory allocation.</p> <p>Sometimes, the number of struct variables you declared may be insufficient. You may need to allocate memory during run-time. Here's how you can achieve this in C programming.</p>"},{"location":"week-5-c/ce103-week-5-c/#example-dynamic-memory-allocation-of-structs","title":"Example: Dynamic memory allocation of structs","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\nstruct person {\nint age;\nfloat weight;\nchar name[30];\n};\nint main()\n{\nstruct person *ptr;\nint i, n;\nprintf(\"Enter the number of persons: \");\nscanf(\"%d\", &amp;n);\n// allocating memory for n numbers of struct person\nptr = (struct person*) malloc(n * sizeof(struct person));\nfor(i = 0; i &lt; n; ++i)\n{\nprintf(\"Enter first name and age respectively: \");\n// To access members of 1st struct person,\n// ptr-&gt;name and ptr-&gt;age is used\n// To access members of 2nd struct person,\n// (ptr+1)-&gt;name and (ptr+1)-&gt;age is used\nscanf(\"%s %d\", (ptr+i)-&gt;name, &amp;(ptr+i)-&gt;age);\n}\nprintf(\"Displaying Information:\\n\");\nfor(i = 0; i &lt; n; ++i)\nprintf(\"Name: %s\\tAge: %d\\n\", (ptr+i)-&gt;name, (ptr+i)-&gt;age);\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>When you run the program, the output will be:</p> <pre><code>Enter the number of persons:  2\nEnter first name and age respectively:  Harry 24\nEnter first name and age respectively:  Gary 32\nDisplaying Information:\nName: Harry    Age: 24\nName: Gary    Age: 32\n</code></pre> <p>In the above example,\u00a0n\u00a0number of struct variables are created where\u00a0n\u00a0is entered by the user.</p> <p>To allocate the memory for\u00a0n\u00a0number of\u00a0struct person, we used,</p> <pre><code>ptr = (struct person*) malloc(n * sizeof(struct person));\n</code></pre> <p>Then, we used the\u00a0ptr\u00a0pointer to access elements of\u00a0person.</p>"},{"location":"week-5-c/ce103-week-5-c/#c-structure-and-function","title":"C Structure and Function","text":"<p>In this tutorial, you'll learn to pass struct variables as arguments to a function. You will learn to return struct from a function with the help of examples.</p> <p>Similar to variables of built-in types, you can also pass structure variables to a function.</p>"},{"location":"week-5-c/ce103-week-5-c/#passing-structs-to-functions","title":"Passing structs to functions","text":"<p>We recommended you to learn these tutorials before you learn how to pass structs to functions.</p> <ul> <li>C structures</li> <li>C functions</li> <li>User-defined Function</li> </ul> <p>Here's how you can pass structures to a function</p> <pre><code>#include &lt;stdio.h&gt;\nstruct student {\nchar name[50];\nint age;\n};\n// function prototype\nvoid display(struct student s);\nint main() {\nstruct student s1;\nprintf(\"Enter name: \");\n// read string input from the user until \\n is entered\n// \\n is discarded\nscanf(\"%[^\\n]%*c\", s1.name);\nprintf(\"Enter age: \");\nscanf(\"%d\", &amp;s1.age);\ndisplay(s1); // passing struct as an argument\nreturn 0;\n}\nvoid display(struct student s) {\nprintf(\"\\nDisplaying information\\n\");\nprintf(\"Name: %s\", s.name);\nprintf(\"\\nAge: %d\", s.age);\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>Enter name: Bond\nEnter age: 13\nDisplaying information\nName: Bond\nAge: 13 </code></pre> <p>Here, a struct variable\u00a0s1\u00a0of type\u00a0<code>struct student</code>\u00a0is created. The variable is passed to the\u00a0<code>display()</code>\u00a0function using\u00a0<code>display(s1);</code>\u00a0statement.</p>"},{"location":"week-5-c/ce103-week-5-c/#return-struct-from-a-function","title":"Return struct from a function","text":"<p>Here's how you can return structure from a function:</p> <pre><code>#include &lt;stdio.h&gt;\nstruct student\n{\nchar name[50];\nint age;\n};\n// function prototype\nstruct student getInformation();\nint main()\n{\nstruct student s;\ns = getInformation();\nprintf(\"\\nDisplaying information\\n\");\nprintf(\"Name: %s\", s.name);\nprintf(\"\\nRoll: %d\", s.age);\nreturn 0;\n}\nstruct student getInformation() {\nstruct student s1;\nprintf(\"Enter name: \");\nscanf (\"%[^\\n]%*c\", s1.name);\nprintf(\"Enter age: \");\nscanf(\"%d\", &amp;s1.age);\nreturn s1;\n}    </code></pre> <p>Run Code</p> <p>Here, the\u00a0<code>getInformation()</code>\u00a0function is called using\u00a0<code>s = getInformation();</code>\u00a0statement. The function returns a structure of type\u00a0<code>struct student</code>. The returned structure is displayed from the\u00a0<code>main()</code>\u00a0function.</p> <p>Notice that, the return type of\u00a0<code>getInformation()</code>\u00a0is also\u00a0<code>struct student</code>.</p>"},{"location":"week-5-c/ce103-week-5-c/#passing-struct-by-reference","title":"Passing struct by reference","text":"<p>You can also pass structs by reference (in a similar way like you pass variables of built-in type by reference). We suggest you to read\u00a0pass by reference\u00a0tutorial before you proceed.</p> <p>During pass by reference, the memory addresses of struct variables are\u00a0passed to the function.</p> <pre><code>#include &lt;stdio.h&gt;\ntypedef struct Complex\n{\nfloat real;\nfloat imag;\n} complex;\nvoid addNumbers(complex c1, complex c2, complex *result); int main()\n{\ncomplex c1, c2, result;\nprintf(\"For first number,\\n\");\nprintf(\"Enter real part: \");\nscanf(\"%f\", &amp;c1.real);\nprintf(\"Enter imaginary part: \");\nscanf(\"%f\", &amp;c1.imag);\nprintf(\"For second number, \\n\");\nprintf(\"Enter real part: \");\nscanf(\"%f\", &amp;c2.real);\nprintf(\"Enter imaginary part: \");\nscanf(\"%f\", &amp;c2.imag);\naddNumbers(c1, c2, &amp;result); printf(\"\\nresult.real = %.1f\\n\", result.real);\nprintf(\"result.imag = %.1f\", result.imag);\nreturn 0;\n}\nvoid addNumbers(complex c1, complex c2, complex *result) {\nresult-&gt;real = c1.real + c2.real;\nresult-&gt;imag = c1.imag + c2.imag; }\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>For first number,\nEnter real part:  1.1\nEnter imaginary part:  -2.4\nFor second number, Enter real part:  3.4\nEnter imaginary part:  -3.2\nresult.real = 4.5\nresult.imag = -5.6  </code></pre> <p>In the above program, three structure variables\u00a0c1,\u00a0c2\u00a0and the address of\u00a0result\u00a0is passed to the\u00a0<code>addNumbers()</code>\u00a0function. Here,\u00a0result\u00a0is passed by reference.</p> <p>When the\u00a0result\u00a0variable inside the\u00a0<code>addNumbers()</code>\u00a0is altered, the\u00a0result\u00a0variable inside the\u00a0<code>main()</code>\u00a0function is also altered accordingly.</p>"},{"location":"week-5-c/ce103-week-5-c/#c-unions","title":"C Unions","text":"<p>In this tutorial, you'll learn about unions in C programming. More specifically, how to create unions, access its members and learn the differences between unions and structures.</p> <p>A union is a user-defined type similar to\u00a0structs in C\u00a0except for one key difference.</p> <p>Structures allocate enough space to store all their members, whereas\u00a0unions can only hold one member value at a time.</p>"},{"location":"week-5-c/ce103-week-5-c/#how-to-define-a-union","title":"How to define a union?","text":"<p>We use the\u00a0<code>union</code>\u00a0keyword to define unions. Here's an example:</p> <pre><code>union car\n{\nchar name[50];\nint price;\n};\n</code></pre> <p>The above code defines a derived type\u00a0<code>union car</code>.</p>"},{"location":"week-5-c/ce103-week-5-c/#create-union-variables","title":"Create union variables","text":"<p>When a union is defined, it creates a user-defined type. However, no memory is allocated. To allocate memory for a given union type and work with it, we need to create variables.</p> <p>Here's how we create union variables.</p> <pre><code>union car\n{\nchar name[50];\nint price;\n};\nint main()\n{\nunion car car1, car2, *car3;\nreturn 0;\n}\n</code></pre> <p>Another way of creating union variables is:</p> <pre><code>union car\n{\nchar name[50];\nint price;\n} car1, car2, *car3;\n</code></pre> <p>In both cases, union variables\u00a0car1,\u00a0car2, and a union pointer\u00a0car3\u00a0of\u00a0<code>union car</code>\u00a0type are created.</p>"},{"location":"week-5-c/ce103-week-5-c/#access-members-of-a-union","title":"Access members of a union","text":"<p>We use the\u00a0<code>.</code>\u00a0operator to access members of a union. And to access pointer variables, we use the\u00a0<code>-&gt;</code>\u00a0operator.</p> <p>In the above example,</p> <ul> <li>To access\u00a0price\u00a0for\u00a0<code>car1</code>,\u00a0<code>car1.price</code>\u00a0is used.</li> <li>To access\u00a0price\u00a0using\u00a0<code>car3</code>, either\u00a0<code>(*car3).price</code>\u00a0or\u00a0<code>car3-&gt;price</code>\u00a0can be used.</li> </ul>"},{"location":"week-5-c/ce103-week-5-c/#difference-between-unions-and-structures","title":"Difference between unions and structures","text":"<p>Let's take an example to demonstrate the difference between unions and structures:</p> <pre><code>#include &lt;stdio.h&gt;\nunion unionJob\n{\n//defining a union\nchar name[32];\nfloat salary;\nint workerNo;\n} uJob;\nstruct structJob\n{\nchar name[32];\nfloat salary;\nint workerNo;\n} sJob;\nint main()\n{\nprintf(\"size of union = %d bytes\", sizeof(uJob));\nprintf(\"\\nsize of structure = %d bytes\", sizeof(sJob));\nreturn 0;\n}\n</code></pre> <p>Output</p> <pre><code>size of union = 32\nsize of structure = 40\n</code></pre> <p>Why this difference in the size of union and structure variables?</p> <p>Here, the size of\u00a0sJob\u00a0is 40 bytes because</p> <ul> <li>the size of\u00a0<code>name[32]</code>\u00a0is 32 bytes</li> <li>the size of\u00a0<code>salary</code>\u00a0is 4 bytes</li> <li>the size of\u00a0<code>workerNo</code>\u00a0is 4 bytes</li> </ul> <p>However, the size of\u00a0uJob\u00a0is 32 bytes. It's because the size of a union variable will always be the size of its largest element. In the above example, the size of its largest element, (<code>name[32]</code>), is 32 bytes.</p> <p>With a union, all members share\u00a0the same memory.</p>"},{"location":"week-5-c/ce103-week-5-c/#example-accessing-union-members","title":"Example: Accessing Union Members","text":"<pre><code>#include &lt;stdio.h&gt;\nunion Job {\nfloat salary;\nint workerNo;\n} j;\nint main() {\nj.salary = 12.3;\n// when j.workerNo is assigned a value,\n// j.salary will no longer hold 12.3\nj.workerNo = 100;\nprintf(\"Salary = %.1f\\n\", j.salary);\nprintf(\"Number of workers = %d\", j.workerNo);\nreturn 0;\n}\n</code></pre> <p>Output</p> <pre><code>Salary = 0.0\nNumber of workers = 100\n</code></pre> <p>To learn where unions are used, visit\u00a0Why do we need C Unions?</p> <p>C Struct Examples</p>"},{"location":"week-5-c/ce103-week-5-c/#c-file-handling","title":"C File Handling","text":"<p>In this tutorial, you will learn about file handling in C. You will learn to handle standard I/O in C using fprintf(), fscanf(), fread(), fwrite(), fseek() etc. with the help of examples.</p> <p>A file is a container in computer storage devices used for storing data.</p>"},{"location":"week-5-c/ce103-week-5-c/#why-files-are-needed","title":"Why files are needed?","text":"<ul> <li>When a program is terminated, the entire data is lost. Storing in a file will preserve your data even if the program terminates.</li> <li>If you have to enter a large number of data, it will take a lot of time to enter them all.   However, if you have a file containing all the data, you can easily access the contents of the file using a few commands in C.</li> <li>You can easily move your data from one computer to another without any changes.</li> </ul>"},{"location":"week-5-c/ce103-week-5-c/#types-of-files","title":"Types of Files","text":"<p>When dealing with files, there are two types of files you should know about:</p> <ol> <li>Text files</li> <li>Binary files</li> </ol>"},{"location":"week-5-c/ce103-week-5-c/#1-text-files","title":"1. Text files","text":"<p>Text files are the normal\u00a0.txt\u00a0files. You can easily create text files using any simple text editors such as Notepad.</p> <p>When you open those files, you'll see all the contents within the file as plain text. You can easily edit or delete the contents.</p> <p>They take minimum effort to maintain, are easily readable, and provide the least security and takes bigger storage space.</p>"},{"location":"week-5-c/ce103-week-5-c/#2-binary-files","title":"2. Binary files","text":"<p>Binary files are mostly the\u00a0.bin\u00a0files in your computer.</p> <p>Instead of storing data in plain text, they store it in the binary form (0's and 1's).</p> <p>They can hold a higher amount of data, are not readable easily, and provides better security than text files.</p>"},{"location":"week-5-c/ce103-week-5-c/#file-operations","title":"File Operations","text":"<p>In C, you can perform four major operations on files, either text or binary:</p> <ol> <li>Creating a new file</li> <li>Opening an existing file</li> <li>Closing a file</li> <li>Reading from and writing information to a file</li> </ol>"},{"location":"week-5-c/ce103-week-5-c/#working-with-files","title":"Working with files","text":"<p>When working with files, you need to declare a pointer of type file. This declaration is needed for communication between the file and the program.</p> <pre><code>FILE *fptr;\n</code></pre>"},{"location":"week-5-c/ce103-week-5-c/#opening-a-file-for-creation-and-edit","title":"Opening a file - for creation and edit","text":"<p>Opening a file is performed using the\u00a0<code>fopen()</code>\u00a0function defined in the\u00a0<code>stdio.h</code>\u00a0header file.</p> <p>The syntax for opening a file in standard I/O is:</p> <pre><code>ptr = fopen(\"fileopen\",\"mode\");\n</code></pre> <p>For example,</p> <pre><code>fopen(\"E:\\\\cprogram\\\\newprogram.txt\",\"w\");\nfopen(\"E:\\\\cprogram\\\\oldprogram.bin\",\"rb\");\n</code></pre> <ul> <li>Let's suppose the file\u00a0<code>newprogram.txt</code>\u00a0doesn't exist in the location\u00a0<code>E:\\cprogram</code>. The first function creates a new file named\u00a0<code>newprogram.txt</code>\u00a0and opens it for writing as per the mode\u00a0'w'.   The writing mode allows you to create and edit (overwrite) the contents of the file.</li> <li>Now let's suppose the second binary file\u00a0<code>oldprogram.bin</code>\u00a0exists in the location\u00a0<code>E:\\cprogram</code>. The second function opens the existing file for reading in binary mode\u00a0'rb'.   The reading mode only allows you to read the file, you cannot write into the file.</li> </ul> <p>Opening Modes in Standard I/O</p> Mode Meaning of Mode During Inexistence of file <code>r</code> Open for reading. If the file does not exist, <code>fopen()</code> returns NULL. <code>rb</code> Open for reading in binary mode. If the file does not exist, <code>fopen()</code> returns NULL. <code>w</code> Open for writing. If the file exists, its contents are overwritten. If the file does not exist, it will be created. <p>Opening Modes in Standard I/O</p> Mode Meaning of Mode During Inexistence of file <code>wb</code> Open for writing in binary mode. If the file exists, its contents are overwritten. If the file does not exist, it will be created. <code>a</code> Open for append. Data is added to the end of the file. If the file does not exist, it will be created. <code>ab</code> Open for append in binary mode. Data is added to the end of the file. If the file does not exist, it will be created. <p>Opening Modes in Standard I/O</p> Mode Meaning of Mode During Inexistence of file <code>r+</code> Open for both reading and writing. If the file does not exist, <code>fopen()</code> returns NULL. <code>rb+</code> Open for both reading and writing in binary mode. If the file does not exist, <code>fopen()</code> returns NULL. <code>w+</code> Open for both reading and writing. If the file exists, its contents are overwritten. If the file does not exist, it will be created. <p>Opening Modes in Standard I/O</p> Mode Meaning of Mode During Inexistence of file <code>wb+</code> Open for both reading and writing in binary mode. If the file exists, its contents are overwritten. If the file does not exist, it will be created. <code>a+</code> Open for both reading and appending. If the file does not exist, it will be created. <code>ab+</code> Open for both reading and appending in binary mode. If the file does not exist, it will be created."},{"location":"week-5-c/ce103-week-5-c/#closing-a-file","title":"Closing a File","text":"<p>The file (both text and binary) should be closed after reading/writing.</p> <p>Closing a file is performed using the\u00a0<code>fclose()</code>\u00a0function.</p> <pre><code>fclose(fptr);\n</code></pre> <p>Here,\u00a0<code>fptr</code>\u00a0is a file pointer associated with the file to be closed.</p>"},{"location":"week-5-c/ce103-week-5-c/#reading-and-writing-to-a-text-file","title":"Reading and writing to a text file","text":"<p>For reading and writing to a text file, we use the functions\u00a0<code>fprintf()</code>\u00a0and\u00a0<code>fscanf().</code></p> <p>They are just the file versions of\u00a0<code>printf()</code>\u00a0and\u00a0<code>scanf()</code>. The only difference is that\u00a0<code>fprintf()</code>\u00a0and\u00a0<code>fscanf()</code>\u00a0expects a pointer to the structure FILE.</p>"},{"location":"week-5-c/ce103-week-5-c/#example-1-write-to-a-text-file","title":"Example 1: Write to a text file","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\nint main()\n{\nint num;\nFILE *fptr;\n// use appropriate location if you are using MacOS or Linux\nfptr = fopen(\"C:\\\\program.txt\",\"w\");\nif(fptr == NULL)\n{\nprintf(\"Error!\");   exit(1);             }\nprintf(\"Enter num: \");\nscanf(\"%d\",&amp;num);\nfprintf(fptr,\"%d\",num);\nfclose(fptr);\nreturn 0;\n}\n</code></pre> <p>This program takes a number from the user and stores in the file\u00a0<code>program.txt</code>.</p> <p>After you compile and run this program, you can see a text file\u00a0<code>program.txt</code>\u00a0created in C drive of your computer. When you open the file, you can see the integer you entered.</p>"},{"location":"week-5-c/ce103-week-5-c/#example-2-read-from-a-text-file","title":"Example 2: Read from a text file","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\nint main()\n{\nint num;\nFILE *fptr;\nif ((fptr = fopen(\"C:\\\\program.txt\",\"r\")) == NULL){\nprintf(\"Error! opening file\");\n// Program exits if the file pointer returns NULL.\nexit(1);\n}\nfscanf(fptr,\"%d\", &amp;num);\nprintf(\"Value of n=%d\", num);\nfclose(fptr); return 0;\n}\n</code></pre> <p>This program reads the integer present in the\u00a0<code>program.txt</code>\u00a0file and prints it onto the screen.</p> <p>If you successfully created the file from\u00a0Example 1, running this program will get you the integer you entered.</p> <p>Other functions like\u00a0<code>fgetchar()</code>,\u00a0<code>fputc()</code>\u00a0etc. can be used in a similar way.</p>"},{"location":"week-5-c/ce103-week-5-c/#reading-and-writing-to-a-binary-file","title":"Reading and writing to a binary file","text":"<p>Functions\u00a0<code>fread()</code>\u00a0and\u00a0<code>fwrite()</code>\u00a0are used for reading from and writing to a file on the disk respectively in case of binary files.</p>"},{"location":"week-5-c/ce103-week-5-c/#writing-to-a-binary-file","title":"Writing to a binary file","text":"<p>To write into a binary file, you need to use the\u00a0<code>fwrite()</code>\u00a0function. The functions take four arguments:</p> <ol> <li>address of data to be written in the disk</li> <li>size of data to be written in the disk</li> <li>number of such type of data</li> <li>pointer to the file where you want to write.</li> </ol> <pre><code>fwrite(addressData, sizeData, numbersData, pointerToFile);\n</code></pre>"},{"location":"week-5-c/ce103-week-5-c/#example-3-write-to-a-binary-file-using-fwrite","title":"Example 3: Write to a binary file using fwrite()","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\nstruct threeNum\n{\nint n1, n2, n3;\n};\nint main()\n{\nint n;\nstruct threeNum num;\nFILE *fptr;\nif ((fptr = fopen(\"C:\\\\program.bin\",\"wb\")) == NULL){\nprintf(\"Error! opening file\");\n// Program exits if the file pointer returns NULL.\nexit(1);\n}\nfor(n = 1; n &lt; 5; ++n)\n{\nnum.n1 = n;\nnum.n2 = 5*n;\nnum.n3 = 5*n + 1;\nfwrite(&amp;num, sizeof(struct threeNum), 1, fptr); }\nfclose(fptr); return 0;\n}\n</code></pre> <p>In this program, we create a new file\u00a0<code>program.bin</code>\u00a0in the C drive.</p> <p>We declare a structure\u00a0<code>threeNum</code>\u00a0with three numbers -\u00a0n1, n2 and n3, and define it in the main function as num.</p> <p>Now, inside the for loop, we store the value into the file using\u00a0<code>fwrite()</code>.</p> <p>The first parameter takes the address of\u00a0num\u00a0and the second parameter takes the size of the structure\u00a0<code>threeNum</code>.</p> <p>Since we're only inserting one instance of\u00a0num, the third parameter is\u00a0<code>1</code>. And, the last parameter\u00a0<code>*fptr</code>\u00a0points to the file we're storing the data.</p> <p>Finally, we close the file.</p>"},{"location":"week-5-c/ce103-week-5-c/#reading-from-a-binary-file","title":"Reading from a binary file","text":"<p>Function\u00a0<code>fread()</code>\u00a0also take 4 arguments similar to the\u00a0<code>fwrite()</code>\u00a0function as above.</p> <pre><code>fread(addressData, sizeData, numbersData, pointerToFile);\n</code></pre>"},{"location":"week-5-c/ce103-week-5-c/#example-4-read-from-a-binary-file-using-fread","title":"Example 4: Read from a binary file using fread()","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\nstruct threeNum\n{\nint n1, n2, n3;\n};\nint main()\n{\nint n;\nstruct threeNum num;\nFILE *fptr;\nif ((fptr = fopen(\"C:\\\\program.bin\",\"rb\")) == NULL){\nprintf(\"Error! opening file\");\n// Program exits if the file pointer returns NULL.\nexit(1);\n}\nfor(n = 1; n &lt; 5; ++n)\n{\nfread(&amp;num, sizeof(struct threeNum), 1, fptr); printf(\"n1: %d\\tn2: %d\\tn3: %d\\n\", num.n1, num.n2, num.n3);\n}\nfclose(fptr); return 0;\n}\n</code></pre> <p>In this program, you read the same file\u00a0<code>program.bin</code>\u00a0and loop through the records one by one.</p> <p>In simple terms, you read one\u00a0<code>threeNum</code>\u00a0record of\u00a0<code>threeNum</code>\u00a0size from the file pointed by\u00a0*fptr\u00a0into the structure\u00a0num.</p> <p>You'll get the same records you inserted in\u00a0Example 3.</p>"},{"location":"week-5-c/ce103-week-5-c/#getting-data-using-fseek","title":"Getting data using fseek()","text":"<p>If you have many records inside a file and need to access a record at a specific position, you need to loop through all the records before it to get the record.</p> <p>This will waste a lot of memory and operation time. An easier way to get to the required data can be achieved using\u00a0<code>fseek()</code>.</p> <p>As the name suggests,\u00a0<code>fseek()</code>\u00a0seeks the cursor to the given record in the file.</p>"},{"location":"week-5-c/ce103-week-5-c/#syntax-of-fseek","title":"Syntax of fseek()","text":"<pre><code>fseek(FILE * stream, long int offset, int whence);\n</code></pre> <p>The first parameter stream is the pointer to the file. The second parameter is the position of the record to be found, and the third parameter specifies the location where the offset starts.</p> <p>Different whence in fseek()</p> Whence Meaning <code>SEEK_SET</code> Starts the offset from the beginning of the file. <code>SEEK_END</code> Starts the offset from the end of the file. <code>SEEK_CUR</code> Starts the offset from the current location of the cursor in the file."},{"location":"week-5-c/ce103-week-5-c/#example-5-fseek","title":"Example 5: fseek()","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\nstruct threeNum\n{\nint n1, n2, n3;\n};\nint main()\n{\nint n;\nstruct threeNum num;\nFILE *fptr;\nif ((fptr = fopen(\"C:\\\\program.bin\",\"rb\")) == NULL){\nprintf(\"Error! opening file\");\n// Program exits if the file pointer returns NULL.\nexit(1);\n}\n// Moves the cursor to the end of the file\nfseek(fptr, -sizeof(struct threeNum), SEEK_END);\nfor(n = 1; n &lt; 5; ++n)\n{\nfread(&amp;num, sizeof(struct threeNum), 1, fptr); printf(\"n1: %d\\tn2: %d\\tn3: %d\\n\", num.n1, num.n2, num.n3);\nfseek(fptr, -2*sizeof(struct threeNum), SEEK_CUR);\n}\nfclose(fptr); return 0;\n}\n</code></pre> <p>This program will start reading the records from the file\u00a0<code>program.bin</code>\u00a0in the reverse order (last to first) and prints it.</p>"},{"location":"week-5-c/ce103-week-5-c/#c-files-examples","title":"C Files Examples","text":"<p>In this article, you'll find a list of examples to handle file input/output operations in C programming.</p> <p>To understand all programs on this page, you should have the knowledge of the following topics.</p> <ul> <li>C Arrays</li> <li>C Pointers</li> <li>Array and Pointer Relation</li> <li>File I/O</li> </ul>"},{"location":"week-5-c/ce103-week-5-c/#c-file-examples","title":"C File Examples","text":"<p>1. C program to read name and marks of n number of students and store them in a file.</p> <pre><code>#include &lt;stdio.h&gt;\nint main()\n{\nchar name[50];\nint marks, i, num;\nprintf(\"Enter number of students: \");\nscanf(\"%d\", &amp;num);\nFILE *fptr;\nfptr = (fopen(\"C:\\\\student.txt\", \"w\"));\nif(fptr == NULL)\n{\nprintf(\"Error!\");\nexit(1);\n}\nfor(i = 0; i &lt; num; ++i)\n{\nprintf(\"For student%d\\nEnter name: \", i+1);\nscanf(\"%s\", name);\nprintf(\"Enter marks: \");\nscanf(\"%d\", &amp;marks);\nfprintf(fptr,\"\\nName: %s \\nMarks=%d \\n\", name, marks);\n}\nfclose(fptr);\nreturn 0;\n}\n</code></pre> <p>2. C program to read name and marks of n number of students from and store them in a file. If the file previously exits, add the information to the file.</p> <pre><code>#include &lt;stdio.h&gt;\nint main()\n{\nchar name[50];\nint marks, i, num;\nprintf(\"Enter number of students: \");\nscanf(\"%d\", &amp;num);\nFILE *fptr;\nfptr = (fopen(\"C:\\\\student.txt\", \"a\"));\nif(fptr == NULL)\n{\nprintf(\"Error!\");\nexit(1);\n}\nfor(i = 0; i &lt; num; ++i)\n{\nprintf(\"For student%d\\nEnter name: \", i+1);\nscanf(\"%s\", name);\nprintf(\"Enter marks: \");\nscanf(\"%d\", &amp;marks);\nfprintf(fptr,\"\\nName: %s \\nMarks=%d \\n\", name, marks);\n}\nfclose(fptr);\nreturn 0;\n}\n</code></pre> <p>3. C program to write all the members of an array of structures to a file using fwrite(). Read the array from the file and display on the screen.</p> <pre><code>#include &lt;stdio.h&gt;\nstruct student\n{\nchar name[50];\nint height;\n};\nint main(){\nstruct student stud1[5], stud2[5];   FILE *fptr;\nint i;\nfptr = fopen(\"file.txt\",\"wb\");\nfor(i = 0; i &lt; 5; ++i)\n{\nfflush(stdin);\nprintf(\"Enter name: \");\ngets(stud1[i].name);\nprintf(\"Enter height: \"); scanf(\"%d\", &amp;stud1[i].height); }\nfwrite(stud1, sizeof(stud1), 1, fptr);\nfclose(fptr);\nfptr = fopen(\"file.txt\", \"rb\");\nfread(stud2, sizeof(stud2), 1, fptr);\nfor(i = 0; i &lt; 5; ++i)\n{\nprintf(\"Name: %s\\nHeight: %d\", stud2[i].name, stud2[i].height);\n}\nfclose(fptr);\n}\n</code></pre>"},{"location":"week-5-c/ce103-week-5-c/#c-enums","title":"C enums","text":"<p>In this tutorial, you will learn about enum (enumeration) in C programming with the help of examples.</p> <p>In C programming, an enumeration type (also called enum) is a data type that consists of integral constants. To define enums, the\u00a0<code>enum</code>\u00a0keyword is used.</p> <pre><code>enum flag {const1, const2, ..., constN};\n</code></pre> <p>By default,\u00a0const1\u00a0is 0,\u00a0const2\u00a0is 1 and so on. You can change default values of enum elements during declaration (if necessary).</p> <pre><code>// Changing default values of enum constants\nenum suit {\nclub = 0,\ndiamonds = 10,\nhearts = 20,\nspades = 3,\n};\n</code></pre>"},{"location":"week-5-c/ce103-week-5-c/#enumerated-type-declaration","title":"Enumerated Type Declaration","text":"<p>When you define an enum type, the blueprint for the variable is created. Here's how you can create variables of enum types.</p> <p>enum boolean {false, true}; enum boolean check; // declaring an enum variable</p> <p>Here, a variable\u00a0check\u00a0of the type\u00a0<code>enum boolean</code>\u00a0is created.</p> <p>You can also declare enum variables like this.</p> <p>enum boolean {false, true} check;</p> <p>Here, the value of\u00a0<code>false</code>\u00a0is equal to 0 and the value of\u00a0<code>true</code>\u00a0is equal to 1.</p>"},{"location":"week-5-c/ce103-week-5-c/#example-enumeration-type","title":"Example: Enumeration Type","text":"<pre><code>#include &lt;stdio.h&gt;\nenum week {Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday};\nint main()\n{\n// creating today variable of enum week type\nenum week today;\ntoday = Wednesday;\nprintf(\"Day %d\",today+1);\nreturn 0;\n}\n</code></pre> <p>Output</p> <pre><code>Day 4\n</code></pre>"},{"location":"week-5-c/ce103-week-5-c/#why-enums-are-used","title":"Why enums are used?","text":"<p>An enum variable can take\u00a0only one value. Here is an example to demonstrate it,</p> <pre><code>#include &lt;stdio.h&gt;\nenum suit {\nclub = 0,\ndiamonds = 10,\nhearts = 20,\nspades = 3\n} card;\nint main() {\ncard = club;\nprintf(\"Size of enum variable = %d bytes\", sizeof(card));    return 0;\n}\n</code></pre> <p>Output</p> <p>Size of enum variable = 4 bytes</p> <p>Here, we are getting\u00a04\u00a0because the size of\u00a0<code>int</code>\u00a0is 4 bytes.</p> <p>This makes enum a good choice to work with flags.</p>"},{"location":"week-5-c/ce103-week-5-c/#how-to-use-enums-for-flags","title":"How to use enums for flags?","text":"<p>Let us take an example,</p> <pre><code>enum designFlags {\nITALICS = 1,\nBOLD = 2,\nUNDERLINE = 4\n} button;\n</code></pre> <p>Suppose you are designing a button for Windows application. You can set flags\u00a0<code>ITALICS</code>,\u00a0<code>BOLD</code>\u00a0and\u00a0<code>UNDERLINE</code>\u00a0to work with text.</p> <p>There is a reason why all the integral constants are a power of 2 in the above pseudocode.</p> <pre><code>// In binary\nITALICS = 00000001\nBOLD = 00000010\nUNDERLINE = 00000100 </code></pre> <p>Since the integral constants are a power of 2, you can combine two or more flags at once without overlapping using\u00a0bitwise OR | operator. This allows you to choose two or more flags at once. For example,</p> <pre><code>#include &lt;stdio.h&gt;\nenum designFlags {\nBOLD = 1,\nITALICS = 2,\nUNDERLINE = 4\n};\nint main() {\nint myDesign = BOLD | UNDERLINE; //    00000001\n//  | 00000100\n//  ___________\n//    00000101\nprintf(\"%d\", myDesign);\nreturn 0;\n}\n</code></pre> <p>Output</p> <pre><code>5\n</code></pre> <p>When the output is 5, you always know that bold and underline is used.</p> <p>Also, you can add flags according to your requirements.</p> <pre><code>if (myDesign &amp; ITALICS) {\n// code for italics\n}\n</code></pre> <p>Here, we have added italics to our design. Note, only code for italics is written inside the\u00a0<code>if</code>\u00a0statement.</p> <p>You can accomplish almost anything in C programming without using enumerations. However, they can be pretty handy in certain situations.</p>"},{"location":"week-5-c/ce103-week-5-c/#c-preprocessor-and-macros","title":"C Preprocessor and Macros","text":"<p>In this tutorial, you will be introduced to c preprocessors, and you will learn to use #include, #define and conditional compilation with the help of examples.</p> <p>C Preprocessor</p> <p></p> <p>Working of C Preprocessor</p> <p>The C preprocessor is a macro preprocessor (allows you to define macros) that transforms your program before it is compiled. These transformations can be the inclusion of header files, macro expansions, etc.</p> <p>All preprocessing directives begin with a\u00a0<code>#</code>\u00a0symbol. For example,</p> <pre><code>#define PI 3.14\n</code></pre> <p>Some of the common uses of C preprocessors are:</p>"},{"location":"week-5-c/ce103-week-5-c/#including-header-files-include","title":"Including Header Files: #include","text":"<p>The\u00a0<code>#include</code>\u00a0preprocessor is used to include header files to C programs. For example,</p> <pre><code>#include &lt;stdio.h&gt;\n</code></pre> <p>Here,\u00a0<code>stdio.h</code>\u00a0is a header file. The\u00a0<code>#include</code>\u00a0preprocessor directive replaces the above line with the contents of\u00a0<code>stdio.h</code>\u00a0header file.</p> <p>That's the reason why you need to use\u00a0<code>#include &lt;stdio.h&gt;</code>\u00a0before you can use functions like\u00a0<code>scanf()</code>\u00a0and\u00a0<code>printf()</code>.</p> <p>You can also create your own header file containing function declaration and include it in your program using this preprocessor directive.</p> <pre><code>#include \"my_header.h\"\n</code></pre> <p>Visit this page to learn more about\u00a0using header files.</p>"},{"location":"week-5-c/ce103-week-5-c/#macros-using-define","title":"Macros using #define","text":"<p>A macro is a fragment of code that is given a name. You can define a macro in C using the\u00a0<code>#define</code>\u00a0preprocessor directive.</p> <p>Here's an example.</p> <pre><code>#define c 299792458  // speed of light\n</code></pre> <p>Here, when we use\u00a0c\u00a0in our program, it is replaced with\u00a0<code>299792458</code>.</p>"},{"location":"week-5-c/ce103-week-5-c/#example-1-define-preprocessor","title":"Example 1: #define preprocessor","text":"<pre><code>#include &lt;stdio.h&gt;\n#define PI 3.1415\nint main()\n{\nfloat radius, area;\nprintf(\"Enter the radius: \");\nscanf(\"%f\", &amp;radius);\n// Notice, the use of PI\narea = PI*radius*radius;\nprintf(\"Area=%.2f\",area);\nreturn 0;\n}\n</code></pre>"},{"location":"week-5-c/ce103-week-5-c/#function-like-macros","title":"Function like Macros","text":"<p>You can also define macros that work in a similar way as a function call. This is known as function-like macros. For example,</p> <pre><code>#define circleArea(r) (3.1415*(r)*(r))\n</code></pre> <p>Every time the program encounters\u00a0<code>circleArea(argument)</code>, it is replaced by\u00a0<code>(3.1415*(argument)*(argument))</code>.</p> <p>Suppose, we passed 5 as an argument then, it expands as below:</p> <pre><code>circleArea(5) expands to (3.1415*5*5)\n</code></pre>"},{"location":"week-5-c/ce103-week-5-c/#example-2-using-define-preprocessor","title":"Example 2: Using #define preprocessor","text":"<pre><code>#include &lt;stdio.h&gt;\n#define PI 3.1415\n#define circleArea(r) (PI*r*r)\nint main() {\nfloat radius, area;\nprintf(\"Enter the radius: \");\nscanf(\"%f\", &amp;radius);\narea = circleArea(radius);\nprintf(\"Area = %.2f\", area);\nreturn 0;\n}\n</code></pre> <p>Visit this page to learn more about\u00a0macros and #define preprocessor.</p>"},{"location":"week-5-c/ce103-week-5-c/#conditional-compilation","title":"Conditional Compilation","text":"<p>In C programming, you can instruct the preprocessor whether to include a block of code or not. To do so, conditional directives can be used.</p> <p>It's similar to a\u00a0<code>if</code>\u00a0statement with one major difference.</p> <p>The\u00a0<code>if</code>\u00a0statement is tested during the execution time to check whether a block of code should be executed or not whereas, the conditionals are used to include (or skip) a block of code in your program before execution.</p>"},{"location":"week-5-c/ce103-week-5-c/#uses-of-conditional","title":"Uses of Conditional","text":"<ul> <li>use different code depending on the machine, operating system</li> <li>compile the same source file in two different programs</li> <li>to exclude certain code from the program but to keep it as a reference for future purposes</li> </ul>"},{"location":"week-5-c/ce103-week-5-c/#how-to-use-conditional","title":"How to use conditional?","text":"<p>To use conditional,\u00a0<code>#ifdef</code>,\u00a0<code>#if</code>,\u00a0<code>#defined</code>,\u00a0<code>#else</code>\u00a0and\u00a0<code>#elif</code>\u00a0directives are used.</p>"},{"location":"week-5-c/ce103-week-5-c/#ifdef-directive","title":"#ifdef Directive","text":"<pre><code>#ifdef MACRO     \n// conditional codes\n#endif\n</code></pre> <p>Here, the conditional codes are included in the program only if\u00a0MACRO\u00a0is defined.</p>"},{"location":"week-5-c/ce103-week-5-c/#if-elif-and-else-directive","title":"#if, #elif and #else Directive","text":"<pre><code>#if expression\n// conditional codes\n#endif\n</code></pre> <p>Here,\u00a0expression\u00a0is an expression of integer type (can be integers, characters, arithmetic expression, macros, and so on).</p> <p>The conditional codes are included in the program only if the\u00a0expression\u00a0is evaluated to a non-zero value.</p> <p>The optional\u00a0<code>#else</code>\u00a0directive can be used with\u00a0<code>#if</code>\u00a0directive.</p> <pre><code>#if expression\nconditional codes if expression is non-zero\n#else\nconditional if expression is 0\n#endif\n</code></pre> <p>You can also add nested conditional to your\u00a0<code>#if...#else</code>\u00a0using\u00a0<code>#elif</code></p> <pre><code>#if expression\n// conditional codes if expression is non-zero\n#elif expression1\n// conditional codes if expression is non-zero\n#elif expression2\n// conditional codes if expression is non-zero\n#else\n// conditional if all expressions are 0\n#endif\n</code></pre>"},{"location":"week-5-c/ce103-week-5-c/#defined","title":"#defined","text":"<p>The special operator\u00a0#defined\u00a0is used to test whether a certain macro is defined or not. It's often used with\u00a0#if\u00a0directive.</p> <pre><code>#if defined BUFFER_SIZE &amp;&amp; BUFFER_SIZE &gt;= 2048\n// codes\n</code></pre>"},{"location":"week-5-c/ce103-week-5-c/#predefined-macros","title":"Predefined Macros","text":"<p>Here are some predefined macros in C programming.</p> Macro Value <code>__DATE__</code> A string containing the current date. <code>__FILE__</code> A string containing the file name. <code>__LINE__</code> An integer representing the current line number. <code>__STDC__</code> If follows ANSI standard C, then the value is a nonzero integer. <code>__TIME__</code> A string containing the current time."},{"location":"week-5-c/ce103-week-5-c/#example-3-get-current-time-using-time","title":"Example 3: Get current time using TIME","text":"<p>The following program outputs the current time using\u00a0<code>__TIME__</code>\u00a0macro.</p> <pre><code>#include &lt;stdio.h&gt;\nint main()\n{\nprintf(\"Current time: %s\",__TIME__);   }\n</code></pre> <p>Output</p> <pre><code>Current time: 19:54:39\n</code></pre>"},{"location":"week-5-c/ce103-week-5-c/#recommended-readings","title":"Recommended Readings","text":"<ul> <li>Line control</li> <li>Pragmas</li> <li>Preprocessor Output</li> <li>Other directives</li> </ul>"},{"location":"week-5-c/ce103-week-5-c/#c-standard-library-functions","title":"C Standard Library Functions","text":"<p>In this tutorial, you'll learn about the standard library functions in C. More specifically, what are they, different library functions in C and how to use them in your program.</p> <p>C Standard library functions or simply C Library functions are inbuilt functions in C programming.</p> <p>The prototype and data definitions of these functions are present in their respective header files. To use these functions we need to include the header file in our program. For example,</p> <p>If you want to use the\u00a0<code>printf()</code>\u00a0function, the header file\u00a0<code>&lt;stdio.h&gt;</code>\u00a0should be included.</p> <pre><code>#include &lt;stdio.h&gt;\nint main()\n{\nprintf(\"Catch me if you can.\"); }\n</code></pre> <p>Run Code</p> <p>If you try to use\u00a0<code>printf()</code>\u00a0without including the\u00a0<code>stdio.h</code>\u00a0header file, you will get an error.</p>"},{"location":"week-5-c/ce103-week-5-c/#advantages-of-using-c-library-functions","title":"Advantages of Using C library functions","text":"<p>1. They work</p> <p>One of the most important reasons you should use library functions is simply because they work. These functions have gone through multiple rigorous testing and are easy to use.</p> <p>2. The functions are optimized for performance</p> <p>Since, the functions are \"standard library\" functions, a dedicated group of developers constantly make them better. In the process, they are able to create the most efficient code optimized for maximum performance.</p> <p>3. It saves considerable development time</p> <p>Since the general functions like printing to a screen, calculating the square root, and many more are already written. You shouldn't worry about creating them once again.</p> <p>4. The functions are portable</p> <p>With ever-changing real-world needs, your application is expected to work every time, everywhere. And, these library functions help you in that they do the same thing on every computer.</p>"},{"location":"week-5-c/ce103-week-5-c/#example-square-root-using-sqrt-function","title":"Example: Square root using sqrt() function","text":"<p>Suppose, you want to find the square root of a number.</p> <p>To compute the square root of a number, you can use the sqrt() library function. The function is defined in the\u00a0<code>math.h</code>\u00a0header file.</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;math.h&gt;\nint main()\n{\nfloat num, root;\nprintf(\"Enter a number: \");\nscanf(\"%f\", &amp;num);\n// Computes the square root of num and stores in root.\nroot = sqrt(num);\nprintf(\"Square root of %.2f = %.2f\", num, root);\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>When you run the program, the output will be:</p> <pre><code>Enter a number: 12\nSquare root of 12.00 = 3.46\n</code></pre>"},{"location":"week-5-c/ce103-week-5-c/#library-functions-in-different-header-files","title":"Library Functions in Different Header Files","text":"C Header Files Description Program assertion functions Character type functions Localization functions Mathematics functions Jump functions"},{"location":"week-5-c/ce103-week-5-c/#library-functions-in-different-header-files_1","title":"Library Functions in Different Header Files","text":"C Header Files Description Signal handling functions Variable arguments handling functions Standard Input/Output functions Standard Utility functions String handling functions Date time functions <p>C Examples | Programiz</p>"},{"location":"week-5-c/ce103-week-5-c/#references","title":"References","text":"<ul> <li>Learn C Programming</li> </ul> \\[ End-Of-Week-5 \\]"},{"location":"week-5-c/sources/console-snake-game/","title":"Console Snake Game","text":""},{"location":"week-5-c/sources/console-snake-game/#console-snake-game","title":"Console Snake Game","text":""},{"location":"week-5-c/sources/console-snake-game/#description","title":"Description","text":"<p>A console snake game that can (or should) work in linux &amp; windows environments. This was created in my first year at Murdoch University, Perth Western Australia.</p>"},{"location":"week-5-c/sources/console-snake-game/#compiling","title":"Compiling","text":""},{"location":"week-5-c/sources/console-snake-game/#linux","title":"Linux","text":"<ol> <li>wget https://raw.githubusercontent.com/Contagious06/console-snake-game/master/src/snake.c</li> <li>gcc snake.c \u2013lm \u2013o snake.out</li> <li>chmod +x snake.out</li> <li>./snake.out</li> </ol>"},{"location":"week-5-c/sources/console-snake-game/#windows","title":"Windows","text":"<ol> <li>Download https://raw.githubusercontent.com/Contagious06/console-snake-game/master/src/snake.c</li> <li>bcc32 snake.c</li> <li>snake.exe</li> </ol>"},{"location":"week-5-c/sources/console-snake-game/#demo","title":"Demo","text":""},{"location":"week-6-cpp/ce103-week-6-cpp/","title":"CE103 Algorithms and Programming I","text":""},{"location":"week-6-cpp/ce103-week-6-cpp/#ce103-algorithms-and-programming-i","title":"CE103 Algorithms and Programming I","text":""},{"location":"week-6-cpp/ce103-week-6-cpp/#week-6","title":"Week-6","text":""},{"location":"week-6-cpp/ce103-week-6-cpp/#c-functional-console-programming","title":"C++ Functional Console Programming","text":"<p>Download DOC, SLIDE, PPTX</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-functional-console-programming_1","title":"C++ Functional Console Programming","text":""},{"location":"week-6-cpp/ce103-week-6-cpp/#books-and-resources","title":"Books and Resources","text":"<p>free-programming-books/free-programming-books-langs.md at master \u00b7 EbookFoundation/free-programming-books \u00b7 GitHub</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-functional-console-programming_2","title":"C++ Functional Console Programming","text":""},{"location":"week-6-cpp/ce103-week-6-cpp/#c-introduction","title":"C++ Introduction","text":""},{"location":"week-6-cpp/ce103-week-6-cpp/#c-variables-literals-and-constants","title":"C++ Variables, Literals and Constants","text":"<p>In this tutorial, we will learn about variables, literals, and constants in C++ with the help of examples.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-variables","title":"C++ Variables","text":"<p>In programming, a variable is a container (storage area) to hold data.</p> <p>To indicate the storage area, each variable should be given a unique name (identifier). For example,</p> <pre><code>int age = 14;\n</code></pre> <p>Here,\u00a0age\u00a0is a variable of the\u00a0<code>int</code>\u00a0data type, and we have assigned an integer value 14 to it.</p> <p>Note:\u00a0The\u00a0<code>int</code>\u00a0data type suggests that the variable can only hold integers. Similarly, we can use the\u00a0<code>double</code>\u00a0data type if we have to store decimals and exponentials.</p> <p>We will learn about all the data types in detail in the next tutorial.</p> <p>The value of a variable can be changed, hence the name\u00a0variable.</p> <pre><code>int age = 14;   // age is 14\nage = 17;       // age is 17\n</code></pre>"},{"location":"week-6-cpp/ce103-week-6-cpp/#rules-for-naming-a-variable","title":"Rules for naming a variable","text":"<ul> <li>A variable name can only have alphabets, numbers, and the underscore\u00a0<code>_</code>.</li> <li>A variable name cannot begin with a number.</li> <li>It is a preferred practice to begin variable names with a lowercase character. For example,\u00a0name\u00a0is preferable to\u00a0Name.</li> <li>A variable name cannot be a\u00a0keyword. For example,\u00a0<code>int</code>\u00a0is a keyword that is used to denote integers.</li> <li>A variable name can start with an underscore. However, it's not considered a good practice.</li> </ul> <p>Note:\u00a0We should try to give meaningful names to variables. For example,\u00a0first_name\u00a0is a better variable name than\u00a0fn.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-literals","title":"C++ Literals","text":"<p>Literals are data used for representing fixed values. They can be used directly in the code. For example:\u00a0<code>1</code>,\u00a0<code>2.5</code>,\u00a0<code>'c'</code>\u00a0etc.</p> <p>Here,\u00a0<code>1</code>,\u00a0<code>2.5</code>\u00a0and\u00a0<code>'c'</code>\u00a0are literals. Why? You cannot assign different values to these terms.</p> <p>Here's a list of different literals in C++ programming.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#1-integers","title":"1. Integers","text":"<p>An integer is a numeric literal(associated with numbers) without any fractional or exponential part. There are three types of integer literals in C programming:</p> <ul> <li>decimal (base 10)</li> <li>octal (base 8)</li> <li>hexadecimal (base 16)</li> </ul> <p>For example:</p> <pre><code>Decimal: 0, -9, 22 etc\nOctal: 021, 077, 033 etc\nHexadecimal: 0x7f, 0x2a, 0x521 etc\n</code></pre> <p>In C++ programming, octal starts with a\u00a0<code>0</code>, and hexadecimal starts with a\u00a0<code>0x</code>.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#2-floating-point-literals","title":"2. Floating-point Literals","text":"<p>A floating-point literal is a numeric literal that has either a fractional form or an exponent form. For example:</p> <p><code>-2.0</code></p> <p><code>0.0000234</code></p> <p><code>-0.22E-5</code></p> <p>Note: <code>E-5 = 10-5</code></p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#3-characters","title":"3. Characters","text":"<p>A character literal is created by enclosing a single character inside single quotation marks. For example:\u00a0<code>'a'</code>,\u00a0<code>'m'</code>,\u00a0<code>'F'</code>,\u00a0<code>'2'</code>,\u00a0<code>'}'</code>\u00a0etc.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#4-escape-sequences","title":"4. Escape Sequences","text":"<p>Sometimes, it is necessary to use characters that cannot be typed or has special meaning in C++ programming. For example, newline (enter), tab, question mark, etc.</p> <p>In order to use these characters, escape sequences are used.</p> Escape Sequences Characters <code>\\b</code> Backspace <code>\\f</code> Form feed <code>\\n</code> Newline <code>\\r</code> Return <code>\\t</code> Horizontal tab <code>\\v</code> Vertical tab <code>\\\\</code> Backslash <code>\\'</code> Single quotation mark <code>\\\"</code> Double quotation mark <code>\\?</code> Question mark <code>\\0</code> Null Character"},{"location":"week-6-cpp/ce103-week-6-cpp/#5-string-literals","title":"5. String Literals","text":"<p>A string literal is a sequence of characters enclosed in double-quote marks. For example:</p> <code>\"good\"</code> string constant <code>\"\"</code> null string constant <code>\" \"</code> string constant of six white space <code>\"x\"</code> string constant having a single character <code>\"Earth is round\\n\"</code> prints string with a newline <p>We will learn about strings in detail in the C++ string tutorial.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-constants","title":"C++ Constants","text":"<p>In C++, we can create variables whose value cannot be changed. For that, we use the\u00a0<code>const</code>\u00a0keyword. Here's an example:</p> <pre><code>const int LIGHT_SPEED = 299792458;\nLIGHT_SPEED = 2500 // Error! LIGHT_SPEED is a constant.\n</code></pre> <p>Here, we have used the keyword\u00a0<code>const</code>\u00a0to declare a constant named\u00a0<code>LIGHT_SPEED</code>. If we try to change the value of\u00a0<code>LIGHT_SPEED</code>, we will get an error.</p> <p>A constant can also be created using the\u00a0<code>#define</code>\u00a0preprocessor directive. We will learn about it in detail in the C++ Macros tutorial.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-data-types","title":"C++ Data Types","text":"<p>In this tutorial, we will learn about basic data types such as int, float, char, etc. in C++ programming with the help of examples.</p> <p>In C++, data types are declarations for variables. This determines the type and size of data associated with variables. For example,</p> <pre><code>int age = 13;\n</code></pre> <p>Here,\u00a0age\u00a0is a variable of type\u00a0<code>int</code>. Meaning, the variable can only store integers of either 2 or 4 bytes.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-fundamental-data-types","title":"C++ Fundamental Data Types","text":"<p>The table below shows the fundamental data types, their meaning, and their sizes (in bytes):</p> Data Type Meaning Size (in Bytes) <code>int</code> Integer 2 or 4 <code>float</code> Floating-point 4 <code>double</code> Double Floating-point 8 <code>char</code> Character 1 <code>wchar_t</code> Wide Character 2 <code>bool</code> Boolean 1 <code>void</code> Empty 0 <p>Now, let us discuss these fundamental data types in more detail.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#1-c-int","title":"1. C++ int","text":"<ul> <li>The\u00a0<code>int</code>\u00a0keyword is used to indicate integers.</li> <li>Its size is usually 4 bytes. Meaning, it can store values from\u00a0-2147483648 to 2147483647.</li> <li>For example,</li> </ul> <pre><code>int salary = 85000;\n</code></pre>"},{"location":"week-6-cpp/ce103-week-6-cpp/#2-c-float-and-double","title":"2. C++ float and double","text":"<ul> <li><code>float</code>\u00a0and\u00a0<code>double</code>\u00a0are used to store floating-point numbers (decimals and exponentials).</li> <li>The size of\u00a0<code>float</code>\u00a0is 4 bytes and the size of\u00a0<code>double</code>\u00a0is 8 bytes. Hence,\u00a0<code>double</code>\u00a0has two times the precision of\u00a0<code>float</code>. To learn more, visit C++ float and double.</li> <li>For example,</li> </ul> <pre><code>float area = 64.74;\ndouble volume = 134.64534;\n</code></pre> <p>As mentioned above, these two data types are also used for exponentials. For example,</p> <pre><code>double distance = 45E12    // 45E12 is equal to 45*10^12\n</code></pre>"},{"location":"week-6-cpp/ce103-week-6-cpp/#3-c-char","title":"3. C++ char","text":"<ul> <li>Keyword\u00a0<code>char</code>\u00a0is used for characters.</li> <li>Its size is 1 byte.</li> <li>Characters in C++ are enclosed inside single quotes\u00a0<code>' '</code>.</li> <li>For example,</li> </ul> <pre><code>char test = 'h';\n</code></pre> <p>Note:\u00a0In C++, an integer value is stored in a\u00a0<code>char</code>\u00a0variable rather than the character itself. To learn more, visit\u00a0C++ characters.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#4-c-wchar_t","title":"4. C++ wchar_t","text":"<ul> <li>Wide character\u00a0<code>wchar_t</code>\u00a0is similar to the\u00a0<code>char</code>\u00a0data type, except its size is 2 bytes instead of 1.</li> <li>It is used to represent characters that require more memory to represent them than a single\u00a0<code>char</code>.</li> <li>For example,</li> </ul> <pre><code>wchar_t test = L'\u05dd'  // storing Hebrew character;\n</code></pre> <p>Notice the letter L before the quotation marks.</p> <p>Note:\u00a0There are also two other fixed-size character types\u00a0<code>char16_t</code>\u00a0and\u00a0<code>char32_t</code>\u00a0introduced in C++11.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#5-c-bool","title":"5. C++ bool","text":"<ul> <li>The\u00a0<code>bool</code>\u00a0data type has one of two possible values:\u00a0<code>true</code>\u00a0or\u00a0<code>false</code>.</li> <li>Booleans are used in conditional statements and loops (which we will learn in later chapters).</li> <li>For example,</li> </ul> <pre><code>bool cond = false;\n</code></pre>"},{"location":"week-6-cpp/ce103-week-6-cpp/#6-c-void","title":"6. C++ void","text":"<ul> <li>The\u00a0<code>void</code>\u00a0keyword indicates an absence of data. It means \"nothing\" or \"no value\".</li> <li>We will use void when we learn about functions and pointers.</li> </ul> <p>Note:\u00a0We cannot declare variables of the\u00a0<code>void</code>\u00a0type.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-type-modifiers","title":"C++ Type Modifiers","text":"<p>We can further modify some of the fundamental data types by using type modifiers. There are 4 type modifiers in C++. They are:</p> <ol> <li><code>signed</code></li> <li><code>unsigned</code></li> <li><code>short</code></li> <li><code>long</code></li> </ol> <p>We can modify the following data types with the above modifiers:</p> <ul> <li><code>int</code></li> <li><code>double</code></li> <li><code>char</code></li> </ul>"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-modified-data-types-list","title":"C++ Modified Data Types List","text":"Data Type Size (in Bytes) Meaning <code>signed int</code> 4 used for integers (equivalent to <code>int</code>) <code>unsigned int</code> 4 can only store positive integers <code>short</code> 2 used for small integers (range -32768 to 32767) <code>unsigned short</code> 2 used for small positive integers (range 0 to 65,535) <code>long</code> at least 4 used for large integers (equivalent to <code>long int</code>) <code>unsigned long</code> 4 used for large positive integers or 0 (equivalent to <code>unsigned</code> <code>long int</code>) <code>long long</code> 8 used for very large integers (equivalent to <code>long long int</code>). <code>unsigned long long</code> 8 used for very large positive integers or 0 (equivalent to <code>unsigned long long int</code>) <code>long double</code> 12 used for large floating-point numbers <code>signed char</code> 1 used for characters (guaranteed range\u00a0-127 to 127) <code>unsigned char</code> 1 used for characters (range 0 to 255) <p>Let's see a few examples.</p> <pre><code>long b = 4523232;\nlong int c = 2345342;\nlong double d = 233434.56343;\nshort d = 3434233; // Error! out of range\nunsigned int a = -5;    // Error! can only store positive numbers or 0\n</code></pre>"},{"location":"week-6-cpp/ce103-week-6-cpp/#derived-data-types","title":"Derived Data Types","text":"<p>Data types that are derived from fundamental data types are derived types. For example: arrays, pointers, function types, structures, etc.</p> <p>We will learn about these derived data types in later tutorials.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-basic-inputoutput","title":"C++ Basic Input/Output","text":"<p>In this tutorial, we will learn to use the cin object to take input from the user, and the cout object to display output to the user with the help of examples.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-output","title":"C++ Output","text":"<p>In C++,\u00a0<code>cout</code>\u00a0sends formatted output to standard output devices, such as the screen. We use the\u00a0<code>cout</code>\u00a0object along with the\u00a0<code>&lt;&lt;</code>\u00a0operator for displaying output.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-1-string-output","title":"Example 1: String Output","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint main() {\n// prints the string enclosed in double quotes\ncout &lt;&lt; \"This is C++ Programming\";\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>This is C++ Programming\n</code></pre> <p>How does this program work?</p> <ul> <li>We first include the\u00a0<code>iostream</code>\u00a0header file that allows us to display output.</li> <li>The\u00a0<code>cout</code>\u00a0object is defined inside the\u00a0<code>std</code>\u00a0namespace. To use the\u00a0<code>std</code>\u00a0namespace, we used the\u00a0<code>using namespace std;</code>\u00a0statement.</li> <li>Every C++ program starts with the\u00a0<code>main()</code>\u00a0function. The code execution begins from the start of the\u00a0<code>main()</code>\u00a0function.</li> <li><code>cout</code>\u00a0is an object that prints the string inside quotation marks\u00a0<code>\" \"</code>. It is followed by the\u00a0<code>&lt;&lt;</code>\u00a0operator.</li> <li><code>return 0;</code>\u00a0is the \"exit status\" of the\u00a0<code>main()</code>\u00a0function. The program ends with this statement, however, this statement is not mandatory.</li> </ul> <p>Note:\u00a0If we don't include the\u00a0<code>using namespace std;</code>\u00a0statement, we need to use\u00a0<code>std::cout</code>\u00a0instead of\u00a0<code>cout</code>.</p> <p>This is the preferred method as using the\u00a0<code>std</code>\u00a0namespace can create potential problems.</p> <p>However, we have used the\u00a0<code>std</code>\u00a0namespace in our tutorials in order to make the codes more readable.</p> <pre><code>#include &lt;iostream&gt;\nint main() {\n// prints the string enclosed in double quotes\nstd::cout &lt;&lt; \"This is C++ Programming\";\nreturn 0;\n}\n</code></pre> <p>Run Code</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-2-numbers-and-characters-output","title":"Example 2: Numbers and Characters Output","text":"<p>To print the numbers and character variables, we use the same\u00a0<code>cout</code>\u00a0object but without using quotation marks.</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint main() {\nint num1 = 70;\ndouble num2 = 256.783;\nchar ch = 'A';\ncout &lt;&lt; num1 &lt;&lt; endl;    // print integer\ncout &lt;&lt; num2 &lt;&lt; endl;    // print double\ncout &lt;&lt; \"character: \" &lt;&lt; ch &lt;&lt; endl;    // print char\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>70\n256.783\ncharacter: A\n</code></pre> <p>Notes:</p> <ul> <li>The\u00a0<code>endl</code>\u00a0manipulator is used to insert a new line. That's why each output is displayed in a new line.</li> <li>The\u00a0<code>&lt;&lt;</code>\u00a0operator can be used more than once if we want to print different variables, strings and so on in a single statement. For example:</li> </ul> <pre><code>cout &lt;&lt; \"character: \" &lt;&lt; ch &lt;&lt; endl;\n</code></pre>"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-input","title":"C++ Input","text":"<p>In C++,\u00a0<code>cin</code>\u00a0takes formatted input from standard input devices such as the keyboard. We use the\u00a0<code>cin</code>\u00a0object along with the\u00a0<code>&gt;&gt;</code>\u00a0operator for taking input.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-3-integer-inputoutput","title":"Example 3: Integer Input/Output","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint main() {\nint num;\ncout &lt;&lt; \"Enter an integer: \";\ncin &gt;&gt; num;   // Taking input\ncout &lt;&lt; \"The number is: \" &lt;&lt; num;\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>Enter an integer: 70\nThe number is: 70\n</code></pre> <p>In the program, we used</p> <pre><code>cin &gt;&gt; num;\n</code></pre> <p>to take input from the user. The input is stored in the variable\u00a0num. We use the\u00a0<code>&gt;&gt;</code>\u00a0operator with\u00a0<code>cin</code>\u00a0to take input.</p> <p>Note:\u00a0If we don't include the\u00a0<code>using namespace std;</code>\u00a0statement, we need to use\u00a0<code>std::cin</code>\u00a0instead of\u00a0<code>cin</code>.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-taking-multiple-inputs","title":"C++ Taking Multiple Inputs","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint main() {\nchar a;\nint num;\ncout &lt;&lt; \"Enter a character and an integer: \";\ncin &gt;&gt; a &gt;&gt; num;\ncout &lt;&lt; \"Character: \" &lt;&lt; a &lt;&lt; endl;\ncout &lt;&lt; \"Number: \" &lt;&lt; num;\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>Enter a character and an integer: F\n23\nCharacter: F\nNumber: 23\n</code></pre>"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-type-conversion","title":"C++ Type Conversion","text":"<p>In this tutorial, we will learn about the basics of C++ type conversion with the help of examples.</p> <p>C++ allows us to convert data of one type to that of another. This is known as type conversion.</p> <p>There are two types of type conversion in C++.</p> <ol> <li>Implicit Conversion</li> <li>Explicit Conversion (also known as Type Casting)</li> </ol>"},{"location":"week-6-cpp/ce103-week-6-cpp/#implicit-type-conversion","title":"Implicit Type Conversion","text":"<p>The type conversion that is done automatically done by the compiler is known as implicit type conversion. This type of conversion is also known as automatic conversion.</p> <p>Let us look at two examples of implicit type conversion.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-1-conversion-from-int-to-double","title":"Example 1: Conversion From int to double","text":"<pre><code>// Working of implicit type-conversion\n#include &lt;iostream&gt;\nusing namespace std;\nint main() {\n// assigning an int value to num_int\nint num_int = 9;\n// declaring a double type variable\ndouble num_double;\n// implicit conversion\n// assigning int value to a double variable\nnum_double = num_int;\ncout &lt;&lt; \"num_int = \" &lt;&lt; num_int &lt;&lt; endl;\ncout &lt;&lt; \"num_double = \" &lt;&lt; num_double &lt;&lt; endl;\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>num_int = 9\nnum_double = 9\n</code></pre> <p>In the program, we have assigned an\u00a0<code>int</code>\u00a0data to a\u00a0<code>double</code>\u00a0variable.</p> <pre><code>num_double = num_int;\n</code></pre> <p>Here, the\u00a0<code>int</code>\u00a0value is automatically converted to\u00a0<code>double</code>\u00a0by the compiler before it is assigned to the\u00a0num_double\u00a0variable. This is an example of implicit type conversion.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-2-automatic-conversion-from-double-to-int","title":"Example 2: Automatic Conversion from double to int","text":"<pre><code>//Working of Implicit type-conversion\n#include &lt;iostream&gt;\nusing namespace std;\nint main() {\nint num_int;\ndouble num_double = 9.99;\n// implicit conversion\n// assigning a double value to an int variable\nnum_int = num_double;\ncout &lt;&lt; \"num_int = \" &lt;&lt; num_int &lt;&lt; endl;\ncout &lt;&lt; \"num_double = \" &lt;&lt; num_double &lt;&lt; endl;\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>num_int = 9\nnum_double = 9.99\n</code></pre> <p>In the program, we have assigned a\u00a0<code>double</code>\u00a0data to an\u00a0<code>int</code>\u00a0variable.</p> <pre><code>num_int = num_double;\n</code></pre> <p>Here, the\u00a0<code>double</code>\u00a0value is automatically converted to\u00a0<code>int</code>\u00a0by the compiler before it is assigned to the\u00a0num_int\u00a0variable. This is also an example of implicit type conversion.</p> <p>Note:\u00a0Since\u00a0<code>int</code>\u00a0cannot have a decimal part, the digits after the decimal point are\u00a0truncated in the above example.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#data-loss-during-conversion-narrowing-conversion","title":"Data Loss During Conversion (Narrowing Conversion)","text":"<p>As we have seen from the above example, conversion from one data type to another is prone to data loss. This happens when data of a larger type is converted to data of a smaller type.</p> <p></p> <p>Possible Data Loss During Type Conversion</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-explicit-conversion","title":"C++ Explicit Conversion","text":"<p>When the user manually changes data from one type to another, this is known as\u00a0explicit conversion. This type of conversion is also known as\u00a0type casting.</p> <p>There are three major ways in which we can use explicit conversion in C++. They are:</p> <ol> <li>C-style type casting (also known as\u00a0cast notation)</li> <li>Function notation (also known as\u00a0old C++ style type casting)</li> <li>Type conversion operators</li> </ol>"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-style-type-casting","title":"C-style Type Casting","text":"<p>As the name suggests, this type of casting is favored by the\u00a0C programming language. It is also known as\u00a0cast notation.</p> <p>The syntax for this style is:</p> <pre><code>(data_type)expression;\n</code></pre> <p>For example,</p> <pre><code>// initializing int variable\nint num_int = 26;\n// declaring double variable\ndouble num_double;\n// converting from int to double\nnum_double = (double)num_int;\n</code></pre>"},{"location":"week-6-cpp/ce103-week-6-cpp/#function-style-casting","title":"Function-style Casting","text":"<p>We can also use the function like notation to cast data from one type to another.</p> <p>The syntax for this style is:</p> <pre><code>data_type(expression);\n</code></pre> <p>For example,</p> <pre><code>// initializing int variable\nint num_int = 26;\n// declaring double variable\ndouble num_double;\n// converting from int to double\nnum_double = double(num_int);\n</code></pre>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-3-type-casting","title":"Example 3: Type Casting","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint main() {\n// initializing a double variable\ndouble num_double = 3.56;\ncout &lt;&lt; \"num_double = \" &lt;&lt; num_double &lt;&lt; endl;\n// C-style conversion from double to int\nint num_int1 = (int)num_double;\ncout &lt;&lt; \"num_int1   = \" &lt;&lt; num_int1 &lt;&lt; endl;\n// function-style conversion from double to int\nint num_int2 = int(num_double);\ncout &lt;&lt; \"num_int2   = \" &lt;&lt; num_int2 &lt;&lt; endl;\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>num_double = 3.56\nnum_int1   = 3\nnum_int2   = 3\n</code></pre> <p>We used both the\u00a0C style type conversion\u00a0and the\u00a0function-style casting for type conversion\u00a0and displayed the results. Since they perform the same task, both give us the same output.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#type-conversion-operators","title":"Type Conversion Operators","text":"<p>Besides these two type castings, C++ also has four operators for type conversion. They are known as\u00a0type conversion operators. They are:</p> <ul> <li><code>static_cast</code></li> <li><code>dynamic_cast</code></li> <li><code>const_cast</code></li> <li><code>reinterpret_cast</code></li> </ul> <p>We will learn about these casts in later tutorials.</p> <p>Recommended Tutorials:</p> <ul> <li>C++ string to int and Vice-versa</li> <li>C++ string to float, double and Vice-versa</li> </ul>"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-operators","title":"C++ Operators","text":"<p>In this tutorial, we will learn about the different types of operators in C++ with the help of examples. In programming, an operator is a symbol that operates on a value or a variable.</p> <p>Operators are symbols that perform operations on variables and values. For example,\u00a0<code>+</code>\u00a0is an operator used for addition, while\u00a0<code>-</code>\u00a0is an operator used for subtraction.</p> <p>Operators in C++ can be classified into 6 types:</p> <ol> <li>Arithmetic Operators</li> <li>Assignment Operators</li> <li>Relational Operators</li> <li>Logical Operators</li> <li>Bitwise Operators</li> <li>Other Operators</li> </ol>"},{"location":"week-6-cpp/ce103-week-6-cpp/#1-c-arithmetic-operators","title":"1. C++ Arithmetic Operators","text":"<p>Arithmetic operators are used to perform arithmetic operations on variables and data. For example,</p> <pre><code>a + b;\n</code></pre> <p>Here, the\u00a0<code>+</code>\u00a0operator is used to add two variables\u00a0a\u00a0and\u00a0b. Similarly there are various other arithmetic operators in C++.</p> Operator Operation <code>+</code> Addition <code>-</code> Subtraction <code>*</code> Multiplication <code>/</code> Division <code>%</code> Modulo Operation (Remainder after division)"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-1-arithmetic-operators","title":"Example 1: Arithmetic Operators","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint main() {\nint a, b;\na = 7;\nb = 2;\n// printing the sum of a and b\ncout &lt;&lt; \"a + b = \" &lt;&lt; (a + b) &lt;&lt; endl;\n// printing the difference of a and b\ncout &lt;&lt; \"a - b = \" &lt;&lt; (a - b) &lt;&lt; endl;\n// printing the product of a and b\ncout &lt;&lt; \"a * b = \" &lt;&lt; (a * b) &lt;&lt; endl;\n// printing the division of a by b\ncout &lt;&lt; \"a / b = \" &lt;&lt; (a / b) &lt;&lt; endl;\n// printing the modulo of a by b\ncout &lt;&lt; \"a % b = \" &lt;&lt; (a % b) &lt;&lt; endl;\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>a + b = 9\na - b = 5\na * b = 14\na / b = 3\na % b = 1\n</code></pre> <p>Here, the operators\u00a0<code>+</code>,\u00a0<code>-</code>\u00a0and\u00a0<code>*</code>\u00a0compute addition, subtraction, and multiplication respectively as we might have expected.</p> <p>/ Division Operator</p> <p>Note the operation\u00a0<code>(a / b)</code>\u00a0in our program. The\u00a0<code>/</code>\u00a0operator is the division operator.</p> <p>As we can see from the above example, if an integer is divided by another integer, we will get the quotient. However, if either divisor or dividend is a floating-point number, we will get the result in decimals.</p> <p>In C++,</p> <pre><code>7/2 is 3\n7.0 / 2 is 3.5\n7 / 2.0 is 3.5\n7.0 / 2.0 is 3.5\n</code></pre> <p>% Modulo Operator</p> <p>The modulo operator\u00a0<code>%</code>\u00a0computes the remainder. When\u00a0<code>a = 9</code>\u00a0is divided by\u00a0<code>b = 4</code>, the remainder is\u00a01.</p> <p>Note:\u00a0The\u00a0<code>%</code>\u00a0operator can only be used with integers.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#increment-and-decrement-operators","title":"Increment and Decrement Operators","text":"<p>C++ also provides increment and decrement operators:\u00a0<code>++</code>\u00a0and\u00a0<code>--</code>\u00a0respectively.</p> <ul> <li><code>++</code>\u00a0increases the value of the operand by\u00a01</li> <li><code>--</code>\u00a0decreases it by\u00a01</li> </ul> <p>For example,</p> <pre><code>int num = 5;\n// increment operator\n++num;  // 6\n</code></pre> <p>Here, the code\u00a0<code>++num;</code>\u00a0increases the value of\u00a0num\u00a0by\u00a01.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-2-increment-and-decrement-operators","title":"Example 2: Increment and Decrement Operators","text":"<pre><code>// Working of increment and decrement operators\n#include &lt;iostream&gt;\nusing namespace std;\nint main() {\nint a = 10, b = 100, result_a, result_b;\n// incrementing a by 1 and storing the result in result_a\nresult_a = ++a;\ncout &lt;&lt; \"result_a = \" &lt;&lt; result_a &lt;&lt; endl;\n// decrementing b by 1 and storing the result in result_b   \nresult_b = --b;\ncout &lt;&lt; \"result_b = \" &lt;&lt; result_b &lt;&lt; endl;\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>result_a = 11\nresult_b = 99\n</code></pre> <p>In the above program, we have used the\u00a0<code>++</code>\u00a0and\u00a0<code>--</code>\u00a0operators as\u00a0prefixes (++a and --b). However, we can also use these operators as\u00a0postfix (a++ and b--).</p> <p>To learn more, visit\u00a0increment and decrement operators.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#2-c-assignment-operators","title":"2. C++ Assignment Operators","text":"<p>In C++, assignment operators are used to assign values to variables. For example,</p> <pre><code>// assign 5 to a\na = 5;\n</code></pre> <p>Here, we have assigned a value of\u00a0<code>5</code>\u00a0to the variable\u00a0a.</p> Operator Example Equivalent to <code>=</code> <code>a = b;</code> <code>a = b;</code> <code>+=</code> <code>a += b;</code> <code>a = a + b;</code> <code>-=</code> <code>a -= b;</code> <code>a = a - b;</code> <code>*=</code> <code>a *= b;</code> <code>a = a * b;</code> <code>/=</code> <code>a /= b;</code> <code>a = a / b;</code> <code>%=</code> <code>a %= b;</code> <code>a = a % b;</code>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-3-assignment-operators","title":"Example 3: Assignment Operators","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint main() {\nint a, b;\n// 2 is assigned to a\na = 2;\n// 7 is assigned to b\nb = 7;\ncout &lt;&lt; \"a = \" &lt;&lt; a &lt;&lt; endl;\ncout &lt;&lt; \"b = \" &lt;&lt; b &lt;&lt; endl;\ncout &lt;&lt; \"\\nAfter a += b;\" &lt;&lt; endl;\n// assigning the sum of a and b to a\na += b;  // a = a +b\ncout &lt;&lt; \"a = \" &lt;&lt; a &lt;&lt; endl;\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>a = 2\nb = 7\nAfter a += b;\na = 9\n</code></pre>"},{"location":"week-6-cpp/ce103-week-6-cpp/#3-c-relational-operators","title":"3. C++ Relational Operators","text":"<p>A relational operator is used to check the relationship between two operands. For example,</p> <pre><code>// checks if a is greater than b\na &gt; b;\n</code></pre> <p>Here,\u00a0<code>&gt;</code>\u00a0is a relational operator. It checks if\u00a0a\u00a0is greater than\u00a0b\u00a0or not.</p> <p>If the relation is\u00a0true, it returns\u00a01\u00a0whereas if the relation is\u00a0false, it returns\u00a00.</p> Operator Meaning Example <code>==</code> Is Equal To <code>3 == 5</code> gives us false <code>!=</code> Not Equal To <code>3 != 5</code> gives us true <code>&gt;</code> Greater Than <code>3 &gt; 5</code> gives us false <code>&lt;</code> Less Than <code>3 &lt; 5</code> gives us true <code>&gt;=</code> Greater Than or Equal To <code>3 &gt;= 5</code> give us false <code>&lt;=</code> Less Than or Equal To <code>3 &lt;= 5</code> gives us true"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-4-relational-operators","title":"Example 4: Relational Operators","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint main() {\nint a, b;\na = 3;\nb = 5;\nbool result;\nresult = (a == b);   // false\ncout &lt;&lt; \"3 == 5 is \" &lt;&lt; result &lt;&lt; endl;\nresult = (a != b);  // true\ncout &lt;&lt; \"3 != 5 is \" &lt;&lt; result &lt;&lt; endl;\nresult = a &gt; b;   // false\ncout &lt;&lt; \"3 &gt; 5 is \" &lt;&lt; result &lt;&lt; endl;\nresult = a &lt; b;   // true\ncout &lt;&lt; \"3 &lt; 5 is \" &lt;&lt; result &lt;&lt; endl;\nresult = a &gt;= b;  // false\ncout &lt;&lt; \"3 &gt;= 5 is \" &lt;&lt; result &lt;&lt; endl;\nresult = a &lt;= b;  // true\ncout &lt;&lt; \"3 &lt;= 5 is \" &lt;&lt; result &lt;&lt; endl;\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>3 == 5 is 0\n3 != 5 is 1\n3 &gt; 5 is 0\n3 &lt; 5 is 1\n3 &gt;= 5 is 0\n3 &lt;= 5 is 1\n</code></pre> <p>Note: Relational operators are used in decision-making and loops.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#4-c-logical-operators","title":"4. C++ Logical Operators","text":"<p>Logical operators are used to check whether an expression is\u00a0true\u00a0or\u00a0false. If the expression is\u00a0true, it returns\u00a01\u00a0whereas if the expression is\u00a0false, it returns\u00a00.</p> Operator Example Meaning <code>&amp;&amp;</code> expression1 &amp;&amp; expression2 Logical AND.True only if all the operands are true. <code>\\|</code> expression1 | expression2 Logical OR.True if at least one of the operands is true. <code>!</code> **!**expression Logical NOT.True only if the operand is false. <p>In C++, logical operators are commonly used in decision making. To further understand the logical operators, let's see the following examples,</p> <pre><code>Suppose,\na = 5\nb = 8\nThen,\n(a &gt; 3) &amp;&amp; (b &gt; 5) evaluates to true\n(a &gt; 3)  &amp;&amp; (b &lt; 5) evaluates to false\n(a &gt; 3) || (b &gt; 5) evaluates to true\n(a &gt; 3) || (b &lt; 5) evaluates to true\n(a &lt; 3) || (b &lt; 5) evaluates to false\n!(a &lt; 3) evaluates to true\n!(a &gt; 3) evaluates to false\n</code></pre>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-5-logical-operators","title":"Example 5: Logical Operators","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint main() {\nbool result;\nresult = (3 != 5) &amp;&amp; (3 &lt; 5);     // true\ncout &lt;&lt; \"(3 != 5) &amp;&amp; (3 &lt; 5) is \" &lt;&lt; result &lt;&lt; endl;\nresult = (3 == 5) &amp;&amp; (3 &lt; 5);    // false\ncout &lt;&lt; \"(3 == 5) &amp;&amp; (3 &lt; 5) is \" &lt;&lt; result &lt;&lt; endl;\nresult = (3 == 5) &amp;&amp; (3 &gt; 5);    // false\ncout &lt;&lt; \"(3 == 5) &amp;&amp; (3 &gt; 5) is \" &lt;&lt; result &lt;&lt; endl;\nresult = (3 != 5) || (3 &lt; 5);    // true\ncout &lt;&lt; \"(3 != 5) || (3 &lt; 5) is \" &lt;&lt; result &lt;&lt; endl;\nresult = (3 != 5) || (3 &gt; 5);    // true\ncout &lt;&lt; \"(3 != 5) || (3 &gt; 5) is \" &lt;&lt; result &lt;&lt; endl;\nresult = (3 == 5) || (3 &gt; 5);    // false\ncout &lt;&lt; \"(3 == 5) || (3 &gt; 5) is \" &lt;&lt; result &lt;&lt; endl;\nresult = !(5 == 2);    // true\ncout &lt;&lt; \"!(5 == 2) is \" &lt;&lt; result &lt;&lt; endl;\nresult = !(5 == 5);    // false\ncout &lt;&lt; \"!(5 == 5) is \" &lt;&lt; result &lt;&lt; endl;\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Output</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#3-5-3-5-is-1-3-5-3-5-is-0-3-5-3-5-is-0-3-5-3-5-is-1-3-5-3-5-is-1-3-5-3-5-is-0-5-2-is-1-5-5-is-0","title":"<pre><code>(3 != 5) &amp;&amp; (3 &lt; 5) is 1\n(3 == 5) &amp;&amp; (3 &lt; 5) is 0\n(3 == 5) &amp;&amp; (3 &gt; 5) is 0\n(3 != 5) || (3 &lt; 5) is 1\n(3 != 5) || (3 &gt; 5) is 1\n(3 == 5) || (3 &gt; 5) is 0\n!(5 == 2) is 1\n!(5 == 5) is 0\n</code></pre>","text":"<p>Explanation of logical operator program</p> <ul> <li><code>(3 != 5) &amp;&amp; (3 &lt; 5)</code>\u00a0evaluates to\u00a01\u00a0because both operands\u00a0<code>(3 != 5)</code>\u00a0and\u00a0<code>(3 &lt; 5)</code>\u00a0are\u00a01\u00a0(true).</li> <li><code>(3 == 5) &amp;&amp; (3 &lt; 5)</code>\u00a0evaluates to\u00a00\u00a0because the operand\u00a0<code>(3 == 5)</code>\u00a0is\u00a00\u00a0(false).</li> <li><code>(3 == 5) &amp;&amp; (3 &gt; 5)</code>\u00a0evaluates to\u00a00\u00a0because both operands\u00a0<code>(3 == 5)</code>\u00a0and\u00a0<code>(3 &gt; 5)</code>\u00a0are\u00a00\u00a0(false).</li> <li><code>(3 != 5) || (3 &lt; 5)</code>\u00a0evaluates to\u00a01\u00a0because both operands\u00a0<code>(3 != 5)</code>\u00a0and\u00a0<code>(3 &lt; 5)</code>\u00a0are\u00a01\u00a0(true).</li> <li><code>(3 != 5) || (3 &gt; 5)</code>\u00a0evaluates to\u00a01\u00a0because the operand\u00a0<code>(3 != 5)</code>\u00a0is\u00a01\u00a0(true).</li> <li><code>(3 == 5) || (3 &gt; 5)</code>\u00a0evaluates to\u00a00\u00a0because both operands\u00a0<code>(3 == 5)</code>\u00a0and\u00a0<code>(3 &gt; 5)</code>\u00a0are\u00a00\u00a0(false).</li> <li><code>!(5 == 2)</code>\u00a0evaluates to\u00a01\u00a0because the operand\u00a0<code>(5 == 2)</code>\u00a0is\u00a00\u00a0(false).</li> <li><code>!(5 == 5)</code>\u00a0evaluates to\u00a00\u00a0because the operand\u00a0<code>(5 == 5)</code>\u00a0is\u00a01\u00a0(true).</li> </ul>"},{"location":"week-6-cpp/ce103-week-6-cpp/#5-c-bitwise-operators","title":"5. C++ Bitwise Operators","text":"<p>In C++, bitwise operators are used to perform operations on individual bits. They can only be used alongside\u00a0<code>char</code>\u00a0and\u00a0<code>int</code>\u00a0data types.</p> Operator Description <code>&amp;</code> Binary AND <code>\\|</code> Binary OR <code>^</code> Binary XOR <code>~</code> Binary One's Complement <code>&lt;&lt;</code> Binary Shift Left <code>&gt;&gt;</code> Binary Shift Right <p>To learn more, visit\u00a0C++ bitwise operators.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#6-other-c-operators","title":"6. Other C++ Operators","text":"<p>Here's a list of some other common operators available in C++. We will learn about them in later tutorials.</p> Operator Description Example <code>sizeof</code> returns the size of data type <code>sizeof(int); // 4</code> <code>?:</code> returns value based on the condition <code>string result = (5 &gt; 0) ? \"even\" : \"odd\"; // \"even\"</code> <code>&amp;</code> represents memory address of the operand <code>&amp;num; // address of num</code> <code>.</code> accesses members of struct variables or class objects <code>s1.marks = 92;</code> <code>-&gt;</code> used with pointers to access the class or struct variables <code>ptr-&gt;marks = 92;</code> <code>&lt;&lt;</code> prints the output value <code>cout &lt;&lt; 5;</code> <code>&gt;&gt;</code> gets the input value <code>cin &gt;&gt; num;</code>"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-comments","title":"C++ Comments","text":"<p>In this tutorial, we will learn about C++ comments, why we use them, and how to use them with the help of examples.</p> <p>C++ comments are hints that a programmer can add to make their code easier to read and understand. They are completely ignored by C++ compilers.</p> <p>There are two ways to add comments to code:</p> <p><code>//</code>\u00a0- Single Line Comments</p> <p><code>/* */</code>\u00a0-Multi-line Comments</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#single-line-comments","title":"Single Line Comments","text":"<p>In C++, any line that starts with\u00a0<code>//</code>\u00a0is a comment. For example,</p> <pre><code>// declaring a variable\nint a;\n// initializing the variable 'a' with the value 2\na = 2;\n</code></pre> <p>Here, we have used two single-line comments:</p> <ul> <li><code>// declaring a variable</code></li> <li><code>// initializing the variable 'a' with the value 2</code></li> </ul> <p>We can also use single line comment like this:</p> <pre><code>int a;    // declaring a variable\n</code></pre>"},{"location":"week-6-cpp/ce103-week-6-cpp/#multi-line-comments","title":"Multi-line comments","text":"<p>In C++, any line between\u00a0<code>/*</code>\u00a0and\u00a0<code>*/</code>\u00a0is also a comment. For example,</p> <pre><code>/* declaring a variableto store salary to employees*/\nint salary = 2000;\n</code></pre> <p>This syntax can be used to write both single-line and multi-line comments.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#using-comments-for-debugging","title":"Using Comments for Debugging","text":"<p>Comments can also be used to disable code to prevent it from being executed. For example,</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint main() {\ncout &lt;&lt; \"some code\";\ncout &lt;&lt; ''error code;   cout &lt;&lt; \"some other code\";   return 0;}\n</code></pre> <p>Run Code</p> <p>If we get an error while running the program, instead of removing the error-prone code, we can use comments to disable it from being executed; this can be a valuable debugging tool.</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint main() {\ncout &lt;&lt; \"some code\";\n// cout &lt;&lt; ''error code;\ncout &lt;&lt; \"some other code\";\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Pro Tip:\u00a0Remember the shortcut for using comments; it can be really helpful. For most code editors, it's\u00a0<code>Ctrl + /</code>\u00a0for Windows and\u00a0<code>Cmd + /</code>\u00a0for Mac.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#why-use-comments","title":"Why use Comments?","text":"<p>If we write comments on our code, it will be easier for us to understand the code in the future. Also, it will be easier for your fellow developers to understand the code.</p> <p>Note:\u00a0Comments shouldn't be the substitute for a way to explain poorly written code in English. We should always write well-structured and self-explanatory code. And, then use comments.</p> <p>As a general rule of thumb, use comments to explain\u00a0Why\u00a0you did something rather than\u00a0How\u00a0you did something, and you are good.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-flow-control","title":"C++ Flow Control","text":""},{"location":"week-6-cpp/ce103-week-6-cpp/#c-if-ifelse-and-nested-ifelse","title":"C++ if, if...else and Nested if...else","text":"<p>In this tutorial, we will learn about the if...else statement to create decision making programs with the help of examples.</p> <p>In computer programming, we use the\u00a0<code>if...else</code>\u00a0statement to run one block of code under certain conditions and another block of code under different conditions.</p> <p>For example, assigning grades (A, B, C) based on marks obtained by a student.</p> <ul> <li>if the percentage is above\u00a090, assign grade\u00a0A</li> <li>if the percentage is above\u00a075, assign grade\u00a0B</li> <li>if the percentage is above\u00a065, assign grade\u00a0C</li> </ul> <p>There are three forms of\u00a0<code>if...else</code>\u00a0statements in C++.</p> <ol> <li><code>if</code>\u00a0statement</li> <li><code>if...else</code>\u00a0statement</li> <li><code>if...else if...else</code>\u00a0statement</li> </ol>"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-if-statement","title":"C++ if Statement","text":"<p>The syntax of the\u00a0<code>if</code>\u00a0statement is:</p> <pre><code>if (condition) {\n// body of if statement\n}\n</code></pre> <p>The\u00a0<code>if</code>\u00a0statement evaluates the\u00a0<code>condition</code>\u00a0inside the parentheses\u00a0<code>( )</code>.</p> <ul> <li>If the\u00a0<code>condition</code>\u00a0evaluates to\u00a0<code>true</code>, the code inside the body of\u00a0<code>if</code>\u00a0is executed.</li> <li>If the\u00a0<code>condition</code>\u00a0evaluates to\u00a0<code>false</code>, the code inside the body of\u00a0<code>if</code>\u00a0is skipped.</li> </ul> <p>Note:\u00a0The code inside\u00a0<code>{ }</code>\u00a0is the body of the\u00a0<code>if</code>\u00a0statement.</p> <p></p> <p>How if Statement Works</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-1-c-if-statement","title":"Example 1: C++ if Statement","text":"<pre><code>// Program to print positive number entered by the user\n// If the user enters a negative number, it is skipped\n#include &lt;iostream&gt;\nusing namespace std;\nint main() {\nint number;\ncout &lt;&lt; \"Enter an integer: \";\ncin &gt;&gt; number;\n// checks if the number is positive\nif (number &gt; 0) {\ncout &lt;&lt; \"You entered a positive integer: \" &lt;&lt; number &lt;&lt; endl;\n}\ncout &lt;&lt; \"This statement is always executed.\";\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Output 1</p> <pre><code>Enter an integer: 5\nYou entered a positive number: 5\nThis statement is always executed.\n</code></pre> <p>When the user enters\u00a0<code>5</code>, the condition\u00a0<code>number &gt; 0</code>\u00a0is evaluated to\u00a0<code>true</code>\u00a0and the statement inside the body of\u00a0<code>if</code>\u00a0is executed.</p> <p>Output 2</p> <pre><code>Enter a number: -5\nThis statement is always executed.\n</code></pre> <p>When the user enters\u00a0<code>-5</code>, the condition\u00a0<code>number &gt; 0</code>\u00a0is evaluated to\u00a0<code>false</code>\u00a0and the statement inside the body of\u00a0<code>if</code>\u00a0is not executed.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-ifelse","title":"C++ if...else","text":"<p>The\u00a0<code>if</code>\u00a0statement can have an optional\u00a0<code>else</code>\u00a0clause. Its syntax is:</p> <pre><code>if (condition) {\n// block of code if condition is true\n}\nelse {\n// block of code if condition is false\n}\n</code></pre> <p>The\u00a0<code>if..else</code>\u00a0statement evaluates the\u00a0<code>condition</code>\u00a0inside the parenthesis.</p> <p></p> <p>How if...else Statement Works</p> <p>If the\u00a0<code>condition</code>\u00a0evaluates\u00a0<code>true</code>,</p> <ul> <li>the code inside the body of\u00a0<code>if</code>\u00a0is executed</li> <li>the code inside the body of\u00a0<code>else</code>\u00a0is skipped from execution</li> </ul> <p>If the\u00a0<code>condition</code>\u00a0evaluates\u00a0<code>false</code>,</p> <ul> <li>the code inside the body of\u00a0<code>else</code>\u00a0is executed</li> <li>the code inside the body of\u00a0<code>if</code>\u00a0is skipped from execution</li> </ul>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-2-c-ifelse-statement","title":"Example 2: C++ if...else Statement","text":"<pre><code>// Program to check whether an integer is positive or negative\n// This program considers 0 as a positive number\n#include &lt;iostream&gt;\nusing namespace std;\nint main() {\nint number;\ncout &lt;&lt; \"Enter an integer: \";\ncin &gt;&gt; number;\nif (number &gt;= 0) {\ncout &lt;&lt; \"You entered a positive integer: \" &lt;&lt; number &lt;&lt; endl;\n}\nelse {\ncout &lt;&lt; \"You entered a negative integer: \" &lt;&lt; number &lt;&lt; endl;\n}\ncout &lt;&lt; \"This line is always printed.\";\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Output 1</p> <pre><code>Enter an integer: 4\nYou entered a positive integer: 4.\nThis line is always printed.\n</code></pre> <p>In the above program, we have the condition\u00a0<code>number &gt;= 0</code>. If we enter the number greater or equal to\u00a00, then the condition evaluates\u00a0<code>true</code>.</p> <p>Here, we enter\u00a04. So, the condition is\u00a0<code>true</code>. Hence, the statement inside the body of\u00a0<code>if</code>\u00a0is executed.</p> <p>Output 2</p> <pre><code>Enter an integer: -4\nYou entered a negative integer: -4.\nThis line is always printed.\n</code></pre> <p>Here, we enter\u00a0-4. So, the condition is\u00a0<code>false</code>. Hence, the statement inside the body of\u00a0<code>else</code>\u00a0is executed.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-ifelseelse-if-statement","title":"C++ if...else...else if statement","text":"<p>The\u00a0<code>if...else</code>\u00a0statement is used to execute a block of code among two alternatives. However, if we need to make a choice between more than two alternatives, we use the\u00a0<code>if...else if...else</code>\u00a0statement.</p> <p>The syntax of the\u00a0<code>if...else if...else</code>\u00a0statement is:</p> <pre><code>if (condition1) {\n// code block 1\n}\nelse if (condition2){\n// code block 2\n}\nelse {\n// code block 3\n}\n</code></pre> <p>Here,</p> <ul> <li>If\u00a0<code>condition1</code>\u00a0evaluates to\u00a0<code>true</code>, the\u00a0<code>code block 1</code>\u00a0is executed.</li> <li>If\u00a0<code>condition1</code>\u00a0evaluates to\u00a0<code>false</code>, then\u00a0<code>condition2</code>\u00a0is evaluated.</li> <li>If\u00a0<code>condition2</code>\u00a0is\u00a0<code>true</code>, the\u00a0<code>code block 2</code>\u00a0is executed.</li> <li>If\u00a0<code>condition2</code>\u00a0is\u00a0<code>false</code>, the\u00a0<code>code block 3</code>\u00a0is executed.</li> </ul> <p></p> <p>How if...else if...else Statement Works</p> <p>Note:\u00a0There can be more than one\u00a0<code>else if</code>\u00a0statement but only one\u00a0<code>if</code>\u00a0and\u00a0<code>else</code>\u00a0statements.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-3-c-ifelseelse-if","title":"Example 3: C++ if...else...else if","text":"<pre><code>// Program to check whether an integer is positive, negative or zero\n#include &lt;iostream&gt;\nusing namespace std;\nint main() {\nint number;\ncout &lt;&lt; \"Enter an integer: \";\ncin &gt;&gt; number;\nif (number &gt; 0) {\ncout &lt;&lt; \"You entered a positive integer: \" &lt;&lt; number &lt;&lt; endl;\n} else if (number &lt; 0) {\ncout &lt;&lt; \"You entered a negative integer: \" &lt;&lt; number &lt;&lt; endl;\n} else {\ncout &lt;&lt; \"You entered 0.\" &lt;&lt; endl;\n}\ncout &lt;&lt; \"This line is always printed.\";\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Output 1</p> <pre><code>Enter an integer: 1\nYou entered a positive integer: 1.\nThis line is always printed.\n</code></pre> <p>Output 2</p> <pre><code>Enter an integer: -2\nYou entered a negative integer: -2.\nThis line is always printed.\n</code></pre> <p>Output 3</p> <pre><code>Enter an integer: 0\nYou entered 0.\nThis line is always printed.\n</code></pre> <p>In this program, we take a number from the user. We then use the\u00a0<code>if...else if...else</code>\u00a0ladder to check whether the number is positive, negative, or zero.</p> <p>If the number is greater than\u00a0<code>0</code>, the code inside the\u00a0<code>if</code>\u00a0block is executed. If the number is less than\u00a0<code>0</code>, the code inside the\u00a0<code>else if</code>\u00a0block is executed. Otherwise, the code inside the\u00a0<code>else</code>\u00a0block is executed.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-nested-ifelse","title":"C++ Nested if...else","text":"<p>Sometimes, we need to use an\u00a0<code>if</code>\u00a0statement inside another\u00a0<code>if</code>\u00a0statement. This is known as nested\u00a0<code>if</code>\u00a0statement.</p> <p>Think of it as multiple layers of\u00a0<code>if</code>\u00a0statements. There is a first, outer\u00a0<code>if</code>\u00a0statement, and inside it is another, inner\u00a0<code>if</code>\u00a0statement. Its syntax is:</p> <pre><code>// outer if statement\nif (condition1) {\n// statements\n// inner if statement\nif (condition2) {\n// statements\n}\n}\n</code></pre> <p>Notes:</p> <ul> <li>We can add\u00a0<code>else</code>\u00a0and\u00a0<code>else if</code>\u00a0statements to the inner\u00a0<code>if</code>\u00a0statement as required.</li> <li>The inner\u00a0<code>if</code>\u00a0statement can also be inserted inside the outer\u00a0<code>else</code>\u00a0or\u00a0<code>else if</code>\u00a0statements (if they exist).</li> <li>We can nest multiple layers of\u00a0<code>if</code>\u00a0statements.</li> </ul>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-4-c-nested-if","title":"Example 4: C++ Nested if","text":"<pre><code>// C++ program to find if an integer is positive, negative or zero\n// using nested if statements\n#include &lt;iostream&gt;\nusing namespace std;\nint main() {\nint num;\ncout &lt;&lt; \"Enter an integer: \";  cin &gt;&gt; num;    // outer if condition\nif (num != 0) {\n// inner if condition\nif (num &gt; 0) {\ncout &lt;&lt; \"The number is positive.\" &lt;&lt; endl;\n}\n// inner else condition\nelse {\ncout &lt;&lt; \"The number is negative.\" &lt;&lt; endl;\n}  }\n// outer else condition\nelse {\ncout &lt;&lt; \"The number is 0 and it is neither positive nor negative.\" &lt;&lt; endl;\n}\ncout &lt;&lt; \"This line is always printed.\" &lt;&lt; endl;\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Output 1</p> <pre><code>Enter an integer: 35\nThe number is positive.\nThis line is always printed.\n</code></pre> <p>Output 2</p> <pre><code>Enter an integer: -35\nThe number is negative.\nThis line is always printed.\n</code></pre> <p>Output 3</p> <pre><code>Enter an integer: 0\nThe number is 0 and it is neither positive nor negative.\nThis line is always printed.\n</code></pre> <p>In the above example,</p> <ul> <li>We take an integer as an input from the user and store it in the variable\u00a0num.</li> <li>We then use an\u00a0<code>if...else</code>\u00a0statement to check whether num is not equal to\u00a0<code>0</code>.</li> <li>If\u00a0<code>true</code>, then the\u00a0inner <code>if...else</code>\u00a0statement is executed.</li> <li>If\u00a0<code>false</code>, the code inside the\u00a0outer <code>else</code>\u00a0condition is executed, which prints\u00a0<code>\"The number is 0 and it is neither positive nor negative.\"</code></li> <li>The\u00a0inner <code>if...else</code>\u00a0statement checks whether the input number is positive i.e. if\u00a0num\u00a0is greater than\u00a00.</li> <li>If\u00a0<code>true</code>, then we print a statement saying that the number is positive.</li> <li>If\u00a0<code>false</code>, we print that the number is negative.</li> </ul> <p>Note:\u00a0As you can see, nested\u00a0<code>if...else</code>\u00a0makes your logic complicated. If possible, you should always try to avoid nested\u00a0<code>if...else</code>.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#body-of-ifelse-with-only-one-statement","title":"Body of if...else With Only One Statement","text":"<p>If the body of\u00a0<code>if...else</code>\u00a0has only one statement, you can omit\u00a0<code>{ }</code>\u00a0in the program. For example, you can replace</p> <pre><code>int number = 5;\nif (number &gt; 0) {\ncout &lt;&lt; \"The number is positive.\" &lt;&lt; endl;\n}\nelse {\ncout &lt;&lt; \"The number is negative.\" &lt;&lt; endl;\n}\n</code></pre> <p>with</p> <pre><code>int number = 5;\nif (number &gt; 0)\ncout &lt;&lt; \"The number is positive.\" &lt;&lt; endl;\nelse\ncout &lt;&lt; \"The number is negative.\" &lt;&lt; endl;\n</code></pre> <p>The output of both programs will be the same.</p> <p>Note:\u00a0Although it's not necessary to use\u00a0<code>{ }</code>\u00a0if the body of\u00a0<code>if...else</code>\u00a0has only one statement, using\u00a0<code>{ }</code>\u00a0makes your code more readable.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#more-on-decision-making","title":"More on Decision Making","text":"<p>In certain situations, a\u00a0ternary operator\u00a0can replace an\u00a0<code>if...else</code>\u00a0statement. To learn more, visit\u00a0C++ Ternary Operator.</p> <p>If we need to make a choice between more than one alternatives based on a given test condition, the\u00a0<code>switch</code>\u00a0statement can be used. To learn more, visit\u00a0C++ switch.</p> <p>Check out these examples to learn more:</p> <p>C++ Program to Check Whether Number is Even or Odd</p> <p>C++ Program to Check Whether a character is Vowel or Consonant.</p> <p>C++ Program to Find Largest Number Among Three Numbers</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-for-loop","title":"C++ for Loop","text":"<p>In this tutorial, we will learn about the C++ for loop and its working with the help of some examples.</p> <p>In computer programming, loops are used to repeat a block of code.</p> <p>For example, let's say we want to show a message 100 times. Then instead of writing the print statement 100 times, we can use a loop.</p> <p>That was just a simple example; we can achieve much more efficiency and sophistication in our programs by making effective use of loops.</p> <p>There are 3 types of loops in C++.</p> <ul> <li><code>for</code>\u00a0loop</li> <li><code>while</code>\u00a0loop</li> <li><code>do...while</code>\u00a0loop</li> </ul> <p>This tutorial focuses on C++\u00a0<code>for</code>\u00a0loop. We will learn about the other type of loops in the upcoming tutorials.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-for-loop_1","title":"C++ for loop","text":"<p>The syntax of for-loop is:</p> <pre><code>for (initialization; condition; update) {\n// body of-loop \n}\n</code></pre> <p>Here,</p> <ul> <li><code>initialization</code>\u00a0- initializes variables and is executed only once</li> <li><code>condition</code>\u00a0- if\u00a0<code>true</code>, the body of\u00a0<code>for</code>\u00a0loop is executed   if\u00a0<code>false</code>, the for loop is terminated</li> <li><code>update</code>\u00a0- updates the value of initialized variables and again checks the condition</li> </ul> <p>To learn more about\u00a0<code>conditions</code>, check out our tutorial on\u00a0C++ Relational and Logical Operators.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#flowchart-of-for-loop-in-c","title":"Flowchart of for Loop in C++","text":"<p>Flowchart of for loop in C++</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-1-printing-numbers-from-1-to-5","title":"Example 1: Printing Numbers From 1 to 5","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint main() {\nfor (int i = 1; i &lt;= 5; ++i) {\ncout &lt;&lt; i &lt;&lt; \" \";\n}\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>1 2 3 4 5\n</code></pre> <p>Here is how this program works</p> Iteration Variable i &lt;= 5 Action 1st <code>i = 1</code> <code>true</code> 1 is printed. <code>i</code> is increased to <code>2</code>. 2nd <code>i = 2</code> <code>true</code> 2 is printed. <code>i</code> is increased to <code>3</code>. 3rd <code>i = 3</code> <code>true</code> 3 is printed. <code>i</code> is increased to <code>4</code>. 4th <code>i = 4</code> <code>true</code> 4 is printed. <code>i</code> is increased to <code>5</code>. 5th <code>i = 5</code> <code>true</code> 5 is printed. <code>i</code> is increased to <code>6</code>. 6th <code>i = 6</code> <code>false</code> The loop is terminated"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-2-display-a-text-5-times","title":"Example 2: Display a text 5 times","text":"<pre><code>// C++ Program to display a text 5 times\n#include &lt;iostream&gt;\nusing namespace std;\nint main() {\nfor (int i = 1; i &lt;= 5; ++i) {\ncout &lt;&lt;  \"Hello World! \" &lt;&lt; endl;\n}\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>Hello World!\nHello World!\nHello World!\nHello World!\nHello World!\n</code></pre> <p>Here is how this program works</p> Iteration Variable i &lt;= 5 Action 1st <code>i = 1</code> <code>true</code> Hello World! is printed and <code>i</code> is increased to <code>2</code>. 2nd <code>i = 2</code> <code>true</code> Hello World! is printed and <code>i</code> is increased to <code>3</code>. 3rd <code>i = 3</code> <code>true</code> Hello World! is printed and <code>i</code> is increased to <code>4</code>. 4th <code>i = 4</code> <code>true</code> Hello World! is printed and <code>i</code> is increased to <code>5</code>. 5th <code>i = 5</code> <code>true</code> Hello World! is printed and <code>i</code> is increased to <code>6</code>. 6th <code>i = 6</code> <code>false</code> The loop is terminated"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-3-find-the-sum-of-first-n-natural-numbers","title":"Example 3: Find the sum of first n Natural Numbers","text":"<pre><code>// C++ program to find the sum of first n natural numbers\n// positive integers such as 1,2,3,...n are known as natural numbers\n#include &lt;iostream&gt;\nusing namespace std;\nint main() {\nint num, sum;\nsum = 0;\ncout &lt;&lt; \"Enter a positive integer: \";\ncin &gt;&gt; num;\nfor (int i = 1; i &lt;= num; ++i) {\nsum += i;\n}\ncout &lt;&lt; \"Sum = \" &lt;&lt; sum &lt;&lt; endl;\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>Enter a positive integer: 10\nSum = 55\n</code></pre> <p>In the above example, we have two variables\u00a0num\u00a0and\u00a0sum. The\u00a0sum\u00a0variable is assigned with\u00a00\u00a0and the\u00a0num\u00a0variable is assigned with the value provided by the user.</p> <p>Note that we have used a\u00a0<code>for</code>\u00a0loop.</p> <pre><code>for(int i = 1; i &lt;= num; ++i)\n</code></pre> <p>Here,</p> <ul> <li><code>int i\u00a0= 1</code>: initializes the\u00a0i\u00a0variable</li> <li><code>i &lt;= num</code>: runs the loop as long as\u00a0i\u00a0is less than or equal to\u00a0num</li> <li><code>++i</code>: increases the\u00a0i\u00a0variable by 1 in each iteration</li> </ul> <p>When\u00a0i\u00a0becomes\u00a0<code>11</code>, the\u00a0<code>condition</code>\u00a0is\u00a0<code>false</code>\u00a0and\u00a0sum\u00a0will be equal to\u00a0<code>0 + 1 + 2 + ... + 10</code>.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#ranged-based-for-loop","title":"Ranged Based for Loop","text":"<p>In C++11, a new range-based\u00a0<code>for</code>\u00a0loop was introduced to work with collections such as\u00a0arrays\u00a0and\u00a0vectors. Its syntax is:</p> <pre><code>for (variable : collection) {\n// body of loop\n}\n</code></pre> <p>Here, for every value in the\u00a0collection, the for loop is executed and the value is assigned to the\u00a0variable.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-4-range-based-for-loop","title":"Example 4: Range Based for Loop","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint main() {\nint num_array[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\nfor (int n : num_array) {\ncout &lt;&lt; n &lt;&lt; \" \";\n}\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>1 2 3 4 5 6 7 8 9 10\n</code></pre> <p>In the above program, we have declared and initialized an\u00a0<code>int</code>\u00a0array named\u00a0num_array. It has 10 items.</p> <p>Here, we have used a range-based\u00a0<code>for</code>\u00a0loop to access all the items in the array.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-infinite-for-loop","title":"C++ Infinite for loop","text":"<p>If the\u00a0<code>condition</code>\u00a0in a\u00a0<code>for</code>\u00a0loop is always\u00a0<code>true</code>, it runs forever (until memory is full). For example,</p> <pre><code>// infinite for loop\nfor(int i = 1; i &gt; 0; i++) {\n// block of code\n}\n</code></pre> <p>In the above program, the\u00a0<code>condition</code>\u00a0is always\u00a0<code>true</code>\u00a0which will then run the code for infinite times.</p> <p>Check out these examples to learn more:</p> <ul> <li>C++ Program to Calculate Sum of Natural Numbers</li> <li>C++ Program to Find Factorial</li> <li>C++ Program to Generate Multiplication Table</li> </ul> <p>In the next tutorial, we will learn about\u00a0<code>while</code>\u00a0and\u00a0<code>do...while</code>\u00a0loop.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-while-and-dowhile-loop","title":"C++ while and do...while Loop","text":"<p>In this tutorial, we will learn the use of while and do...while loops in C++ programming with the help of some examples.</p> <p>In computer programming, loops are used to repeat a block of code.</p> <p>For example, let's say we want to show a message 100 times. Then instead of writing the print statement 100 times, we can use a loop.</p> <p>That was just a simple example;\u00a0we can achieve much more efficiency and sophistication in our programs by making effective use of\u00a0loops.</p> <p>There are\u00a03\u00a0types of loops in C++.</p> <ol> <li><code>for</code>\u00a0loop</li> <li><code>while</code>\u00a0loop</li> <li><code>do...while</code>\u00a0loop</li> </ol> <p>In the previous tutorial, we learned about the\u00a0C++ for loop. Here, we are going to learn about\u00a0<code>while</code>\u00a0and\u00a0<code>do...while</code>\u00a0loops.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-while-loop","title":"C++ while Loop","text":"<p>The syntax of the\u00a0<code>while</code>\u00a0loop is:</p> <pre><code>while (condition) {\n// body of the loop\n}\n</code></pre> <p>Here,</p> <ul> <li>A\u00a0<code>while</code>\u00a0loop evaluates the\u00a0<code>condition</code></li> <li>If the\u00a0<code>condition</code>\u00a0evaluates to\u00a0<code>true</code>, the code inside the\u00a0<code>while</code>\u00a0loop is executed.</li> <li>The\u00a0<code>condition</code>\u00a0is evaluated again.</li> <li>This process continues until the\u00a0<code>condition</code>\u00a0is\u00a0<code>false</code>.</li> <li>When the\u00a0<code>condition</code>\u00a0evaluates to\u00a0<code>false</code>, the loop terminates.</li> </ul> <p>To learn more about the\u00a0<code>conditions</code>, visit\u00a0C++ Relational and Logical Operators.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#flowchart-of-while-loop","title":"Flowchart of while Loop","text":"<p>Flowchart of C++ while loop</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-1-display-numbers-from-1-to-5","title":"Example 1: Display Numbers from 1 to 5","text":"<pre><code>// C++ Program to print numbers from 1 to 5\n#include &lt;iostream&gt;\nusing namespace std;\nint main() {\nint i = 1; // while loop from 1 to 5\nwhile (i &lt;= 5) {\ncout &lt;&lt; i &lt;&lt; \" \";\n++i;\n}\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>1 2 3 4 5\n</code></pre> <p>Here is how the program works.</p> Iteration Variable i &lt;= 5 Action 1st <code>i = 1</code> <code>true</code> 1 is printed and <code>i</code> is increased to <code>2</code>. 2nd <code>i = 2</code> <code>true</code> 2 is printed and <code>i</code> is increased to <code>3</code>. 3rd <code>i = 3</code> <code>true</code> 3 is printed and <code>i</code> is increased to <code>4</code> 4th <code>i = 4</code> <code>true</code> 4 is printed and <code>i</code> is increased to <code>5</code>. 5th <code>i = 5</code> <code>true</code> 5 is printed and <code>i</code> is increased to <code>6</code>. 6th <code>i = 6</code> <code>false</code> The loop is terminated"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-2-sum-of-positive-numbers-only","title":"Example 2: Sum of Positive Numbers Only","text":"<pre><code>// program to find the sum of positive numbers\n// if the user enters a negative number, the loop ends\n// the negative number entered is not added to the sum\n#include &lt;iostream&gt;\nusing namespace std;\nint main() {\nint number;\nint sum = 0;\n// take input from the user\ncout &lt;&lt; \"Enter a number: \";\ncin &gt;&gt; number;\nwhile (number &gt;= 0) {\n// add all positive numbers\nsum += number;\n// take input again if the number is positive\ncout &lt;&lt; \"Enter a number: \";\ncin &gt;&gt; number;\n}\n// display the sum\ncout &lt;&lt; \"\\nThe sum is \" &lt;&lt; sum &lt;&lt; endl;\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>Enter a number: 6\nEnter a number: 12\nEnter a number: 7\nEnter a number: 0\nEnter a number: -2\nThe sum is 25\n</code></pre> <p>In this program, the user is prompted to enter a number, which is stored in the variable\u00a0number.</p> <p>In order to store the sum of the numbers, we declare a variable\u00a0sum\u00a0and initialize it to the value of\u00a0<code>0</code>.</p> <p>The\u00a0<code>while</code>\u00a0loop continues until the user enters a negative number. During each iteration, the number entered by the user is added to the\u00a0sum\u00a0variable.</p> <p>When the user enters a negative number, the loop terminates. Finally, the total sum is displayed.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-dowhile-loop","title":"C++ do...while Loop","text":"<p>The\u00a0<code>do...while</code>\u00a0loop is a variant of the\u00a0<code>while</code>\u00a0loop with one important difference: the body of\u00a0<code>do...while</code>\u00a0loop is executed once before the\u00a0<code>condition</code>\u00a0is checked.</p> <p>Its syntax is:</p> <pre><code>do {\n// body of loop;\n}\nwhile (condition);\n</code></pre> <p>Here,</p> <ul> <li>The body of the loop is executed at first. Then the\u00a0<code>condition</code>\u00a0is evaluated.</li> <li>If the\u00a0<code>condition</code>\u00a0evaluates to\u00a0<code>true</code>, the body of the loop inside the\u00a0<code>do</code>\u00a0statement is executed again.</li> <li>The\u00a0<code>condition</code>\u00a0is evaluated once again.</li> <li>If the\u00a0<code>condition</code>\u00a0evaluates to\u00a0<code>true</code>, the body of the loop inside the\u00a0<code>do</code>\u00a0statement is executed again.</li> <li>This process continues until the\u00a0<code>condition</code>\u00a0evaluates to\u00a0<code>false</code>. Then the loop stops.</li> </ul>"},{"location":"week-6-cpp/ce103-week-6-cpp/#flowchart-of-dowhile-loop","title":"Flowchart of do...while Loop","text":"<p>Flowchart of C++ do...while loop</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-3-display-numbers-from-1-to-5","title":"Example 3: Display Numbers from 1 to 5","text":"<pre><code>// C++ Program to print numbers from 1 to 5\n#include &lt;iostream&gt;\nusing namespace std;\nint main() {\nint i = 1; // do...while loop from 1 to 5\ndo {\ncout &lt;&lt; i &lt;&lt; \" \";\n++i;\n}\nwhile (i &lt;= 5);\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>1 2 3 4 5\n</code></pre> <p>Here is how the program works.</p> Iteration Variable i &lt;= 5 Action <code>i = 1</code> not checked 1 is printed and <code>i</code> is increased to 2 1st <code>i = 2</code> <code>true</code> 2 is printed and <code>i</code> is increased to 3 2nd <code>i = 3</code> <code>true</code> 3 is printed and <code>i</code> is increased to 4 3rd <code>i = 4</code> <code>true</code> 4 is printed and <code>i</code> is increased to 5 4th <code>i = 5</code> <code>true</code> 5 is printed and <code>i</code> is increased to 6 5th <code>i = 6</code> <code>false</code> The loop is terminated"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-4-sum-of-positive-numbers-only","title":"Example 4: Sum of Positive Numbers Only","text":"<pre><code>// program to find the sum of positive numbers\n// If the user enters a negative number, the loop ends\n// the negative number entered is not added to the sum\n#include &lt;iostream&gt;\nusing namespace std;\nint main() {\nint number = 0;\nint sum = 0;\ndo {\nsum += number;\n// take input from the user\ncout &lt;&lt; \"Enter a number: \";\ncin &gt;&gt; number;\n}\nwhile (number &gt;= 0);\n// display the sum\ncout &lt;&lt; \"\\nThe sum is \" &lt;&lt; sum &lt;&lt; endl;\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Output 1</p> <pre><code>Enter a number: 6\nEnter a number: 12\nEnter a number: 7\nEnter a number: 0\nEnter a number: -2\nThe sum is 25\n</code></pre> <p>Here, the\u00a0<code>do...while</code>\u00a0loop continues until the user enters a negative number. When the number is negative, the loop terminates; the negative number is not added to the\u00a0<code>sum</code>\u00a0variable.</p> <p>Output 2</p> <pre><code>Enter a number: -6\nThe sum is 0.\n</code></pre> <p>The body of the\u00a0<code>do...while</code>\u00a0loop runs only once if the user enters a negative number.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#infinite-while-loop","title":"Infinite while loop","text":"<p>If the\u00a0<code>condition</code>\u00a0of a loop is always\u00a0<code>true</code>, the loop runs for infinite times (until the memory is full). For example,</p> <pre><code>// infinite while loop\nwhile(true) {\n// body of the loop\n}\n</code></pre> <p>Here is an example of an infinite\u00a0<code>do...while</code>\u00a0loop.</p> <pre><code>// infinite do...while loop\nint count = 1;\ndo {\n// body of loop\n} while(count == 1);\n</code></pre> <p>In the above programs, the\u00a0<code>condition</code>\u00a0is always\u00a0<code>true</code>. Hence, the loop body will run for infinite times.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#for-vs-while-loops","title":"for vs while loops","text":"<p>A\u00a0<code>for</code>\u00a0loop is usually used when the number of iterations is known. For example,</p> <pre><code>// This loop is iterated 5 times\nfor (int i = 1; i &lt;=5; ++i) {\n// body of the loop\n}\n</code></pre> <p>Here, we know that the for-loop will be executed 5 times.</p> <p>However,\u00a0<code>while</code>\u00a0and\u00a0<code>do...while</code>\u00a0loops are usually used when the number of iterations is unknown. For example,</p> <pre><code>while (condition) {\n// body of the loop\n}\n</code></pre> <p>Check out these examples to learn more:</p> <ul> <li>C++ Program to Display Fibonacci Series</li> <li>C++ Program to Find GCD</li> <li>C++ Program to Find LCM</li> </ul>"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-break-statement","title":"C++ break Statement","text":"<p>In this tutorial, we will learn about the break statement and its working in loops with the help of examples.</p> <p>In C++, the\u00a0<code>break</code>\u00a0statement terminates the loop when it is encountered.</p> <p>The syntax of the\u00a0<code>break</code>\u00a0statement is:</p> <pre><code>break;\n</code></pre> <p>Before you learn about the\u00a0<code>break</code>\u00a0statement, make sure you know about:</p> <ul> <li>C++ for loop</li> <li>C++ if...else</li> <li>C++ while loop</li> </ul>"},{"location":"week-6-cpp/ce103-week-6-cpp/#working-of-c-break-statement","title":"Working of C++ break Statement","text":"<p>Working of break statement in C++</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-1-break-with-for-loop","title":"Example 1: break with for loop","text":"<pre><code>// program to print the value of i\n#include &lt;iostream&gt;\nusing namespace std;\nint main() {\nfor (int i = 1; i &lt;= 5; i++) {\n// break condition     \nif (i == 3) {\nbreak;\n}\ncout &lt;&lt; i &lt;&lt; endl;\n}\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>1\n2\n</code></pre> <p>In the above program, the\u00a0<code>for</code>\u00a0loop is used to print the value of\u00a0i\u00a0in each iteration. Here, notice the code:</p> <pre><code>if (i == 3) {\nbreak;\n}\n</code></pre> <p>This means, when\u00a0i\u00a0is equal to\u00a03, the\u00a0<code>break</code>\u00a0statement terminates the loop. Hence, the output doesn't include values greater than or equal to 3.</p> <p>Note: The\u00a0<code>break</code>\u00a0statement is usually used with decision-making statements.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-2-break-with-while-loop","title":"Example 2: break with while loop","text":"<pre><code>// program to find the sum of positive numbers\n// if the user enters a negative numbers, break ends the loop\n// the negative number entered is not added to sum\n#include &lt;iostream&gt;\nusing namespace std;\nint main() {\nint number;\nint sum = 0;\nwhile (true) {\n// take input from the user\ncout &lt;&lt; \"Enter a number: \";\ncin &gt;&gt; number;\n// break condition\nif (number &lt; 0) {\nbreak;\n}\n// add all positive numbers\nsum += number;\n}\n// display the sum\ncout &lt;&lt; \"The sum is \" &lt;&lt; sum &lt;&lt; endl;\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>Enter a number: 1\nEnter a number: 2\nEnter a number: 3\nEnter a number: -5\nThe sum is 6. </code></pre> <p>In the above program, the user enters a number. The\u00a0<code>while</code>\u00a0loop is used to print the total sum of numbers entered by the user. Here, notice the code,</p> <pre><code>if(number &lt; 0) {\nbreak;\n}\n</code></pre> <p>This means, when the user enters a negative number, the\u00a0<code>break</code>\u00a0statement terminates the loop and codes outside the loop are executed.</p> <p>The\u00a0<code>while</code>\u00a0loop continues until the user enters a negative number.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#break-with-nested-loop","title":"break with Nested loop","text":"<p>When\u00a0<code>break</code>\u00a0is used with nested loops,\u00a0<code>break</code>\u00a0terminates the inner loop. For example,</p> <pre><code>// using break statement inside\n// nested for loop\n#include &lt;iostream&gt;\nusing namespace std;\nint main() {\nint number;\nint sum = 0;\n// nested for loops\n// first loop\nfor (int i = 1; i &lt;= 3; i++) {\n// second loop\nfor (int j = 1; j &lt;= 3; j++) {\nif (i == 2) {\nbreak;\n}\ncout &lt;&lt; \"i = \" &lt;&lt; i &lt;&lt; \", j = \" &lt;&lt; j &lt;&lt; endl;\n}\n}\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>i = 1, j = 1\ni = 1, j = 2\ni = 1, j = 3\ni = 3, j = 1\ni = 3, j = 2\ni = 3, j = 3\n</code></pre> <p>In the above program, the\u00a0<code>break</code>\u00a0statement is executed when\u00a0<code>i == 2</code>. It terminates the inner loop, and the control flow of the program moves to the outer loop.</p> <p>Hence, the value of\u00a0i = 2\u00a0is never displayed in the output.</p> <p>The\u00a0<code>break</code>\u00a0statement is also used with the\u00a0<code>switch</code>\u00a0statement. To learn more, visit\u00a0C++ switch statement.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-continue-statement","title":"C++ continue Statement","text":"<p>In this tutorial, we will learn about the continue statement and its working with loops with the help of examples.</p> <p>In computer programming, the\u00a0<code>continue</code>\u00a0statement is used to skip the current iteration of the loop and the control of the program goes to the next iteration.</p> <p>The syntax of the\u00a0<code>continue</code>\u00a0statement is:</p> <pre><code>continue;\n</code></pre> <p>Before you learn about the continue statement, make sure you know about,</p> <ul> <li>C++ for loop</li> <li>C++ if...else</li> <li>C++ while loop</li> </ul>"},{"location":"week-6-cpp/ce103-week-6-cpp/#working-of-c-continue-statement","title":"Working of C++ continue Statement","text":"<p>Working of continue statement in C++</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-1-continue-with-for-loop","title":"Example 1: continue with for loop","text":"<p>In a\u00a0<code>for</code>\u00a0loop,\u00a0<code>continue</code>\u00a0skips the current iteration and the control flow jumps to the\u00a0<code>update</code>\u00a0expression.</p> <pre><code>// program to print the value of i\n#include &lt;iostream&gt;\nusing namespace std;\nint main() {\nfor (int i = 1; i &lt;= 5; i++) {\n// condition to continue\nif (i == 3) {\ncontinue;\n}\ncout &lt;&lt; i &lt;&lt; endl;\n}\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>1\n2\n4\n5\n</code></pre> <p>In the above program, we have used the the\u00a0<code>for</code>\u00a0loop to print the value of\u00a0i\u00a0in each iteration. Here, notice the code,</p> <pre><code>if (i == 3) {\ncontinue;\n}\n</code></pre> <p>This means</p> <ul> <li>When\u00a0i\u00a0is equal to\u00a0<code>3</code>, the\u00a0<code>continue</code>\u00a0statement skips the current iteration and starts the next iteration</li> <li>Then,\u00a0i\u00a0becomes\u00a0<code>4</code>,\u00a0and the\u00a0<code>condition</code>\u00a0is evaluated again.</li> <li>Hence,\u00a0<code>4</code>\u00a0and\u00a0<code>5</code>\u00a0are printed in the next two iterations.</li> </ul> <p>Note: The\u00a0<code>continue</code>\u00a0statement is almost always used with decision-making statements.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-2-continue-with-while-loop","title":"Example 2: continue with while loop","text":"<p>In a\u00a0<code>while</code>\u00a0loop,\u00a0<code>continue</code>\u00a0skips the current iteration and control flow of the program jumps back to the\u00a0<code>while</code> <code>condition</code>.</p> <pre><code>// program to calculate positive numbers till 50 only\n// if the user enters a negative number,\n// that number is skipped from the calculation\n// negative number -&gt; loop terminate\n// numbers above 50 -&gt; skip iteration\n#include &lt;iostream&gt;\nusing namespace std;\nint main() {\nint sum = 0;\nint number = 0;\nwhile (number &gt;= 0) {\n// add all positive numbers\nsum += number;\n// take input from the user\ncout &lt;&lt; \"Enter a number: \";\ncin &gt;&gt; number;\n// continue condition\nif (number &gt; 50) {\ncout &lt;&lt; \"The number is greater than 50 and won't be calculated.\" &lt;&lt; endl;\nnumber = 0;  // the value of number is made 0 again\ncontinue;\n}\n}\n// display the sum\ncout &lt;&lt; \"The sum is \" &lt;&lt; sum &lt;&lt; endl;\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>Enter a number: 12\nEnter a number: 0\nEnter a number: 2\nEnter a number: 30\nEnter a number: 50\nEnter a number: 56\nThe number is greater than 50 and won't be calculated.\nEnter a number: 5\nEnter a number: -3\nThe sum is 99 </code></pre> <p>In the above program, the user enters a number. The\u00a0<code>while</code>\u00a0loop is used to print the total sum of positive numbers entered by the user, as long as the numbers entered are not greater than\u00a0<code>50</code>.</p> <p>Notice the use of the\u00a0<code>continue</code>\u00a0statement.</p> <pre><code> if (number &gt; 50){\ncontinue;\n}\n</code></pre> <ul> <li>When the user enters a number greater than\u00a0<code>50</code>, the\u00a0<code>continue</code>\u00a0statement skips the current iteration. Then the control flow of the program goes to the\u00a0<code>condition</code>\u00a0of\u00a0<code>while</code>\u00a0loop.</li> <li>When the user enters a number less than\u00a0<code>0</code>, the loop terminates.</li> </ul> <p>Note: The\u00a0<code>continue</code>\u00a0statement works in the same way for the\u00a0<code>do...while</code>\u00a0loops.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#continue-with-nested-loop","title":"continue with Nested loop","text":"<p>When\u00a0<code>continue</code>\u00a0is used with nested loops, it skips the current iteration of the inner loop. For example,</p> <pre><code>// using continue statement inside\n// nested for loop\n#include &lt;iostream&gt;\nusing namespace std;\nint main() {\nint number;\nint sum = 0;\n// nested for loops\n// first loop\nfor (int i = 1; i &lt;= 3; i++) {\n// second loop\nfor (int j = 1; j &lt;= 3; j++) {\nif (j == 2) {\ncontinue;\n}\ncout &lt;&lt; \"i = \" &lt;&lt; i &lt;&lt; \", j = \" &lt;&lt; j &lt;&lt; endl;\n}\n}\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>i = 1, j = 1\ni = 1, j = 3\ni = 2, j = 1\ni = 2, j = 3\ni = 3, j = 1\ni = 3, j = 3\n</code></pre> <p>In the above program, when the\u00a0<code>continue</code>\u00a0statement executes, it skips the current iteration in the inner loop. And the control of the program moves to the\u00a0update expression\u00a0of the inner loop.</p> <p>Hence, the value of\u00a0j = 2\u00a0is never displayed in the output.</p> <p>Note: The\u00a0break statement\u00a0terminates the loop entirely. However, the\u00a0<code>continue</code>\u00a0statement only skips the current iteration.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-switchcase-statement","title":"C++ switch..case Statement","text":"<p>In this tutorial, we will learn about switch statement and its working in C++ programming with the help of some examples.</p> <p>The\u00a0<code>switch</code>\u00a0statement allows us to execute a block of code among many alternatives.</p> <p>The syntax of the\u00a0<code>switch</code>\u00a0statement in C++ is:</p> <pre><code>switch (expression)  {\ncase constant1:\n// code to be executed if \n// expression is equal to constant1;\nbreak;\ncase constant2:\n// code to be executed if\n// expression is equal to constant2;\nbreak;\n.\n.\n.\ndefault:\n// code to be executed if\n// expression doesn't match any constant\n}\n</code></pre> <p>How does the switch statement work?</p> <p>The\u00a0<code>expression</code>\u00a0is evaluated once and compared with the values of each\u00a0<code>case</code>\u00a0label.</p> <ul> <li>If there is a match, the corresponding code after the matching label is executed. For example, if the value of the variable is equal to\u00a0<code>constant2</code>, the code after\u00a0<code>case constant2:</code>\u00a0is executed until the\u00a0break statement\u00a0is encountered.</li> <li>If there is no match, the code after\u00a0<code>default:</code>\u00a0is executed.</li> </ul> <p>Note: We can do the same thing with the\u00a0<code>if...else..if</code>\u00a0ladder. However, the syntax of the\u00a0<code>switch</code>\u00a0statement is cleaner and much easier to read and write.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#flowchart-of-switch-statement","title":"Flowchart of switch Statement","text":"<p>Flowchart of C++ switch...case statement</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-create-a-calculator-using-the-switch-statement","title":"Example: Create a Calculator using the switch Statement","text":"<pre><code>// Program to build a simple calculator using switch Statement\n#include &lt;iostream&gt;\nusing namespace std;\nint main() {\nchar oper;\nfloat num1, num2;\ncout &lt;&lt; \"Enter an operator (+, -, *, /): \";\ncin &gt;&gt; oper;\ncout &lt;&lt; \"Enter two numbers: \" &lt;&lt; endl;\ncin &gt;&gt; num1 &gt;&gt; num2;\nswitch (oper) {\ncase '+':\ncout &lt;&lt; num1 &lt;&lt; \" + \" &lt;&lt; num2 &lt;&lt; \" = \" &lt;&lt; num1 + num2;\nbreak;\ncase '-':\ncout &lt;&lt; num1 &lt;&lt; \" - \" &lt;&lt; num2 &lt;&lt; \" = \" &lt;&lt; num1 - num2;\nbreak;\ncase '*':\ncout &lt;&lt; num1 &lt;&lt; \" * \" &lt;&lt; num2 &lt;&lt; \" = \" &lt;&lt; num1 * num2;\nbreak;\ncase '/':\ncout &lt;&lt; num1 &lt;&lt; \" / \" &lt;&lt; num2 &lt;&lt; \" = \" &lt;&lt; num1 / num2;\nbreak;\ndefault:\n// operator is doesn't match any case constant (+, -, *, /)\ncout &lt;&lt; \"Error! The operator is not correct\";\nbreak;\n}\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Output 1</p> <pre><code>Enter an operator (+, -, *, /): +\nEnter two numbers: 2.3\n4.5\n2.3 + 4.5 = 6.8\n</code></pre> <p>Output 2</p> <pre><code>Enter an operator (+, -, *, /): -\nEnter two numbers: 2.3\n4.5\n2.3 - 4.5 = -2.2\n</code></pre> <p>Output 3</p> <pre><code>Enter an operator (+, -, *, /): *\nEnter two numbers: 2.3\n4.5\n2.3 * 4.5 = 10.35\n</code></pre> <p>Output 4</p> <pre><code>Enter an operator (+, -, *, /): /\nEnter two numbers: 2.3\n4.5\n2.3 / 4.5 = 0.511111\n</code></pre> <p>Output 5</p> <pre><code>Enter an operator (+, -, *, /): ?\nEnter two numbers: 2.3\n4.5\nError! The operator is not correct.\n</code></pre> <p>In the above program, we are using the\u00a0<code>switch...case</code>\u00a0statement to perform addition, subtraction, multiplication, and division.</p> <p>How This Program Works</p> <ol> <li>We first prompt the user to enter the desired operator. This input is then stored in the\u00a0<code>char</code>\u00a0variable named\u00a0oper.</li> <li>We then prompt the user to enter two numbers, which are stored in the float variables\u00a0num1\u00a0and\u00a0num2.</li> <li>The\u00a0<code>switch</code>\u00a0statement is then used to check the operator entered by the user:</li> <li>If the user enters\u00a0<code>+</code>, addition is performed on the numbers.</li> <li>If the user enters\u00a0<code>-</code>, subtraction is performed on the numbers.</li> <li>If the user enters\u00a0<code>*</code>, multiplication is performed on the numbers.</li> <li>If the user enters\u00a0<code>/</code>, division is performed on the numbers.</li> <li>If the user enters any other character, the default code is printed.</li> </ol> <p>Notice that the\u00a0<code>break</code>\u00a0statement is used inside each\u00a0<code>case</code>\u00a0block. This terminates the\u00a0<code>switch</code>\u00a0statement.</p> <p>If the\u00a0<code>break</code>\u00a0statement is not used, all cases after the correct\u00a0<code>case</code>\u00a0are executed.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-goto-statement","title":"C++ goto Statement","text":"<p>In this article, you'll learn about goto statment, how it works and why should it be avoided.</p> <p>In C++ programming, the goto statement is used for altering the normal sequence of program execution by transferring control to some other part of the program.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#syntax-of-goto-statement","title":"Syntax of goto Statement","text":"<pre><code>goto label;\n... .. ...\n... .. ...\n... .. ...\nlabel: statement;\n... .. ...\n</code></pre> <p>In the syntax above,\u00a0label\u00a0is an identifier. When\u00a0<code>goto label;</code>\u00a0is encountered, the control of program jumps to\u00a0<code>label:</code>\u00a0and executes the code below it.</p> <p></p> <p>Working of goto in C++</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-goto-statement","title":"Example: goto Statement","text":"<pre><code>// This program calculates the average of numbers entered by the user.\n// If the user enters a negative number, it ignores the number and \n// calculates the average number entered before it.\n# include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\nfloat num, average, sum = 0.0;\nint i, n;\ncout &lt;&lt; \"Maximum number of inputs: \";\ncin &gt;&gt; n;\nfor(i = 1; i &lt;= n; ++i)\n{\ncout &lt;&lt; \"Enter n\" &lt;&lt; i &lt;&lt; \": \";\ncin &gt;&gt; num;\nif(num &lt; 0.0)\n{\n// Control of the program move to jump:\ngoto jump;\n} sum += num;\n}\njump:\naverage = sum / (i - 1);\ncout &lt;&lt; \"\\nAverage = \" &lt;&lt; average;\nreturn 0;\n}\n</code></pre> <p>Output</p> <pre><code>Maximum number of inputs: 10\nEnter n1: 2.3\nEnter n2: 5.6\nEnter n3: -5.6\nAverage = 3.95\n</code></pre> <p>You can write any C++ program without the use of\u00a0<code>goto</code>\u00a0statement and is generally considered a good idea not to use them.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#reason-to-avoid-goto-statement","title":"Reason to Avoid goto Statement","text":"<p>The goto statement gives the power to jump to any part of a program but, makes the logic of the program complex and tangled.</p> <p>In modern programming, the goto statement is considered a harmful construct and a bad programming practice.</p> <p>The goto statement can be replaced in most of C++ program with the use of\u00a0break\u00a0and\u00a0continue\u00a0statements.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-functions","title":"C++ Functions","text":""},{"location":"week-6-cpp/ce103-week-6-cpp/#c-functions_1","title":"C++ Functions","text":"<p>In this tutorial, we will learn about the C++ function and function expressions with the help of examples.</p> <p>A function is a block of code that performs a specific task.</p> <p>Suppose we need to create a program to create a circle and color it. We can create two functions to solve this problem:</p> <ul> <li>a function to draw the circle</li> <li>a function to color the circle</li> </ul> <p>Dividing a complex problem into smaller chunks makes our program easy to understand and reusable.</p> <p>There are two types of function:</p> <ol> <li>Standard Library Functions:\u00a0Predefined in C++</li> <li>User-defined Function:\u00a0Created by users</li> </ol> <p>In this tutorial, we will focus mostly on user-defined functions.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-user-defined-function","title":"C++ User-defined Function","text":"<p>C++ allows the programmer to define their own function.</p> <p>A user-defined function groups code to perform a specific task and that group of code is given a name (identifier).</p> <p>When the function is invoked from any part of the program, it all executes the codes defined in the body of the function.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-function-declaration","title":"C++ Function Declaration","text":"<p>The syntax to declare a function is:</p> <pre><code>returnType functionName (parameter1, parameter2,...) {\n// function body   \n}\n</code></pre> <p>Here's an example of a function declaration. </p> <pre><code>// function declaration\nvoid greet() {\ncout &lt;&lt; \"Hello World\";\n}\n</code></pre> <p>Here,</p> <ul> <li>the name of the function is\u00a0<code>greet()</code></li> <li>the return type of the function is\u00a0<code>void</code></li> <li>the empty parentheses mean it doesn't have any parameters</li> <li>the function body is written inside\u00a0<code>{}</code></li> </ul> <p>Note:\u00a0We will learn about\u00a0<code>returnType</code>\u00a0and\u00a0<code>parameters</code>\u00a0later in this tutorial.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#calling-a-function","title":"Calling a Function","text":"<p>In the above program, we have declared a function named\u00a0<code>greet()</code>. To use the\u00a0<code>greet()</code>\u00a0function, we need to call it.</p> <p>Here's how we can call the above\u00a0<code>greet()</code>\u00a0function.</p> <pre><code>int main() {\n// calling a function   \ngreet(); }\n</code></pre> <p></p> <p>How Function works in C++</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-1-display-a-text","title":"Example 1: Display a Text","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n// declaring a function\nvoid greet() {\ncout &lt;&lt; \"Hello there!\";\n}\nint main() {\n// calling the function\ngreet();\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>Hello there!\n</code></pre>"},{"location":"week-6-cpp/ce103-week-6-cpp/#function-parameters","title":"Function Parameters","text":"<p>As mentioned above, a function can be declared with parameters (arguments). A parameter is a value that is passed when declaring a function.</p> <p>For example, let us consider the function below:</p> <pre><code>void printNum(int num) {\ncout &lt;&lt; num;\n}\n</code></pre> <p>Here, the\u00a0<code>int</code>\u00a0variable\u00a0num\u00a0is the function parameter.</p> <p>We pass a value to the function parameter while calling the function.</p> <pre><code>int main() {\nint n = 7;\n// calling the function\n// n is passed to the function as argument\nprintNum(n);\nreturn 0;\n}\n</code></pre>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-2-function-with-parameters","title":"Example 2: Function with Parameters","text":"<pre><code>// program to print a text\n#include &lt;iostream&gt;\nusing namespace std;\n// display a number\nvoid displayNum(int n1, float n2) {\ncout &lt;&lt; \"The int number is \" &lt;&lt; n1;\ncout &lt;&lt; \"The double number is \" &lt;&lt; n2;\n}\nint main() {\nint num1 = 5;\ndouble num2 = 5.5;\n// calling the function\ndisplayNum(num1, num2);\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>The int number is 5\nThe double number is 5.5\n</code></pre> <p>In the above program, we have used a function that has one\u00a0<code>int</code>\u00a0parameter and one\u00a0<code>double</code>\u00a0parameter.</p> <p>We then pass\u00a0num1\u00a0and\u00a0num2\u00a0as arguments. These values are stored by the function parameters\u00a0n1\u00a0and\u00a0n2\u00a0respectively.</p> <p></p> <p>C++ function with parameters</p> <p>Note:\u00a0The type of the arguments passed while calling the function must match with the corresponding parameters defined in the function declaration.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#return-statement","title":"Return Statement","text":"<p>In the above programs, we have used void in the function declaration. For example,</p> <pre><code>void displayNumber() {\n// code\n}\n</code></pre> <p>This means the function is not returning any value.</p> <p>It's also possible to return a value from a function. For this, we need to specify the\u00a0<code>returnType</code>\u00a0of the function during function declaration.</p> <p>Then, the\u00a0<code>return</code>\u00a0statement can be used to return a value from a function.</p> <p>For example,</p> <pre><code>int add (int a, int b) {\nreturn (a + b);\n}\n</code></pre> <p>Here, we have the data type\u00a0<code>int</code>\u00a0instead of\u00a0<code>void</code>. This means that the function returns an\u00a0<code>int</code>\u00a0value.</p> <p>The code\u00a0<code>return (a + b);</code>\u00a0returns the sum of the two parameters as the function value.</p> <p>The\u00a0<code>return</code>\u00a0statement denotes that the function has ended. Any code after\u00a0<code>return</code>\u00a0inside the function is not executed.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-3-add-two-numbers","title":"Example 3: Add Two Numbers","text":"<pre><code>// program to add two numbers using a function\n#include &lt;iostream&gt;\nusing namespace std;\n// declaring a function\nint add(int a, int b) {\nreturn (a + b);\n}\nint main() {\nint sum;\n// calling the function and storing\n// the returned value in sum\nsum = add(100, 78);\ncout &lt;&lt; \"100 + 78 = \" &lt;&lt; sum &lt;&lt; endl;\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>100 + 78 = 178\n</code></pre> <p>In the above program, the\u00a0<code>add()</code>\u00a0function is used to find the sum of two numbers.</p> <p>We pass two\u00a0<code>int</code>\u00a0literals\u00a0<code>100</code>\u00a0and\u00a0<code>78</code>\u00a0while calling the function.</p> <p>We store the returned value of the function in the variable\u00a0sum, and then we print it.</p> <p></p> <p>Working of C++ Function with return statement</p> <p>Notice that\u00a0sum\u00a0is a variable of\u00a0<code>int</code>\u00a0type. This is because the return value of\u00a0<code>add()</code>\u00a0is of\u00a0<code>int</code>\u00a0type.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#function-prototype","title":"Function Prototype","text":"<p>In C++, the code of function declaration should be before the function call. However, if we want to define a function after the function call, we need to use the function prototype. For example,</p> <pre><code>// function prototype\nvoid add(int, int);\nint main() {\n// calling the function before declaration.\nadd(5, 3);\nreturn 0;\n}\n// function definition\nvoid add(int a, int b) {\ncout &lt;&lt; (a + b);\n}\n</code></pre> <p>In the above code, the function prototype is:</p> <pre><code>void add(int, int);\n</code></pre> <p>This provides the compiler with information about the function name and its parameters. That's why we can use the code to call a function before the function has been defined.</p> <p>The syntax of a function prototype is:</p> <pre><code>returnType functionName(dataType1, dataType2, ...);\n</code></pre>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-4-c-function-prototype","title":"Example 4: C++ Function Prototype","text":"<pre><code>// using function definition after main() function\n// function prototype is declared before main()\n#include &lt;iostream&gt;\nusing namespace std;\n// function prototype\nint add(int, int);\nint main() {\nint sum;\n// calling the function and storing\n// the returned value in sum\nsum = add(100, 78);\ncout &lt;&lt; \"100 + 78 = \" &lt;&lt; sum &lt;&lt; endl;\nreturn 0;\n}\n// function definition\nint add(int a, int b) {\nreturn (a + b);\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>100 + 78 = 178\n</code></pre> <p>The above program is nearly identical to\u00a0Example 3. The only difference is that here, the function is defined\u00a0after\u00a0the function call.</p> <p>That's why we have used a function prototype in this example.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#benefits-of-using-user-defined-functions","title":"Benefits of Using User-Defined Functions","text":"<ul> <li>Functions make the code reusable. We can declare them once and use them multiple times.</li> <li>Functions make the program easier as each small task is divided into a function.</li> <li>Functions increase readability.</li> </ul>"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-library-functions","title":"C++ Library Functions","text":"<p>Library functions are the built-in functions in C++ programming.</p> <p>Programmers can use library functions by invoking the functions directly; they don't need to write the functions themselves.</p> <p>Some common library functions in C++ are\u00a0<code>sqrt()</code>,\u00a0<code>abs()</code>,\u00a0<code>isdigit()</code>, etc.</p> <p>In order to use library functions, we usually need to include the header file in which these library functions are defined.</p> <p>For instance, in order to use mathematical functions such as\u00a0<code>sqrt()</code>\u00a0and\u00a0<code>abs()</code>, we need to include the header file\u00a0<code>cmath</code>.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-5-c-program-to-find-the-square-root-of-a-number","title":"Example 5: C++ Program to Find the Square Root of a Number","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;cmath&gt;\nusing namespace std;\nint main() {\ndouble number, squareRoot;\nnumber = 25.0;\n// sqrt() is a library function to calculate the square root\nsquareRoot = sqrt(number);\ncout &lt;&lt; \"Square root of \" &lt;&lt; number &lt;&lt; \" = \" &lt;&lt; squareRoot;\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>Square root of 25 = 5\n</code></pre> <p>In this program, the\u00a0<code>sqrt()</code>\u00a0library function is used to calculate the square root of a number.</p> <p>The function declaration of\u00a0<code>sqrt()</code>\u00a0is defined in the\u00a0<code>cmath</code>\u00a0header file. That's why we need to use the code\u00a0<code>#include &lt;cmath&gt;</code>\u00a0to use the\u00a0<code>sqrt()</code>\u00a0function.</p> <p>To learn more, visit\u00a0C++ Standard Library functions.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-user-defined-function-types","title":"C++ User-defined Function Types","text":"<p>In this tutorial, you will learn about different approaches you can take to solve a single problem using functions.</p> <p>For better understanding of arguments and return in functions, user-defined functions can be categorised as:</p> <ul> <li>Function with no argument\u00a0and no return value</li> <li>Function with no argument but return value</li> <li>Function with argument but no return value</li> <li>Function with argument and return value</li> </ul> <p>Consider a situation in which you have to check prime number. This problem is solved below by making user-defined function in 4 different ways as mentioned above.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-1-no-arguments-passed-and-no-return-value","title":"Example 1: No arguments passed and no return value","text":"<pre><code># include &lt;iostream&gt;\nusing namespace std;\nvoid prime();\nint main()\n{\n// No argument is passed to prime()\nprime();\nreturn 0;\n}\n// Return type of function is void because value is not returned.\nvoid prime()\n{\nint num, i, flag = 0;\ncout &lt;&lt; \"Enter a positive integer enter to check: \";\ncin &gt;&gt; num;\nfor(i = 2; i &lt;= num/2; ++i)\n{\nif(num % i == 0)\n{\nflag = 1; break;\n}\n}\nif (flag == 1)\n{\ncout &lt;&lt; num &lt;&lt; \" is not a prime number.\";\n}\nelse\n{\ncout &lt;&lt; num &lt;&lt; \" is a prime number.\";\n}\n}\n</code></pre> <p>In the above program,\u00a0<code>prime()</code>\u00a0is called from the main() with no arguments.</p> <p><code>prime()</code>\u00a0takes the positive number from the user and checks whether the number is a prime number or not.</p> <p>Since, return type of\u00a0<code>prime()</code>\u00a0is\u00a0<code>void</code>, no value is returned from the function.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-2-no-arguments-passed-but-a-return-value","title":"Example 2: No arguments passed but a return value","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint prime();\nint main()\n{\nint num, i, flag = 0;\n// No argument is passed to prime()\nnum = prime();\nfor (i = 2; i &lt;= num/2; ++i)\n{\nif (num%i == 0)\n{\nflag = 1;\nbreak;\n}\n}\nif (flag == 1)\n{\ncout&lt;&lt;num&lt;&lt;\" is not a prime number.\";\n}\nelse\n{\ncout&lt;&lt;num&lt;&lt;\" is a prime number.\";\n}\nreturn 0;\n}\n// Return type of function is int\nint prime()\n{\nint n;\nprintf(\"Enter a positive integer to check: \");\ncin &gt;&gt; n;\nreturn n;\n}\n</code></pre> <p>In the above program,\u00a0<code>prime()</code>\u00a0function is called from the\u00a0<code>main()</code>\u00a0with no arguments.</p> <p><code>prime()</code>\u00a0takes a positive integer from the user. Since, return type of the function is an\u00a0<code>int</code>, it returns the inputted number from the user back to the calling\u00a0<code>main()</code>\u00a0function.</p> <p>Then, whether the number is prime or not is checked in the main() itself and printed onto the screen.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-3-arguments-passed-but-no-return-value","title":"Example 3: Arguments passed but no return value","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nvoid prime(int n);\nint main()\n{\nint num;\ncout &lt;&lt; \"Enter a positive integer to check: \";\ncin &gt;&gt; num;\n// Argument num is passed to the function prime()\nprime(num);\nreturn 0;\n}\n// There is no return value to calling function. Hence, return type of function is void. */\nvoid prime(int n)\n{\nint i, flag = 0;\nfor (i = 2; i &lt;= n/2; ++i)\n{\nif (n%i == 0)\n{\nflag = 1;\nbreak;\n}\n}\nif (flag == 1)\n{\ncout &lt;&lt; n &lt;&lt; \" is not a prime number.\";\n}\nelse {\ncout &lt;&lt; n &lt;&lt; \" is a prime number.\";\n}\n}\n</code></pre> <p>In the above program, positive number is first asked from the user which is stored in the variable\u00a0num.</p> <p>Then,\u00a0num\u00a0is passed to the\u00a0<code>prime()</code>\u00a0function where, whether the number is prime or not is checked and printed.</p> <p>Since, the return type of\u00a0<code>prime()</code>\u00a0is a\u00a0<code>void</code>, no value is returned from the function.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-4-arguments-passed-and-a-return-value","title":"Example 4: Arguments passed and a return value.","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint prime(int n);\nint main()\n{\nint num, flag = 0;\ncout &lt;&lt; \"Enter positive integer to check: \";\ncin &gt;&gt; num;\n// Argument num is passed to check() function\nflag = prime(num);\nif(flag == 1)\ncout &lt;&lt; num &lt;&lt; \" is not a prime number.\";\nelse\ncout&lt;&lt; num &lt;&lt; \" is a prime number.\";\nreturn 0;\n}\n/* This function returns integer value.  */\nint prime(int n)\n{\nint i;\nfor(i = 2; i &lt;= n/2; ++i)\n{\nif(n % i == 0)\nreturn 1;\n}\nreturn 0;\n}\n</code></pre> <p>In the above program, a positive integer is asked from the user and stored in the variable\u00a0<code>num</code>.</p> <p>Then,\u00a0<code>num</code>\u00a0is passed to the function\u00a0<code>prime()</code>\u00a0where, whether the number is prime or not is checked.</p> <p>Since, the return type of\u00a0<code>prime()</code>\u00a0is an\u00a0<code>int</code>, 1 or 0 is returned to the\u00a0<code>main()</code>\u00a0calling function. If the number is a prime number, 1 is returned. If not, 0 is returned.</p> <p>Back in the\u00a0<code>main()</code>\u00a0function, the returned 1 or 0 is stored in the variable\u00a0flag, and the corresponding text is printed onto the screen.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#which-method-is-better","title":"Which method is better?","text":"<p>All four programs above gives the same output and all are technically correct program.</p> <p>There is no hard and fast rule on which method should be chosen.</p> <p>The particular method is chosen depending upon the situation and how you want to solve a problem.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-function-overloading","title":"C++ Function Overloading","text":"<p>In this tutorial, we will learn about the function overloading in C++ with examples.</p> <p>In C++, two functions can have the same name if the number and/or type of arguments passed is different.</p> <p>These functions having the same name but different arguments are known as overloaded functions. For example:</p> <pre><code>// same name different arguments\nint test() { }\nint test(int a) { }\nfloat test(double a) { }\nint test(int a, double b) { }\n</code></pre> <p>Here, all 4 functions are overloaded functions.</p> <p>Notice that the return types of all these 4 functions are not the same. Overloaded functions may or may not have different return types but they must have different arguments. For example,</p> <pre><code>// Error code\nint test(int a) { }\ndouble test(int b){ }\n</code></pre> <p>Here, both functions have the same name, the same type, and the same number of arguments. Hence, the compiler will throw an error.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-1-overloading-using-different-types-of-parameter","title":"Example 1: Overloading Using Different Types of Parameter","text":"<pre><code>// Program to compute absolute value\n// Works for both int and float\n#include &lt;iostream&gt;\nusing namespace std;\n// function with float type parameter\nfloat absolute(float var){\nif (var &lt; 0.0)\nvar = -var;\nreturn var;\n}\n// function with int type parameter\nint absolute(int var) {\nif (var &lt; 0)\nvar = -var;\nreturn var;\n}\nint main() {\n// call function with int type parameter\ncout &lt;&lt; \"Absolute value of -5 = \" &lt;&lt; absolute(-5) &lt;&lt; endl;\n// call function with float type parameter\ncout &lt;&lt; \"Absolute value of 5.5 = \" &lt;&lt; absolute(5.5f) &lt;&lt; endl;\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>Absolute value of -5 = 5\nAbsolute value of 5.5 = 5.5\n</code></pre> <p></p> <p>Working of overloading for the absolute() function</p> <p>In this program, we overload the\u00a0<code>absolute()</code>\u00a0function. Based on the type of parameter passed during the function call, the corresponding function is called.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-2-overloading-using-different-number-of-parameters","title":"Example 2: Overloading Using Different Number of Parameters","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n// function with 2 parameters\nvoid display(int var1, double var2) {\ncout &lt;&lt; \"Integer number: \" &lt;&lt; var1;\ncout &lt;&lt; \" and double number: \" &lt;&lt; var2 &lt;&lt; endl;\n}\n// function with double type single parameter\nvoid display(double var) {\ncout &lt;&lt; \"Double number: \" &lt;&lt; var &lt;&lt; endl;\n}\n// function with int type single parameter\nvoid display(int var) {\ncout &lt;&lt; \"Integer number: \" &lt;&lt; var &lt;&lt; endl;\n}\nint main() {\nint a = 5;\ndouble b = 5.5;\n// call function with int type parameter\ndisplay(a);\n// call function with double type parameter\ndisplay(b);\n// call function with 2 parameters\ndisplay(a, b);\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>Integer number: 5\nFloat number: 5.5\nInteger number: 5 and double number: 5.5\n</code></pre> <p>Here, the\u00a0<code>display()</code>\u00a0function is called three times with different arguments. Depending on the number and type of arguments passed, the corresponding\u00a0<code>display()</code>\u00a0function is called.</p> <p></p> <p>Working of overloading for the display() function</p> <p>The return type of all these functions is the same but that need not be the case for function overloading.</p> <p>Note:\u00a0In C++, many standard library functions are overloaded. For example, the\u00a0<code>sqrt()</code>\u00a0function can take\u00a0<code>double</code>,\u00a0<code>float</code>,\u00a0<code>int,</code>\u00a0etc. as parameters. This is possible because the\u00a0<code>sqrt()</code>\u00a0function is overloaded in C++.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-programming-default-arguments-parameters","title":"C++ Programming Default Arguments (Parameters)","text":"<p>In this tutorial, we will learn C++ default arguments and their working with the help of examples.</p> <p>In C++ programming, we can provide default values for\u00a0function\u00a0parameters.</p> <p>If a function with default arguments is called without passing arguments, then the default parameters are used.</p> <p>However, if arguments are passed while calling the function, the default arguments are ignored.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#working-of-default-arguments","title":"Working of default arguments","text":"<p>How default arguments work in C++</p> <p>We can understand the working of default arguments from the image above:</p> <ol> <li> <p>When\u00a0<code>temp()</code>\u00a0is called, both the default parameters are used by the function.</p> </li> <li> <p>When\u00a0<code>temp(6)</code>\u00a0is called, the first argument becomes\u00a0<code>6</code>\u00a0while the default value is used for the second parameter.</p> </li> <li> <p>When\u00a0<code>temp(6, -2.3)</code>\u00a0is called, both the default parameters are overridden, resulting in\u00a0<code>i = 6</code>\u00a0and\u00a0<code>f = -2.3</code>.</p> </li> <li> <p>When\u00a0<code>temp(3.4)</code>\u00a0is passed, the function behaves in an undesired way because the second argument cannot be passed without passing the first argument.  </p> </li> </ol> <p>Therefore,\u00a0<code>3.4</code>\u00a0is passed as the first argument. Since the first argument has been defined as\u00a0<code>int</code>, the value that is actually passed is\u00a0<code>3</code>.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-default-argument","title":"Example: Default Argument","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n// defining the default arguments\nvoid display(char = '*', int = 3);\nint main() {\nint count = 5;\ncout &lt;&lt; \"No argument passed: \";\n// *, 3 will be parameters\ndisplay(); cout &lt;&lt; \"First argument passed: \";\n// #, 3 will be parameters\ndisplay('#'); cout &lt;&lt; \"Both arguments passed: \";\n// $, 5 will be parameters\ndisplay('$', count); return 0;\n}\nvoid display(char c, int count) {\nfor(int i = 1; i &lt;= count; ++i)\n{\ncout &lt;&lt; c;\n}\ncout &lt;&lt; endl;\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>No argument passed: ***\nFirst argument passed: ###\nBoth arguments passed: $$$$$\n</code></pre> <p>Here is how this program works:</p> <ol> <li><code>display()</code>\u00a0is called without passing any arguments. In this case,\u00a0<code>display()</code>\u00a0uses both the default parameters\u00a0<code>c = '*'</code>\u00a0and\u00a0<code>n = 1</code>.</li> <li><code>display('#')</code>\u00a0is called with only one argument. In this case, the first becomes\u00a0<code>'#'</code>. The second default parameter\u00a0<code>n = 1</code>\u00a0is retained.</li> <li><code>display('#', count)</code>\u00a0is called with both arguments. In this case, default arguments are not used.</li> </ol> <p>We can also define the default parameters in the function definition itself. The program below is equivalent to the one above.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#include-iostream-using-namespace-std-defining-the-default-arguments-void-displaychar-c-int-count-3-forint-i-1-i-count-i-cout-c-cout-endl-int-main-int-count-5-cout-no-argument-passed-3-will-be-parameters-display-cout-first-argument-passed-3-will-be-parameters-display-cout-both-argument-passed-5-will-be-parameters-display-count-return-0","title":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\n// defining the default arguments\nvoid display(char c = '*', int count = 3) {\n    for(int i = 1; i &lt;= count; ++i) {\n        cout &lt;&lt; c;\n    }\n    cout &lt;&lt; endl;\n}\n\nint main() {\n    int count = 5;\n\n    cout &lt;&lt; \"No argument passed: \";\n    // *, 3 will be parameters\n    display(); \n\n    cout &lt;&lt; \"First argument passed: \";\n     // #, 3 will be parameters\n    display('#'); \n\n    cout &lt;&lt; \"Both argument passed: \";\n    // $, 5 will be parameters\n    display('$', count); \n\n    return 0;\n}\n</code></pre>","text":"<p>Run Code</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#things-to-remember","title":"Things to Remember","text":"<ol> <li>Once we provide a default value for a parameter, all subsequent parameters must also have default values. For example,</li> </ol> <pre><code>// Invalid\nvoid add(int a, int b = 3, int c, int d);\n// Invalid\nvoid add(int a, int b = 3, int c, int d = 4);\n// Valid\nvoid add(int a, int c, int b = 3, int d = 4);\n</code></pre> <ol> <li>If we are defining the default arguments in the function definition instead of the function prototype, then the function must be defined before the function call.</li> </ol> <pre><code>// Invalid code\nint main() {\n// function call\ndisplay();\n}\nvoid display(char c = '*', int count = 5) {\n// code\n}\n</code></pre>"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-storage-class","title":"C++ Storage Class","text":"<p>In this article, you'll learn about different storage classes in C++. Namely: local, global, static local, register and thread local.</p> <p>Every variable in C++ has two features: type and storage class.</p> <p>Type specifies the type of data that can be stored in a variable. For example:\u00a0<code>int</code>,\u00a0<code>float</code>,\u00a0<code>char</code>\u00a0etc.</p> <p>And, storage class controls two different properties of a variable: lifetime (determines how long a variable can exist) and scope (determines which part of the program can access it).</p> <p>Depending upon the storage class of a variable, it can be divided into 4 major types:</p> <ul> <li>Local variable</li> <li>Global variable</li> <li>Static local variable</li> <li>Register Variable</li> <li>Thread Local Storage</li> </ul>"},{"location":"week-6-cpp/ce103-week-6-cpp/#local-variable","title":"Local Variable","text":"<p>A variable defined inside a function (defined inside\u00a0function\u00a0body between braces) is called a local variable or automatic variable.</p> <p>Its scope is only limited to the function where it is defined. In simple terms, local variable exists and can be accessed only inside a function.</p> <p>The life of a local variable ends (It is destroyed) when the function exits.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-1-local-variable","title":"Example 1: Local variable","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nvoid test();\nint main() {\n// local variable to main()\nint var = 5;\ntest();\n// illegal: var1 not declared inside main()\nvar1 = 9;\n}\nvoid test()\n{\n// local variable to test()\nint var1;\nvar1 = 6;\n// illegal: var not declared inside test()\ncout &lt;&lt; var;\n}\n</code></pre> <p>The variable\u00a0var\u00a0cannot be used inside\u00a0<code>test()</code>\u00a0and\u00a0var1\u00a0cannot be used inside\u00a0<code>main()</code>\u00a0function.</p> <p>Keyword\u00a0<code>auto</code>\u00a0was also used for defining local variables before as:\u00a0<code>auto int var;</code></p> <p>But, after\u00a0C++11\u00a0<code>auto</code>\u00a0has a different meaning and should not be used for defining local variables.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#global-variable","title":"Global Variable","text":"<p>If a variable is defined outside all functions, then it is called a global variable.</p> <p>The scope of a global variable is the whole program. This means, It can be used and changed at any part of the program after its declaration.</p> <p>Likewise, its life ends only when the program ends.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-2-global-variable","title":"Example 2: Global variable","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n// Global variable declaration\nint c = 12;\nvoid test();\nint main()\n{\n++c;\n// Outputs 13\ncout &lt;&lt; c &lt;&lt;endl;\ntest();\nreturn 0;\n}\nvoid test()\n{\n++c;\n// Outputs 14\ncout &lt;&lt; c;\n}\n</code></pre> <p>Output</p> <pre><code>13\n14\n</code></pre> <p>In the above program,\u00a0c\u00a0is a global variable.</p> <p>This variable is visible to both functions\u00a0<code>main()</code>\u00a0and\u00a0<code>test()</code>\u00a0in the above program.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#static-local-variable","title":"Static Local variable","text":"<p>Keyword\u00a0<code>static</code>\u00a0is used for specifying a static variable. For example:</p> <pre><code>... .. ...\nint main()\n{\nstatic float a;\n... .. ...\n}\n</code></pre> <p>A static local variable exists only inside a function where it is declared (similar to a local variable) but its lifetime starts when the function is called and ends only when the program ends.</p> <p>The main difference between local variable and static variable is that, the value of static variable persists the end of the program.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-3-static-local-variable","title":"Example 3: Static local variable","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nvoid test()\n{\n// var is a static variable\nstatic int var = 0;\n++var;\ncout &lt;&lt; var &lt;&lt; endl;\n}\nint main()\n{\ntest();\ntest();\nreturn 0;\n}\n</code></pre> <p>Output</p> <pre><code>1\n2\n</code></pre> <p>In the above program,\u00a0<code>test()</code>\u00a0function is invoked 2 times.</p> <p>During the first call, variable\u00a0var\u00a0is declared as static variable and initialized to 0. Then 1 is added to\u00a0var\u00a0which is displayed in the screen.</p> <p>When the function test() returns, variable\u00a0var\u00a0still exists because it is a static variable.</p> <p>During second function call, no new variable\u00a0var\u00a0is created. The same\u00a0var\u00a0is increased by 1 and then displayed to the screen.</p> <p>Output of above program if\u00a0<code>var</code>\u00a0was not specified as static variable</p> <pre><code>1\n1\n</code></pre>"},{"location":"week-6-cpp/ce103-week-6-cpp/#register-variable-deprecated-in-c11","title":"Register Variable (Deprecated in C++11)","text":"<p>Keyword\u00a0<code>register</code>\u00a0is used for specifying register variables.</p> <p>Register variables are similar to automatic variables and exists inside a particular function only. It is supposed to be faster than the local variables.</p> <p>If a program encounters a register variable, it stores the variable in processor's register rather than memory if available. This makes it faster than the local variables.</p> <p>However, this keyword was deprecated in C++11 and should not be used.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#thread-local-storage","title":"Thread Local Storage","text":"<p>Thread-local storage is a mechanism by which variables are allocated such that there is one instance of the variable per extant thread.</p> <p>Keyword\u00a0<code>thread_local</code>\u00a0is used for this purpose.</p> <p>Learn more about\u00a0thread local storage.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-recursion","title":"C++ Recursion","text":"<p>In this tutorial, we will learn about recursive function in C++ and its working with the help of examples.</p> <p>A\u00a0function\u00a0that calls itself is known as a recursive function. And, this technique is known as recursion.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#working-of-recursion-in-c","title":"Working of Recursion in C++","text":"<pre><code>void recurse()\n{\n... .. ...\nrecurse();\n... .. ...\n}\nint main()\n{\n... .. ...\nrecurse();\n... .. ...\n}\n</code></pre> <p>The figure below shows how recursion works by calling itself over and over again.</p> <p></p> <p>How recursion works in C++ programming</p> <p>The recursion continues until some condition is met.</p> <p>To prevent infinite recursion,\u00a0if...else statement\u00a0(or similar approach) can be used where one branch makes the recursive call and the other doesn't.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-1-factorial-of-a-number-using-recursion","title":"Example 1: Factorial of a Number Using Recursion","text":"<pre><code>// Factorial of n = 1*2*3*...*n\n#include &lt;iostream&gt;\nusing namespace std;\nint factorial(int);\nint main() {\nint n, result;\ncout &lt;&lt; \"Enter a non-negative number: \";\ncin &gt;&gt; n;\nresult = factorial(n);\ncout &lt;&lt; \"Factorial of \" &lt;&lt; n &lt;&lt; \" = \" &lt;&lt; result;\nreturn 0;\n}\nint factorial(int n) {\nif (n &gt; 1) {\nreturn n * factorial(n - 1);\n} else {\nreturn 1;\n}\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>Enter a non-negative number: 4\nFactorial of 4 = 24\n</code></pre>"},{"location":"week-6-cpp/ce103-week-6-cpp/#working-of-factorial-program","title":"Working of Factorial Program","text":"<p>How this C++ recursion program works</p> <p>As we can see, the\u00a0<code>factorial()</code>\u00a0function is calling itself. However, during each call, we have decreased the value of\u00a0n\u00a0by\u00a0<code>1</code>. When\u00a0n\u00a0is less than\u00a0<code>1</code>, the\u00a0<code>factorial()</code>\u00a0function ultimately returns the output.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#advantages-and-disadvantages-of-recursion","title":"Advantages and Disadvantages of Recursion","text":"<p>Below are the pros and cons of using recursion in C++.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#advantages-of-c-recursion","title":"Advantages of C++ Recursion","text":"<ul> <li>It makes our code shorter and cleaner.</li> <li>Recursion is required in problems concerning data structures and advanced algorithms, such as Graph and Tree Traversal.</li> </ul>"},{"location":"week-6-cpp/ce103-week-6-cpp/#disadvantages-of-c-recursion","title":"Disadvantages of C++ Recursion","text":"<ul> <li>It takes a lot of stack space compared to an iterative program.</li> <li>It uses more processor time.</li> <li>It can be more difficult to debug compared to an equivalent iterative program.</li> </ul>"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-return-by-reference","title":"C++ Return by Reference","text":"<p>In this article, you'll learn how to return a value by reference in a function and use it efficiently in your program.</p> <p>In C++ Programming, not only can you pass values by reference to a\u00a0function\u00a0but you can also return a value by reference.</p> <p>To understand this feature, you should have the knowledge of:</p> <ul> <li>Global variables</li> </ul>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-return-by-reference","title":"Example: Return by Reference","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n// global variable\nint num;\n// function declaration\nint&amp; test();\nint main() {\n// assign 5 to num variable\n// equivalent to num = 5;\ntest() = 5;\ncout &lt;&lt; num;\nreturn 0;\n}\n// function definition\n// returns the address of num variable\nint&amp; test() {\nreturn num;\n}\n</code></pre> <p>Output</p> <pre><code>5\n</code></pre> <p>In program above, the return type of function\u00a0<code>test()</code>\u00a0is\u00a0<code>int&amp;</code>. Hence, this function returns a reference of the variable\u00a0num.</p> <p>The return statement is\u00a0<code>return num;</code>. Unlike return by value, this statement doesn't return value of\u00a0num, instead it returns the variable itself (address).</p> <p>So, when the\u00a0variable\u00a0is returned, it can be assigned a value as done in\u00a0<code>test() = 5;</code></p> <p>This stores\u00a05\u00a0to the variable\u00a0num, which is displayed onto the screen.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#important-things-to-remember-when-returning-by-reference","title":"Important Things to Remember When Returning by Reference.","text":"<ul> <li>Ordinary function returns value but this function doesn't. Hence, you cannot return a constant from the function.</li> </ul> <pre><code>int&amp; test() {\nreturn 2;\n}\n</code></pre> <ul> <li>You cannot return a local variable from this function.</li> </ul> <pre><code>int&amp; test() {\nint n = 2; return n; }\n</code></pre>"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-arrays-string","title":"C++ Arrays &amp; String","text":""},{"location":"week-6-cpp/ce103-week-6-cpp/#c-arrays","title":"C++ Arrays","text":"<p>In this tutorial, we will learn to work with arrays. We will learn to declare, initialize, and access array elements in C++ programming with the help of examples.</p> <p>In C++, an array is a variable that can store multiple values of the same type. For example,</p> <p>Suppose a class has 27 students, and we need to store the grades of all of them. Instead of creating 27 separate variables, we can simply create an array:</p> <pre><code>double grade[27];\n</code></pre> <p>Here,\u00a0grade\u00a0is an array that can hold a maximum of 27 elements of\u00a0<code>double</code>\u00a0type.</p> <p>In C++, the size and type of arrays cannot be changed after its declaration.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-array-declaration","title":"C++ Array Declaration","text":"<pre><code>dataType arrayName[arraySize];\n</code></pre> <p>For example,</p> <pre><code>int x[6];\n</code></pre> <p>Here,</p> <ul> <li><code>int</code>\u00a0- type of element to be stored</li> <li>x\u00a0- name of the array</li> <li><code>6</code>\u00a0- size of the array</li> </ul>"},{"location":"week-6-cpp/ce103-week-6-cpp/#access-elements-in-c-array","title":"Access Elements in C++ Array","text":"<p>In C++, each element in an array is associated with a number. The number is known as an array index. We can access elements of an array by using those indices.</p> <pre><code>// syntax to access array elements\narray[index];\n</code></pre> <p>Consider the array\u00a0x\u00a0we have seen above.</p> <p></p> <p>Elements of an array in C++</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#few-things-to-remember","title":"Few Things to Remember:","text":"<ul> <li> <p>The array indices start with\u00a0<code>0</code>. Meaning\u00a0x[0]\u00a0is the first element stored at index\u00a0<code>0</code>.</p> </li> <li> <p>If the size of an array is\u00a0<code>n</code>, the last element is stored at index\u00a0<code>(n-1)</code>. In this example,\u00a0x[5]\u00a0is the last element.</p> </li> <li> <p>Elements of an array have consecutive addresses. For example, suppose the starting address of\u00a0<code>x[0]</code>\u00a0is\u00a02120.  </p> </li> </ul> <p>Then, the address of the next element\u00a0<code>x[1]</code>\u00a0will be\u00a02124, the address of\u00a0<code>x[2]</code>\u00a0will be\u00a02128, and so on.  </p> <p>Here, the size of each element is increased by\u00a04. This is because the size of\u00a0<code>int</code>\u00a0is 4 bytes.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-array-initialization","title":"C++ Array Initialization","text":"<p>In C++, it's possible to initialize an array during declaration. For example,</p> <pre><code>// declare and initialize and array\nint x[6] = {19, 10, 8, 17, 9, 15};\n</code></pre> <p></p> <p>C++ Array elements and their data</p> <p>Another method to initialize array during declaration:</p> <pre><code>// declare and initialize an array\nint x[] = {19, 10, 8, 17, 9, 15};\n</code></pre> <p>Here, we have not mentioned the size of the array. In such cases, the compiler automatically computes the size.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-array-with-empty-members","title":"C++ Array With Empty Members","text":"<p>In C++, if an array has a size\u00a0<code>n</code>, we can store upto\u00a0n\u00a0number of elements in the array. However, what will happen if we store less than\u00a0n\u00a0number of elements.</p> <p>For example,</p> <pre><code>// store only 3 elements in the array\nint x[6] = {19, 10, 8};\n</code></pre> <p>Here, the array\u00a0x\u00a0has a size of\u00a0<code>6</code>. However, we have initialized it with only 3 elements.</p> <p>In such cases, the compiler assigns random values to the remaining places. Oftentimes, this random value is simply\u00a0<code>0</code>.</p> <p></p> <p>Empty array members are automatically assigned the value 0</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#how-to-insert-and-print-array-elements","title":"How to insert and print array elements?","text":"<pre><code>int mark[5] = {19, 10, 8, 17, 9}\n// change 4th element to 9\nmark[3] = 9;\n// take input from the user\n// store the value at third position\ncin &gt;&gt; mark[2];\n// take input from the user\n// insert at ith position\ncin &gt;&gt; mark[i-1];\n// print first element of the array\ncout &lt;&lt; mark[0];\n// print ith element of the array\ncout &gt;&gt; mark[i-1];\n</code></pre>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-1-displaying-array-elements","title":"Example 1: Displaying Array Elements","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint main() {\nint numbers[5] = {7, 5, 6, 12, 35};\ncout &lt;&lt; \"The numbers are: \";\n//  Printing array elements\n// using range based for loop\nfor (const int &amp;n : numbers) {\ncout &lt;&lt; n &lt;&lt; \"  \";\n}\ncout &lt;&lt; \"\\nThe numbers are: \";\n//  Printing array elements\n// using traditional for loop\nfor (int i = 0; i &lt; 5; ++i) {\ncout &lt;&lt; numbers[i] &lt;&lt; \"  \";\n}\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>The numbers are: 7  5  6  12  35\nThe numbers are: 7  5  6  12  35\n</code></pre> <p>Here, we have used a\u00a0<code>for</code>\u00a0loop to iterate from\u00a0<code>i = 0</code>\u00a0to\u00a0<code>i = 4</code>. In each iteration, we have printed\u00a0<code>numbers[i]</code>.</p> <p>We again used a range-based\u00a0<code>for</code>\u00a0loop to print out the elements of the array. To learn more about this loop, check\u00a0C++ Ranged for Loop.</p> <p>Note:\u00a0In our range-based loop, we have used the code\u00a0<code>const int &amp;n</code>\u00a0instead of\u00a0<code>int n</code>\u00a0as the range declaration. However, the\u00a0<code>const int &amp;n</code>\u00a0is more preferred because:</p> <ol> <li>Using\u00a0<code>int n</code>\u00a0simply copies the array elements to the variable\u00a0n\u00a0during each iteration. This is not memory-efficient.  </li> </ol> <p>&amp;n, however, uses the memory address of the array elements to access their data without copying them to a new variable. This is memory-efficient.</p> <ol> <li>We are simply printing the array elements, not modifying them. Therefore, we use\u00a0<code>const</code>\u00a0so as not to accidentally change the values of the array.</li> </ol>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-2-take-inputs-from-user-and-store-them-in-an-array","title":"Example 2: Take Inputs from User and Store Them in an Array","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint main() {\nint numbers[5];\ncout &lt;&lt; \"Enter 5 numbers: \" &lt;&lt; endl;\n//  store input from user to array\nfor (int i = 0; i &lt; 5; ++i) {\ncin &gt;&gt; numbers[i];\n}\ncout &lt;&lt; \"The numbers are: \";\n//  print array elements\nfor (int n = 0; n &lt; 5; ++n) {\ncout &lt;&lt; numbers[n] &lt;&lt; \"  \";\n}\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>Enter 5 numbers: 11\n12\n13\n14\n15\nThe numbers are: 11  12  13  14  15\n</code></pre> <p>Once again, we have used a\u00a0<code>for</code>\u00a0loop to iterate from\u00a0<code>i = 0</code>\u00a0to\u00a0<code>i = 4</code>. In each iteration, we took an input from the user and stored it in\u00a0<code>numbers[i]</code>.</p> <p>Then, we used another\u00a0<code>for</code>\u00a0loop to print all the array elements.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-3-display-sum-and-average-of-array-elements-using-for-loop","title":"Example 3: Display Sum and Average of Array Elements Using for Loop","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint main() {\n// initialize an array without specifying size\ndouble numbers[] = {7, 5, 6, 12, 35, 27};\ndouble sum = 0;\ndouble count = 0;\ndouble average;\ncout &lt;&lt; \"The numbers are: \";\n//  print array elements\n// use of range-based for loop\nfor (const double &amp;n : numbers) {\ncout &lt;&lt; n &lt;&lt; \"  \";\n//  calculate the sum\nsum += n;\n// count the no. of array elements\n++count;\n}\n// print the sum\ncout &lt;&lt; \"\\nTheir Sum = \" &lt;&lt; sum &lt;&lt; endl;\n// find the average\naverage = sum / count;\ncout &lt;&lt; \"Their Average = \" &lt;&lt; average &lt;&lt; endl;\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>The numbers are: 7  5  6  12  35  27\nTheir Sum = 92\nTheir Average = 15.3333\n</code></pre> <p>In this program:</p> <ol> <li>We have initialized a\u00a0double\u00a0array named\u00a0numbers\u00a0but without specifying its size. We also declared three double variables\u00a0sum,\u00a0count, and\u00a0average.  </li> </ol> <p>Here,\u00a0<code>sum =0</code>\u00a0and\u00a0<code>count = 0</code>.</p> <ol> <li> <p>Then we used a range-based\u00a0<code>for</code>\u00a0loop to print the array elements. In each iteration of the loop, we add the current array element to\u00a0sum.</p> </li> <li> <p>We also increase the value of\u00a0count\u00a0by\u00a0<code>1</code>\u00a0in each iteration, so that we can get the size of the array by the end of the for loop.</p> </li> <li> <p>After printing all the elements, we print the sum and the average of all the numbers. The average of the numbers is given by\u00a0<code>average = sum / count;</code></p> </li> </ol> <p>Note:\u00a0We used a ranged\u00a0<code>for</code>\u00a0loop instead of a normal\u00a0<code>for</code>\u00a0loop.</p> <p>A normal\u00a0<code>for</code>\u00a0loop requires us to specify the number of iterations, which is given by the size of the array.</p> <p>But a ranged\u00a0<code>for</code>\u00a0loop does not require such specifications.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-array-out-of-bounds","title":"C++ Array Out of Bounds","text":"<p>If we declare an array of size\u00a010, then the array will contain elements from index\u00a00\u00a0to\u00a09.</p> <p>However, if we try to access the element at index\u00a010\u00a0or more than\u00a010, it will result in Undefined Behaviour.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-multidimensional-arrays","title":"C++ Multidimensional Arrays","text":"<p>In this tutorial, we'll learn about multi-dimensional arrays in C++. More specifically, how to declare them, access them, and use them efficiently in our program.</p> <p>In C++, we can create an\u00a0array\u00a0of an array, known as a multidimensional array. For example:</p> <pre><code>int x[3][4];\n</code></pre> <p>Here,\u00a0x\u00a0is a two-dimensional array. It can hold a maximum of 12 elements.</p> <p>We can think of this array as a table with 3 rows and each row has 4 columns as shown below.</p> <p></p> <p>Elements in two-dimensional array in C++ Programming</p> <p>Three-dimensional arrays also work in a similar way. For example:</p> <pre><code>float x[2][4][3];\n</code></pre> <p>This array\u00a0x\u00a0can hold a maximum of 24 elements.</p> <p>We can find out the total number of elements in the array simply by multiplying its dimensions:</p> <pre><code>2 x 4 x 3 = 24\n</code></pre>"},{"location":"week-6-cpp/ce103-week-6-cpp/#multidimensional-array-initialization","title":"Multidimensional Array Initialization","text":"<p>Like a normal array, we can initialize a multidimensional array in more than one way.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#1-initialization-of-two-dimensional-array","title":"1. Initialization of two-dimensional array","text":"<pre><code>int test[2][3] = {2, 4, 5, 9, 0, 19};\n</code></pre> <p>The above method is not preferred. A better way to initialize this array with the same array elements is given below:</p> <pre><code>int  test[2][3] = { {2, 4, 5}, {9, 0, 19}};\n</code></pre> <p>This array has 2 rows and 3 columns, which is why we have two rows of elements with 3 elements each.</p> <p></p> <p>Initializing a two-dimensional array in C++</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#2-initialization-of-three-dimensional-array","title":"2. Initialization of three-dimensional array","text":"<pre><code>int test[2][3][4] = {3, 4, 2, 3, 0, -3, 9, 11, 23, 12, 23, 2, 13, 4, 56, 3, 5, 9, 3, 5, 5, 1, 4, 9};\n</code></pre> <p>This is not a good way of initializing a three-dimensional array. A better way to initialize this array is:</p> <pre><code>int test[2][3][4] = { { {3, 4, 2, 3}, {0, -3, 9, 11}, {23, 12, 23, 2} },\n{ {13, 4, 56, 3}, {5, 9, 3, 5}, {5, 1, 4, 9} }\n};\n</code></pre> <p>Notice the dimensions of this three-dimensional array.</p> <p>The first dimension has the value\u00a0<code>2</code>. So, the two elements comprising the first dimension are:</p> <pre><code>Element 1 = { {3, 4, 2, 3}, {0, -3, 9, 11}, {23, 12, 23, 2} }\nElement 2 = { {13, 4, 56, 3}, {5, 9, 3, 5}, {5, 1, 4, 9} }\n</code></pre> <p>The second dimension has the value\u00a0<code>3</code>. Notice that each of the elements of the first dimension has three elements each:</p> <pre><code>{3, 4, 2, 3}, {0, -3, 9, 11} and {23, 12, 23, 2} for Element 1.\n{13, 4, 56, 3}, {5, 9, 3, 5} and {5, 1, 4, 9} for Element 2.\n</code></pre> <p>Finally, there are four\u00a0<code>int</code>\u00a0numbers inside each of the elements of the second dimension:</p> <pre><code>{3, 4, 2, 3}\n{0, -3, 9, 11}\n... .. ...\n... .. ...\n</code></pre>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-1-two-dimensional-array","title":"Example 1: Two Dimensional Array","text":"<pre><code>// C++ Program to display all elements\n// of an initialised two dimensional array\n#include &lt;iostream&gt;\nusing namespace std;\nint main() {\nint test[3][2] = {{2, -5},\n{4, 0},\n{9, 1}};\n// use of nested for loop\n// access rows of the array\nfor (int i = 0; i &lt; 3; ++i) {\n// access columns of the array\nfor (int j = 0; j &lt; 2; ++j) {\ncout &lt;&lt; \"test[\" &lt;&lt; i &lt;&lt; \"][\" &lt;&lt; j &lt;&lt; \"] = \" &lt;&lt; test[i][j] &lt;&lt; endl;\n}\n}\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>test[0][0] = 2\ntest[0][1] = -5\ntest[1][0] = 4\ntest[1][1] = 0\ntest[2][0] = 9\ntest[2][1] = 1\n</code></pre> <p>In the above example, we have initialized a two-dimensional\u00a0<code>int</code>\u00a0array named\u00a0test\u00a0that has 3 \"rows\" and 2 \"columns\".</p> <p>Here, we have used the nested\u00a0<code>for</code>\u00a0loop to display the array elements.</p> <ul> <li>the outer loop from\u00a0<code>i == 0</code>\u00a0to\u00a0<code>i == 2</code>\u00a0access the rows of the array</li> <li>the inner loop from\u00a0<code>j == 0</code>\u00a0to\u00a0<code>j == 1</code>\u00a0access the columns of the array</li> </ul> <p>Finally, we print the array elements in each iteration.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-2-taking-input-for-two-dimensional-array","title":"Example 2: Taking Input for Two Dimensional Array","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint main() {\nint numbers[2][3];\ncout &lt;&lt; \"Enter 6 numbers: \" &lt;&lt; endl;\n// Storing user input in the array\nfor (int i = 0; i &lt; 2; ++i) {\nfor (int j = 0; j &lt; 3; ++j) {\ncin &gt;&gt; numbers[i][j];\n}\n}\ncout &lt;&lt; \"The numbers are: \" &lt;&lt; endl;\n//  Printing array elements\nfor (int i = 0; i &lt; 2; ++i) {\nfor (int j = 0; j &lt; 3; ++j) {\ncout &lt;&lt; \"numbers[\" &lt;&lt; i &lt;&lt; \"][\" &lt;&lt; j &lt;&lt; \"]: \" &lt;&lt; numbers[i][j] &lt;&lt; endl;\n}\n}\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>Enter 6 numbers: 1\n2\n3\n4\n5\n6\nThe numbers are:\nnumbers[0][0]: 1\nnumbers[0][1]: 2\nnumbers[0][2]: 3\nnumbers[1][0]: 4\nnumbers[1][1]: 5\nnumbers[1][2]: 6\n</code></pre> <p>Here, we have used a nested\u00a0<code>for</code>\u00a0loop to take the input of the 2d array. Once all the input has been taken, we have used another nested\u00a0<code>for</code>\u00a0loop to print the array members.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-3-three-dimensional-array","title":"Example 3: Three Dimensional Array","text":"<pre><code>// C++ Program to Store value entered by user in\n// three dimensional array and display it.\n#include &lt;iostream&gt;\nusing namespace std;\nint main() {\n// This array can store upto 12 elements (2x3x2)\nint test[2][3][2] = {\n{\n{1, 2},\n{3, 4},\n{5, 6}\n}, {\n{7, 8}, {9, 10}, {11, 12}\n}\n};\n// Displaying the values with proper index.\nfor (int i = 0; i &lt; 2; ++i) {\nfor (int j = 0; j &lt; 3; ++j) {\nfor (int k = 0; k &lt; 2; ++k) {\ncout &lt;&lt; \"test[\" &lt;&lt; i &lt;&lt; \"][\" &lt;&lt; j &lt;&lt; \"][\" &lt;&lt; k &lt;&lt; \"] = \" &lt;&lt; test[i][j][k] &lt;&lt; endl;\n}\n}\n}\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>test[0][0][0] = 1\ntest[0][0][1] = 2\ntest[0][1][0] = 3\ntest[0][1][1] = 4\ntest[0][2][0] = 5\ntest[0][2][1] = 6\ntest[1][0][0] = 7\ntest[1][0][1] = 8\ntest[1][1][0] = 9\ntest[1][1][1] = 10\ntest[1][2][0] = 11\ntest[1][2][1] = 12\n</code></pre> <p>The basic concept of printing elements of a 3d array is similar to that of a 2d array.</p> <p>However, since we are manipulating 3 dimensions, we use a nested for loop with 3 total loops instead of just 2:</p> <ul> <li>the outer loop from\u00a0<code>i == 0</code>\u00a0to\u00a0<code>i == 1</code>\u00a0accesses the first dimension\u00a0of the array</li> <li>the middle\u00a0loop from\u00a0<code>j == 0</code>\u00a0to\u00a0<code>j == 2</code>\u00a0accesses the second dimension\u00a0of the array</li> <li>the innermost\u00a0loop from\u00a0<code>k == 0</code>\u00a0to\u00a0<code>k == 1</code>\u00a0accesses the third dimension\u00a0of the array</li> </ul> <p>As we can see, the complexity of the array increases exponentially with the increase in dimensions.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#passing-array-to-a-function-in-c-programming","title":"Passing Array to a Function in C++ Programming","text":"<p>In this tutorial, we will learn how to pass a single-dimensional and multidimensional array as a function parameter in C++ with the help of examples.</p> <p>In C++, we can pass arrays as an argument to a function. And, also we can return arrays from a function.</p> <p>Before you learn about passing arrays as a function argument, make sure you know about\u00a0C++ Arrays\u00a0and\u00a0C++ Functions.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#syntax-for-passing-arrays-as-function-parameters","title":"Syntax for Passing Arrays as Function Parameters","text":"<p>The syntax for passing an array to a function is:</p> <pre><code>returnType functionName(dataType arrayName[arraySize]) {\n// code\n}\n</code></pre> <p>Let's see an example,</p> <pre><code>int total(int marks[5]) {\n// code\n}\n</code></pre> <p>Here, we have passed an\u00a0<code>int</code>\u00a0type array named\u00a0marks\u00a0to the function\u00a0<code>total()</code>. The size of the array is\u00a05.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-1-passing-one-dimensional-array-to-a-function","title":"Example 1: Passing One-dimensional Array to a Function","text":"<pre><code>// C++ Program to display marks of 5 students\n#include &lt;iostream&gt;\nusing namespace std;\n// declare function to display marks\n// take a 1d array as parameter\nvoid display(int m[5]) {\ncout &lt;&lt; \"Displaying marks: \" &lt;&lt; endl;\n// display array elements    \nfor (int i = 0; i &lt; 5; ++i) {\ncout &lt;&lt; \"Student \" &lt;&lt; i + 1 &lt;&lt; \": \" &lt;&lt; m[i] &lt;&lt; endl;\n}\n}\nint main() {\n// declare and initialize an array\nint marks[5] = {88, 76, 90, 61, 69};\n// call display function\n// pass array as argument\ndisplay(marks);\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>Displaying marks: Student 1: 88\nStudent 2: 76\nStudent 3: 90\nStudent 4: 61\nStudent 5: 69\n</code></pre> <p>Here,</p> <ol> <li>When we call a function by passing an array as the argument, only the name of the array is used.</li> </ol> <pre><code>display(marks);\n</code></pre> <p>Here, the argument\u00a0marks\u00a0represent the memory address of the first element of array\u00a0marks[5].</p> <ol> <li>However, notice the parameter of the\u00a0<code>display()</code>\u00a0function.</li> </ol> <pre><code>void display(int m[5])\n</code></pre> <p>Here, we use the full declaration of the array in the function parameter, including the square braces\u00a0<code>[]</code>.</p> <ol> <li>The function parameter\u00a0<code>int m[5]</code>\u00a0converts to\u00a0<code>int* m;</code>. This points to the same address pointed by the array\u00a0marks. This means that when we manipulate\u00a0m[5]\u00a0in the function body, we are actually manipulating the original array\u00a0marks.  </li> </ol> <p>C++ handles passing an array to a function in this way to save memory and time.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#passing-multidimensional-array-to-a-function","title":"Passing Multidimensional Array to a Function","text":"<p>We can also pass\u00a0Multidimensional arrays\u00a0as an argument to the function. For example,</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-2-passing-multidimensional-array-to-a-function","title":"Example 2: Passing Multidimensional Array to a Function","text":"<pre><code>// C++ Program to display the elements of two\n// dimensional array by passing it to a function\n#include &lt;iostream&gt;\nusing namespace std;\n// define a function \n// pass a 2d array as a parameter\nvoid display(int n[][2]) {\ncout &lt;&lt; \"Displaying Values: \" &lt;&lt; endl;\nfor (int i = 0; i &lt; 3; ++i) {\nfor (int j = 0; j &lt; 2; ++j) {\ncout &lt;&lt; \"num[\" &lt;&lt; i &lt;&lt; \"][\" &lt;&lt; j &lt;&lt; \"]: \" &lt;&lt; n[i][j] &lt;&lt; endl;\n}\n}\n}\nint main() {\n// initialize 2d array\nint num[3][2] = {\n{3, 4},\n{9, 5},\n{7, 1}\n};\n// call the function\n// pass a 2d array as an argument\ndisplay(num);\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>Displaying Values: num[0][0]: 3\nnum[0][1]: 4\nnum[1][0]: 9\nnum[1][1]: 5\nnum[2][0]: 7\nnum[2][1]: 1\n</code></pre> <p>In the above program, we have defined a function named\u00a0<code>display()</code>. The function takes a two dimensional array,\u00a0<code>int n[][2]</code>\u00a0as its argument and prints the elements of the array.</p> <p>While calling the function, we only pass the name of the two dimensional array as the function argument\u00a0<code>display(num)</code>.</p> <p>Note: It is not mandatory to specify the number of rows in the array. However, the number of columns should always be specified. This is why we have used\u00a0<code>int n[][2]</code>.</p> <p>We can also pass arrays with more than 2 dimensions as a function argument.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-returning-an-array-from-a-function","title":"C++ Returning an Array From a Function","text":"<p>We can also return an array from the function. However, the actual array is not returned. Instead the address of the first element of the array is returned with the help of\u00a0pointers.</p> <p>We will learn about returning arrays from a function in the coming tutorials.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-strings","title":"C++ Strings","text":"<p>In this tutorial, you'll learn to handle strings in C++. You'll learn to declare them, initialize them and use them for various input/output operations.</p> <p>String is a collection of characters. There are two types of strings commonly used in C++ programming language:</p> <ul> <li>Strings that are objects of string class (The Standard C++ Library string class)</li> <li>C-strings (C-style Strings)</li> </ul>"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-strings_1","title":"C-strings","text":"<p>In C programming, the collection of characters is stored in the form of arrays.\u00a0This is also supported in C++ programming. Hence it's called C-strings.</p> <p>C-strings are arrays of type\u00a0<code>char</code>\u00a0terminated with null character, that is,\u00a0<code>\\0</code>\u00a0(ASCII value of null character is 0).</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#how-to-define-a-c-string","title":"How to define a C-string?","text":"<pre><code>char str[] = \"C++\";\n</code></pre> <p>In the above code,\u00a0<code>str</code>\u00a0is a string and it holds 4 characters.</p> <p>Although, \"<code>C++</code>\" has 3 character, the null character\u00a0<code>\\0</code>\u00a0is added to the end of the string automatically.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#alternative-ways-of-defining-a-string","title":"Alternative ways of defining a string","text":"<pre><code>char str[4] = \"C++\";\nchar str[] = {'C','+','+','\\0'};\nchar str[4] = {'C','+','+','\\0'};\n</code></pre> <p>Like arrays, it is not necessary to use all the space allocated for the string. For example:</p> <pre><code>char str[100] = \"C++\";\n</code></pre>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-1-c-string-to-read-a-word","title":"Example 1: C++ String to read a word","text":"<p>C++ program to display a string entered by user.</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\nchar str[100];\ncout &lt;&lt; \"Enter a string: \";\ncin &gt;&gt; str;\ncout &lt;&lt; \"You entered: \" &lt;&lt; str &lt;&lt; endl;\ncout &lt;&lt; \"\\nEnter another string: \";\ncin &gt;&gt; str;\ncout &lt;&lt; \"You entered: \"&lt;&lt;str&lt;&lt;endl;\nreturn 0;\n}\n</code></pre> <p>Output</p> <pre><code>Enter a string: C++\nYou entered: C++\nEnter another string: Programming is fun.\nYou entered: Programming\n</code></pre> <p>Notice that, in the second example only \"Programming\" is displayed instead of \"Programming is fun\".</p> <p>This is because the extraction operator &gt;&gt; works as\u00a0<code>scanf()</code>\u00a0in C and considers a space \" \" has a terminating character.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-2-c-string-to-read-a-line-of-text","title":"Example 2: C++ String to read a line of text","text":"<p>C++ program to read and display an entire line entered by user.</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\nchar str[100];\ncout &lt;&lt; \"Enter a string: \";\ncin.get(str, 100);\ncout &lt;&lt; \"You entered: \" &lt;&lt; str &lt;&lt; endl;\nreturn 0;\n}\n</code></pre> <p>Output</p> <pre><code>Enter a string: Programming is fun.\nYou entered: Programming is fun.\n</code></pre> <p>To read the text containing blank space,\u00a0<code>cin.get</code>\u00a0function can be used. This function takes two arguments.</p> <p>First argument is the name of the string (address of first element of string) and second argument is the maximum size of the array.</p> <p>In the above program,\u00a0str\u00a0is the name of the string and\u00a0<code>100</code>\u00a0is the maximum size of the array.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#string-object","title":"string Object","text":"<p>In C++, you can also create a string object for holding strings.</p> <p>Unlike using char arrays, string objects has no fixed length, and can be extended as per your requirement.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-3-c-string-using-string-data-type","title":"Example 3: C++ string using string data type","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\n// Declaring a string object\nstring str;\ncout &lt;&lt; \"Enter a string: \";\ngetline(cin, str);\ncout &lt;&lt; \"You entered: \" &lt;&lt; str &lt;&lt; endl;\nreturn 0;\n}\n</code></pre> <p>Output</p> <pre><code>Enter a string: Programming is fun.\nYou entered: Programming is fun.\n</code></pre> <p>In this program, a string\u00a0str\u00a0is declared. Then the string is asked from the user.</p> <p>Instead of using\u00a0<code>cin&gt;&gt;</code>\u00a0or\u00a0<code>cin.get()</code>\u00a0function, you can get the entered line of text using\u00a0<code>getline()</code>.</p> <p><code>getline()</code>\u00a0function takes the input stream as the first parameter which is\u00a0<code>cin</code>\u00a0and\u00a0<code>str</code>\u00a0as the location of the line to be stored.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#passing-string-to-a-function","title":"Passing String to a Function","text":"<p>Strings are passed to a function in a similar way\u00a0arrays are passed to a function.</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\nvoid display(char *);\nvoid display(string);\nint main()\n{\nstring str1;\nchar str[100];\ncout &lt;&lt; \"Enter a string: \";\ngetline(cin, str1);\ncout &lt;&lt; \"Enter another string: \";\ncin.get(str, 100, '\\n');\ndisplay(str1);\ndisplay(str);\nreturn 0;\n}\nvoid display(char s[])\n{\ncout &lt;&lt; \"Entered char array is: \" &lt;&lt; s &lt;&lt; endl;\n}\nvoid display(string s)\n{\ncout &lt;&lt; \"Entered string is: \" &lt;&lt; s &lt;&lt; endl;\n}\n</code></pre> <p>Output</p> <pre><code>Enter a string:  Programming is fun.\nEnter another string:  Really?\nEntered string is: Programming is fun.\nEntered char array is: Really?\n</code></pre> <p>In the above program, two strings are asked to enter. These are stored in\u00a0str\u00a0and\u00a0str1\u00a0respectively, where str is a\u00a0<code>char</code>\u00a0array and str1 is a\u00a0<code>string</code>\u00a0object.</p> <p>Then, we have two functions\u00a0<code>display()</code>\u00a0that outputs the string onto the string.</p> <p>The only difference between the two functions is the parameter. The first\u00a0<code>display()</code>\u00a0function takes char array as a parameter, while the second takes string as a parameter.</p> <p>This process is known as function overloading. Learn more about\u00a0Function Overloading.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-structures","title":"C++ Structures","text":""},{"location":"week-6-cpp/ce103-week-6-cpp/#c-structures_1","title":"C++ Structures","text":"<p>In this article, you'll learn about structures in C++ programming; what is it, how to define it and use it in your program.</p> <p>Structure is a collection of variables of different data types under a single name. It is similar to a\u00a0class\u00a0in that, both holds a collecion of data of different data types.</p> <p>For example:\u00a0You want to store some information about a person: his/her name, citizenship number and salary. You can easily create different variables\u00a0name, citNo, salary\u00a0to store these information separately.</p> <p>However, in the future, you would want to store information about multiple persons. Now, you'd need to create different variables for each information per person:\u00a0name1, citNo1, salary1, name2, citNo2, salary2</p> <p>You can easily visualize how big and messy the code would look. Also, since no relation between the variables (information) would exist, it's going to be a daunting task.</p> <p>A better approach will be to have a collection of all related information under a single name\u00a0<code>Person</code>, and use it for every person. Now, the code looks much cleaner, readable and efficient as well.</p> <p>This collection of all related information under a single name\u00a0<code>Person</code>\u00a0is a structure.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#how-to-declare-a-structure-in-c-programming","title":"How to declare a structure in C++ programming?","text":"<p>The\u00a0<code>struct</code>\u00a0keyword defines a structure type followed by an identifier (name of the structure).</p> <p>Then inside the curly braces, you can declare one or more members (declare variables inside curly braces) of that structure. For example:</p> <pre><code>struct Person\n{\nchar name[50];\nint age;\nfloat salary;\n};\n</code></pre> <p>Here a structure\u00a0person\u00a0is defined which has three members:\u00a0name,\u00a0age\u00a0and\u00a0salary.</p> <p>When a structure is created, no memory is allocated.</p> <p>The structure definition is only the blueprint for the creating of variables. You can imagine it as a datatype. When you define an integer as below:</p> <pre><code>int foo;\n</code></pre> <p>The\u00a0<code>int</code>\u00a0specifies that, variable\u00a0foo\u00a0can hold integer element only. Similarly, structure definition only specifies that, what property a structure variable holds when it is defined.</p> <p>Note:\u00a0Remember to end the declaration with a semicolon\u00a0(;)</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#how-to-define-a-structure-variable","title":"How to define a structure variable?","text":"<p>Once you declare a structure\u00a0person\u00a0as above. You can define a structure variable as:</p> <p>Person bill;</p> <p>Here, a structure variable\u00a0bill\u00a0is defined which is of type structure P<code>erson</code>.</p> <p>When structure variable is defined, only then the required memory is allocated by the compiler.</p> <p>Considering you have either 32-bit or 64-bit system, the memory of\u00a0<code>float</code>\u00a0is 4 bytes, memory of\u00a0<code>int</code>\u00a0is 4 bytes and memory of\u00a0<code>char</code>\u00a0is 1 byte.</p> <p>Hence, 58 bytes of memory is allocated for structure variable\u00a0bill.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#how-to-access-members-of-a-structure","title":"How to access members of a structure?","text":"<p>The members of structure variable is accessed using a\u00a0dot (.)\u00a0operator.</p> <p>Suppose, you want to access\u00a0age\u00a0of structure variable\u00a0bill\u00a0and assign it 50 to it. You can perform this task by using following code below:</p> <pre><code>bill.age = 50;\n</code></pre>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-c-structure","title":"Example: C++ Structure","text":"<p>C++ Program to assign data to members of a structure variable and display it.</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\nstruct Person\n{\nchar name[50];\nint age;\nfloat salary;\n};\nint main()\n{\nPerson p1;\ncout &lt;&lt; \"Enter Full name: \";\ncin.get(p1.name, 50);\ncout &lt;&lt; \"Enter age: \";\ncin &gt;&gt; p1.age;\ncout &lt;&lt; \"Enter salary: \";\ncin &gt;&gt; p1.salary;\ncout &lt;&lt; \"\\nDisplaying Information.\" &lt;&lt; endl;\ncout &lt;&lt; \"Name: \" &lt;&lt; p1.name &lt;&lt; endl;\ncout &lt;&lt;\"Age: \" &lt;&lt; p1.age &lt;&lt; endl;\ncout &lt;&lt; \"Salary: \" &lt;&lt; p1.salary;\nreturn 0;\n}\n</code></pre> <p>Output</p> <pre><code>Enter Full name: Magdalena Dankova\nEnter age: 27\nEnter salary: 1024.4\nDisplaying Information.\nName: Magdalena Dankova\nAge: 27\nSalary: 1024.4\n</code></pre> <p>Here a structure Person\u00a0is declared which has three members\u00a0name,\u00a0age\u00a0and\u00a0salary.</p> <p>Inside\u00a0<code>main()</code> function, a structure variable\u00a0p1\u00a0is defined. Then, the user is asked to enter information and data entered by user is displayed.</p> <p>You should also check out these structure related tutorials:</p> <ul> <li>How to pass structures to functions?</li> <li>How to use pointers with structures?</li> </ul>"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-structure-and-function","title":"C++ Structure and Function","text":"<p>In this article, you'll find relevant examples to pass structures as an argument to a function, and use them in your program.</p> <p>Structure\u00a0variables can be passed to a\u00a0function\u00a0and returned in a similar way as normal arguments.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#passing-structure-to-function-in-c","title":"Passing structure to function in C++","text":"<p>A structure variable can be passed to a function in similar way as normal argument. Consider this example:</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-1-c-structure-and-function","title":"Example 1: C++ Structure and Function","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nstruct Person {\nchar name[50];\nint age;\nfloat salary;\n};\nvoid displayData(Person);   // Function declaration\nint main() {\nPerson p;\ncout &lt;&lt; \"Enter Full name: \";\ncin.get(p.name, 50);\ncout &lt;&lt; \"Enter age: \";\ncin &gt;&gt; p.age;\ncout &lt;&lt; \"Enter salary: \";\ncin &gt;&gt; p.salary;\n// Function call with structure variable as an argument\ndisplayData(p);\nreturn 0;\n}\nvoid displayData(Person p) {\ncout &lt;&lt; \"\\nDisplaying Information.\" &lt;&lt; endl;\ncout &lt;&lt; \"Name: \" &lt;&lt; p.name &lt;&lt; endl;\ncout &lt;&lt;\"Age: \" &lt;&lt; p.age &lt;&lt; endl;\ncout &lt;&lt; \"Salary: \" &lt;&lt; p.salary;\n}\n</code></pre> <p>Output</p> <pre><code>Enter Full name: Bill Jobs\nEnter age: 55\nEnter salary: 34233.4\nDisplaying Information.\nName: Bill Jobs\nAge: 55\nSalary: 34233.4\n</code></pre> <p>In this program, user is asked to enter the\u00a0name,\u00a0age\u00a0and\u00a0salary\u00a0of a Person inside\u00a0<code>main()</code>\u00a0function.</p> <p>Then, the structure variable\u00a0p\u00a0is to passed to a function using.</p> <p>displayData(p);</p> <p>The return type of\u00a0<code>displayData()</code>\u00a0is\u00a0<code>void</code>\u00a0and a single argument of type structure\u00a0Person\u00a0is passed.</p> <p>Then the members of structure\u00a0<code>p</code>\u00a0is displayed from this function.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-2-returning-structure-from-function-in-c","title":"Example 2: Returning structure from function in C++","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nstruct Person {\nchar name[50];\nint age;\nfloat salary;\n};\nPerson getData(Person); void displayData(Person); int main() {\nPerson p, temp;\ntemp = getData(p);\np = temp;\ndisplayData(p);\nreturn 0;\n}\nPerson getData(Person p) {\ncout &lt;&lt; \"Enter Full name: \";\ncin.get(p.name, 50);\ncout &lt;&lt; \"Enter age: \";\ncin &gt;&gt; p.age;\ncout &lt;&lt; \"Enter salary: \";\ncin &gt;&gt; p.salary;\nreturn p;\n}\nvoid displayData(Person p) {\ncout &lt;&lt; \"\\nDisplaying Information.\" &lt;&lt; endl;\ncout &lt;&lt; \"Name: \" &lt;&lt; p.name &lt;&lt; endl;\ncout &lt;&lt;\"Age: \" &lt;&lt; p.age &lt;&lt; endl;\ncout &lt;&lt; \"Salary: \" &lt;&lt; p.salary;\n}\n</code></pre> <p>The output of this program is the same as the program above.</p> <p>In this program, we have created two\u00a0structure\u00a0variables\u00a0p\u00a0and\u00a0temp\u00a0of type\u00a0<code>Person</code>\u00a0under the\u00a0<code>main()</code>\u00a0function.</p> <p>The structure variable\u00a0p\u00a0is passed to\u00a0<code>getData()</code>\u00a0function which takes input from the user which is then stored in the\u00a0temp\u00a0variable.</p> <pre><code>temp = getData(p); </code></pre> <p>We then assign the value of\u00a0temp\u00a0to\u00a0p.</p> <pre><code>p = temp;\n</code></pre> <p>Then the structure variable\u00a0p\u00a0is passed to\u00a0<code>displayData()</code>\u00a0function, which displays the information.</p> <p>Note:\u00a0We don't really need\u00a0to use the\u00a0temp\u00a0variable for most compilers and C++ versions. Instead, we can simply use the following code:</p> <pre><code>p = getData(p);\n</code></pre>"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-pointers-to-structure","title":"C++ Pointers to Structure","text":"<p>In this article, you'll find relevant examples that will help you to work with pointers to access data within a structure.</p> <p>A\u00a0pointer\u00a0variable can be created not only for native types like (<code>int</code>,\u00a0<code>float</code>,\u00a0<code>double</code>\u00a0etc.) but they can also be created for user defined types like\u00a0structure.</p> <p>If you do not know what pointers are, visit\u00a0C++ pointers.</p> <p>Here is how you can create pointer for structures:</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\nstruct temp {\nint i;\nfloat f;\n};\nint main() {\ntemp *ptr;\nreturn 0;\n}\n</code></pre> <p>This program creates a pointer\u00a0ptr\u00a0of type structure\u00a0temp.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-pointers-to-structure","title":"Example: Pointers to Structure","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nstruct Distance {\nint feet;\nfloat inch;\n};\nint main() {\nDistance *ptr, d;\nptr = &amp;d;\ncout &lt;&lt; \"Enter feet: \";\ncin &gt;&gt; (*ptr).feet;\ncout &lt;&lt; \"Enter inch: \";\ncin &gt;&gt; (*ptr).inch;\ncout &lt;&lt; \"Displaying information.\" &lt;&lt; endl;\ncout &lt;&lt; \"Distance = \" &lt;&lt; (*ptr).feet &lt;&lt; \" feet \" &lt;&lt; (*ptr).inch &lt;&lt; \" inches\";\nreturn 0;\n}\n</code></pre> <p>Output</p> <pre><code>Enter feet: 4\nEnter inch: 3.5\nDisplaying information.\nDistance = 4 feet 3.5 inches\n</code></pre> <p>In this program, a pointer variable\u00a0ptr\u00a0and normal variable\u00a0d\u00a0of type structure\u00a0Distance\u00a0is defined.</p> <p>The address of variable\u00a0d\u00a0is stored to pointer variable, that is,\u00a0ptr\u00a0is pointing to variable\u00a0d. Then, the member function of variable\u00a0d\u00a0is accessed using pointer.</p> <p>Notes:</p> <ul> <li> <p>Since pointer\u00a0ptr\u00a0is pointing to variable\u00a0d\u00a0in this program,\u00a0<code>(*ptr).inch</code>\u00a0and\u00a0<code>d.inch</code>\u00a0are equivalent. Similarly,\u00a0<code>(*ptr).feet</code>\u00a0and\u00a0<code>d.feet</code>\u00a0are equivalent.</p> </li> <li> <p>However, if we are using pointers, it is far more preferable to access struct members using the\u00a0<code>-&gt;</code>\u00a0operator,\u00a0since\u00a0the\u00a0<code>.</code>\u00a0operator has a higher precedence than the\u00a0<code>*</code>\u00a0operator.  </p> </li> </ul> <p>Hence,\u00a0we enclose\u00a0<code>*ptr</code>\u00a0in brackets when using\u00a0<code>(*ptr).inch</code>. Because of this, it is easier to make mistakes if both operators are used together in a single code. </p><pre><code>  ptr-&gt;feet is same as (*ptr).feet\nptr-&gt;inch is same as (*ptr).inc\n</code></pre>"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-enumeration","title":"C++ Enumeration","text":"<p>In this article, you will learn to work with enumeration (enum). Also, you will learn where enums are commonly used in C++ programming.</p> <p>An enumeration is a user-defined data type that consists of integral constants. To define an enumeration, keyword\u00a0enum\u00a0is used.</p> <pre><code>enum season { spring, summer, autumn, winter };\n</code></pre> <p>Here, the name of the enumeration is\u00a0season.</p> <p>And,\u00a0spring,\u00a0summer\u00a0and\u00a0winter\u00a0are values of type\u00a0season.</p> <p>By default,\u00a0spring\u00a0is 0,\u00a0summer\u00a0is 1 and so on. You can change the default value of an enum element during declaration (if necessary).</p> <pre><code>enum season {   spring = 0, summer = 4, autumn = 8,\nwinter = 12\n};\n</code></pre>"},{"location":"week-6-cpp/ce103-week-6-cpp/#enumerated-type-declaration","title":"Enumerated Type Declaration","text":"<p>When you create an enumerated type, only blueprint for the variable is created. Here's how you can create variables of enum type.</p> <pre><code>enum boolean { false, true };\n// inside function\nenum boolean check;\n</code></pre> <p>Here, a variable\u00a0check\u00a0of type\u00a0<code>enum boolean</code>\u00a0is created.</p> <p>Here is another way to declare same\u00a0check\u00a0variable using different syntax.</p> <pre><code>enum boolean { false, true\n} check;\n</code></pre>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-1-enumeration-type","title":"Example 1: Enumeration Type","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nenum week { Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday };\nint main()\n{\nweek today;\ntoday = Wednesday;\ncout &lt;&lt; \"Day \" &lt;&lt; today+1;\nreturn 0;\n}\n</code></pre> <p>Output</p> <pre><code>Day 4\n</code></pre>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example2-changing-default-value-of-enums","title":"Example2: Changing Default Value of Enums","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nenum seasons { spring = 34, summer = 4, autumn = 9, winter = 32};\nint main() {\nseasons s;\ns = summer;\ncout &lt;&lt; \"Summer = \" &lt;&lt; s &lt;&lt; endl;\nreturn 0;\n}\n</code></pre> <p>Output</p> <pre><code>Summer = 4\n</code></pre>"},{"location":"week-6-cpp/ce103-week-6-cpp/#why-enums-are-used-in-c-programming","title":"Why enums are used in C++ programming?","text":"<p>An enum variable takes only one value out of many possible values. Example to demonstrate it,</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\nenum suit {\nclub = 0,\ndiamonds = 10,\nhearts = 20,\nspades = 3\n} card;\nint main() {\ncard = club;\ncout &lt;&lt; \"Size of enum variable \" &lt;&lt; sizeof(card) &lt;&lt; \" bytes.\";   return 0;\n}\n</code></pre> <p>Output</p> <pre><code>Size of enum variable 4 bytes.\n</code></pre> <p>It's because the size of an integer is 4 bytes.;</p> <p>This makes enum a good choice to work with flags.</p> <p>You can accomplish the same task using\u00a0C++ structures. However, working with enums gives you efficiency along with flexibility.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#how-to-use-enums-for-flags","title":"How to use enums for flags?","text":"<p>Let us take an example,</p> <pre><code>enum designFlags {\nITALICS = 1,\nBOLD = 2,\nUNDERLINE = 4\n} button;\n</code></pre> <p>Suppose you are designing a button for Windows application. You can set flags\u00a0ITALICS,\u00a0BOLD\u00a0and\u00a0UNDERLINE\u00a0to work with text.</p> <p>There is a reason why all the integral constants are power of 2 in above pseudocode.</p> <pre><code>// In binary\nITALICS = 00000001\nBOLD = 00000010\nUNDERLINE = 00000100 </code></pre> <p>Since, the integral constants are power of 2, you can combine two or more flags at once without overlapping using bitwise OR\u00a0|\u00a0operator. This allows you to choose two or more flags at once. For example,</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\nenum designFlags {\nBOLD = 1,\nITALICS = 2,\nUNDERLINE = 4\n};\nint main() {\nint myDesign = BOLD | UNDERLINE; //    00000001\n//  | 00000100\n//  ___________\n//    00000101\ncout &lt;&lt; myDesign;\nreturn 0;\n}\n</code></pre> <p>Output</p> <pre><code>5\n</code></pre> <p>When the output is 5, you always know that bold and underline is used.</p> <p>Also, you can add flag to your requirements.</p> <pre><code>if (myDesign &amp; ITALICS) {\n// code for italics\n}\n</code></pre> <p>Here, we have added italics to our design. Note, only code for italics is written inside the\u00a0if statement.</p> <p>You can accomplish almost anything in C++ programming without using enumerations. However, they can be pretty handy in certain situations. That's what differentiates good programmers from great programmers.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-classes-and-objects","title":"C++ Classes and Objects","text":"<p>In this tutorial, we will learn about objects and classes and how to use them in C++ with the help of examples.</p> <p>In previous tutorials, we learned about functions and variables. Sometimes it's desirable to put related functions and data in one place so that it's logical and easier to work with.</p> <p>Suppose, we need to store the length, breadth, and height of a rectangular room and calculate its area and volume.</p> <p>To handle this task, we can create three variables, say,\u00a0length,\u00a0breadth, and\u00a0height\u00a0along with the functions\u00a0<code>calculateArea()</code>\u00a0and\u00a0<code>calculateVolume()</code>.</p> <p>However, in C++, rather than creating separate variables and functions, we can also wrap these related data and functions in a single place (by creating\u00a0objects). This programming paradigm is known as object-oriented programming.  </p> <p>But before we can create\u00a0objects\u00a0and use them in C++, we first need to learn about\u00a0classes.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-class","title":"C++ Class","text":"<p>A class is a blueprint for the object.  </p> <p>We can think of a class as a sketch (prototype) of a house. It contains all the details about the floors, doors, windows, etc. Based on these descriptions we build the house. House is the object.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#create-a-class","title":"Create a Class","text":"<p>A class is defined in C++ using keyword\u00a0<code>class</code>\u00a0followed by the name of the class.</p> <p>The body of the class is defined inside the curly brackets and terminated by a semicolon at the end.</p> <pre><code>class className {\n// some data\n// some functions\n};\n</code></pre> <p>For example,</p> <pre><code>class Room {\n    public:\n        double length;\n        double breadth;\n        double height;   \n\n        double calculateArea(){   \n            return length * breadth;\n        }\n\n        double calculateVolume(){   \n            return length * breadth * height;\n        }\n\n};\n</code></pre> <p>Here, we defined a class named\u00a0<code>Room</code>.</p> <p>The variables\u00a0length,\u00a0breadth, and\u00a0height\u00a0declared inside the class are known as\u00a0data members. And, the functions\u00a0<code>calculateArea()</code>\u00a0and\u00a0<code>calculateVolume()</code>\u00a0are known as\u00a0member functions\u00a0of a class.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-objects","title":"C++ Objects","text":"<p>When a class is defined, only the specification for the object is defined; no memory or storage is allocated.</p> <p>To use the data and access functions defined in the class, we need to create objects.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#syntax-to-define-object-in-c","title":"Syntax to Define Object in C++","text":"<pre><code>className objectVariableName;\n</code></pre> <p>We can create objects of\u00a0<code>Room</code>\u00a0class (defined in the above example) as follows:</p> <pre><code>// sample function\nvoid sampleFunction() {\n// create objects\nRoom room1, room2;\n}\nint main(){\n// create objects \nRoom room3, room4;\n}\n</code></pre> <p>Here, two objects\u00a0room1\u00a0and\u00a0room2\u00a0of the\u00a0<code>Room</code>\u00a0class are created in\u00a0<code>sampleFunction()</code>. Similarly, the objects\u00a0room3\u00a0and\u00a0room4\u00a0are created in\u00a0<code>main()</code>.</p> <p>As we can see, we can create objects of a class in any function of the program. We can also create objects of a class within the class itself, or in other classes.</p> <p>Also, we can create as many objects as we want from a single class.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-access-data-members-and-member-functions","title":"C++ Access Data Members and Member Functions","text":"<p>We can access the data members and member functions of a class by using a\u00a0<code>.</code>\u00a0(dot) operator. For example,</p> <pre><code>room2.calculateArea();\n</code></pre> <p>This will call the\u00a0<code>calculateArea()</code>\u00a0function inside the\u00a0<code>Room</code>\u00a0class for object\u00a0room2.</p> <p>Similarly, the data members can be accessed as:</p> <pre><code>room1.length = 5.5;\n</code></pre> <p>In this case, it initializes the\u00a0length\u00a0variable of\u00a0room1\u00a0to\u00a0<code>5.5</code>.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-1-object-and-class-in-c-programming","title":"Example 1: Object and Class in C++ Programming","text":"<pre><code>// Program to illustrate the working of\n// objects and class in C++ Programming\n#include &lt;iostream&gt;\nusing namespace std;\n// create a class\nclass Room {\npublic:\ndouble length;\ndouble breadth;\ndouble height;\ndouble calculateArea() {\nreturn length * breadth;\n}\ndouble calculateVolume() {\nreturn length * breadth * height;\n}\n};\nint main() {\n// create object of Room class\nRoom room1;\n// assign values to data members\nroom1.length = 42.5;\nroom1.breadth = 30.8;\nroom1.height = 19.2;\n// calculate and display the area and volume of the room\ncout &lt;&lt; \"Area of Room =  \" &lt;&lt; room1.calculateArea() &lt;&lt; endl;\ncout &lt;&lt; \"Volume of Room =  \" &lt;&lt; room1.calculateVolume() &lt;&lt; endl;\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>Area of Room =  1309\nVolume of Room =  25132.8\n</code></pre> <p>In this program, we have used the\u00a0<code>Room</code>\u00a0class and its object\u00a0room1\u00a0to calculate the area and volume of a room.</p> <p>In\u00a0<code>main()</code>, we assigned the values of\u00a0length,\u00a0breadth, and\u00a0height\u00a0with the code:</p> <pre><code>room1.length = 42.5;\nroom1.breadth = 30.8;\nroom1.height = 19.2;\n</code></pre> <p>We then called the functions\u00a0<code>calculateArea()</code>\u00a0and\u00a0<code>calculateVolume()</code>\u00a0to perform the necessary calculations.</p> <p>Note the use of the keyword\u00a0<code>public</code>\u00a0in the program. This means the members are public and can be accessed anywhere from the program.</p> <p>As per our needs, we can also create private members using the\u00a0<code>private</code>\u00a0keyword. The private members of a class can only be accessed from within the class. For example, </p><pre><code>class Test {\nprivate:\nint a;\nvoid function1() { }\npublic:\nint b;\nvoid function2() { }\n}\n</code></pre> <p>Here,\u00a0a\u00a0and\u00a0<code>function1()</code>\u00a0are private. Thus they cannot be accessed from outside the class.</p> <p>On the other hand,\u00a0b\u00a0and\u00a0<code>function2()</code>\u00a0are accessible from everywhere in the program.</p> <p>To learn more about public and private keywords, please visit our\u00a0C++ Class Access Modifiers\u00a0tutorial.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-2-using-public-and-private-in-c-class","title":"Example 2: Using public and private in C++ Class","text":"<pre><code>// Program to illustrate the working of\n// public and private in C++ Class\n#include &lt;iostream&gt;\nusing namespace std;\nclass Room {\nprivate:\ndouble length;\ndouble breadth;\ndouble height;\npublic:\n// function to initialize private variables\nvoid initData(double len, double brth, double hgt) {\nlength = len;\nbreadth = brth;\nheight = hgt;\n}\ndouble calculateArea() {\nreturn length * breadth;\n}\ndouble calculateVolume() {\nreturn length * breadth * height;\n}\n};\nint main() {\n// create object of Room class\nRoom room1;\n// pass the values of private variables as arguments\nroom1.initData(42.5, 30.8, 19.2);\ncout &lt;&lt; \"Area of Room =  \" &lt;&lt; room1.calculateArea() &lt;&lt; endl;\ncout &lt;&lt; \"Volume of Room =  \" &lt;&lt; room1.calculateVolume() &lt;&lt; endl;\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>Area of Room =  1309\nVolume of Room =  25132.8\n</code></pre> <p>The above example is nearly identical to the first example, except that the class variables are now private.</p> <p>Since the variables are now private, we cannot access them directly from\u00a0<code>main()</code>. Hence, using the following code would be invalid:</p> <pre><code>// invalid code\nobj.length = 42.5;\nobj.breadth = 30.8;\nobj.height = 19.2;\n</code></pre> <p>Instead, we use the public function\u00a0<code>initData()</code>\u00a0to initialize the private variables via the function parameters\u00a0<code>double len</code>,\u00a0<code>double brth</code>, and\u00a0<code>double hgt</code>.</p> <p>To learn more on objects and classes, visit these topics:</p> <ul> <li>C++ Constructors</li> <li>How to pass and return an object from a function?</li> </ul>"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-constructors","title":"C++ Constructors","text":"<p>In this tutorial, we will learn about the C++ constructor and its type with the help examples.</p> <p>A constructor is a special type of member function that is called automatically when an object is created.</p> <p>In C++, a constructor has the same name as that of the class and it does not have a return type. For example,</p> <pre><code>class  Wall {\npublic:\n// create a constructor\nWall() {\n// code\n}\n};\n</code></pre> <p>Here, the function\u00a0<code>Wall()</code>\u00a0is a constructor of the class\u00a0<code>Wall</code>. Notice that the constructor</p> <ul> <li>has the same name as the class,</li> <li>does not have a return type, and</li> <li>is\u00a0<code>public</code></li> </ul>"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-default-constructor","title":"C++ Default Constructor","text":"<p>A constructor with no parameters is known as a\u00a0default constructor. In the example above,\u00a0<code>Wall()</code>\u00a0is a default constructor.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-1-c-default-constructor","title":"Example 1: C++ Default Constructor","text":"<pre><code>// C++ program to demonstrate the use of default constructor\n#include &lt;iostream&gt;\nusing namespace std;\n// declare a class\nclass  Wall {\nprivate:\ndouble length;\npublic:\n// default constructor to initialize variable\nWall() {\nlength = 5.5;\ncout &lt;&lt; \"Creating a wall.\" &lt;&lt; endl;\ncout &lt;&lt; \"Length = \" &lt;&lt; length &lt;&lt; endl;\n}\n};\nint main() {\nWall wall1;\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>Creating a Wall\nLength = 5.5\n</code></pre> <p>Here, when the\u00a0wall1\u00a0object is created, the\u00a0<code>Wall()</code>\u00a0constructor is called. This sets the\u00a0length\u00a0variable of the object to\u00a0<code>5.5</code>.</p> <p>Note:\u00a0If we have not defined a constructor in our class, then the C++ compiler will automatically create a default constructor with an empty code and no parameters.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-parameterized-constructor","title":"C++ Parameterized Constructor","text":"<p>In C++, a constructor with parameters is known as a parameterized constructor. This is the preferred method to initialize member data.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-2-c-parameterized-constructor","title":"Example 2: C++ Parameterized Constructor","text":"<pre><code>// C++ program to calculate the area of a wall\n#include &lt;iostream&gt;\nusing namespace std;\n// declare a class\nclass Wall {\nprivate:\ndouble length;\ndouble height;\npublic:\n// parameterized constructor to initialize variables\nWall(double len, double hgt) {\nlength = len;\nheight = hgt;\n}\ndouble calculateArea() {\nreturn length * height;\n}\n};\nint main() {\n// create object and initialize data members\nWall wall1(10.5, 8.6);\nWall wall2(8.5, 6.3);\ncout &lt;&lt; \"Area of Wall 1: \" &lt;&lt; wall1.calculateArea() &lt;&lt; endl;\ncout &lt;&lt; \"Area of Wall 2: \" &lt;&lt; wall2.calculateArea();\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>Area of Wall 1: 90.3\nArea of Wall 2: 53.55\n</code></pre> <p>Here, we have created a parameterized constructor\u00a0<code>Wall()</code>\u00a0that has 2 parameters:\u00a0<code>double len</code>\u00a0and\u00a0<code>double hgt</code>. The values contained in these parameters are used to initialize the member variables\u00a0length\u00a0and\u00a0height.</p> <p>When we create an object of the\u00a0<code>Wall</code>\u00a0class, we pass the values for the member variables as arguments. The code for this is:</p> <pre><code>Wall wall1(10.5, 8.6);\nWall wall2(8.5, 6.3);\n</code></pre> <p>With the member variables thus initialized, we can now calculate the area of the wall with the\u00a0<code>calculateArea()</code>\u00a0function.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-copy-constructor","title":"C++ Copy Constructor","text":"<p>The copy constructor in C++ is used to copy data of one object to another.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-3-c-copy-constructor","title":"Example 3: C++ Copy Constructor","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n// declare a class\nclass Wall {\nprivate:\ndouble length;\ndouble height;\npublic:\n// initialize variables with parameterized constructor\nWall(double len, double hgt) {\nlength = len;\nheight = hgt;\n}\n// copy constructor with a Wall object as parameter\n// copies data of the obj parameter\nWall(Wall &amp;obj) {\nlength = obj.length;\nheight = obj.height;\n}\ndouble calculateArea() {\nreturn length * height;\n}\n};\nint main() {\n// create an object of Wall class\nWall wall1(10.5, 8.6);\n// copy contents of wall1 to wall2\nWall wall2 = wall1;\n// print areas of wall1 and wall2\ncout &lt;&lt; \"Area of Wall 1: \" &lt;&lt; wall1.calculateArea() &lt;&lt; endl;\ncout &lt;&lt; \"Area of Wall 2: \" &lt;&lt; wall2.calculateArea();\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>Area of Wall 1: 90.3\nArea of Wall 2: 90.3\n</code></pre> <p>In this program, we have used a copy constructor to copy the contents of one object of the\u00a0<code>Wall</code>\u00a0class to another. The code of the copy constructor is:</p> <pre><code>Wall(Wall &amp;obj) {\nlength = obj.length;\nheight = obj.height;\n}\n</code></pre> <p>Notice that the parameter of this constructor has the address of an object of the\u00a0<code>Wall</code>\u00a0class.</p> <p>We then assign the values of the variables of the\u00a0obj\u00a0object to the corresponding variables of the object calling the copy constructor. This is how the contents of the object are copied.</p> <p>In\u00a0<code>main()</code>, we then create two objects\u00a0wall1\u00a0and\u00a0wall2\u00a0and then copy the contents of\u00a0wall1\u00a0to\u00a0wall2:</p> <pre><code>// copy contents of wall1 to wall2\nWall wall2 = wall1;\n</code></pre> <p>Here, the\u00a0wall2\u00a0object calls its copy constructor by passing the address of the\u00a0wall1\u00a0object as its argument i.e.\u00a0<code>&amp;obj = &amp;wall1</code>.</p> <p>Note: A constructor is primarily used to initialize objects. They are also used to run a default code when an object is created.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#how-to-pass-and-return-object-from-c-functions","title":"How to pass and return object from C++ Functions?","text":"<p>In this tutorial, we will learn to pass objects to a function and return an object from a function in C++ programming.</p> <p>In C++ programming, we can pass objects to a function in a similar manner as passing regular arguments.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-1-c-pass-objects-to-function","title":"Example 1: C++ Pass Objects to Function","text":"<pre><code>// C++ program to calculate the average marks of two students\n#include &lt;iostream&gt;\nusing namespace std;\nclass Student {\npublic:\ndouble marks;\n// constructor to initialize marks\nStudent(double m) {\nmarks = m;\n}\n};\n// function that has objects as parameters\nvoid calculateAverage(Student s1, Student s2) {\n// calculate the average of marks of s1 and s2 \ndouble average = (s1.marks + s2.marks) / 2;\ncout &lt;&lt; \"Average Marks = \" &lt;&lt; average &lt;&lt; endl;\n}\nint main() {\nStudent student1(88.0), student2(56.0);\n// pass the objects as arguments\ncalculateAverage(student1, student2);\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>Average Marks = 72\n</code></pre> <p>Here, we have passed two\u00a0<code>Student</code>\u00a0objects\u00a0student1\u00a0and\u00a0student2\u00a0as arguments to the\u00a0<code>calculateAverage()</code>\u00a0function.</p> <p></p> <p>Pass objects to function in C++</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-2-c-return-object-from-a-function","title":"Example 2: C++ Return Object from a Function","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nclass Student {\npublic:\ndouble marks1, marks2;\n};\n// function that returns object of Student\nStudent createStudent() {\nStudent student;\n// Initialize member variables of Student\nstudent.marks1 = 96.5;\nstudent.marks2 = 75.0;\n// print member variables of Student\ncout &lt;&lt; \"Marks 1 = \" &lt;&lt; student.marks1 &lt;&lt; endl;\ncout &lt;&lt; \"Marks 2 = \" &lt;&lt; student.marks2 &lt;&lt; endl;\nreturn student;\n}\nint main() {\nStudent student1;\n// Call function\nstudent1 = createStudent();\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>Marks1 = 96.5\nMarks2 = 75\n</code></pre> <p></p> <p>Return object from function in C++</p> <p>In this program, we have created a function\u00a0<code>createStudent()</code>\u00a0that returns an object of\u00a0<code>Student</code>\u00a0class.</p> <p>We have called\u00a0<code>createStudent()</code>\u00a0from the\u00a0<code>main()</code>\u00a0method.</p> <pre><code>// Call function\nstudent1 = createStudent();\n</code></pre> <p>Here, we are storing the object returned by the\u00a0<code>createStudent()</code>\u00a0method in the\u00a0student1.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-operator-overloading","title":"C++ Operator Overloading","text":"<p>In this tutorial, we will learn about operator overloading with the help of examples.</p> <p>In C++, we can change the way operators work for user-defined types like objects and structures. This is known as\u00a0operator overloading. For example,</p> <p>Suppose we have created three objects\u00a0c1,\u00a0c2\u00a0and\u00a0result\u00a0from a class named\u00a0<code>Complex</code>\u00a0that represents complex numbers.</p> <p>Since operator overloading allows us to change how operators work, we can redefine how the\u00a0<code>+</code>\u00a0operator works and use it to add the complex numbers of\u00a0c1\u00a0and\u00a0c2\u00a0by writing the following code:</p> <pre><code>result = c1 + c2;\n</code></pre> <p>instead of something like</p> <pre><code>result = c1.addNumbers(c2);\n</code></pre> <p>This makes our code intuitive and easy to understand.</p> <p>Note:\u00a0We cannot use operator overloading for fundamental data types like\u00a0<code>int</code>,\u00a0<code>float</code>,\u00a0<code>char</code>\u00a0and so on.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#syntax-for-c-operator-overloading","title":"Syntax for C++ Operator Overloading","text":"<p>To overload an operator, we use a special\u00a0<code>operator</code>\u00a0function.\u00a0We define the function inside the class or structure whose objects/variables we want the overloaded operator to work with.</p> <pre><code>class className {\n... .. ...\npublic\nreturnType operator symbol (arguments) {\n... .. ...\n} ... .. ...\n};\n</code></pre> <p>Here,</p> <ul> <li><code>returnType</code>\u00a0is the return type of the function.</li> <li><code>operator</code>\u00a0is a keyword.</li> <li><code>symbol</code>\u00a0is the operator we want to overload. Like:\u00a0<code>+</code>,\u00a0<code>&lt;</code>,\u00a0<code>-</code>,\u00a0<code>++</code>, etc.</li> <li><code>arguments</code>\u00a0is the arguments passed to the function.</li> </ul>"},{"location":"week-6-cpp/ce103-week-6-cpp/#operator-overloading-in-unary-operators","title":"Operator Overloading in Unary Operators","text":"<p>Unary operators operate on only one operand. The increment operator\u00a0<code>++</code>\u00a0and decrement operator\u00a0<code>--</code>\u00a0are examples of unary operators.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example1-operator-unary-operator-overloading","title":"Example1: ++ Operator (Unary Operator) Overloading","text":"<pre><code>// Overload ++ when used as prefix\n#include &lt;iostream&gt;\nusing namespace std;\nclass Count {\nprivate:\nint value;\npublic:\n// Constructor to initialize count to 5\nCount() : value(5) {}\n// Overload ++ when used as prefix\nvoid operator ++ () {\n++value;\n}\nvoid display() {\ncout &lt;&lt; \"Count: \" &lt;&lt; value &lt;&lt; endl;\n}\n};\nint main() {\nCount count1;\n// Call the \"void operator ++ ()\" function\n++count1;\ncount1.display();\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>Count: 6\n</code></pre> <p>Here, when we use\u00a0<code>++count1;</code>, the\u00a0<code>void operator ++ ()</code>\u00a0is called. This increases the\u00a0value\u00a0attribute for the object\u00a0count1\u00a0by 1.</p> <p>Note:\u00a0When we overload operators, we can use it to work in any way we like. For example, we could have used\u00a0<code>++</code>\u00a0to increase\u00a0value\u00a0by 100.</p> <p>However, this makes our code confusing and difficult to understand. It's our job as a programmer to use operator overloading properly and in a consistent and intuitive way.</p> <p>The above example works only when\u00a0<code>++</code>\u00a0is used as a prefix. To make\u00a0<code>++</code>\u00a0work as a postfix we use this syntax.</p> <pre><code>void operator ++ (int) {\n// code\n}\n</code></pre> <p>Notice the\u00a0<code>int</code>\u00a0inside the parentheses. It's the syntax used for using unary operators as postfix; it's not a function parameter.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-2-operator-unary-operator-overloading","title":"Example 2: ++ Operator (Unary Operator) Overloading","text":"<pre><code>// Overload ++ when used as prefix and postfix\n#include &lt;iostream&gt;\nusing namespace std;\nclass Count {\nprivate:\nint value;\npublic:\n// Constructor to initialize count to 5\nCount() : value(5) {}\n// Overload ++ when used as prefix\nvoid operator ++ () {\n++value;\n}\n// Overload ++ when used as postfix\nvoid operator ++ (int) {\nvalue++;\n}\nvoid display() {\ncout &lt;&lt; \"Count: \" &lt;&lt; value &lt;&lt; endl;\n}\n};\nint main() {\nCount count1;\n// Call the \"void operator ++ (int)\" function\ncount1++;\ncount1.display();\n// Call the \"void operator ++ ()\" function\n++count1;\ncount1.display();\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>Count: 6\nCount: 7\n</code></pre> <p>The\u00a0Example 2\u00a0works when\u00a0<code>++</code>\u00a0is used as both prefix and postfix. However, it doesn't work if we try to do something like this:</p> <pre><code>Count count1, result;\n// Error\nresult = ++count1;\n</code></pre> <p>This is because the return type of our operator function is\u00a0<code>void</code>. We can solve this problem by making\u00a0<code>Count</code>\u00a0as the return type of the operator function.</p> <pre><code>// return Count when ++ used as prefix\nCount operator ++ () {\n// code\n}\n// return Count when ++ used as postfix\nCount operator ++ (int) {\n// code\n}\n</code></pre>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-3-return-value-from-operator-function-operator","title":"Example 3: Return Value from Operator Function (++ Operator)","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nclass Count {\nprivate:\nint value;\npublic\n:\n// Constructor to initialize count to 5\nCount() : value(5) {}\n// Overload ++ when used as prefix\nCount operator ++ () {\nCount temp;\n// Here, value is the value attribute of the calling object\ntemp.value = ++value;\nreturn temp;\n}\n// Overload ++ when used as postfix\nCount operator ++ (int) {\nCount temp;\n// Here, value is the value attribute of the calling object\ntemp.value = value++;\nreturn temp;\n}\nvoid display() {\ncout &lt;&lt; \"Count: \" &lt;&lt; value &lt;&lt; endl;\n}\n};\nint main() {\nCount count1, result;\n// Call the \"Count operator ++ ()\" function\nresult = ++count1;\nresult.display();\n// Call the \"Count operator ++ (int)\" function\nresult = count1++;\nresult.display();\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>Count: 6\nCount: 6\n</code></pre> <p>Here, we have used the following code for prefix operator overloading:</p> <pre><code>// Overload ++ when used as prefix\nCount operator ++ () {\nCount temp;\n// Here, value is the value attribute of the calling object\ntemp.value = ++value;\nreturn temp;\n}\n</code></pre> <p>The code for the postfix operator overloading is also similar. Notice that we have created an object\u00a0temp\u00a0and returned its value to the operator function.</p> <p>Also, notice the code</p> <pre><code>temp.value = ++value; </code></pre> <p>The variable\u00a0value\u00a0belongs to the\u00a0count1\u00a0object in\u00a0<code>main()</code>\u00a0because\u00a0count1\u00a0is calling the function, while\u00a0temp.value\u00a0belongs to the\u00a0temp\u00a0object.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#operator-overloading-in-binary-operators","title":"Operator Overloading in Binary Operators","text":"<p>Binary operators work on two operands. For example,</p> <pre><code>result = num + 9;\n</code></pre> <p>Here,\u00a0<code>+</code>\u00a0is a binary operator that works on the operands\u00a0num\u00a0and\u00a0<code>9</code>.</p> <p>When we overload the binary operator for user-defined types by using the code:</p> <pre><code>obj3 = obj1 + obj2;\n</code></pre> <p>The operator function is called using the\u00a0obj1\u00a0object and\u00a0obj2\u00a0is passed as an argument to the function.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-4-c-binary-operator-overloading","title":"Example 4: C++ Binary Operator Overloading","text":"<pre><code>// C++ program to overload the binary operator +\n// This program adds two complex numbers\n#include &lt;iostream&gt;\nusing namespace std;\nclass Complex {\nprivate:\nfloat real;\nfloat imag;\npublic:\n// Constructor to initialize real and imag to 0\nComplex() : real(0), imag(0) {}\nvoid input() {\ncout &lt;&lt; \"Enter real and imaginary parts respectively: \";\ncin &gt;&gt; real;\ncin &gt;&gt; imag;\n}\n// Overload the + operator\nComplex operator + (const Complex&amp; obj) {\nComplex temp;\ntemp.real = real + obj.real;\ntemp.imag = imag + obj.imag;\nreturn temp;\n}\nvoid output() {\nif (imag &lt; 0)\ncout &lt;&lt; \"Output Complex number: \" &lt;&lt; real &lt;&lt; imag &lt;&lt; \"i\";\nelse\ncout &lt;&lt; \"Output Complex number: \" &lt;&lt; real &lt;&lt; \"+\" &lt;&lt; imag &lt;&lt; \"i\";\n}\n};\nint main() {\nComplex complex1, complex2, result;\ncout &lt;&lt; \"Enter first complex number:\\n\";\ncomplex1.input();\ncout &lt;&lt; \"Enter second complex number:\\n\";\ncomplex2.input();\n// complex1 calls the operator function\n// complex2 is passed as an argument to the function\nresult = complex1 + complex2;\nresult.output();\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>Enter first complex number:\nEnter real and imaginary parts respectively: 9 5\nEnter second complex number:\nEnter real and imaginary parts respectively: 7 6\nOutput Complex number: 16+11i\n</code></pre> <p>In this program, the operator function is:</p> <pre><code>Complex operator + (const Complex&amp; obj) {\n// code\n}\n</code></pre> <p>Instead of this, we also could have written this function like:</p> <pre><code>Complex operator + (Complex obj) {\n// code\n}\n</code></pre> <p>However,</p> <ul> <li>using\u00a0<code>&amp;</code>\u00a0makes our code efficient by referencing the\u00a0complex2\u00a0object instead of making a duplicate object inside the operator function.</li> <li>using\u00a0<code>const</code>\u00a0is considered a good practice because it prevents the operator function from modifying\u00a0complex2.</li> </ul> <p></p> <p>Overloading binary operators in C++</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#things-to-remember-in-c-operator-overloading","title":"Things to Remember in C++ Operator Overloading","text":"<ol> <li>Two operators\u00a0<code>=</code>\u00a0and\u00a0<code>&amp;</code>\u00a0are already overloaded by default in C++. For example, to\u00a0copy objects of the same class, we can directly use the\u00a0<code>=</code>\u00a0operator. We do not need to create an operator function.</li> <li>Operator overloading cannot change the\u00a0precedence and associativity of operators. However, if we want to change the order of evaluation, parentheses should be used.</li> <li>There are 4 operators that cannot be overloaded in C++. They are:</li> <li><code>::</code>\u00a0(scope resolution)</li> <li><code>.</code>\u00a0(member selection)</li> <li><code>.*</code>\u00a0(member selection through pointer to function)</li> <li><code>?:</code>\u00a0(ternary operator)</li> </ol> <p>Visit these pages to learn more on:</p> <ul> <li>How to overload increment operator in right way?</li> <li>How to overload binary operator - to subtract complex numbers?</li> </ul>"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-pointers","title":"C++ Pointers","text":""},{"location":"week-6-cpp/ce103-week-6-cpp/#c-pointers_1","title":"C++ Pointers","text":"<p>In this tutorial, we will learn about pointers in C++ and their working with the help of examples.</p> <p>In C++, pointers are variables that store the memory addresses of other variables.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#address-in-c","title":"Address in C++","text":"<p>If we have a variable\u00a0var\u00a0in our program,\u00a0&amp;var\u00a0will give us its address in the memory. For example,</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-1-printing-variable-addresses-in-c","title":"Example 1: Printing Variable Addresses in C++","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\n// declare variables\nint var1 = 3;\nint var2 = 24;\nint var3 = 17;\n// print address of var1\ncout &lt;&lt; \"Address of var1: \"&lt;&lt; &amp;var1 &lt;&lt; endl;\n// print address of var2\ncout &lt;&lt; \"Address of var2: \" &lt;&lt; &amp;var2 &lt;&lt; endl;\n// print address of var3\ncout &lt;&lt; \"Address of var3: \" &lt;&lt; &amp;var3 &lt;&lt; endl;\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>Address of var1: 0x7fff5fbff8ac\nAddress of var2: 0x7fff5fbff8a8\nAddress of var3: 0x7fff5fbff8a4\n</code></pre> <p>Here,\u00a0<code>0x</code>\u00a0at the beginning represents the address is in the hexadecimal form.</p> <p>Notice that the first address differs from the second by 4 bytes and the second address differs from the third by 4 bytes.</p> <p>This is because the size of an\u00a0<code>int</code>\u00a0variable is 4 bytes in a 64-bit system.</p> <p>Note:\u00a0You may not get the same results when you run the program.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-pointers_2","title":"C++ Pointers","text":"<p>As mentioned above, pointers are used to store addresses rather than values.</p> <p>Here is how we can declare pointers.</p> <pre><code>int *pointVar;\n</code></pre> <p>Here, we have declared a pointer\u00a0pointVar\u00a0of the\u00a0<code>int</code>\u00a0type.</p> <p>We can also declare pointers in the following way.</p> <pre><code>int* pointVar; // preferred syntax\n</code></pre> <p>Let's take another example of declaring pointers.</p> <pre><code>int* pointVar, p;\n</code></pre> <p>Here, we have declared a pointer\u00a0pointVar\u00a0and a normal variable\u00a0p.  </p> <p>Note:\u00a0The\u00a0<code>*</code>\u00a0operator is used after the data type to declare pointers.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#assigning-addresses-to-pointers","title":"Assigning Addresses to Pointers","text":"<p>Here is how we can assign addresses to pointers:</p> <pre><code>int* pointVar, var;\nvar = 5;\n// assign address of var to pointVar pointer\npointVar = &amp;var;\n</code></pre> <p>Here,\u00a0<code>5</code>\u00a0is assigned to the variable\u00a0var. And, the address of\u00a0var\u00a0is assigned to the\u00a0pointVar\u00a0pointer with the code\u00a0<code>pointVar = &amp;var</code>.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#get-the-value-from-the-address-using-pointers","title":"Get the Value from the Address Using Pointers","text":"<p>To get the value pointed by a pointer, we use the\u00a0<code>*</code>\u00a0operator. For example:</p> <pre><code>int* pointVar, var;\nvar = 5;\n// assign address of var to pointVar\npointVar = &amp;var;\n// access value pointed by pointVar\ncout &lt;&lt; *pointVar &lt;&lt; endl;   // Output: 5\n</code></pre> <p>In the above code, the address of var is assigned to\u00a0pointVar. We have used the\u00a0<code>*pointVar</code>\u00a0to get the value stored in that address.</p> <p>When\u00a0<code>*</code>\u00a0is used with pointers, it's called the\u00a0dereference operator. It operates on a pointer and gives the value pointed by the address stored in the pointer. That is,\u00a0<code>*pointVar = var</code>.</p> <p>Note: In C++,\u00a0pointVar\u00a0and\u00a0*pointVar\u00a0is completely different. We cannot do something like\u00a0<code>*pointVar = &amp;var;</code></p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-2-working-of-c-pointers","title":"Example 2: Working of C++ Pointers","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint main() {\nint var = 5;\n// declare pointer variable\nint* pointVar;\n// store address of var\npointVar = &amp;var;\n// print value of var\ncout &lt;&lt; \"var = \" &lt;&lt; var &lt;&lt; endl;\n// print address of var\ncout &lt;&lt; \"Address of var (&amp;var) = \" &lt;&lt; &amp;var &lt;&lt; endl\n&lt;&lt; endl;\n// print pointer pointVar\ncout &lt;&lt; \"pointVar = \" &lt;&lt; pointVar &lt;&lt; endl;\n// print the content of the address pointVar points to\ncout &lt;&lt; \"Content of the address pointed to by pointVar (*pointVar) = \" &lt;&lt; *pointVar &lt;&lt; endl;\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>var = 5\nAddress of var (&amp;var) = 0x61ff08\npointVar = 0x61ff08\nContent of the address pointed to by pointVar (*pointVar) = 5\n</code></pre> <p></p> <p>Working of C++ pointers</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#changing-value-pointed-by-pointers","title":"Changing Value Pointed by Pointers","text":"<p>If\u00a0pointVar\u00a0points to the address of\u00a0var, we can change the value of\u00a0var\u00a0by using\u00a0*pointVar.</p> <p>For example,</p> <pre><code>int var = 5;\nint* pointVar;\n// assign address of var\npointVar = &amp;var;\n// change value at address pointVar\n*pointVar = 1;\ncout &lt;&lt; var &lt;&lt; endl; // Output: 1\n</code></pre> <p>Here,\u00a0pointVar\u00a0and\u00a0<code>&amp;var</code>\u00a0have the same address, the value of\u00a0var\u00a0will also be changed when\u00a0*pointVar\u00a0is changed.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-3-changing-value-pointed-by-pointers","title":"Example 3: Changing Value Pointed by Pointers","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint main() {\nint var = 5;\nint* pointVar;\n// store address of var\npointVar = &amp;var;\n// print var\ncout &lt;&lt; \"var = \" &lt;&lt; var &lt;&lt; endl;\n// print *pointVar\ncout &lt;&lt; \"*pointVar = \" &lt;&lt; *pointVar &lt;&lt; endl\n&lt;&lt; endl;\ncout &lt;&lt; \"Changing value of var to 7:\" &lt;&lt; endl;\n// change value of var to 7\nvar = 7;\n// print var\ncout &lt;&lt; \"var = \" &lt;&lt; var &lt;&lt; endl;\n// print *pointVar\ncout &lt;&lt; \"*pointVar = \" &lt;&lt; *pointVar &lt;&lt; endl\n&lt;&lt; endl;\ncout &lt;&lt; \"Changing value of *pointVar to 16:\" &lt;&lt; endl;\n// change value of var to 16\n*pointVar = 16;\n// print var\ncout &lt;&lt; \"var = \" &lt;&lt; var &lt;&lt; endl;\n// print *pointVar\ncout &lt;&lt; \"*pointVar = \" &lt;&lt; *pointVar &lt;&lt; endl;\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>var = 5\n*pointVar = 5\nChanging value of var to 7:\nvar = 7\n*pointVar = 7\nChanging value of *pointVar to 16:\nvar = 16\n*pointVar = 16\n</code></pre>"},{"location":"week-6-cpp/ce103-week-6-cpp/#common-mistakes-when-working-with-pointers","title":"Common mistakes when working with pointers","text":"<p>Suppose, we want a pointer\u00a0varPoint\u00a0to point to the address of\u00a0var. Then,</p> <pre><code>int var, *varPoint;\n// Wrong! \n// varPoint is an address but var is not\nvarPoint = var;\n// Wrong!\n// &amp;var is an address\n// *varPoint is the value stored in &amp;var\n*varPoint = &amp;var;\n// Correct! \n// varPoint is an address and so is &amp;var\nvarPoint = &amp;var;\n// Correct!\n// both *varPoint and var are values\n*varPoint = var;\n</code></pre> <p>Recommended Readings:</p> <ul> <li>How to use generic data type pointers using a void pointer?</li> <li>How to represent an array using a pointer?</li> <li>How to use pointers with functions?</li> <li>How to use pointers with structures?</li> </ul>"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-pointers-and-arrays","title":"C++ Pointers and Arrays","text":"<p>In this tutorial, we will learn about the relation between arrays and pointers with the help of examples.</p> <p>In C++,\u00a0Pointers\u00a0are variables that hold addresses of other variables. Not only can a pointer store the address of a single variable, it can also store the address of cells of an\u00a0array.</p> <p>Consider this example:</p> <pre><code>int *ptr;\nint arr[5];\n// store the address of the first\n// element of arr in ptr\nptr = arr;\n</code></pre> <p>Here,\u00a0ptr\u00a0is a pointer variable while\u00a0arr\u00a0is an\u00a0<code>int</code>\u00a0array. The code\u00a0<code>ptr = arr;</code>\u00a0stores the address of the first element of the array in variable\u00a0ptr.</p> <p>Notice that we have used\u00a0<code>arr</code>\u00a0instead of\u00a0<code>&amp;arr[0]</code>. This is because both are the same. So, the code below is the same as the code above.</p> <pre><code>int *ptr;\nint arr[5];\nptr = &amp;arr[0];\n</code></pre> <p>The addresses for the rest of the array elements are given by\u00a0<code>&amp;arr[1]</code>,\u00a0<code>&amp;arr[2]</code>,\u00a0<code>&amp;arr[3]</code>, and\u00a0<code>&amp;arr[4]</code>.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#point-to-every-array-elements","title":"Point to Every Array Elements","text":"<p>Suppose we need to point to the fourth element of the array using the same pointer\u00a0ptr.</p> <p>Here, if\u00a0ptr\u00a0points to the first element in the above example then\u00a0<code>ptr + 3</code>\u00a0will point to the fourth element. For example,</p> <pre><code>int *ptr;\nint arr[5];\nptr = arr;\nptr + 1 is equivalent to &amp;arr[1];\nptr + 2 is equivalent to &amp;arr[2];\nptr + 3 is equivalent to &amp;arr[3];\nptr + 4 is equivalent to &amp;arr[4];\n</code></pre> <p>Similarly, we can access the elements using the single pointer. For example,</p> <pre><code>// use dereference operator\n*ptr == arr[0];\n*(ptr + 1) is equivalent to arr[1];\n*(ptr + 2) is equivalent to arr[2];\n*(ptr + 3) is equivalent to arr[3];\n*(ptr + 4) is equivalent to arr[4];\n</code></pre> <p>Suppose if we have initialized\u00a0<code>ptr = &amp;arr[2];</code>\u00a0then</p> <pre><code>ptr - 2 is equivalent to &amp;arr[0];\nptr - 1 is equivalent to &amp;arr[1]; ptr + 1 is equivalent to &amp;arr[3];\nptr + 2 is equivalent to &amp;arr[4];\n</code></pre> <p></p> <p>Working of C++ Pointers with Arrays</p> <p>Note:\u00a0The address between\u00a0ptr\u00a0and\u00a0ptr + 1\u00a0differs by 4 bytes. It is because\u00a0ptr\u00a0is a pointer to an\u00a0<code>int</code>\u00a0data. And, the size of int is 4 bytes in a 64-bit operating system.</p> <p>Similarly, if pointer\u00a0ptr\u00a0is pointing to\u00a0<code>char</code>\u00a0type data, then the address between\u00a0ptr\u00a0and\u00a0ptr + 1\u00a0is 1 byte. It is because the size of a character is 1 byte.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-1-c-pointers-and-arrays","title":"Example 1: C++ Pointers and Arrays","text":"<pre><code>// C++ Program to display address of each element of an array \n#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\nfloat arr[3];\n// declare pointer variable\nfloat *ptr;\ncout &lt;&lt; \"Displaying address using arrays: \" &lt;&lt; endl;\n// use for loop to print addresses of all array elements\nfor (int i = 0; i &lt; 3; ++i)\n{\ncout &lt;&lt; \"&amp;arr[\" &lt;&lt; i &lt;&lt; \"] = \" &lt;&lt; &amp;arr[i] &lt;&lt; endl;\n}\n// ptr = &amp;arr[0]\nptr = arr;\ncout&lt;&lt;\"\\nDisplaying address using pointers: \"&lt;&lt; endl;\n// use for loop to print addresses of all array elements\n// using pointer notation\nfor (int i = 0; i &lt; 3; ++i)\n{\ncout &lt;&lt; \"ptr + \" &lt;&lt; i &lt;&lt; \" = \"&lt;&lt; ptr + i &lt;&lt; endl;\n}\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>Displaying address using arrays: &amp;arr[0] = 0x61fef0\n&amp;arr[1] = 0x61fef4\n&amp;arr[2] = 0x61fef8\nDisplaying address using pointers: ptr + 0 = 0x61fef0\nptr + 1 = 0x61fef4\nptr + 2 = 0x61fef8\n</code></pre> <p>In the above program, we first simply printed the addresses of the array elements without using the pointer variable\u00a0ptr.</p> <p>Then, we used the pointer\u00a0ptr\u00a0to point to the address of\u00a0a[0],\u00a0<code>ptr + 1</code>\u00a0to point to the address of\u00a0a[1], and so on.</p> <p>In most contexts, array names decay to pointers. In simple words, array names are converted to pointers. That's the reason why we can use pointers to access elements of arrays.</p> <p>However, we should remember that pointers and arrays are not the same.</p> <p>There are a few cases where array names don't decay to pointers. To learn more, visit:\u00a0When does array name doesn't decay into a pointer?</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-2-array-name-used-as-pointer","title":"Example 2: Array name used as pointer","text":"<pre><code>// C++ Program to insert and display data entered by using pointer notation.\n#include &lt;iostream&gt;\nusing namespace std;\nint main() {\nfloat arr[5];\n// Insert data using pointer notation\ncout &lt;&lt; \"Enter 5 numbers: \";\nfor (int i = 0; i &lt; 5; ++i) {\n// store input number in arr[i]\ncin &gt;&gt; *(arr + i) ;\n}\n// Display data using pointer notation\ncout &lt;&lt; \"Displaying data: \" &lt;&lt; endl;\nfor (int i = 0; i &lt; 5; ++i) {\n// display value of arr[i]\ncout &lt;&lt; *(arr + i) &lt;&lt; endl ;\n}\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>Enter 5 numbers: 2.5\n3.5\n4.5\n5\n2\nDisplaying data: 2.5\n3.5\n4.5\n5\n2\n</code></pre> <p>Here,</p> <ol> <li>We first used the pointer notation to store the numbers entered by the user into the array\u00a0arr.</li> </ol> <pre><code>cin &gt;&gt; *(arr + i) ;\n</code></pre> <p>This code is equivalent to the code below:</p> <pre><code>cin &gt;&gt; arr[i];\n</code></pre> <p>Notice that we haven't declared a separate pointer variable, but rather we are using the array name\u00a0arr\u00a0for the pointer notation.</p> <p>As we already know, the array name\u00a0arr\u00a0points to the first element of the array. So, we can think of\u00a0arr\u00a0as acting like a pointer.</p> <ol> <li>Similarly, we then used\u00a0<code>for</code>\u00a0loop to display the values of\u00a0arr\u00a0using pointer notation.</li> </ol> <pre><code>cout &lt;&lt; *(arr + i) &lt;&lt; endl ;\n</code></pre> <p>This code is equivalent to</p> <pre><code>cout &lt;&lt; arr[i] &lt;&lt; endl ;\n</code></pre>"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-call-by-reference-using-pointers","title":"C++ Call by Reference: Using pointers","text":"<p>In this tutorial, we will learn about C++ call by reference to pass pointers as an argument to the function with the help of examples.</p> <p>In the\u00a0C++ Functions\u00a0tutorial, we learned about passing arguments to a function. This method used is called passing by value because the actual value is passed.</p> <p>However, there is another way of passing arguments to a function where the actual values of arguments are not passed. Instead, the reference to values is passed.</p> <p>For example,</p> <pre><code>// function that takes value as parameter\nvoid func1(int numVal) {\n// code\n}\n// function that takes reference as parameter\n// notice the &amp; before the parameter\nvoid func2(int &amp;numRef) {\n// code\n}\nint main() {\nint num = 5;\n// pass by value\nfunc1(num);\n// pass by reference\nfunc2(num);\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Notice the\u00a0<code>&amp;</code>\u00a0in\u00a0<code>void func2(int &amp;numRef)</code>. This denotes that we are using the address of the variable as our parameter.</p> <p>So, when we call the\u00a0<code>func2()</code>\u00a0function in\u00a0<code>main()</code>\u00a0by passing the variable\u00a0num\u00a0as an argument, we are actually passing the address of\u00a0num\u00a0variable instead of the value\u00a05.</p> <p></p> <p>C++ Pass by Value vs. Pass by Reference</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-1-passing-by-reference-without-pointers","title":"Example 1: Passing by reference without pointers","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n// function definition to swap values\nvoid swap(int &amp;n1, int &amp;n2) {\nint temp;\ntemp = n1;\nn1 = n2;\nn2 = temp;\n}\nint main()\n{\n// initialize variables\nint a = 1, b = 2;\ncout &lt;&lt; \"Before swapping\" &lt;&lt; endl;\ncout &lt;&lt; \"a = \" &lt;&lt; a &lt;&lt; endl;\ncout &lt;&lt; \"b = \" &lt;&lt; b &lt;&lt; endl;\n// call function to swap numbers\nswap(a, b);\ncout &lt;&lt; \"\\nAfter swapping\" &lt;&lt; endl;\ncout &lt;&lt; \"a = \" &lt;&lt; a &lt;&lt; endl;\ncout &lt;&lt; \"b = \" &lt;&lt; b &lt;&lt; endl;\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>Before swapping\na = 1\nb = 2\nAfter swapping\na = 2\nb = 1\n</code></pre> <p>In this program, we passed the variables\u00a0a\u00a0and\u00a0b\u00a0to the\u00a0<code>swap()</code>\u00a0function. Notice the function definition,</p> <pre><code>void swap(int &amp;n1, int &amp;n2)\n</code></pre> <p>Here, we are using\u00a0<code>&amp;</code>\u00a0to denote that the function will accept addresses as its parameters.</p> <p>Hence, the compiler can identify that instead of actual values, the reference of the variables is passed to function parameters.</p> <p>In the\u00a0<code>swap()</code>\u00a0function, the function parameters\u00a0n1\u00a0and\u00a0n2\u00a0are pointing to the same value as the variables\u00a0a\u00a0and\u00a0b\u00a0respectively. Hence the swapping takes place on actual value.</p> <p>The same task can be done using the pointers. To learn about pointers, visit\u00a0C++ Pointers.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-2-passing-by-reference-using-pointers","title":"Example 2: Passing by reference using pointers","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n// function prototype with pointer as parameters\nvoid swap(int*, int*);\nint main()\n{\n// initialize variables\nint a = 1, b = 2;\ncout &lt;&lt; \"Before swapping\" &lt;&lt; endl;\ncout &lt;&lt; \"a = \" &lt;&lt; a &lt;&lt; endl;\ncout &lt;&lt; \"b = \" &lt;&lt; b &lt;&lt; endl;\n// call function by passing variable addresses\nswap(&amp;a, &amp;b);\ncout &lt;&lt; \"\\nAfter swapping\" &lt;&lt; endl;\ncout &lt;&lt; \"a = \" &lt;&lt; a &lt;&lt; endl;\ncout &lt;&lt; \"b = \" &lt;&lt; b &lt;&lt; endl;\nreturn 0;\n}\n// function definition to swap numbers\nvoid swap(int* n1, int* n2) {\nint temp;\ntemp = *n1;\n*n1 = *n2;\n*n2 = temp;\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>Before swapping\na = 1\nb = 2\nAfter swapping\na = 2\nb = 1\n</code></pre> <p>Here, we can see the output is the same as the previous example. Notice the line,</p> <pre><code>// &amp;a is address of a\n// &amp;b is address of b\nswap(&amp;a, &amp;b);\n</code></pre> <p>Here, the address of the variable is passed during the function call rather than the variable.</p> <p>Since the address is passed instead of value, a dereference operator\u00a0<code>*</code>\u00a0must be used to access the value stored in that address.</p> <pre><code>temp = *n1;\n*n1 = *n2;\n*n2 = temp;\n</code></pre> <p><code>*n1</code>\u00a0and\u00a0<code>*n2</code>\u00a0gives the value stored at address\u00a0n1\u00a0and\u00a0n2\u00a0respectively.</p> <p>Since\u00a0n1\u00a0and\u00a0n2\u00a0contain the addresses of\u00a0a\u00a0and\u00a0b, anything is done to\u00a0<code>*n1</code>\u00a0and\u00a0*n2\u00a0will change the actual values of\u00a0a\u00a0and\u00a0b.</p> <p>Hence, when we print the values of\u00a0a\u00a0and\u00a0b\u00a0in the\u00a0<code>main()</code>\u00a0function, the values are changed.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-memory-management-new-and-delete","title":"C++ Memory Management: new and delete","text":"<p>In this tutorial, we will learn to manage memory effectively in C++ using new and delete operations with the help of examples.</p> <p>C++ allows us to allocate the memory of a variable or an array in run time. This is known as dynamic memory allocation.</p> <p>In other programming languages such as Java and Python, the compiler automatically manages the memories allocated to variables. But this is not the case in C++.</p> <p>In C++, we need to deallocate the dynamically allocated memory manually after we have no use for the variable.</p> <p>We can allocate and then deallocate memory dynamically using the\u00a0<code>new</code>\u00a0and\u00a0<code>delete</code>\u00a0operators respectively.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-new-operator","title":"C++ new Operator","text":"<p>The\u00a0<code>new</code>\u00a0operator allocates memory to a variable. For example,</p> <pre><code>// declare an int pointer\nint* pointVar;\n// dynamically allocate memory\n// using the new keyword \npointVar = new int;\n// assign value to allocated memory\n*pointVar = 45;\n</code></pre> <p>Here, we have dynamically allocated memory for an\u00a0<code>int</code>\u00a0variable using the\u00a0<code>new</code>\u00a0operator.</p> <p>Notice that we have used the pointer\u00a0pointVar\u00a0to allocate the memory dynamically. This is because the\u00a0<code>new</code>\u00a0operator returns the address of the memory location.</p> <p>In the case of an array, the\u00a0<code>new</code>\u00a0operator returns the address of the first element of the array.</p> <p>From the example above, we can see that the syntax for using the\u00a0<code>new</code>\u00a0operator is</p> <pre><code>pointerVariable = new dataType;\n</code></pre>"},{"location":"week-6-cpp/ce103-week-6-cpp/#delete-operator","title":"delete Operator","text":"<p>Once we no longer need to use a variable that we have declared dynamically, we can deallocate the memory occupied by the variable.</p> <p>For this, the\u00a0<code>delete</code>\u00a0operator is used. It returns the memory to the operating system. This is known as\u00a0memory deallocation.</p> <p>The syntax for this operator is</p> <pre><code>delete pointerVariable;\n</code></pre> <p>Consider the code:</p> <pre><code>// declare an int pointer\nint* pointVar;\n// dynamically allocate memory\n// for an int variable \npointVar = new int;\n// assign value to the variable memory\n*pointVar = 45;\n// print the value stored in memory\ncout &lt;&lt; *pointVar; // Output: 45\n// deallocate the memory\ndelete pointVar;\n</code></pre> <p>Here, we have dynamically allocated memory for an\u00a0<code>int</code>\u00a0variable using the pointer\u00a0pointVar.</p> <p>After printing the contents of\u00a0pointVar, we deallocated the memory using\u00a0<code>delete</code>.</p> <p>Note: If the program uses a large amount of unwanted memory using\u00a0<code>new</code>, the system may crash because there will be no memory available for the operating system. In this case, the\u00a0<code>delete</code>\u00a0operator can help the system from crash.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-1-c-dynamic-memory-allocation","title":"Example 1: C++ Dynamic Memory Allocation","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint main() {\n// declare an int pointer\nint* pointInt;\n// declare a float pointer\nfloat* pointFloat;\n// dynamically allocate memory\npointInt = new int;\npointFloat = new float;\n// assigning value to the memory\n*pointInt = 45;\n*pointFloat = 45.45f;\ncout &lt;&lt; *pointInt &lt;&lt; endl;\ncout &lt;&lt; *pointFloat &lt;&lt; endl;\n// deallocate the memory\ndelete pointInt;\ndelete pointFloat;\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>45\n45.45\n</code></pre> <p>In this program, we dynamically allocated memory to two variables of\u00a0<code>int</code>\u00a0and\u00a0<code>float</code>\u00a0types. After assigning values to them and printing them, we finally deallocate the memories using the code</p> <pre><code>delete pointInt;\ndelete pointFloat;\n</code></pre> <p>Note:\u00a0Dynamic memory allocation can make memory management more efficient.</p> <p>Especially for arrays, where a lot of the times we don't know the size of the array until the run time.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-2-c-new-and-delete-operator-for-arrays","title":"Example 2: C++ new and delete Operator for Arrays","text":"<pre><code>// C++ Program to store GPA of n number of students and display it\n// where n is the number of students entered by the user\n#include &lt;iostream&gt;\nusing namespace std;\nint main() {\nint num;\ncout &lt;&lt; \"Enter total number of students: \";\ncin &gt;&gt; num;\nfloat* ptr;\n// memory allocation of num number of floats\nptr = new float[num];\ncout &lt;&lt; \"Enter GPA of students.\" &lt;&lt; endl;\nfor (int i = 0; i &lt; num; ++i) {\ncout &lt;&lt; \"Student\" &lt;&lt; i + 1 &lt;&lt; \": \";\ncin &gt;&gt; *(ptr + i);\n}\ncout &lt;&lt; \"\\nDisplaying GPA of students.\" &lt;&lt; endl;\nfor (int i = 0; i &lt; num; ++i) {\ncout &lt;&lt; \"Student\" &lt;&lt; i + 1 &lt;&lt; \": \" &lt;&lt; *(ptr + i) &lt;&lt; endl;\n}\n// ptr memory is released\ndelete[] ptr;\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>Enter total number of students: 4\nEnter GPA of students.\nStudent1: 3.6\nStudent2: 3.1\nStudent3: 3.9\nStudent4: 2.9\nDisplaying GPA of students.\nStudent1: 3.6\nStudent2: 3.1\nStudent3: 3.9\nStudent4: 2.9\n</code></pre> <p>In this program, we have asked the user to enter the number of students and store it in the\u00a0num\u00a0variable.</p> <p>Then, we have allocated the memory dynamically for the\u00a0<code>float</code>\u00a0array using\u00a0new.</p> <p>We enter data into the array (and later print them) using pointer notation.</p> <p>After we no longer need the array, we deallocate the array memory using the code\u00a0<code>delete[] ptr;</code>.</p> <p>Notice the use of\u00a0<code>[]</code>\u00a0after\u00a0<code>delete</code>. We use the square brackets\u00a0<code>[]</code>\u00a0in order to denote that the memory deallocation is that of an array.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-3-c-new-and-delete-operator-for-objects","title":"Example 3: C++ new and delete Operator for Objects","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nclass Student {\nprivate:\nint age;\npublic:\n// constructor initializes age to 12\nStudent() : age(12) {}\nvoid getAge() {\ncout &lt;&lt; \"Age = \" &lt;&lt; age &lt;&lt; endl;\n}\n};\nint main() {\n// dynamically declare Student object\nStudent* ptr = new Student();\n// call getAge() function\nptr-&gt;getAge();\n// ptr memory is released\ndelete ptr;\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>Age = 12\n</code></pre> <p>In this program, we have created a\u00a0<code>Student</code>\u00a0class that has a private variable\u00a0age.</p> <p>We have initialized\u00a0age\u00a0to\u00a0<code>12</code>\u00a0in the default constructor\u00a0<code>Student()</code>\u00a0and print its value with the function\u00a0<code>getAge()</code>.</p> <p>In\u00a0<code>main()</code>, we have created a\u00a0<code>Student</code>\u00a0object using the\u00a0<code>new</code>\u00a0operator and use the pointer\u00a0ptr\u00a0to point to its address.</p> <p>The moment the object is created, the\u00a0<code>Student()</code>\u00a0constructor initializes\u00a0age\u00a0to\u00a0<code>12</code>.</p> <p>We then call the\u00a0<code>getAge()</code>\u00a0function using the code:</p> <pre><code>ptr-&gt;getAge();\n</code></pre> <p>Notice the arrow operator\u00a0<code>-&gt;</code>. This operator is used to access class members using pointers.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-inheritance","title":"C++ Inheritance","text":"<p>In this tutorial, we will learn about inheritance in C++ with the help of examples.</p> <p>Inheritance is one of the key features of Object-oriented programming in C++. It allows us to create a new\u00a0class\u00a0(derived class) from an existing class (base class).</p> <p>The derived class inherits the features from the base class\u00a0and can have additional features of its own. For example,</p> <pre><code>class Animal {\n// eat() function\n// sleep() function\n};\nclass Dog : public Animal {\n// bark() function\n};\n</code></pre> <p>Here, the\u00a0<code>Dog</code>\u00a0class is derived from the\u00a0<code>Animal</code>\u00a0class. Since\u00a0<code>Dog</code>\u00a0is derived from\u00a0<code>Animal</code>, members of\u00a0<code>Animal</code>\u00a0are accessible to\u00a0<code>Dog</code>.</p> <p></p> <p>Inheritance in C++</p> <p>Notice the use of the keyword\u00a0<code>public</code>\u00a0while inheriting Dog from Animal.</p> <pre><code>class Dog : public Animal {...};\n</code></pre> <p>We can also use the keywords\u00a0<code>private</code>\u00a0and\u00a0<code>protected</code>\u00a0instead of\u00a0<code>public</code>. We will learn about the differences between using\u00a0<code>private</code>,\u00a0<code>public</code>\u00a0and\u00a0<code>protected</code>\u00a0later in this tutorial.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#is-a-relationship","title":"is-a relationship","text":"<p>Inheritance is an\u00a0is-a relationship. We use inheritance only if an\u00a0is-a relationship\u00a0is present between the two classes.</p> <p>Here are some examples:</p> <ul> <li>A car is a vehicle.</li> <li>Orange is a fruit.</li> <li>A surgeon is a doctor.</li> <li>A dog is an animal.</li> </ul>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-1-simple-example-of-c-inheritance","title":"Example 1: Simple Example of C++ Inheritance","text":"<pre><code>// C++ program to demonstrate inheritance\n#include &lt;iostream&gt;\nusing namespace std;\n// base class\nclass Animal {\npublic:\nvoid eat() {\ncout &lt;&lt; \"I can eat!\" &lt;&lt; endl;\n}\nvoid sleep() {\ncout &lt;&lt; \"I can sleep!\" &lt;&lt; endl;\n}\n};\n// derived class\nclass Dog : public Animal {\npublic:\nvoid bark() {\ncout &lt;&lt; \"I can bark! Woof woof!!\" &lt;&lt; endl;\n}\n};\nint main() {\n// Create object of the Dog class\nDog dog1;\n// Calling members of the base class\ndog1.eat();\ndog1.sleep();\n// Calling member of the derived class\ndog1.bark();\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>I can eat!\nI can sleep!\nI can bark! Woof woof!!\n</code></pre> <p>Here,\u00a0dog1\u00a0(the object of derived class\u00a0<code>Dog</code>) can access members of the base class\u00a0<code>Animal</code>. It's because\u00a0<code>Dog</code>\u00a0is inherited from\u00a0<code>Animal</code>.</p> <pre><code>// Calling members of the Animal class\ndog1.eat();\ndog1.sleep();\n</code></pre>"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-protected-members","title":"C++ protected Members","text":"<p>The access modifier\u00a0<code>protected</code>\u00a0is especially relevant when it comes to C++ inheritance.</p> <p>Like\u00a0<code>private</code>\u00a0members,\u00a0<code>protected</code>\u00a0members are inaccessible outside of the class. However, they can be accessed by\u00a0derived classes\u00a0and\u00a0friend classes/functions.</p> <p>We need\u00a0<code>protected</code>\u00a0members if we want to hide the data of a class, but still want that data to be inherited by its derived classes.</p> <p>To learn more about protected, refer to our\u00a0C++ Access Modifiers\u00a0tutorial.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-2-c-protected-members","title":"Example 2 : C++ protected Members","text":"<pre><code>// C++ program to demonstrate protected members\n#include &lt;iostream&gt;\n#include &lt;string&gt;\nusing namespace std;\n// base class\nclass Animal {\nprivate:\nstring color;\nprotected:\nstring type;\npublic:\nvoid eat() {\ncout &lt;&lt; \"I can eat!\" &lt;&lt; endl;\n}\nvoid sleep() {\ncout &lt;&lt; \"I can sleep!\" &lt;&lt; endl;\n}\nvoid setColor(string clr) {\ncolor = clr;\n}\nstring getColor() {\nreturn color;\n}\n};\n// derived class\nclass Dog : public Animal {\npublic:\nvoid setType(string tp) {\ntype = tp;\n}\nvoid displayInfo(string c) {\ncout &lt;&lt; \"I am a \" &lt;&lt; type &lt;&lt; endl;\ncout &lt;&lt; \"My color is \" &lt;&lt; c &lt;&lt; endl;\n}\nvoid bark() {\ncout &lt;&lt; \"I can bark! Woof woof!!\" &lt;&lt; endl;\n}\n};\nint main() {\n// Create object of the Dog class\nDog dog1;\n// Calling members of the base class\ndog1.eat();\ndog1.sleep();\ndog1.setColor(\"black\");\n// Calling member of the derived class\ndog1.bark();\ndog1.setType(\"mammal\");\n// Using getColor() of dog1 as argument\n// getColor() returns string data\ndog1.displayInfo(dog1.getColor());\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>I can eat!\nI can sleep!\nI can bark! Woof woof!!\nI am a mammal\nMy color is black\n</code></pre> <p>Here, the variable\u00a0type\u00a0is\u00a0<code>protected</code>\u00a0and is thus accessible from the derived class\u00a0<code>Dog</code>. We can see this as we have initialized\u00a0<code>type</code>\u00a0in the\u00a0<code>Dog</code>\u00a0class using the function\u00a0<code>setType()</code>.</p> <p>On the other hand, the\u00a0<code>private</code>\u00a0variable\u00a0color\u00a0cannot be initialized in\u00a0<code>Dog</code>.</p> <pre><code>class Dog : public Animal {\npublic:\nvoid setColor(string clr) {\n// Error: member \"Animal::color\" is inaccessible\ncolor = clr; }\n};\n</code></pre> <p>Also, since the\u00a0<code>protected</code>\u00a0keyword hides data, we cannot access\u00a0type\u00a0directly from an object of\u00a0<code>Dog</code>\u00a0or\u00a0<code>Animal</code>\u00a0class.</p> <pre><code>// Error: member \"Animal::type\" is inaccessible\ndog1.type = \"mammal\";\n</code></pre>"},{"location":"week-6-cpp/ce103-week-6-cpp/#access-modes-in-c-inheritance","title":"Access Modes in C++ Inheritance","text":"<p>In our previous tutorials, we have learned about C++ access specifiers such as\u00a0public, private, and protected.</p> <p>So far, we have used the\u00a0<code>public</code>\u00a0keyword in order to inherit a class from a previously-existing base class. However, we can also use the\u00a0<code>private</code>\u00a0and\u00a0<code>protected</code>\u00a0keywords to inherit classes. For example,</p> <pre><code>class Animal {\n// code\n};\nclass Dog : private Animal {\n// code\n};\n</code></pre> <pre><code>class Cat : protected Animal {\n    // code\n};\n</code></pre> <p>The various ways we can derive classes are known as\u00a0access modes. These access modes have the following effect:</p> <ol> <li>public:\u00a0If a derived class is declared in\u00a0<code>public</code>\u00a0mode, then the members of the base class are inherited by the derived class just as they are.</li> <li>private:\u00a0In this case, all the members of the base class become\u00a0<code>private</code>\u00a0members in the derived class.</li> <li>protected:\u00a0The\u00a0<code>public</code>\u00a0members of the base class become\u00a0<code>protected</code>\u00a0members in the derived class.</li> </ol> <p>The\u00a0<code>private</code>\u00a0members of the base class are always\u00a0<code>private</code>\u00a0in the derived class.</p> <p>To learn more, visit our\u00a0C++ public, private, protected inheritance\u00a0tutorial.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#member-function-overriding-in-inheritance","title":"Member Function Overriding in Inheritance","text":"<p>Suppose, base class and derived class have member functions with the same name and arguments.</p> <p>If we create an object of the derived class and try to access that member function, the member function in the derived class is invoked instead of the one in the base class.</p> <p>The member function of derived class overrides the member function of base class.</p> <p>Learn more about\u00a0Function overriding in C++.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-public-protected-and-private-inheritance","title":"C++ Public, Protected and Private Inheritance","text":"<p>In this tutorial, we will learn to use public, protected and private inheritance in C++ with the help of examples.</p> <p>In\u00a0C++ inheritance, we can derive a child class from the base class in different access modes. For example,</p> <pre><code>class Base {\n.... ... ....\n};\nclass Derived : public Base {\n.... ... ....\n};\n</code></pre> <p>Notice the keyword\u00a0<code>public</code>\u00a0in the code</p> <pre><code>class Derived : public Base\n</code></pre> <p>This means that we have created a derived class from the base class in\u00a0public mode. Alternatively, we can also derive classes in\u00a0protected\u00a0or\u00a0private\u00a0modes.</p> <p>These 3 keywords (<code>public</code>,\u00a0<code>protected</code>, and\u00a0<code>private</code>) are known as\u00a0access specifiers\u00a0in C++ inheritance.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#public-protected-and-private-inheritance-in-c","title":"public, protected and private inheritance in C++","text":"<p>public,\u00a0protected,\u00a0and\u00a0private\u00a0inheritance have the following features:</p> <ul> <li>public inheritance\u00a0makes\u00a0<code>public</code>\u00a0members of the base class\u00a0<code>public</code>\u00a0in the derived class, and the\u00a0<code>protected</code>\u00a0members of the base class remain\u00a0<code>protected</code>\u00a0in the derived class.</li> <li>protected inheritance\u00a0makes the\u00a0<code>public</code>\u00a0and\u00a0<code>protected</code>\u00a0members of the base class\u00a0<code>protected</code>\u00a0in the derived class.</li> <li>private inheritance\u00a0makes the\u00a0<code>public</code>\u00a0and\u00a0<code>protected</code>\u00a0members of the base class\u00a0<code>private</code>\u00a0in the derived class.</li> </ul> <p>Note: <code>private</code>\u00a0members of the base class are inaccessible to the derived class.</p> <pre><code>class Base {\npublic:\nint x;\nprotected:\nint y;\nprivate:\nint z;\n};\nclass PublicDerived: public Base {\n// x is public\n// y is protected\n// z is not accessible from PublicDerived\n};\nclass ProtectedDerived: protected Base {\n// x is protected\n// y is protected\n// z is not accessible from ProtectedDerived\n};\nclass PrivateDerived: private Base {\n// x is private\n// y is private\n// z is not accessible from PrivateDerived\n};\n</code></pre>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-1-c-public-inheritance","title":"Example 1: C++ public Inheritance","text":"<pre><code>// C++ program to demonstrate the working of public inheritance\n#include &lt;iostream&gt;\nusing namespace std;\nclass Base {\nprivate:\nint pvt = 1;\nprotected:\nint prot = 2;\npublic:\nint pub = 3;\n// function to access private member\nint getPVT() {\nreturn pvt;\n}\n};\nclass PublicDerived : public Base {\npublic:\n// function to access protected member from Base\nint getProt() {\nreturn prot;\n}\n};\nint main() {\nPublicDerived object1;\ncout &lt;&lt; \"Private = \" &lt;&lt; object1.getPVT() &lt;&lt; endl;\ncout &lt;&lt; \"Protected = \" &lt;&lt; object1.getProt() &lt;&lt; endl;\ncout &lt;&lt; \"Public = \" &lt;&lt; object1.pub &lt;&lt; endl;\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>Private = 1\nProtected = 2\nPublic = 3\n</code></pre> <p>Here, we have derived\u00a0<code>PublicDerived</code>\u00a0from\u00a0<code>Base</code>\u00a0in\u00a0public mode.</p> <p>As a result, in\u00a0<code>PublicDerived</code>:</p> <ul> <li>prot\u00a0is inherited as\u00a0protected.</li> <li>pub\u00a0and\u00a0<code>getPVT()</code>\u00a0are inherited as\u00a0public.</li> <li>pvt\u00a0is inaccessible since it is\u00a0private\u00a0in\u00a0<code>Base</code>.</li> </ul> <p>Since\u00a0private\u00a0and\u00a0protected\u00a0members are not accessible from\u00a0<code>main()</code>, we need to create public functions\u00a0<code>getPVT()</code>\u00a0and\u00a0<code>getProt()</code>\u00a0to access them:</p> <pre><code>// Error: member \"Base::pvt\" is inaccessible\ncout &lt;&lt; \"Private = \" &lt;&lt; object1.pvt;\n// Error: member \"Base::prot\" is inaccessible\ncout &lt;&lt; \"Protected = \" &lt;&lt; object1.prot;\n</code></pre> <p>Notice that the\u00a0<code>getPVT()</code>\u00a0function has been defined inside\u00a0<code>Base</code>. But the\u00a0<code>getProt()</code>\u00a0function has been defined inside\u00a0<code>PublicDerived</code>.</p> <p>This is because\u00a0pvt, which is\u00a0private\u00a0in\u00a0<code>Base</code>, is inaccessible to\u00a0<code>PublicDerived</code>.</p> <p>However,\u00a0prot\u00a0is accessible to\u00a0<code>PublicDerived</code>\u00a0due to\u00a0public inheritance. So,\u00a0<code>getProt()</code>\u00a0can access the protected\u00a0variable from within\u00a0<code>PublicDerived</code>.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#accessibility-in-public-inheritance","title":"Accessibility in public Inheritance","text":"Accessibility private members protected members public members Base Class Yes Yes Yes Derived Class No Yes Yes"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-2-c-protected-inheritance","title":"Example 2: C++ protected Inheritance","text":"<pre><code>// C++ program to demonstrate the working of protected inheritance\n#include &lt;iostream&gt;\nusing namespace std;\nclass Base {\nprivate:\nint pvt = 1;\nprotected:\nint prot = 2;\npublic:\nint pub = 3;\n// function to access private member\nint getPVT() {\nreturn pvt;\n}\n};\nclass ProtectedDerived : protected Base {\npublic:\n// function to access protected member from Base\nint getProt() {\nreturn prot;\n}\n// function to access public member from Base\nint getPub() {\nreturn pub;\n}\n};\nint main() {\nProtectedDerived object1;\ncout &lt;&lt; \"Private cannot be accessed.\" &lt;&lt; endl;\ncout &lt;&lt; \"Protected = \" &lt;&lt; object1.getProt() &lt;&lt; endl;\ncout &lt;&lt; \"Public = \" &lt;&lt; object1.getPub() &lt;&lt; endl;\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>Private cannot be accessed.\nProtected = 2\nPublic = 3\n</code></pre> <p>Here, we have derived\u00a0<code>ProtectedDerived</code>\u00a0from\u00a0<code>Base</code>\u00a0in\u00a0protected mode.</p> <p>As a result, in\u00a0<code>ProtectedDerived</code>:</p> <ul> <li>prot,\u00a0pub\u00a0and\u00a0<code>getPVT()</code>\u00a0are inherited as\u00a0protected.</li> <li><code>pvt</code>\u00a0is inaccessible since it is\u00a0private\u00a0in\u00a0<code>Base</code>.</li> </ul> <p>As we know,\u00a0protected\u00a0members cannot be directly accessed\u00a0from outside the class. As a result, we cannot use\u00a0<code>getPVT()</code>\u00a0from\u00a0<code>ProtectedDerived</code>.</p> <p>That is also why we need to create the\u00a0<code>getPub()</code>\u00a0function in\u00a0<code>ProtectedDerived</code>\u00a0in order to access the\u00a0pub\u00a0variable.</p> <pre><code>// Error: member \"Base::getPVT()\" is inaccessible\ncout &lt;&lt; \"Private = \" &lt;&lt; object1.getPVT();\n// Error: member \"Base::pub\" is inaccessible\ncout &lt;&lt; \"Public = \" &lt;&lt; object1.pub;\n</code></pre>"},{"location":"week-6-cpp/ce103-week-6-cpp/#accessibility-in-protected-inheritance","title":"Accessibility in protected Inheritance","text":"Accessibility private members protected members public members Base Class Yes Yes Yes Derived Class No Yes Yes (inherited as protected variables)"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-3-c-private-inheritance","title":"Example 3: C++ private Inheritance","text":"<pre><code>// C++ program to demonstrate the working of private inheritance\n#include &lt;iostream&gt;\nusing namespace std;\nclass Base {\nprivate:\nint pvt = 1;\nprotected:\nint prot = 2;\npublic:\nint pub = 3;\n// function to access private member\nint getPVT() {\nreturn pvt;\n}\n};\nclass PrivateDerived : private Base {\npublic:\n// function to access protected member from Base\nint getProt() {\nreturn prot;\n}\n// function to access private member\nint getPub() {\nreturn pub;\n}\n};\nint main() {\nPrivateDerived object1;\ncout &lt;&lt; \"Private cannot be accessed.\" &lt;&lt; endl;\ncout &lt;&lt; \"Protected = \" &lt;&lt; object1.getProt() &lt;&lt; endl;\ncout &lt;&lt; \"Public = \" &lt;&lt; object1.getPub() &lt;&lt; endl;\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>Private cannot be accessed.\nProtected = 2\nPublic = 3\n</code></pre> <p>Here, we have derived\u00a0<code>PrivateDerived</code>\u00a0from\u00a0<code>Base</code>\u00a0in\u00a0private mode.</p> <p>As a result, in\u00a0<code>PrivateDerived</code>:</p> <ul> <li>prot,\u00a0<code>pub</code>\u00a0and\u00a0<code>getPVT()</code>\u00a0are inherited as\u00a0private.</li> <li>pvt\u00a0is inaccessible since it is\u00a0private\u00a0in\u00a0<code>Base</code>.</li> </ul> <p>As we know, private members cannot be directly accessed from outside the class. As a result, we cannot use\u00a0<code>getPVT()</code>\u00a0from\u00a0<code>PrivateDerived</code>.</p> <p>That is also why we need to create the\u00a0<code>getPub()</code>\u00a0function in\u00a0<code>PrivateDerived</code>\u00a0in order to access the\u00a0pub\u00a0variable.</p> <pre><code>// Error: member \"Base::getPVT()\" is inaccessible\ncout &lt;&lt; \"Private = \" &lt;&lt; object1.getPVT();\n// Error: member \"Base::pub\" is inaccessible\ncout &lt;&lt; \"Public = \" &lt;&lt; object1.pub;\n</code></pre>"},{"location":"week-6-cpp/ce103-week-6-cpp/#accessibility-in-private-inheritance","title":"Accessibility in private Inheritance","text":"Accessibility private members protected members public members Base Class Yes Yes Yes Derived Class No Yes (inherited as private variables) Yes (inherited as private variables)"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-function-overriding","title":"C++ Function Overriding","text":"<p>In this tutorial, we will learn about function overriding in C++ with the help of examples.</p> <p>As we know,\u00a0inheritance\u00a0is a feature of OOP that allows us to create derived classes from a base class. The derived classes inherit features of the base class.</p> <p>Suppose, the same function is defined in both the derived class and the based class. Now if we call this function using the object of the derived class, the function of the derived class is executed.</p> <p>This is known as\u00a0function overriding\u00a0in C++. The function in derived class overrides the function in base class.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-1-c-function-overriding","title":"Example 1: C++ Function Overriding","text":"<pre><code>// C++ program to demonstrate function overriding\n#include &lt;iostream&gt;\nusing namespace std;\nclass Base {\npublic:\nvoid print() {\ncout &lt;&lt; \"Base Function\" &lt;&lt; endl;\n}\n};\nclass Derived : public Base {\npublic:\nvoid print() {\ncout &lt;&lt; \"Derived Function\" &lt;&lt; endl;\n}\n};\nint main() {\nDerived derived1;\nderived1.print();\nreturn 0;\n}\n</code></pre> <p>Output</p> <pre><code>Derived Function\n</code></pre> <p>Here, the same function\u00a0<code>print()</code>\u00a0is defined in both\u00a0<code>Base</code>\u00a0and\u00a0<code>Derived</code>\u00a0classes.</p> <p>So, when we call\u00a0<code>print()</code>\u00a0from the\u00a0<code>Derived</code>\u00a0object\u00a0derived1, the\u00a0<code>print()</code>\u00a0from\u00a0<code>Derived</code>\u00a0is executed by overriding the function in\u00a0<code>Base</code>.</p> <p></p> <p>Working of function overriding in C++</p> <p>As we can see, the function was overridden because we called the function from an object of the\u00a0<code>Derived</code>\u00a0class.</p> <p>Had we called the\u00a0<code>print()</code>\u00a0function from an object of the\u00a0<code>Base</code>\u00a0class, the function would not have been overridden.</p> <pre><code>// Call function of Base class\nBase base1;\nbase1.print(); // Output: Base Function\n</code></pre>"},{"location":"week-6-cpp/ce103-week-6-cpp/#access-overridden-function-in-c","title":"Access Overridden Function in C++","text":"<p>To access the overridden function of the base class, we use the scope resolution operator\u00a0<code>::</code>.</p> <p>We can also access the overridden function by using a pointer of the base class to point to an object of the derived class and then calling the function from that pointer.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-2-c-access-overridden-function-to-the-base-class","title":"Example 2: C++ Access Overridden Function to the Base Class","text":"<pre><code>// C++ program to access overridden function\n// in main() using the scope resolution operator ::\n#include &lt;iostream&gt;\nusing namespace std;\nclass Base {\npublic:\nvoid print() {\ncout &lt;&lt; \"Base Function\" &lt;&lt; endl;\n}\n};\nclass Derived : public Base {\npublic:\nvoid print() {\ncout &lt;&lt; \"Derived Function\" &lt;&lt; endl;\n}\n};\nint main() {\nDerived derived1, derived2;\nderived1.print();\n// access print() function of the Base class\nderived2.Base::print();\nreturn 0;\n}\n</code></pre> <p>Output</p> <pre><code>Derived Function\nBase Function\n</code></pre> <p>Here, this statement</p> <pre><code>derived2.Base::print();\n</code></pre> <p>accesses the\u00a0<code>print()</code>\u00a0function of the Base class.</p> <p></p> <p>Access overridden function using object of derived class in C++</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-3-c-call-overridden-function-from-derived-class","title":"Example 3: C++ Call Overridden Function From Derived Class","text":"<pre><code>// C++ program to call the overridden function\n// from a member function of the derived class\n#include &lt;iostream&gt;\nusing namespace std;\nclass Base {\npublic:\nvoid print() {\ncout &lt;&lt; \"Base Function\" &lt;&lt; endl;\n}\n};\nclass Derived : public Base {\npublic:\nvoid print() {\ncout &lt;&lt; \"Derived Function\" &lt;&lt; endl;\n// call overridden function\nBase::print();\n}\n};\nint main() {\nDerived derived1;\nderived1.print();\nreturn 0;\n}\n</code></pre> <p>Output</p> <pre><code>Derived Function\nBase Function\n</code></pre> <p>In this program, we have called the overridden function inside the\u00a0<code>Derived</code>\u00a0class itself.</p> <pre><code>class Derived : public Base {\npublic:\nvoid print() {\ncout &lt;&lt; \"Derived Function\" &lt;&lt; endl;\nBase::print();\n}\n};\n</code></pre> <p>Notice the code\u00a0<code>Base::print();</code>, which calls the overridden function inside the\u00a0<code>Derived</code>\u00a0class.</p> <p></p> <p>Access overridden function inside derived class in C++</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-4-c-call-overridden-function-using-pointer","title":"Example 4: C++ Call Overridden Function Using Pointer","text":"<pre><code>// C++ program to access overridden function using pointer\n// of Base type that points to an object of Derived class\n#include &lt;iostream&gt;\nusing namespace std;\nclass Base {\npublic:\nvoid print() {\ncout &lt;&lt; \"Base Function\" &lt;&lt; endl;\n}\n};\nclass Derived : public Base {\npublic:\nvoid print() {\ncout &lt;&lt; \"Derived Function\" &lt;&lt; endl;\n}\n};\nint main() {\nDerived derived1;\n// pointer of Base type that points to derived1\nBase* ptr = &amp;derived1;\n// call function of Base class using ptr\nptr-&gt;print();\nreturn 0;\n}\n</code></pre> <p>Output</p> <pre><code>Base Function\n</code></pre> <p>In this program, we have created a pointer of\u00a0<code>Base</code>\u00a0type named\u00a0ptr. This pointer points to the\u00a0<code>Derived</code>\u00a0object\u00a0derived1.</p> <pre><code>// pointer of Base type that points to derived1\nBase* ptr = &amp;derived1;\n</code></pre> <p>When we call the\u00a0<code>print()</code>\u00a0function using\u00a0ptr, it calls the overridden function from\u00a0<code>Base</code>.</p> <pre><code>// call function of Base class using ptr\nptr-&gt;print();\n</code></pre> <p>This is because even though\u00a0ptr\u00a0points to a\u00a0<code>Derived</code>\u00a0object, it is actually of\u00a0<code>Base</code>\u00a0type. So, it calls the member function of\u00a0<code>Base</code>.</p> <p>In order to override the\u00a0<code>Base</code>\u00a0function instead of accessing it, we need to use\u00a0virtual functions\u00a0in the\u00a0<code>Base</code>\u00a0class.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-multiple-multilevel-and-hierarchical-inheritance","title":"C++ Multiple, Multilevel and Hierarchical Inheritance","text":"<p>In this tutorial, we will learn about different models of inheritance in C++ programming: Multiple, Multilevel and Hierarchical inheritance with examples.</p> <p>Inheritance\u00a0is one of the core feature of an object-oriented programming language. It allows software developers to derive a new class from the existing class. The derived class inherits the features of the base class (existing class).</p> <p>There are various models of inheritance in C++ programming.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-multilevel-inheritance","title":"C++ Multilevel Inheritance","text":"<p>In C++ programming, not only you can derive a class from the base class but you can also derive a class from the derived class. This form of inheritance is known as multilevel inheritance.</p> <pre><code>class A { ... .. ... };\nclass B: public A {\n... .. ...\n};\nclass C: public B {\n... ... ...\n};\n</code></pre> <p>Here, class\u00a0B\u00a0is derived from the base class\u00a0A\u00a0and the class\u00a0C\u00a0is derived from the derived class\u00a0B.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-1-c-multilevel-inheritance","title":"Example 1: C++ Multilevel Inheritance","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nclass A {\npublic:\nvoid display() {\ncout&lt;&lt;\"Base class content.\";\n}\n};\nclass B : public A {};\nclass C : public B {};\nint main() {\nC obj;\nobj.display();\nreturn 0;\n}\n</code></pre> <p>Output</p> <pre><code>Base class content.\n</code></pre> <p>In this program, class\u00a0C\u00a0is derived from class\u00a0B\u00a0(which is derived from base class\u00a0A).</p> <p>The\u00a0obj\u00a0object of class\u00a0C\u00a0is defined in the\u00a0<code>main()</code>\u00a0function.</p> <p>When the\u00a0<code>display()</code>\u00a0function is called,\u00a0<code>display()</code>\u00a0in class\u00a0A\u00a0is executed. It's because there is no\u00a0<code>display()</code>\u00a0function in class\u00a0C\u00a0and class\u00a0B.</p> <p>The compiler first looks for the\u00a0<code>display()</code>\u00a0function in class\u00a0C. Since the function doesn't exist there, it looks for the function in class\u00a0B\u00a0(as\u00a0C\u00a0is derived from\u00a0B).</p> <p>The function also doesn't exist in class\u00a0B, so the compiler looks for it in class\u00a0A\u00a0(as\u00a0B\u00a0is derived from\u00a0A).</p> <p>If\u00a0<code>display()</code>\u00a0function exists in\u00a0C, the compiler overrides\u00a0<code>display()</code>\u00a0of class\u00a0A\u00a0(because of\u00a0member function overriding).</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-multiple-inheritance","title":"C++ Multiple Inheritance","text":"<p>In C++ programming, a class can be derived from more than one parent. For example, A class\u00a0Bat\u00a0is derived from base classes\u00a0Mammal\u00a0and\u00a0WingedAnimal. It makes sense because bat is a mammal as well as a winged animal.</p> <p></p> <p>Multiple Inheritance</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-2-multiple-inheritance-in-c-programming","title":"Example 2: Multiple Inheritance in C++ Programming","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nclass Mammal {\npublic:\nMammal() {\ncout &lt;&lt; \"Mammals can give direct birth.\" &lt;&lt; endl;\n}\n};\nclass WingedAnimal {\npublic:\nWingedAnimal() {\ncout &lt;&lt; \"Winged animal can flap.\" &lt;&lt; endl;\n}\n};\nclass Bat: public Mammal, public WingedAnimal {};\nint main() {\nBat b1;\nreturn 0;\n}\n</code></pre> <p>Output</p> <pre><code>Mammals can give direct birth.\nWinged animal can flap.\n</code></pre>"},{"location":"week-6-cpp/ce103-week-6-cpp/#ambiguity-in-multiple-inheritance","title":"Ambiguity in Multiple Inheritance","text":"<p>The most obvious problem with multiple inheritance occurs during function overriding.</p> <p>Suppose, two base classes have a same function which is not overridden in derived class.</p> <p>If you try to call the function using the object of the derived class, compiler shows error. It's because compiler doesn't know which function to call. For example,</p> <pre><code>class base1 {\npublic:\nvoid someFunction( ) {....}  };\nclass base2 {\nvoid someFunction( ) {....} };\nclass derived : public base1, public base2 {};\nint main() {\nderived obj;\nobj.someFunction() // Error!  \n}\n</code></pre> <p>This problem can be solved using the scope resolution function to specify which function to class either\u00a0base1or\u00a0base2</p> <pre><code>int main() {\nobj.base1::someFunction( );  // Function of base1 class is called\nobj.base2::someFunction();   // Function of base2 class is called.\n}\n</code></pre>"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-hierarchical-inheritance","title":"C++ Hierarchical Inheritance","text":"<p>If more than one class is inherited from the base class, it's known as\u00a0hierarchical inheritance. In hierarchical inheritance, all features that are common in child classes are included in the base class.</p> <p>For example, Physics, Chemistry, Biology are derived from Science class. Similarly, Dog, Cat, Horse are derived from Animal class.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#syntax-of-hierarchical-inheritance","title":"Syntax of Hierarchical Inheritance","text":"<pre><code>class base_class {\n... .. ...\n}\nclass first_derived_class: public base_class {\n... .. ...\n}\nclass second_derived_class: public base_class {\n... .. ...\n}\nclass third_derived_class: public base_class {\n... .. ...\n}\n</code></pre>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-3-hierarchical-inheritance-in-c-programming","title":"Example 3: Hierarchical Inheritance in C++ Programming","text":"<pre><code>// C++ program to demonstrate hierarchical inheritance\n#include &lt;iostream&gt;\nusing namespace std;\n// base class\nclass Animal {\npublic:\nvoid info() {\ncout &lt;&lt; \"I am an animal.\" &lt;&lt; endl;\n}\n};\n// derived class 1\nclass Dog : public Animal {\npublic:\nvoid bark() {\ncout &lt;&lt; \"I am a Dog. Woof woof.\" &lt;&lt; endl;\n}\n};\n// derived class 2\nclass Cat : public Animal {\npublic:\nvoid meow() {\ncout &lt;&lt; \"I am a Cat. Meow.\" &lt;&lt; endl;\n}\n};\nint main() {\n// Create object of Dog class\nDog dog1;\ncout &lt;&lt; \"Dog Class:\" &lt;&lt; endl;\ndog1.info();  // Parent Class function\ndog1.bark();\n// Create object of Cat class\nCat cat1;\ncout &lt;&lt; \"\\nCat Class:\" &lt;&lt; endl;\ncat1.info();  // Parent Class function\ncat1.meow();\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>Dog Class:\nI am an animal.\nI am a Dog. Woof woof.\nCat Class:\nI am an animal.\nI am a Cat. Meow.\n</code></pre> <p>Here, both the\u00a0<code>Dog</code>\u00a0and\u00a0<code>Cat</code>\u00a0classes are derived from the\u00a0<code>Animal</code>\u00a0class. As such, both the derived classes can access the\u00a0<code>info()</code>\u00a0function belonging to the\u00a0<code>Animal</code>\u00a0class.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-friend-function-and-friend-classes","title":"C++ friend Function and friend Classes","text":"<p>In this tutorial, we will learn to create friend functions and friend classes in C++ with the help of examples.</p> <p>Data hiding is a fundamental concept of object-oriented programming. It restricts the access of private members from outside of the class.</p> <p>Similarly, protected members can only be accessed by derived classes and are inaccessible from outside. For example,</p> <pre><code>class MyClass {\nprivate:\nint member1;\n}\nint main() {\nMyClass obj;\n// Error! Cannot access private members from here.\nobj.member1 = 5;\n}\n</code></pre> <p>However, there is a feature in C++ called\u00a0friend functions\u00a0that break this rule and allow us to access member functions from outside the class.</p> <p>Similarly, there is a\u00a0friend class\u00a0as well, which we will learn later in this tutorial.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#friend-function-in-c","title":"friend Function in C++","text":"<p>A\u00a0friend function\u00a0can access the\u00a0private\u00a0and\u00a0protected\u00a0data of a class. We declare a friend function using the\u00a0<code>friend</code>\u00a0keyword inside the body of the class.</p> <pre><code>class className {\n... .. ...\nfriend returnType functionName(arguments);\n... .. ...\n}\n</code></pre>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-1-working-of-friend-function","title":"Example 1: Working of friend Function","text":"<pre><code>// C++ program to demonstrate the working of friend function\n#include &lt;iostream&gt;\nusing namespace std;\nclass Distance {\nprivate:\nint meter;\n// friend function\nfriend int addFive(Distance);\npublic:\nDistance() : meter(0) {}\n};\n// friend function definition\nint addFive(Distance d) {\n//accessing private members from the friend function\nd.meter += 5;\nreturn d.meter;\n}\nint main() {\nDistance D;\ncout &lt;&lt; \"Distance: \" &lt;&lt; addFive(D);\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>Distance: 5\n</code></pre> <p>Here,\u00a0<code>addFive()</code>\u00a0is a friend function that can access both\u00a0private\u00a0and\u00a0public\u00a0data members.</p> <p>Though this example gives us an idea about the concept of a friend\u00a0function, it doesn't show any meaningful use.</p> <p>A more meaningful use would be operating on objects of two different classes. That's when the friend function can be very helpful.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-2-add-members-of-two-different-classes","title":"Example 2: Add Members of Two Different Classes","text":"<pre><code>// Add members of two different classes using friend functions\n#include &lt;iostream&gt;\nusing namespace std;\n// forward declaration\nclass ClassB;\nclass ClassA {\npublic:\n// constructor to initialize numA to 12\nClassA() : numA(12) {}\nprivate:\nint numA;\n// friend function declaration\nfriend int add(ClassA, ClassB);\n};\nclass ClassB {\npublic:\n// constructor to initialize numB to 1\nClassB() : numB(1) {}\nprivate:\nint numB;\n// friend function declaration\nfriend int add(ClassA, ClassB);\n};\n// access members of both classes\nint add(ClassA objectA, ClassB objectB) {\nreturn (objectA.numA + objectB.numB);\n}\nint main() {\nClassA objectA;\nClassB objectB;\ncout &lt;&lt; \"Sum: \" &lt;&lt; add(objectA, objectB);\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>Sum: 13\n</code></pre> <p>In this program,\u00a0<code>ClassA</code>\u00a0and\u00a0<code>ClassB</code>\u00a0have declared\u00a0<code>add()</code>\u00a0as a friend function. Thus, this function can access\u00a0private\u00a0data of both classes.</p> <p>One thing to notice here is the friend function inside\u00a0<code>ClassA</code>\u00a0is using the\u00a0<code>ClassB</code>. However, we haven't defined\u00a0<code>ClassB</code>\u00a0at this point.</p> <pre><code>// inside classA \nfriend int add(ClassA, ClassB);\n</code></pre> <p>For this to work, we need a forward declaration of\u00a0<code>ClassB</code>\u00a0in our program.</p> <pre><code>// forward declaration\nclass ClassB;\n</code></pre>"},{"location":"week-6-cpp/ce103-week-6-cpp/#friend-class-in-c","title":"friend Class in C++","text":"<p>We can also use a friend Class in C++ using the\u00a0<code>friend</code>\u00a0keyword. For example,</p> <pre><code>class ClassB;\nclass ClassA {\n// ClassB is a friend class of ClassA\nfriend class ClassB;\n... .. ...\n}\nclass ClassB {\n... .. ...\n}\n</code></pre> <p>When a class is declared a friend class, all the member functions of the friend class become friend functions.</p> <p>Since\u00a0<code>ClassB</code>\u00a0is a friend class, we can access all members of\u00a0<code>ClassA</code>\u00a0from inside\u00a0<code>ClassB</code>.</p> <p>However, we cannot access members of\u00a0<code>ClassB</code>\u00a0from inside\u00a0<code>ClassA</code>. It is because friend relation in C++ is only granted, not taken.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-3-c-friend-class","title":"Example 3: C++ friend Class","text":"<pre><code>// C++ program to demonstrate the working of friend class\n#include &lt;iostream&gt;\nusing namespace std;\n// forward declaration\nclass ClassB;\nclass ClassA {\nprivate:\nint numA;\n// friend class declaration\nfriend class ClassB;\npublic:\n// constructor to initialize numA to 12\nClassA() : numA(12) {}\n};\nclass ClassB {\nprivate:\nint numB;\npublic:\n// constructor to initialize numB to 1\nClassB() : numB(1) {}\n// member function to add numA\n// from ClassA and numB from ClassB\nint add() {\nClassA objectA;\nreturn objectA.numA + numB;\n}\n};\nint main() {\nClassB objectB;\ncout &lt;&lt; \"Sum: \" &lt;&lt; objectB.add();\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>Sum: 13\n</code></pre> <p>Here,\u00a0<code>ClassB</code>\u00a0is a friend class of\u00a0<code>ClassA</code>. So,\u00a0<code>ClassB</code>\u00a0has access to the members of\u00a0<code>classA</code>.</p> <p>In\u00a0<code>ClassB</code>, we have created a function\u00a0<code>add()</code>\u00a0that returns the sum of\u00a0numA\u00a0and\u00a0numB.</p> <p>Since\u00a0<code>ClassB</code>\u00a0is a friend class, we can create objects of\u00a0<code>ClassA</code>\u00a0inside of\u00a0<code>ClassB</code>.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-virtual-functions","title":"C++ Virtual Functions","text":"<p>In this tutorial, we will learn about C++ virtual function and its use with the help of examples.</p> <p>A virtual function is a member function in the base class that we expect to redefine in derived classes.</p> <p>Basically, a virtual function is used in the base class in order to ensure that the function is\u00a0overridden. This especially applies to cases where a pointer of base class points to an object of a derived class.</p> <p>For example, consider the code below:</p> <pre><code>class Base {\npublic:\nvoid print() {\n// code\n}\n};\nclass Derived : public Base {\npublic:\nvoid print() {\n// code\n}\n};\n</code></pre> <p>Later, if we create a pointer of\u00a0<code>Base</code>\u00a0type to point to an object of\u00a0<code>Derived</code>\u00a0class and call the\u00a0<code>print()</code>\u00a0function, it calls the\u00a0<code>print()</code>\u00a0function of the\u00a0<code>Base</code>\u00a0class.</p> <p>In other words, the member function of\u00a0<code>Base</code>\u00a0is not overridden.</p> <pre><code>int main() {\nDerived derived1;\nBase* base1 = &amp;derived1;\n// calls function of Base class\nbase1-&gt;print();\nreturn 0;\n}\n</code></pre> <p>In order to avoid this, we declare the\u00a0<code>print()</code>\u00a0function of the\u00a0<code>Base</code>\u00a0class as virtual by using the\u00a0<code>virtual</code>\u00a0keyword.</p> <pre><code>class Base {\npublic:\nvirtual void print() {\n// code\n}\n};\n</code></pre> <p>Virtual functions are an integral part of polymorphism in C++. To learn more, check our tutorial on\u00a0C++ Polymorphism.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-1-c-virtual-function","title":"Example 1: C++ virtual Function","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nclass Base {\npublic:\nvirtual void print() {\ncout &lt;&lt; \"Base Function\" &lt;&lt; endl;\n}\n};\nclass Derived : public Base {\npublic:\nvoid print() {\ncout &lt;&lt; \"Derived Function\" &lt;&lt; endl;\n}\n};\nint main() {\nDerived derived1;\n// pointer of Base type that points to derived1\nBase* base1 = &amp;derived1;\n// calls member function of Derived class\nbase1-&gt;print();\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>Derived Function\n</code></pre> <p>Here, we have declared the\u00a0<code>print()</code>\u00a0function of\u00a0<code>Base</code>\u00a0as\u00a0<code>virtual</code>.</p> <p>So, this function is overridden even when we use a pointer of\u00a0<code>Base</code>\u00a0type that points to the\u00a0<code>Derived</code>\u00a0object\u00a0derived1.</p> <p></p> <p>Working of virtual functions in C++</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-override-identifier","title":"C++ override Identifier","text":"<p>C++ 11 has given us a new identifier\u00a0<code>override</code>\u00a0that is very useful to avoid bugs while using virtual functions.</p> <p>This identifier specifies the member functions of the derived classes that override the member function of the base class.</p> <p>For example,</p> <pre><code>class Base {\npublic:\nvirtual void print() {\n// code\n}\n};\nclass Derived : public Base {\npublic:\nvoid print() override {\n// code\n}\n};\n</code></pre> <p>If we use a function prototype in\u00a0<code>Derived</code>\u00a0class and define that function outside of the class, then we use the following code:</p> <pre><code>class Derived : public Base {\npublic:\n// function prototype\nvoid print() override;\n};\n// function definition\nvoid Derived::print() {\n// code\n}\n</code></pre>"},{"location":"week-6-cpp/ce103-week-6-cpp/#use-of-c-override","title":"Use of C++ override","text":"<p>When using virtual functions,\u00a0it is possible to make mistakes while declaring the member functions of the derived classes.</p> <p>Using the\u00a0<code>override</code>\u00a0identifier prompts the compiler to display error messages when these mistakes are made.</p> <p>Otherwise, the program will simply compile but the virtual function will not be overridden.</p> <p>Some of these possible mistakes are:</p> <ul> <li>Functions with incorrect names:\u00a0For example, if the virtual function in the base class is named\u00a0<code>print()</code>, but we accidentally name the overriding function in the derived class as\u00a0<code>pint()</code>.</li> <li>Functions with different return types:\u00a0If the virtual function is, say, of\u00a0<code>void</code>\u00a0type but the function in the derived class is of\u00a0<code>int</code>\u00a0type.</li> <li>Functions with different parameters:\u00a0If the parameters of the virtual function and the functions in the derived classes don't match.</li> <li>No virtual function is declared in the base class.</li> </ul>"},{"location":"week-6-cpp/ce103-week-6-cpp/#use-of-c-virtual-functions","title":"Use of C++ Virtual Functions","text":"<p>Suppose we have a base class\u00a0<code>Animal</code>\u00a0and derived classes\u00a0<code>Dog</code>\u00a0and\u00a0<code>Cat</code>.</p> <p>Suppose each class has a data member named\u00a0type. Suppose these variables are initialized through their respective constructors.</p> <pre><code>class Animal {\nprivate:\nstring type;\n... .. ...\npublic:\nAnimal(): type(\"Animal\") {}\n... .. ...\n};\nclass Dog : public Animal {\nprivate:\nstring type;\n... .. ...\npublic:\nAnimal(): type(\"Dog\") {}\n... .. ...\n};\nclass Cat : public Animal {\nprivate:\nstring type;\n... .. ...\npublic:\nAnimal(): type(\"Cat\") {}\n... .. ...\n};\n</code></pre> <p>Now, let us suppose that our program requires us to create two\u00a0<code>public</code>\u00a0functions for each class:</p> <ol> <li><code>getType()</code>\u00a0to return the value of\u00a0type</li> <li><code>print()</code>\u00a0to print the value of\u00a0type</li> </ol> <p>We could create both these functions in each class separately and override them, which will be long and tedious.</p> <p>Or we could make\u00a0<code>getType()</code> virtual\u00a0in the\u00a0<code>Animal</code>\u00a0class, then create a single, separate\u00a0<code>print()</code>\u00a0function that accepts a pointer of\u00a0<code>Animal</code>\u00a0type as its argument. We can then use this single function to override the virtual function.</p> <pre><code>class Animal {\n... .. ...\npublic:\n... .. ...\nvirtual string getType {...}\n};\n... .. ...\n... .. ...\nvoid print(Animal* ani) {\ncout &lt;&lt; \"Animal: \" &lt;&lt; ani-&gt;getType() &lt;&lt; endl;\n}\n</code></pre> <p>This will make the code\u00a0shorter,\u00a0cleaner, and\u00a0less repetitive.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-2-c-virtual-function-demonstration","title":"Example 2: C++ virtual Function Demonstration","text":"<pre><code>// C++ program to demonstrate the use of virtual function\n#include &lt;iostream&gt;\n#include &lt;string&gt;\nusing namespace std;\nclass Animal {\nprivate:\nstring type;\npublic:\n// constructor to initialize type\nAnimal() : type(\"Animal\") {}\n// declare virtual function\nvirtual string getType() {\nreturn type;\n}\n};\nclass Dog : public Animal {\nprivate:\nstring type;\npublic:\n// constructor to initialize type\nDog() : type(\"Dog\") {}\nstring getType() override {\nreturn type;\n}\n};\nclass Cat : public Animal {\nprivate:\nstring type;\npublic:\n// constructor to initialize type\nCat() : type(\"Cat\") {}\nstring getType() override {\nreturn type;\n}\n};\nvoid print(Animal* ani) {\ncout &lt;&lt; \"Animal: \" &lt;&lt; ani-&gt;getType() &lt;&lt; endl;\n}\nint main() {\nAnimal* animal1 = new Animal();\nAnimal* dog1 = new Dog();\nAnimal* cat1 = new Cat();\nprint(animal1);\nprint(dog1);\nprint(cat1);\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>Animal: Animal\nAnimal: Dog\nAnimal: Cat\n</code></pre> <p>Here, we have used the virtual function\u00a0<code>getType()</code>\u00a0and an\u00a0<code>Animal</code>\u00a0pointer\u00a0ani\u00a0in order to avoid repeating the\u00a0<code>print()</code>\u00a0function in every class.</p> <pre><code>void print(Animal* ani) {\ncout &lt;&lt; \"Animal: \" &lt;&lt; ani-&gt;getType() &lt;&lt; endl;\n}\n</code></pre> <p>In\u00a0<code>main()</code>, we have created 3\u00a0<code>Animal</code>\u00a0pointers to dynamically create objects of\u00a0<code>Animal</code>,\u00a0<code>Dog</code>\u00a0and\u00a0<code>Cat</code>\u00a0classes.</p> <pre><code>// dynamically create objects using Animal pointers\nAnimal* animal1 = new Animal();\nAnimal* dog1 = new Dog();\nAnimal* cat1 = new Cat();\n</code></pre> <p>We then call the\u00a0<code>print()</code>\u00a0function using these pointers:</p> <ol> <li>When\u00a0<code>print(animal1)</code>\u00a0is called, the pointer points to an\u00a0<code>Animal</code>\u00a0object. So, the virtual function in\u00a0<code>Animal</code>\u00a0class is executed inside of\u00a0<code>print()</code>.</li> <li>When\u00a0<code>print(dog1)</code>\u00a0is called, the pointer points to a\u00a0<code>Dog</code>\u00a0object. So, the virtual function is overridden and the function of\u00a0<code>Dog</code>\u00a0is executed inside of\u00a0<code>print()</code>.</li> <li>When\u00a0<code>print(cat1)</code>\u00a0is called, the pointer points to a\u00a0<code>Cat</code>\u00a0object. So, the virtual function is overridden and the function of\u00a0<code>Cat</code>\u00a0is executed inside of\u00a0<code>print()</code>.</li> </ol>"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-class-templates","title":"C++ Class Templates","text":"<p>In this tutorial, we will learn about class templates in C++ with the help of examples.</p> <p>Templates are powerful features of C++ which allows us to write generic programs. There are two ways we can implement templates:</p> <ul> <li>Function Templates</li> <li>Class Templates</li> </ul> <p>Similar to function templates, we can use class templates to create a single class to work with different data types.</p> <p>Class templates come in handy as they can make our code shorter and more manageable.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#class-template-declaration","title":"Class Template Declaration","text":"<p>A class template starts with the keyword\u00a0<code>template</code>\u00a0followed by template parameter(s) inside\u00a0<code>&lt;&gt;</code>\u00a0which is followed by the class declaration.</p> <pre><code>template &lt;class T&gt;\nclass className {\nprivate:\nT var;\n... .. ...\npublic:\nT functionName(T arg);\n... .. ...\n};\n</code></pre> <p>In the above declaration,\u00a0<code>T</code>\u00a0is the template argument which is a placeholder for the data type used, and\u00a0<code>class</code>\u00a0is a keyword.</p> <p>Inside the class body, a member variable\u00a0var\u00a0and a member function\u00a0<code>functionName()</code>\u00a0are both of type\u00a0<code>T</code>.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#creating-a-class-template-object","title":"Creating a Class Template Object","text":"<p>Once we've declared and defined a class template, we can create its objects in other classes or functions (such as the\u00a0<code>main()</code>\u00a0function) with the following syntax</p> <pre><code>className&lt;dataType&gt; classObject;\n</code></pre> <p>For example,</p> <pre><code>className&lt;int&gt; classObject;\nclassName&lt;float&gt; classObject;\nclassName&lt;string&gt; classObject;\n</code></pre>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-1-c-class-templates","title":"Example 1: C++ Class Templates","text":"<pre><code>// C++ program to demonstrate the use of class templates\n#include &lt;iostream&gt;\nusing namespace std;\n// Class template\ntemplate &lt;class T&gt;\nclass Number {\nprivate:\n// Variable of type T\nT num;\npublic:\nNumber(T n) : num(n) {}   // constructor\nT getNum() {\nreturn num;\n}\n};\nint main() {\n// create object with int type\nNumber&lt;int&gt; numberInt(7);\n// create object with double type\nNumber&lt;double&gt; numberDouble(7.7);\ncout &lt;&lt; \"int Number = \" &lt;&lt; numberInt.getNum() &lt;&lt; endl;\ncout &lt;&lt; \"double Number = \" &lt;&lt; numberDouble.getNum() &lt;&lt; endl;\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>int Number = 7\ndouble Number = 7.7\n</code></pre> <p>In this program. we have created a class template\u00a0<code>Number</code>\u00a0with the code</p> <pre><code>template &lt;class T&gt;\nclass Number {\nprivate:\nT num;\npublic:\nNumber(T n) : num(n) {}\nT getNum() { return num; }\n};\n</code></pre> <p>Notice that the variable\u00a0num, the constructor argument\u00a0n, and the function\u00a0<code>getNum()</code>\u00a0are of type\u00a0<code>T</code>, or have a return type\u00a0<code>T</code>. That means that they can be of any type.</p> <p>In\u00a0<code>main()</code>, we have implemented the class template by creating its objects</p> <pre><code>Number&lt;int&gt; numberInt(7);\nNumber&lt;double&gt; numberDouble(7.7);\n</code></pre> <p>Notice the codes\u00a0<code>Number&lt;int&gt;</code>\u00a0and\u00a0<code>Number&lt;double&gt;</code>\u00a0in the code above.</p> <p>This creates a class definition each for\u00a0<code>int</code>\u00a0and\u00a0<code>float</code>, which are then used accordingly.</p> <p>It is compulsory to specify the type when declaring objects of class templates. Otherwise, the compiler will produce an error.</p> <pre><code>//Error\nNumber numberInt(7);\nNumber numberDouble(7.7);\n</code></pre>"},{"location":"week-6-cpp/ce103-week-6-cpp/#defining-a-class-member-outside-the-class-template","title":"Defining a Class Member Outside the Class Template","text":"<p>Suppose we need to define a function outside of the class template. We can do this with the following code:</p> <pre><code>template &lt;class T&gt;\nclass ClassName {\n... .. ...\n// Function prototype\nreturnType functionName();\n};\n// Function definition\ntemplate &lt;class T&gt;\nreturnType ClassName&lt;T&gt;::functionName() {\n// code\n}\n</code></pre> <p>Notice that the code\u00a0<code>template &lt;class T&gt;</code>\u00a0is repeated while defining the function outside of the class. This is necessary and is part of the syntax.</p> <p>If we look at the code in\u00a0Example 1, we have a function\u00a0<code>getNum()</code>\u00a0that is defined inside the class template\u00a0<code>Number</code>.</p> <p>We can define\u00a0<code>getNum()</code>\u00a0outside of\u00a0<code>Number</code>\u00a0with the following code:</p> <pre><code>template &lt;class T&gt;\nclass Number {\n... .. ...\n// Function prototype\nT getnum();\n};\n// Function definition\ntemplate &lt;class T&gt;\nT Number&lt;T&gt;::getNum() {\nreturn num;\n}\n</code></pre>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-2-simple-calculator-using-class-templates","title":"Example 2: Simple Calculator Using Class Templates","text":"<p>This program uses a class template to perform addition, subtraction, multiplication and division of two variables\u00a0num1\u00a0and\u00a0num2.</p> <p>The variables can be of any type, though we have only used\u00a0<code>int</code>\u00a0and\u00a0<code>float</code>\u00a0types in this example.</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\ntemplate &lt;class T&gt;\nclass Calculator {\nprivate:\nT num1, num2;\npublic:\nCalculator(T n1, T n2) {\nnum1 = n1;\nnum2 = n2;\n}\nvoid displayResult() {\ncout &lt;&lt; \"Numbers: \" &lt;&lt; num1 &lt;&lt; \" and \" &lt;&lt; num2 &lt;&lt; \".\" &lt;&lt; endl;\ncout &lt;&lt; num1 &lt;&lt; \" + \" &lt;&lt; num2 &lt;&lt; \" = \" &lt;&lt; add() &lt;&lt; endl;\ncout &lt;&lt; num1 &lt;&lt; \" - \" &lt;&lt; num2 &lt;&lt; \" = \" &lt;&lt; subtract() &lt;&lt; endl;\ncout &lt;&lt; num1 &lt;&lt; \" * \" &lt;&lt; num2 &lt;&lt; \" = \" &lt;&lt; multiply() &lt;&lt; endl;\ncout &lt;&lt; num1 &lt;&lt; \" / \" &lt;&lt; num2 &lt;&lt; \" = \" &lt;&lt; divide() &lt;&lt; endl;\n}\nT add() { return num1 + num2; }\nT subtract() { return num1 - num2; }\nT multiply() { return num1 * num2; }\nT divide() { return num1 / num2; }\n};\nint main() {\nCalculator&lt;int&gt; intCalc(2, 1);\nCalculator&lt;float&gt; floatCalc(2.4, 1.2);\ncout &lt;&lt; \"Int results:\" &lt;&lt; endl;\nintCalc.displayResult();\ncout &lt;&lt; endl\n&lt;&lt; \"Float results:\" &lt;&lt; endl;\nfloatCalc.displayResult();\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>Int results:\nNumbers: 2 and 1.\n2 + 1 = 3\n2 - 1 = 1\n2 * 1 = 2\n2 / 1 = 2\nFloat results:\nNumbers: 2.4 and 1.2.\n2.4 + 1.2 = 3.6\n2.4 - 1.2 = 1.2\n2.4 * 1.2 = 2.88\n2.4 / 1.2 = 2\n</code></pre> <p>In the above program, we have declared a class template\u00a0<code>Calculator</code>.</p> <p>The class contains two private members of type\u00a0<code>T</code>:\u00a0num1\u00a0&amp;\u00a0num2, and a constructor to initialize the members.</p> <p>We also have\u00a0<code>add()</code>,\u00a0<code>subtract()</code>,\u00a0<code>multiply()</code>, and\u00a0<code>divide()</code>\u00a0functions that have the return type\u00a0<code>T</code>. We also have a\u00a0<code>void</code>\u00a0function\u00a0<code>displayResult()</code>\u00a0that prints out the results of the other functions.</p> <p>In\u00a0<code>main()</code>, we have created two objects of\u00a0<code>Calculator</code>: one for\u00a0<code>int</code>\u00a0data type and another for\u00a0<code>float</code>\u00a0data type.</p> <pre><code>Calculator&lt;int&gt; intCalc(2, 1);\nCalculator&lt;float&gt; floatCalc(2.4, 1.2);\n</code></pre> <p>This prompts the compiler to create two class definitions for the respective data types during compilation.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#c-class-templates-with-multiple-parameters","title":"C++ Class Templates With Multiple Parameters","text":"<p>In C++, we can use multiple template parameters and even use default arguments for those parameters. For example,</p> <pre><code>template &lt;class T, class U, class V = int&gt;\nclass ClassName {\nprivate:\nT member1;\nU member2;\nV member3;\n... .. ...\npublic:\n... .. ...\n};\n</code></pre>"},{"location":"week-6-cpp/ce103-week-6-cpp/#example-3-c-templates-with-multiple-parameters","title":"Example 3: C++ Templates With Multiple Parameters","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n// Class template with multiple and default parameters\ntemplate &lt;class T, class U, class V = char&gt;\nclass ClassTemplate {\nprivate:\nT var1;\nU var2;\nV var3;\npublic:\nClassTemplate(T v1, U v2, V v3) : var1(v1), var2(v2), var3(v3) {}  // constructor\nvoid printVar() {\ncout &lt;&lt; \"var1 = \" &lt;&lt; var1 &lt;&lt; endl;\ncout &lt;&lt; \"var2 = \" &lt;&lt; var2 &lt;&lt; endl;\ncout &lt;&lt; \"var3 = \" &lt;&lt; var3 &lt;&lt; endl;\n}\n};\nint main() {\n// create object with int, double and char types\nClassTemplate&lt;int, double&gt; obj1(7, 7.7, 'c');\ncout &lt;&lt; \"obj1 values: \" &lt;&lt; endl;\nobj1.printVar();\n// create object with int, double and bool types\nClassTemplate&lt;double, char, bool&gt; obj2(8.8, 'a', false);\ncout &lt;&lt; \"\\nobj2 values: \" &lt;&lt; endl;\nobj2.printVar();\nreturn 0;\n}\n</code></pre> <p>Run Code</p> <p>Output</p> <pre><code>obj1 values: var1 = 7\nvar2 = 7.7\nvar3 = c\nobj2 values: var1 = 8.8\nvar2 = a\nvar3 = 0\n</code></pre> <p>In this program, we have created a class template, named\u00a0<code>ClassTemplate</code>, with three parameters, with one of them being a default parameter.</p> <pre><code>template &lt;class T, class U, class V = char&gt;\nclass ClassTemplate {\n// code  \n};\n</code></pre> <p>Notice the code\u00a0<code>class V = char</code>. This means that\u00a0<code>V</code>\u00a0is a default parameter whose default type is\u00a0<code>char</code>.</p> <p>Inside\u00a0<code>ClassTemplate</code>, we declare 3 variables\u00a0var1,\u00a0var2\u00a0and\u00a0var3, each corresponding to one of the template parameters.</p> <pre><code>class ClassTemplate {\nprivate:\nT var1;\nU var2;\nV var3;\n... .. ...\n... .. ...\n};\n</code></pre> <p>In\u00a0<code>main()</code>, we create two objects of\u00a0<code>ClassTemplate</code>\u00a0with the code</p> <pre><code>// create object with int, double and char types\nClassTemplate&lt;int, double&gt; obj1(7, 7.7, 'c');\n// create object with double, char and bool types\nClassTemplate&lt;double, char, bool&gt; obj2(8, 8.8, false);\n</code></pre> <p>Here,</p> Object T U V obj1 <code>int</code> <code>double</code> <code>char</code> obj2 <code>double</code> <code>char</code> <code>bool</code> <p>For\u00a0obj1,\u00a0<code>T = int</code>,\u00a0<code>U = double</code>\u00a0and\u00a0<code>V = char</code>.</p> <p>For\u00a0obj2,\u00a0<code>T = double</code>,\u00a0<code>U = char</code>\u00a0and\u00a0<code>V = bool</code>.</p>"},{"location":"week-6-cpp/ce103-week-6-cpp/#references","title":"References","text":"<ul> <li> <p>Learn C++ Programming</p> </li> <li> <p>Introduction to C++ | C Plus Plus Programming Language Tutorials</p> </li> <li> <p>The C and C++ programming tutorials, hands-on approach with program examples, code samples and tons of output images using Visual C++, C++ Builder, Linux gcc and g++ compilers and IDE</p> </li> </ul>"},{"location":"week-7-csharp/ce103-week-7-csharp/","title":"CE103 Algorithms and Programming I","text":""},{"location":"week-7-csharp/ce103-week-7-csharp/#ce103-algorithms-and-programming-i","title":"CE103 Algorithms and Programming I","text":""},{"location":"week-7-csharp/ce103-week-7-csharp/#week-7","title":"Week-7","text":""},{"location":"week-7-csharp/ce103-week-7-csharp/#c-functional-console-programming","title":"C# Functional Console Programming","text":"<p>Download DOC, SLIDE, PPTX</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-functional-console-programming_1","title":"C# Functional Console Programming","text":""},{"location":"week-7-csharp/ce103-week-7-csharp/#c-introduction","title":"C# Introduction","text":""},{"location":"week-7-csharp/ce103-week-7-csharp/#c-hello-world-your-first-c-program","title":"C# Hello World - Your First C# Program","text":"<p>In this tutorial, we will learn how to write a simple \"Hello World!\" program in C#. This will get you familiar with the basic syntax and requirements of a C# program.</p> <p>The \u201cHello World!\u201d program is often the first program we see when we dive into a new language. It simply prints\u00a0Hello World!\u00a0on the output screen.</p> <p>The purpose of this program is to get us familiar with the basic syntax and requirements of a programming language.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#hello-world-in-c","title":"\"Hello World!\" in C","text":"<pre><code>// Hello World! program\nnamespace HelloWorld\n{\nclass Hello {         static void Main(string[] args)\n{\nSystem.Console.WriteLine(\"Hello World!\");\n}\n}\n}\n</code></pre> <p>When you run the program, the output will be:</p> <pre><code>Hello World!\n</code></pre>"},{"location":"week-7-csharp/ce103-week-7-csharp/#how-the-hello-world-program-in-c-works","title":"How the \"Hello World!\" program in C# works?","text":"<p>Let's break down the program line by line.</p> <ol> <li><code>// Hello World! Program</code> </li> </ol> <p><code>//</code>\u00a0indicates the beginning of a comment in C#. Comments are not executed by the C# compiler.  </p> <p>They are intended for the developers to better understand a piece of code. To learn more about comments in C#, visit\u00a0C# comments. </p> <ol> <li><code>namespace HelloWorld{...}</code> </li> </ol> <p>The namespace keyword is used to define our own namespace. Here we are creating a namespace called\u00a0<code>HelloWorld</code>.  </p> <p>Just think of namespace as a container which consists of classes, methods and other namespaces. To get a detailed overview of namespaces,\u00a0visit C# Namespaces. </p> <ol> <li><code>class Hello{...}</code> </li> </ol> <p>The above statement creates a class named -\u00a0<code>Hello</code>in C#. Since, C# is an object-oriented programming language, creating a class is mandatory for the program\u2019s execution. </p> <ol> <li><code>static void Main(string[] args){...}</code> </li> </ol> <p><code>Main()</code>\u00a0is a method of class Hello. The execution of every C# program starts from the\u00a0<code>Main()</code>\u00a0method. So it is mandatory for a C# program to have a\u00a0<code>Main()</code>\u00a0method.  </p> <p>The signature/syntax of the\u00a0<code>Main()</code>\u00a0method is:</p> <pre><code>static void Main(string[] args)\n{\n...\n}\n</code></pre> <p>We\u2019ll learn more about methods in the later chapters. </p> <ol> <li><code>System.Console.WriteLine(\"Hello World!\");</code> </li> </ol> <p>For now, just remember that this is the piece of code that prints\u00a0Hello World!\u00a0to the output screen.You\u2019ll learn more about how it works in the later chapters.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#alternative-hello-world-implementation","title":"Alternative Hello World! implementation","text":"<p>Here\u2019s an alternative way to write the \u201cHello World!\u201d program.</p> <pre><code>// Hello World! program\nusing System;\nnamespace HelloWorld\n{\nclass Hello {         static void Main(string[] args)\n{\nConsole.WriteLine(\"Hello World!\");\n}\n}\n}\n</code></pre> <p>Notice in this case, we\u2019ve written\u00a0<code>using System;</code>\u00a0at the start of the program. By using this, we can now replace</p> <pre><code>System.Console.WriteLine(\"Hello World!\");\n</code></pre> <p>with</p> <pre><code>Console.WriteLine(\"Hello World!\");\n</code></pre> <p>This is a convenience we\u2019ll be using in our later chapters as well.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#things-to-remember-from-this-article","title":"Things to remember from this article","text":"<ul> <li>Every C# program must have a class definition.</li> <li>The execution of program begins from the\u00a0<code>Main()</code>\u00a0method.</li> <li><code>Main()</code>\u00a0method must be inside a class definition.</li> </ul> <p>This is just a simple program for introducing C# to a newbie. If you did not understand certain things in this article, that's okay (even I did not when I started). As we move on with this tutorial series, everything will start to make sense.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-keywords-and-identifiers","title":"C# Keywords and Identifiers","text":"<p>In this tutorial, we will learn about keywords (reserved words) and identifiers in C# programming language.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-keywords","title":"C# Keywords","text":"<p>Keywords are predefined sets of reserved words that have special meaning in a program. The meaning of keywords can not be changed, neither can they be directly used as identifiers in a program.</p> <p>For example,</p> <pre><code>long mobileNum;\n</code></pre> <p>Here,\u00a0<code>long</code>\u00a0is a keyword and\u00a0mobileNum\u00a0is a variable (identifier).\u00a0<code>long</code>\u00a0has a special meaning in C# i.e. it is used to declare variables of type\u00a0<code>long</code>\u00a0and this function cannot be changed.</p> <p>Also, keywords like\u00a0<code>long</code>,\u00a0<code>int</code>,\u00a0<code>char</code>, etc can not be used as identifiers. So, we cannot have something like:</p> <pre><code>long long;\n</code></pre> <p>C# has a total of 79 keywords. All these keywords are in lowercase. Here is a complete list of all C# keywords.</p> abstract as base bool break byte case catch char checked class const continue decimal default delegate do double else enum event explicit extern false finally fixed float for foreach goto if implicit in in (generic modifier) int interface internal is lock long namespace new null object operator out out (generic modifier) override params private protected public readonly ref return sbyte sealed short sizeof stackalloc static string struct switch this throw true try typeof uint ulong unchecked unsafe ushort using using static void volatile while <p>Although keywords are reserved words, they can be used as identifiers if\u00a0<code>@</code>\u00a0is added as prefix. For example,</p> <pre><code>int @void;\n</code></pre> <p>The above statement will create a variable\u00a0@void\u00a0of type\u00a0<code>int</code>.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#contextual-keywords","title":"Contextual Keywords","text":"<p>Besides regular keywords, C# has 25 contextual keywords. Contextual keywords have specific meaning in a limited program context and can be used as identifiers outside that context. They are not reserved words in C#.</p> add alias ascending async await descending dynamic from get global group into join let orderby partial (type) partial (method) remove select set value var when (filter condition) where (generic type constraint) yield <p>If you are interested to know the function of every keywords, I suggest you visit\u00a0C# keywords\u00a0(official C# docs).</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-identifiers","title":"C# Identifiers","text":"<p>Identifiers are the name given to entities such as variables, methods, classes, etc. They are tokens in a program which uniquely identify an element. For example,</p> <p>int value;</p> <p>Here,\u00a0<code>value</code>\u00a0is the name of variable. Hence it is an identifier. Reserved keywords can not be used as identifiers unless\u00a0<code>@</code>\u00a0is added as prefix. For example,</p> <p>int break;</p> <p>This statement will generate an error in compile time.</p> <p>To learn more about variables, visit\u00a0C# Variables.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#rules-for-naming-an-identifier","title":"Rules for Naming an Identifier","text":"<ul> <li>An identifier can not be a C# keyword.</li> <li>An identifier must begin with a letter, an underscore or\u00a0<code>@</code>\u00a0symbol. The remaining part of identifier can contain letters, digits and underscore symbol.</li> <li>Whitespaces are not allowed. Neither it can have symbols other than letter, digits and underscore.</li> <li>Identifiers are case-sensitive. So,\u00a0getName,\u00a0GetName\u00a0and\u00a0getname\u00a0represents 3 different identifiers.</li> </ul> <p>Here are some of the valid and invalid identifiers:</p> Identifiers Remarks number Valid calculateMarks Valid hello$ Invalid (Contains $) name1 Valid @if Valid (Keyword with prefix @) if Invalid (C# Keyword) My name Invalid (Contains whitespace) _hello_hi Valid"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-find-list-of-keywords-and-identifiers-in-a-program","title":"Example: Find list of keywords and identifiers in a program","text":"<p>Just to clear the concept, let's find the list of keywords and identifiers in the program we wrote in\u00a0C# Hello World.</p> <pre><code>using System;\nnamespace HelloWorld\n{\nclass Hello\n{         static void Main(string[] args)\n{\nConsole.WriteLine(\"Hello World!\");\n}\n}\n} </code></pre> Keywords Identifiers using System namespace HelloWorld (namespace) class Hello (class) static Main (method) void args string Console WriteLine <p>The\u00a0\"Hello World!\"\u00a0inside\u00a0<code>WriteLine</code>\u00a0method is a string literal.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-variables-and-primitive-data-types","title":"C# Variables and (Primitive) Data Types","text":"<p>In this tutorial, we will learn about variables, how to create variables in C# and different data types that C# programming language supports.</p> <p>A variable is a symbolic name given to a memory location. Variables are used to store data in a computer program.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#how-to-declare-variables-in-c","title":"How to declare variables in C#?","text":"<p>Here's an example to declare a variable in C#.</p> <pre><code>int age;\n</code></pre> <p>In this example, a variable\u00a0age\u00a0of type\u00a0<code>int</code>\u00a0(integer) is declared and it can only store integer values.</p> <p>We can assign a value to the variable later in our program like such:</p> <pre><code>int age;\n... ... ...\nage = 24;\n</code></pre> <p>However, the variable can also be initialized to some value during declaration. For example,</p> <pre><code>int age = 24;\n</code></pre> <p>Here, a variable\u00a0age\u00a0of type\u00a0<code>int</code>\u00a0is declared and initialized to\u00a0<code>24</code>\u00a0at the same time.</p> <p>Since, it\u2019s a variable, we can change the value of variables as well. For example,</p> <pre><code>int age = 24;\nage = 35;\n</code></pre> <p>Here, the value of\u00a0age\u00a0is changed to 35 from 24.</p> <p>Variables in C# must be declared before they can be used. This means, the name and type of variable must be known before they can be assigned a value. This is why C# is called a\u00a0statically-typed language.</p> <p>Once declared, the datatype of a variable can not be changed within a scope. A scope can be thought as a block of code where the variable is visible or available to use. If you don\u2019t understand the previous statement, don\u2019t worry we\u2019ll learn about scopes in the later chapters.</p> <p>For now remember,we can not do the following in C#:</p> <pre><code>int age;\nage = 24;\n... ... ...\nfloat age;\n</code></pre>"},{"location":"week-7-csharp/ce103-week-7-csharp/#implicitly-typed-variables","title":"Implicitly typed variables","text":"<p>Alternatively in C#, we can declare a variable without knowing its type using\u00a0<code>var</code>\u00a0keyword. Such variables are called\u00a0implicitly typed local variables.</p> <p>Variables declared using\u00a0<code>var</code>\u00a0keyword must be initialized at the time of declaration.</p> <p>var value = 5;</p> <p>The compiler determines the type of variable from the value that is assigned to the variable. In the above example,\u00a0value\u00a0is of type\u00a0<code>int</code>. This is equivalent to:</p> <p>int value; value = 5;</p> <p>You can learn more about\u00a0implicitly typed local variables.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#rules-for-naming-variables-in-c","title":"Rules for Naming Variables in C","text":"<p>There are certain rules we need to follow while naming a variable. The rules for naming a variable in C# are:</p> <ol> <li>The variable name can contain letters (uppercase and lowercase), underscore( _ ) and digits only.</li> </ol> <ol> <li>The variable name must start with either letter, underscore or @ symbol. For example,</li> </ol> <p>Rules for naming variables in C#   </p> Variable Names Remarks name Valid subject101 Valid _age Valid (Best practice for naming private member variables) @break Valid (Used if name is a reserved keyword) 101subject Invalid (Starts with digit) your_name Valid your name Invalid (Contains whitespace) <ol> <li>C# is case sensitive. It means\u00a0<code>age</code>\u00a0and\u00a0<code>Age</code>\u00a0refers to 2 different variables.</li> </ol> <ol> <li>A variable name must not be a C# keyword. For example,\u00a0<code>if</code>,\u00a0<code>for</code>,\u00a0<code>using</code>\u00a0can not be a variable name. We will be discussing more about\u00a0C# keywords\u00a0in the next tutorial.</li> </ol>"},{"location":"week-7-csharp/ce103-week-7-csharp/#best-practices-for-naming-a-variable","title":"Best Practices for Naming a Variable","text":"<ol> <li>Choose a variable name that make sense. For example,\u00a0name,\u00a0age,\u00a0subject\u00a0makes more sense than\u00a0n,\u00a0a\u00a0and\u00a0s.</li> <li>Use\u00a0camelCase\u00a0notation (starts with lowercase letter) for naming local variables. For example,\u00a0numberOfStudents,\u00a0age, etc.</li> <li>Use\u00a0PascalCase\u00a0or\u00a0CamelCase\u00a0(starts with uppercase letter) for naming public member variables. For example,\u00a0FirstName,\u00a0Price, etc.</li> <li>Use a leading underscore (_) followed by\u00a0camelCase\u00a0notation for naming private member variables. For example,\u00a0_bankBalance,\u00a0_emailAddress, etc.</li> </ol> <p>You can learn more about\u00a0naming conventions in C# here.</p> <p>Don't worry about public and private member variables. We will learn about them in later chapters.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-primitive-data-types","title":"C# Primitive Data Types","text":"<p>Variables in C# are broadly classified into two types:\u00a0Value types\u00a0and\u00a0Reference types. In this tutorial we will be discussing about primitive (simple) data types which is a subclass of Value types.</p> <p>Reference types will be covered in later tutorials. However, if you want to know more about variable types, visit\u00a0C# Types and variables\u00a0(official C# docs).</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#boolean-bool","title":"Boolean (bool)","text":"<ul> <li>Boolean data type has two possible values:\u00a0<code>true</code>\u00a0or\u00a0<code>false</code></li> <li>Default value:\u00a0<code>false</code></li> <li>Boolean variables are generally used to check conditions such as in\u00a0if statements,\u00a0loops, etc.</li> </ul> <p>For Example:</p> <pre><code>using System;\nnamespace DataType\n{\nclass BooleanExample\n{\npublic static void Main(string[] args)\n{\nbool isValid = true;\nConsole.WriteLine(isValid);\n}\n}\n}\n</code></pre> <p>When we run the program, the output will be:</p> <pre><code>True\n</code></pre>"},{"location":"week-7-csharp/ce103-week-7-csharp/#signed-integral","title":"Signed Integral","text":"<p>These data types hold integer values (both positive and negative). Out of the total available bits, one bit is used for sign.</p> <p>1. sbyte</p> <ul> <li>Size: 8 bits</li> <li>Range: -128 to 127.</li> <li>Default value: 0</li> </ul> <p>For example:</p> <pre><code>using System;\nnamespace DataType\n{\nclass SByteExample\n{\npublic static void Main(string[] args)\n{\nsbyte level = 23;\nConsole.WriteLine(level);\n}\n}\n}\n</code></pre> <p>When we run the program, the output will be:</p> <pre><code>23\n</code></pre> <p>Try assigning values out of range i.e. less than -128 or greater than 127 and see what happens.</p> <p>2. short</p> <ul> <li>Size: 16 bits</li> <li>Range: -32,768 to 32,767</li> <li>Default value: 0</li> </ul> <p>For example:</p> <pre><code>using System;\nnamespace DataType\n{\nclass ShortExample\n{\npublic static void Main(string[] args)\n{\nshort value = -1109;\nConsole.WriteLine(value);\n}\n}\n}\n</code></pre> <p>When we run the program, the output will be:</p> <pre><code>-1109\n</code></pre> <p>3. int</p> <ul> <li>Size: 32 bits</li> <li>Range: -231 to 231-1</li> <li>Default value: 0</li> </ul> <p>For example:</p> <pre><code>using System;\nnamespace DataType\n{\nclass IntExample\n{\npublic static void Main(string[] args)\n{\nint score = 51092;\nConsole.WriteLine(score);\n}\n}\n}\n</code></pre> <p>When we run the program, the output will be:</p> <pre><code>51092\n</code></pre> <p>4. long</p> <ul> <li>Size: 64 bits</li> <li>Range: -263 to 263-1</li> <li>Default value:\u00a0<code>0L</code>\u00a0[L at the end represent the value is of long type]</li> </ul> <p>For example:</p> <pre><code>using System;\nnamespace DataType\n{\nclass LongExample\n{\npublic static void Main(string[] args)\n{\nlong range = -7091821871L;\nConsole.WriteLine(range);\n}\n}\n}\n</code></pre> <p>When we run the program, the output will be:</p> <pre><code>-7091821871\n</code></pre>"},{"location":"week-7-csharp/ce103-week-7-csharp/#unsigned-integral","title":"Unsigned Integral","text":"<p>These data types only hold values equal to or greater than 0. We generally use these data types to store values when we are sure, we won't have negative values.</p> <p>1. byte</p> <ul> <li>Size: 8 bits</li> <li>Range: 0 to 255.</li> <li>Default value: 0</li> </ul> <p>For example:</p> <pre><code>using System;\nnamespace DataType\n{\nclass ByteExample\n{\npublic static void Main(string[] args)\n{\nbyte age = 62;\nConsole.WriteLine(level);\n}\n}\n}\n</code></pre> <p>When we run the program, the output will be:</p> <pre><code>62\n</code></pre> <p>2. ushort</p> <ul> <li>Size: 16 bits</li> <li>Range: 0 to 65,535</li> <li>Default value: 0</li> </ul> <p>For example:</p> <pre><code>using System;\nnamespace DataType\n{\nclass UShortExample\n{\npublic static void Main(string[] args)\n{\nushort value = 42019;\nConsole.WriteLine(value);\n}\n}\n}\n</code></pre> <p>When we run the program, the output will be:</p> <pre><code>42019\n</code></pre> <p>3. uint</p> <ul> <li>Size: 32 bits</li> <li>Range: 0 to 232-1</li> <li>Default value: 0</li> </ul> <p>For example:</p> <pre><code>using System;\nnamespace DataType\n{\nclass UIntExample\n{\npublic static void Main(string[] args)\n{\nuint totalScore = 1151092;\nConsole.WriteLine(totalScore);\n}\n}\n}\n</code></pre> <p>When we run the program, the output will be:</p> <pre><code>1151092\n</code></pre> <p>4. ulong</p> <ul> <li>Size: 64 bits</li> <li>Range: 0 to 264-1</li> <li>Default value: 0</li> </ul> <p>For example:</p> <pre><code>using System;\nnamespace DataType\n{\nclass ULongExample\n{\npublic static void Main(string[] args)\n{\nulong range = 17091821871L;\nConsole.WriteLine(range);\n}\n}\n}\n</code></pre> <p>When we run the program, the output will be:</p> <pre><code>17091821871\n</code></pre>"},{"location":"week-7-csharp/ce103-week-7-csharp/#floating-point","title":"Floating Point","text":"<p>These data types hold floating point values i.e. numbers containing decimal values. For example, 12.36, -92.17, etc.</p> <p>1. float</p> <ul> <li>Single-precision floating point type</li> <li>Size: 32 bits</li> <li>Range: 1.5 \u00d7 10\u221245 to 3.4 \u00d7 1038</li> <li>Default value: 0.0F [F at the end represent the value is of float type]</li> </ul> <p>For example:</p> <pre><code>using System;\nnamespace DataType\n{\nclass FloatExample\n{\npublic static void Main(string[] args)\n{\nfloat number = 43.27F;\nConsole.WriteLine(number);\n}\n}\n}\n</code></pre> <p>When we run the program, the output will be:</p> <pre><code>43.27\n</code></pre> <p>2. double</p> <ul> <li>Double-precision floating point type.\u00a0What is the difference between single and double precision floating point?</li> <li>Size: 64 bits</li> <li>Range: 5.0 \u00d7 10\u2212324 to 1.7 \u00d7 10308</li> <li>Default value: 0.0D [D at the end represent the value is of double type]</li> </ul> <p>For example:</p> <pre><code>using System;\nnamespace DataType\n{\nclass DoubleExample\n{\npublic static void Main(string[] args)\n{\ndouble value = -11092.53D;\nConsole.WriteLine(value);\n}\n}\n}\n</code></pre> <p>When we run the program, the output will be:</p> <pre><code>-11092.53\n</code></pre>"},{"location":"week-7-csharp/ce103-week-7-csharp/#character-char","title":"Character (char)","text":"<ul> <li>It represents a 16 bit unicode character.</li> <li>Size: 16 bits</li> <li>Default value: '\\0'</li> <li>Range: U+0000 ('\\u0000') to U+FFFF ('\\uffff')</li> </ul> <p>For example:</p> <pre><code>using System;\nnamespace DataType\n{\nclass CharExample\n{\npublic static void Main(string[] args)\n{\nchar ch1 ='\\u0042';\nchar ch2 = 'x';\nConsole.WriteLine(ch1);\nConsole.WriteLine(ch2);\n}\n}\n}\n</code></pre> <p>When we run the program, the output will be:</p> <pre><code>B\nx\n</code></pre> <p>The unicode value of\u00a0<code>'B'</code>\u00a0is\u00a0<code>'\\u0042'</code>, hence printing\u00a0ch1\u00a0will print\u00a0<code>'B'</code>.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#decimal","title":"Decimal","text":"<ul> <li>Decimal type has more precision and a smaller range as compared to floating point types (double and float). So it is appropriate for monetary calculations.</li> <li>Size: 128 bits</li> <li>Default value: 0.0M [M at the end represent the value is of decimal type]</li> <li>Range: (-7.9 x 1028 to 7.9 x 1028) / (100 to 28)</li> </ul> <p>For example:</p> <pre><code>using System;\nnamespace DataType\n{\nclass DecimalExample\n{\npublic static void Main(string[] args)\n{\ndecimal bankBalance = 53005.25M;\nConsole.WriteLine(bankBalance);\n}\n}\n}\n</code></pre> <p>When we run the program, the output will be:</p> <pre><code>53005.25\n</code></pre> <p>The suffix\u00a0<code>M</code>\u00a0or\u00a0<code>m</code>\u00a0must be added at the end otherwise the value will be treated as a double and an error will be generated.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-literals","title":"C# Literals","text":"<p>Let's look at the following statement:</p> <pre><code>int number = 41;\n</code></pre> <p>Here,</p> <ul> <li><code>int</code>\u00a0is a data type</li> <li>number\u00a0is a variable and</li> <li><code>41</code>\u00a0is a literal</li> </ul> <p>Literals are fixed values that appear in the program. They do not require any computation. For example,\u00a0<code>5</code>,\u00a0<code>false</code>,\u00a0<code>'w'</code>\u00a0are literals that appear in a program directly without any computation.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#boolean-literals","title":"Boolean Literals","text":"<ul> <li>true and false are the available boolean literals.</li> <li>They are used to initialize boolean variables.</li> </ul> <p>For example:</p> <pre><code>bool isValid = true;\nbool isPresent = false;\n</code></pre>"},{"location":"week-7-csharp/ce103-week-7-csharp/#integer-literals","title":"Integer Literals","text":"<ul> <li> <p>Integer literals are used to initialize variables of integer data types i.e.\u00a0<code>sbyte</code>,\u00a0<code>short</code>,\u00a0<code>int</code>,\u00a0<code>long</code>,\u00a0<code>byte</code>,\u00a0<code>ushort</code>,\u00a0<code>uint</code>\u00a0and\u00a0<code>ulong</code>.</p> </li> <li> <p>If an integer literal ends with\u00a0<code>L</code>\u00a0or\u00a0<code>l</code>, it is of type long. For best practice use\u00a0<code>L</code>\u00a0(not\u00a0<code>l</code>).</p> </li> </ul> <pre><code>  long value1 = 4200910L;\nlong value2 = -10928190L;\n</code></pre> <ul> <li>If an integer literal starts with a\u00a0<code>0x</code>, it represents hexadecimal value. Number with no prefixes are treated as decimal value. Octal and binary representation are not allowed in C#.</li> </ul>"},{"location":"week-7-csharp/ce103-week-7-csharp/#int-decimalvalue-25-int-hexvalue-0x11c-decimal-value-284","title":"<pre><code>  int decimalValue = 25;\n  int hexValue = 0x11c;// decimal value 284\n</code></pre>","text":""},{"location":"week-7-csharp/ce103-week-7-csharp/#floating-point-literals","title":"Floating Point Literals","text":"<ul> <li> <p>Floating point literals are used to initialize variables of float and double data types.</p> </li> <li> <p>If a floating point literal ends with a suffix\u00a0<code>f</code>\u00a0or\u00a0<code>F</code>, it is of type float. Similarly, if it ends with\u00a0<code>d</code>\u00a0or\u00a0<code>D</code>, it is of type double. If neither of the suffix is present, it is of type double by\u00a0default.</p> </li> <li> <p>These literals contains e or E when expressed in scientific notation.</p> </li> </ul> <pre><code>double number = 24.67;// double by default\nfloat value = -12.29F;\ndouble scientificNotation = 6.21e2;// equivalent to 6.21 x 102 i.e. 621\n</code></pre>"},{"location":"week-7-csharp/ce103-week-7-csharp/#character-and-string-literals","title":"Character and String Literals","text":"<ul> <li> <p>Character literals are used to initialize variables of char data types.</p> </li> <li> <p>Character literals are enclosed in single quotes. For example,\u00a0<code>'x'</code>,<code>'p'</code>, etc.</p> </li> <li> <p>They can be represented as character, hexadecimal escape sequence, unicode representation or integral values casted to char.</p> </li> </ul> <pre><code>char ch1 = 'R';// character\nchar ch2 = '\\x0072';// hexadecimal\nchar ch3 = '\\u0059';// unicode\nchar ch4 = (char)107;// casted from integer\n</code></pre> <ul> <li> <p>String literals are the collection of character literals.</p> </li> <li> <p>They are enclosed in double quotes. For example,\u00a0\"Hello\",\u00a0\"Easy Programming\", etc.</p> </li> </ul> <pre><code>string firstName = \"Richard\";\nstring lastName = \" Feynman\";\n</code></pre> <ul> <li>C# also supports escape sequence characters such as:   \u00a0   | Character | Meaning         |   | ---       | ---             |   | <code>\\'</code>      | Single quote    |   | <code>\\\"</code>      | Double quote    |   | <code>\\\\</code>      | Backslash       |   | <code>\\n</code>      | Newline         |   | <code>\\r</code>      | Carriage return |   | <code>\\t</code>      | Horizontal Tab  |   | <code>\\a</code>      | Alert           |   | <code>\\b</code>      | Backspace       |</li> </ul>"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-operators","title":"C# Operators","text":"<p>In this article, we will learn everything about different types of operators in C# programming language and how to use them.</p> <p>Operators are symbols that are used to perform operations on operands. Operands may be variables and/or constants.</p> <p>For example, in\u00a0<code>2+3</code>,\u00a0<code>+</code>\u00a0is an operator that is used to carry out addition operation, while\u00a0<code>2</code>\u00a0and\u00a0<code>3</code>\u00a0are operands.</p> <p>Operators are used to manipulate variables and values in a program. C# supports a number of operators that are classified based on the type of operations they perform.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#1-basic-assignment-operator","title":"1. Basic Assignment Operator","text":"<p>Basic assignment operator (=) is used to assign values to variables. For example,</p> <pre><code>double x;\nx = 50.05;\n</code></pre> <p>Here, 50.05 is assigned to x.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-1-basic-assignment-operator","title":"Example 1: Basic Assignment Operator","text":"<pre><code>using System;\nnamespace Operator\n{\nclass AssignmentOperator\n{\npublic static void Main(string[] args)\n{\nint firstNumber, secondNumber;\n// Assigning a constant to variable\nfirstNumber = 10;\nConsole.WriteLine(\"First Number = {0}\", firstNumber);\n// Assigning a variable to another variable\nsecondNumber = firstNumber;\nConsole.WriteLine(\"Second Number = {0}\", secondNumber);\n}\n}\n}\n</code></pre> <p>When we run the program, the output will be:</p> <pre><code>First Number = 10\nSecond Number = 10\n</code></pre> <p>This is a simple example that demonstrates the use of assignment operator.</p> <p>You might have noticed the use of curly brackets\u00a0<code>{ }</code>\u00a0in the example. We will discuss about them in\u00a0string formatting. For now, just keep in mind that\u00a0<code>{0}</code>\u00a0is replaced by the first variable that follows the string,\u00a0<code>{1}</code>\u00a0is replaced by the second variable and so on.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#2-arithmetic-operators","title":"2. Arithmetic Operators","text":"<p>Arithmetic operators are used to perform arithmetic operations such as addition, subtraction, multiplication, division, etc.</p> <p>For example,</p> <pre><code>int x = 5;\nint y = 10;\nint z = x + y;// z = 15\n</code></pre> <p>C# Arithmetic Operators</p> Operator Operator Name Example + Addition Operator 6 + 3 evaluates to 9 - Subtraction Operator 10 - 6 evaluates to 4 * Multiplication Operator 4 * 2 evaluates to 8 / Division Operator 10 / 5 evaluates to 2 % Modulo Operator (Remainder) 16 % 3 evaluates to 1"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-2-arithmetic-operators","title":"Example 2: Arithmetic Operators","text":"<pre><code>using System;\nnamespace Operator\n{\nclass ArithmeticOperator\n{\npublic static void Main(string[] args)\n{\ndouble firstNumber = 14.40, secondNumber = 4.60, result;\nint num1 = 26, num2 = 4, rem;\n// Addition operator\nresult = firstNumber + secondNumber;\nConsole.WriteLine(\"{0} + {1} = {2}\", firstNumber, secondNumber, result);\n// Subtraction operator\nresult = firstNumber - secondNumber;\nConsole.WriteLine(\"{0} - {1} = {2}\", firstNumber, secondNumber, result);\n// Multiplication operator\nresult = firstNumber * secondNumber;\nConsole.WriteLine(\"{0} * {1} = {2}\", firstNumber, secondNumber, result);\n// Division operator\nresult = firstNumber / secondNumber;\nConsole.WriteLine(\"{0} / {1} = {2}\", firstNumber, secondNumber, result);\n// Modulo operator\nrem = num1 % num2;\nConsole.WriteLine(\"{0} % {1} = {2}\", num1, num2, rem);\n}\n}\n}\n</code></pre> <p>When we run the program, the output will be:</p> <pre><code>14.4 + 4.6 = 19\n14.4 - 4.6 = 9.8\n14.4 * 4.6 = 66.24\n14.4 / 4.6 = 3.1304347826087\n26 % 4 = 2\n</code></pre> <p>Arithmetic operations are carried out in the above example. Variables can be replaced by constants in the statements. For example,</p> <pre><code>result = 4.5 + 2.7 ; // result will hold 7.2\nresult = firstNumber - 3.2; // result will hold 11.2\n</code></pre>"},{"location":"week-7-csharp/ce103-week-7-csharp/#3-relational-operators","title":"3. Relational Operators","text":"<p>Relational operators are used to check the relationship between two operands. If the relationship is true the result will be\u00a0<code>true</code>, otherwise it will result in\u00a0<code>false</code>.</p> <p>Relational operators are used in decision making and loops.</p> <p>C# Relational Operators</p> Operator Operator Name Example == Equal to 6 == 4 evaluates to false &gt; Greater than 3 &gt; -1 evaluates to true &lt; Less than 5 &lt; 3 evaluates to false &gt;= Greater than or equal to 4 &gt;= 4 evaluates to true &lt;= Less than or equal to 5 &lt;= 3 evaluates to false != Not equal to 10 != 2 evaluates to true"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-3-relational-operators","title":"Example 3: Relational Operators","text":"<pre><code>using System;\nnamespace Operator\n{\nclass RelationalOperator\n{\npublic static void Main(string[] args)\n{\nbool result;\nint firstNumber = 10, secondNumber = 20;\nresult = (firstNumber==secondNumber);\nConsole.WriteLine(\"{0} == {1} returns {2}\",firstNumber, secondNumber, result);\nresult = (firstNumber &gt; secondNumber);\nConsole.WriteLine(\"{0} &gt; {1} returns {2}\",firstNumber, secondNumber, result);\nresult = (firstNumber &lt; secondNumber);\nConsole.WriteLine(\"{0} &lt; {1} returns {2}\",firstNumber, secondNumber, result);\nresult = (firstNumber &gt;= secondNumber);\nConsole.WriteLine(\"{0} &gt;= {1} returns {2}\",firstNumber, secondNumber, result);\nresult = (firstNumber &lt;= secondNumber);\nConsole.WriteLine(\"{0} &lt;= {1} returns {2}\",firstNumber, secondNumber, result);\nresult = (firstNumber != secondNumber);\nConsole.WriteLine(\"{0} != {1} returns {2}\",firstNumber, secondNumber, result);\n}\n}\n}\n</code></pre> <p>When we run the program, the output will be:</p> <pre><code>10 == 20 returns False\n10 &gt; 20 returns False\n10 &lt; 20 returns True\n10 &gt;= 20 returns False\n10 &lt;= 20 returns True\n10 != 20 returns True\n</code></pre>"},{"location":"week-7-csharp/ce103-week-7-csharp/#4-logical-operators","title":"4. Logical Operators","text":"<ul> <li>Logical operators are used to perform logical operation such as\u00a0<code>and</code>,\u00a0<code>or</code>. Logical operators operates on boolean expressions (<code>true</code>\u00a0and\u00a0<code>false</code>) and returns boolean values. Logical operators are used in decision making and loops.</li> <li>Here is how the result is evaluated for logical\u00a0<code>AND</code>\u00a0and\u00a0<code>OR</code>\u00a0operators.</li> <li>C# Logical operators</li> </ul> Operand 1 Operand 2 OR (|) AND (&amp;&amp;) true true true true true false true false false true true false false false false false <p>In simple words, the table can be summarized as:</p> <ul> <li>If one of the operand is true, the\u00a0<code>OR</code>\u00a0operator will evaluate it to\u00a0<code>true</code>.</li> <li>If one of the operand is false, the\u00a0<code>AND</code>\u00a0operator will evaluate it to\u00a0<code>false</code>.</li> </ul>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-4-logical-operators","title":"Example 4: Logical Operators","text":"<pre><code>using System;\nnamespace Operator\n{\nclass LogicalOperator\n{\npublic static void Main(string[] args)\n{\nbool result;\nint firstNumber = 10, secondNumber = 20;\n// OR operator\nresult = (firstNumber == secondNumber) || (firstNumber &gt; 5);\nConsole.WriteLine(result);\n// AND operator\nresult = (firstNumber == secondNumber) &amp;&amp; (firstNumber &gt; 5);\nConsole.WriteLine(result);\n}\n}\n}\n</code></pre> <p>When we run the program, the output will be:</p> <pre><code>True\nFalse\n</code></pre>"},{"location":"week-7-csharp/ce103-week-7-csharp/#5-unary-operators","title":"5. Unary Operators","text":"<p>Unlike other operators, the unary operators operates on a single operand. C# unary operators</p> Operator Operator Name Description + Unary Plus Leaves the sign of operand as it is - Unary Minus Inverts the sign of operand ++ Increment Increment value by 1 -- Decrement Decrement value by 1 ! Logical Negation (Not) Inverts the value of a boolean"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-5-unary-operators","title":"Example 5: Unary Operators","text":"<pre><code>using System;\nnamespace Operator\n{\nclass UnaryOperator\n{\npublic static void Main(string[] args)\n{\nint number = 10, result;\nbool flag = true;\nresult = +number;\nConsole.WriteLine(\"+number = \" + result);\nresult = -number;\nConsole.WriteLine(\"-number = \" + result);\nresult = ++number;\nConsole.WriteLine(\"++number = \" + result);\nresult = --number;\nConsole.WriteLine(\"--number = \" + result);\nConsole.WriteLine(\"!flag = \" + (!flag));\n}\n}\n}\n</code></pre> <p>When we run the program, the output will be:</p> <pre><code>+number = 10\n-number = -10\n++number = 11\n--number = 10\n!flag = False\n</code></pre> <p>The increment\u00a0<code>(++)</code>\u00a0and decrement\u00a0<code>(--)</code>\u00a0operators can be used as prefix and postfix. If used as prefix, the change in value of variable is seen on the same line and if used as postfix, the change in value of variable is seen on the next line. This will be clear by the example below.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-6-post-and-pre-increment-operators-in-c","title":"Example 6: Post and Pre Increment operators in C","text":"<pre><code>using System;\nnamespace Operator\n{\nclass UnaryOperator\n{\npublic static void Main(string[] args)\n{\nint number = 10;\nConsole.WriteLine((number++));\nConsole.WriteLine((number));\nConsole.WriteLine((++number));\nConsole.WriteLine((number));\n}\n}\n}\n</code></pre> <p>When we run the program, the output will be:</p> <pre><code>10\n11\n12\n12\n</code></pre> <p>We can see the effect of using\u00a0<code>++</code>\u00a0as prefix and postfix. When\u00a0<code>++</code>\u00a0is used after the operand, the value is first evaluated and then it is incremented by\u00a0<code>1</code>. Hence the statement</p> <p>Console.WriteLine((number++));</p> <p>prints\u00a0<code>10</code>\u00a0instead of\u00a0<code>11</code>. After the value is printed, the value of number is incremented by\u00a0<code>1</code>.</p> <p>The process is opposite when\u00a0<code>++</code>\u00a0is used as prefix. The value is incremented before printing. Hence the statement</p> <p>Console.WriteLine((++number));</p> <p>prints\u00a0<code>12</code>.</p> <p>The case is same for decrement operator\u00a0<code>(--)</code>.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#6-ternary-operator","title":"6. Ternary Operator","text":"<p>The ternary operator\u00a0<code>? :</code>\u00a0operates on three operands. It is a shorthand for\u00a0<code>if-then-else</code>\u00a0statement. Ternary operator can be used as follows:</p> <pre><code>variable = Condition? Expression1 : Expression2;\n</code></pre> <p>The ternary operator works as follows:</p> <ul> <li>If the expression stated by Condition is\u00a0<code>true</code>, the result of\u00a0Expression1\u00a0is assigned to variable.</li> <li>If it is\u00a0<code>false</code>, the result of\u00a0Expression2\u00a0is assigned to variable.</li> </ul>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-7-ternary-operator","title":"Example 7: Ternary Operator","text":"<pre><code>using System;\nnamespace Operator\n{\nclass TernaryOperator\n{\npublic static void Main(string[] args)\n{\nint number = 10;\nstring result;\nresult = (number % 2 == 0)? \"Even Number\" : \"Odd Number\";\nConsole.WriteLine(\"{0} is {1}\", number, result);\n}\n}\n}\n</code></pre> <p>When we run the program, the output will be:</p> <pre><code>10 is Even Number\n</code></pre> <p>To learn more, visit\u00a0C# ternary operator.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#7-bitwise-and-bit-shift-operators","title":"7. Bitwise and Bit Shift Operators","text":"<p>Bitwise and bit shift operators are used to perform bit manipulation operations.</p> <p>C# Bitwise and Bit Shift operators</p> Operator Operator Name ~ Bitwise Complement &amp; Bitwise AND | Bitwise OR ^ Bitwise Exclusive OR &lt;&lt; Bitwise Left Shift &gt;&gt; Bitwise Right Shift"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-8-bitwise-and-bit-shift-operator","title":"Example 8: Bitwise and Bit Shift Operator","text":"<pre><code>using System;\nnamespace Operator\n{\nclass BitOperator\n{\npublic static void Main(string[] args)\n{\nint firstNumber = 10;\nint secondNumber = 20;\nint result;\nresult = ~firstNumber;\nConsole.WriteLine(\"~{0} = {1}\", firstNumber, result);\nresult = firstNumber &amp; secondNumber;\nConsole.WriteLine(\"{0} &amp; {1} = {2}\", firstNumber,secondNumber, result);\nresult = firstNumber | secondNumber;\nConsole.WriteLine(\"{0} | {1} = {2}\", firstNumber,secondNumber, result);\nresult = firstNumber ^ secondNumber;\nConsole.WriteLine(\"{0} ^ {1} = {2}\", firstNumber,secondNumber, result);\nresult = firstNumber &lt;&lt; 2;\nConsole.WriteLine(\"{0} &lt;&lt; 2 = {1}\", firstNumber, result);\nresult = firstNumber &gt;&gt; 2;\nConsole.WriteLine(\"{0} &gt;&gt; 2 = {1}\", firstNumber, result);\n}\n}\n}\n</code></pre> <p>When we run the program, the output will be:</p> <pre><code>~10 = -11\n10 &amp; 20 = 0\n10 | 20 = 30\n10 ^ 20 = 30\n10 &lt;&lt; 2 = 40\n10 &gt;&gt; 2 = 2\n</code></pre> <p>To learn more, visit\u00a0C# Bitwise and Bit Shift operator.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#8-compound-assignment-operators","title":"8. Compound Assignment Operators","text":"<ul> <li>C# Compound Assignment Operators</li> </ul> Operator Operator Name Example Equivalent To += Addition Assignment <code>x += 5</code> <code>x = x + 5</code> -= Subtraction Assignment <code>x -= 5</code> <code>x = x - 5</code> *= Multiplication Assignment <code>x *= 5</code> <code>x = x * 5</code> /= Division Assignment <code>x /= 5</code> <code>x = x / 5</code> %= Modulo Assignment <code>x %= 5</code> <code>x = x % 5</code> &amp;= Bitwise AND Assignment <code>x &amp;= 5</code> <code>x = x &amp; 5</code> |= Bitwise OR Assignment <code>x \\|= 5</code> <code>x = x \\| 5</code> ^= Bitwise XOR Assignment <code>x ^= 5</code> <code>x = x ^ 5</code> &lt;&lt;= Left Shift Assignment <code>x &lt;&lt;= 5</code> <code>x = x &lt;&lt; 5</code> &gt;&gt;= Right Shift Assignment <code>x &gt;&gt;= 5</code> <code>x = x &gt;&gt; 5</code> =&gt; Lambda Operator <code>x =&gt; x*x</code> <code>Returns x*x</code>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-9-compound-assignment-operator","title":"Example 9: Compound Assignment Operator","text":"<pre><code>using System;\nnamespace Operator\n{\nclass BitOperator\n{\npublic static void Main(string[] args)\n{\nint number = 10;\nnumber += 5;\nConsole.WriteLine(number);\nnumber -= 3;\nConsole.WriteLine(number);\nnumber *= 2;\nConsole.WriteLine(number);\nnumber /= 3;\nConsole.WriteLine(number);\nnumber %= 3;\nConsole.WriteLine(number);\nnumber &amp;= 10;\nConsole.WriteLine(number);\nnumber |= 14;\nConsole.WriteLine(number);\nnumber ^= 12;\nConsole.WriteLine(number);\nnumber &lt;&lt;= 2;\nConsole.WriteLine(number);\nnumber &gt;&gt;= 3;\nConsole.WriteLine(number);\n}\n}\n}\n</code></pre> <p>When we run the program, the output will be:</p> <pre><code>15\n12\n24\n8\n2\n2\n14\n2\n8\n1\n</code></pre> <p>We will discuss about\u00a0Lambda operators\u00a0in later tutorial.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-operator-precedence-and-associativity","title":"C# Operator Precedence and Associativity","text":"<p>In this tutorial we you will learn about operator precedence and associativity in C#. This will give us an idea of how an expression is evaluated by the C# compiler.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-operator-precedence","title":"C# Operator Precedence","text":"<p>Operator precedence is a set of rules which defines how an expression is evaluated. In C#, each\u00a0C# operator\u00a0has an assigned priority and based on these priorities, the expression is evaluated.</p> <p>For example, the precedence of multiplication\u00a0<code>(*)</code>\u00a0operator is higher than the precedence of addition\u00a0<code>(+)</code>\u00a0operator. Therefore, operation involving multiplication is carried out before addition.</p> <p>Take a look at the statement below.</p> <pre><code>int x = 4 + 3 * 5;\n</code></pre> <p>What will be the value of\u00a0x\u00a0after executing this statement?</p> <p>The operand\u00a0<code>3</code>\u00a0is associated with\u00a0<code>+</code>\u00a0and\u00a0<code>*</code>. As stated earlier, multiplication has a higher precedence than addition. So, the operation\u00a0<code>3 * 5</code>\u00a0is carried out instead of\u00a0<code>4 + 3</code>. The value of variable\u00a0x\u00a0will be\u00a0<code>19</code>.</p> <p>If addition would have a higher precedence,\u00a0<code>4 + 3</code>\u00a0would be evaluated first and the value of\u00a0x\u00a0would be\u00a0<code>35</code>.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#operator-precedence-table","title":"Operator Precedence Table","text":"<p>The higher the precedence of operator is, the higher it appears in the table</p> <p>C# Operator Precedence</p> Category Operators Postfix Increment and Decrement ++, -- Prefix Increment, Decrement and Unary ++, --, +, -, !, ~ Multiplicative *, /, % Additive +, - Shift &lt;&lt;, &gt;&gt; Relational &lt;, &lt;=, &gt;, &gt;= Equality ==, != Bitwise AND &amp; Bitwise XOR ^ Bitwise OR | Logical AND &amp;&amp; Logical OR | Ternary ? : Assignment =, +=, -=, *=, /=, %=, &amp;=, |=, ^=, &lt;&lt;=, &gt;&gt;= <p>The assignment operators have the lowest precedence while the postfix increment and decrement operators have the highest precedence.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-1-operator-precedence","title":"Example 1: Operator Precedence","text":"<pre><code>using System;\nnamespace Operator\n{\nclass OperatorPrecedence\n{\npublic static void Main(string[] args)\n{\nint result1;\nint a = 5, b = 6, c = 4;\nresult1 = --a * b - ++c;\nConsole.WriteLine(result1);\nbool result2;\nresult2 = b &gt;= c + a;\nConsole.WriteLine(result2);\n}\n}\n}\n</code></pre> <p>When we run the program, the output will be:</p> <pre><code>19\nFalse\n</code></pre> <p>Let's understand how the expression is evaluated in the program.</p> <p>The precedence of\u00a0<code>--</code>\u00a0and\u00a0<code>++</code>\u00a0is higher than\u00a0<code>*</code>, and precedence of\u00a0<code>*</code>\u00a0is higher than\u00a0<code>-</code>. Hence the statement,</p> <pre><code>result1 = --a * b - ++c;\n</code></pre> <p>is equivalent to</p> <pre><code>result1 = ((--a)*b)-(++c);\n</code></pre> <p>The expression inside parentheses is always evaluated first no matter what the precedence of operators outside it is.</p> <ul> <li>At first,\u00a0(--a)\u00a0is evaluated resulting into\u00a0<code>4</code>.  </li> </ul> <p></p> <ul> <li>Then\u00a0(++c)\u00a0is evaluated resulting into\u00a0<code>5</code>.  </li> </ul> <p></p> <ul> <li>Now,\u00a0(a * b)\u00a0is evaluated resulting into\u00a0<code>24</code>.  </li> </ul> <p></p> <ul> <li>Finally, the subtraction is carried out resulting into\u00a0<code>19</code>.  </li> <li>Hence the final value of\u00a0result1\u00a0will be\u00a0<code>19</code>.</li> </ul> <p></p> <p>In the next expression, the precedence of\u00a0<code>+</code>\u00a0is higher than\u00a0<code>&gt;=</code>. So,\u00a0c\u00a0and\u00a0a\u00a0is added first and the sum is compared with\u00a0b\u00a0to produce\u00a0<code>false</code>.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#associativity-of-operators-in-c","title":"Associativity of Operators in C","text":"<p>In the previous section, we discussed about operator precedence. If two operators with different precedence are used, the operator with higher precedence is evaluated first.</p> <p>But what if both the operators have same precedence?</p> <p>In such case, the expression is evaluated based on the associativity of operator (left to right or right to left).</p> <p>For example:</p> <pre><code>int a = 5, b = 6, c = 3;\nint result = a * b / c;\n</code></pre> <p>Here, both\u00a0<code>*</code>\u00a0and\u00a0<code>/</code>\u00a0have the same precedence. But since the associativity of these operators is from\u00a0left to right,\u00a0<code>a * b</code>\u00a0is evaluated first and then division is carried out. The final result of this expression will be\u00a0<code>10</code>.</p> <p>In this particular example, the associativity does not really matter. Because even if division was carried out before multiplication, the result would be unaffected.</p> <p>Let's take a look at another example.</p> <pre><code>int a = 5, b = 6, c = 3;\na = b = c;\n</code></pre> <p>The associativity of\u00a0<code>=</code>\u00a0operator is from\u00a0right to left. So the value of\u00a0c\u00a0(i.e.\u00a0<code>3</code>) is assigned to\u00a0b, and then the value of\u00a0b\u00a0is assigned to\u00a0a. So after executing this statement, the values of\u00a0a,\u00a0b\u00a0and\u00a0c\u00a0will be\u00a0<code>3</code>.</p> <p>The table below shows the associativity of C# operators: C# Associativity of operators</p> Category Operators Associativity Postfix Increment and Decrement ++, -- Left to Right Prefix Increment, Decrement and Unary ++, --, +, -, !, ~ Right to Left Multiplicative *, /, % Left to Right Additive +, - Left to Right Shift &lt;&lt;, &gt;&gt; Left to Right Relational &lt;, &lt;=, &gt;, &gt;= Left to Right Equality ==, != Left to Right Bitwise AND &amp; Left to Right Bitwise XOR ^ Left to Right Bitwise OR | Left to Right Logical AND &amp;&amp; Left to Right Logical OR | Left to Right Ternary ? : Right to Left Assignment =, +=, -=, *=, /=, %=, &amp;=, |=, ^=, &lt;&lt;=, &gt;&gt;= Right to Left <p>Almost all the operators have associativity from left to right. The operators having associativity from right to left are:</p> <ul> <li>Unary operators</li> <li>Prefix Increment and Decrement Operators</li> <li>Ternary Operator</li> <li>Assignment Operators</li> </ul>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-2-associativity-of-operators","title":"Example 2: Associativity of Operators","text":"<pre><code>using System;\nnamespace Operator\n{\nclass OperatorPrecedence\n{\npublic static void Main(string[] args)\n{\nint a = 5, b = 6, c = 3;\nint result = a * b / c;\nConsole.WriteLine(result);\na = b = c;\nConsole.WriteLine(\"a = {0}, b = {1}, c = {2}\", a, b, c);\n}\n}\n}\n</code></pre> <p>When we run the program, the output will be:</p> <pre><code>10\na = 3, b = 3, c = 3\n</code></pre>"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-bitwise-and-bit-shift-operators","title":"C# Bitwise and Bit Shift Operators","text":"<p>In this tutorial, we will learn in detail about bitwise and bit shift operators in C#. C# provides 4 bitwise and 2 bit shift operators.</p> <p>Bitwise and bit shift operators are used to perform bit level operations on integer (int, long, etc) and boolean data. These operators are not commonly used in real life situations.</p> <p>If you are interested to explore more, visit\u00a0practical applications of bitwise operations.</p> <p>The bitwise and bit shift operators available in C# are listed below.</p> <p>List of C# Bitwise Operators</p> Operator Operator Name ~ Bitwise Complement &amp; Bitwise AND | Bitwise OR ^ Bitwise Exclusive OR (XOR) &lt;&lt; Bitwise Left Shift &gt;&gt; Bitwise Right Shift"},{"location":"week-7-csharp/ce103-week-7-csharp/#bitwise-or","title":"Bitwise OR","text":"<ul> <li>Bitwise OR operator is represented by\u00a0<code>|</code>. </li> <li>It performs bitwise OR operation on the corresponding bits of two operands. </li> <li>If either of the bits is\u00a0<code>1</code>, the result is\u00a0<code>1</code>. Otherwise the result is\u00a0<code>0</code>.</li> <li>If the operands are of type\u00a0<code>bool</code>, the bitwise OR operation is equivalent to logical OR operation between them.</li> </ul> <p>For Example,</p> <pre><code>14 = 00001110 (In Binary)\n11 = 00001011 (In Binary)\n</code></pre> <p>Bitwise\u00a0<code>OR</code>\u00a0operation between 14 and 11:</p> <pre><code>00001110\n00001011\n-------- XOR\n00001111 = 15 (In Decimal)\n</code></pre>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-1-bitwise-or","title":"Example 1: Bitwise OR","text":"<pre><code>using System;\nnamespace Operator\n{\nclass BitWiseOR\n{\npublic static void Main(string[] args)\n{\nint firstNumber = 14, secondNumber = 11, result;\nresult = firstNumber | secondNumber;\nConsole.WriteLine(\"{0} | {1} = {2}\", firstNumber, secondNumber, result);\n}\n}\n}\n</code></pre> <p>When we run the program, the output will be:</p> <pre><code>14 | 11 = 15\n</code></pre>"},{"location":"week-7-csharp/ce103-week-7-csharp/#bitwise-and","title":"Bitwise AND","text":"<ul> <li>Bitwise AND operator is represented by\u00a0<code>&amp;</code>. </li> <li>It performs bitwise AND operation on the corresponding bits of two operands. </li> <li>If either of the bits is\u00a0<code>0</code>, the result is\u00a0<code>0</code>. </li> <li>Otherwise the result is\u00a0<code>1</code>.</li> <li>If the operands are of type\u00a0<code>bool</code>, the bitwise AND operation is equivalent to logical AND operation between them.</li> </ul> <p>-</p> <p>For Example,</p> <pre><code>14 = 00001110 (In Binary)\n11 = 00001011 (In Binary)\n</code></pre> <p>Bitwise AND operation between 14 and 11:</p> <pre><code>00001110\n00001011\n-------- AND\n00001010 = 10 (In Decimal)\n</code></pre>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-2-bitwise-and","title":"Example 2: Bitwise AND","text":"<pre><code>using System;\nnamespace Operator\n{\nclass BitWiseAND\n{\npublic static void Main(string[] args)\n{\nint firstNumber = 14, secondNumber = 11, result;\nresult = firstNumber &amp; secondNumber;\nConsole.WriteLine(\"{0} &amp; {1} = {2}\", firstNumber, secondNumber, result);\n}\n}\n}\n</code></pre> <p>When we run the program, the output will be:</p> <pre><code>14 &amp; 11 = 10\n</code></pre>"},{"location":"week-7-csharp/ce103-week-7-csharp/#bitwise-xor","title":"Bitwise XOR","text":"<ul> <li>Bitwise XOR operator is represented by\u00a0<code>^</code>. </li> <li>It performs bitwise XOR operation on the corresponding bits of two operands. </li> <li>If the corresponding bits are\u00a0same, the result is\u00a0<code>0</code>. </li> <li>If the corresponding bits are\u00a0different, the result is\u00a0<code>1</code>.</li> <li>If the operands are of type\u00a0<code>bool</code>, the bitwise XOR operation is equivalent to logical XOR operation between them.</li> </ul> <p>For Example,</p> <pre><code>14 = 00001110 (In Binary)\n11 = 00001011 (In Binary)\n</code></pre> <p>Bitwise XOR operation between 14 and 11:</p> <pre><code>00001110\n00001011\n-------- B-XOR\n00000101 = 5 (In Decimal)\n</code></pre> <p>If you want to more about the usage of Bitwise XOR, visit\u00a0The Magic of XOR</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-3-bitwise-xor","title":"Example 3: Bitwise XOR","text":"<pre><code>using System;\nnamespace Operator\n{\nclass BitWiseXOR\n{\npublic static void Main(string[] args)\n{\nint firstNumber = 14, secondNumber = 11, result;\nresult = firstNumber^secondNumber;\nConsole.WriteLine(\"{0} ^ {1} = {2}\", firstNumber, secondNumber, result);\n}\n}\n}\n</code></pre> <p>When we run the program, the output will be:</p> <pre><code>14 ^ 11 = 5\n</code></pre>"},{"location":"week-7-csharp/ce103-week-7-csharp/#bitwise-complement","title":"Bitwise Complement","text":"<p>Bitwise Complement operator is represented by\u00a0<code>~</code>. It is a unary operator, i.e. operates on only one operand. The\u00a0<code>~</code>\u00a0operator\u00a0inverts\u00a0each bits i.e. changes 1 to 0 and 0 to 1.</p> <p>For Example,</p> <pre><code>26 = 00011010 (In Binary)\n</code></pre> <p>Bitwise Complement operation on 26:</p> <pre><code>~ 00011010 = 11100101 = 229 (In Decimal)\n</code></pre>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-4-bitwise-complement","title":"Example 4: Bitwise Complement","text":"<pre><code>using System;\nnamespace Operator\n{\nclass BitWiseComplement\n{\npublic static void Main(string[] args)\n{\nint number = 26, result;\nresult = ~number;\nConsole.WriteLine(\"~{0} = {1}\", number, result);\n}\n}\n}\n</code></pre> <p>When we run the program, the output will be:</p> <pre><code>~26 = -27\n</code></pre> <p>We got -<code>27</code>\u00a0as output when we were expecting\u00a0<code>229</code>.\u00a0Why did this happen?</p> <p>It happens because the binary value\u00a0<code>11100101</code>\u00a0which we expect to be\u00a0<code>229</code>\u00a0is actually a 2's complement representation of\u00a0<code>-27</code>. Negative numbers in computer are represented in 2's complement representation.</p> <p>For any integer n, 2's complement of\u00a0<code>n</code>\u00a0will be\u00a0<code>-(n+1)</code>.</p> <p>2's complement</p> Decimal Binary 2's Complement 0 00000000 -(11111111 + 1) = -00000000 = -0 (In Decimal) 1 00000001 -(11111110 + 1) = -11111111 = -256 (In Decimal) 229 11100101 -(00011010 + 1) = -00011011 = -27 <p>Overflow values are ignored in 2's complement.</p> <p>The bitwise complement of\u00a0<code>26</code>\u00a0is 229 (in decimal) and the 2's complement of\u00a0<code>229</code>\u00a0is\u00a0<code>-27</code>. Hence the output is\u00a0<code>-27</code>\u00a0instead of\u00a0<code>229</code>.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#bitwise-left-shift","title":"Bitwise Left Shift","text":"<p>Bitwise left shift operator is represented by\u00a0<code>&lt;&lt;</code>. The\u00a0<code>&lt;&lt;</code>\u00a0operator shifts a number to the left by a specified number of bits. Zeroes are added to the least significant bits.</p> <p>In decimal, it is equivalent to</p> <pre><code>num * 2bits\n</code></pre> <p>For Example,</p> <pre><code>42 = 101010 (In Binary)\n</code></pre> <p>Bitwise Lift Shift operation on 42:</p> <pre><code>42 &lt;&lt; 1 = 84 (In binary 1010100)\n42 &lt;&lt; 2 = 168 (In binary 10101000)\n42 &lt;&lt; 4 = 672 (In binary 1010100000)\n</code></pre>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-5-bitwise-left-shift","title":"Example 5: Bitwise Left Shift","text":"<pre><code>using System;\nnamespace Operator\n{\nclass LeftShift\n{\npublic static void Main(string[] args)\n{\nint number = 42;\nConsole.WriteLine(\"{0}&lt;&lt;1 = {1}\", number, number&lt;&lt;1);\nConsole.WriteLine(\"{0}&lt;&lt;2 = {1}\", number, number&lt;&lt;2);\nConsole.WriteLine(\"{0}&lt;&lt;4 = {1}\", number, number&lt;&lt;4);\n}\n}\n}\n</code></pre> <p>When we run the program, the output will be:</p> <pre><code>42&lt;&lt;1 = 84\n42&lt;&lt;2 = 168\n42&lt;&lt;4 = 672\n</code></pre>"},{"location":"week-7-csharp/ce103-week-7-csharp/#bitwise-right-shift","title":"Bitwise Right Shift","text":"<p>Bitwise right\u00a0shift operator is represented by\u00a0<code>&gt;&gt;</code>. The\u00a0<code>&gt;&gt;</code>\u00a0operator shifts a number to the right by a specified number of bits. The first operand is shifted to right by the number of bits specified by second operand.</p> <p>In decimal, it is equivalent to</p> <pre><code>floor(num / 2bits)\n</code></pre> <p>For Example,</p> <pre><code>42 = 101010 (In Binary)\n</code></pre> <p>Bitwise Lift Shift operation on 42:</p> <pre><code>42 &gt;&gt; 1 = 21 (In binary 010101)\n42 &gt;&gt; 2 = 10 (In binary 001010)\n42 &gt;&gt; 4 = 2 (In binary 000010)\n</code></pre>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-6-bitwise-right-shift","title":"Example 6: Bitwise Right Shift","text":"<pre><code>using System;\nnamespace Operator\n{\nclass LeftShift\n{\npublic static void Main(string[] args)\n{\nint number = 42;\nConsole.WriteLine(\"{0}&gt;&gt;1 = {1}\", number, number&gt;&gt;1);\nConsole.WriteLine(\"{0}&gt;&gt;2 = {1}\", number, number&gt;&gt;2);\nConsole.WriteLine(\"{0}&gt;&gt;4 = {1}\", number, number&gt;&gt;4);\n}\n}\n}\n</code></pre> <p>When we run the program, the output will be:</p> <pre><code>42&gt;&gt;1 = 21\n42&gt;&gt;2 = 10\n42&gt;&gt;4 = 2\n</code></pre>"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-basic-input-and-output","title":"C# Basic Input and Output","text":"<p>In this tutorial, we will learn how to take input from user and and display output in C# using various methods</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-output","title":"C# Output","text":"<p>In order to output something in C#, we can use</p> <pre><code>System.Console.WriteLine() OR\nSystem.Console.Write()\n</code></pre> <p>Here,\u00a0<code>System</code>\u00a0is a\u00a0namespace,\u00a0<code>Console</code>\u00a0is a class within namespace\u00a0<code>System</code>\u00a0and\u00a0<code>WriteLine</code>\u00a0and\u00a0<code>Write</code>\u00a0are methods of class\u00a0<code>Console</code>.</p> <p>Let's look at a simple example that prints a string to output screen.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-1-printing-string-using-writeline","title":"Example 1: Printing String using WriteLine()","text":"<pre><code>using System;\nnamespace Sample\n{\nclass Test\n{\npublic static void Main(string[] args)\n{\nConsole.WriteLine(\"C# is cool\");\n}\n}\n}\n</code></pre> <p>When we run the program, the output will be</p> <pre><code>C# is cool\n</code></pre>"},{"location":"week-7-csharp/ce103-week-7-csharp/#difference-between-writeline-and-write-method","title":"Difference between WriteLine() and Write() method","text":"<p>The main difference between\u00a0<code>WriteLine()</code>\u00a0and\u00a0<code>Write()</code>\u00a0is that the\u00a0<code>Write()</code>\u00a0method only prints the string provided to it, while the\u00a0<code>WriteLine()</code>\u00a0method prints the string and moves to the start of next line as well.</p> <p>Let's take at a look at the example below to understand the difference between these methods.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-2-how-to-use-writeline-and-write-method","title":"Example 2: How to use WriteLine() and Write() method?","text":"<pre><code>using System;\nnamespace Sample\n{\nclass Test\n{\npublic static void Main(string[] args)\n{\nConsole.WriteLine(\"Prints on \");\nConsole.WriteLine(\"New line\");\nConsole.Write(\"Prints on \");\nConsole.Write(\"Same line\");\n}\n}\n}\n</code></pre> <p>When we run the program, the output will be</p> <pre><code>Prints on\nNew line\nPrints on Same line\n</code></pre>"},{"location":"week-7-csharp/ce103-week-7-csharp/#printing-variables-and-literals-using-writeline-and-write","title":"Printing Variables and Literals using WriteLine() and Write()","text":"<p>The\u00a0<code>WriteLine()</code>\u00a0and\u00a0<code>Write()</code>\u00a0method can be used to print variables and literals. Here's an example.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-3-printing-variables-and-literals","title":"Example 3: Printing Variables and Literals","text":"<pre><code>using System;\nnamespace Sample\n{\nclass Test\n{\npublic static void Main(string[] args)\n{\nint value = 10;\n// Variable\nConsole.WriteLine(value);\n// Literal\nConsole.WriteLine(50.05);\n}\n}\n}\n</code></pre> <p>When we run the program, the output will be</p> <pre><code>10\n50.05\n</code></pre>"},{"location":"week-7-csharp/ce103-week-7-csharp/#combining-concatenating-two-strings-using-operator-and-printing-them","title":"Combining (Concatenating) two strings using + operator and printing them","text":"<p>Strings can be combined/concatenated using the\u00a0<code>+</code>\u00a0operator while printing.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-4-printing-concatenated-string-using-operator","title":"Example 4: Printing Concatenated String using + operator","text":"<pre><code>using System;\nnamespace Sample\n{\nclass Test\n{\npublic static void Main(string[] args)\n{\nint val = 55;\nConsole.WriteLine(\"Hello \" + \"World\");\nConsole.WriteLine(\"Value = \" + val);\n}\n}\n}\n</code></pre> <p>When we run the program, the output will be</p> <pre><code>Hello World\nValue = 55\n</code></pre>"},{"location":"week-7-csharp/ce103-week-7-csharp/#printing-concatenated-string-using-formatted-string-better-alternative","title":"Printing concatenated string using Formatted String [Better Alternative]","text":"<p>A better alternative for printing concatenated string is using formatted string. Formatted string allows programmer to use placeholders for variables. </p> <p>For example, The following line,</p> <pre><code>Console.WriteLine(\"Value = \" + val);\n</code></pre> <p>can be replaced by,</p> <pre><code>Console.WriteLine(\"Value = {0}\", val);\n</code></pre> <p><code>{0}</code>\u00a0is the placeholder for variable\u00a0val\u00a0which will be replaced by value of\u00a0val. Since only one variable is used so there is only one placeholder.</p> <p>Multiple variables can be used in the formatted string. We will see that in the example below.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-5-printing-concatenated-string-using-string-formatting","title":"Example 5: Printing Concatenated string using String formatting","text":"<pre><code>using System;\nnamespace Sample\n{\nclass Test\n{\npublic static void Main(string[] args)\n{\nint firstNumber = 5, secondNumber = 10, result;\nresult = firstNumber + secondNumber;\nConsole.WriteLine(\"{0} + {1} = {2}\", firstNumber, secondNumber, result);\n}\n}\n}\n</code></pre> <p>When we run the program, the output will be</p> <pre><code>5 + 10 = 15\n</code></pre> <p>Here,\u00a0<code>{0}</code>\u00a0is replaced by\u00a0firstNumber,\u00a0<code>{1}</code>\u00a0is replaced by\u00a0secondNumber\u00a0and\u00a0<code>{2}</code>\u00a0is replaced by\u00a0result. This approach of printing output is more readable and less error prone than using\u00a0<code>+</code>\u00a0operator.</p> <p>To know more about string formatting, visit\u00a0C# string formatting.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-input","title":"C# Input","text":"<p>In C#, the simplest method to get input from the user is by using the\u00a0<code>ReadLine()</code>\u00a0method of the\u00a0<code>Console</code>\u00a0class. However,\u00a0<code>Read()</code>\u00a0and\u00a0<code>ReadKey()</code>\u00a0are also available for getting input from the user. They are also included in\u00a0<code>Console</code>\u00a0class.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-6-get-string-input-from-user","title":"Example 6: Get String Input From User","text":"<pre><code>using System;\nnamespace Sample\n{\nclass Test\n{\npublic static void Main(string[] args)\n{\nstring testString;\nConsole.Write(\"Enter a string - \");\ntestString = Console.ReadLine();\nConsole.WriteLine(\"You entered '{0}'\", testString);\n}\n}\n}\n</code></pre> <p>When we run the program, the output will be:</p> <pre><code>Enter a string - Hello World\nYou entered 'Hello World'\n</code></pre>"},{"location":"week-7-csharp/ce103-week-7-csharp/#difference-between-readline-read-and-readkey-method","title":"Difference between ReadLine(), Read() and ReadKey() method:","text":"<p>The difference between\u00a0<code>ReadLine()</code>,\u00a0<code>Read()</code>\u00a0and\u00a0<code>ReadKey()</code>\u00a0method is:</p> <ul> <li><code>ReadLine()</code>: The\u00a0<code>ReadLine()</code>\u00a0method reads the next line of input from the standard input stream. It returns the same string.</li> <li><code>Read()</code>: The\u00a0<code>Read()</code>\u00a0method reads the next character from the standard input stream. It returns the ascii value of the character.</li> <li><code>ReadKey()</code>: The\u00a0<code>ReadKey()</code>\u00a0method obtains the next key pressed by user. This method is usually used to hold the screen until user press a key.</li> </ul> <p>If you want to know more about these methods, here is an interesting discussion on StackOverflow on:\u00a0Difference between Console.Read() and Console.ReadLine()?.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-7-difference-between-read-and-readkey-method","title":"Example 7: Difference between Read() and ReadKey() method","text":"<pre><code>using System;\nnamespace Sample\n{\nclass Test\n{\npublic static void Main(string[] args)\n{\nint userInput;\nConsole.WriteLine(\"Press any key to continue...\");\nConsole.ReadKey();\nConsole.WriteLine();\nConsole.Write(\"Input using Read() - \");\nuserInput = Console.Read();\nConsole.WriteLine(\"Ascii Value = {0}\",userInput);\n}\n}\n}\n</code></pre> <p>When we run the program, the output will be</p> <pre><code>Press any key to continue...\nx\nInput using Read() - Learning C#\nAscii Value = 76\n</code></pre> <p>From this example, it must be clear how\u00a0<code>ReadKey()</code>\u00a0and\u00a0<code>Read()</code>\u00a0method works. While using\u00a0<code>ReadKey()</code>, as soon as the key is pressed, it is displayed on the screen.</p> <p>When\u00a0<code>Read()</code>\u00a0is used, it takes a whole line but only returns the ASCII value of first character. Hence,\u00a0<code>76</code>\u00a0(ASCII value of\u00a0<code>L</code>) is printed.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#reading-numeric-values-integer-and-floating-point-types","title":"Reading numeric values (integer and floating point types)","text":"<p>Reading a character or string is very simple in C#. All you need to do is call the corresponding methods as required.</p> <p>But, reading numeric values can be slightly tricky in C#. We\u2019ll still use the same\u00a0<code>ReadLine()</code>\u00a0method we used for getting string values. But since the\u00a0<code>ReadLine()</code>\u00a0method receives the input as string, it needs to be converted into integer or floating point type.</p> <p>One simple approach for converting our input is using the methods of\u00a0<code>Convert</code>\u00a0class.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-8-reading-numeric-values-from-user-using-convert-class","title":"Example 8: Reading Numeric Values from User using Convert class","text":"<pre><code>using System;\nnamespace UserInput\n{\nclass MyClass\n{\npublic static void Main(string[] args)\n{\nstring userInput;\nint intVal;\ndouble doubleVal;\nConsole.Write(\"Enter integer value: \");\nuserInput = Console.ReadLine();\n/* Converts to integer type */\nintVal = Convert.ToInt32(userInput);\nConsole.WriteLine(\"You entered {0}\",intVal);\nConsole.Write(\"Enter double value: \");\nuserInput = Console.ReadLine();\n/* Converts to double type */\ndoubleVal = Convert.ToDouble(userInput);\nConsole.WriteLine(\"You entered {0}\",doubleVal);\n}\n}\n}\n</code></pre> <p>When we run the program, the output will be</p> <pre><code>Enter integer value: 101\nYou entered 101\nEnter double value: 59.412\nYou entered 59.412\n</code></pre> <p>The\u00a0<code>ToInt32()</code>\u00a0and\u00a0<code>ToDouble()</code>\u00a0method of Convert class converts the string input to integer and double type respectively. Similarly we can convert the input to other types. Here is a\u00a0complete list of available methods for Convert class.</p> <p>There are other ways to get numeric inputs from user. To learn more, visit\u00a0Reading an integer from user input.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-expressions-statements-and-blocks-with-examples","title":"C# Expressions, Statements and Blocks (With Examples)","text":"<p>In this article, we will learn about C# expressions, C# statements, difference between expression and statement, and C# blocks.</p> <p>Expressions, statements and blocks are the building block of a C# program. We have been using them since our first\u00a0\"Hello World\" program.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-expressions","title":"C# Expressions","text":"<p>An expression in C# is a combination of operands (variables, literals, method calls) and operators that can be evaluated to a single value. To be precise, an expression must have at least one operand but may not have any operator.</p> <p>Let's look at the example below:</p> <pre><code>double temperature;\ntemperature = 42.05;\n</code></pre> <p>Here,\u00a0<code>42.05</code>\u00a0is an expression. Also,\u00a0<code>temperature = 42.05</code>\u00a0is an expression too.</p> <pre><code>int a, b, c, sum;\nsum = a + b + c;\n</code></pre> <p>Here,\u00a0<code>a + b + c</code>\u00a0is an expression.</p> <pre><code>if (age&gt;=18 &amp;&amp; age&lt;58)\nConsole.WriteLine(\"Eligible to work\");\n</code></pre> <p>Here,\u00a0<code>(age&gt;=18 &amp;&amp; age&lt;58)</code>\u00a0is an expression that returns a\u00a0<code>boolean</code>\u00a0value.\u00a0<code>\"Eligible to work\"</code>\u00a0is also an expression.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-statements","title":"C# Statements","text":"<p>A statement is a basic unit of execution of a program. A program consists of multiple statements.</p> <p>For example:</p> <pre><code>int age = 21;\nInt marks = 90;\n</code></pre> <p>In the above example, both lines above are statements.</p> <p>There are different types of statements in C#. In this tutorial, we\u2019ll mainly focus on two of them:</p> <ol> <li>Declaration Statement</li> <li>Expression Statement</li> </ol>"},{"location":"week-7-csharp/ce103-week-7-csharp/#declaration-statement","title":"Declaration Statement","text":"<p>Declaration statements are used to declare and initialize variables.</p> <p>For example:</p> <pre><code>char ch;\nint maxValue = 55;\n</code></pre> <p>Both\u00a0<code>char ch;</code>\u00a0and\u00a0<code>int maxValue = 55;</code>\u00a0are declaration statements.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#expression-statement","title":"Expression Statement","text":"<p>An expression followed by a semicolon is called an expression statement.</p> <p>For example:</p> <pre><code>/* Assignment */\narea = 3.14 * radius * radius;\n/* Method call is an expression*/\nSystem.Console.WriteLine(\"Hello\");\n</code></pre> <p>Here,\u00a0<code>3.14 * radius * radius</code>\u00a0\u00a0is an expression and\u00a0<code>area = 3.14 * radius * radius;</code>\u00a0is an expression statement.</p> <p>Likewise,\u00a0<code>System.Console.WriteLine(\"Hello\");</code>\u00a0is both an expression and a statement.</p> <p>Beside declaration and expression statement, there are:</p> <ul> <li>Selection Statements (if...else, switch)</li> <li>Iteration Statements (do, while, for, foreach)</li> <li>Jump Statements (break, continue, goto, return, yield)</li> <li>Exception Handling\u00a0Statements (throw, try-catch, try-finally, try-catch-finally)</li> </ul> <p>These statements will be discussed in later tutorials.</p> <p>If you want to learn more about statements, visit\u00a0C# Statements\u00a0( C# reference)</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-blocks","title":"C# Blocks","text":"<p>A block is a combination of zero or more statements that is enclosed inside curly brackets <code>{ }</code>.</p> <p>For example:</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-1-c-blocks-with-statements","title":"Example 1: C# Blocks with statements","text":"<pre><code>using System;\nnamespace Blocks\n{\nclass BlockExample\n{\npublic static void Main(string[] args)\n{\ndouble temperature = 42.05;\nif (temperature &gt; 32)\n{    // Start of block\nConsole.WriteLine(\"Current temperature = {0}\", temperature);\nConsole.WriteLine(\"It's hot\");\n}    // End of block\n}\n}\n}\n</code></pre> <p>When we run the program, the output will be:</p> <pre><code>Current temperature = 42.05\nIt's hot\n</code></pre> <p>Here, the two statements inside\u00a0<code>{ }</code>:</p> <pre><code>Console.WriteLine(\"Current temperature = {0}\", temperature);\n</code></pre> <p>and</p> <pre><code>Console.WriteLine(\"It's hot\");\n</code></pre> <p>forms a\u00a0block.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-2-c-blocks-without-statements","title":"Example 2: C# Blocks without statements","text":"<p>A block may not have any statements within it as shown in the below example.</p> <pre><code>using System;\nnamespace Blocks\n{\nclass BlockExample\n{\npublic static void Main(string[] args)\n{\ndouble temperature = 42.05;\nif (temperature &gt; 32)\n{    // Start of block\n// No statements\n}    // End of block\n}\n}\n}\n</code></pre> <p>Here, the curly braces\u00a0<code>{ }</code>\u00a0after\u00a0<code>if(temperature &gt; 32)</code>\u00a0contains only comments and no statements.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-comments","title":"C# Comments","text":"<p>In this article, we will learn about C# comments, different style of comments, and why and how to use them in a program.</p> <p>Comments are used in a program to help us understand a piece of code. They are human readable words intended to make the code readable. Comments are completely ignored by the compiler.</p> <p>In C#, there are 3 types of comments:</p> <ol> <li>Single Line Comments (\u00a0<code>//</code>\u00a0)</li> <li>Multi Line Comments (<code>/* */</code>)</li> <li>XML Comments (\u00a0<code>///</code>\u00a0)</li> </ol>"},{"location":"week-7-csharp/ce103-week-7-csharp/#single-line-comments","title":"Single Line Comments","text":"<p>Single line comments start with a double slash\u00a0<code>//</code>. The compiler ignores everything after\u00a0<code>//</code>\u00a0to the end of the line. For example,</p> <pre><code>int a = 5 + 7; // Adding 5 and 7\n</code></pre> <p>Here,\u00a0<code>Adding 5 and 7</code>\u00a0is the comment.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-1-using-single-line-comment","title":"Example 1: Using single line comment","text":"<pre><code>// Hello World Program\nusing System;\nnamespace HelloWorld\n{\nclass Program\n{\npublic static void Main(string[] args)  // Execution Starts from Main method\n{\n// Prints Hello World\nConsole.WriteLine(\"Hello World!\");\n}\n}\n}\n</code></pre> <p>The above program contains 3 single line comments:</p> <pre><code>// Hello World Program\n// Execution Starts from Main method\n</code></pre> <p>and</p> <pre><code>// Prints Hello World\n</code></pre> <p>Single line comments can be written in a separate line or along with the codes in same line. However, it is recommended to use comments in a separate line.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#multi-line-comments","title":"Multi Line Comments","text":"<p>Multi line comments start with\u00a0<code>/*</code>\u00a0and ends with\u00a0<code>*/</code>. Multi line comments can span over multiple lines.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-2-using-multi-line-comment","title":"Example 2: Using multi line comment","text":"<pre><code>/*    This is a Hello World Program in C#.    This program prints Hello World.*/\nusing System;\nnamespace HelloWorld\n{\nclass Program\n{\npublic static void Main(string[] args)\n{\n/* Prints Hello World     */\nConsole.WriteLine(\"Hello World!\");\n}\n}\n}\n</code></pre> <p>The above program contains 2 multi line comments:</p> <pre><code>/*\nThis is a Hello World Program in C#.\nThis program prints Hello World.\n*/\n</code></pre> <p>and</p> <pre><code>/* Prints Hello World */\n</code></pre> <p>Here, we may have noticed that it is not compulsory for a multi line comment to span over multiple lines.<code>/* \u2026 */</code>\u00a0can be used instead of single line comments.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#xml-documentation-comments","title":"XML Documentation Comments","text":"<p>XML documentation comment is a special feature in C#. It starts with a triple slash\u00a0<code>///</code>\u00a0and is used to categorically describe a piece of code.. This is done using XML tags within a comment. These comments are then, used to create a separate XML documentation file.</p> <p>If you are not familiar with XML, see\u00a0What is XML?</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-3-using-xml-documentation-comment","title":"Example 3: Using XML documentation comment","text":"<pre><code>/// &lt;summary&gt;\n///  This is a hello world program.\n/// &lt;/summary&gt;\nusing System;\nnamespace HelloWorld\n{\nclass Program\n{\npublic static void Main(string[] args)\n{\nConsole.WriteLine(\"Hello World!\");\n}\n}\n}\n</code></pre> <p>The XML comment used in the above program is</p> <pre><code>/// &lt;summary&gt;\n/// This is a hello world program.\n/// &lt;/summary&gt;\n</code></pre> <p>The XML documentation (.xml file) generated will contain:</p> <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;doc&gt;\n&lt;assembly&gt;\n&lt;name&gt;HelloWorld&lt;/name&gt;\n&lt;/assembly&gt;\n&lt;members&gt;\n&lt;/members&gt;\n&lt;/doc&gt;\n</code></pre> <p>Visit\u00a0XML Documentation Comments\u00a0if you are interested in learning more.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#use-comments-the-right-way","title":"Use Comments the Right Way","text":"<p>Comments are used to explain parts of code but they should not be overused .</p> <p>For example:</p> <pre><code>// Prints Hello World\nConsole.WriteLine(\"Hello World\");\n</code></pre> <p>Using comment in the above example is not necessary. It is obvious that the line will print Hello World. Comments should be avoided in such cases.</p> <ul> <li>Instead comments should be used in the program to explain complex algorithms and techniques.</li> <li>Comments should be short and to the point instead of a long description.</li> <li>As a rule of thumb, it is better to explain\u00a0why\u00a0instead of\u00a0how, using comments.</li> </ul>"},{"location":"week-7-csharp/ce103-week-7-csharp/#flow-control","title":"Flow Control","text":""},{"location":"week-7-csharp/ce103-week-7-csharp/#c-if-ifelse-ifelse-if-and-nested-if-statement","title":"C# if, if...else, if...else if and Nested if Statement","text":"<p>In this article, we will learn how to use if, if...else, if...else if statement in C# to control the flow of our program\u2019s execution.</p> <p>Testing a condition is inevitable in programming. We will often face situations where we need to test conditions (whether it is\u00a0<code>true</code>\u00a0or\u00a0<code>false</code>) to control the flow of program. These conditions may be affected by user's input, time factor, current environment where the program is running, etc.</p> <p>In this article, we'll learn to test conditions using if statement in C#.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-if-if-then-statement","title":"C# if (if-then) Statement","text":"<p>C# if-then statement will execute a block of code if the given condition is true. The syntax of if-then statement in C# is:</p> <pre><code>if (boolean-expression)\n{\n// statements executed if boolean-expression is true\n}\n</code></pre> <ul> <li>The boolean-expression will return either\u00a0true\u00a0or\u00a0<code>false</code>.</li> <li>If the boolean-expression returns\u00a0<code>true</code>, the statements inside the body of if ( inside\u00a0<code>{...}</code>\u00a0) will be executed.</li> <li>If the boolean-expression returns\u00a0<code>false</code>, the statements inside the body of if will be ignored.</li> </ul> <p>For example,</p> <pre><code>if (number &lt; 5)\n{\nnumber += 5;\n}\n</code></pre> <p>In this example, the statement</p> <pre><code>number += 5;\n</code></pre> <p>will be executed only if the value of number is less than 5.</p> <p>Remember the\u00a0+= operator?</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#how-if-statement-works","title":"How if statement works?","text":""},{"location":"week-7-csharp/ce103-week-7-csharp/#example-1-c-if-statement","title":"Example 1: C# if Statement","text":"<pre><code>using System;\nnamespace Conditional\n{\nclass IfStatement\n{\npublic static void Main(string[] args)\n{\nint number = 2;\nif (number &lt; 5)\n{\nConsole.WriteLine(\"{0} is less than 5\", number);\n}\nConsole.WriteLine(\"This statement is always executed.\");\n}\n}\n}\n</code></pre> <p>When we run the program, the output will be:</p> <pre><code>2 is less than 5\nThis statement is always executed.\n</code></pre> <p>The value of\u00a0number\u00a0is initialized to 2. So the expression\u00a0<code>number &lt; 5</code>\u00a0is evaluated to\u00a0<code>true</code>. Hence, the code inside the if block are executed. The code after the if statement will always be executed irrespective to the expression.</p> <p>Now, change the value of\u00a0number\u00a0to something greater than\u00a0<code>5</code>, say\u00a0<code>10</code>. When we run the program the output will be:</p> <p>This statement is always executed.</p> <p>The expression\u00a0<code>number &lt; 5</code>\u00a0will return\u00a0<code>false</code>, hence the code inside if block won't be executed.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-ifelse-if-then-else-statement","title":"C# if...else (if-then-else) Statement","text":"<p>The if statement in C# may have an optional else statement. The block of code inside the else statement will be executed if the expression is evaluated to\u00a0<code>false</code>.</p> <p>The syntax of if...else statement in C# is:</p> <pre><code>if (boolean-expression)\n{\n// statements executed if boolean-expression is true\n}\nelse\n{\n// statements executed if boolean-expression is false\n}\n</code></pre> <p>For example,</p> <pre><code>if (number &lt; 5)\n{\nnumber += 5;\n}\nelse\n{\nnumber -= 5;\n}\n</code></pre> <p>In this example, the statement</p> <pre><code>number += 5;\n</code></pre> <p>will be executed only if the value of\u00a0number\u00a0is less than\u00a0<code>5</code>.</p> <p>The statement</p> <pre><code>number -= 5;\n</code></pre> <p>will be executed if the value of number is greater than or equal to\u00a0<code>5</code>.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#how-ifelse-statement-works","title":"How if...else Statement works?","text":"<p>Working of if...else Statement</p> <p></p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-2-c-ifelse-statement","title":"Example 2: C# if...else Statement","text":"<pre><code>using System;\nnamespace Conditional\n{\nclass IfElseStatement\n{\npublic static void Main(string[] args)\n{\nint number = 12;\nif (number &lt; 5)\n{\nConsole.WriteLine(\"{0} is less than 5\", number);\n}\nelse\n{\nConsole.WriteLine(\"{0} is greater than or equal to 5\", number);\n}\nConsole.WriteLine(\"This statement is always executed.\");\n}\n}\n}\n</code></pre> <p>When we run the program, the output will be:</p> <pre><code>12 is greater than or equal to 5\nThis statement is always executed.\n</code></pre> <p>Here, the value of\u00a0number\u00a0is initialized to\u00a0<code>12</code>. So the expression\u00a0<code>number &lt; 5</code>\u00a0is evaluated to\u00a0<code>false</code>. Hence, the code inside the else block are executed. The code after the if..else statement will always be executed irrespective to the expression.</p> <p>Now, change the value of number to something less than\u00a0<code>5</code>, say\u00a0<code>2</code>. When we run the program the output will be:</p> <pre><code>2 is less than 5\nThis statement is always executed.\n</code></pre> <p>The expression\u00a0<code>number &lt; 5</code>\u00a0will return true, hence the code inside if block will be executed.</p> <p>Ternary operator in C#\u00a0provides a shortcut for C# if...else statement.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-ifelse-if-if-then-else-if-statement","title":"C# if...else if (if-then-else if) Statement","text":"<p>When we have only one condition to test, if-then and if-then-else statement works fine. But what if we have a multiple condition to test and execute one of the many block of code.</p> <p>For such case, we can use if..else if statement in C#. The syntax for if...else if statement is:</p> <pre><code>if (boolean-expression-1)\n{\n// statements executed if boolean-expression-1 is true\n}\nelse if (boolean-expression-2)\n{\n// statements executed if boolean-expression-2 is true\n}\nelse if (boolean-expression-3)\n{\n// statements executed if boolean-expression-3 is true\n}\n.\n.\n.\nelse\n{\n// statements executed if all above expressions are false\n}\n</code></pre> <p>The if...else if statement is executed from the\u00a0top\u00a0to\u00a0bottom. As soon as a test expression is\u00a0<code>true</code>, the code inside of that if ( or else if ) block is executed. Then the control jumps out of the if...else if block.</p> <p>If none of the expression is\u00a0<code>true</code>, the code inside the else block is executed.</p> <p>Alternatively, we can use\u00a0switch statement\u00a0in such condition.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-3-c-ifelse-if-statement","title":"Example 3: C# if...else if Statement","text":"<pre><code>using System;\nnamespace Conditional\n{\nclass IfElseIfStatement\n{\npublic static void Main(string[] args)\n{\nint number = 12;\nif (number &lt; 5)\n{\nConsole.WriteLine(\"{0} is less than 5\", number);\n}\nelse if (number &gt; 5)\n{\nConsole.WriteLine(\"{0} is greater than 5\", number);\n}\nelse\n{\nConsole.WriteLine(\"{0} is equal to 5\");\n}\n}\n}\n}\n</code></pre> <p>When we run the program, the output will be:</p> <pre><code>12 is greater than 5\n</code></pre> <p>The value of number is initialized to\u00a0<code>12</code>. The first test expression\u00a0<code>number &lt; 5</code>\u00a0is\u00a0<code>false</code>, so the control will move to the else if block. The test expression\u00a0<code>number &gt; 5</code>\u00a0is\u00a0<code>true</code>\u00a0hence the block of code inside else if will be executed.</p> <p>Similarly, we can change the value of\u00a0<code>number</code>\u00a0to alter the flow of execution.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#nested-ifelse-statement","title":"Nested if...else Statement","text":"<p>An if...else statement can exist within another <code>if...else</code> statement. Such statements are called nested <code>if...else</code> statement.</p> <p>The general structure of nested <code>if...else</code> statement is:</p> <pre><code>if (boolean-expression){\nif (nested-expression-1){\n// code to be executed\n}else{\n// code to be executed\n}\n}else{\nif (nested-expression-2){\n// code to be executed\n}else{\n// code to be executed\n}\n}\n</code></pre> <p>Nested if statements are generally used when we have to test one condition followed by another. In a nested if statement, if the outer if statement returns true, it enters the body to check the inner if statement.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-4-nested-ifelse-statement","title":"Example 4: Nested if...else Statement","text":"<p>The following program computes the largest number among 3 numbers using nested if...else statement.</p> <pre><code>using System;\nnamespace Conditional{\nclass Nested{\npublic static void Main(string[] args){\nint first = 7, second = -23, third = 13;\nif (first &gt; second){\nif (firstNumber &gt; third){\nConsole.WriteLine(\"{0} is the largest\", first);\n}else{\nConsole.WriteLine(\"{0} is the largest\", third);\n}\n}else{\nif (second &gt; third){\nConsole.WriteLine(\"{0} is the largest\", second);\n}else{\nConsole.WriteLine(\"{0} is the largest\", third);\n}\n}\n}\n}\n}\n</code></pre> <p>When we run the program, the output will be:</p> <pre><code>13 is the largest\n</code></pre>"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-switch-statement","title":"C# switch Statement","text":"<p>In this article, we will learn about switch statement in C# and how to use them with examples.</p> <p>Switch statement can be used to replace the\u00a0if...else if statement\u00a0in C#. The advantage of using switch over if...else if statement is the codes will look much cleaner and readable with switch.</p> <p>The syntax of switch statement is:</p> <pre><code>switch (variable/expression)\n{\ncase value1:\n// Statements executed if expression(or variable) = value1\nbreak;\ncase value2:\n// Statements executed if expression(or variable) = value1\nbreak;\n... ... ... ... ... ... default:\n// Statements executed if no case matches\n}\n</code></pre> <p>The switch statement evaluates the\u00a0expression\u00a0(or\u00a0variable) and compare its value with the values (or expression) of each case (value1,\u00a0value2, \u2026). When it finds the matching value, the statements inside that case are executed.</p> <p>But, if none of the above cases matches the expression, the statements inside\u00a0<code>default</code>\u00a0block is executed. The default statement at the end of switch is similar to the else block in if else statement.</p> <p>However a problem with the switch statement is, when the matching value is found, it executes all statements after it until the end of switch block.</p> <p>To avoid this, we use\u00a0<code>break</code>\u00a0statement at the end of each case. The break statement stops the program from executing non-matching statements by terminating the execution of switch statement.</p> <p>To learn more about break statement, visit\u00a0C# break statement.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-1-c-switch-statement","title":"Example 1: C# switch Statement","text":"<pre><code>using System;\nnamespace Conditional\n{\nclass SwitchCase\n{\npublic static void Main(string[] args)\n{\nchar ch;\nConsole.WriteLine(\"Enter an alphabet\");\nch = Convert.ToChar(Console.ReadLine());\nswitch(Char.ToLower(ch))\n{\ncase 'a':\nConsole.WriteLine(\"Vowel\");\nbreak;\ncase 'e':\nConsole.WriteLine(\"Vowel\");\nbreak;\ncase 'i':\nConsole.WriteLine(\"Vowel\");\nbreak;\ncase 'o':\nConsole.WriteLine(\"Vowel\");\nbreak;\ncase 'u':\nConsole.WriteLine(\"Vowel\");\nbreak;\ndefault:\nConsole.WriteLine(\"Not a vowel\");\nbreak;\n}\n}\n}\n}\n</code></pre> <p>When we run the program, the output will be:</p> <pre><code>Enter an alphabet\nX\nNot a vowel\n</code></pre> <p>In this example, the user is prompted to enter an alphabet. The alphabet is converted to lowercase by using\u00a0<code>ToLower()</code>\u00a0method if it is in uppercase.</p> <p>Then, the switch statement checks whether the alphabet entered by user is any of\u00a0<code>a, e, i, o or u</code>.</p> <p>If one of the case matches,\u00a0<code>Vowel</code>\u00a0is printed otherwise the control goes to default block and\u00a0<code>Not a vowel</code>\u00a0is printed as output.</p> <p>Since, the output for all vowels are the same, we can join the cases as:</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-2-c-switch-statement-with-grouped-cases","title":"Example 2: C# switch Statement with grouped cases","text":"<pre><code>using System;\nnamespace Conditional\n{\nclass SwitchCase\n{\npublic static void Main(string[] args)\n{\nchar ch;\nConsole.WriteLine(\"Enter an alphabet\");\nch = Convert.ToChar(Console.ReadLine());\nswitch(Char.ToLower(ch))\n{\ncase 'a':\ncase 'e':\ncase 'i':\ncase 'o':\ncase 'u':\nConsole.WriteLine(\"Vowel\");\nbreak;\ndefault:\nConsole.WriteLine(\"Not a vowel\");\nbreak;\n}\n}\n}\n}\n</code></pre> <p>The output of both programs is same. In the above program, all vowels print the output\u00a0<code>Vowel</code>\u00a0and breaks from the switch statement.</p> <p>Although switch statement makes the code look cleaner than if...else if statement, switch is restricted to work with limited data types. Switch statement in C# only works with:</p> <ul> <li>Primitive data types: bool, char and integral type</li> <li>Enumerated Types (Enum)</li> <li>String Class</li> <li>Nullable types of above data types</li> </ul>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-3-simple-calculator-program-using-c-switch-statement","title":"Example 3: Simple calculator program using C# switch Statement","text":"<pre><code>using System;\nnamespace Conditional\n{\nclass SwitchCase\n{\npublic static void Main(string[] args)\n{\nchar op;\ndouble first, second, result;\nConsole.Write(\"Enter first number: \");\nfirst = Convert.ToDouble(Console.ReadLine());\nConsole.Write(\"Enter second number: \");\nsecond = Convert.ToDouble(Console.ReadLine());\nConsole.Write(\"Enter operator (+, -, *, /): \");\nop = (char)Console.Read();\nswitch(op)\n{\ncase '+':\nresult = first + second;\nConsole.WriteLine(\"{0} + {1} = {2}\", first, second, result);\nbreak;\ncase '-':\nresult = first - second;\nConsole.WriteLine(\"{0} - {1} = {2}\", first, second, result);\nbreak;\ncase '*':\nresult = first * second;\nConsole.WriteLine(\"{0} * {1} = {2}\", first, second, result);\nbreak;\ncase '/':\nresult = first / second;\nConsole.WriteLine(\"{0} / {1} = {2}\", first, second, result);\nbreak;\ndefault:\nConsole.WriteLine(\"Invalid Operator\");\nbreak;\n}\n}\n}\n}\n</code></pre> <p>When we run the program, the output will be:</p> <pre><code>Enter first number: -13.11\nEnter second number: 2.41\nEnter operator (+, -, *, /): *\n-13.11 * 2.41 = -31.5951\n</code></pre> <p>The above program takes two operands and an operator as input from the user and performs the operation based on the operator.</p> <p>The inputs are taken from the user using the\u00a0<code>ReadLine()</code>\u00a0and\u00a0<code>Read()</code>\u00a0method. To learn more, visit\u00a0C# Basic Input and Output.</p> <p>The program uses switch case statement for decision making. Alternatively, we can use if-else if ladder to perform the same operation.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-ternary-operator","title":"C# ternary (? :) Operator","text":"<p>In this article, we will learn about C# ternary operator and how to use it to control the flow of program.</p> <p>Ternary\u00a0operator\u00a0are a substitute for if...else statement. So before you move any further in this tutorial, go through\u00a0C# if...else statement\u00a0(if you haven't).</p> <p>The syntax of ternary operator is:</p> <pre><code>Condition ? Expression1 : Expression2;\n</code></pre> <p>The ternary operator works as follows:</p> <ul> <li>If the expression stated by\u00a0<code>Condition</code>\u00a0is\u00a0<code>true</code>, the result of\u00a0<code>Expression1</code>\u00a0is returned by the ternary operator.</li> <li>If it is\u00a0<code>false</code>, the result of\u00a0<code>Expression2</code>\u00a0is returned.</li> </ul> <p>For example, we can replace the following code</p> <pre><code>if (number % 2 == 0){\nisEven = true;\n}else{\nisEven = false;\n}\n</code></pre> <p>with</p> <pre><code>isEven = (number % 2 == 0) ? true : false ;\n</code></pre> <p>Why is it called ternary operator?</p> <p>This operator takes 3\u00a0operand, hence called ternary operator.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-1-c-ternary-operator","title":"Example 1: C# Ternary Operator","text":"<pre><code>using System;\nnamespace Conditional\n{\nclass Ternary\n{\npublic static void Main(string[] args)\n{\nint number = 2;\nbool isEven;\nisEven = (number % 2 == 0) ? true : false ;  Console.WriteLine(isEven);\n}\n}\n}\n</code></pre> <p>When we run the program, the output will be:</p> <pre><code>True\n</code></pre> <p>In the above program,\u00a0<code>2</code>\u00a0is assigned to a variable\u00a0number. Then, the ternary operator is used to check if\u00a0number\u00a0is even or not.</p> <p>Since, 2 is even, the expression (<code>number % 2 == 0</code>) returns\u00a0<code>true</code>. We can also use ternary operator to return numbers, strings and characters.</p> <p>Instead of storing the return value in variable\u00a0isEven, we can directly print the value returned by ternary operator as,</p> <pre><code>Console.WriteLine((number % 2 == 0) ? true : false);\n</code></pre>"},{"location":"week-7-csharp/ce103-week-7-csharp/#when-to-use-ternary-operator","title":"When to use ternary operator?","text":"<p>Ternary operator can be used to replace multi lines of code with a single line. However, we shouldn't overuse it.</p> <p>For example, we can replace the following if..else if code</p> <pre><code>if (a &gt; b){\nresult = \"a is greater than b\";\n}else if (a &lt; b){\nresult = \"b is greater than a\";\n}else{\nresult = \"a is equal to b\";\n}\n</code></pre> <p>with a single line of code</p> <pre><code>result = a &gt; b ? \"a is greater than b\" : a &lt; b ? \"b is greater than a\" : \"a is equal to b\";\n</code></pre> <p>As we can see, the use of ternary operator may decrease the length of code but it makes us difficult to understand the logic of the code.</p> <p>Hence, it's better to only use ternary operator to replace simple if else statement</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-for-loop","title":"C# for loop","text":"<p>In this article, we will learn about for loop in C# and different ways to use them in a program.</p> <p>In programming, it is often desired to execute certain block of statements for a specified number of times. A possible solution will be to type those statements for the required number of times. However, the number of repetition may not be known in advance (during compile time) or maybe large enough (say 10000).</p> <p>The best solution to such problem is loop. Loops are used in programming to repeatedly execute a certain block of statements until some condition is met.</p> <p>In this article, we\u2019ll look at for loop in C#.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-for-loop_1","title":"C# for loop","text":"<p>The\u00a0for\u00a0keyword is used to create for loop in C#. The syntax for\u00a0for loop\u00a0is:</p> <pre><code>for (initialization; condition; iterator)\n{\n// body of for loop\n}\n</code></pre>"},{"location":"week-7-csharp/ce103-week-7-csharp/#how-for-loop-works","title":"How for loop works?","text":"<ol> <li>C# for loop has three statements:\u00a0<code>initialization</code>,\u00a0<code>condition</code>\u00a0and\u00a0<code>iterator</code>.</li> </ol> <ol> <li>The\u00a0<code>initialization</code>\u00a0statement is executed at first and only once. Here, the variable is usually declared and initialized.</li> </ol> <ol> <li>Then, the\u00a0<code>condition</code>\u00a0is evaluated. The\u00a0<code>condition</code>\u00a0is a boolean expression, i.e. it returns either\u00a0<code>true</code>\u00a0or\u00a0<code>false</code>.</li> </ol> <ol> <li>If the\u00a0<code>condition</code>\u00a0is evaluated to\u00a0<code>true</code>:</li> <li>The statements inside the for loop are executed.</li> <li>Then, the\u00a0<code>iterator</code>\u00a0statement is executed which usually changes the value of the initialized variable.</li> <li>Again the\u00a0<code>condition</code>\u00a0is evaluated.</li> <li>The process continues until the\u00a0<code>condition</code>\u00a0is evaluated to\u00a0<code>false</code>.</li> </ol> <ol> <li>If the\u00a0<code>condition</code>\u00a0is evaluated to\u00a0<code>false</code>, the for loop terminates.</li> </ol>"},{"location":"week-7-csharp/ce103-week-7-csharp/#for-loop-flowchart","title":"for Loop Flowchart","text":"<p>Working of C# for loop</p> <p></p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-1-c-for-loop","title":"Example 1: C# for Loop","text":"<pre><code>using System;\nnamespace Loop\n{\nclass ForLoop\n{\npublic static void Main(string[] args)\n{\nfor (int i=1; i&lt;=5; i++)\n{\nConsole.WriteLine(\"C# For Loop: Iteration {0}\", i);\n}\n}\n}    }\n</code></pre> <p>When we run the program, the output will be:</p> <pre><code>C# For Loop: Iteration 1\nC# For Loop: Iteration 2\nC# For Loop: Iteration 3\nC# For Loop: Iteration 4\nC# For Loop: Iteration 5\n</code></pre> <p>In this program,</p> <ul> <li><code>initialization</code>\u00a0statement is\u00a0<code>int i=1</code></li> <li><code>condition</code>\u00a0statement is\u00a0<code>i&lt;=5</code></li> <li><code>iterator</code>\u00a0statement is\u00a0<code>i++</code></li> </ul> <p>When the program runs,</p> <ul> <li>First, the variable\u00a0i\u00a0is declared and initialized to 1.</li> </ul> <ul> <li>Then, the condition (<code>i&lt;=5</code>) is evaluated.</li> </ul> <ul> <li>Since, the condition returns\u00a0<code>true</code>, the program then executes the body of the for loop. It prints the given line with Iteration 1 (Iteration simply means repetition).</li> </ul> <ul> <li>Now, the iterator (<code>i++</code>) is evaluated. This increments the value of\u00a0i\u00a0to 2.</li> </ul> <ul> <li>The condition (<code>i&lt;=5</code>) is evaluated again and at the end, the value of\u00a0i\u00a0is incremented by 1. The condition will evaluate to\u00a0<code>true</code>\u00a0for the first 5 times.</li> </ul> <ul> <li>When the value of\u00a0i\u00a0will be 6 and the condition will be\u00a0<code>false</code>, hence the loop will terminate.</li> </ul>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-2-for-loop-to-compute-sum-of-first-n-natural-numbers","title":"Example 2: for loop to compute sum of first n natural numbers","text":"<pre><code>using System;\nnamespace Loop\n{\nclass ForLoop\n{\npublic static void Main(string[] args)\n{\nint n = 5,sum = 0;\nfor (int i=1; i&lt;=n; i++)\n{\n// sum = sum + i;\nsum += i;\n}\nConsole.WriteLine(\"Sum of first {0} natural numbers = {1}\", n, sum);\n}\n}\n}\n</code></pre> <p>When we run the program, the output will be:</p> <pre><code>Sum of first 5 natural numbers = 15\n</code></pre> <p>Here, the value of\u00a0sum\u00a0and\u00a0n\u00a0are initialized to 0 and 5 respectively. The iteration variable\u00a0i\u00a0is initialized to 1 and incremented on each iteration.</p> <p>Inside the for loop, value of\u00a0sum\u00a0is incremented by\u00a0i\u00a0i.e.\u00a0<code>sum = sum + i</code>. The for loop continues until\u00a0i\u00a0is less than or equal to\u00a0n\u00a0(user's input).</p> <p>Let's see what happens in the given program on each iteration.</p> <p>Initially,\u00a0i\u00a0= 1,\u00a0sum\u00a0= 0 and\u00a0n\u00a0= 3</p> For loop execution steps Iteration Value of i i&lt;=5 Value of sum 1 1 true 0+1 = 1 --- 2 2 true 1+2 = 3 --- 3 3 true 3+3 = 6 --- 4 4 true 6+4 = 10 --- 5 5 true 10+5 = 15 --- 6 6 false Loop terminates --- <p>So, the final value of sum will be 15 when n = 5.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#multiple-expressions-inside-a-for-loop","title":"Multiple expressions inside a for loop","text":"<p>We can also use multiple expressions inside a for loop. It means we can have more than one initialization and/or iterator statements within a for loop. Let's see the example below.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-3-for-loop-with-multiple-initialization-and-iterator-expressions","title":"Example 3: for loop with multiple initialization and iterator expressions","text":"<pre><code>using System;\nnamespace Loop\n{\nclass ForLoop\n{\npublic static void Main(string[] args)\n{\nfor (int i=0, j=0; i+j&lt;=5; i++, j++)\n{\nConsole.WriteLine(\"i = {0} and j = {1}\", i,j);\n}         }\n}\n}\n</code></pre> <p>When we run the program, the output will be:</p> <pre><code>i = 0 and j = 0\ni = 1 and j = 1\ni = 2 and j = 2\n</code></pre> <p>In this program, we have declared and initialized two variables:\u00a0i\u00a0and\u00a0j\u00a0in the initialization statement.</p> <p>Also, we have two expressions in the iterator part. That means both\u00a0i\u00a0and\u00a0j\u00a0are incremented by 1 on each iteration.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#for-loop-without-initialization-and-iterator-statements","title":"For loop without initialization and iterator statements","text":"<p>The initialization, condition and the iterator statement are optional in a for loop. It means we can run a for loop without these statements as well.</p> <p>In such cases, for loop acts as a\u00a0while loop. Let's see the example below.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-4-for-loop-without-initialization-and-iterator-statement","title":"Example 4: for loop without initialization and iterator statement","text":"<pre><code>using System;\nnamespace Loop\n{\nclass ForLoop\n{\npublic static void Main(string[] args)\n{\nint i = 1;\nfor ( ; i&lt;=5; )\n{\nConsole.WriteLine(\"C# For Loop: Iteration {0}\", i);\ni++;\n}\n}\n}\n}\n</code></pre> <p>When we run the program, the output will be:</p> <pre><code>C# For Loop: Iteration 1\nC# For Loop: Iteration 2\nC# For Loop: Iteration 3\nC# For Loop: Iteration 4\nC# For Loop: Iteration 5\n</code></pre> <p>In this example, we haven't used the initialization and iterator statement.</p> <p>The variable\u00a0i\u00a0is initialized above the for loop and its value is incremented inside the body of loop. This program is same as the one in Example 1.</p> <p>Similarly, the condition is also an optional statement. However if we don't use test expression, the for loop won't test any condition and will run forever (infinite loop).</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#infinite-for-loop","title":"Infinite for loop","text":"<p>If the condition in a for loop is always true, for loop will run forever. This is called infinite for loop.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-5-infinite-for-loop","title":"Example 5: Infinite for loop","text":"<pre><code>using System;\nnamespace Loop\n{\nclass ForLoop\n{\npublic static void Main(string[] args)\n{\nfor (int i=1 ; i&gt;0; i++)\n{\nConsole.WriteLine(\"C# For Loop: Iteration {0}\", i);\n}\n}\n}\n}\n</code></pre> <p>Here,\u00a0i\u00a0is initialized to 1 and the condition is\u00a0<code>i&gt;0</code>. On each iteration we are incrementing the value of\u00a0i\u00a0by 1, so the condition will never be\u00a0<code>false</code>. This will cause the loop to execute infinitely.</p> <p>We can also create an infinite loop by replacing the condition with a blank. For example,</p> <pre><code>for ( ; ; )\n{\n// body of for loop\n}\n</code></pre> <p>or</p> <pre><code>for (initialization ; ; iterator){\n// body of for loop\n}\n</code></pre>"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-while-and-dowhile-loop","title":"C# while and do...while loop","text":"<p>In this article, we will learn about while and do...while loop in C#, how to use them and difference between them.</p> <p>In programming, it is often desired to execute certain block of statements for a specified number of times. A possible solution will be to type those statements for the required number of times. However, the number of repetition may not be known in advance (during compile time) or maybe large enough (say 10000).</p> <p>The best solution to such problem is loop. Loops are used in programming to repeatedly execute a certain block of statements until some condition is met.</p> <p>In this article, we'll learn to use while loops in C#.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-while-loop","title":"C# while loop","text":"<p>The\u00a0while\u00a0keyword is used to create while loop in C#. The syntax for while loop is:</p> <pre><code>while (test-expression){\n// body of while\n}\n</code></pre>"},{"location":"week-7-csharp/ce103-week-7-csharp/#how-while-loop-works","title":"How while loop works?","text":"<ol> <li>C# while loop consists of a\u00a0<code>test-expression</code>.</li> <li>If the\u00a0<code>test-expression</code>\u00a0is evaluated to\u00a0<code>true</code>,</li> <li>statements inside the while loop are executed.</li> <li>after execution, the\u00a0<code>test-expression</code>\u00a0is evaluated again.</li> <li>If the\u00a0<code>test-expression</code>\u00a0is evaluated to\u00a0<code>false</code>, the while loop terminates.</li> </ol>"},{"location":"week-7-csharp/ce103-week-7-csharp/#while-loop-flowchart","title":"while loop Flowchart","text":""},{"location":"week-7-csharp/ce103-week-7-csharp/#example-1-while-loop","title":"Example 1: while Loop","text":"<pre><code>using System;\nnamespace Loop\n{\nclass WhileLoop\n{\npublic static void Main(string[] args)\n{\nint i=1;\nwhile (i&lt;=5)\n{\nConsole.WriteLine(\"C# For Loop: Iteration {0}\", i);\ni++;\n}\n}\n}\n}\n</code></pre> <p>When we run the program, the output will be:</p> <pre><code>C# For Loop: Iteration 1\nC# For Loop: Iteration 2\nC# For Loop: Iteration 3\nC# For Loop: Iteration 4\nC# For Loop: Iteration 5\n</code></pre> <p>Initially the value of\u00a0i\u00a0is 1.</p> <p>When the program reaches the while loop statement,</p> <ul> <li>the test expression\u00a0<code>i &lt;=5</code>\u00a0is evaluated. Since\u00a0i\u00a0is 1 and\u00a0<code>1 &lt;= 5</code>\u00a0is\u00a0<code>true</code>, it executes the body of the while loop. Here, the line is printed on the screen with Iteration 1, and the value of\u00a0i\u00a0is increased by 1 to become 2.</li> <li>Now, the test expression (<code>i &lt;=5</code>) is evaluated again. This time too, the expression returns\u00a0<code>true</code>\u00a0(2 &lt;= 5), so the line is printed on the screen and the value of\u00a0i\u00a0is now incremented to 3..</li> <li>This goes and the while loop executes until\u00a0i\u00a0becomes 6. At this point, the test-expression will evaluate to\u00a0<code>false</code>\u00a0and hence the loop terminates.</li> </ul>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-2-while-loop-to-compute-sum-of-first-5-natural-numbers","title":"Example 2: while loop to compute sum of first 5 natural numbers","text":"<pre><code>using System;\nnamespace Loop\n{\nclass WhileLoop\n{\npublic static void Main(string[] args)\n{\nint i=1, sum=0;\nwhile (i&lt;=5)\n{\nsum += i;\ni++;\n}\nConsole.WriteLine(\"Sum = {0}\", sum);\n}\n}\n}\n</code></pre> <p>When we run the program, the output will be:</p> <pre><code>Sum = 15\n</code></pre> <p>This program computes the sum of first 5 natural numbers.</p> <ul> <li>Initially the value of\u00a0sum\u00a0is initialized to 0.</li> <li>On each iteration, the value of\u00a0sum\u00a0is updated to\u00a0<code>sum+i</code>\u00a0and the value of\u00a0i\u00a0is incremented by 1.</li> <li>When the value of\u00a0i\u00a0reaches 6, the test expression\u00a0<code>i&lt;=5</code>\u00a0will return false and the loop terminates.</li> </ul> <p>Let's see what happens in the given program on each iteration.</p> <p>Initially,\u00a0i\u00a0= 1,\u00a0sum\u00a0= 0, While loop execution steps</p> For loop execution steps Iteration Value of i i&lt;=5 Value of sum 1 1 true 0+1 = 1 --- 2 2 true 1+2 = 3 --- 3 3 true 3+3 = 6 --- 4 4 true 6+4 = 10 --- 5 5 true 10+5 = 15 --- 6 6 false Loop terminates --- <p>So, the final value of\u00a0sum\u00a0will be 15.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-dowhile-loop","title":"C# do...while loop","text":"<p>The\u00a0do\u00a0and\u00a0while\u00a0keyword is used to create a do...while loop. It is similar to a while loop, however there is a major difference between them.</p> <p>In while loop, the condition is checked before the body is executed. It is the exact opposite in do...while loop, i.e. condition is checked after the body is executed.</p> <p>This is why, the body of do...while loop will execute at least once irrespective to the test-expression.</p> <p>The syntax for do...while loop is:</p> <pre><code>do\n{\n// body of do while loop\n} while (test-expression);\n</code></pre>"},{"location":"week-7-csharp/ce103-week-7-csharp/#how-dowhile-loop-works","title":"How do...while loop works?","text":"<ol> <li>The body of do...while loop is executed at first.</li> <li>Then the\u00a0<code>test-expression</code>\u00a0is evaluated.</li> <li>If the\u00a0<code>test-expression</code>\u00a0is\u00a0<code>true</code>, the body of loop is executed.</li> <li>When the\u00a0<code>test-expression</code>\u00a0is\u00a0<code>false</code>, do...while loop terminates.</li> </ol>"},{"location":"week-7-csharp/ce103-week-7-csharp/#dowhile-loop-flowchart","title":"do...while loop Flowchart","text":""},{"location":"week-7-csharp/ce103-week-7-csharp/#example-3-dowhile-loop","title":"Example 3: do...while loop","text":"<pre><code>using System;\nnamespace Loop\n{\nclass DoWhileLoop\n{\npublic static void Main(string[] args)\n{\nint i = 1, n = 5, product;\ndo\n{\nproduct = n * i;\nConsole.WriteLine(\"{0} * {1} = {2}\", n, i, product);\ni++;\n} while (i &lt;= 10);\n}\n}\n}\n</code></pre> <p>When we run the program, the output will be:</p> <pre><code>5 * 1 = 5\n5 * 2 = 10\n5 * 3 = 15\n5 * 4 = 20\n5 * 5 = 25\n5 * 6 = 30\n5 * 7 = 35\n5 * 8 = 40\n5 * 9 = 45\n5 * 10 = 50\n</code></pre> <p>As we can see, the above program prints the multiplication table of a number (5).</p> <ul> <li>Initially, the value of\u00a0i\u00a0is 1. The program, then enters the body of do..while loop without checking any condition (as opposed to while loop).</li> <li>Inside the body,\u00a0product\u00a0is calculated and printed on the screen. The value of\u00a0i\u00a0is then incremented to 2.</li> <li>After the execution of the loop\u2019s body, the test expression\u00a0<code>i &lt;= 10</code>\u00a0is evaluated. In total, the do...while loop will run for 10 times.</li> <li>Finally, when the value of\u00a0i\u00a0is 11, the test-expression evaluates to\u00a0<code>false</code>\u00a0and hence terminates the loop.</li> </ul>"},{"location":"week-7-csharp/ce103-week-7-csharp/#infinite-while-and-dowhile-loop","title":"Infinite while and do...while loop","text":"<p>If the test expression in the while and do...while loop never evaluates to\u00a0<code>false</code>, the body of loop will run forever. Such loops are called infinite loop.</p> <p>For example:</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#infinite-while-loop","title":"Infinite while loop","text":"<pre><code>while (true)\n{\n// body of while loop\n}\n</code></pre>"},{"location":"week-7-csharp/ce103-week-7-csharp/#infinite-dowhile-loop","title":"Infinite do...while loop","text":"<pre><code>do\n{\n// body of while loop\n} while (true);\n</code></pre> <p>The infinite loop is useful when we need a loop to run as long as our program runs.</p> <p>For example, if your program is an animation, you will need to constantly run it until it is stopped. In such cases, an infinite loop is necessary to keep running the animation repeatedly.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#nested-loops-in-c-for-while-do-while","title":"Nested Loops in C#: for, while, do-while","text":"<p>In this article, we will learn about nested loops in C#. We'll learn to use nested for, while and do-while loops in a program.</p> <p>A loop within another loop is called nested loop. This is how a nested loop looks like:</p> <pre><code>Outer-Loop {\n// body of outer-loop\nInner-Loop\n{\n// body of inner-loop\n}\n... ... ...\n}\n</code></pre> <p>As you can see, the\u00a0outer loop\u00a0encloses the\u00a0inner loop. The inner loop is a part of the outer loop and must start and finish within the body of outer loop.</p> <p>On each iteration of outer loop, the inner loop is executed completely.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#nested-for-loop","title":"Nested for loop","text":"<p>A for loop inside another for loop is called nested for loop.</p> <p>For example:</p> <pre><code>for (int i=0; i&lt;5; i++)\n{\n// body of outer for loop\nfor (int j=0; j&lt;5; j++)\n{\n// body of inner for loop\n}\n// body of outer for loop\n}\n</code></pre>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-1-nested-for-loop","title":"Example 1: Nested for Loop","text":"<pre><code>using System;\nnamespace Loop\n{\nclass NestedForLoop\n{\npublic static void Main(string[] args)\n{\nint outerLoop = 0, innerLoop = 0;\nfor (int i=1; i&lt;=5; i++)\n{\nouterLoop ++;\nfor (int j=1; j&lt;=5; j++)\n{\ninnerLoop++;\n}\n}\nConsole.WriteLine(\"Outer Loop runs {0} times\", outerLoop);\nConsole.WriteLine(\"Inner Loop runs {0} times\", innerLoop);\n}\n}\n}\n</code></pre> <p>When we run the program, the output will be:</p> <pre><code>Outer Loop runs 5 times\nInner Loop runs 25 times\n</code></pre> <p>In this program, the outer loop runs for 5 times. Each time the outer loop runs, the inner loop runs for 5 times making it run 25 times altogether.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-2-nested-for-loop-to-print-pattern","title":"Example 2: Nested for Loop to Print Pattern","text":"<pre><code>using System;\nnamespace Loop{\nclass NestedForLoop{\npublic static void Main(string[] args){\nfor (int i=1; i&lt;=5; i++){\nfor (int j=1; j&lt;=i; j++){\nConsole.Write(j + \" \");\n}\nConsole.WriteLine();\n}\n}\n}\n}\n</code></pre> <p>When we run the program, the output will be:</p> <pre><code>1\n1 2\n1 2 3\n1 2 3 4\n1 2 3 4 5\n</code></pre>"},{"location":"week-7-csharp/ce103-week-7-csharp/#nested-while-loop","title":"Nested while loop","text":"<p>A while loop inside another while loop is called nested while loop.</p> <p>For example:</p> <pre><code>while (condition-1)\n{\n// body of outer while loop\nwhile (condition-2)\n{\n// body of inner while loop\n}\n// body of outer while loop\n}\n</code></pre>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-3-nested-while-loop","title":"Example 3: Nested while Loop","text":"<pre><code>using System;\nnamespace Loop\n{\nclass NestedWhileLoop\n{\npublic static void Main(string[] args)\n{\nint i=0;\nwhile (i&lt;2)\n{\nint j=0;\nwhile (j&lt;2)\n{\nConsole.Write(\"({0},{1}) \", i,j);\nj++;\n}\ni++;\nConsole.WriteLine();\n}\n}\n}\n}\n</code></pre> <p>When we run the program, the output will be:</p> <pre><code>(0,0) (0,1)\n(1,0) (1,1)\n</code></pre>"},{"location":"week-7-csharp/ce103-week-7-csharp/#nested-do-while-loop","title":"Nested do-while loop","text":"<p>A do-while loop inside another do-while loop is called nested do-while loop.</p> <p>For example:</p> <pre><code>do\n{\n// body of outer while loop\ndo\n{\n// body of inner while loop\n} while (condition-2);\n// body of outer while loop\n} while (condition-1);\n</code></pre>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-4-nested-do-while-loop","title":"Example 4: Nested do-while Loop","text":"<pre><code>using System;\nnamespace Loop\n{\nclass NestedWhileLoop\n{\npublic static void Main(string[] args)\n{\nint i=0;\ndo\n{\nint j=0;\ndo\n{\nConsole.Write(\"({0},{1}) \", i,j);\nj++;\n} while (j&lt;2);\ni++;\nConsole.WriteLine();\n} while (i&lt;2);\n}\n}\n}\n</code></pre> <p>When we run the program, the output will be:</p> <pre><code>(0,0) (0,1)\n(1,0) (1,1)\n</code></pre>"},{"location":"week-7-csharp/ce103-week-7-csharp/#different-inner-and-outer-nested-loops","title":"Different inner and outer nested loops","text":"<p>It is not mandatory to nest same type of loop. We can put a for loop inside a while loop or a do-while loop inside a for loop.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-5-c-nested-loop-different-inner-and-outer-loops","title":"Example 5: C# Nested Loop: Different inner and outer loops","text":"<pre><code>using System;\nnamespace Loop\n{\nclass NestedLoop\n{\npublic static void Main(string[] args)\n{\nint i=1;\nwhile (i&lt;=5)\n{\nfor (int j=1; j&lt;=i; j++)\n{\nConsole.Write(i + \" \");\n}\nConsole.WriteLine();\ni++;\n}\n}\n}\n}\n</code></pre> <p>When we run the program, the output will be:</p> <pre><code>1\n2 2\n3 3 3\n4 4 4 4\n5 5 5 5 5\n</code></pre> <p>In the above program, a for loop is placed within a while loop. We can use different types of loop inside a loop.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-break-statement","title":"C# break Statement","text":"<p>In this tutorial, you will learn about the working C# break statement with the help of examples.</p> <p>In C#, we use the break statement to terminate the loop.</p> <p>As we know, loops iterate over a block of code until the test expression is false. However, sometimes we may need to terminate the loop immediately without checking the test expression.</p> <p>In such cases, the break statement is used. The syntax of break statement is,</p> <pre><code>break;\n</code></pre> <p>Before we learn about\u00a0<code>break</code>, make sure to learn about</p> <ul> <li>for loop</li> <li>if...else</li> <li>while loop</li> </ul>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-c-break-statement-with-for-loop","title":"Example: C# break statement with for loop","text":"<pre><code>using System;\nnamespace CSharpBreak {\nclass Program {\nstatic void Main(string[] args) {\nfor (int i = 1; i &lt;= 4; ++i) {\n// terminates the loop\nif (i == 3) {\nbreak; }\nConsole.WriteLine(i);\n}\nConsole.ReadLine();\n}\n}\n}\n</code></pre> <p>Output</p> <pre><code>1\n2\n</code></pre> <p>In the above program, our\u00a0<code>for</code>\u00a0loop runs\u00a04\u00a0times from\u00a0<code>i = 1</code>\u00a0to\u00a04. However, when\u00a0<code>i</code>\u00a0is equal to\u00a03, the break statement is encountered.</p> <pre><code>if (i == 3) {\nbreak;\n}\n</code></pre> <p>Now, the loop is terminated suddenly. So, we only get\u00a01\u00a0and\u00a02\u00a0as output.</p> <p>Note: The break statement is used with decision-making statements like if..else.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-c-break-statement-with-while-loop","title":"Example: C# break statement with while loop","text":"<pre><code>using System;\nnamespace WhileBreak {\nclass Program {\nstatic void Main(string[] args) {\nint i = 1;\nwhile (i &lt;= 5) {\nConsole.WriteLine(i);\ni++;\nif (i == 4) {\n// terminates the loop\nbreak; }\n}\nConsole.ReadLine();\n}\n}\n}\n</code></pre> <p>Output</p> <pre><code>1\n2\n3\n</code></pre> <p>In the above example, we have created a\u00a0<code>while</code>\u00a0loop that is supposed to run from\u00a0<code>i = 1 to 5</code>.</p> <p>However, when\u00a0<code>i</code>\u00a0is equal to\u00a04, the\u00a0<code>break</code>\u00a0statement is encountered.</p> <pre><code>if (i == 4) {\nbreak;\n}\n</code></pre> <p>Now, the while loop is terminated.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#working-of-break-statement-in-c","title":"Working of break statement in C","text":""},{"location":"week-7-csharp/ce103-week-7-csharp/#break-statement-with-nested-loop","title":"break Statement with Nested Loop","text":"<p>We can also use the\u00a0<code>break</code>\u00a0statement with nested loops. For example,</p> <pre><code>using System;\nnamespace NestedBreak {\nclass Program {\nstatic void Main(string[] args) {\nint sum = 0;\nfor(int i = 1; i &lt;= 3; i++) { //outer loop\n// inner loop\nfor(int j = 1; j &lt;= 3; j++) { if (i == 2) {\nbreak;\n}\nConsole.WriteLine(\"i = \" + i + \" j = \" +j);\n}\n}\nConsole.ReadLine();\n}\n}\n}\n</code></pre> <p>Output</p> <pre><code>i = 1 j = 1\ni = 1 j = 2\ni = 1 j = 3\ni = 3 j = 1\ni = 3 j = 2\ni = 3 j = 3\n</code></pre> <p>In the above example, we have used the break statement inside the inner\u00a0<code>for</code>\u00a0loop. Here, the break statement is executed when\u00a0<code>i == 2</code>.</p> <p>Hence, the value of\u00a0<code>i = 2</code>\u00a0is never printed.</p> <p>Note: The break statement only terminates the inner\u00a0<code>for</code>\u00a0loop. This is because we have used the\u00a0<code>break</code>\u00a0statement inside the inner loop.</p> <p>If you want to learn the working of nested loops, visit\u00a0C# Nested Loops.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#break-with-foreach-loop","title":"break with foreach Loop","text":"<p>We can also use the\u00a0<code>break</code>\u00a0statement with foreach loops. For example,</p> <pre><code>using System;\nnamespace ForEachBreak {\nclass Program {\nstatic void Main(string[] args) {\nint[] num = { 1, 2, 3, 4, 5 };\n// use of for each loop\nforeach(int number in num) {\n// terminates the loop\nif(number==3) {\nbreak; }\nConsole.WriteLine(number);\n}\n}\n}\n}\n</code></pre> <p>Output</p> <pre><code>1\n2\n</code></pre> <p>In the above example, we have created an array with values:\u00a01,\u00a02,\u00a03,\u00a04,\u00a05. Here, we have used the\u00a0<code>foreach</code>\u00a0loop to print each element of the array.</p> <p>However, the loop only prints\u00a01\u00a0and\u00a02. This is because when the number is equal to\u00a03, the break statement is executed.</p> <pre><code>if (number == 3) {\nbreak;\n}\n</code></pre> <p>This immediately terminates the\u00a0foreach loop.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#break-with-switch-statement","title":"break with Switch Statement","text":"<p>We can also use the\u00a0<code>break</code>\u00a0statement inside a switch case statement. For example,</p> <pre><code>using System;\nnamespace ConsoleApp1 {\nclass Program {\nstatic void Main(string[] args) {\nchar ch='e';\nswitch (ch) {\ncase 'a':\nConsole.WriteLine(\"Vowel\");\nbreak;\ncase 'e':\nConsole.WriteLine(\"Vowel\");\nbreak;\ncase 'i':\nConsole.WriteLine(\"Vowel\");\nbreak;\ncase 'o':\nConsole.WriteLine(\"Vowel\");\nbreak;\ncase 'u':\nConsole.WriteLine(\"Vowel\");\nbreak;\ndefault:\nConsole.WriteLine(\"Not a vowel\");\n}\n}\n}\n}\n</code></pre> <p>Output</p> <pre><code>Vowel\n</code></pre> <p>Here, we have used the\u00a0<code>break</code>\u00a0statement inside each case. It helps us to terminate the switch statement when a matching case is found.</p> <p>To learn more, visit\u00a0C# switch statement.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-continue-statement","title":"C# continue Statement","text":"<p>In this tutorial, you will learn about the working of C# continue statement with the help of examples.</p> <p>In C#, we use the continue statement to skip a current iteration of a loop.</p> <p>When our program encounters the continue statement, the program control moves to the end of the loop and executes the test condition (update statement in case of for loop).</p> <p>The syntax for continue is:</p> <pre><code>continue;\n</code></pre> <p>Before we learn about continue, make sure to learn about</p> <ul> <li>for loop</li> <li>while loop</li> <li>if...else</li> </ul>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example1-c-continue-with-for-loop","title":"Example1: C# continue with for loop","text":"<pre><code>using System;\nnamespace ContinueLoop {\nclass Program {\nstatic void Main(string[] args){\nfor (int i = 1; i &lt;= 5; ++i{\nif (i == 3) {\ncontinue;\n}\nConsole.WriteLine(i);\n}\n}\n}\n}\n</code></pre> <p>Output</p> <pre><code>1\n2\n4\n5\n</code></pre> <p>In the above example, we have used the for loop to print numbers from\u00a0i = 1 to 5. However, the number\u00a03\u00a0is not printed.</p> <p>This is because when the value of\u00a0i\u00a0is\u00a03, the\u00a0<code>continue</code>\u00a0statement is executed.</p> <pre><code>// skips the condition\nif (i == 3) {\ncontinue;  }\n</code></pre> <p>This skips the current iteration of loop and moves the program control to the update statement. Hence, the value\u00a03\u00a0is not printed.</p> <p>Note: The continue statement is usually used with the if...else statement.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-c-continue-with-while-loop","title":"Example: C# continue with while loop","text":"<pre><code>using System;\nnamespace ContinueWhile {\nclass Program{\nstatic void Main(string[] args) {\nint i = 0;\nwhile (i &lt; 5) {\ni++;\nif (i == 3) {\ncontinue;\n}\nConsole.WriteLine(i);\n}\n}\n}\n}\n</code></pre> <p>Output</p> <pre><code>1\n2\n4\n5\n</code></pre> <p>Here, we have used the\u00a0<code>continue</code>\u00a0statement inside the\u00a0<code>while</code>\u00a0loop. Similar to the earlier program, when the value of\u00a0i\u00a0is\u00a03, the continue statement is executed.</p> <p>Hence,\u00a03\u00a0is not printed on the screen.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#working-of-c-continue-statement","title":"Working of C# continue Statement","text":""},{"location":"week-7-csharp/ce103-week-7-csharp/#continue-with-nested-loop","title":"continue with Nested Loop","text":"<p>We use the continue statement with nested as well. For example:</p> <pre><code>using System;\nnamespace ContinueNested {\nclass Program {\nstatic void Main(string[] args) {\nint sum = 0;\n// outer loop\nfor(int i = 1; i &lt;= 3; i++) { // inner loop\nfor(int j = 1; j &lt;= 3; j++) { if (j == 2) {\ncontinue;\n}\nConsole.WriteLine(\"i = \" + i + \" j = \" +j);\n}\n}\n}\n}\n}\n</code></pre> <p>Output</p> <pre><code>i = 1 j = 1\ni = 1 j = 3\ni = 2 j = 1\ni = 2 j = 3\ni = 3 j = 1\ni = 3 j = 3\n</code></pre> <p>In the above example, we have used the continue statement inside the inner\u00a0<code>for</code>\u00a0loop. Here, the continue statement is executed when\u00a0<code>j == 2</code>.</p> <p>Hence, the value of\u00a0<code>j = 2</code>\u00a0is ignored.</p> <p>If you want to learn the working of nested loops, visit\u00a0C# Nested Loops.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-continue-with-foreach-loop","title":"C# continue with foreach Loop","text":"<p>We can also use the\u00a0<code>continue</code>\u00a0statement with foreach loops. For example,</p> <pre><code>using System;\nnamespace ContinueForeach {\nclass Program {\nstatic void Main(string[] args) {\nint[] num = { 1, 2, 3, 4, 5 };\nforeach(int number in num) {\n// skips the iteration\nif(number==3) {\ncontinue; }\nConsole.WriteLine(number);\n}\n}\n}\n}\n</code></pre> <p>Output</p> <pre><code>1\n2\n4\n5 </code></pre> <p>In the above example, we have created an array with values:\u00a01,\u00a02,\u00a03,\u00a04,\u00a05. Here, we have used the foreach loop to print each element of the array.</p> <p>However, the loop doesn't print the value\u00a03. This is because when the number is equal to\u00a03, the\u00a0<code>continue</code>\u00a0statement is executed.</p> <pre><code>if (number == 3) {\ncontinue;\n}\n</code></pre> <p>Hence, the print statement for this iteration is skipped.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#arrays","title":"Arrays","text":""},{"location":"week-7-csharp/ce103-week-7-csharp/#c-arrays","title":"C# Arrays","text":"<p>In this tutorial, we will learn about C# arrays. We will learn to create, initialize, and access array with the help of examples.</p> <p>An array is a collection of similar types of data. </p> <p>For example, Suppose we need to record the age of 5 students. Instead of creating 5 separate variables, we can simply create an array:</p> <p></p> <p>Elements of an Array</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#1-c-array-declaration","title":"1. C# Array Declaration","text":"<p>In C#, here is how we can declare an array.</p> <pre><code>datatype[] arrayName;\n</code></pre> <p>Here,</p> <ul> <li><code>dataType</code>\u00a0- data type like\u00a0<code>int</code>,\u00a0<code>string</code>,\u00a0<code>char</code>, etc</li> <li><code>arrayName</code>\u00a0- it is an identifier</li> </ul> <p>Let's see an example,</p> <pre><code>int[] age;\n</code></pre> <p>Here, we have created an array named\u00a0age. It can store elements of\u00a0<code>int</code>\u00a0type.</p> <p>But how many elements can it store?</p> <p>To define the number of elements that an array can hold, we have to allocate memory for the array in C#. For example,</p> <pre><code>// declare an array\nint[] age;\n// allocate memory for array\nage = new int[5];\n</code></pre> <p>Here,\u00a0<code>new int[5]</code>\u00a0represents that the array can store 5 elements. We can also say the size/length of the array is 5.</p> <p>Note: We can also declare and allocate the memory of an array in a single line. For example,</p> <pre><code>int[] age = new int[5];\n</code></pre>"},{"location":"week-7-csharp/ce103-week-7-csharp/#2-array-initialization-in-c","title":"2. Array initialization in C","text":"<p>In C#, we can initialize an array during the declaration. </p> <p>For example,</p> <pre><code>int [] numbers = {1, 2, 3, 4, 5};\n</code></pre> <p>Here, we have created an array named numbers and initialized it with values\u00a01,\u00a02,\u00a03,\u00a04, and\u00a05\u00a0inside the curly braces.</p> <p>Note that we have not provided the size of the array. In this case, the C# automatically specifies the size by counting the number of elements in the array (i.e. 5).</p> <p>In an array, we use an\u00a0index number\u00a0to determine the position of each array element. We can use the index number to initialize an array in C#. </p> <p>For example,</p> <pre><code>// declare an array\nint[] age = new int[5];\n//initializing array\nage[0] = 12;\nage[1] = 4;\nage[2] = 5;\n...\n</code></pre> <p>C# Array Initialization</p> <p></p> <p>Note:</p> <ul> <li>An array index always starts at 0. That is, the first element of an array is at index 0.</li> <li>If the size of an array is 5, the index of the last element will be at 4 (5 - 1).</li> </ul>"},{"location":"week-7-csharp/ce103-week-7-csharp/#3-access-array-elements","title":"3. Access Array Elements","text":"<p>We can access the elements in the array using the index of the array. For example,</p> <pre><code>// access element at index 2\narray[2];\n// access element at index 4\narray[4];\n</code></pre> <p>Here,</p> <ul> <li><code>array[2]</code>\u00a0- access the 3rd element</li> <li><code>array[4]</code>\u00a0- access the 5th element</li> </ul>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-c-array","title":"Example: C# Array","text":"<pre><code>using System;\nnamespace AccessArray {\nclass Program  {\nstatic void Main(string[] args) {\n// create an array\nint[] numbers = {1, 2, 3};\n//access first element\nConsole.WriteLine(\"Element in first index : \" + numbers[0]);\n//access second element\nConsole.WriteLine(\"Element in second index : \" + numbers[1]);\n//access third element\nConsole.WriteLine(\"Element in third index : \" + numbers[2]);\nConsole.ReadLine();\n}\n}\n}\n</code></pre> <p>Output</p> <pre><code>Element in first index : 1\nElement in second index : 2\nElement in third index : 3\n</code></pre> <p>In the above example, we have created an array named\u00a0numbers\u00a0with elements\u00a01, 2, 3. Here, we are using the\u00a0index number\u00a0to access elements of the array.</p> <ul> <li><code>numbers[0]</code>\u00a0- access first element,\u00a01</li> <li><code>numbers[1]</code>\u00a0- access second element,\u00a02</li> <li><code>numbers[3]</code>\u00a0- access third element,\u00a03</li> </ul>"},{"location":"week-7-csharp/ce103-week-7-csharp/#4-change-array-elements","title":"4. Change Array Elements","text":"<p>We can also change the elements of an array. To change the element, we simply assign a new value to that particular index. For example,</p> <pre><code>using System;\nnamespace ChangeArray {\nclass Program {\nstatic void Main(string[] args) {\n// create an array\nint[] numbers = {1, 2, 3};\nConsole.WriteLine(\"Old Value at index 0: \" + numbers[0]);\n// change the value at index 0\nnumbers[0] = 11;\n//print new value\nConsole.WriteLine(\"New Value at index 0: \" + numbers[0]);\nConsole.ReadLine();\n}\n}\n}\n</code></pre> <p>Output</p> <pre><code>Old Value at index 0: 1\nNew Value at index 0: 11\n</code></pre> <p>In the above example, the initial value at index 0 is 1. Notice the line,</p> <pre><code>//change the value at index 0\nnumbers[0] = 11;\n</code></pre> <p>Here, we are assigning a new value of\u00a011\u00a0to the index 0. Now, the value at index 0 is changed from\u00a01\u00a0to\u00a011.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#5-iterating-c-array-using-loops","title":"5. Iterating C# Array using Loops","text":"<p>In C#, we can use loops to iterate through each element of an array. For example,</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-using-for-loop","title":"Example: Using for loop","text":"<pre><code>using System;\nnamespace AccessArrayFor {\nclass Program {\nstatic void Main(string[] args) {\nint[] numbers = { 1, 2, 3};\nfor(int i=0; i &lt; numbers.Length; i++) {\nConsole.WriteLine(\"Element in index \" + i + \": \" + numbers[i]);\n}\nConsole.ReadLine();\n}\n}\n}\n</code></pre> <p>Output</p> <pre><code>Element in index 0: 1\nElement in index 1: 2\nElement in index 2: 3\n</code></pre> <p>In the above example, we have used a\u00a0for loop\u00a0to iterate through the elements of the array,\u00a0numbers. Notice the line,</p> <pre><code>numbers.Length\n</code></pre> <p>Here, the\u00a0<code>Length</code>\u00a0property of the array gives the size of the array.</p> <p>We can also use a\u00a0foreach loop\u00a0to iterate through the elements of an array. For example,</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-using-foreach-loop","title":"Example: Using foreach loop","text":"<pre><code>using System;\nnamespace AccessArrayForeach {\nclass Program {\nstatic void Main(string[] args) {\nint[] numbers = {1, 2, 3};\nConsole.WriteLine(\"Array Elements: \");\nforeach(int num in numbers) {\nConsole.WriteLine(num);\n}\nConsole.ReadLine();\n}\n}\n}\n</code></pre> <p>Output</p> <pre><code>Array Elements:\n1\n2\n3\n</code></pre>"},{"location":"week-7-csharp/ce103-week-7-csharp/#6-c-array-operations-using-systemlinq","title":"6. C# Array Operations using System.Linq","text":"<p>In C#, we have the\u00a0<code>System.Linq</code>\u00a0namespace that provides different methods to perform various operations in an array. For example,</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-find-minimum-and-maximum-element","title":"Example: Find Minimum and Maximum Element","text":"<pre><code>using System;\n// provides us various methods to use in an array\nusing System.Linq;\nnamespace ArrayMinMax {\nclass Program  {\nstatic void Main(string[] args) {\nint[] numbers = {51, 1, 3, 4, 98};\n// get the minimum element\nConsole.WriteLine(\"Smallest  Element: \" + numbers.Min());  // Max() returns the largest number in array\nConsole.WriteLine(\"Largest Element: \" + numbers.Max());  Console.ReadLine();\n}\n}\n}\n</code></pre> <p>Output</p> <pre><code>Smallest Element: 1\nLargest Element: 98\n</code></pre> <p>In the above example,</p> <ul> <li><code>numbers.Min()</code>\u00a0- returns the smallest number in an array,\u00a01</li> <li><code>numbers.Max()</code>\u00a0- returns the largest number in an array,\u00a098</li> </ul>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-find-the-average-of-an-array","title":"Example: Find the Average of an Array","text":"<pre><code>using System;\n// provides us various methods to use in an array\nusing System.Linq;\nnamespace ArrayFunction {\nclass Program  {\nstatic void Main(string[] args) {\nint[] numbers = {30, 31, 94, 86, 55};\n// get the sum of all array elements\nfloat sum = numbers.Sum();\n// get the total number of elements present in the array\nint count = numbers.Count();\nfloat average = sum/count;\nConsole.WriteLine(\"Average : \" + average);\n// compute the average\nConsole.WriteLine(\"Average using Average() : \" + numbers.Average());\nConsole.ReadLine();\n}\n}\n}\n</code></pre> <p>Output</p> <pre><code>Average : 59.2\nAverage using Average() : 59.2\n</code></pre> <p>In the above example, we have used</p> <ul> <li><code>numbers.Sum()</code>\u00a0to get the sum of all the elements of the array</li> <li><code>numbers.Count()</code>\u00a0to get the total number of element present inside the array</li> </ul> <p>We then divide the sum by count to get the average.</p> <pre><code>float average = sum / count;\n</code></pre> <p>Here, we have also used the\u00a0<code>numbers.Average()</code>\u00a0method of the\u00a0<code>System.Linq</code>\u00a0namespace to get the average directly.</p> <p>Note: It is compulsory to use the\u00a0<code>System.Linq</code>\u00a0namespace while using\u00a0<code>Min()</code>,\u00a0<code>Max()</code>,\u00a0<code>Sum()</code>,\u00a0<code>Count()</code>, and\u00a0<code>Average()</code>\u00a0methods.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-multidimensional-array","title":"C# Multidimensional Array","text":"<p>In this tutorial, we will learn about the multidimensional array in C# using the example of two-dimensional array.</p> <p>Before we learn about the multidimensional arrays, make sure to know about the\u00a0single-dimensional array in C#.</p> <p>In a multidimensional array, each element of the array is also an array. For example,</p> <pre><code>int[ , ] x = { { 1, 2 ,3}, { 3, 4, 5 } };\n</code></pre> <p>Here,\u00a0x\u00a0is a multidimensional array which has two elements:\u00a0{1, 2, 3}\u00a0and\u00a0{3, 4, 5}. And, each element of the array is also an array with\u00a03\u00a0elements.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#two-dimensional-array-in-c","title":"Two-dimensional array in C","text":"<p>A two-dimensional array consists of single-dimensional arrays as its elements. It can be represented as a table with a specific number of rows and columns.</p> <p></p> <p>C# Two-dimensional array</p> <p>Here, rows\u00a0{1, 2, 3}\u00a0and\u00a0{3, 4, 5}\u00a0are elements of a 2D array.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#1-two-dimensional-array-declaration","title":"1. Two-Dimensional Array Declaration","text":"<p>Here's how we declare a 2D array in C#.</p> <pre><code>int[ , ] x = new int [2, 3];\n</code></pre> <p>Here,\u00a0x\u00a0is a two-dimensional array with\u00a02\u00a0elements. And, each element is also an array with\u00a03\u00a0elements.</p> <p>So, all together the array can store\u00a06\u00a0elements (2 * 3).</p> <p>Note: The single comma [ , ] represents the array is 2 dimensional.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#2-two-dimensional-array-initialization","title":"2. Two-Dimensional Array initialization","text":"<p>In C#, we can initialize an array during the declaration. For example,</p> <pre><code>int[ , ] x = { { 1, 2 ,3}, { 3, 4, 5 } };\n</code></pre> <p>Here,\u00a0x\u00a0is a 2D array with two elements\u00a0<code>{1, 2, 3}</code>\u00a0and\u00a0<code>{3, 4, 5}</code>. We can see that each element of the array is also an array.</p> <p>We can also specify the number of rows and columns during the initialization. For example,</p> <pre><code>int [ , ] x = new int[2, 3]{ {1, 2, 3}, {3, 4, 5} };\n</code></pre>"},{"location":"week-7-csharp/ce103-week-7-csharp/#3-access-elements-from-2d-array","title":"3. Access Elements from 2D Array","text":"<p>We use the index number to access elements of a 2D array. </p> <p>For example,</p> <pre><code>// a 2D array\nint[ , ] x = { { 1, 2 ,3}, { 3, 4, 5 } };\n// access first element from first row\nx[0, 0];  // returns 1\n// access third element from second row\nx[1, 2];  // returns 5\n// access third element from first row\nx[0, 2];  // returns 3\n</code></pre> <p>Elements of Two-Dimensional array in C#</p> <p></p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-c-2d-array","title":"Example: C# 2D Array","text":"<pre><code>using System;\nnamespace MultiDArray {\nclass Program {\nstatic void Main(string[] args) {\n//initializing 2D array\nint[ , ] numbers = {{2, 3}, {4, 5}};\n// access first element from the first row\nConsole.WriteLine(\"Element at index [0, 0] : \"+numbers[0, 0]);\n// access first element from second row\nConsole.WriteLine(\"Element at index [1, 0] : \"+numbers[1, 0]);\n}\n}\n}\n</code></pre> <p>Output</p> <pre><code>Element at index [0, 0] : 2\nElement at index [1, 0] : 4\n</code></pre> <p>In the above example, we have created a 2D array named\u00a0numbers\u00a0with rows\u00a0{2, 3}\u00a0and\u00a0{4, 5}.</p> <p>Here, we are using the index numbers to access elements of the 2D array.</p> <ul> <li><code>numbers[0, 0]</code>\u00a0- access the first element from the first row (2)</li> <li><code>numbers[1, 0]</code>\u00a0- access the first element from the second row (4)</li> </ul>"},{"location":"week-7-csharp/ce103-week-7-csharp/#change-array-elements","title":"Change Array Elements","text":"<p>We can also change the elements of a two-dimensional array. To change the element, we simply assign a new value to that particular index. For example,</p> <pre><code>using System;\nnamespace MultiDArray {\nclass Program {\nstatic void Main(string[] args) {\nint[ , ] numbers = {{2, 3}, {4, 5}};\n// old element\nConsole.WriteLine(\"Old element at index [0, 0] : \"+numbers[0, 0]);\n// assigning new value\nnumbers[0, 0] = 222;\n// new element\nConsole.WriteLine(\"New element at index [0, 0] : \"+numbers[0, 0]);\n}\n}\n}\n</code></pre> <p>Output</p> <pre><code>Old element at index [0, 0] : 2\nNew element at index [0, 0] : 222\n</code></pre> <p>In the above example, the initial value at index\u00a0[0, 0]\u00a0is\u00a02. Notice the line,</p> <pre><code>// assigning new value\nnumbers[0, 0] = 222;\n</code></pre> <p>Here, we are assigning a new value\u00a0222\u00a0at index\u00a0[0, 0]. Now, the value at index\u00a0[0, 0]\u00a0is changed from\u00a02\u00a0to\u00a0222.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#iterating-c-array-using-loop","title":"Iterating C# Array using Loop","text":"<pre><code>using System;\nnamespace MultiDArray {\nclass Program  {\nstatic void Main(string[] args)  {\nint[ , ] numbers = { {2, 3, 9}, {4, 5, 9} };\nfor(int i = 0; i &lt; numbers.GetLength(0); i++)  { Console.Write(\"Row \"+ i+\": \");\nfor(int j = 0; j &lt; numbers.GetLength(1); j++)  { Console.Write(numbers[i, j]+\" \");\n}\nConsole.WriteLine(); }  }\n}\n}\n</code></pre> <p>Output</p> <pre><code>Row 0: 2 3 9\nRow 1: 4 5 9\n</code></pre> <p>In the above example, we have used a\u00a0nested for loop\u00a0to iterate through the elements of a 2D array. Here,</p> <ul> <li><code>numbers.GetLength(0)</code>\u00a0- gives the number of rows in a 2D array</li> <li><code>numbers.GetLength(1)</code>\u00a0- gives the number of elements in the row</li> </ul> <p>Note: We can also create a 3D array. Technically, a 3D array is an array that has multiple two-dimensional arrays as its elements. For example,</p> <pre><code>int[ , , ] numbers = { { { 1, 3, 5 }, { 2, 4, 6 } },\n{ { 2, 4, 9 }, { 5, 7, 11 } } };\n</code></pre> <p>Here,\u00a0<code>[ , , ]</code>\u00a0(2 commas) denotes the 3D array.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-jagged-array","title":"C# Jagged Array","text":"<p>In this tutorial, we will learn about the C# jagged array. We will learn to declare, initialize, and access the jagged array with the help of examples.</p> <p>In C#, a jagged array consists of multiple arrays as its element. However, unlike multidimensional arrays, each array inside a jagged array can be of different sizes.</p> <p>Before you learn about jagged array, make sure to know about</p> <ul> <li>C# Arrays</li> <li>C# Multidimensional Arrays</li> </ul>"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-jagged-array-declaration","title":"C# Jagged Array Declaration","text":"<p>Here's a syntax to declare a jagged array in C#.</p> <pre><code>dataType[ ][ ] nameOfArray = new dataType[rows][ ];\n</code></pre> <p>Let's see an example,</p> <pre><code>// declare jagged array\nint[ ][ ] jaggedArray = new int[2][ ];\n</code></pre> <p>Here,</p> <ul> <li><code>int</code>\u00a0- data type of the array</li> <li><code>[][]</code>\u00a0- represents jagged array</li> <li><code>jaggedArray</code>\u00a0- name of the jagged array</li> <li><code>[2][]</code>\u00a0- represents the number of elements (arrays) inside the jagged array</li> </ul> <p>Since we know each element of a jagged array is also an array, we can set the size of the individual array. </p> <p>For example,</p> <pre><code>// set size of the first array as 3\njaggedArray[0] = new int[3];\n// set size of second array as 2\njaggedArray[1] = new int[2];\n</code></pre>"},{"location":"week-7-csharp/ce103-week-7-csharp/#initializing-jagged-array","title":"Initializing Jagged Array","text":"<p>There are different ways to initialize a jagged array. For example,</p> <p>1. Using the index number</p> <p>Once we declare a jagged array, we can use the index number to initialize it. For example,</p> <pre><code>// initialize the first array\njaggedArray[0][0] = 1;\njaggedArray[0][1] = 3;\njaggedArray[0][2] = 5;\n// initialize the second array\njaggedArray[1][0] = 2;\njaggedArray[1][1] = 4;\n</code></pre> <p>Here,</p> <ul> <li>index at the first square bracket represents the index of the jagged array element</li> <li>index at the second square bracket represents the index of the element inside each element of the jagged array</li> </ul> <p>2. Initialize without setting size of array elements</p> <pre><code>// declaring string jagged array\nint[ ][ ] jaggedArray = new int[2] [ ];\n// initialize each array\njaggedArray[0] = new int[] {1, 3, 5};\njaggedArray[1] = new int[] {2, 4};\n</code></pre> <p>3. Initialize while declaring Jagged Array</p> <pre><code>int[ ][ ] jaggedArray = {\nnew int[ ] {10, 20, 30},\nnew int[ ] {11, 22},\nnew int[ ] {88, 99}\n};\n</code></pre>"},{"location":"week-7-csharp/ce103-week-7-csharp/#accessing-elements-of-a-jagged-array","title":"Accessing elements of a jagged array","text":"<p>We can access the elements of the jagged array using the index number. For example,</p> <pre><code>// access first element of second array\njaggedArray[1][0];\n// access second element of the second array\njaggedArray[1][1];\n// access second element of the first array\njaggedArray[0][1];\n</code></pre>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-c-jagged-array","title":"Example: C# Jagged Array","text":"<pre><code>using System;\nnamespace JaggedArray {\nclass Program {\nstatic void Main(string[] args) {\n// create a jagged array\nint[ ][ ] jaggedArray = {\nnew int[] {1, 3, 5},\nnew int[] {2, 4},\n};\n// print elements of jagged array\nConsole.WriteLine(\"jaggedArray[1][0]: \" + jaggedArray[1][0]);\nConsole.WriteLine(\"jaggedArray[1][1]: \" + jaggedArray[1][1]);\nConsole.WriteLine(\"jaggedArray[0][2]: \" + jaggedArray[0][2]);\nConsole.ReadLine();\n}    }\n}\n</code></pre> <p>Output</p> <pre><code>jaggedArray[1][0]: 2\njaggedArray[1][1]: 4\njaggedArray[0][2]: 5\n</code></pre> <p>Here, inside a jagged array, - <code>jaggedArray[1][0]</code>\u00a0- first element of the second array - <code>jaggedArray[1][1]</code>\u00a0- second element of the second array - <code>jaggedArray[0][2]</code>\u00a0- third element of the first array</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#iterating-through-a-jagged-array","title":"Iterating through a jagged array","text":"<p>In C#, we can use loops to iterate through each element of the jagged array. For example,</p> <pre><code>using System;\nnamespace JaggedArray {\nclass Program {\nstatic void Main(string[] args) {\n// declare a jagged array\nint[][] jaggedArray = new int[2][];\n// set size of Jagged Array Elements\njaggedArray[0] = new int[3];\njaggedArray[1] = new int[2];\n// initialize the first array\njaggedArray[0][0] = 1;\njaggedArray[0][1] = 3;\njaggedArray[0][2] = 5;\n// initialize the second array\njaggedArray[1][0] = 2;\njaggedArray[1][1] = 2;\n// outer for loop\nfor (int i = 0; i &lt; jaggedArray.Length; i++) {\nConsole.Write(\"Element \"+ i +\": \");\n// inner for loop\nfor (int j = 0; j &lt; jaggedArray[i].Length; j++) {\nConsole.Write(jaggedArray[i][j] + \" \");\n}\nConsole.WriteLine();\n}\nConsole.ReadLine();\n} }\n}\n</code></pre> <p>Output</p> <pre><code>Element 0: 1 3 5\nElement 1: 2 2\n</code></pre> <p>In the above example, we have used a\u00a0nested for loop\u00a0to iterate through the jagged array. Here,</p> <p>1. Outer for loop</p> <ul> <li>to access the elements (arrays) of the jagged array</li> <li><code>jaggedArray.Length</code>\u00a0- gives the size of jagged array</li> </ul> <p>2. Inner for loop</p> <ul> <li>to access the elements of the individual array inside the jagged array.</li> <li><code>jaggedArray[i].Length</code>\u00a0- gives the size of elements of the\u00a0<code>ith</code>\u00a0array inside the jagged array</li> </ul>"},{"location":"week-7-csharp/ce103-week-7-csharp/#jagged-array-with-multidimensional-array","title":"Jagged Array with Multidimensional Array","text":"<p>In C#, we can also use multidimensional arrays as Jagged Array Elements. For example,</p> <pre><code>int[ ][ , ] jaggedArrayTwoD = new int[2][ , ] {\nnew int[,] { {1, 8}, {6, 7} },\nnew int[,] { {0, 3}, {5, 6}, {9, 10} }\n};\n</code></pre> <p>Here, each element of the jagged array is a multidimensional array:</p> <ul> <li><code>new int[,] { {1, 8}, {6, 7} }</code>\u00a0- 2D array with 2 elements</li> <li><code>new int[ , ] { {0, 3}, {5, 6}, {9, 10} }</code>\u00a0- 2D array with 3 elements</li> </ul> <p>Let's see an example,</p> <pre><code>using System;\nnamespace JaggedArray  {\nclass Program {\nstatic void Main(string[] args)  {\n// declare and initialize jagged array with 2D array\nint[][,] jaggedArray = new int[3][ , ]  {\nnew int[ , ] { {1, 8}, {6, 7} },\nnew int[ , ] { {0, 3}, {5, 6}, {9, 10} },\nnew int[ , ] { {11, 23}, {100, 88}, {0, 10} }\n};\nConsole.WriteLine(jaggedArray[0][0, 1]);\nConsole.WriteLine(jaggedArray[1][2, 1]);\nConsole.WriteLine(jaggedArray[2][1, 0]);\nConsole.ReadLine();\n}    }\n}\n</code></pre> <p>Output</p> <pre><code>8\n10\n100\n</code></pre> <p>In the above example, notice the code,</p> <pre><code>jaggedArray[0][0, 1]\n</code></pre> <p>Here,</p> <ul> <li><code>[0]</code>\u00a0- represents the first element (2D array) of the jagged array</li> <li><code>[0, 1]</code>\u00a0- represents the second element of the first array inside the 2D array</li> </ul>"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-foreach-loop","title":"C# foreach loop","text":"<p>In this tutorial, we will learn about foreach loops (an alternative to for loop) and how to use them with arrays and collections.</p> <p>C# provides an easy to use and more readable alternative to for loop, the foreach loop when working with arrays and collections to iterate through the items of arrays/collections. The foreach loop iterates through each item, hence called foreach loop.</p> <p>Before moving forward with foreach loop, visit:</p> <ul> <li>C# for loop</li> <li>C# arrays</li> <li>C# collections</li> </ul>"},{"location":"week-7-csharp/ce103-week-7-csharp/#syntax-of-foreach-loop","title":"Syntax of foreach loop","text":"<pre><code>foreach (element in iterable-item)\n{\n// body of foreach loop\n}\n</code></pre> <p>Here iterable-item can be an array or a class of collection.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#how-foreach-loop-works","title":"How foreach loop works?","text":"<p>The\u00a0<code>in</code>\u00a0keyword used along with foreach loop is used to iterate over the\u00a0iterable-item. The in keyword selects an item from the\u00a0iterable-item\u00a0on each iteration and store it in the variable\u00a0element.</p> <p>On first iteration, the first item of\u00a0iterable-item\u00a0is stored in element. On second iteration, the second element is selected and so on.</p> <p>The number of times the foreach loop will execute is equal to the number of elements in the array or collection.</p> <p>Here is an example of iterating through an array using the for loop:</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-1-printing-array-using-for-loop","title":"Example 1: Printing array using for loop","text":"<pre><code>using System;\nnamespace Loop\n{\nclass ForLoop\n{\npublic static void Main(string[] args)\n{\nchar[] myArray = {'H','e','l','l','o'};\nfor(int i = 0; i &lt; myArray.Length; i++)\n{\nConsole.WriteLine(myArray[i]);\n}\n}\n}\n}\n</code></pre> <p>The same task can be done using the foreach loop.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-2-printing-array-using-foreach-loop","title":"Example 2: Printing array using foreach loop","text":"<pre><code>using System;\nnamespace Loop\n{\nclass ForEachLoop\n{\npublic static void Main(string[] args)\n{\nchar[] myArray = {'H','e','l','l','o'};\nforeach(char ch in myArray)\n{\nConsole.WriteLine(ch);\n}\n}\n}\n}\n</code></pre> <p>When we run the both program, the output will be:</p> <pre><code>H\ne\nl\nl\no\n</code></pre> <p>In the above program, the foreach loop iterates over the array,\u00a0myArray.  On first iteration, the first element i.e.\u00a0myArray[0]\u00a0is selected and stored in\u00a0ch. Similarly on the last iteration, the last element i.e.\u00a0myArray[4]\u00a0is selected.  Inside the body of loop, the value of\u00a0ch\u00a0is printed.</p> <p>When we look at both programs, the program that uses foreach loop is more readable and easy to understand.  This is because of its simple and expressive syntax. Hence, foreach loop is preferred over for loop when working with arrays and collections.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-3-traversing-an-array-of-gender-using-foreach-loop","title":"Example 3: Traversing an array of gender using foreach loop","text":"<p>This program computes the number of male and female candidates.</p> <pre><code>using System;\nnamespace Loop{\nclass ForEachLoop{\npublic static void Main(string[] args){\nchar[] gender = {'m','f','m','m','m','f','f','m','m','f'};\nint male = 0, female = 0;\nforeach (char g in gender)  {\nif (g == 'm')\nmale++;\nelse if (g =='f')\nfemale++;\n}\nConsole.WriteLine(\"Number of male = {0}\", male);\nConsole.WriteLine(\"Number of female = {0}\", female);\n}\n}\n}\n</code></pre> <p>When we run the program, the output will be:</p> <pre><code>Number of male = 6\nNumber of female = 4\n</code></pre>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-4-foreach-loop-with-list-collection","title":"Example 4: foreach loop with List (Collection)","text":"<p>This program computes the sum of elements in a\u00a0List.</p> <pre><code>using System;\nusing System.Collections.Generic;\nnamespace Loop {\nclass ForEachLoop {\npublic static void Main(string[] args) {\nvar numbers = new List&lt;int&gt;() { 5, -8, 3, 14, 9, 17, 0, 4 };\nint sum = 0;\nforeach (int number in numbers) {\nsum += number;\n}\nConsole.WriteLine(\"Sum = {0}\", sum);\nConsole.ReadLine();\n}\n}\n}\n</code></pre> <p>When we run the program, the output will be:</p> <p></p><pre><code>Sum = 44\n</code></pre> In this program, foreach loop is used to traverse through a collection. Traversing a collection is similar to traversing through an array. <p>The first element of collection is selected on the first iteration, second element on second iteration and so on till the last element.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-class-and-object-oop-i","title":"C# Class and Object - OOP (I)","text":""},{"location":"week-7-csharp/ce103-week-7-csharp/#c-class-and-object","title":"C# Class and Object","text":"<p>In this tutorial, you will learn about the concept of classes and objects in C# with the help of examples.</p> <p>C# is an object-oriented program.  In object-oriented programming(OOP),  we solve complex problems by dividing them into objects.</p> <p>To work with objects, we need to perform the following activities:</p> <ul> <li>create a class</li> <li>create objects from the class</li> </ul>"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-class","title":"C# Class","text":"<p>Before we learn about objects,  we need to understand the working of classes.  Class is the blueprint for the object.</p> <p>We can think of the class as a\u00a0sketch (prototype) of a house.  It contains all the details about the floors, doors, windows, etc.  We can build a house based on these descriptions.\u00a0 House\u00a0is the object.</p> <p>Like many houses can be made from the sketch, we can create many objects from a class.</p> <p>Create a class in C#</p> <p>We use the class keyword to create an object. For example,</p> <pre><code>class ClassName {\n}\n</code></pre> <p>Here, we have created a class named\u00a0ClassName. A class can contain</p> <ul> <li>fields\u00a0- variables to store data</li> <li>methods\u00a0- functions to perform specific tasks</li> </ul> <p>Let's see an example,</p> <pre><code>class Dog {\n//field\nstring breed;\n//method\npublic void bark() {\n}\n}\n</code></pre> <p>In the above example,</p> <ul> <li>Dog\u00a0- class name</li> <li>breed\u00a0- field</li> <li>bark()\u00a0- method</li> </ul> <p>Note: In C#, fields and methods inside a class are called members of a class.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-objects","title":"C# Objects","text":"<p>An object is an instance of a class. Suppose, we have a class\u00a0Dog. Bulldog, German Shepherd, Pug are objects of the class.</p> <p>Creating an Object of a class</p> <p>In C#, here's how we create an object of the class.</p> <pre><code>ClassName obj = new ClassName();\n</code></pre> <p>Here, we have used the\u00a0<code>new</code>\u00a0keyword to create an object of the class. And,\u00a0obj\u00a0is the name of the object. Now, let us create an object from the\u00a0Dog\u00a0class.</p> <pre><code>Dog bullDog = new Dog();\n</code></pre> <p>Now, the\u00a0bullDog\u00a0object can access the fields and methods of the\u00a0Dog\u00a0class.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#access-class-members-using-object","title":"Access Class Members using Object","text":"<p>We use the name of objects along with the\u00a0<code>.</code>\u00a0operator to access members of a class. For example,</p> <pre><code>using System;\nnamespace ClassObject {\nclass Dog {\nstring breed;\npublic void bark() {\nConsole.WriteLine(\"Bark Bark !!\");\n}\nstatic void Main(string[] args) {\n// create Dog object \nDog bullDog = new Dog();\n// access breed of the Dog \nbullDog.breed = \"Bull Dog\";\nConsole.WriteLine(bullDog.breed);\n// access method of the Dog\nbullDog.bark();   Console.ReadLine();\n}\n}\n}\n</code></pre> <p>--</p> <p>Output</p> <pre><code>Bull Dog\nBark Bark !!\n</code></pre> <p>In the above program, we have created an object named\u00a0bullDog\u00a0from the\u00a0Dog\u00a0class. Notice that we have used the object name and the\u00a0<code>.</code>\u00a0(dot operator) to access the\u00a0breed\u00a0field</p> <pre><code>// access breed of the Dog\nbullDog.breed = \"Bull Dog\";\n</code></pre> <p>and the\u00a0<code>bark()</code>\u00a0method</p> <pre><code>// access method of the Dog\nbullDog.bark();\n</code></pre>"},{"location":"week-7-csharp/ce103-week-7-csharp/#creating-multiple-objects-of-a-class","title":"Creating Multiple Objects of a Class","text":"<p>We can create multiple objects from the same class. For example,</p> <pre><code>using System;\nnamespace ClassObject {\nclass Employee {\nstring department;\nstatic void Main(string[] args) {\n// create Employee object \nEmployee sheeran = new Employee();\n// set department for sheeran\nsheeran.department = \"Development\";\nConsole.WriteLine(\"Sheeran: \" + sheeran.department);\n// create second object of Employee\nEmployee taylor = new Employee();\n// set department for taylor\ntaylor.department = \"Content Writing\";\nConsole.WriteLine(\"Taylor: \" + taylor.department);\nConsole.ReadLine();\n}\n}\n}\n</code></pre> <p>Output</p> <pre><code>Sheeran: Development\nTaylor: Content Writing\n</code></pre> <p>In the above example, we have created two objects:\u00a0sheeran\u00a0and\u00a0taylor\u00a0from the\u00a0Employee\u00a0class.</p> <p>Here, you can see both the objects have their own version of the\u00a0department\u00a0field with different values.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#creating-objects-in-a-different-class","title":"Creating objects in a different class","text":"<p>In C#, we can also create an object of a class in another class. </p> <p>For example,</p> <pre><code>using System;\nnamespace ClassObject {\nclass Employee {\npublic string name;\npublic void work(string work) {\nConsole.WriteLine(\"Work: \" + work);\n}\n}\nclass EmployeeDrive {\nstatic void Main(string[] args) {\n// create Employee object \nEmployee e1= new Employee();\nConsole.WriteLine(\"Employee 1\");\n// set name of the Employee \ne1.name=\"Gloria\";\nConsole.WriteLine(\"Name: \" + e1.name);\n//call method of the Employee\ne1.work(\"Coding\"); Console.ReadLine();\n}\n}\n}\n</code></pre> <p>Output</p> <pre><code>Employee 1\nName: Gloria\nWork: Coding\n</code></pre> <p>In the above example, we have two classes:\u00a0Employee\u00a0and\u00a0EmployeeDrive. Here, we are creating an object\u00a0e1\u00a0of the\u00a0Employee\u00a0class in the\u00a0EmployeeDrive\u00a0class.</p> <p>We have used the\u00a0e1\u00a0object to access the members of the\u00a0Employee\u00a0class from\u00a0EmployeeDrive. This is possible because the members in the\u00a0Employee\u00a0class are\u00a0<code>public</code>.</p> <p>Here,\u00a0<code>public</code>\u00a0is an access specifier that means the class members are accessible from any other classes. To learn more, visit\u00a0C# Access Modifiers.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#why-objects-and-classes","title":"Why Objects and Classes?","text":"<p>Objects and classes help us to divide a large project into smaller sub-problems.</p> <p>Suppose you want to create a game that has hundreds of enemies and each of them has fields like\u00a0health,\u00a0ammo, and methods like\u00a0shoot()\u00a0and\u00a0run().</p> <p>With OOP we can create a single\u00a0Enemy\u00a0class with required fields and methods. </p> <p>Then, we can create multiple enemy objects from it.</p> <p>Each of the enemy objects will have its own version of\u00a0health\u00a0and\u00a0ammo\u00a0fields. And, they can use the common\u00a0shoot()\u00a0and\u00a0run()\u00a0methods.</p> <p>Now, instead of thinking of projects in terms of variables and methods, we can think of them in terms of objects.</p> <p>This helps to manage complexity as well as make our code reusable.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-method","title":"C# Method","text":"<p>In this tutorial, we will learn about the C# method with the help of examples.</p> <p>A method is a block of code that performs a specific task. Suppose you need to create a program to create a circle and color it. You can create two methods to solve this problem:</p> <ul> <li>a method to draw the circle</li> <li>a method to color the circle</li> </ul> <p>Dividing a complex problem into smaller chunks makes your program easy to understand and reusable.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#declaring-a-method-in-c","title":"Declaring a Method in C","text":"<p>Here's the syntax to declare a method in C#.</p> <pre><code>returnType methodName() {\n// method body\n}\n</code></pre> <p>Here,</p> <ul> <li>returnType\u00a0- It specifies what type of value a method returns. For example, if a method has an\u00a0<code>int</code>\u00a0return type then it returns an\u00a0<code>int</code>\u00a0value.</li> </ul> <p>If the method does not return a value, its return type is\u00a0<code>void</code>.</p> <ul> <li> <p>methodName\u00a0- It is an identifier that is used to refer to the particular method in a program.</p> </li> <li> <p>method body\u00a0- It includes the programming statements that are used to perform some tasks. The method body is enclosed inside the curly braces\u00a0<code>{ }</code></p> </li> </ul> <p>Let's see an example,</p> <pre><code>void display() {\n// code\n}\n</code></pre> <p>Here, the name of the method is\u00a0display(). And, the return type is\u00a0void.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#calling-a-method-in-c","title":"Calling a Method in C","text":"<p>In the above example, we have declared a method named\u00a0display(). Now, to use the method, we need to call it.</p> <p>Here's how we can call the\u00a0display()\u00a0method.</p> <pre><code>// calls the method\ndisplay();\n</code></pre> <p>Working of C# method call</p> <p></p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-c-method","title":"Example: C# Method","text":"<pre><code>using System;\nnamespace Method {\nclass Program {  // method declaration\npublic void display() {\nConsole.WriteLine(\"Hello World\");   }\nstatic void Main(string[] args) {\n// create class object \nProgram p1 = new Program();\n//call method \np1.display();   Console.ReadLine();\n}\n}\n}\n</code></pre> <p>Output</p> <pre><code>Hello World\n</code></pre> <p>In the above example, we have created a method named\u00a0<code>display()</code>. We have created an object\u00a0p1\u00a0of the\u00a0Program\u00a0class.</p> <p>Notice the line,</p> <pre><code>p1.display();\n</code></pre> <p>Here, we are using the object to call the\u00a0<code>display()</code>\u00a0method.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-method-return-type","title":"C# Method Return Type","text":"<p>A C# method may or may not return a value. If the method doesn't return any value, we use the\u00a0<code>void</code>\u00a0keyword (shown in the above example).</p> <p>If the method returns any value, we use the return statement to return any value. For example,</p> <pre><code>int addNumbers() {\n...\nreturn sum;\n}\n</code></pre> <p>Here, we are returning the variable\u00a0sum. One thing you should always remember is that the return type of the method and the returned value should be of the same type.</p> <p>In our code, the return type is\u00a0<code>int</code>. Hence, the data type of\u00a0sum\u00a0should be of\u00a0<code>int</code>\u00a0as well.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-method-return-type","title":"Example: Method Return Type","text":"<pre><code>using System;\nnamespace Method {\nclass Program {   // method declaration\nstatic int addNumbers() {\nint sum = 5 + 14;\nreturn sum;\n}\nstatic void Main(string[] args) {\n// call method \nint sum = addNumbers();\nConsole.WriteLine(sum);\nConsole.ReadLine();\n}\n}\n}\n</code></pre> <p>Output</p> <pre><code>19\n</code></pre> <p>In the above example, we have a method named\u00a0addNumbers()\u00a0with the\u00a0<code>int</code>\u00a0return type.</p> <pre><code>int sum = addNumbers();\n</code></pre> <p>Here, we are storing the returned value from the\u00a0addNumbers()\u00a0to sum. We have used\u00a0<code>int</code>\u00a0data type to store the value because the method returns an\u00a0<code>int</code>\u00a0value.</p> <p>Note: As the method is static we do not create a class object before calling the method. The static method belongs to the class rather than the object of a class.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-methods-parameters","title":"C# Methods Parameters","text":"<p>In C#, we can also create a method that accepts some value. These values are called method parameters. For example,</p> <pre><code>int addNumber(int a, int b) {\n//code\n}\n</code></pre> <p>Here,\u00a0a\u00a0and\u00a0b\u00a0are two parameters passed to the\u00a0<code>addNumber()</code>\u00a0function.</p> <p>If a method is created with parameters, we need to pass the corresponding values(arguments) while calling the method. For example,</p> <pre><code>// call the method\naddNumber(100, 100);\n</code></pre> <p>Representation of the C# method returning a value</p> <p>Here, We have passed 2 arguments\u00a0(100, 100).</p> <p></p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-1-c-methods-with-parameters","title":"Example 1: C# Methods with Parameters","text":"<pre><code>using System;\nnamespace Method {\nclass Program {   int addNumber (int a, int b) {\nint sum = a + b;\nreturn sum;\n}\nstatic void Main(string[] args) {\n// create class object \nProgram p1 = new Program();\n//call method \nint sum = p1.addNumber(100,100);   Console.WriteLine(\"Sum: \" + sum);\nConsole.ReadLine();\n}\n}\n}\n</code></pre> <p>Output</p> <pre><code>Sum: 200\n</code></pre>"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-methods-with-single-parameter","title":"C# Methods with Single Parameter","text":"<p>In C#, we can also create a method with a single parameter. For example,</p> <pre><code>using System;\nnamespace Method {\nclass Program {   string work(string work) {\nreturn work;\n}\nstatic void Main(string[] args) {\n// create class object \nProgram p1 = new Program();\n//call method \nstring work = p1.work(\"Cleaning\"); ;   Console.WriteLine(\"Work: \" + work);\nConsole.ReadLine();\n}\n}\n}\n</code></pre> <p>Output</p> <pre><code>Work: Cleaning\n</code></pre> <p>Here, the\u00a0work()\u00a0method has a single parameter\u00a0work.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#built-in-methods","title":"Built-in methods","text":"<p>So far we have defined our own methods. These are called\u00a0user-defined methods.</p> <p>However, in C#, there are various methods that can be directly used in our program. They are called\u00a0built-in methods. For example,</p> <ul> <li><code>Sqrt()</code>\u00a0- computes the square root of a number</li> <li><code>ToUpper()</code>\u00a0- converts a string to uppercase</li> </ul>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-mathsqrt-method","title":"Example: Math.Sqrt() Method","text":"<pre><code>using System;\nnamespace Method {\nclass Program {   static void Main(string[] args) {\n// Built in method\ndouble a = Math.Sqrt(9);\nConsole.WriteLine(\"Square root of 9: \" + a);\n}\n}\n}\n</code></pre> <p>Output</p> <pre><code>Square root of 9: 3\n</code></pre> <p>In the above program, we have used</p> <pre><code>double a = Math.Sqrt(9);\n</code></pre> <p>to compute the square root of 9. Here, the\u00a0<code>Sqrt()</code>\u00a0is a built-in method that is defined inside the\u00a0<code>Math</code>\u00a0class.</p> <p>We can simply use built-in methods in our program without writing the method definition. To learn more, visit\u00a0C# built-in methods.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#method-overloading-in-c","title":"Method Overloading in C","text":"<p>In C#, we can create two or more methods with the same name.  It is known as method overloading. </p> <p>For example,</p> <pre><code>using System;\nnamespace MethodOverload {\nclass Program {  // method with one parameter\nvoid display(int a) {\nConsole.WriteLine(\"Arguments: \" + a);\n}\n// method with two parameters\nvoid display(int a, int b) {\nConsole.WriteLine(\"Arguments: \" + a + \" and \" + b);\n} static void Main(string[] args) {\nProgram p1 = new Program();\np1.display(100);\np1.display(100, 200);\nConsole.ReadLine();\n}\n}\n}\n</code></pre> <p>Output</p> <pre><code>Arguments: 100\nArguments: 100 and 200\n</code></pre> <p>In the above example, we have overloaded the\u00a0display()\u00a0method. It is possible because:</p> <ul> <li>one method has one parameter</li> <li>another has two parameter</li> </ul> <p>To know more visit C#\u00a0Method Overloading</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-access-modifiers","title":"C# Access Modifiers","text":"<p>In this tutorial, we will learn about the public, private, protected, and internal access modifiers in C# with the help of examples.</p> <p>In C#, access modifiers specify the accessibility of types (classes, interfaces, etc) and type members (fields, methods, etc). For example,</p> <pre><code>class Student {\npublic string name;\nprivate int num;\n}\n</code></pre> <p>Here,</p> <ul> <li>name\u00a0- public field that can be accessed from anywhere</li> <li>num\u00a0- private field can only be accessed within the\u00a0Student\u00a0class</li> </ul> <p>Types of Access Modifiers</p> <p>In C#, there are 4 basic types of access modifiers.</p> <ul> <li>public</li> <li>private</li> <li>protected</li> <li>internal</li> </ul>"},{"location":"week-7-csharp/ce103-week-7-csharp/#1-public-access-modifier","title":"1. public access modifier","text":"<p>When we declare a type or type member\u00a0<code>public</code>, it can be accessed from anywhere. For example,</p> <pre><code>using System;\nnamespace MyApplication {\nclass Student {\npublic string name = \"Sheeran\";\npublic void print() {\nConsole.WriteLine(\"Hello from Student class\");\n}\n}\nclass Program {\nstatic void Main(string[] args) {\n// creating object of Student class\nStudent student1 = new Student();\n// accessing name field and printing it\nConsole.WriteLine(\"Name: \" + student1.name);\n// accessing print method from Student\nstudent1.print();\nConsole.ReadLine();\n}\n}\n}\n</code></pre> <p>Output</p> <pre><code>Name: Sheeran\nHello from Student class\n</code></pre> <p>In the above example, we have created a class named\u00a0Student\u00a0with a field\u00a0name\u00a0and a method\u00a0print().</p> <pre><code>// accessing name field and printing it\nConsole.WriteLine(\"Name: \" + student1.name);\n// accessing print method from Student\nstudent1.print();\n</code></pre> <p>Since the field and method are public, we are able to access them from the\u00a0Program\u00a0class.</p> <p>Note: We have used the object\u00a0student1\u00a0of the\u00a0Student\u00a0class to access its members. To learn more, visit the\u00a0C# class and objects.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#2-private-access-modifier","title":"2. private access modifier","text":"<p>When we declare a type member with the\u00a0<code>private</code>\u00a0access modifier, it can only be accessed within the same\u00a0<code>class</code>\u00a0or\u00a0<code>struct</code>. For example,</p> <pre><code>using System;\nnamespace MyApplication {\nclass Student {\nprivate string name = \"Sheeran\";\nprivate void print() {\nConsole.WriteLine(\"Hello from Student class\");\n}\n}\nclass Program {\nstatic void Main(string[] args) {\n// creating object of Student class\nStudent student1 = new Student();\n// accessing name field and printing it\nConsole.WriteLine(\"Name: \" + student1.name);\n// accessing print method from Student\nstudent1.print();\nConsole.ReadLine();\n}\n}\n}\n</code></pre> <p>In the above example, we have created a class named\u00a0Student\u00a0with a field\u00a0name\u00a0and a method\u00a0print().</p> <pre><code>// accessing name field and printing it\nConsole.WriteLine(\"Name: \" + student1.name);\n// accessing print method from Student\nstudent1.print();\n</code></pre> <p>Since the field and method are private, we are not able to access them from the\u00a0Program\u00a0class. Here, the code will generate the following error.</p> <pre><code>Error    CS0122    'Student.name' is inaccessible due to its protection level    Error    CS0122    'Student.print()' is inaccessible due to its protection level    </code></pre>"},{"location":"week-7-csharp/ce103-week-7-csharp/#3-protected-access-modifier","title":"3. protected access modifier","text":"<p>When we declare a type member as\u00a0<code>protected</code>, it can only be accessed from the same class and its derived classes. For example,</p> <pre><code>using System;\nnamespace MyApplication {\nclass Student {\nprotected string name = \"Sheeran\";\n}\nclass Program {\nstatic void Main(string[] args) {\n// creating object of student class\nStudent student1 = new Student();\n// accessing name field and printing it\nConsole.WriteLine(\"Name: \" + student1.name);\nConsole.ReadLine();\n}\n}\n}\n</code></pre> <p>In the above example, we have created a class named\u00a0Student\u00a0with a field\u00a0name.  Since the field is protected, we are not able to access it from the\u00a0Program\u00a0class.</p> <p>Here, the code will generate the following error.</p> <pre><code>Error    CS0122    'Student.name' is inaccessible due to its protection level    </code></pre> <p>Now, let's try to access the\u00a0<code>protected</code>\u00a0member from a derived class.</p> <pre><code>using System;\nnamespace MyApplication {\nclass Student {\nprotected string name = \"Sheeran\";\n}\n// derived class\nclass Program : Student {\nstatic void Main(string[] args) {\n// creating object of derived class\nProgram program = new Program();\n// accessing name field and printing it\nConsole.WriteLine(\"Name: \" + program.name);\nConsole.ReadLine();\n}\n}\n}\n</code></pre> <p>Output</p> <pre><code>Name: Sheeran\n</code></pre> <p>In the above example, we have created a class\u00a0Student\u00a0with a protected field\u00a0name. Notice that we have inherited the\u00a0Program\u00a0class from the\u00a0Student\u00a0class.</p> <pre><code>// accessing name field and printing it\nConsole.WriteLine(\"Name: \" + program.name);\n</code></pre> <p>Since the\u00a0<code>protected</code>\u00a0member can be accessed from derived classes, we are able to access\u00a0name\u00a0from the\u00a0Program\u00a0class.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#4-internal-access-modifier","title":"4. internal access modifier","text":"<p>When we declare a type or type member as\u00a0<code>internal</code>, it can be accessed only within the same assembly.</p> <p>An assembly is a collection of types (classes, interfaces, etc) and resources (data). They are built to work together and form a logical unit of functionality.</p> <p>That's why when we run an assembly all classes and interfaces inside the assembly run together. To learn more, visit the\u00a0C# Assembly.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-internal-within-the-same-assembly","title":"Example: internal within the same Assembly","text":"<pre><code>using System;\nnamespace Assembly {\nclass Student {\ninternal string name = \"Sheeran\";\n}\nclass Program {\nstatic void Main(string[] args) {\n// creating object of Student class\nStudent theStudent = new Student();\n// accessing name field and printing it\nConsole.WriteLine(\"Name: \" + theStudent.name);\nConsole.ReadLine();\n}\n}\n}\n</code></pre> <p>Output</p> <pre><code>Name: Sheeran\n</code></pre> <p>In the above example, we have created a class named\u00a0Student\u00a0with a field\u00a0name. Since the field is\u00a0<code>internal</code>, we are able to access it from the\u00a0Program\u00a0class as they are in the same assembly.</p> <p>If we use\u00a0<code>internal</code>\u00a0within a single assembly, it works just like the\u00a0<code>public</code>\u00a0access modifier.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-internal-in-different-assembly","title":"Example: internal in different Assembly","text":"<p>Let's create one assembly first.</p> <pre><code>// Code on Assembly1\nusing System;\nnamespace Assembly1 {\npublic class StudentName {\ninternal string name = \"Sheeran\";\n}\nclass Program {\nstatic void Main(string[] args) {\n}\n}\n}\n</code></pre> <p>Here, this code is in\u00a0Assembly1. We have created an internal field\u00a0name\u00a0inside the class\u00a0StudentName.  Now, this field can only be accessed from the same assembly\u00a0Assembly1.</p> <p>Now, let's create another assembly.</p> <pre><code>// Code on Assembly2\nusing System;\n// access Assembly1\nusing Assembly1;\nnamespace Assembly2 {\nclass Program {\nstatic void Main(string[] args) {\nStudentName student = new StudentName();\n// accessing name field from Assembly1\nConsole.Write(student.name);\nConsole.ReadLine();\n}\n}\n}\n</code></pre> <p>Here, this code is in\u00a0Assembly2. We are trying to access the\u00a0name\u00a0field of the\u00a0StudentName\u00a0class(Assembly1). To access fields from\u00a0Assembly1, we first need to set the reference of\u00a0Assembly1\u00a0in\u00a0Assembly2. Now the code</p> <pre><code>using Assembly1;\n</code></pre> <p>allows us to use the code from\u00a0Assembly1\u00a0to\u00a0Assembly2.</p> <p>Here, when we try to access the\u00a0name\u00a0field from\u00a0Assembly2, we get an error.</p> <pre><code>Error    CS0122    'StudentName.name' is inaccessible due to its protection level\n</code></pre> <p>This is because\u00a0name\u00a0is an internal field present in\u00a0Assembly1.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#5-protected-internal-access-modifier","title":"5. protected internal access modifier","text":"<p>The\u00a0<code>protected internal</code>\u00a0is a combination of\u00a0<code>protected</code>\u00a0and\u00a0<code>internal</code>\u00a0access modifiers.</p> <p>When we declare a member\u00a0<code>protected internal</code>, it can be accessed from the same assembly and the derived class of the containing class from any other assembly.</p> <pre><code>// Code on Assembly1\nusing System;\nnamespace Assembly1 {\npublic class Greet {\nprotected internal string msg=\"Hello\";\n}\nclass Program {\nstatic void Main(string[] args) {\nGreet greet = new Greet();\nConsole.WriteLine(greet.msg);\nConsole.ReadLine();\n}\n}\n}\n</code></pre> <p>Output</p> <pre><code>Hello\n</code></pre> <p>The above code is in\u00a0Assembly1.</p> <p>In the above example, we have created a class named\u00a0Greet\u00a0with a field\u00a0msg. Since the field is protected internal, we are able to access it from the\u00a0Program\u00a0class as they are in the same assembly.</p> <p>Let's derive a class from\u00a0Greet\u00a0in another assembly and try to access the protected internal field\u00a0msg\u00a0from it.</p> <pre><code>// Code on Assembly2\nusing System;\n// access Assembly1\nusing Assembly1;\nnamespace Assembly2 {\n// derived class of Greet\nclass Program: Greet {\nstatic void Main(string[] args) {\nProgram greet = new Program();\n// accessing name field from Assembly1\nConsole.Write(greet.msg);\nConsole.ReadLine();\n}\n}\n}\n</code></pre> <p>Output</p> <pre><code>Hello\n</code></pre> <p>The above code is in\u00a0Assembly2.</p> <p>In the above example, we have inherited the\u00a0Program\u00a0class from the\u00a0Greet\u00a0class(from\u00a0Assembly1).</p> <pre><code>// accessing name field from Assembly1\nConsole.Write(greet.msg);\n</code></pre> <p>We are able to access the\u00a0msg\u00a0from the\u00a0Greet\u00a0class of\u00a0Assembly1\u00a0from\u00a0Assembly2.</p> <p>This is because the\u00a0msg\u00a0is a protected internal field and we are trying to access it from the child class of\u00a0Greet.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#6-private-protected-access-modifier","title":"6. private protected access modifier","text":"<p>The\u00a0<code>private protected</code>\u00a0access modifier is a combination of\u00a0<code>private</code>\u00a0and\u00a0<code>protected</code>. It is available from the C# version 7.2 and later.</p> <p>When we declare a member\u00a0<code>private protected</code>, it can only be accessed within the same class, and its derived class within the same assembly. For example,</p> <pre><code>// Code in Assembly1\nusing System;\nnamespace Assembly1 {\npublic class StudentName {\nprivate protected string name = \"Sheeran\";\n}\n//derived class of StudentName class\nclass Program1 : StudentName {\nstatic void Main(string[] args) {\nProgram1 student = new Program1();\n//  accessing name field from base class\nConsole.Write(student.name);\nConsole.ReadLine();\n}\n}\n}\n</code></pre> <p>Output</p> <pre><code>Sheeran\n</code></pre> <p>The above code is in\u00a0Assembly1</p> <p>In the above example, we have created a class\u00a0StudentName\u00a0with a\u00a0<code>private protected</code>\u00a0field\u00a0name.</p> <p>Notice that we have inherited the\u00a0Program1\u00a0class from the\u00a0StudentName\u00a0class.</p> <p>Since the\u00a0<code>private protected</code>\u00a0member can be accessed from derived classes within the same assembly, we are able to access\u00a0name\u00a0from the\u00a0Program1\u00a0class.</p> <p>Let's derive a class from\u00a0StudentName\u00a0in another assembly and try to access the private protected field\u00a0name\u00a0from it. </p> <p>For example,</p> <pre><code>// Code in Assembly2\nusing System;\n//access Assembly1\nusing Assembly1;\nnamespace Assembly2 {\n//derived class of StudentName\nclass Program : StudentName {\nstatic void Main(string[] args) {\nProgram student = new Program();\n// accessing name field from Assembly1\nConsole.Write(student.name);\nConsole.ReadLine();\n}\n}\n}\n</code></pre> <p>The above code is in\u00a0Assembly2</p> <p>In the above example, when we try to access the\u00a0name\u00a0field from the derived class of\u00a0StudentName, we get an error.</p> <pre><code>Error    CS0122    'StudentName.name' is inaccessible due to its protection level    </code></pre> <p>This is because the\u00a0name\u00a0field is in\u00a0Assembly1\u00a0and the derived class is in\u00a0Assembly2.</p> <p>Note: We can also use access modifiers with types (classes, interface, etc). However, we can only use types with public and internal access modifiers.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-variable-scope","title":"C# Variable Scope","text":"<p>In this tutorial, you will learn about variable scope in C# with the help of examples.</p> <p>A variable scope refers to the availability of variables in certain parts of the code.</p> <p>In C#, a variable has three types of scope:</p> <ul> <li>Class Level Scope</li> <li>Method Level Scope</li> <li>Block Level Scope</li> </ul>"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-class-level-variable-scope","title":"C# Class Level Variable Scope","text":"<p>In C#, when we declare a variable inside a class, the variable can be accessed within the class. This is known as\u00a0class level variable scope.</p> <p>Class level variables are known as fields and they are declared outside of methods, constructors, and blocks of the class. For example,</p> <pre><code>using System;\nnamespace VariableScope {\nclass Program {\n// class level variable\nstring str = \"Class Level\";\npublic void display() {\nConsole.WriteLine(str);\n}\nstatic void Main(string[] args) {\nProgram ps = new Program();\nps.display();\nConsole.ReadLine();\n}\n}\n}\n</code></pre> <p>Output</p> <pre><code>Class Level\n</code></pre> <p>In the above example, we have initialized a variable named\u00a0str\u00a0inside the\u00a0Program\u00a0class.</p> <p>Since it is a class level variable, we can access it from a method present inside the class.</p> <pre><code>public void display() {\nConsole.WriteLine(str);\n}\n</code></pre> <p>This is because the class level variable is accessible throughout the class.</p> <p>Note: We cannot access the class level variable through static methods. For example, suppose we have a static method inside the\u00a0Program\u00a0class.</p> <pre><code>static void display2() {\n// Access class level variable\n// Cause an Error\nConsole.WriteLine(str);\n}\n</code></pre>"},{"location":"week-7-csharp/ce103-week-7-csharp/#method-level-variable-scope","title":"Method Level Variable Scope","text":"<p>When we declare a variable inside a method, the variable cannot be accessed outside of the method. This is known as\u00a0method level variable scope. For example,</p> <pre><code>using System;\nnamespace VariableScope {\nclass Program {\npublic void method1() {\n// display variable inside method\nstring str = \"method level\";\n}\npublic void method2() {\n// accessing str from method2()\nConsole.WriteLine(str);\n}\nstatic void Main(string[] args) {\nProgram ps = new Program();\nps.method2();\nConsole.ReadLine();\n}\n}\n}\n</code></pre> <p>In the above example, we have created a variable named\u00a0str\u00a0inside\u00a0<code>method1()</code>.</p> <pre><code>// Inside method1()\nstring str = \"method level\";\n</code></pre> <p>Here,\u00a0str\u00a0is a method level variable. So, it cannot be accessed outside\u00a0<code>method1()</code>.</p> <p>However, when we try to access the\u00a0<code>str</code>\u00a0variable from the\u00a0<code>method2()</code></p> <pre><code>// Inside method2\nConsole.WriteLine(str);  // Error code\n</code></pre> <p>we get an error.</p> <pre><code>Error   CS0103     The name 'str' does not exist in the current context  </code></pre> <p>This is because method level variables have scope inside the method where they are created. </p> <p>For example,</p> <pre><code>using System;\nnamespace VariableScope {\nclass Program {\npublic void display() {\nstring str = \"inside method\";\n// accessing method level variable\nConsole.WriteLine(str);\n}\nstatic void Main(string[] args) {\nProgram ps = new Program();\nps.display();\nConsole.ReadLine();\n}\n}\n}\n</code></pre> <p>Output</p> <pre><code>inside method\n</code></pre> <p>Here, we have created the\u00a0str\u00a0variable and accessed it within the same method\u00a0<code>display()</code>. Hence, the code runs without any error.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#block-level-variable-scope-in-c","title":"Block Level Variable Scope in C","text":"<p>When we declare a variable inside a block (for loop,\u00a0while loop,\u00a0if..else), the variable can only be accessed within the block. This is known as\u00a0block level variable scope. </p> <p>For example,</p> <pre><code>using System;\nnamespace VariableScope {\nclass Program {\npublic void display() {\nfor(int i=0;i&lt;=3;i++) {\n}\nConsole.WriteLine(i);\n}\nstatic void Main(string[] args) {\nProgram ps = new Program();\nps.display();\nConsole.ReadLine();\n}\n}\n}\n</code></pre> <p>In the above program, we have initialized a block level variable\u00a0<code>i</code>\u00a0inside the\u00a0<code>for</code>\u00a0loop.</p> <pre><code>for(int i=0;i&lt;=3;i++) {\n}\n</code></pre> <p>Since\u00a0i\u00a0is a block level variable, when we try to access the variable outside the\u00a0for\u00a0loop,</p> <pre><code>// Outside for loop\nConsole.WriteLine(i);\n</code></pre> <p>we get an error.</p> <pre><code>Error     CS0103  The name 'i' does not exist in the current context\n</code></pre>"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-constructor","title":"C# Constructor","text":"<p>In this tutorial, we will learn about the C# constructors and their types with the help of examples.</p> <p>In C#, a constructor is similar to a method that is invoked when an object of the class is created.</p> <p>However, unlike methods, a constructor:</p> <ul> <li>has the same name as that of the class</li> <li>does not have any return type</li> </ul>"},{"location":"week-7-csharp/ce103-week-7-csharp/#create-a-c-constructor","title":"Create a C# constructor","text":"<p>Here's how we create a constructor in C#</p> <pre><code>class Car {\n// constructor\nCar() {\n//code\n}\n}\n</code></pre> <p>Here,\u00a0Car()\u00a0is a constructor. It has the same name as its class.</p> <p>Call a constructor</p> <p>Once we create a constructor, we can call it using the\u00a0<code>new</code>\u00a0keyword. For example,</p> <pre><code>new Car();\n</code></pre> <p>In C#, a constructor is called when we try to create an object of a class. For example,</p> <pre><code>Car car1 = new Car();\n</code></pre> <p>Here, we are calling the\u00a0Car()\u00a0constructor to create an object\u00a0car1.  To learn more about objects, visit\u00a0C# Class and Objects.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#types-of-constructors","title":"Types of Constructors","text":"<p>There are the following types of constructors:</p> <ul> <li>Parameterless Constructor</li> <li>Parameterized Constructor</li> <li>Default Constructor</li> </ul>"},{"location":"week-7-csharp/ce103-week-7-csharp/#1-parameterless-constructor","title":"1. Parameterless Constructor","text":"<p>When we create a constructor without parameters, it is known as a parameterless constructor. </p> <p>For example,</p> <pre><code>using System;\nnamespace Constructor {\nclass Car {   // parameterless constructor\nCar() {\nConsole.WriteLine(\"Car Constructor\");\n}\nstatic void Main(string[] args) {\n// call constructor\nnew Car();\nConsole.ReadLine();\n}\n}\n}\n</code></pre> <p>Output</p> <pre><code>Car Constructor\n</code></pre> <p>In the above example, we have created a constructor named\u00a0Car().</p> <pre><code>new Car();\n</code></pre> <p>We can call a constructor by adding a\u00a0<code>new</code>\u00a0keyword to the constructor name.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#2-c-parameterized-constructor","title":"2. C# Parameterized Constructor","text":"<p>In C#, a constructor can also accept parameters. It is called a parameterized constructor. For example,</p> <pre><code>using System;\nnamespace Constructor {\nclass Car {   string brand;\nint price;\n// parameterized constructor\nCar(string theBrand, int thePrice) {\nbrand = theBrand;\nprice = thePrice;\n}\nstatic void Main(string[] args) {\n// call parameterized constructor\nCar car1 = new Car(\"Bugatti\", 50000);\nConsole.WriteLine(\"Brand: \" + car1.brand);\nConsole.WriteLine(\"Price: \" + car1.price);\nConsole.ReadLine();\n}\n}\n}\n</code></pre> <p>Output</p> <pre><code>Brand: Bugatti\nPrice: 50000\n</code></pre> <p>In the above example, we have created a constructor named\u00a0<code>Car()</code>.  The constructor takes two parameters:\u00a0theBrand\u00a0and\u00a0thePrice.</p> <p>Notice the statement,</p> <pre><code>Car car1 = new Car(\"Bugatti\", 50000);\n</code></pre> <p>Here, we are passing the two values to the constructor. The values passed to the constructor are called arguments.  We must pass the same number and type of values as parameters.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#3-default-constructor","title":"3. Default Constructor","text":"<p>If we have not defined a constructor in our class, then the C# will automatically create a default constructor with an empty code and no parameters. For example,</p> <pre><code>using System;\nnamespace Constructor {\nclass Program {  int a;\nstatic void Main(string[] args) {\n// call default constructor\nProgram p1 = new Program();\nConsole.WriteLine(\"Default value of a: \" + p1.a);\nConsole.ReadLine();\n}\n}\n}\n</code></pre> <p>Output</p> <pre><code>Default value of a: 0\n</code></pre> <p>In the above example, we have not created any constructor in the\u00a0Program\u00a0class. However, while creating an object, we are calling the constructor.</p> <p><code>Program p1 = new Program();</code></p> <p>Here, C# automatically creates a default constructor. The default constructor initializes any uninitialized variable with the default value.</p> <p>Hence, we get\u00a00\u00a0as the value of the\u00a0<code>int</code>\u00a0variable\u00a0a.</p> <p>Note: In the default constructor, all the numeric fields are initialized to 0, whereas string and object are initialized as null.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#4-copy-constructor-in-c","title":"4. Copy Constructor in C","text":"<p>We use a copy constructor to create an object by copying data from another object. For example,</p> <pre><code>using System;\nnamespace Constructor {\nclass Car {  string brand;\n// constructor\nCar (string theBrand) {\nbrand = theBrand;\n}\n// copy constructor\nCar(Car c1) {\nbrand = c1.brand;\n}\nstatic void Main(string[] args) {\n// call constructor\nCar car1 = new Car(\"Bugatti\");\nConsole.WriteLine(\"Brand of car1: \" + car1.brand);\n// call the copy constructor\nCar car2 = new Car(car1);\nConsole.WriteLine(\"Brand of car2: \" + car2.brand);\nConsole.ReadLine();\n}\n}\n}\n</code></pre> <p>Output</p> <pre><code>Brand of car1: Bugatti\nBrand of car2: Bugatti\n</code></pre> <p>In the above program, we have used a copy constructor.</p> <pre><code>Car(Car c1) {\nbrand = c1.brand;\n}\n</code></pre> <p>Here, this constructor accepts an object of\u00a0Car\u00a0as its parameter. So, when creating the\u00a0car2\u00a0object, we have passed the\u00a0car1\u00a0object as an argument to the copy constructor.</p> <pre><code>Car car2 = new Car(car1);\n</code></pre> <p>Inside the copy constructor, we have assigned the value of the\u00a0brand\u00a0for\u00a0car1\u00a0object to the\u00a0brand\u00a0variable for\u00a0car2\u00a0object. Hence, both objects have the same value of the\u00a0brand.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#5-private-constructor","title":"5. Private Constructor","text":"<p>We can create a private constructor using the\u00a0<code>private</code> access specifier. This is known as a private constructor in C#.</p> <p>Once the constructor is declared private, we cannot create objects of the class in other classes.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-1-private-constructor","title":"Example 1: Private Constructor","text":"<pre><code>using System;\nnamespace Constructor {\nclass Car {  // private constructor\nprivate Car () {\nConsole.WriteLine(\"Private Constructor\");    }\n}\nclass CarDrive {\nstatic void Main(string[] args) {\n// call private constructor\nCar car1 = new Car();\nConsole.ReadLine();\n}\n}\n}\n</code></pre> <p>In the above example, we have created a private constructor\u00a0Car(). Since private members are not accessed outside of the class, when we try to create an object of\u00a0Car</p> <pre><code>// inside CarDrive class\nCar car1 = new Car();\n</code></pre> <p>we get an error</p> <pre><code>error CS0122: 'Car.Car()' is inaccessible due to its protection level\n</code></pre> <p>Note: If a constructor is private, we cannot create objects of the class. Hence, all fields and methods of the class should be declared static, so that they can be accessed using the class name.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#6-c-static-constructor","title":"6. C# Static Constructor","text":"<p>In C#, we can also make our constructor static. We use the\u00a0<code>static</code>\u00a0keyword to create a static constructor. For example,</p> <pre><code>using System;\nnamespace Constructor {\nclass Car {  // static constructor\nstatic Car () {\nConsole.WriteLine(\"Static Constructor\");    }\n// parameterless constructor\nCar() {\nConsole.WriteLine(\"Default Constructor\");\n} static void Main(string[] args) {\nCar car1 = new Car(); // call parameterless constructor\nCar car2 = new Car(); // call parameterless constructor again\nConsole.ReadLine();\n}\n}\n}\n</code></pre> <p>In the above example, we have created a static constructor.</p> <pre><code>static Car () {\nConsole.WriteLine(\"Static Constructor\");    }\n</code></pre> <p>We cannot call a static constructor directly. However, when we call a regular constructor, the static constructor gets called automatically.</p> <pre><code>Car car1 = new Car();\n</code></pre> <p>Here, we are calling the\u00a0Car()\u00a0constructor. You can see that the static constructor is also called along with the regular constructor.</p> <p>Output</p> <pre><code>Static Constructor\nDefault Constructor\nDefault Constructor\n</code></pre> <p>The static constructor is called only once during the execution of the program. That's why when we call the constructor again, only the regular constructor is called.</p> <p>Note: We can have only one static constructor in a class. It cannot have any parameters or access modifiers.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-constructor-overloading","title":"C# Constructor Overloading","text":"<p>In C#, we can create two or more constructor in a class. It is known as constructor overloading. </p> <p>For example,</p> <pre><code>using System;\nnamespace ConstructorOverload {\nclass Car {   // constructor with no parameter\nCar() {\nConsole.WriteLine(\"Car constructor\");\n}\n// constructor with one parameter\nCar(string brand) {\nConsole.WriteLine(\"Car constructor with one parameter\");\nConsole.WriteLine(\"Brand: \" + brand);\n}\nstatic void Main(string[] args) {\n// call constructor with no parameter\nCar car = new Car();\nConsole.WriteLine();\n// call constructor with parameter\nCar car2 =  new Car(\"Bugatti\");\nConsole.ReadLine();\n}\n}\n}\n</code></pre> <p>Output</p> <pre><code>Car constructor\nCar constructor with one parameter\nBrand: Bugatti\n</code></pre> <p>In the above example, we have overloaded the\u00a0Car\u00a0constructor:</p> <ul> <li>one constructor has one parameter</li> <li>another has two parameter</li> </ul> <p>Based on the number of the argument passed during the constructor call, the corresponding constructor is called.</p> <p>Here,</p> <ul> <li>Object\u00a0car\u00a0- calls constructor with one parameter</li> <li>Object\u00a0car2\u00a0- calls constructor with two parameter</li> </ul> <p>To learn more visit C#\u00a0Constructor Overloading.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-this-keyword","title":"C# this Keyword","text":"<p>In this article, we will learn about this keyword in C# with the help of examples.</p> <p>In C#,\u00a0<code>this</code>\u00a0keyword refers to the current instance of a class. </p> <p>For example,</p> <pre><code>using System;\nnamespace ThisKeyword {\nclass Test {\nint num;\nTest(int num) {\n// this.num refers to the instance field\nthis.num = num;\nConsole.WriteLine(\"object of this: \" + this);\n}\nstatic void Main(string[] args) {\nTest t1 = new Test(4);\nConsole.WriteLine(\"object of t1: \" + t1);\nConsole.ReadLine();\n}\n}\n}\n</code></pre> <p>Output</p> <pre><code>object of this: ThisKeyword.Test\nobject of t1: ThisKeyword.Test\n</code></pre> <p>In the above example, we have created an object named\u00a0t1\u00a0of the class\u00a0Test. We have printed the name of the object\u00a0t1\u00a0and\u00a0<code>this</code>\u00a0keyword of the class.</p> <p>Here, we can see the name of both\u00a0t1\u00a0and\u00a0<code>this</code>\u00a0is the same. This is because\u00a0<code>this</code>\u00a0keyword refers to the current instance of the class which is\u00a0t1.</p> <p>Here are some of the major uses of\u00a0<code>this</code>\u00a0keyword in C#.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-this-with-same-name-variables","title":"C# this with Same Name Variables","text":"<p>We cannot declare two or more variables with the same name inside a scope (class or method). However, instance variables and parameters may have the same name. For example,</p> <pre><code>using System;\nnamespace ThisKeyword {\nclass Test {\nint num;\nTest(int num) {\nnum = num;\n}\nstatic void Main(string[] args) {\nTest t1 = new Test(4);\nConsole.WriteLine(\"value of num: \" + t1.num);\nConsole.ReadLine();\n}\n}\n}\n</code></pre> <p>Output</p> <pre><code>0\n</code></pre> <p>In the above program, the instance variable and the parameter have the same name:\u00a0num. We have passed\u00a04\u00a0as a value to the constructor.</p> <p>However, we are getting\u00a00\u00a0as an output. This is because the C# gets confused because the names of the instance variable and the parameter are the same.</p> <p>We can solve this issue by using\u00a0<code>this</code>.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-this-with-same-name-variables","title":"Example: this with Same Name Variables","text":"<pre><code>using System;\nnamespace ThisKeyword {\nclass Test {\nint num;\nTest(int num) {\n// this.num refers to the instance field\nthis.num = num;\n}\nstatic void Main(string[] args) {\nTest t1 = new Test(4);\nConsole.WriteLine(\"value of num: \" +t1.num);\nConsole.ReadLine();\n}\n}\n}\n</code></pre> <p>Output</p> <pre><code>value of num: 4\n</code></pre> <p>Now, we are getting the expected output that is\u00a04. It is because\u00a0<code>this.num</code>\u00a0refers to the instance variable of the class.</p> <p>So, there is no confusion between the names of the instance variable and the parameter.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#invoke-constructor-of-the-same-class-using-this","title":"Invoke Constructor of the Same Class Using this","text":"<p>While working with constructor overloading, we might have to invoke one constructor from another constructor. In this case, we can use\u00a0<code>this</code>\u00a0keyword. For example,</p> <pre><code>using System;\nnamespace ThisKeyword {\nclass Test {\nTest(int num1, int num2) {\nConsole.WriteLine(\"Constructor with two parameter\");\n}\n// invokes the constructor with 2 parameters\nTest(int num) : this(33, 22) {      Console.WriteLine(\"Constructor with one parameter\");    }\npublic static void Main(String[] args) {\nTest t1 = new Test(11); Console.ReadLine();   }\n}\n}\n</code></pre> <p>Output</p> <pre><code>Constructor with two parameter\nConstructor with one parameter\n</code></pre> <p>In the above example, we have used\u00a0<code>:</code>\u00a0followed by\u00a0<code>this</code>\u00a0keyword to call constructor\u00a0<code>Test(int num1, num2)</code>\u00a0from the constructor\u00a0<code>Test(int num)</code>.</p> <p>When we call the\u00a0<code>Test(int num)</code>\u00a0constructor the\u00a0<code>Test(int num1, int num2)</code>\u00a0constructor executes first.</p> <p>Note: Calling one constructor from another constructor is known as constructor chaining.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-this-as-an-object-argument","title":"C# this as an object argument","text":"<p>We can use\u00a0<code>this</code>\u00a0keyword to pass the current object as an argument to a method. For example,</p> <pre><code>using System;\nnamespace ThisKeyword {\nclass Test {\nint num1;\nint num2;\nTest() {\nnum1 = 22;\nnum2 = 33;\n}\n// method that accepts this as argument   \nvoid passParameter(Test t1) {\nConsole.WriteLine(\"num1: \" + num1);\nConsole.WriteLine(\"num2: \" + num2);\n}\nvoid display() {\n// passing this as a parameter\npassParameter(this);\n}\npublic static void Main(String[] args) {\nTest t1 = new Test();\nt1.display();\nConsole.ReadLine();\n}\n}\n}\n</code></pre> <p>Output</p> <pre><code>num1: 22\nnum2: 33\n</code></pre> <p>In the above program, we have a method\u00a0passParameter(). It accepts the object of the class as an argument.</p> <pre><code>passParameter(this);\n</code></pre> <p>Here, we have passed\u00a0<code>this</code>\u00a0to the\u00a0passParameter()\u00a0method. As\u00a0<code>this</code>\u00a0refers to the instance of the class, we are able to access the value of\u00a0num1\u00a0and\u00a0num2.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#this-to-declare-a-c-indexer","title":"this to declare a C# indexer","text":"<p>Indexers allow objects of a class to be indexed just like arrays. We use this keyword to declare an indexer in C#. For example,</p> <pre><code>using System;\nnamespace ThisKeyword {\nclass Student {\nprivate string[] name = new string[3];\n// declaring an indexer\npublic string this[int index] {      // returns value of array element\nget { return name[index]; }            // sets value of array element\nset { name[index] = value; }    }\n}\nclass Program {\npublic static void Main() {\nStudent s1 = new Student();\ns1[0] = \"Ram\";\ns1[1] = \"Shyam\";\ns1[2] = \"Gopal\";\nfor (int i = 0; i &lt; 3; i++) {\nConsole.WriteLine(s1[i] + \" \");\n}\n}\n}\n}\n</code></pre> <p>Output</p> <pre><code>Ram\nShyam\nGopal\n</code></pre> <p>In the above program, we have created an indexer using\u00a0<code>this</code>\u00a0keyword.</p> <p>The array\u00a0name[]\u00a0is private. So, we cannot access it from the\u00a0Program\u00a0class.</p> <p>Now, to access and set the value of the array, we use an indexer.</p> <pre><code>Student s1 = new Student();\ns1[0] = \"Ram\";\ns1[1] = \"Shyam\";\ns1[2] = \"Gopal\";\n</code></pre> <p>As we have used\u00a0<code>this</code>\u00a0to create an indexer, we must use the object of the\u00a0Student\u00a0class to access the indexer.\u00a0To know more about the indexer, visit C# indexer.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-static-keyword","title":"C# static Keyword","text":"<p>In this tutorial, we will learn about the static keyword in C# with the help of examples.</p> <p>In C#, if we use a\u00a0<code>static</code>\u00a0keyword with class members, then there will be a single copy of the type member.</p> <p>And, all objects of the class share a single copy instead of creating individual copies.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-static-variables","title":"C# Static Variables","text":"<p>If a variable is declared\u00a0<code>static</code>, we can access the variable using the class name. For example,</p> <pre><code>using System;\nnamespace StaticKeyword {\nclass Student {\n// static variable\npublic static string department = \"Computer Science\";\n}\nclass Program {\nstatic void Main(string[] argos) {\n// access static variable\nConsole.WriteLine(\"Department: \" + Student.department);\nConsole.ReadLine();\n}\n}\n}\n</code></pre> <p>Output</p> <pre><code>Department: Computer Science\n</code></pre> <p>In the above example, we have created a static variable named\u00a0department. Since the variable is static, we have used the class name\u00a0Student\u00a0to access the variable.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#static-variables-vs-instance-variables","title":"Static Variables Vs Instance Variables","text":"<p>In C#, every object of a class will have its own copy of instance variables. For example,</p> <pre><code>class Student {\n// instance variable\npublic string studentName;\n}\nclass Program {\nstatic void Main(string[] args) {\nStudent s1 = new Student();\nStudent s2 = new Student();\n}\n}\n</code></pre> <p>Here, both the objects\u00a0s1\u00a0and\u00a0s2\u00a0will have separate copies of the variable\u00a0studentName. And, they are different from each other.</p> <p>However, if we declare a variable static, all objects of the class share the same static variable. And, we don't need to create objects of the class to access the static variables.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-c-static-variable-vs-instance-variable","title":"Example: C# Static Variable Vs. Instance Variable","text":"<pre><code>using System;\nnamespace StaticKeyword {\nclass Student {\nstatic public string schoolName = \"Programiz School\";\npublic string studentName;\n}\nclass Program {\nstatic void Main(string[] args) {\nStudent s1 = new Student();\ns1.studentName = \"Ram\";\n// calls instance variable\nConsole.WriteLine(\"Name: \" + s1.studentName);\n// calls static variable\nConsole.WriteLine(\"School: \" + Student.schoolName);\nStudent s2 = new Student();\ns2.studentName = \"Shyam\";\n// calls instance variable\nConsole.WriteLine(\"Name: \" + s2.studentName);\n// calls static variable\nConsole.WriteLine(\"School: \" + Student.schoolName);\nConsole.ReadLine();\n}\n}\n}\n</code></pre> <p>Output</p> <pre><code>Name: Ram\nSchool: Programiz School\nName: Shyam\nSchool: Programiz School\n</code></pre> <p>In the above program, the Student class has a non-static variable named\u00a0studentName\u00a0and a static variable named\u00a0schoolName.</p> <p>Inside the\u00a0Program\u00a0class,</p> <ul> <li><code>s1.studentName</code>\u00a0/\u00a0<code>s2.studentName</code>\u00a0- calls the non-static variable using objects\u00a0s1\u00a0and\u00a0s2\u00a0respectively</li> <li><code>Student.schoolName</code>\u00a0- calls the static variable by using the class name</li> </ul> <p>Since the\u00a0schoolName\u00a0is the same for all students, it is good to make the\u00a0schoolName\u00a0static. It saves memory and makes the program more efficient.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-static-methods","title":"C# Static Methods","text":"<p>Just like static variables, we can call the static methods using the class name.</p> <pre><code>class Test {\npublic static void display() {....}\n}\nclass Program {\nstatic void Main(string[] args) {\nTest.display();\n}\n}\n</code></pre> <p>Here, we have accessed the static method directly from\u00a0Program\u00a0classes using the class name.</p> <p>When we declare a method static, all objects of the class share the same static method.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-c-static-and-non-static-methods","title":"Example: C# Static and Non-static Methods","text":"<pre><code>using System;\nnamespace StaticKeyword {\nclass Test {\npublic void display1() {\nConsole.WriteLine(\"Non static method\");\n}\npublic static void display2() {\nConsole.WriteLine(\"Static method\");\n}\n}\nclass Program {\nstatic void Main(string[] args) {\nTest t1 = new Test();\nt1.display1();\nTest.display2();    Console.ReadLine();\n}\n}\n}\n</code></pre> <p>Output</p> <pre><code>Non static method\nStatic method\n</code></pre> <p>In the above program, we have declared a non-static method named\u00a0display1()\u00a0and a static method named\u00a0display2()\u00a0inside the class\u00a0Test.</p> <p>Inside the Program class,</p> <ul> <li><code>t1.display1()</code>\u00a0- access the non-static method using\u00a0s1\u00a0object</li> <li><code>Test.display2()</code>\u00a0- access the static method using the class name\u00a0Test</li> </ul> <p>Note: In C#, the\u00a0Main\u00a0method is static. So, we can call it without creating the object.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-static-class","title":"C# Static Class","text":"<p>In C#, when we declare a class as static, we cannot create objects of the class. For example,</p> <pre><code>using System;\nnamespace StaticKeyword {\nstatic class Test {\nstatic int a = 5;\nstatic void display() {\nConsole.WriteLine(\"Static method\");\n}\nstatic void Main(string[] args) {\n// creating object of Test\nTest t1 = new Test();\nConsole.WriteLine(a);\ndisplay();\n}\n}\n}\n</code></pre> <p>In the above example, we have a static class\u00a0Test. We have created an object\u00a0t1\u00a0of the class\u00a0Test.</p> <p>Since we cannot make an object of the static class, we get the following error:</p> <pre><code>error CS0723: Cannot declare a variable of static type 'Test' error CS0712: Cannot create an instance of the static class\n</code></pre> <p>Notice the field and method of the static class are also static because we can only have static members inside the static class.</p> <p>Note: We cannot inherit a static class in C#. For example,</p> <pre><code>static class A {\n...\n}\n// Error Code\nclass B : A {\n...\n}\n</code></pre>"},{"location":"week-7-csharp/ce103-week-7-csharp/#access-static-members-within-the-class","title":"Access static Members within the Class","text":"<p>If we are accessing the static variables and methods inside the same class, we can directly access them without using the class name. For example,</p> <pre><code>using System;\nnamespace StaticKeyword {\nclass Test {\nstatic int age = 25;\npublic static void display() {\nConsole.WriteLine(\"Static method\");\n}\nstatic void Main(string[] args) {\nConsole.WriteLine(age);\ndisplay();\nConsole.ReadLine();\n}\n}\n}\n</code></pre> <p>Output</p> <pre><code>25\nStatic method\n</code></pre> <p>Here, we are accessing the static field\u00a0age\u00a0and static method\u00a0<code>display()</code>\u00a0without using the class name.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-string","title":"C# String","text":"<p>In this tutorial, we will learn about C# string and its methods with the help of examples.</p> <p>In C#, a string is a sequence of characters. For example,\u00a0<code>\"hello\"</code>\u00a0is a string containing a sequence of characters\u00a0<code>'h'</code>,\u00a0<code>'e'</code>,\u00a0<code>'l'</code>,\u00a0<code>'l'</code>, and\u00a0<code>'o'</code>.</p> <p>We use the\u00a0<code>string</code>\u00a0keyword to create a string. For example,</p> <pre><code>// create a string\nstring str = \"C# Programming\";\n</code></pre> <p>Here, we have created a\u00a0<code>string</code>\u00a0named\u00a0str\u00a0and assigned the text\u00a0<code>\"C# Programming\"</code>. We use double quotes to represent strings in C#.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-create-string-in-c","title":"Example: Create string in C","text":"<pre><code>using System;  namespace CsharpString {  class Test {\npublic static void Main(string [] args) {\n// create string\nstring str1 = \"C# Programming\";      string str2 = \"Programiz\";\n// print string\nConsole.WriteLine(str1);\nConsole.WriteLine(str2);\nConsole.ReadLine();\n}\n} }\n</code></pre> <p>Output</p> <pre><code>C# Programming\nProgramiz\n</code></pre> <p>In the above example, we have created two strings named\u00a0str1\u00a0and\u00a0str2\u00a0and printed them.</p> <p>Note: A string variable in C# is not of primitive types like\u00a0<code>int</code>,\u00a0<code>char</code>, etc. Instead, it is an object of the\u00a0<code>String</code>\u00a0class.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#string-operations","title":"String Operations","text":"<p>C# string provides various methods to perform different operations on strings. We will look into some of the commonly used string operations.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#1-get-the-length-of-a-string","title":"1. Get the Length of a string","text":"<p>To find the length of a string, we use the\u00a0<code>Length</code>\u00a0property. For example,</p> <pre><code>using System;  namespace CsharpString {  class Test {\npublic static void Main(string [] args) {\n// create string\nstring str = \"C# Programming\";\nConsole.WriteLine(\"string: \" + str);\n// get length of str\nint length = str.Length;     Console.WriteLine(\"Length: \"+ length);\nConsole.ReadLine();\n}\n} }\n</code></pre> <p>Output</p> <pre><code>string: C# Programming\nLength: 14\n</code></pre> <p>In the above example, the\u00a0<code>Length</code>\u00a0property calculates the total number of characters in the string and returns it.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#2-join-two-strings-in-c","title":"2. Join two strings in C","text":"<p>We can join two strings in C# using the\u00a0<code>Concat()</code>\u00a0method. For example,</p> <pre><code>using System;  namespace CsharpString {  class Test {\npublic static void Main(string [] args) {\n// create string\nstring str1 = \"C# \";\nConsole.WriteLine(\"string str1: \" + str1);\n// create string\nstring str2 = \"Programming\";\nConsole.WriteLine(\"string str2: \" + str2);\n// join two strings\nstring joinedString = string.Concat(str1, str2);\nConsole.WriteLine(\"Joined string: \" + joinedString);\nConsole.ReadLine();\n}\n} }\n</code></pre> <p>Output</p> <pre><code>string str1: C#\nstring str2: Programming\nJoined string: C# Programming\n</code></pre> <p>In the above example, we have created two strings named\u00a0str1\u00a0and\u00a0str2. Notice the statement,</p> <pre><code>string joinedString = string.Concat(str1, str2);\n</code></pre> <p>Here, the\u00a0<code>Concat()</code>\u00a0method joins\u00a0str1\u00a0and\u00a0str2\u00a0and assigns it to the\u00a0joinedString\u00a0variable.</p> <p>We can also join two strings using the\u00a0<code>+</code>\u00a0operator in C#. To learn more, visit\u00a0C# string Concat.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#3-c-compare-two-strings","title":"3. C# compare two strings","text":"<p>In C#, we can make comparisons between two strings using the\u00a0<code>Equals()</code>\u00a0method. The\u00a0<code>Equals()</code>\u00a0method checks if two strings are equal or not. For example,</p> <pre><code>using System;  namespace CsharpString {  class Test {\npublic static void Main(string [] args) {\n// create string\nstring str1 = \"C# Programming\";\nstring str2 = \"C# Programming\";\nstring str3 = \"Programiz\";\n// compare str1 and str2\nBoolean result1 = str1.Equals(str2);\nConsole.WriteLine(\"string str1 and str2 are equal: \" + result1);\n//compare str1 and str3\nBoolean result2 = str1.Equals(str3);\nConsole.WriteLine(\"string str1 and str3 are equal: \" + result2);     Console.ReadLine();\n}\n} }\n</code></pre> <p>Output</p> <pre><code>string str1 and str2 are equal: True\nstring str1 and str3 are equal: False\n</code></pre> <p>In the above example, we have created 3 strings named\u00a0str1,\u00a0str2, and\u00a0str3. Here, we are using the\u00a0<code>Equals()</code>\u00a0method to check if one string is equal to another.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#immutability-of-string-objects","title":"Immutability of String Objects","text":"<p>In C#, strings are immutable. This means, once we create a string, we cannot change that string.</p> <p>To understand it, consider an example:</p> <pre><code>// create string\nstring str = \"Hello \";\n</code></pre> <p>Here, we have created a string variable named\u00a0str. The variable holds the string\u00a0<code>\"Hello \"</code>.</p> <p>Now suppose we want to change the string\u00a0str.</p> <pre><code>// add another string \"World\"\n// to the previous string example\nstr = string.Concat(str, \"World\");\n</code></pre> <p>Here, we are using the\u00a0<code>Concat()</code>\u00a0method to add the string\u00a0\"World\"\u00a0to the previous string\u00a0str.</p> <p>But how are we able to modify the string when they are immutable?</p> <p>Let's see what has happened here,</p> <ol> <li>C# takes the value of the string\u00a0<code>\"Hello \"</code>.</li> <li>Creates a new string by adding\u00a0<code>\"World\"</code>\u00a0to the string\u00a0<code>\"Hello \"</code>.</li> <li>Creates a new string object, gives it a value\u00a0<code>\"Hello World\"</code>, and stores it in\u00a0str.</li> <li>The original string,\u00a0<code>\"Hello \"</code>, that was assigned to\u00a0str\u00a0is released for garbage collection because no other variable holds a reference to it.</li> </ol>"},{"location":"week-7-csharp/ce103-week-7-csharp/#string-escape-sequences","title":"String Escape Sequences","text":"<p>The escape character is used to escape some of the characters present inside a string. In other words, we use escape sequences to insert special characters inside the string.</p> <p>Suppose we need to include double quotes inside a string.</p> <pre><code>// include double quote\nstring str = \"This is the \"String\" class\";\n</code></pre> <p>Since strings are represented by double quotes, the compiler will treat\u00a0<code>\"This is the \"</code>\u00a0as the string. And the above code will cause an error.</p> <p>To solve this issue, we use the escape character\u00a0<code>\\\"</code>\u00a0in C#. For example,</p> <pre><code>// use the escape character\nstring str = \"This is the \\\"String\\\" class.\";\n</code></pre> <p>Now by using\u00a0<code>\\</code>\u00a0before double quote\u00a0<code>\"</code>, we can include it in the string.</p> <p>Some of the escape sequences in C# are as follows:</p> Escape Sequence Character Name <code>\\'</code> single quote <code>\\\"</code> double quote <code>\\\\</code> backslash <code>\\0</code> null <code>\\n</code> new line <code>\\t</code> horizontal tab"},{"location":"week-7-csharp/ce103-week-7-csharp/#string-interpolation","title":"String interpolation","text":"<p>In C#, we can use string interpolation to insert variables inside a string. For string interpolation, the string literal must begin with the\u00a0<code>$</code>\u00a0character. For example,</p> <pre><code>using System;  namespace CsharpString {  class Test {\npublic static void Main(string [] args) {\n// create string\nstring name = \"Programiz\";\n// string interpolation\nstring message = $\"Welcome to {name}\";\nConsole.WriteLine(message);\nConsole.ReadLine();\n}\n} }\n</code></pre> <p>Output</p> <pre><code>Welcome to Programiz\n</code></pre> <p>In the above example, we are using the\u00a0name\u00a0variable inside the\u00a0message\u00a0string.</p> <pre><code>string message = $\"Welcome to {name}\";\n</code></pre> <p>Notice that,</p> <ul> <li>the string literal starts with\u00a0<code>$</code></li> <li>the\u00a0name\u00a0variable is placed inside the curly braces\u00a0<code>{}</code></li> </ul>"},{"location":"week-7-csharp/ce103-week-7-csharp/#methods-of-c-string","title":"Methods of C# string","text":"<p>There are various string methods in C#. Some of them are as follows:</p> Methods Description <code>Format()</code> returns a formatted string <code>Split()</code> splits the string into substring <code>Substring()</code> returns substring of a string <code>Compare()</code> compares string objects <code>Replace()</code> replaces the specified old character with the specified new character <code>Contains()</code> checks whether the string contains a substring <code>Join()</code> joins the given strings using the specified separator <code>Trim()</code> removes any leading and trailing whitespaces <code>EndsWith()</code> checks if the string ends with the given string <code>IndexOf()</code> returns the position of the specified character in the string <code>Remove()</code> returns characters from a string <code>ToUpper()</code> converts the string to uppercase <code>ToLower()</code> converts the string to lowercase <code>PadLeft()</code> returns string padded with spaces or with a specified Unicode character on the left <code>PadRight()</code> returns string padded with spaces or with a specified Unicode character on the right <code>StartsWith()</code> checks if the string begins with the given string <code>ToCharArray()</code> converts the string to a <code>char</code> array <code>LastIndexOf()</code> returns index of the last occurrence of a specified string"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-inheritance-oop-ii","title":"C# Inheritance  -  OOP (II)","text":""},{"location":"week-7-csharp/ce103-week-7-csharp/#c-inheritance","title":"C# Inheritance","text":"<p>In this tutorial, we will learn about C# inheritance and its types with the help of examples.</p> <p>In C#, inheritance allows us to create a new class from an existing class. It is a key feature of Object-Oriented Programming (OOP).</p> <p>The class from which a new class is created is known as the base class (parent or superclass). And, the new class is called derived class (child or subclass)</p> <p>The derived class inherits the fields and methods of the base class. This helps with the code reusability in C#.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#how-to-perform-inheritance-in-c","title":"How to perform inheritance in C#?","text":"<p>In C#, we use the\u00a0<code>:</code>\u00a0symbol to perform inheritance. For example,</p> <pre><code>class Animal {  // fields and methods\n} // Dog inherits from Animal\nclass Dog : Animal {\n// fields and methods of Animal \n// fields and methods of Dog \n}\n</code></pre> <p>Here, we are inheriting the derived class\u00a0Dog\u00a0from the base class\u00a0Animal. The\u00a0Dog\u00a0class can now access the fields and methods of\u00a0Animal\u00a0class.</p> <p></p> <p>C# Inheritance</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-c-inheritance","title":"Example: C# Inheritance","text":"<pre><code>using System;\nnamespace Inheritance {\n// base class\nclass Animal { public string name;\npublic void display() {\nConsole.WriteLine(\"I am an animal\");\n}\n} // derived class of Animal \nclass Dog : Animal {\npublic void getName() {\nConsole.WriteLine(\"My name is \" + name);\n}\n}\nclass Program {\nstatic void Main(string[] args) {\n// object of derived class\nDog labrador = new Dog();\n// access field and method of base class\nlabrador.name = \"Rohu\";      labrador.display();\n// access method from own class\nlabrador.getName();\nConsole.ReadLine();\n}\n}\n}\n</code></pre> <p>Output</p> <pre><code>I am an animal\nMy name is Rohu\n</code></pre> <p>In the above example, we have derived a subclass\u00a0Dog\u00a0from the superclass\u00a0Animal. Notice the statements,</p> <pre><code>labrador.name = \"Rohu\";\nlabrador.getName();\n</code></pre> <p>Here, we are using\u00a0labrador\u00a0(object of Dog) to access the\u00a0name\u00a0and\u00a0display()\u00a0of the\u00a0Animal\u00a0class. This is possible because the derived class inherits all fields and methods of the base class.</p> <p>Also, we have accessed the\u00a0name\u00a0field inside the method of the\u00a0Dog\u00a0class.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#is-a-relationship","title":"is-a relationship","text":"<p>In C#, inheritance is an is-a relationship. We use inheritance only if there is an is-a relationship between two classes. For example,</p> <ul> <li>Dog\u00a0is an\u00a0Animal</li> <li>Apple\u00a0is a\u00a0Fruit</li> <li>Car\u00a0is a\u00a0Vehicle</li> </ul> <p>We can derive\u00a0Dog\u00a0from\u00a0Animal\u00a0class. Similarly,\u00a0Apple\u00a0from\u00a0Fruit\u00a0class and\u00a0Car\u00a0from\u00a0Vehicle\u00a0class.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#protected-members-in-c-inheritance","title":"protected Members in C# Inheritance","text":"<p>When we declare a field or method as\u00a0<code>protected</code>, it can only be accessed from the same class and its derived classes.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-protected-members-in-inheritance","title":"Example: protected Members in Inheritance","text":"<pre><code>using System;\nnamespace Inheritance {\n// base class\nclass Animal { protected void eat() {      Console.WriteLine(\"I can eat\");    }\n} // derived class of Animal \nclass Dog : Animal {\nstatic void Main(string[] args) {\nDog labrador = new Dog();\n// access protected method from base class\nlabrador.eat();\nConsole.ReadLine();\n}\n}\n}\n</code></pre> <p>Output</p> <pre><code>I can eat\n</code></pre> <p>In the above example, we have created a class named\u00a0Animal. The class includes a protected method\u00a0eat().</p> <p>We have derived the\u00a0Dog\u00a0class from the\u00a0Animal\u00a0class. Notice the statement,</p> <pre><code>labrador.eat();\n</code></pre> <p>Since the\u00a0<code>protected</code>\u00a0method can be accessed from derived classes, we are able to access the\u00a0eat()\u00a0method from the\u00a0Dog\u00a0class.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#types-of-inheritance","title":"Types of inheritance","text":"<p>There are the following types of inheritance:</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#1-single-inheritance","title":"1. Single Inheritance","text":"<p>In single inheritance, a single derived class inherits from a single base class.</p> <p></p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#2-multilevel-inheritance","title":"2. Multilevel Inheritance","text":"<p>In multilevel inheritance, a derived class inherits from a base and then the same derived class acts as a base class for another class.</p> <p></p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#3-hierarchical-inheritance","title":"3. Hierarchical Inheritance","text":"<p>In hierarchical inheritance, multiple derived classes inherit from a single base class.</p> <p></p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#4-multiple-inheritance","title":"4. Multiple Inheritance","text":"<p>In multiple inheritance, a single derived class inherits from multiple base classes.\u00a0C# doesn't support multiple inheritance.\u00a0However, we can achieve multiple inheritance through interfaces.</p> <p></p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#5-hybrid-inheritance","title":"5. Hybrid Inheritance","text":"<p>Hybrid inheritance is a combination of two or more types of inheritance. The combination of multilevel and hierarchical inheritance is an example of Hybrid inheritance.</p> <p></p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#method-overriding-in-c-inheritance","title":"Method Overriding in C# Inheritance","text":"<p>If the same method is present in both the base class and the derived class, the method in the derived class overrides the method in the base class. This is called method overriding in C#. For example,</p> <pre><code>using System;\nnamespace Inheritance {\n// base class\nclass Animal { public virtual void eat() { Console.WriteLine(\"I eat food\");    }\n} // derived class of Animal \nclass Dog : Animal {\n// overriding method from Animal\npublic override void eat() {     Console.WriteLine(\"I eat Dog food\");    }     }\nclass Program {\nstatic void Main(string[] args) {\n// object of derived class\nDog labrador = new Dog();\n// accesses overridden method\nlabrador.eat();\n}\n}\n}\n</code></pre> <p>Output</p> <pre><code>I eat Dog food\n</code></pre> <p>In the above example, the\u00a0eat()\u00a0method is present in both the base class and derived class.</p> <p>When we call\u00a0eat()\u00a0using the\u00a0Dog\u00a0object\u00a0labrador,</p> <pre><code>labrador.eat();\n</code></pre> <p>the method inside\u00a0Dog\u00a0is called. This is because the method inside\u00a0Dog\u00a0overrides the same method inside\u00a0Animal.</p> <p>Notice, we have used\u00a0<code>virtual</code>\u00a0and\u00a0override\u00a0with methods of the base class and derived class respectively. Here,</p> <ul> <li><code>virtual</code>\u00a0- allows the method to be overridden by the derived class</li> <li><code>override</code>\u00a0- indicates the method is overriding the method from the base class</li> </ul>"},{"location":"week-7-csharp/ce103-week-7-csharp/#base-keyword-in-c-inheritance","title":"base Keyword in C# Inheritance","text":"<p>In the previous example, we saw that the method in the derived class overrides the method in the base class.</p> <p>However, what if we want to call the method of the base class as well?</p> <p>In that case, we use the\u00a0<code>base</code>\u00a0keyword to call the method of the base class from the derived class.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-base-keyword-in-c-inheritance","title":"Example: base keyword in C# inheritance","text":"<pre><code>using System;\nnamespace Inheritance {\n// base class\nclass Animal { public virtual void eat() {\nConsole.WriteLine(\"Animals eat food.\");\n}\n} // derived class of Animal \nclass Dog : Animal {\n// overriding method from Animal\npublic override void eat() {\n// call method from Animal class\nbase.eat();\nConsole.WriteLine(\"Dogs eat Dog food.\");\n}     }\nclass Program {\nstatic void Main(string[] args) {\nDog labrador = new Dog();\nlabrador.eat();\n}\n}\n}\n</code></pre> <p>Output</p> <pre><code>Animals eat food.\nDogs eat Dog food.\n</code></pre> <p>In the above example, the\u00a0eat()\u00a0method is present in both the base class\u00a0Animal\u00a0and the derived class\u00a0Dog. Notice the statement,</p> <pre><code>base.eat();\n</code></pre> <p>Here, we have used the\u00a0<code>base</code>\u00a0keyword to access the method of\u00a0Animal\u00a0class from the\u00a0Dog\u00a0class.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#importance-of-inheritance-in-c","title":"Importance of Inheritance in C","text":"<p>To understand the importance of Inheritance, let's consider a situation.</p> <p>Suppose we are working with regular polygons such as squares, rectangles, and so on. And, we have to find the perimeter of these polygons based on the input.</p> <p>1.\u00a0Since the formula to calculate perimeter is common for all regular polygons, we can create a\u00a0RegularPolygon\u00a0class and a method\u00a0calculatePerimeter()\u00a0to calculate perimeter.</p> <pre><code>class RegularPolygon {\ncalculatePerimeter() {\n// code to compute perimeter\n}\n}\n</code></pre> <p>2.\u00a0And inherit\u00a0Square\u00a0and\u00a0Rectangle\u00a0classes from the\u00a0RegularPolygon\u00a0class. Each of these classes will have properties to store the length and number of sides because they are different for all polygons.</p> <pre><code>class Square : RegularPolygon {\nint  length = 0;\nint sides = 0;\n}\n</code></pre> <p>We pass the value of the\u00a0length\u00a0and\u00a0sides\u00a0to\u00a0calculateperimeter()\u00a0to compute the perimeter.</p> <p>This is how inheritance makes our code reusable and more intuitive.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-importance-of-inheritance","title":"Example: Importance of Inheritance","text":"<pre><code>using System;\nnamespace Inheritance {\nclass RegularPolygon {\npublic void calculatePerimeter(int length, int sides) {        int result = length * sides;        Console.WriteLine(\"Perimeter: \" + result);      }\n}\nclass Square : RegularPolygon {\npublic int  length = 200;\npublic int sides = 4;\npublic void calculateArea() {\nint area = length * length;\nConsole.WriteLine(\"Area of Square: \" + area);\n}\n}\nclass Rectangle : RegularPolygon {\npublic int length = 100;\npublic int breadth = 200;\npublic int sides = 4;\npublic void calculateArea() {\nint area = length * breadth;\nConsole.WriteLine(\"Area of Rectangle: \" + area);\n}\n}\nclass Program {\nstatic void Main(string[] args) {\nSquare s1 = new Square();\ns1.calculateArea();\ns1.calculatePerimeter(s1.length, s1.sides);\nRectangle t1 = new Rectangle();\nt1.calculateArea();\nt1.calculatePerimeter(t1.length, t1.sides);\n}\n}\n}     </code></pre> <p>Output</p> <pre><code>Area of Square: 40000\nPerimeter: 800\nArea of Rectangle: 20000\nPerimeter: 400\n</code></pre> <p>In the above example, we have created a\u00a0RegularPolygon\u00a0class that has a method to calculate the perimeter of the regular polygon.</p> <p>Here, the\u00a0Square\u00a0and\u00a0Rectangle\u00a0inherit from\u00a0RegularPolygon.</p> <p>The formula to calculate the perimeter is common for all, so we have reused the\u00a0calculatePerimeter()\u00a0method of the base class.</p> <p>And since the formula to calculate the area is different for different shapes, we have created a separate method inside the derived class to calculate the area.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-abstract-class-and-method","title":"C# abstract class and method","text":"<p>In this tutorial, we will learn about C# abstract class and method with the help of examples.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#abstract-class","title":"Abstract Class","text":"<p>In C#, we cannot create objects of an abstract class. We use the\u00a0<code>abstract</code>\u00a0keyword to create an abstract class. For example,</p> <pre><code>// create an abstract class\nabstract class Language {\n// fields and methods\n}\n...\n// try to create an object Language\n// throws an error\nLanguage obj = new Language();\n</code></pre> <p>An abstract class can have both abstract methods (method without body)  and\u00a0non-abstract methods\u00a0(method with the body). </p> <p>For example,</p> <pre><code>abstract class Language {\n// abstract method\npublic abstract void display1();\n// non-abstract method\npublic void display2() {\nConsole.WriteLine(\"Non abstract method\");\n}\n}\n</code></pre> <p>Before moving forward, make sure to know about\u00a0C# inheritance.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#inheriting-abstract-class","title":"Inheriting Abstract Class","text":"<p>As we cannot create objects of an abstract class, we must create a derived class from it. </p> <p>So that we can access members of the abstract class using the object of the derived class. For example,</p> <pre><code>using System;\nnamespace AbstractClass {\nabstract class Language {\n// non-abstract method\npublic void display() {\nConsole.WriteLine(\"Non abstract method\");\n}\n}\n// inheriting from abstract class\nclass Program : Language {\nstatic void Main (string [] args) {\n// object of Program class\nProgram obj = new Program();\n// access method of an abstract class\nobj.display();\nConsole.ReadLine();\n}\n}\n}\n</code></pre> <p>Output</p> <pre><code>Non abstract method\n</code></pre> <p>In the above example, we have created an abstract class named\u00a0Language. The class contains a non-abstract method\u00a0display().</p> <p>We have created the\u00a0Program\u00a0class that inherits the abstract class. Notice the statement,</p> <pre><code>obj.display();\n</code></pre> <p>Here,\u00a0obj\u00a0is the object of the derived class\u00a0Program. We are calling the method of the abstract class using the object\u00a0obj.</p> <p>Note: We can use abstract class only as a base class. This is why abstract classes cannot be sealed. To know more, visit\u00a0C# sealed class and method.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-abstract-method","title":"C# Abstract Method","text":"<p>A method that does not have a body is known as an abstract method. We use the\u00a0<code>abstract</code>\u00a0keyword to create abstract methods. For example,</p> <pre><code>public abstract void display();\n</code></pre> <p>Here,\u00a0display()\u00a0is an abstract method. An abstract method can only be present inside an abstract class.</p> <p>When a non-abstract class inherits an abstract class, it should provide an implementation of the abstract methods.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-implementation-of-the-abstract-method","title":"Example: Implementation of the abstract method","text":"<pre><code>using System;\nnamespace AbstractClass {\nabstract class Animal {\n// abstract method\npublic abstract void makeSound();\n}\n// inheriting from abstract class\nclass Dog : Animal {\n// provide implementation of abstract method\npublic override void makeSound() {      Console.WriteLine(\"Bark Bark\");    }\n}\nclass Program  {\nstatic void Main (string [] args) {\n// create an object of Dog class\nDog obj = new Dog();\nobj.makeSound();    Console.ReadLine(); }\n}\n}\n</code></pre> <p>Output</p> <pre><code>Bark Bark\n</code></pre> <p>In the above example, we have created an abstract class named\u00a0Animal. We have an abstract method\u00a0makeSound()\u00a0inside the class.</p> <p>We have a\u00a0Dog\u00a0class that inherits from the\u00a0Animal\u00a0class.\u00a0Dog\u00a0class provides the implementation of the abstract method\u00a0makeSound().</p> <pre><code>// provide implementation of abstract method\npublic override void makeSound() {\nConsole.WriteLine(\"Bark Bark\");\n}\n</code></pre> <p>Notice, we have used\u00a0<code>override</code>\u00a0with the\u00a0makeSound()\u00a0method. This indicates the method is overriding the method from the base class.</p> <p>We then used the object of the\u00a0Dog\u00a0class to access\u00a0makeSound().</p> <p>If the\u00a0Dog\u00a0class had not provided the implementation of the abstract method\u00a0makeSound(),\u00a0Dog\u00a0class should have been marked abstract as well.</p> <p>Note: Unlike the C# inheritance, we cannot use\u00a0<code>virtual</code>\u00a0with the abstract methods of the base class. This is because an abstract class is implicitly virtual.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#abstract-class-with-get-and-set-accessors","title":"Abstract class with get and set accessors","text":"<p>We can mark get and set accessors as abstract. For example,</p> <pre><code>using System;\nnamespace AbstractClass {\nabstract class Animal {\nprotected string name;\n// abstract method\npublic abstract string Name {  get; set; }\n}\n// inheriting from abstract class\nclass Dog : Animal {\n// provide implementation of abstract method\npublic override string Name {\nget {return name;}\nset {name = value; }\n}\n}\nclass Program  {\nstatic void Main (string [] args) {\n// create an object of Dog class\nDog obj = new Dog();  obj.Name = \"Tom\";\nConsole.WriteLine(\"Name: \" + obj.Name); Console.ReadLine();\n}\n}\n}\n</code></pre> <p>Output</p> <pre><code>Name: Tom\n</code></pre> <p>In the above example, we have marked the get and set accessor as abstract.</p> <pre><code>obj.Name = \"Tom\";\nConsole.WriteLine(\"Name: \" + obj.Name);\n</code></pre> <p>We are setting and getting the value of the\u00a0name\u00a0field of the abstract class\u00a0Animal\u00a0using the object of the derived class\u00a0Dog.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#access-constructor-of-abstract-classes","title":"Access Constructor of Abstract Classes","text":"<p>An abstract class can have constructors as well. For example,</p> <pre><code>using System;\nnamespace AbstractClass {\nabstract class Animal {\npublic Animal() {      Console.WriteLine(\"Animal Constructor\");    }\n}\nclass Dog : Animal {\npublic Dog() {\nConsole.WriteLine(\"Dog Constructor\");\n}   }\nclass Program  {\nstatic void Main (string [] args) {\n// create an object of Dog class\nDog d1 = new Dog();  Console.ReadLine();\n}\n}\n}\n</code></pre> <p>Output</p> <pre><code>Animal Constructor\nDog Constructor\n</code></pre> <p>In the above example, we have created a constructor inside the abstract class\u00a0Animal.</p> <pre><code>Dog d1 = new Dog();\n</code></pre> <p>Here, when we create an object of the derived class\u00a0Dog\u00a0the constructor of the abstract class\u00a0Animal\u00a0gets called as well.</p> <p>Note: We can also use destructors inside the abstract class.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-abstraction","title":"C# Abstraction","text":"<p>The abstract classes are used to achieve abstraction in C#.</p> <p>Abstraction is one of the important concepts of object-oriented programming.  It allows us to hide unnecessary details and only show the needed information.</p> <p>This helps us to manage complexity by hiding details with a simpler, higher-level idea.</p> <p>A practical example of abstraction can be motorbike brakes. We know what a brake does. When we apply the brake, the motorbike will stop.  However, the working of the brake is kept hidden from us.</p> <p>The major advantage of hiding the working of the brake is that now the manufacturer can implement brakes differently for different motorbikes.  However, what brake does will be the same.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-c-abstraction","title":"Example: C# Abstraction","text":"<pre><code>using System;\nnamespace AbstractClass {\nabstract class MotorBike {\npublic abstract void brake();\n}\nclass SportsBike : MotorBike {\n// provide implementation of abstract method\npublic override void brake() {      Console.WriteLine(\"Sports Bike Brake\");    }\n}\nclass MountainBike : MotorBike {\n// provide implementation of abstract method\npublic override void brake() {            Console.WriteLine(\"Mountain Bike Brake\");    }\n}\nclass Program  {\nstatic void Main (string [] args) {\n// create an object of SportsBike class\nSportsBike s1 = new SportsBike();  s1.brake();\n// create an object of MountainBike class\nMountainBike m1 = new MountainBike();\nm1.brake();\nConsole.ReadLine();\n}\n}\n}\n</code></pre> <p>Output</p> <pre><code>Sports Bike Brake\nMountain Bike Brake\n</code></pre> <p>In the above example, we have created an abstract class\u00a0MotorBike. It has an abstract method\u00a0brake().</p> <p>As\u00a0brake()\u00a0is an abstract method the implementation of\u00a0brake()\u00a0in\u00a0MotorBike\u00a0is kept hidden.</p> <p>Every motorbike has a different implementation of the brake. This is why\u00a0SportsBike\u00a0makes its own implementation of\u00a0brake()\u00a0and\u00a0MountainBike\u00a0makes its own implementation of\u00a0brake().</p> <p>Note: We use interfaces to achieve complete abstraction in C#. To learn more, visit\u00a0C# Interface.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-nested-class","title":"C# Nested Class","text":"<p>In this tutorial, you will learn about the nested class in C# with the help of examples.</p> <p>In C#, we can define a class within another class. It is known as a nested class. </p> <p>For example,</p> <pre><code>class OuterClass {\n...\nclass InnerClass {\n...\n}\n}\n</code></pre> <p>Here, we have created the class\u00a0<code>InnerClass</code>\u00a0inside the class\u00a0<code>OuterClass</code>. The\u00a0<code>InnerClass</code>\u00a0is called the nested class.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#access-members","title":"Access Members","text":"<p>To access members of the nested classes we first need to create their objects.</p> <p>1.Create object of Outer class</p> <pre><code>OuterClass obj1 = new OuterClass();\n</code></pre> <p>Here, we have created the\u00a0obj1\u00a0object of the class\u00a0<code>OuterClass</code>.</p> <p>2. Create object of Inner Class</p> <pre><code>OuterClass.InnerClass obj2 = new OuterClass.InnerClass();\n</code></pre> <p>You can see that we have used\u00a0<code>OuterClass.InnerClass</code>\u00a0to create the\u00a0obj2\u00a0object of the inner class. This is because\u00a0<code>InnerClass</code>\u00a0is the nested class of\u00a0<code>OuterClass</code>.</p> <p>Once we have created the object of individual classes, we can use the object name and dot operator to access members of each class.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-c-nested-class","title":"Example: C# Nested Class","text":"<pre><code>using System;\nnamespace CsharpNestedClass {\n// outer class\npublic class Car {\npublic void displayCar() {\nConsole.WriteLine(\"Car: Bugatti\");\n}\n// inner class\npublic class Engine {      public void displayEngine() {        Console.WriteLine(\"Engine: Petrol Engine\");      }\n}\n}\nclass Program {\nstatic void Main(string[] args) {\n// create object of outer class\nCar sportsCar = new Car();\n// access method of outer class\nsportsCar.displayCar();\n// create object of inner class\nCar.Engine petrolEngine = new Car.Engine();\n// access member of inner class\npetrolEngine.displayEngine();\nConsole.ReadLine();\n}\n}\n}\n</code></pre> <p>Output</p> <pre><code>Car: Bugatti\nEngine: Petrol Engine\n</code></pre> <p>In the above program, we have nested the\u00a0<code>Engine</code>\u00a0class inside the\u00a0<code>Car</code>\u00a0class.</p> <p>Inside the\u00a0<code>Program</code>\u00a0class, we have created objects of both the outer class and the inner class.</p> <pre><code>// object of outer class\nCar sportsCar = new Car();\n// object of nested class\nCar.Engine petrolEngine = new Car.Engine();\n</code></pre> <p>We then used these objects to access methods of each class.</p> <ul> <li><code>sportsCar.displayCar()</code>\u00a0- access outer class method using the object of\u00a0<code>Car</code></li> <li><code>petrolEngine.displayEngine()</code>\u00a0- access inner class method using the object of\u00a0<code>Engine</code></li> </ul> <p>Note: We cannot access the members of the inner class using the object of the outer class. For example,</p> <pre><code>// error code\nsportsCar.displayEngine();\n</code></pre> <p>Here, we cannot access the\u00a0<code>displayEngine()</code>\u00a0method of the inner class\u00a0<code>Engine</code>\u00a0using the\u00a0sportsCar\u00a0object of the outer class.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#access-outer-class-members-inside-inner-class","title":"Access Outer Class Members Inside Inner Class","text":"<p>We can access members of the outer class inside the inner class. For this we use an object of the outer class. For example,</p> <pre><code>using System;\nnamespace CsharpNestedClass {\n// outer class\npublic class Car {\npublic string brand = \"Bugatti\";\n// nested  class\npublic class Engine {\npublic void displayCar() {\n// object of outer class\nCar sportsCar = new Car();\nConsole.WriteLine(\"Brand: \" + sportsCar.brand);\n}\n}\n}\nclass Program {\nstatic void Main(string[] args) {\n// object of inner class\nCar.Engine engineObj = new Car.Engine();\nengineObj.displayCar();\nConsole.ReadLine();\n}\n}\n}\n</code></pre> <p>Output</p> <pre><code>Brand: Bugatti\n</code></pre> <p>In the above example, we have nested the\u00a0<code>Engine</code>\u00a0class inside the\u00a0<code>Car</code>\u00a0class. Notice the line,</p> <pre><code>// inside Engine class\nCar sportsCar = new Car();\nConsole.WriteLine(\"Brand: \" + sportsCar.brand);\n</code></pre> <p>Here, we have used the object of the class\u00a0<code>Car</code>\u00a0to access field\u00a0brand.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#access-static-members-of-outer-class-inside-inner-class","title":"Access static Members of Outer Class Inside Inner Class","text":"<p>If we need to access static members of the outer class, we don't need to create its object. Instead, we can directly use the name of the outer class. For example,</p> <pre><code>using System;\nnamespace CsharpNestedClass {\n// outer class\npublic class Car {\n//static member of outer class\npublic static string brand = \"Bugatti\";\n// nested class\npublic class Engine {\npublic void display() {\n// access static member of outer class\nConsole.WriteLine(\"Brand: \" + Car.brand);\n}\n}\n}\nclass Program {\nstatic void Main(string[] args) {\n// object of inner class\nCar.Engine obj = new Car.Engine();\nobj.display();\nConsole.ReadLine();\n}\n}\n}\n</code></pre> <p>Output</p> <pre><code>Brand: Bugatti\n</code></pre> <p>In the above example, we have nested the\u00a0<code>Engine</code>\u00a0class inside the\u00a0<code>Car</code>\u00a0class.\u00a0<code>Car</code>\u00a0has a static field\u00a0brand.</p> <p>Here, we have accessed the static field\u00a0brand\u00a0inside the inner class (<code>Engine</code>) using the name of the outer class (<code>Car</code>).</p> <pre><code>Console.WriteLine(\"Brand: \" + Car.brand);\n</code></pre>"},{"location":"week-7-csharp/ce103-week-7-csharp/#inheriting-outer-class","title":"Inheriting Outer Class","text":"<p>Like a regular class, we can also inherit the outer class. For example,</p> <pre><code>using System;\nnamespace CsharpNestedClass {\n// outer class\nclass Computer {\npublic void display() {\nConsole.WriteLine(\"Method of Computer class\");\n}\n// nested class\npublic class CPU {\n}\n}\nclass Laptop : Computer {     }\nclass Program  {\nstatic void Main(string[] args) {\n// object of derived class\nLaptop obj = new Laptop();\nobj.display();     Console.ReadLine();\n}\n}\n}\n</code></pre> <p>Output</p> <pre><code>Method of Computer class\n</code></pre> <p>In the above example, we have derived the class\u00a0<code>Laptop</code>\u00a0from the outer class\u00a0<code>Computer</code>.</p> <p>Because of this we are able to access the\u00a0<code>display()</code>\u00a0method of class\u00a0<code>Computer</code>\u00a0using the object of the class\u00a0<code>Laptop</code>.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#inheriting-inner-class","title":"Inheriting inner class","text":"<p>In C#, we can inherit the inner class as well. For example,</p> <pre><code>using System;\nnamespace CsharpNestedClass {\n// outer class\nclass Computer {\n// nested  class\npublic class CPU {\npublic void display() {\nConsole.WriteLine(\"Method of CPU class\");\n}\n}\n}\n// inheriting inner class\nclass Laptop : Computer.CPU {  }\nclass Program  {\nstatic void Main(string[] args) {\n// object of derived class\nLaptop obj = new Laptop();\nobj.display();     Console.ReadLine();\n}\n}\n}\n</code></pre> <p>Output</p> <pre><code>Method of CPU class\n</code></pre> <p>In the above example, we have derived the\u00a0<code>Laptop</code>\u00a0class from the inner class\u00a0<code>CPU</code>.</p> <p>Notice that we have used the name of the outer class along with the nested class to inherit the inner class.</p> <pre><code>class Laptop : Computer.CPU {}\n</code></pre>"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-partial-class-and-partial-method","title":"C# Partial Class and Partial Method","text":"<p>In this article we are going to learn about how and why partial class and partial methods be implemented in C# .</p> <p>There are many situations when you might need to split a class definition,\u00a0such as when working on a large scale projects, multiple developers and programmers might need to work on the same class at the same time. In this case we can use a feature called\u00a0Partial Class.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#introduction-to-partial-class","title":"Introduction to Partial Class","text":"<p>While programming in C# (or OOP), we can split the definition of a class over two or more source files. The source files contains a section of the definition of class, and all parts are combined when the application is compiled. For splitting a class definition, we need to use the\u00a0<code>partial</code>\u00a0keyword.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-1","title":"Example 1:","text":"<p>We have a project named as\u00a0<code>HeightWeightInfo</code>\u00a0which shows height and weight. We have a file named as\u00a0<code>File1.cs</code>\u00a0with a partial class named as\u00a0Record.  It has two integer variables\u00a0h\u00a0&amp;\u00a0w\u00a0and a method/constructor named as\u00a0Record\u00a0which is assigning the values of\u00a0h\u00a0&amp;\u00a0w.</p> <pre><code>namespace HeightWeightInfo\n{\nclass File1\n{\n}\npublic partial class Record\n{\nprivate int h;\nprivate int w;\npublic Record(int h, int w)\n{\nthis.h = h;\nthis.w = w;\n}\n}\n}\n</code></pre> <p>Here is another file named as File2.cs with the same partial class\u00a0Record\u00a0which has only the method\u00a0PrintRecord. This method will display the values of\u00a0h\u00a0&amp;\u00a0w.</p> <pre><code>namespace HeightWeightInfo\n{\nclass File2\n{\n}\npublic partial class Record\n{\npublic void PrintRecord()\n{\nConsole.WriteLine(\"Height:\"+ h);\nConsole.WriteLine(\"Weight:\"+ w);\n}\n}\n}\n</code></pre> <p>Here now we can see the\u00a0main\u00a0method of the project:</p> <pre><code>namespace HeightWeightInfo\n{\nclass Program\n{\nstatic void Main(string[] args)\n{\nRecord myRecord = new Record(10, 15);\nmyRecord.PrintRecord();\nConsole.ReadLine();\n}\n}\n}\n</code></pre> <p>Here we have the object of the class\u00a0Record\u00a0as\u00a0myRecord\u00a0which is passing the parameter values as 10 and 15 to\u00a0h\u00a0and\u00a0w\u00a0respectively to the method defined in\u00a0<code>File1.cs</code>.</p> <p>The method\u00a0PrintRecord\u00a0is called by the object\u00a0myRecord\u00a0which is defined in the\u00a0<code>File2.cs</code>.</p> <p>This shows that the\u00a0<code>partial</code>\u00a0keyword helps to combine all the attributes of a class defined in various files to work as a single class.</p> <p>Places where\u00a0<code>partial</code>\u00a0class can be used:</p> <ol> <li>While working on a larger projects with more than one developer, it helps the developers to work on the same class simultaneously.</li> <li>Codes can be added or modified to the class without re-creating source files which are automatically generated by the IDE (i.e. Visual Studio).</li> </ol>"},{"location":"week-7-csharp/ce103-week-7-csharp/#things-to-remember-about-partial-class","title":"Things to Remember about Partial Class","text":"<p>The\u00a0<code>partial</code>\u00a0keyword specify that other parts of the class can be defined in the namespace.  It is mandatory to use the partial keyword if we are trying to make a class partial.  All the parts of the class should be in the same namespace and available at compile time to form the final type.  All the parts must have same access modifier i.e. private, public, or so on.</p> <ul> <li>If any part is declared abstract, then the whole type is considered abstract.</li> <li>If any part is declared sealed, then the whole type is considered sealed.</li> <li>If any part declares a base type, then the whole type inherits that class.</li> <li>Any class member declared in a partial definition are available to all other parts.</li> <li>All parts of a partial class should be in the same namespace.</li> </ul> <p>****Note:**\u00a0The\u00a0<code>partial</code>\u00a0modifier is not available on delegate or enumeration declarations</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#introduction-to-partial-methods","title":"Introduction to Partial Methods","text":"<p>A partial class may contain a partial method. One part of the class contains the signature of the method. An optional implementation may be defined in the same part or another part. If the implementation is not supplied, then the method and all calls are removed at compile time.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-2","title":"Example 2:","text":"<p>Let's take an example as a partial class\u00a0<code>Car</code>\u00a0defined in\u00a0<code>file1.cs</code>\u00a0 which has three methods\u00a0InitializeCar(),\u00a0BuildRim() and\u00a0BuildWheels().  Among those methods,\u00a0InitializeCar\u00a0is defined as\u00a0<code>partial</code>.</p> <pre><code>public partial class Car\n{\npartial void InitializeCar();\npublic void BuildRim() { }\npublic void BuildWheels() { }\n}\n</code></pre> <p>And we have another file named as\u00a0<code>file2.cs</code>\u00a0which has two methods\u00a0BuildEngine\u00a0and\u00a0InitializeCar.  The method\u00a0InitializeCar\u00a0is partial method which is also defined in\u00a0<code>file1.cs</code>.</p> <pre><code>public partial class Car\n{\npublic void BuildEngine() { }\npartial void InitializeCar()\n{\nstring str = \"Car\";\n}\n}\n</code></pre> <p>A partial method declaration consists of two parts:</p> <ol> <li>The definition as in\u00a0<code>file1.cs</code>.</li> <li>The implementation as in\u00a0<code>file2.cs</code>.</li> </ol> <p>They may be in separate parts of the partial class, or in the same part.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#things-to-remember-about-partial-method","title":"Things to remember about Partial Method","text":"<ul> <li><code>partial</code>\u00a0keyword.</li> <li>return type\u00a0<code>void</code>.</li> <li>implicitly\u00a0<code>private</code>.</li> <li>and cannot be\u00a0<code>virtual</code>.</li> </ul>"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-sealed-class-and-method","title":"C# sealed class and method","text":"<p>In this tutorial, we will learn about the sealed class and method in C# with the help of examples.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#sealed-class","title":"Sealed Class","text":"<p>In C#, when we don't want a class to be inherited by another class, we can declare the class as\u00a0a sealed class.</p> <p>A sealed class cannot have a derived class. We use the\u00a0<code>sealed</code>\u00a0keyword to create a sealed class. </p> <p>For example,</p> <pre><code>using System;\nnamespace SealedClass {\nsealed class Animal {\n}\n// trying to inherit sealed class\n// Error Code\nclass Dog : Animal {      }   class Program  {\nstatic void Main (string [] args) {\n// create an object of Dog class\nDog d1 = new Dog();  Console.ReadLine();\n}\n}\n}\n</code></pre> <p>In the above example, we have created a sealed class\u00a0Animal. Here, we are trying to derive\u00a0Dog\u00a0class from the\u00a0Animal\u00a0class.</p> <p>Since a sealed class cannot be inherited, the program generates the following error:</p> <pre><code>error CS0509: 'Dog': cannot derive from sealed type 'Animal'\n</code></pre>"},{"location":"week-7-csharp/ce103-week-7-csharp/#sealed-method","title":"Sealed Method","text":"<p>During method overriding, if we don't want an overridden method to be further overridden by another class, we can declare it as a\u00a0sealed method.</p> <p>We use a\u00a0<code>sealed</code>\u00a0keyword with an overridden method to create a sealed method. </p> <p>For example,</p> <pre><code>using System;\nnamespace SealedClass {\nclass Animal {\npublic virtual void makeSound() {\nConsole.WriteLine(\"Animal Sound\");\n}\n}\nclass Dog : Animal {\n// sealed method\nsealed public override void makeSound() {      Console.WriteLine(\"Dog Sound\");    }\n}\nclass Puppy : Dog {\n// trying to override sealed method\npublic override void makeSound() {      Console.WriteLine(\"Puppy Sound\");    }\n}   class Program  {\nstatic void Main (string [] args) {\n// create an object of Puppy class\nPuppy d1 = new Puppy();  Console.ReadLine();\n}\n}\n}\n</code></pre> <p>In the above example, we have overridden the\u00a0makeSound()\u00a0method inside the\u00a0Dog\u00a0class.</p> <pre><code>// Inside the Dog class\nsealed public override void makeSound() {\nConsole.WriteLine(\"Dog Sound\");\n}\n</code></pre> <p>Notice that we have used the\u00a0<code>sealed</code>\u00a0keyword with\u00a0makeSound(). This means the\u00a0Puppy\u00a0class that inherits the\u00a0Dog\u00a0class is not allowed to override\u00a0makeSound().</p> <p>Hence, we get an error</p> <pre><code>error CS0239: 'Puppy.makeSound()': cannot override inherited member 'Dog.makeSound()' because it is sealed\n</code></pre> <p>when we try to further override the\u00a0makeSound()\u00a0method inside the\u00a0Puppy\u00a0class.</p> <p>Note: Sealing an overridden method prevents method overriding in multilevel inheritance.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#why-sealed-class","title":"Why Sealed Class?","text":"<ol> <li>We use sealed classes to prevent inheritance.  As we cannot inherit from a sealed class, the methods in the sealed class cannot be manipulated from other classes.</li> </ol> <p>It helps to prevent security issues. </p> <p>For example,</p> <pre><code>sealed class A { ...\n}\n// error code\nclass B : A {\n...\n}\n</code></pre> <p>As class\u00a0A\u00a0cannot be inherited, class\u00a0B\u00a0cannot override and manipulate the methods of class\u00a0A.</p> <ol> <li>One of the best uses of sealed classes is when you have a class with static members.</li> </ol> <p>The\u00a0Pens\u00a0class of the\u00a0<code>System.Drawing</code>\u00a0namespace is one of the examples of the sealed class.  The\u00a0Pens\u00a0class has static members that represent the pens with standard colors.\u00a0 <code>Pens.Blue</code>\u00a0represents a pen with blue color.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-interface","title":"C# interface","text":"<p>In this tutorial, we will learn about the C# interface with the help of examples.</p> <p>In C#, an interface is similar to abstract class. However, unlike abstract classes, all methods of an interface are fully abstract (method without body).</p> <p>We use the\u00a0<code>interface</code>\u00a0keyword to create an interface. </p> <p>For example,</p> <pre><code>interface IPolygon {\n// method without body\nvoid calculateArea();\n}\n</code></pre> <p>Here,</p> <ul> <li>IPolygon\u00a0is the name of the interface.</li> <li>By convention, interface starts with I so that we can identify it just by seeing its name.</li> <li>We cannot use access modifiers inside an interface.</li> <li>All members of an interface are public by default.</li> <li>An interface doesn't allow fields.</li> </ul>"},{"location":"week-7-csharp/ce103-week-7-csharp/#implementing-an-interface","title":"Implementing an Interface","text":"<p>We cannot create objects of an interface. To use an interface, other classes must implement it.  Same as in\u00a0C# Inheritance,  we use\u00a0<code>:</code>\u00a0symbol to implement an interface. </p> <p>For example,</p> <pre><code>using System;\nnamespace CsharpInterface {\ninterface IPolygon {\n// method without body\nvoid calculateArea(int l, int b);\n}\nclass Rectangle : IPolygon {\n// implementation of methods inside interface\npublic void calculateArea(int l, int b) {\nint area = l * b;\nConsole.WriteLine(\"Area of Rectangle: \" + area);\n}\n}\nclass Program {\nstatic void Main (string [] args) {\nRectangle r1 = new Rectangle();\nr1.calculateArea(100, 200);\n}\n}\n}\n</code></pre> <p>Output</p> <pre><code>Area of Rectangle: 20000\n</code></pre> <p>In the above example, we have created an interface named\u00a0IPolygon.  The interface contains a method\u00a0<code>calculateArea(int a, int b)</code>\u00a0without implementation. Here, the\u00a0Rectangle\u00a0class implements\u00a0IPolygon. And, provides the implementation of the\u00a0<code>calculateArea(int a, int b)</code>\u00a0method.</p> <p>Note: We must provide the implementation of all the methods of interface inside the class that implements it.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#implementing-multiple-interfaces","title":"Implementing Multiple Interfaces","text":"<p>Unlike inheritance, a class can implement multiple interfaces. For example,</p> <pre><code>using System;\nnamespace CsharpInterface {\ninterface IPolygon {\n// method without body\nvoid calculateArea(int a, int b);\n}\ninterface IColor {\nvoid getColor();\n}\n// implements two interface\nclass Rectangle : IPolygon, IColor {\n// implementation of IPolygon interface\npublic void calculateArea(int a, int b) {\nint area = a * b;\nConsole.WriteLine(\"Area of Rectangle: \" + area);\n}\n// implementation of IColor interface\npublic void getColor() {\nConsole.WriteLine(\"Red Rectangle\");\n}\n}\nclass Program {\nstatic void Main (string [] args) {\nRectangle r1 = new Rectangle();\nr1.calculateArea(100, 200);\nr1.getColor();\n}\n}\n}\n</code></pre> <p>Output</p> <pre><code>Area of Rectangle: 20000\nRed Rectangle\n</code></pre> <p>In the above example, we have two interfaces,\u00a0IPolygon\u00a0and\u00a0IColor.</p> <pre><code>class Rectangle : IPolygon, IColor {\n...\n}\n</code></pre> <p>We have implemented both interfaces in the\u00a0Rectangle\u00a0class separated by\u00a0<code>,</code>.</p> <p>Now,\u00a0<code>Rectangle</code>\u00a0has to implement the method of both interfaces.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#using-reference-variable-of-an-interface","title":"Using reference variable of an interface","text":"<p>We can use the reference variable of an interface. For example,</p> <pre><code>using System;\nnamespace CsharpInterface {\ninterface IPolygon {\n// method without body\nvoid calculateArea(int l, int b);\n}\nclass Rectangle : IPolygon {\n// implementation of methods inside interface\npublic void calculateArea(int l, int b) {\nint area = l * b;\nConsole.WriteLine(\"Area of Rectangle: \" + area);\n}\n}\nclass Program {\nstatic void Main (string [] args) {\n// using reference variable of interface\nIPolygon r1 = new Rectangle();\nr1.calculateArea(100, 200);\n}\n}\n}\n</code></pre> <p>Output</p> <pre><code>Area of Rectangle: 20000\n</code></pre> <p>In the above example, we have created an interface named\u00a0IPolygon. The interface contains a method\u00a0<code>calculateArea(int l, int b)</code>\u00a0without implementation.</p> <pre><code>IPolygon r1 = new Rectangle();\n</code></pre> <p>Notice, we have used the reference variable of interface\u00a0IPolygon. It points to the class\u00a0Rectangle\u00a0that implements it.</p> <p>Though we cannot create objects of an interface, we can still use the reference variable of the interface that points to its implemented class.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#practical-example-of-interface","title":"Practical Example of Interface","text":"<p>Let's see a more practical example of C# Interface.</p> <pre><code>using System;\nnamespace CsharpInterface {\ninterface IPolygon {\n// method without body\nvoid calculateArea();\n}   // implements interface\nclass Rectangle : IPolygon {\n// implementation of IPolygon interface\npublic void calculateArea() {\nint l = 30;\nint b = 90;\nint area = l * b;\nConsole.WriteLine(\"Area of Rectangle: \" + area);\n}\n}\nclass Square : IPolygon {\n// implementation of IPolygon interface\npublic void calculateArea() {\nint l = 30;\nint area = l * l;\nConsole.WriteLine(\"Area of Square: \" + area);\n}\n}\nclass Program {\nstatic void Main (string [] args) {\nRectangle r1 = new Rectangle();  r1.calculateArea();\nSquare s1 = new Square();  s1.calculateArea();\n}\n}\n}\n</code></pre> <p>Output</p> <pre><code>Area of Rectangle: 2700\nArea of Square: 900\n</code></pre> <p>In the above program, we have created an interface named\u00a0IPolygon. It has an abstract method\u00a0<code>calculateArea()</code>.</p> <p>We have two classes\u00a0Square\u00a0and\u00a0Rectangle\u00a0that implement the\u00a0IPolygon\u00a0interface.</p> <p>The rule for calculating the area is different for each polygon. Hence,\u00a0<code>calculateArea()</code>\u00a0is included without implementation.</p> <p>Any class that implements\u00a0IPolygon\u00a0must provide an implementation of\u00a0<code>calculateArea()</code>. Hence, implementation of the method in class\u00a0Rectangle\u00a0is independent of the method in class\u00a0Square.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#advantages-of-c-interface","title":"Advantages of C# interface","text":"<p>Now that we know what interfaces are, let's learn about why interfaces are used in C#.</p> <ul> <li>Similar to abstract classes, interfaces help us to achieve\u00a0abstraction in C#.  </li> </ul> <p>Here, the method\u00a0<code>calculateArea()</code>\u00a0inside the interface, does not have a body. Thus, it hides the implementation details of the method.</p> <ul> <li>Interfaces provide\u00a0specifications\u00a0that a class (which implements it) must follow.  </li> </ul> <p>In our previous example, we have used\u00a0<code>calculateArea()</code>\u00a0as a specification inside the interface\u00a0IPolygon. This is like setting a rule that we should calculate the area of every polygon.  </p> <p>Now any class that implements the\u00a0IPolygon\u00a0interface must provide an implementation for the\u00a0calculateArea()\u00a0method.</p> <ul> <li>Interfaces are used to achieve multiple inheritance in C#.</li> </ul> <ul> <li>Interfaces provide\u00a0loose coupling(having no or least effect on other parts of code when we change one part of a code).  </li> </ul> <p>In our previous example, if we change the implementation of\u00a0<code>calculateArea()</code>\u00a0in the\u00a0Square\u00a0class it does not affect the\u00a0Rectangle\u00a0class.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-method-overloading","title":"C# Method Overloading","text":"<p>In this article, you\u2019ll learn about method overloading in C# with the help of examples.</p> <p>In C#, there might be two or more methods in a class with the same name but different numbers, types, and order of parameters, it is called method overloading. </p> <p>For example:</p> <pre><code>void display() { ... }\nvoid display(int a) { ... }\nfloat display(double a) { ... }\nfloat display(int a, float b) { ... }\n</code></pre> <p>Here, the\u00a0display()\u00a0method is overloaded. These methods have the same name but accept different arguments.</p> <p>Note: The return types of the above methods are not the same.  It is because method overloading is not associated with return types.  Overloaded methods may have the same or different return types, but they must have different parameters.</p> <p>We can perform method overloading in the following ways:</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#1-by-changing-the-number-of-parameters","title":"1. By changing the Number of Parameters","text":"<p>We can overload the method if the number of parameters in the methods is different.</p> <pre><code>void display(int a) {\n...\n} ...\nvoid display(int a, int b) {\n...\n} </code></pre> <p>Here, we have two methods in a class with the same name -\u00a0display().  It is possible to have more than one method with the same name because the number of parameters in methods is different. </p> <p>For example,</p> <pre><code>using System;\nnamespace MethodOverload {\nclass Program {  // method with one parameter\nvoid display(int a) {\nConsole.WriteLine(\"Arguments: \" + a);\n}\n// method with two parameters\nvoid display(int a, int b) {\nConsole.WriteLine(\"Arguments: \" + a + \" and \" + b);\n} static void Main(string[] args) {\nProgram p1 = new Program();\np1.display(100);\np1.display(100, 200);\nConsole.ReadLine();\n}\n}\n}\n</code></pre> <p>Output</p> <pre><code>Arguments: 100\nArguments: 100 and 200\n</code></pre> <p>In the above example, we have overloaded the\u00a0display()\u00a0method:</p> <ul> <li>one method has one parameter</li> <li>another has two parameter</li> </ul> <p>Based on the number of the argument passed during the method call, the corresponding method is called.</p> <ul> <li><code>p1.display(100)</code>\u00a0- calls the method with single parameter</li> <li><code>p1.display(100, 200)</code>\u00a0- calls the method with two parameters</li> </ul>"},{"location":"week-7-csharp/ce103-week-7-csharp/#2-by-changing-the-data-types-of-the-parameters","title":"2. By changing the Data types of the parameters","text":"<pre><code>void display(int a) {\n...\n} ...\nvoid display(string b) {\n...\n} </code></pre> <p>Here, we have two methods -\u00a0display()\u00a0with the same number of parameters. It is possible to have more than one\u00a0display()\u00a0method with the same number of parameters because the data type of parameters in methods is different. </p> <p>For example,</p> <pre><code>using System;\nnamespace MethodOverload {\nclass Program {  // method with int parameter\nvoid display(int a) {\nConsole.WriteLine(\"int type: \" + a);\n} // method with string parameter\nvoid display(string b) {\nConsole.WriteLine(\"string type: \" + b);\n} static void Main(string[] args) {\nProgram p1 = new Program();\np1.display(100);\np1.display(\"Programiz\");\nConsole.ReadLine();\n}\n}\n}\n</code></pre> <p>Output</p> <pre><code>int type: 100\nstring type: Programiz\n</code></pre> <p>In the above program, we have overloaded the\u00a0display()\u00a0method with different types of parameters.</p> <p>Based on the type of arguments passed during the method call, the corresponding method is called.</p> <ul> <li><code>p1.display(100)</code>\u00a0- calls method with\u00a0<code>int</code>\u00a0type parameter</li> <li><code>p1.display(\"Programiz\")</code>\u00a0- calls method with\u00a0<code>string</code>\u00a0type parameter</li> </ul>"},{"location":"week-7-csharp/ce103-week-7-csharp/#3-by-changing-the-order-of-the-parameters","title":"3. By changing the Order of the parameters","text":"<pre><code>void display(int a, string b) {\n...\n} ...\nvoid display(string b, int a) {\n...\n}\n</code></pre> <p>Here, we have two methods -\u00a0display().  It is possible to have more than one\u00a0display()\u00a0method with the same number and type of parameter because the order of data type of parameters in methods is different. </p> <p>For example,</p> <pre><code>using System;\nnamespace MethodOverload {\nclass Program {  // method with int and string parameters \nvoid display(int a, string b) {\nConsole.WriteLine(\"int: \" + a);\nConsole.WriteLine(\"string: \" + b);\n} // method with string andint parameter\nvoid display(string b, int a) {\nConsole.WriteLine(\"string: \" + b);\nConsole.WriteLine(\"int: \" + a);\n} static void Main(string[] args) {\nProgram p1 = new Program();\np1.display(100, \"Programming\");\np1.display(\"Programiz\", 400);\nConsole.ReadLine();\n}\n}\n}\n</code></pre> <p>Output</p> <pre><code>int: 100\nstring: Programming\nstring: Programiz\nint: 400\n</code></pre> <p>In the above program, we have overloaded the\u00a0display()\u00a0method with different orders of parameters.</p> <p>Based on the order of arguments passed during the method call, the corresponding method is called.</p> <ul> <li><code>p1.display(100, \"Programming\")</code>\u00a0- calls method with\u00a0<code>int</code>\u00a0and\u00a0<code>string</code>\u00a0parameter respectively</li> <li><code>p1.display(\"Programiz\", 400)</code>\u00a0- calls method with\u00a0<code>string</code>\u00a0and\u00a0<code>int</code>\u00a0parameter respectively</li> </ul>"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-constructor-overloading_1","title":"C# Constructor Overloading","text":"<p>In this article, you\u2019ll learn about constructor overloading in C# with the help of examples.</p> <p>In C#, similar to\u00a0method overloading,  we can also overload constructors. For constructor overloading,  there must be two or more constructors with the same name but different</p> <ul> <li>number of parameters</li> <li>types of parameters</li> <li>order of parameters</li> </ul> <p>Before you learn about constructor overloading, make sure to know about\u00a0C# constructors.</p> <p>We can perform constructor overloading in the following ways:</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#1-different-number-of-parameters","title":"1. Different number of parameters","text":"<p>We can overload the constructor if the number of parameters in a constructor are different.</p> <pre><code> class Car {   Car() {\n...\n}\nCar(string brand) {\n...\n}\nCar(string brand, int price) {\n...\n}\n}\n</code></pre> <p>Here, we have three constructors in class\u00a0Car.  It is possible to have more than one constructor because the number of parameters in constructors is different.</p> <p>Notice that,</p> <ul> <li><code>Car() { }</code>\u00a0- has no parameter</li> <li><code>Car(string brand) { }</code>\u00a0- has one parameter</li> <li><code>Car(string brand, int price) { }</code>\u00a0- has two parameters</li> </ul>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-constructor-overloading-with-different-number-of-parameter","title":"Example: Constructor Overloading with different number of parameter","text":"<pre><code>using System;\nnamespace ConstructorOverload {\nclass Car {   // constructor with no parameter\nCar() {\nConsole.WriteLine(\"Car constructor\");\n}\n// constructor with one parameter\nCar(string brand) {\nConsole.WriteLine(\"Car constructor with one parameter\");\nConsole.WriteLine(\"Brand: \" + brand);\n}\nstatic void Main(string[] args) {\n// call with no parameter\nCar car = new Car();\nConsole.WriteLine();\n// call with one parameter \nCar car2 =  new Car(\"Bugatti\");\nConsole.ReadLine();\n}\n}\n}\n</code></pre> <p>Output</p> <pre><code>Car constructor\nCar constructor with one parameter\nBrand: Bugatti\n</code></pre> <p>In the above example, we have overloaded the\u00a0Car\u00a0constructor:</p> <ol> <li>one constructor has one parameter</li> <li>another has two parameter</li> </ol> <p>Based on the number of the argument passed during the constructor call, the corresponding constructor is called.</p> <p>Here,</p> <ul> <li>Object\u00a0car\u00a0- calls constructor with one parameter</li> <li>Object\u00a0car2\u00a0- calls constructor with two parameter</li> </ul>"},{"location":"week-7-csharp/ce103-week-7-csharp/#2-different-types-of-parameters","title":"2. Different types of parameters","text":"<pre><code>class Car {   Car(string brand) {\n...\n}\nCar(int price) {\n...\n}\n}\n</code></pre> <p>Here, we have two\u00a0Car\u00a0constructors with the same number of parameters.  We are able to create constructors with the same parameters because the data type inside the parameters is different.</p> <p>Notice that,</p> <ul> <li><code>Car(string brand) { }</code>\u00a0- has parameter of\u00a0<code>string</code>\u00a0type</li> <li><code>Car(int price) { }</code>\u00a0- has parameter of\u00a0<code>int</code>\u00a0type</li> </ul>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-constructor-overloading-with-different-types-of-parameters","title":"Example: Constructor overloading with different types of parameters","text":"<pre><code>using System;\nnamespace ConstructorOverload {\nclass Car {   // constructor with string parameter\nCar(string brand) {\nConsole.WriteLine(\"Brand: \" + brand);\n}\n// constructor  with int parameter\nCar(int price) {\nConsole.WriteLine(\"Price: \" + price);\n}\nstatic void Main(string[] args) {\n// call constructor  with string parameter\nCar car = new Car(\"Lamborghini\");\nConsole.WriteLine();\n// call constructor  with int parameter\nCar car2 =new Car(50000);\nConsole.ReadLine();\n}\n}\n}\n</code></pre> <p>Output</p> <pre><code>Brand: Lamborghini\nPrice: 50000\n</code></pre> <p>In the above program, we have overloaded the constructor with different types of parameters.</p> <p>Here,</p> <ol> <li>Object\u00a0car\u00a0- calls constructor with\u00a0<code>string</code>\u00a0type parameter</li> <li>Object\u00a0car2\u00a0- calls constructor with\u00a0<code>int</code>\u00a0type parameter</li> </ol>"},{"location":"week-7-csharp/ce103-week-7-csharp/#3-different-order-of-parameters","title":"3. Different order of parameters","text":"<pre><code>Car {\nCar(string brand, int price) {\n...\n}\nCar(int speed, string color) {\n... }\n}\n</code></pre> <p>Here, we have two constructors with the same number of parameters. This is possible because the order of data type in parameters is different.</p> <p>Notice that,</p> <ul> <li><code>Car(string brand, int price) { }</code>\u00a0-\u00a0<code>string</code>\u00a0data type comes before\u00a0<code>int</code></li> <li><code>Car(int speed, string color) { }</code>\u00a0-\u00a0<code>int</code>\u00a0data type comes before\u00a0<code>string</code></li> </ul>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-constructor-overloading-with-different-order-of-parameters","title":"Example: Constructor overloading with different order of parameters","text":"<pre><code>using System;\nnamespace ConstructorOverload {\nclass Car {   // constructor with string and int parameter\nCar(string brand, int price) {\nConsole.WriteLine(\"Brand: \" + brand);\nConsole.WriteLine(\"Price: \" + price);\n}\n// constructor with int and string parameter\nCar(int speed, string color) {\nConsole.WriteLine(\"Speed: \" + speed + \" km/hr\");\nConsole.WriteLine(\"Color: \" + color);\n}\nstatic void Main(string[] args) {\n// call constructor  with string and int parameter\nCar car = new Car(\"Bugatti\", 50000);\nConsole.WriteLine();\n// call constructor with int and string parameter\nCar car2 =new Car(60, \"Red\");\nConsole.ReadLine();\n}\n}\n}\n</code></pre> <p>Output</p> <pre><code>Brand: Bugatti\nPrice: 50000\nSpeed: 60 km/hr\nColor: Red\n</code></pre> <p>In the above program, we have overloaded the constructors with different orders of parameters.</p> <p>Here,</p> <ol> <li>Object\u00a0car\u00a0- calls constructor with\u00a0<code>string</code>\u00a0and\u00a0<code>int</code>\u00a0parameter respectively</li> <li>Object\u00a0car2\u00a0- calls constructor with\u00a0<code>int</code>\u00a0and\u00a0<code>string</code>\u00a0parameter respectively</li> </ol>"},{"location":"week-7-csharp/ce103-week-7-csharp/#additional-topics","title":"Additional Topics","text":""},{"location":"week-7-csharp/ce103-week-7-csharp/#c-using","title":"C# using","text":"<p>In this tutorial, we will learn about C# using and using static to import external resources in a program with the help of examples.</p> <p>In C#, we use the using keyword to import external resources (namespaces, classes, etc) inside a program. </p> <p>For example,</p> <pre><code>// using System namespace\nusing System;\nnamespace Program {\nclass Program1 {\nstatic void Main(string[] args) {\nConsole.WriteLine(\"Hello World!\");   }\n}\n}\n</code></pre> <p>Output</p> <pre><code>Hello World!\n</code></pre> <p>In the above example, notice the line</p> <pre><code>using System;\n</code></pre> <p>Here, we are importing the\u00a0<code>System</code>\u00a0namespace inside our program. </p> <p>This helps us to directly use the classes present in the\u00a0<code>System</code>\u00a0namespace.</p> <p>Also, because of this, we don't have to write the fully qualified name of the print statement.</p> <pre><code>// full print statement\nSystem.Console.WriteLine(\"Hello World!\");\n// print statement with using System;\nConsole.WriteLine(\"Hello World!\");\n</code></pre> <p>To learn more about the namespace, visit\u00a0C# namespaces.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-using-to-create-an-alias","title":"C# using to create an alias","text":"<p>We can also create aliases with the help of\u00a0<code>using</code>\u00a0in C#. For example,</p> <pre><code>// creating alias for System.Console\nusing Programiz = System.Console;\nnamespace HelloWorld {\nclass Program {\nstatic void Main(string[] args) {\n// using Programiz alias instead of System.Console\nProgramiz.WriteLine(\"Hello World!\");    }\n}\n}\n</code></pre> <p>Output</p> <p></p><pre><code>Hello World!\n</code></pre> In the above program, we have created an alias for\u00a0<code>System.Console</code>.  <pre><code>using Programiz = System.Console;\n</code></pre> <p>This allows us to use the alias\u00a0Programiz\u00a0instead of\u00a0<code>System.Console</code>.</p> <pre><code>Programiz.WriteLine(\"Hello World!\");\n</code></pre> <p>Here,\u00a0Programiz\u00a0will work just like\u00a0<code>System.Console</code>.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-using-static-directive","title":"C# using static directive","text":"<p>In C#, we can also import classes in our program. Once we import these classes, we can use the static members (fields, methods) of the class.</p> <p>We use the\u00a0<code>using static</code>\u00a0directive to import classes in our program.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-c-using-static-with-systemmath","title":"Example: C# using static with System.Math","text":"<pre><code>using System;\n// using static directive\nusing static System.Math;\nnamespace Program {  class Program1  {  public static void Main(string[] args)  {  double n  = Sqrt(9);\nConsole.WriteLine(\"Square root of 9 is \" + n);  }  }  }\n</code></pre> <p>Output</p> <pre><code>Square root of 9 is 3\n</code></pre> <p>In the above example, notice the line,</p> <pre><code>using static System.Math;\n</code></pre> <p>Here, this line helps us to directly access the methods of the\u00a0<code>Math</code>\u00a0class.</p> <pre><code>double n = Sqrt(9);\n</code></pre> <p>We have used the\u00a0<code>Sqrt()</code>\u00a0method directly without specifying the\u00a0<code>Math</code>\u00a0class.</p> <p>If we don't use the\u00a0<code>using static System.Math</code>\u00a0in our program, we have to include the class name\u00a0<code>Math</code>\u00a0while using\u00a0<code>Sqrt()</code>. </p> <p>For example,</p> <pre><code>using System; namespace Program {  class Program1 {  public static void Main(string[] args) {  // using the class name Math\ndouble n  = Math.Sqrt(9);\nConsole.WriteLine(\"Square root of 9 is \" + n);  }  }  } </code></pre> <p>Output</p> <pre><code>Square root of 9 is 3\n</code></pre> <p>In the above example, notice the line,</p> <pre><code>double n = Math.Sqrt(9);\n</code></pre> <p>Here, we are using\u00a0<code>Math.Sqrt()</code>\u00a0to compute the square root of\u00a09. This is because we haven't imported the\u00a0<code>System.Math</code>\u00a0in this program.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-type-conversion","title":"C# Type Conversion","text":"<p>In this tutorial, we will learn about the C# type conversion and its types with the help of examples.</p> <p>The process of converting the value of one type (int, float, double, etc.) to another type is known as type conversion.</p> <p>In C#, there are two basic types of type conversion:</p> <ol> <li>Implicit Type Conversions</li> <li>Explicit Type Conversions</li> </ol>"},{"location":"week-7-csharp/ce103-week-7-csharp/#1-implicit-type-conversion-in-c","title":"1. Implicit Type Conversion in C","text":"<p>In implicit type conversion, the C# compiler automatically converts one type to another.</p> <p>Generally, smaller types like\u00a0<code>int</code>\u00a0(having less memory size) are automatically converted to larger types like\u00a0<code>double</code>\u00a0(having larger memory size).</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-implicit-type-conversion","title":"Example: Implicit Type Conversion","text":"<pre><code>using System;\nnamespace MyApplication {\nclass Program {\nstatic void Main(string[] args) {\nint numInt = 500;\n// get type of numInt\nType n = numInt.GetType();\n// Implicit Conversion\ndouble numDouble = numInt;\n// get type of numDouble\nType n1 = numDouble.GetType();\n// Value before conversion\nConsole.WriteLine(\"numInt value: \"+numInt);\nConsole.WriteLine(\"numInt Type: \" + n);\n// Value after conversion\nConsole.WriteLine(\"numDouble value: \"+numDouble);\nConsole.WriteLine(\"numDouble Type: \" + n1);\nConsole.ReadLine();\n}\n}\n}\n</code></pre> <p>Output</p> <pre><code>numInt value: 500\nnumInt Type: System.Int32\nnumDouble value: 500\nnumDouble Type: System.Double\n</code></pre> <p>In the above example, we have created an\u00a0<code>int</code>\u00a0type variable named\u00a0numInt.</p> <p>Notice the line,</p> <pre><code>// Implicit Conversion\ndouble numDouble = numInt;\n</code></pre> <p>Here, we are assigning the\u00a0<code>int</code>\u00a0type variable to a\u00a0<code>double</code>\u00a0type variable. </p> <p>In this case, the C# compiler automatically converts the\u00a0<code>int</code>\u00a0type value to\u00a0<code>double</code>.</p> <p>Notice that we have used the\u00a0<code>GetType()</code>\u00a0method to check the type of\u00a0<code>numInt</code>\u00a0and\u00a0<code>numDouble</code>\u00a0variables.</p> <p>Note: In implicit type conversion, smaller types are converted to larger types. Hence, there is no loss of data during the conversion.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#2-c-explicit-type-conversion","title":"2. C# Explicit Type Conversion","text":"<p>In explicit type conversion, we explicitly convert one type to another.</p> <p>Generally, larger types like\u00a0<code>double</code>\u00a0(having large memory size) are converted to smaller types like\u00a0<code>int</code>\u00a0(having small memory size).</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-explicit-type-conversion","title":"Example: Explicit Type Conversion","text":"<pre><code>using System;\nnamespace MyApplication {\nclass Program {\nstatic void Main(string[] args) {\ndouble numDouble = 1.23;\n// Explicit casting\nint numInt = (int) numDouble;  // Value before conversion\nConsole.WriteLine(\"Original double Value: \"+numDouble);\n// Value before conversion\nConsole.WriteLine(\"Converted int Value: \"+numInt);\nConsole.ReadLine();\n}\n}\n}\n</code></pre> <p>Output</p> <pre><code>Original double value: 1.23\nConverted int value: 1\n</code></pre> <p>In the above example, we have created a\u00a0<code>double</code>\u00a0variable named\u00a0numDouble. Notice the line,</p> <pre><code>// Explicit casting\nint numInt = (int) numDouble;\n</code></pre> <p>Here,\u00a0<code>(int)</code>\u00a0is a\u00a0cast expression\u00a0that explicitly converts the\u00a0<code>double</code>\u00a0type to\u00a0<code>int</code>\u00a0type.</p> <p>We can see the original value is\u00a01.23\u00a0whereas the converted value is\u00a01. Here, some data is lost during the type conversion. This is because we are explicitly converting the larger data type\u00a0<code>double</code>\u00a0to a smaller type\u00a0<code>int</code>.</p> <p>Note: The explicit type conversion is also called type casting.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-type-conversion-using-parse","title":"C# Type Conversion using Parse()","text":"<p>In C#, we can also use the\u00a0<code>Parse()</code>\u00a0method to perform type conversion.</p> <p>Generally, while performing type conversion between non-compatible types like\u00a0<code>int</code>\u00a0and\u00a0<code>string</code>, we use\u00a0<code>Parse()</code>.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-type-conversion-using-parse","title":"Example: Type Conversion using Parse()","text":"<pre><code>using System;\nnamespace Conversion {\nclass Program {\nstatic void Main(string[] args) {\nstring n = \"100\";\n// converting string to int type\nint a = int.Parse(n);\nConsole.WriteLine(\"Original string value: \"+n);\nConsole.WriteLine(\"Converted int value: \"+a);\nConsole.ReadLine();\n}\n}\n}\n</code></pre> <p>Output</p> <pre><code>Original string value: 100\nConverted int value: 100\n</code></pre> <p>In the above example, we have converted a\u00a0<code>string</code>\u00a0type to an\u00a0<code>int</code>\u00a0type.</p> <pre><code>// converting string to int type\nint a = int.Parse(n);\n</code></pre> <p>Here, the\u00a0<code>Parse()</code>\u00a0method converts the numeric string\u00a0100\u00a0to an integer value.</p> <p>Note: We cannot use\u00a0<code>Parse()</code>\u00a0to convert a textual string like \"test\" to an\u00a0<code>int</code>. For example,</p> <pre><code>String str = \"test\";\nint a = int.Parse(str);   // Error Code\n</code></pre>"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-type-conversion-using-convert-class","title":"C# Type Conversion using Convert Class","text":"<p>In C#, we can use the\u00a0<code>Convert</code>\u00a0class to perform type conversion. The\u00a0<code>Convert</code>\u00a0class provides various methods to convert one type to another.</p> Method Description <code>ToBoolean()</code> converts a type to a <code>Boolean</code> value <code>ToChar()</code> converts a type to a <code>char</code> type <code>ToDouble()</code> converts a type to a <code>double</code> type <code>ToInt16()</code> converts a type to a 16-bit <code>int</code> type <code>ToString()</code> converts a type to a <code>string</code> <p>Let us look at some examples:</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-convert-int-to-string-and-double","title":"Example: Convert int to String and Double","text":"<pre><code>using System;\nusing System;\nnamespace Conversion {\nclass Program {\nstatic void Main(string[] args) {\n// create int variable\nint num = 100;\nConsole.WriteLine(\"int value: \" + num);\n// convert int to string\nstring str = Convert.ToString(num);\nConsole.WriteLine(\"string value: \" + str);\n// convert int to Double\nDouble doubleNum = Convert.ToDouble(num);\nConsole.WriteLine(\"Double value: \" + doubleNum);\nConsole.ReadLine();\n}\n}\n}\n</code></pre> <p>Output</p> <pre><code>int value: 100\nstring value: 100\nDouble value: 100\n</code></pre> <p>In the above example,</p> <ul> <li>Convert.ToString(a)\u00a0- converts an\u00a0<code>int</code>\u00a0type\u00a0num\u00a0to\u00a0<code>string</code></li> <li>Convert.ToDouble(a)\u00a0- converts\u00a0num\u00a0to the\u00a0<code>Double</code>\u00a0type</li> </ul>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-convert-string-to-double-and-vice-versa","title":"Example: Convert string to Double and vice-versa","text":"<pre><code>using System;\nnamespace Conversion {\nclass Program {\nstatic void Main(string[] args) {\n// create string variable\nstring str = \"99.99\";\nConsole.WriteLine(\"Original string value: \" + str);\n// convert string to double\nDouble newDouble = Convert.ToDouble(str);\nConsole.WriteLine(\"Converted Double value: \" + newDouble);\n// create double variable\ndouble num = 88.9;\nConsole.WriteLine(\"Original double value: \" + num);\n// converting double to string \nstring newString = Convert.ToString(num);\nConsole.WriteLine(\"Converted string value: \" + newString);\nConsole.ReadLine();\n}\n}\n}\n</code></pre> <p>Output</p> <pre><code>Original string value: 99.99\nConverted Double value: 99.99\nOriginal double value: 88.9\nConverted string value: 88.9\n</code></pre> <p>In the above example,</p> <ul> <li>Convert.ToDouble(str)- converts a\u00a0<code>string</code>\u00a0type\u00a0str\u00a0to\u00a0<code>Double</code></li> <li>Convert.ToString(num)\u00a0- converts a\u00a0<code>double</code>\u00a0type\u00a0num\u00a0to the\u00a0<code>string</code></li> </ul>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-3-convert-int-to-boolean","title":"Example 3: Convert int to Boolean","text":"<pre><code>using System;\nnamespace Conversion {\nclass Program {\nstatic void Main(string[] args) {\n// create int variables\nint num1 = 0;\nint num2 = 1;\n// convert int to Boolean\nBoolean bool1 = Convert.ToBoolean(num1);\nBoolean bool2 = Convert.ToBoolean(num2);\nConsole.WriteLine(\"Boolean value of 0 is: \" + bool1);\nConsole.WriteLine(\"Boolean value of 1 is: \" + bool2);\nConsole.ReadLine();\n}\n}\n}\n</code></pre> <p>Output</p> <pre><code>Boolean value of 0 is: False\nBoolean value of 1 is: True\n</code></pre> <p>In the above example, we have created two integer variables:\u00a0<code>num1</code>\u00a0and\u00a0<code>num2</code>\u00a0with values\u00a00\u00a0and\u00a01\u00a0respectively. Here,</p> <ul> <li>Convert.ToBoolean(num1)\u00a0- converts\u00a00\u00a0to a\u00a0<code>Boolean</code>\u00a0value\u00a0<code>False</code></li> <li>Convert.ToBoolean(num2)\u00a0- converts\u00a01\u00a0to a\u00a0<code>Boolean</code>\u00a0value\u00a0<code>True</code></li> </ul> <p>Note: In C#, the integer value\u00a00\u00a0is considered\u00a0<code>False</code>\u00a0and all other values are considered\u00a0<code>True</code>.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-preprocessor-directives","title":"C# Preprocessor directives","text":"<p>In this tutorial, we\u2019ll learn about Preprocessor Directives, available directives in C#, and when, why and how why they are used.</p> <p>As the name justifies, preprocessor directives are a block of statements that gets processed before the actual compilation starts. C# preprocessor directives are the commands for the compiler that affects the compilation process.</p> <p>These commands specifies which sections of the code to compile or how to handle specific errors and warnings.</p> <p>C# preprocessor directive begins with a\u00a0<code># (hash)</code>\u00a0symbol and all preprocessor directives last for one line. Preprocessor directives are terminated by\u00a0<code>new line</code>\u00a0rather than\u00a0<code>semicolon</code>.</p> <p>The preprocessor directives available in C# are: | Preprocessor Directive | Description                                        | Syntax                                                       | | ---                    | ---                                                | ---                                                          | | <code>#if</code>                  | Checks if a preprocessor expression is true or not | #if preprocessor-expression    code to compile#endif | | <code>#elif</code>                | Used along with <code>#if</code> to check multiple preprocessor expressions | #if preprocessor-expression-1    code to compile#elif preprocessor-expression-2    code to compile#endif | | <code>#else</code>                | Used along with <code>#if</code> to create compound conditional directive. | #if preprocessor-expression    code to compile#elif    code to compile#endif | | <code>#endif</code>               | Used along with <code>#if</code> to indicate the end of a conditional directive | #if preprocessor-expression    code to compile#endif | | <code>#define</code>              | Used to define a symbol | #define SYMBOL | | <code>#undef</code>               | Used to undefine a symbol | #undef SYMBOL | | <code>#warning</code>             | Allows us to generate level 1 warning from our code | #warning warning-message | | <code>#error</code>               | Allows us to generate error from our code | #error error-message | | <code>#line</code>                | Allows us to modify the compiler's line number and filename to display errors and warnings | #line line-number file-name | | <code>#region</code>              | Allows us to create a region that can be expanded or collapsed when using a Visual Studio Code Editor | #region region-description    codes#endregion | | <code>#endregion</code>           | Indicates the end of a region | #region region-description    codes#endregion | | <code>#pragma</code>              | Gives the compiler special instructions for the compilation of the file in which it appears. | #pragma pragma-name pragma-arguments |</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#define-directive","title":"#define directive","text":"<ul> <li> <p>The\u00a0<code>#define</code>\u00a0directive allows us to define a symbol.</p> </li> <li> <p>Symbols that are defined when used along with\u00a0<code>#if</code>\u00a0directive will evaluate to true.</p> </li> </ul> <ul> <li> <p>These symbols can be used to specify conditions for compilation.</p> </li> <li> <p>Syntax:</p> </li> </ul> <pre><code>  #define SYMBOL\n</code></pre> <ul> <li>For example:</li> </ul> <pre><code>  #define TESTING\n</code></pre> <p>Here, TESTING is a symbol.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#undef-directive","title":"#undef directive","text":"<ul> <li> <p>The\u00a0<code>#undef</code>\u00a0directive allows us to undefine a symbol.</p> </li> <li> <p>Undefined symbols when used along with\u00a0<code>#if</code>\u00a0directive will evaluate to false.</p> </li> <li> <p>Syntax:</p> </li> </ul> <pre><code>  #undef SYMBOL\n</code></pre> <ul> <li>For example:</li> </ul> <pre><code>  #undef TESTING\n</code></pre> <p>Here, TESTING is a symbol.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#if-directive","title":"#if directive","text":"<ul> <li> <p>The\u00a0<code>#if</code>\u00a0directive are used to test the preprocessor expression.</p> </li> <li> <p>A preprocessor expression may consists of a symbol only or combination of symbols along with operators like\u00a0<code>&amp;&amp;</code>\u00a0(AND),\u00a0<code>||</code>\u00a0(OR),\u00a0<code>!</code>\u00a0(NOT).</p> </li> <li> <p><code>#if</code>\u00a0directive is followed by an\u00a0<code>#endif</code>\u00a0directive.</p> </li> <li> <p>The codes inside the\u00a0<code>#if</code>\u00a0directive is compiled only if the expression tested with\u00a0<code>#if</code>\u00a0evaluates to true.</p> </li> </ul> <ul> <li>Syntax:</li> </ul> <pre><code>  #if preprocessor-expression\ncode to compile&lt;\n#endif\n</code></pre> <ul> <li>For example:</li> </ul> <pre><code>  #if TESTING\nConsole.WriteLine(\"Currently Testing\");\n#endif\n</code></pre>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-1-how-to-use-if-directive","title":"Example 1: How to use #if directive?","text":"<pre><code>#define CSHARP\nusing System;\nnamespace Directive\n{\nclass ConditionalDirective\n{\npublic static void Main(string[] args)\n{\n#if (CSHARP)\nConsole.WriteLine(\"CSHARP is defined\");\n#endif\n}\n}\n}\n</code></pre> <p>When we run the program, the output will be:</p> <pre><code>CSHARP is defined\n</code></pre> <p>In the above program,\u00a0<code>CSHARP</code>\u00a0symbol is defined using the\u00a0<code>#define</code>\u00a0directive at the beginning of program. Inside the\u00a0<code>Main()</code>\u00a0method,\u00a0<code>#if</code>\u00a0directive is used to test whether\u00a0<code>CSHARP</code>\u00a0is true or not. The block of code inside\u00a0<code>#if</code>\u00a0directive is compiled only if\u00a0<code>CSHARP</code>\u00a0is defined.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#elif-directive","title":"#elif directive","text":"<ul> <li> <p>The\u00a0<code>#elif</code>\u00a0directive is used along with #if directive that lets us create a compound conditional directive.</p> </li> <li> <p>It is used when testing multiple preprocessor expression.</p> </li> <li> <p>The codes inside the\u00a0<code>#elif</code>\u00a0directive is compiled only if the expression tested with that\u00a0<code>#elif</code>\u00a0evaluates to true.</p> </li> </ul> <ul> <li>Syntax:</li> </ul> <pre><code>  #if preprocessor-expression-1\ncode to compile\n#elif preprocessor-expression-2\ncode-to-compile\n#endif\n</code></pre> <ul> <li>For example:</li> </ul>"},{"location":"week-7-csharp/ce103-week-7-csharp/#if-testing-consolewritelinecurrently-testing-elif-training-consolewritelinecurrently-training-endif","title":"<pre><code>  #if TESTING\n    Console.WriteLine(\"Currently Testing\");\n  #elif TRAINING\n    Console.WriteLine(\"Currently Training\");\n  #endif\n</code></pre>","text":""},{"location":"week-7-csharp/ce103-week-7-csharp/#else-directive","title":"#else directive","text":"<ul> <li> <p>The\u00a0<code>#else</code>\u00a0directive is used along with\u00a0<code>#if</code>\u00a0directive.</p> </li> <li> <p>If none of the expression in the preceding\u00a0<code>#if</code>\u00a0and\u00a0<code>#elif</code>\u00a0(if present) directives are true, the codes inside the\u00a0<code>#else</code>\u00a0directive will be compiled.</p> </li> </ul> <ul> <li>Syntax:</li> </ul> <pre><code>  #if preprocessor-expression-1\ncode to compile\n#elif preprocessor-expression-2\ncode-to-compile\n#else\ncode-to-compile\n#endif\n</code></pre> <ul> <li>For example:</li> </ul> <pre><code>  #if TESTING\nConsole.WriteLine(\"Currently Testing\");\n#elif TRAINING\nConsole.WriteLine(\"Currently Training\");\n#else\nConsole.WriteLine(\"Neither Testing nor Training\");\n#endif\n</code></pre>"},{"location":"week-7-csharp/ce103-week-7-csharp/#endif-directive","title":"#endif directive","text":"<ul> <li> <p>The\u00a0<code>#endif</code>\u00a0directive is used along with\u00a0<code>#if</code>\u00a0directive to indicate the end of\u00a0<code>#if</code>\u00a0directive.</p> </li> <li> <p>Syntax:</p> </li> </ul> <pre><code>  #if preprocessor-expression-1\ncode to compile\n#endif\n</code></pre> <ul> <li>For example:</li> </ul> <pre><code>  #if TESTING\nConsole.WriteLine(\"Currently Testing\");\n#endif\n</code></pre>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-2-how-to-use-conditional-directive-if-elif-else-endif","title":"Example 2: How to use conditional directive (if, elif, else, endif) ?","text":"<pre><code>#define CSHARP\n#undef PYTHON\nusing System;\nnamespace Directive\n{\nclass ConditionalDirective\n{\nstatic void Main(string[] args)\n{\n#if (CSHARP &amp;&amp; PYTHON)\nConsole.WriteLine(\"CSHARP and PYTHON are defined\");\n#elif (CSHARP &amp;&amp; !PYTHON)\nConsole.WriteLine(\"CSHARP is defined, PYTHON is undefined\");\n#elif (!CSHARP &amp;&amp; PYTHON)\nConsole.WriteLine(\"PYTHON is defined, CSHARP is undefined\");\n#else\nConsole.WriteLine(\"CSHARP and PYTHON are undefined\");\n#endif\n}\n}\n}\n</code></pre> <p>When we run the program, the output will be:</p> <pre><code>CSHARP is defined, PYTHON is undefined\n</code></pre> <p>In this example, we can see the use of\u00a0<code>#elif</code>\u00a0and\u00a0<code>#else</code>\u00a0directive. These directive are used when there are multiple conditions to be tested. Also, symbols can be combined using logical operators to form a preprocessor expression.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#warning-directive","title":"#warning directive","text":"<ul> <li> <p>The\u00a0<code>#warning</code>\u00a0directive allows us to generate a user-defined level one warning from our code.</p> </li> <li> <p>Syntax:</p> </li> </ul> <pre><code>  #warning warning-message\n</code></pre> <ul> <li>For example:</li> </ul> <pre><code>  #warning This is a warning message\n</code></pre>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-3-how-to-use-warning-directive","title":"Example 3: How to use #warning directive?","text":"<pre><code>using System;\nnamespace Directives\n{\nclass WarningDirective\n{\npublic static void Main(string[] args)\n{\n#if (!CSHARP)\n#warning CSHARP is undefined\n#endif\nConsole.WriteLine(\"#warning directive example\");\n}\n}\n}\n</code></pre> <p>When we run the program, the output will be:</p> <pre><code>Program.cs(10,26): warning CS1030: #warning: 'CSHARP is undefined' [/home/myuser/csharp/directives-project/directives-project.csproj]\n#warning directive example\n</code></pre> <p>After running the above program, we will see the output as above. The text represents a warning message. Here, we are generating a user-defined warning message using the\u00a0<code>#warning</code>\u00a0directive.</p> <p>Note that the statements after the\u00a0<code>#warning</code>\u00a0directive are\u00a0also executed. It means that the\u00a0<code>#warning</code>\u00a0directive does not terminate the program but just\u00a0throws a warning.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#error-directive","title":"#error directive","text":"<ul> <li> <p>The\u00a0<code>#error</code>\u00a0directive allows us to generate a user-defined error from our code.</p> </li> <li> <p>Syntax:</p> </li> </ul> <pre><code>  #error error-message\n</code></pre> <ul> <li>For example:</li> </ul> <pre><code>  #error This is an error message\n</code></pre>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-4-how-to-use-error-directive","title":"Example 4: How to use #error directive?","text":"<pre><code>using System;\nnamespace Directive\n{\nclass Error\n{\npublic static void Main(string[] args)\n{\n#if (!CSHARP)\n#error CSHARP is undefined\n#endif\nConsole.WriteLine(\"#error directive example\");\n}\n}\n}\n</code></pre> <p>When we run the program, the output will be:</p> <pre><code>Program.cs(10,24): error CS1029: #error: 'CSHARP is undefined' [/home/myuser/csharp/directives-project/directives-project.csproj]\nThe build failed. Please fix the build errors and run again.\n</code></pre> <p>We will see some errors, probably like above. Here we are generating a user-defined error.</p> <p>Another thing to note here is the program will be terminated and the line\u00a0<code>#error directive example</code>\u00a0won't be printed as it was in the\u00a0<code>#warning</code>\u00a0directive.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#line-directive","title":"#line directive","text":"<ul> <li> <p>The\u00a0<code>#line</code>\u00a0directive allows us to modify the line number and the filename for errors and warnings.</p> </li> <li> <p>Syntax:</p> </li> </ul> <pre><code>  #line line-number file-name\n</code></pre> <ul> <li>For example:</li> </ul> <pre><code>  #line 50 \"fakeprogram.cs\"\n</code></pre>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-5-how-to-use-line-directive","title":"Example 5: How to use #line directive?","text":"<pre><code>using System;\nnamespace Directive\n{\nclass Error\n{\npublic static void Main(string[] args)\n{\n#line 200 \"AnotherProgram.cs\"\n#warning Actual Warning generated by Program.cs on line 10\n}\n}\n}\n</code></pre> <p>When we run the program, the output will be:</p> <pre><code>AnotherProgram.cs(200,22): warning CS1030: #warning: 'Actual Warning generated by Program.cs on line 10' [/home/myuser/csh\narp/directive-project/directive-project.csproj]\n</code></pre> <p>We have saved the above example as\u00a0<code>Program.cs</code>. The warning was actually generated at\u00a0<code>line 10</code>\u00a0by\u00a0<code>Program.cs</code>. Using the\u00a0<code>#line</code>\u00a0directive, we have changed the line number to\u00a0<code>200</code>\u00a0and the filename to\u00a0<code>AnotherProgram.cs</code>\u00a0that generated the error.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#region-and-endregion-directive","title":"#region and #endregion directive","text":"<ul> <li> <p>The\u00a0<code>#region</code>\u00a0directive allows us to create a region that can be expanded or collapsed when using a Visual Studio Code Editor.</p> </li> <li> <p>This directive is simply used to organize the code.</p> </li> <li> <p>The #region block can not overlap with a\u00a0<code>#if</code>\u00a0block. However, a\u00a0<code>#region</code>\u00a0block can be included within a\u00a0<code>#if</code>\u00a0block and a\u00a0<code>#if</code>\u00a0block can overlap with a\u00a0<code>#region</code>\u00a0block.</p> </li> <li> <p><code>#endregion</code>\u00a0directive indicates the end of a\u00a0<code>#region</code>\u00a0block.</p> </li> </ul> <ul> <li>Syntax:</li> </ul> <pre><code>  #region region-description\ncodes\n#endregion\n</code></pre>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-6-how-to-use-region-directive","title":"Example 6: How to use #region directive?","text":"<pre><code>using System;\nnamespace Directive\n{\nclass Region\n{\npublic static void Main(string[] args)\n{\n#region Hello\nConsole.WriteLine(\"Hello\");\nConsole.WriteLine(\"Hello\");\nConsole.WriteLine(\"Hello\");\nConsole.WriteLine(\"Hello\");\nConsole.WriteLine(\"Hello\");\n#endregion\n}\n}\n}\n</code></pre> <p>When we run the program, the output will be:</p> <pre><code>Hello\nHello\nHello\nHello\nHello\n</code></pre>"},{"location":"week-7-csharp/ce103-week-7-csharp/#pragma-directive","title":"#pragma directive","text":"<ul> <li> <p>The\u00a0<code>#pragma</code>\u00a0directive is used to give the compiler some special instructions for the compilation of the file in which it appears.</p> </li> <li> <p>The instruction may include disabling or enabling some warnings.</p> </li> <li> <p>C# supports two\u00a0<code>#pragma</code>\u00a0instructions:</p> </li> <li> <p><code>#pragma warning</code>: Used for disabling or enabling warnings</p> </li> <li><code>#pragma checksum</code>: It generates checksums for source files which will be used for debugging.</li> </ul> <ul> <li>Syntax:</li> </ul> <pre><code>  #pragma pragma-name pragma-arguments\n</code></pre> <ul> <li>For example:</li> </ul> <pre><code>  #pragma warning disable\n</code></pre>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-7-how-to-use-pragma-directive","title":"Example 7: How to use #pragma directive?","text":"<pre><code>using System;\nnamespace Directive\n{\nclass Error\n{\npublic static void Main(string[] args)\n{\n#pragma warning disable\n#warning This is a warning 1\n#pragma warning restore\n#warning This is a warning 2\n}\n}\n}\n</code></pre> <p>When we run the program, the output will be:</p> <pre><code>Program.cs(12,22): warning CS1030: #warning: 'This is a warning 2' [/home/myuser/csharp/directive-project/directive-project.csproj]\n</code></pre> <p>We can see that only the\u00a0second warning\u00a0is displayed on the output screen.</p> <p>This is because, we initially disabled all warnings before the first warning and restored them only before the second warning.  This is the reason why the first warning was hidden.</p> <p>We can also disable specific warning instead of all warning.</p> <p>To learn more about\u00a0<code>#pragma</code>, visit\u00a0#pragma (C# reference).</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#namespaces-in-c-programming","title":"Namespaces in C# Programming","text":"<p>In this tutorial, we will learn about Namespaces, how to define it, access its members, and use it in a C# program.</p> <p>Namespaces are used in C# to organize and provide a level of separation of codes. </p> <p>They can be considered as a container which consists of other namespaces, classes, etc.</p> <p>A namespace can have following types as its members:</p> <ol> <li>Namespaces (Nested Namespace)</li> <li>Classes</li> <li>Interfaces</li> <li>Structures</li> <li>Delegates</li> </ol> <p>We will discuss about these topics in later tutorials. For now we will stick with classes and namespaces.</p> <p>Namespaces are not mandatory in a C# program, but they do play an important role in writing cleaner codes and managing larger projects.</p> <p>Let's understand the concept of namespace with a real life scenario. We have a large number of files and folders in our computer. </p> <p>Imagine how difficult it would be to manage them if they are placed in a single directory.  This is why we put related files and folders in a separate directory.  This helps us to manage our data properly.</p> <p>The concept of namespace is similar in C#. It helps us to\u00a0organize\u00a0different members by putting related members in the same namespace.</p> <p>Namespace also solves the problem of\u00a0naming conflict. Two or more classes when put into different namespaces can have same name.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#defining-namespace-in-c","title":"Defining Namespace in C","text":"<p>We can define a namespace in C# using the\u00a0namespace\u00a0keyword as:</p> <pre><code>namespace Namespace-Name\n{\n//Body of namespace\n}\n</code></pre> <p>For example:</p> <pre><code>namespace MyNamespace\n{\nclass MyClass\n{\npublic void MyMethod()\n{\nSystem.Console.WriteLine(\"Creating my namespace\");\n}\n}\n}\n</code></pre> <p>In the above example, a namespace\u00a0<code>MyNamespace</code>\u00a0is created.  It consists of a class\u00a0<code>MyClass</code>\u00a0as its member.\u00a0 <code>MyMethod</code>\u00a0is a method of class\u00a0<code>MyClass</code>.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#accessing-members-of-namespace-in-c","title":"Accessing Members of Namespace in C","text":"<p>The members of a namespace can be accessed using the\u00a0<code>dot(.)</code>\u00a0operator. </p> <p>The syntax for accessing the member of namespace is,</p> <pre><code>Namespace-Name.Member-Name\n</code></pre> <p>For example, if we need to create an object of MyClass, it can be done as,</p> <pre><code>MyNamespace.MyClass myClass = new MyNamespace.MyClass();\n</code></pre> <p>We will discuss about creating objects in later tutorials. For now just focus on how the class\u00a0<code>MyClass</code>\u00a0is accessed.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-1-introducing-namespace-in-c-program","title":"Example 1: Introducing Namespace in C# Program","text":"<pre><code>using System;\nnamespace MyNamespace\n{\npublic class SampleClass\n{\npublic static void myMethod()\n{\nConsole.WriteLine(\"Creating my namespace\");\n}\n}\n}\nnamespace MyProgram\n{\npublic class MyClass\n{\npublic static void Main()\n{\nMyNamespace.SampleClass.myMethod();\n}\n}\n}\n</code></pre> <p>When we run the program, the output will be:</p> <pre><code>Creating my namespace\n</code></pre> <p>In the above program, we have created our own namespace\u00a0<code>MyNamespace</code>\u00a0 and accessed its members from\u00a0<code>Main()</code>\u00a0method inside\u00a0<code>MyClass</code>.  As said earlier, the\u00a0<code>dot (.)</code>\u00a0operator is used to access the member of namespace.</p> <p>In the\u00a0<code>Main()</code>\u00a0method,\u00a0<code>myMethod()</code>\u00a0method is called using the\u00a0<code>dot (.)</code>\u00a0operator.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#using-a-namespace-in-c-the-using-keyword","title":"Using a Namespace in C# [The using Keyword]","text":"<p>A namespace can be included in a program using the using keyword. The syntax is,</p> <pre><code>using Namespace-Name;\n</code></pre> <p>For example,</p> <pre><code>using System;\n</code></pre> <p>The advantage of this approach is we don't have to specify  the fully qualified name of the members of that namespace every time we are accessing it. Once the line</p> <pre><code>using System;\n</code></pre> <p>is included at the top of the program. We can write</p> <pre><code>Console.WriteLine(\"Hello World!\");\n</code></pre> <p>Instead of the fully qualified name i.e.</p> <pre><code>System.Console.WriteLine(\"Hello World!\");\n</code></pre>"},{"location":"week-7-csharp/ce103-week-7-csharp/#nested-namespace-in-c","title":"Nested Namespace in C","text":"<p>A namespace can contain another namespace.  It is called nested namespace.  The nested namespace and its members can also be accessed  using the\u00a0<code>dot (.)</code>\u00a0operator.</p> <p>The syntax for creating nested namespace is as follows:</p> <pre><code>namespace MyNamespace\n{\nnamespace NestedNamespace\n{\n// Body of nested namespace\n}\n}\n</code></pre>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-2-nested-namespace-in-c","title":"Example 2: Nested Namespace in C","text":"<pre><code>using System;\n// Nested Namespace\nnamespace MyNamespace\n{\nnamespace Nested\n{\npublic class SampleClass\n{\npublic static void myMethod()\n{\nConsole.WriteLine(\"Nested Namespace Example\");\n}\n}\n}\n}\nnamespace MyProgram\n{\npublic class MyClass\n{\npublic static void Main()\n{\nMyNamespace.Nested.SampleClass.myMethod();\n}\n}\n}\n</code></pre> <p>When we run the program, the output will be:</p> <pre><code>Nested Namespace Example\n</code></pre> <p>This example illustrates how nested namespace can be implemented in C#.</p> <p>Here, we now have an extra namespace inside\u00a0<code>MyNamespace</code>\u00a0called\u00a0<code>Nested</code>.  So, instead of using\u00a0<code>MyNamespace.SampleClass.myMethod()</code>,  we have to use\u00a0<code>MyNamespace.Nested.SampleClass.myMethod()</code>.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#c-struct","title":"C# struct","text":"<p>In this tutorial, you will learn about structs in C# with the help of examples.</p> <p>The struct (structure) is like a class in C# that is used to store data. However, unlike classes, a struct is a value type.</p> <p>Suppose we want to store the name and age of a person. We can create two variables:\u00a0name\u00a0and\u00a0age\u00a0and store value.</p> <p>However, suppose we want to store the same information of multiple people.</p> <p>In this case, creating variables for an individual person might be a tedious task. To overcome this we can create a struct that stores\u00a0name\u00a0and\u00a0age. Now, this struct can be used for every person.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#define-struct-in-c","title":"Define struct in C","text":"<p>In C#, we use the\u00a0<code>struct</code>\u00a0keyword to define a struct. For example,</p> <pre><code>struct Employee  {\npublic int id;\n}\n</code></pre> <p>Here,\u00a0id\u00a0is a field inside the struct. A struct can include methods, indexers, etc as well.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#declare-struct-variable","title":"Declare struct variable","text":"<p>Before we use a struct, we first need to create a struct variable. We use a struct name with a variable to declare a struct variable. For example,</p> <pre><code>struct Employee {\npublic int id;\n}\n...\n// declare emp of struct Employee\nEmployee emp;\n</code></pre> <p>In the above example, we have created a struct named\u00a0Employee. Here, we have declared a variable\u00a0emp\u00a0of the struct\u00a0Employee.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#access-c-struct","title":"Access C# struct","text":"<p>We use the struct variable along with the\u00a0<code>.</code>\u00a0operator to access members of a struct. For example,</p> <pre><code>struct Employee {\npublic int id;\n}\n... // declare emp of struct Employee\nEmployee emp;\n// access member of struct      \nemp.id = 1;\n</code></pre> <p>Here, we have used variable\u00a0emp\u00a0of a struct\u00a0Employee\u00a0with\u00a0<code>.</code>\u00a0operator to access members of the\u00a0Employee.</p> <pre><code>emp.id = 1;\n</code></pre> <p>This accesses the\u00a0id\u00a0field of struct\u00a0Employee.</p> <p>Note: Primitive data types like\u00a0<code>int</code>,\u00a0<code>bool</code>,\u00a0<code>float</code>\u00a0are pre-defined structs in C#.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-c-struct","title":"Example: C# Struct","text":"<pre><code>using System;\nnamespace CsharpStruct {\n// defining struct\nstruct Employee {\npublic int id;\npublic void getId(int id) {\nConsole.WriteLine(\"Employee Id: \" + id);\n}\n}\nclass Program {\nstatic void Main(string[] args) {\n// declare emp of struct Employee\nEmployee emp;\n// accesses and sets struct field\nemp.id = 1;\n// accesses struct methods\nemp.getId(emp.id);\nConsole.ReadLine();\n}\n}\n}\n</code></pre> <p>Output</p> <pre><code>Employee Id: 1\n</code></pre> <p>In the above program, we have created a struct named\u00a0Employee. It contains a field\u00a0id\u00a0and a method\u00a0getId().</p> <p>Inside the\u00a0Program\u00a0class, we have declared a variable\u00a0emp\u00a0of struct\u00a0Employee. We then used the\u00a0emp\u00a0variable to access fields and methods of the class.</p> <p>Note: We can also instantiate a struct using the\u00a0<code>new</code>\u00a0keyword. For example,</p> <pre><code>Employee emp = new Employee();\n</code></pre> <p>Here, this line calls the parameterless constructor of the struct and initializes all the members with default values.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#constructors-in-c-struct","title":"Constructors in C# struct","text":"<p>In C#, a struct can also include constructors. For example,</p> <pre><code>struct Employee {\npublic int id;\n// constructor \npublic Employee(int employeeId) {\nid = employeeId\n}\n}\n</code></pre> <p>Here, we have created a parameterized constructor\u00a0<code>Employee()</code>\u00a0with parameter\u00a0employeeId.</p> <p>Note: We cannot create parameterless constructors in C# version 9.0 or below.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#example-constructor-in-c-structs","title":"Example: Constructor in C# structs","text":"<pre><code>using System;\nnamespace CsharpStruct {\n// defining struct\nstruct Employee {\npublic int id;\npublic string name;\n// parameterized constructor\npublic Employee(int employeeId, string employeeName) {         id = employeeId;      name = employeeName;    }\n}\nclass Program {\nstatic void Main(string[] args) {\n// calls constructor of struct\nEmployee emp = new Employee(1, \"Brian\");\nConsole.WriteLine(\"Employee Name: \" + emp.name);\nConsole.WriteLine(\"Employee Id: \" + emp.id);\nConsole.ReadLine();\n}\n}\n}\n</code></pre> <p>Output</p> <pre><code>Employee Name: Brian\nEmployee Id: 1\n</code></pre> <p>In the above example, we have created a parameterized constructor inside the\u00a0Employee\u00a0struct.  Inside the constructor,  we have assigned the values of fields:\u00a0id\u00a0and\u00a0name.</p> <p>Notice the line,</p> <pre><code>Employee emp = new Employee(1, \"Brian\");\n</code></pre> <p>Like in C# classes, we are using the\u00a0<code>new</code>\u00a0keyword to call the constructor.  Here,\u00a01\u00a0and\u00a0\"Brian\"\u00a0are arguments passed to the constructor,  where they are assigned to the parameters\u00a0employeeID\u00a0and\u00a0employeeName\u00a0respectively.\"</p> <p>Note: We must assign the value for every field of struct inside the parameterized constructor. For example,</p> <pre><code>// error code\npublic Employee(int employeeID, employeeName) {\nid = employeeID;\n}\n</code></pre> <p>Here, we have not assigned the value for the\u00a0name\u00a0field. So the code will generate an error.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#properties-in-c-struct","title":"Properties in C# struct","text":"<p>We can also use properties inside a C# struct. For example,</p> <pre><code>using System;\nnamespace CsharpStruct {\n// defining struct\nstruct Employee {\npublic int id;\n// creates property\npublic int Id {      // returns id field\nget {        return id;      }      // sets id field\nset {        id = value;      }    }\n}\nclass Program {\nstatic void Main(string[] args) {\n// calls the constructor of struct\nEmployee emp = new Employee();\nemp.Id = 1;\nConsole.WriteLine(\"Employee Id: \" + emp.Id);\nConsole.ReadLine();\n}\n}\n}\n</code></pre> <p>Output</p> <pre><code>Employee Id: 1\n</code></pre> <p>In the above example, we have\u00a0Id\u00a0property inside the\u00a0Employee\u00a0struct.</p> <p>The\u00a0get\u00a0method returns the\u00a0id\u00a0field and the\u00a0set\u00a0method assigns the value to the\u00a0id\u00a0field.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#difference-between-class-and-struct-in-c","title":"Difference between class and struct in C","text":"<p>In C# classes and structs look similar. However, there are some differences between them.</p> <p>A class is a reference type whereas a struct is a value type. For example,</p> <pre><code>using System;\nnamespace CsharpStruct {\n// defining class\nclass Employee {\npublic string name;\n}\nclass Program {\nstatic void Main(string[] args) {\nEmployee emp1 = new Employee();\nemp1.name = \"John\";\n// assign emp1 to emp2\nEmployee emp2 = emp1;\nemp2.name = \"Ed\";\nConsole.WriteLine(\"Employee1 name: \" + emp1.name);\nConsole.ReadLine();\n}\n}\n}\n</code></pre> <p>Output</p> <pre><code>Employee1 name: Ed\n</code></pre> <p>In the above example, we have assigned the value of\u00a0emp1\u00a0to\u00a0emp2. The\u00a0emp2\u00a0object refers to the same object as\u00a0emp1. So, an update in\u00a0emp2\u00a0updates the value of\u00a0emp1\u00a0automatically.</p> <p>This is why a class is a\u00a0reference type.</p> <p>Contrary to classes, when we assign one struct variable to another, the value of the struct gets copied to the assigned variable. So updating one struct variable doesn't affect the other. For example,</p> <pre><code>using System;\nnamespace CsharpStruct {\n// defining struct\nstruct Employee {\npublic string name;\n}\nclass Program {\nstatic void Main(string[] args) {\nEmployee emp1 = new Employee();\nemp1.name = \"John\";\n// assign emp1 to emp2\nEmployee emp2 = emp1;\nemp2.name = \"Ed\";\nConsole.WriteLine(\"Employee1 name: \" + emp1.name);\nConsole.ReadLine();\n}\n}\n}\n</code></pre> <p>Output</p> <pre><code>Employee1 name: John\n</code></pre> <p>When we assign the value of\u00a0emp1\u00a0to\u00a0emp2, a new value\u00a0emp2\u00a0is created. Here, the value of\u00a0emp1\u00a0is copied to\u00a0emp2. So, change in\u00a0emp2\u00a0does not affect\u00a0emp1.</p> <p>This is why struct is a\u00a0value type.</p> <p>Moreover,\u00a0inheritance\u00a0is not possible in the structs whereas it is an important feature of the C# classes.</p>"},{"location":"week-7-csharp/ce103-week-7-csharp/#references","title":"References","text":"<ul> <li> <p>Learn C# Programming</p> </li> <li> <p>Free C# Programming Book</p> </li> <li> <p>free-programming-books/free-programming-books-langs.md at master \u00b7 EbookFoundation/free-programming-books \u00b7 GitHub</p> </li> </ul>"},{"location":"week-7-csharp/ce103-week-7-csharp/#extras","title":"Extras","text":"<ul> <li> <p>Creating a Simple Dynamic-Link Library - Win32 apps | Microsoft Docs</p> </li> <li> <p>Dynamic-Link Library Creation - Win32 apps | Microsoft Docs</p> </li> <li> <p>Exporting from a DLL | Microsoft Docs</p> </li> <li> <p>Exporting from a DLL Using DEF Files | Microsoft Docs</p> </li> <li> <p>How to create a DLL library in C and then use it with C# - CodeProject</p> </li> </ul>"},{"location":"week-7-csharp/ce103-week-7-csharp/#extras_1","title":"Extras","text":"<ul> <li> <p>DLL - How to Write</p> </li> <li> <p>DLL - Dynamic Link Library in C - Steps to Create and Use</p> </li> </ul> <p>https://www.codementor.io/@a_hathon/building-and-using-dlls-in-c-d7rrd4caz</p> <ul> <li> <p>DLL Injection - free code corner</p> </li> <li> <p>GitHub - dennisbabkin/InjectAll: Tutorial that demonstrates how to code a Windows driver to inject a custom DLL into all running processes. I coded it from start to finish using C++ and x86/x64 Assembly language in Microsoft Visual Studio. The solution includes a kernel driver project, a DLL project and a C++ test console project.</p> </li> <li> <p>Coding Windows Kernel Driver - InjectAll - Making the Visual Studio solution for DLL injection into all running processes.</p> </li> </ul>"},{"location":"week-7-csharp/ce103-week-7-csharp/#others","title":"Others","text":"<ul> <li> <p>std::dec, std::hex, std::oct - cppreference.com</p> </li> <li> <p>std::setbase - cppreference.com</p> </li> <li> <p>C++ Tutorial: Multi-Threaded Programming - Thread for Win32 - 2020</p> </li> </ul>"},{"location":"week-8-midterm/ce103-week-8-midterm/","title":"CE103 Algorithms and Programming I","text":""},{"location":"week-8-midterm/ce103-week-8-midterm/#ce103-algorithms-and-programming-i","title":"CE103 Algorithms and Programming I","text":""},{"location":"week-8-midterm/ce103-week-8-midterm/#week-8-midterm","title":"Week-8 (Midterm)","text":""},{"location":"week-8-midterm/ce103-week-8-midterm/#fall-semester-2021-2022","title":"Fall Semester, 2021-2022","text":"<p>Download DOC, SLIDE, PPTX</p>"},{"location":"week-8-midterm/ce103-week-8-midterm/#midterm","title":"Midterm","text":""},{"location":"week-9-java-I/ce103-week-9-java-I/","title":"CE103 Algorithms and Programming I","text":""},{"location":"week-9-java-I/ce103-week-9-java-I/#ce103-algorithms-and-programming-i","title":"CE103 Algorithms and Programming I","text":""},{"location":"week-9-java-I/ce103-week-9-java-I/#week-9-java-functional-console-programming-i","title":"Week-9 (Java Functional Console Programming-I)","text":""},{"location":"week-9-java-I/ce103-week-9-java-I/#fall-semester-2021-2022","title":"Fall Semester, 2021-2022","text":"<p>Download DOC, SLIDE, PPTX</p>"},{"location":"week-9-java-I/ce103-week-9-java-I/#java-functional-console-programming-i","title":"Java Functional Console Programming-I","text":"<ol> <li>Java Programming</li> </ol> <p>a. Java Introduction</p> <p>i. Java Hello World</p> <p>ii. Java JVM, JRE, and JDK</p> <p>iii. Java Variables</p> <p>iv. Java Data Types</p> <p>v. Java Operators</p> <p>vi. Java Input and Output</p> <p>vii. Java Expressions &amp; Blocks</p> <p>viii. Java Comment</p> <p>b. Java Flow Control</p> <p>i. Java if..else</p> <p>ii. Java switch statement</p> <p>iii. Java for loop</p> <p>iv. Java for-each loop</p> <p>v. Java while loop</p> <p>vi. Java break statement</p> <p>vii. Java continue statement</p> <p>c. Java Arrays</p> <p>i. Java Arrays</p> <p>ii. Multidimensional Array</p> <p>Java Copy Array</p>"},{"location":"tr/resume/#ozgecmis","title":"\u00d6zge\u00e7mi\u015f","text":"<p>\u0130ndir </p> <ul> <li> <p>\u00d6zge\u00e7mi\u015f-\u0130ngilizce</p> </li> <li> <p>\u00d6zge\u00e7mi\u015f-T\u00fcrk\u00e7e</p> </li> </ul> \u0130ngilizce T\u00fcrk\u00e7e"},{"location":"tr/week-1-intro/ce103-week-1-intro/#week-1-intro","title":"Week-1 (Intro)","text":""},{"location":"tr/week-1-intro/ce103-week-1-intro/#what-will-you-see-in-the-roadmap","title":"What will you see in the roadmap?","text":"<ul> <li> <p>Frontend</p> </li> <li> <p>Backend</p> </li> <li> <p>DevOps</p> </li> <li> <p>DBA</p> </li> </ul> <p>and more</p>"},{"location":"tr/week-1-intro/ce103-week-1-intro/#using-google","title":"Using Google","text":""},{"location":"tr/week-1-intro/ce103-week-1-intro/#operating-system-comparisons","title":"Operating System Comparisons","text":"<p>reference</p> <p></p> <p></p> <p></p> <p></p> <p></p>"},{"location":"tr/week-1-intro/ce103-week-1-intro/#what-is-port","title":"What is Port?","text":"<p>In computer networking, a port is a communication endpoint. At the software level, within an operating system, a port is a logical construct that identifies a specific process or a type of network service. A port is identified for each transport protocol and address combination by a 16-bit unsigned number, known as the port number. The most common transport protocols that use port numbers are the Transmission Control Protocol (TCP) and the User Datagram Protocol (UDP).</p> <p>reference</p> <p></p>"},{"location":"tr/week-1-intro/ce103-week-1-intro/#introduction-to-the-command-line-interface","title":"Introduction to the command line interface","text":"<p>Reference Books</p> <p>Bash Notes For Professionals Linux Notes For Professionals PowerShell Notes For Professionals</p>"},{"location":"tr/week-1-intro/ce103-week-1-intro/#why-would-you-use-cli-over-gui","title":"Why Would You Use CLI over GUI?","text":"<ul> <li>Less Resource   It is not a secret that the text-based program needs very little resources of your computer. This means that with CLI you can do similar tasks with minimum resources.</li> </ul> <ul> <li>High Precision   You can use a specific command to target specific destinations with ease. As long as you don\u2019t type the wrong command, it will work like a charm. Once you learn the basics, writing syntax is not as hard as you might think.</li> </ul> <ul> <li>Repetitive Tasks Friendly   GUI has developed well over the years. But, the operating system may not give you all the menus and buttons to perform all tasks. One of the reasons is safety. This leaves you overwhelmed if you have to do repetitive tasks. For example, when you have to handle hundreds of files within a folder, CLI enables you to use a single command to do automate the repetition easily.</li> </ul> <ul> <li>Powerful   Most operating systems today prevent you from messing up the system\u2019s core process. Windows has system protection and MacOS has SIP (System Integrity Protection). You won\u2019t be able to perform certain tasks which are system protected. However, with CLI, you will have full control over your system.</li> </ul>"},{"location":"tr/week-1-intro/ce103-week-1-intro/#open-the-command-line-interface-windows","title":"Open the command-line interface (Windows)","text":"<ul> <li> <p>Go to the Start menu or screen, and enter \"Command Prompt\" in the search field.</p> </li> <li> <p>Go to Start menu \u2192 Windows System \u2192 Command Prompt.</p> </li> <li> <p>Go to Start menu \u2192 All Programs \u2192 Accessories \u2192 Command Prompt.</p> </li> <li> <p>Go to the Start screen, hover your mouse in the lower-left corner of the screen, and click the down arrow that appears (on a touch screen, instead flick up from the bottom of the screen). The Apps page should open. Click on Command Prompt in the Windows System section.</p> </li> <li> <p>Hold the special Windows key on your keyboard and press the \"X\" key. Choose \"Command Prompt\" from the pop-up menu.</p> </li> <li> <p>Hold the Windows key and press the \"R\" key to get a \"Run\" window. Type \"cmd\" in the box, and click the OK key.</p> </li> </ul> <p></p> <p></p> <p></p> <p></p> <p></p>"},{"location":"tr/week-1-intro/ce103-week-1-intro/#open-the-command-line-interface-linux","title":"Open the command-line interface (Linux)","text":"<p>It's probably under </p> <ul> <li>Applications \u2192 Accessories \u2192 Terminal,   or </li> <li>Applications \u2192 System \u2192 Terminal,    but that may depend on your system.    If it's not there, you can try to Google it. :)</li> </ul> <p></p>"},{"location":"tr/week-1-intro/ce103-week-1-intro/#reference","title":"Reference","text":"<p>Network_address_translation</p> <p>GitHub - kamranahmedse/developer-roadmap: Roadmap to becoming a web developer in 2021</p> <p>GitHub - jwasham/coding-interview-university: A complete computer science study plan to become a software engineer.</p> <p>GitHub - sindresorhus/awesome: \ud83d\ude0e Awesome lists about all kinds of interesting topics</p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#flowgorithm","title":"Flowgorithm","text":"<p>http://www.flowgorithm.org/</p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#pseudocode","title":"Pseudocode","text":"<p>Pseudocode - Wikipedia</p> <p>Pseudocode Examples</p> <p>How to write a Pseudo Code? - GeeksforGeeks</p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#introduction-to-analysis-of-algorithms","title":"Introduction to Analysis of Algorithms","text":"<p>In this course we will learn how to code with several development environments and next term we will see analysis of algorithms in details. </p> <p>This topic is covered in the following link :  CE100 Introduction to Analysis of Algorithms</p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#programming-environment-setup-and-configuration","title":"Programming Environment Setup and Configuration","text":"<p>Programming life is not about only learning how to code. Mostly you need to use several code development environments and you need to learn how to use them efficiently.</p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-1","title":"DevCpp (Install / Compile / Run / Debug) (1)","text":"<p>Download DevC++ IDE from following link</p> <p>https://www.bloodshed.net/</p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-2","title":"DevCpp (Install / Compile / Run / Debug) (2)","text":"<p>Open DevC++ IDE for C Project Generation</p> <p>Open File-&gt;New-&gt;Project</p> <p></p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-3","title":"DevCpp (Install / Compile / Run / Debug) (3)","text":"<p>Select Console Application from Basic tab and with C Project Option and write a project name such as \"Hello\" then press OK</p> <p>Select a folder and save Hello.dev project file. </p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-4","title":"DevCpp (Install / Compile / Run / Debug) (4)","text":"<p>You will see a sample main with empty body</p> <p></p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-6","title":"DevCpp (Install / Compile / Run / Debug) (6)","text":"<p>add the following line in main function. This will write \"Hello, World!\" on the screen and then wait a keypress to exit from application</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n/* run this program using the console pauser or add your own getch, system(\"pause\") or input loop */\nint main(int argc, char *argv[]) {\nprintf(\"Hello, World!\");\ngetchar();\nreturn 0;\n}\n</code></pre>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-7","title":"DevCpp (Install / Compile / Run / Debug) (7)","text":"<p>Then save the file</p> <p></p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-8","title":"DevCpp (Install / Compile / Run / Debug) (8)","text":"<p>Use from menu Execute-&gt;Compile F5 to generate Hello.exe </p> <p></p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-9","title":"DevCpp (Install / Compile / Run / Debug) (9)","text":"<p>You can find the generated Hello.exe path from Compile.log as follow. Check the Output Filename</p> <pre><code>Compiling project changes...\n--------\n- Project Filename: E:\\UgurCoruh\\RTEU\\Lectures\\2021-2022 G\u00fcz CE103 - Algorithms and Programming I\\Lectures\\ce103-algorithms-and-programming-I\\Week-2\\devcpp-hello-world-apps\\Hello.dev\n- Compiler Name: TDM-GCC 4.9.2 64-bit Release\n\nBuilding makefile...\n--------\n- Filename: E:\\UgurCoruh\\RTEU\\Lectures\\2021-2022 G\u00fcz CE103 - Algorithms and Programming I\\Lectures\\ce103-algorithms-and-programming-I\\Week-2\\devcpp-hello-world-apps\\Makefile.win\n\nProcessing makefile...\n--------\n- Makefile Processor: C:\\Program Files (x86)\\Dev-Cpp\\MinGW64\\bin\\mingw32-make.exe\n- Command: mingw32-make.exe -f \"E:\\UgurCoruh\\RTEU\\Lectures\\2021-2022 G\u00fcz CE103 - Algorithms and Programming I\\Lectures\\ce103-algorithms-and-programming-I\\Week-2\\devcpp-hello-world-apps\\Makefile.win\" all\n\ngcc.exe -c main.c -o main.o -I\"C:/Program Files (x86)/Dev-Cpp/MinGW64/include\" -I\"C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include\" -I\"C:/Program Files (x86)/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include\" \ngcc.exe main.o -o Hello.exe -L\"C:/Program Files (x86)/Dev-Cpp/MinGW64/lib\" -L\"C:/Program Files (x86)/Dev-Cpp/MinGW64/x86_64-w64-mingw32/lib\" -static-libgcc\n\nCompilation results...\n--------\n- Errors: 0\n- Warnings: 0\n- Output Filename: E:\\UgurCoruh\\RTEU\\Lectures\\2021-2022 G\u00fcz CE103 - Algorithms and Programming I\\Lectures\\ce103-algorithms-and-programming-I\\Week-2\\devcpp-hello-world-apps\\Hello.exe\n- Output Size: 128,103515625 KiB\n- Compilation Time: 2,13s\n</code></pre>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-10","title":"DevCpp (Install / Compile / Run / Debug) (10)","text":"<p>Then you can run with Execute-&gt;Run F10 or Directly Compile&amp;Run F11</p> <p></p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-12","title":"DevCpp (Install / Compile / Run / Debug) (12)","text":"<p>Click on line numbers and add breakpoints for debugger. This red point will be debugger stop points</p> <p></p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-13","title":"DevCpp (Install / Compile / Run / Debug) (13)","text":"<p>In the ,menu section select compiler with debug option</p> <p></p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-14","title":"DevCpp (Install / Compile / Run / Debug) (14)","text":"<p>Compile application with debug setting and in Execute Section use Debug F5 to start debugging</p> <p></p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-15","title":"DevCpp (Install / Compile / Run / Debug) (15)","text":"<p>Debugger will stop at breakpoint at the debug point (blue line)</p> <p></p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-16","title":"DevCpp (Install / Compile / Run / Debug) (16)","text":"<p>Moving to next statement can be done via control buttons or shortcuts</p> <p></p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-17","title":"DevCpp (Install / Compile / Run / Debug) (17)","text":"<p>Press F8 to step-by-step continue</p> <p>Then go to Project Options - Compiler - Linker and set Generate debugging information to \"yes\", and make sure you are not using any optimization options (they're not good for debug mode). Also check the Parameters tab, make sure you don't have any optimization options (like -O2 or -O3, but -O0 is ok because it means no optimization) or strip option (-s).</p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-18","title":"DevCpp (Install / Compile / Run / Debug) (18)","text":"<p>After that, do a full rebuild (Ctrl-F11), then set breakpoint(s) where you want the debugger to stop (otherwise it will just run the program). To set a breakpoint on a line, just click on the gutter (the gray band on the left), or press Ctrl-F5.</p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-19","title":"DevCpp (Install / Compile / Run / Debug) (19)","text":"<p>Now you are ready to launch the debugger, by pressing F8 or clicking the debug button. If everything goes well, the program will start, and then stop at the first breakpoint. Then you can step through the code, entering function calls, by pressing Shift-F7 or the \"step into\" button, or stepping over the function calls, by pressing F7 or the \"next step\" button. You can press Ctrl-F7 or the \"continue\" button to continue execution till the next breakpoint. At any time, you can add or remove breakpoints.</p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#devcpp-install-compile-run-debug-20","title":"DevCpp (Install / Compile / Run / Debug) (20)","text":"<p>When the program stopped at a breakpoint and you are stepping through the code, you can display the values of various variables in your program by putting your mouse over them, or you can display variables and expressions by pressing F4 or the \"add watch\" button and typing the expression.</p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-2","title":"Code Blocks (Install / Compile / Run / Debug) (2)","text":"<p>Open Code Blocks and </p> <p>Select File-&gt;New-&gt;Project</p> <p></p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-3","title":"Code Blocks (Install / Compile / Run / Debug) (3)","text":"<p>Select Console Application</p> <p>Click Next from Opening Window</p> <p></p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-4","title":"Code Blocks (Install / Compile / Run / Debug) (4)","text":"<p>Select C for Sample Project </p> <p></p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-6","title":"Code Blocks (Install / Compile / Run / Debug) (6)","text":"<p>Select complier for this project we selected GCC but you can select C compliers from list. Set Debug and Release executable output folders.</p> <p></p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-7","title":"Code Blocks (Install / Compile / Run / Debug) (7)","text":"<p>After this wizard you will have the following code</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\nint main()\n{\nprintf(\"Hello world!\\n\");\nreturn 0;\n}\n</code></pre>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-8","title":"Code Blocks (Install / Compile / Run / Debug) (8)","text":"<p>Select Debug Build from menu</p> <p></p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-9","title":"Code Blocks (Install / Compile / Run / Debug) (9)","text":"<p>Run with Build and Run F9</p> <p></p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-10","title":"Code Blocks (Install / Compile / Run / Debug) (10)","text":"<p>You should see the following output</p> <p></p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-11","title":"Code Blocks (Install / Compile / Run / Debug) (11)","text":"<p>Add the following lines to your source code for debugging</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\nint main()\n{\nprintf(\"Hello world! Step-1\\n\");\nprintf(\"Hello world! Step-2\\n\");\nprintf(\"Hello world! Step-3\\n\");\nprintf(\"Hello world! Step-4\\n\");\nprintf(\"Hello world! Step-5\\n\");\nprintf(\"Hello world! Step-6\\n\");\nreturn 0;\n}\n</code></pre>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-12","title":"Code Blocks (Install / Compile / Run / Debug) (12)","text":"<p>and add break points with F5 or mouse click</p> <p></p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-13","title":"Code Blocks (Install / Compile / Run / Debug) (13)","text":"<p>select Debug-&gt;Start/Continue to start debugger</p> <p></p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-14","title":"Code Blocks (Install / Compile / Run / Debug) (14)","text":"<p>If you see the following error this is related with long or turkish character including path. Just move project to a shorter path and try again</p> <pre><code>Setting breakpoints\nDebugger name and version: GNU gdb (GDB) 8.1\nStarting the debuggee failed: No executable specified, use `target exec'.\nDebugger finished with status 0\n</code></pre>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#code-blocks-install-compile-run-debug-15","title":"Code Blocks (Install / Compile / Run / Debug) (15)","text":"<p>You will see the following yellow pointer for debugger</p> <p></p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#gccg-complier-mingw-clang-cl-llvm-1","title":"GCC/G++ Complier (MinGW) / Clang-cl (LLVM) (1)","text":"<p>Download and install MinGW or LLVM compiler (if you downloded then skip this step)</p> <p>MinGW installer (clang)</p> <p>Download MinGW-w64 - for 32 and 64 bit Windows from SourceForge.net</p> <p>LLVM installer (gcc / g++)</p> <p>Download LLVM releases</p> <p>Also use the following notes</p> <p>https://llvm.org/devmtg/2014-04/PDFs/Talks/clang-cl.pdf</p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#gccg-complier-mingw-clang-cl-llvm-2","title":"GCC/G++ Complier (MinGW) / Clang-cl (LLVM) (2)","text":"<p>Open a console with \"cmd\" and test the following commands if commands are not recognized then set the system environment variable add gcc and g++ exe paths to path variable (add to both system and user path variable)</p> <pre><code>gcc --version\n\ng++ --version\n</code></pre> <pre><code>C:\\Users\\ugur.coruh&gt;gcc --version\ngcc (x86_64-win32-seh-rev0, Built by MinGW-W64 project) 8.1.0\nCopyright (C) 2018 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n</code></pre> <pre><code>clang --version\n</code></pre>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#gccg-complier-mingw-clang-cl-llvm-3","title":"GCC/G++ Complier (MinGW) / Clang-cl (LLVM) (3)","text":"<p>for gcc.exe, g++.exe and gdb.exe</p> <pre><code>C:\\Program Files\\mingw-w64\\x86_64-8.1.0-win32-seh-rt_v6-rev0\\mingw64\\bin\n</code></pre> <p>for clang.exe , lldb.exe</p> <pre><code>C:\\Program Files\\LLVM\\bin\n</code></pre> <p>This folder paths changes according to your setup</p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-2","title":"VSCode (Install / Compile / Run / Debug) (2)","text":"<p>In this sample you will find MinGW and LLVM compiler combinations for C and C++</p> <p>Create a folder and enter this folder then open this folder with vscode by right click</p> <p></p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-3","title":"VSCode (Install / Compile / Run / Debug) (3)","text":"<p>or enter the folder via console </p> <p></p> <p>write </p> <pre><code>code .\n</code></pre>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-4","title":"VSCode (Install / Compile / Run / Debug) (4)","text":"<p>This will open vscode for current folder . dot present current folder. </p> <p>You will see a empty folder in the right window</p> <p></p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-6","title":"VSCode (Install / Compile / Run / Debug) (6)","text":"<p>Create a hello.c file and write following content</p> <pre><code>#include &lt;stdio.h&gt;\nint main() {\n// printf() displays the string inside quotation\nprintf(\"Hello, World!\");\nreturn 0;\n}\n</code></pre>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-7","title":"VSCode (Install / Compile / Run / Debug) (7)","text":"<p>use CTRL+SHIFT+B (you should be on source code section) to build file</p> <p></p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-8","title":"VSCode (Install / Compile / Run / Debug) (8)","text":"<p>Select GCC or CLANG for this sample we can use GCC</p> <p>You will see output generated Hello.exe</p> <p></p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-9","title":"VSCode (Install / Compile / Run / Debug) (9)","text":"<p>for debugging just put breakpoint and build again</p> <p></p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-10","title":"VSCode (Install / Compile / Run / Debug) (10)","text":"<p>after build for debug press CTRL+SHIFT+D (you should be on source code section)and in the  right window select create launch.json</p> <p></p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-11","title":"VSCode (Install / Compile / Run / Debug) (11)","text":"<p>from opening window select C++ GDB/LLDB</p> <p></p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-12","title":"VSCode (Install / Compile / Run / Debug) (12)","text":"<p>from next opening menu select mingw-w64 gcc.exe</p> <p></p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-13","title":"VSCode (Install / Compile / Run / Debug) (13)","text":"<p>this will run debugger and you will see debug points activated</p> <p></p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-14","title":"VSCode (Install / Compile / Run / Debug) (14)","text":"<p>then you can step-by-step debug your code.</p> <p>the following task.json and launch.json automatically generated with your selections</p> <p></p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-16","title":"VSCode (Install / Compile / Run / Debug) (16)","text":"<p>task.json</p> <pre><code>{\n\"tasks\": [\n{\n\"type\": \"cppbuild\",\n\"label\": \"C/C++: gcc.exe etkin dosyay\u0131 derle\",\n\"command\": \"C:\\\\Program Files\\\\mingw-w64\\\\x86_64-8.1.0-win32-seh-rt_v6-rev0\\\\mingw64\\\\bin\\\\gcc.exe\",\n\"args\": [\n\"-fdiagnostics-color=always\",\n\"-g\",\n\"${file}\",\n\"-o\",\n\"${fileDirname}\\\\${fileBasenameNoExtension}.exe\"\n],\n\"options\": {\n\"cwd\": \"${fileDirname}\"\n},\n\"problemMatcher\": [\n\"$gcc\"\n],\n\"group\": {\n\"kind\": \"build\",\n\"isDefault\": true\n},\n\"detail\": \"Hata Ay\u0131klay\u0131c\u0131s\u0131 taraf\u0131ndan olu\u015fturulan g\u00f6rev.\"\n}\n],\n\"version\": \"2.0.0\"\n}\n</code></pre>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-17","title":"VSCode (Install / Compile / Run / Debug) (17)","text":"<p>you can do the same thing for other compilers and c++ source codes. LLVM do not support debug on vscode now.</p> <p>for C++ VsCode you can check the following links</p> <p>for Windows</p> <p>https://code.visualstudio.com/docs/cpp/config-mingw</p> <p>for Linux</p> <p>https://code.visualstudio.com/docs/cpp/config-linux</p> <p>for WSL</p> <p>https://code.visualstudio.com/docs/cpp/config-wsl</p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-18","title":"VSCode (Install / Compile / Run / Debug) (18)","text":"<p>in the launch file if you start debugging with F5</p> <p>(you can select debugger with CTRL+SHIFT+P and then writing Debug and Selecting Configure Debugger Option)</p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-19","title":"VSCode (Install / Compile / Run / Debug) (19)","text":"<p>following line will be your debugging application path</p> <p>if you start debugging with F5 in Hello.c file this will set <code>&lt;Hello.c base path&gt;/Hello.exe</code></p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#vscode-install-compile-run-debug-20","title":"VSCode (Install / Compile / Run / Debug) (20)","text":"<p>You should set this correct for both LLVM and GCC configuration in launch.json</p> <pre><code> \"program\": \"${fileDirname}\\\\${fileBasenameNoExtension}.exe\",\n</code></pre> <p>Also you should set your installed debugger paths</p> <p>for GCC</p> <pre><code>\"miDebuggerPath\": \"C:\\\\Program Files\\\\mingw-w64\\\\x86_64-8.1.0-win32-seh-rt_v6-rev0\\\\mingw64\\\\bin\\\\gdb.exe\",\n</code></pre> <p>for LLVM</p> <pre><code>\"miDebuggerPath\": \"C:\\\\Program Files\\\\LLVM\\\\bin\\\\lldb.exe\",\n</code></pre> <p>for more details please check the sample source codes.</p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#visual-studio-community-edition-install-compile-run-debug","title":"Visual Studio Community Edition (Install / Compile / Run / Debug)","text":"<p>//TODO//</p> <p></p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#notepad-install-compile-1","title":"Notepad++ (Install / Compile ) (1)","text":"<p>Please download Notepad++ from the following link</p> <p>Downloads | Notepad++</p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#notepad-install-compile-2","title":"Notepad++ (Install / Compile ) (2)","text":"<p>Download and install MinGW or LLVM compiler (if you downloded  then skip this step)</p> <p>MinGW installer (clang)</p> <p>Download MinGW-w64 - for 32 and 64 bit Windows from SourceForge.net</p> <p>LLVM installer (gcc / g++)</p> <p>Download LLVM releases</p> <p>Also use the following notes </p> <p>https://llvm.org/devmtg/2014-04/PDFs/Talks/clang-cl.pdf</p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#notepad-install-compile-3","title":"Notepad++ (Install / Compile ) (3)","text":"<p>Open a console with \"cmd\" and test the following commands if commands are not recognized then set the system environment variable add gcc and g++ exe paths to path variable (add to both system and user path variable)</p> <pre><code>gcc --version\n\ng++ --version\n</code></pre> <pre><code>C:\\Users\\ugur.coruh&gt;gcc --version\ngcc (x86_64-win32-seh-rev0, Built by MinGW-W64 project) 8.1.0\nCopyright (C) 2018 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n</code></pre>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#notepad-install-compile-4","title":"Notepad++ (Install / Compile ) (4)","text":""},{"location":"tr/week-2-setup/ce103-week-2-setup/#notepad-install-compile-5","title":"Notepad++ (Install / Compile ) (5)","text":""},{"location":"tr/week-2-setup/ce103-week-2-setup/#notepad-install-compile-6","title":"Notepad++ (Install / Compile ) (6)","text":""},{"location":"tr/week-2-setup/ce103-week-2-setup/#notepad-install-compile-7","title":"Notepad++ (Install / Compile ) (7)","text":""},{"location":"tr/week-2-setup/ce103-week-2-setup/#notepad-install-compile-8","title":"Notepad++ (Install / Compile ) (8)","text":""},{"location":"tr/week-2-setup/ce103-week-2-setup/#notepad-install-compile-9","title":"Notepad++ (Install / Compile ) (9)","text":""},{"location":"tr/week-2-setup/ce103-week-2-setup/#notepad-install-compile-10","title":"Notepad++ (Install / Compile ) (10)","text":"<p>for gcc.exe, g++.exe and gdb.exe </p> <pre><code>C:\\Program Files\\mingw-w64\\x86_64-8.1.0-win32-seh-rt_v6-rev0\\mingw64\\bin\n</code></pre>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#notepad-install-compile-11","title":"Notepad++ (Install / Compile ) (11)","text":"<p>for clang.exe , lldb.exe</p> <pre><code>C:\\Program Files\\LLVM\\bin\n</code></pre>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#notepad-install-compile-12","title":"Notepad++ (Install / Compile ) (12)","text":"<p>This folder paths changes according to your setup</p> <p>Open NppExec extension (install from extension manager if not exist)</p> <p></p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#notepad-install-compile-13","title":"Notepad++ (Install / Compile ) (13)","text":"<p>write the following commands in box</p> <pre><code>NPP_SAVE // save current file\ncd $(CURRENT_DIRECTORY) // go to directory of the current file\ngcc  -Wall -Wextra -Wpedantic -std=c++11 -o \"$(NAME_PART)\" \"$(FILE_NAME)\"\n</code></pre> <p></p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#notepad-install-compile-14","title":"Notepad++ (Install / Compile ) (14)","text":"<p>save script as gcc-build and for more information check the following link</p> <p>How To Setup Notepad for Writing C++ Programs</p> <p>You can modify or add multiple scripts for another tasks.</p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#vivim-cc","title":"Vi/Vim (C/C++)","text":"<p>//TODO//</p> <p></p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#eclipse-cc","title":"Eclipse (C/C++)","text":"<p>//TODO//</p> <p></p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#netbeans-cc","title":"Netbeans (C/C++)","text":"<p>//TODO//</p> <p></p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#turbo-cc","title":"Turbo C++/C","text":"<p>//TODO//</p> <p></p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#cmake-cc-12-windows-environment","title":"Cmake (C++/C) (12) (Windows Environment)","text":"<p>Open GUI and Select  File-&gt; Delete Cache </p> <p></p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#make-2","title":"Make (2)","text":"<p>Makefile</p> <pre><code># This is the default target, which will be built when \n# you invoke make\n.PHONY: all\nall: hello\n# This rule tells make how to build hello from hello.cpp\nhello: hello.c\ng++ -o hello hello.c\n\n# This rule tells make to copy hello to the binaries subdirectory,\n# creating it if necessary\n.PHONY: install\ninstall:\nmkdir -p binaries\n    cp -p hello binaries\n\n# This rule tells make to delete hello and hello.o\n.PHONY: clean \nclean:\nrm -f hello\n</code></pre>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#make-3","title":"Make (3)","text":"<p>compile.bat</p> <pre><code>make all .\n</code></pre> <p>will create hello.exe</p> <p>check hello-make sample</p> <p></p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#java-environment-and-development","title":"JAVA Environment and Development","text":"<p>//TODO//</p> <p></p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#jdk-and-jre-setup","title":"JDK and JRE Setup","text":"<p>//TODO//</p> <p></p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#system-environments-and-paths-for-java","title":"System Environments and Paths for Java","text":"<p>//TODO//</p> <p></p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#netbeans-java","title":"Netbeans (Java)","text":"<p>//TODO//</p> <p></p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#eclipse-java","title":"Eclipse (Java)","text":"<p>//TODO//</p> <p></p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#intellij-idea-jet-brains-java","title":"Intellij Idea (Jet Brains) (Java)","text":"<p>//TODO//</p> <p></p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#vscode-java","title":"VSCode (Java)","text":"<p>//TODO//</p> <p></p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#notepad-java","title":"Notepad++ (Java)","text":"<p>//TODO//</p> <p></p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#cmake-java","title":"Cmake (Java)","text":"<p>ASTERICS_HPC</p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#notepad-c","title":"Notepad++ (C#)","text":"<p>//TODO//</p> <p></p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#cmake-c","title":"Cmake (C#)","text":"<p>Outline</p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#marktext-markdown-syntax-editor","title":"Marktext (Markdown Syntax Editor)","text":"<p>https://marktext.app/</p> <p></p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#cygwin-linux-environment-for-windows","title":"Cygwin (Linux environment for Windows)","text":"<p>https://www.cygwin.com/</p> <p></p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#dependency-walker-32-bit-or-64-bit-windows-module-dependency-checker","title":"Dependency Walker (32-bit or 64-bit Windows module dependency checker)","text":"<p>https://www.dependencywalker.com/</p> <p></p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#codepenio-online-code-sharing","title":"Codepen.io (online code sharing)","text":"<p>https://codepen.io/</p> <p></p> <p>Credit Card Sample</p> <p>https://codepen.io/quinlo/pen/YONMEa</p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#codeshareio-real-time-code-sharing","title":"Codeshare.io (real time code sharing)","text":"<p>https://codeshare.io/</p> <p></p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#codebeautifyorg-online-data-conversion-tools","title":"Codebeautify.org (online data conversion tools)","text":"<p>https://codebeautify.org/</p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#asciiflowcom-ascii-drawing-tool","title":"AsciiFlow.com (ASCII drawing tool)","text":"<p>//TODO//</p> <p></p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#freemind-opensource-mindmap-application","title":"Freemind (opensource mindmap application)","text":"<p>//TODO//</p> <p></p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#wireflow-user-flow-designer","title":"Wireflow (user flow designer)","text":"<p>//TODO//</p> <p></p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#plantuml-software-designer","title":"PlantUML (software designer)","text":"<p>//TODO//</p> <p></p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#drawio-drawing-tool","title":"Drawio (drawing tool)","text":"<p>//TODO//</p> <p></p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#putty-remote-connection","title":"Putty (Remote Connection)","text":"<p>//TODO//</p> <p></p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#mobaxterm-remote-connection","title":"MobaXterm (Remote Connection)","text":"<p>//TODO//</p> <p></p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#teamviewer-remote-connection","title":"Teamviewer (Remote Connection)","text":"<p>//TODO//</p> <p></p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#palettoncom-color-chooser","title":"Paletton.com (Color Chooser)","text":"<p>//TODO//</p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#understand-static-code-analysis","title":"Understand (Static Code Analysis)","text":"<p>//TODO//</p> <p></p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#jd-project-java-decompiler","title":"JD Project (Java Decompiler)","text":"<p>//TODO//</p> <p></p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#cutter-multi-platform-reverse-engineering-tool","title":"Cutter (Multi-Platform Reverse Engineering Tool)","text":"<p>//TODO//</p> <p></p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#ida-pro-freeware-native-reverse-engineering-tool","title":"IDA Pro / Freeware (Native Reverse Engineering Tool)","text":"<p>//TODO//</p> <p></p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#code-visualization-python-c-c-java","title":"Code Visualization (Python, C , C++ , Java)","text":"<p>https://pythontutor.com/</p> <p>//TODO//</p> <p></p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#assembly-of-c-code","title":"Assembly of C Code","text":"<p>https://godbolt.org/</p> <p>//TODO//</p> <p></p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#mobile-device-screen-sharing-for-demo","title":"Mobile Device Screen Sharing for Demo","text":"<p>GitHub - Genymobile/scrcpy: Display and control your Android device</p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#travis-ci","title":"Travis-CI","text":"<ul> <li>Travis.yml</li> </ul> <p>//TODO//</p> <p></p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#jenkins","title":"Jenkins","text":"<p>//TODO//</p> <p></p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#valgrind","title":"Valgrind","text":"<p>//TODO//</p> <p></p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#docker","title":"Docker","text":"<pre><code>- https://www.youtube.com/watch?v=nBwJm0onzeo&amp;ab_channel=GaryExplains  Dockerfile\n</code></pre> <ul> <li> <p>DockerHub</p> </li> <li> <p>Docker Compose Yaml</p> </li> <li> <p>Dockerrun.aws.json (AWS)</p> </li> </ul> <p>//TODO//</p> <p></p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#nuget-packages","title":"Nuget Packages","text":"<p>//TODO//</p> <p></p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#vim-for-windows","title":"Vim for Windows","text":"<ul> <li>vim/vim-wim32-installer (windows vim installer)</li> </ul> <p>//TODO//</p> <p></p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#scv-cryptomanager","title":"SCV Cryptomanager","text":"<p>//TODO//</p> <p></p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#addario-cryptobench","title":"Addario CryptoBench","text":"<p>//TODO//</p> <p></p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#raymonds-md5-sha-checksum-utility","title":"Raymond's MD5 &amp; SHA Checksum Utility","text":"<p>//TODO//</p> <p></p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#slavasoft-hashcalc","title":"SlavaSoft HashCalc","text":"<p>//TODO//</p> <p></p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#portable-pgp","title":"Portable PGP","text":"<p>//TODO//</p> <p></p>"},{"location":"tr/week-2-setup/ce103-week-2-setup/#online-programming-envoriments","title":"Online Programming Envoriments","text":"<p>i. Hackerrank</p> <p>ii. CS50 Sandbox</p> <p>iii. Programiz C Online Complier</p> <p>//TODO//</p> <p></p>"},{"location":"tr/week-3-git/ce103-week-3-git/#introduction-to-source-code-management-systems","title":"Introduction to Source Code Management Systems","text":""},{"location":"tr/week-3-git/ce103-week-3-git/#centralized-version-control-tfs-subversion-6","title":"Centralized Version Control (TFS, Subversion) (6)","text":"<p>We do have drawbacks also:</p> <ul> <li> <p>It is dependent on the access to the server. </p> </li> <li> <p>It can be slower because every command from the client has to pass the server.</p> </li> <li> <p>Branching and merging strategies are difficult to use.</p> </li> </ul>"},{"location":"tr/week-3-git/ce103-week-3-git/#a-basic-overview-of-how-git-works-1","title":"A Basic Overview of How Git Works (1)","text":"<ul> <li> <p>Create a \u201crepository\u201d (project) with a git hosting tool (like Bitbucket)</p> </li> <li> <p>Copy (or clone) the repository to your local machine</p> </li> <li> <p>Add a file to your local repo and \u201ccommit\u201d (save) the changes</p> </li> <li> <p>\u201cPush\u201d your changes to your master branch</p> </li> </ul>"},{"location":"tr/week-3-git/ce103-week-3-git/#git-setup-files","title":"GIT Setup Files","text":"<ul> <li> <p>Download git for OSX</p> </li> <li> <p>Download git for Windows</p> </li> <li> <p>Download git for Linux</p> </li> </ul>"},{"location":"tr/week-3-git/ce103-week-3-git/#installation-of-git-4","title":"Installation of GIT (4)","text":"<p>Download and install GIT from the following links (both have same github release path)</p> <p>Git - Downloads</p>"},{"location":"tr/week-3-git/ce103-week-3-git/#installation-of-git-5","title":"Installation of GIT (5)","text":"<p>After running setup follow the steps below</p> <p></p>"},{"location":"tr/week-3-git/ce103-week-3-git/#installation-of-git-6","title":"Installation of GIT (6)","text":""},{"location":"tr/week-3-git/ce103-week-3-git/#installation-of-git-7","title":"Installation of GIT (7)","text":""},{"location":"tr/week-3-git/ce103-week-3-git/#installation-of-git-8","title":"Installation of GIT (8)","text":""},{"location":"tr/week-3-git/ce103-week-3-git/#installation-of-git-10","title":"Installation of GIT (10)","text":""},{"location":"tr/week-3-git/ce103-week-3-git/#installation-of-git-extension-windows-1","title":"Installation of GIT Extension (Windows) (1)","text":"<p>You can install Git GUI from https://git-scm.com/downloads/guis I prefer to use git extension https://gitextensions.github.io/ and https://tortoisegit.org/</p> <p>Also Download KDiff3 KDiff3 - Browse Files at SourceForge.net</p> <p>These extensions provide GUI for git operations to make process easier.</p>"},{"location":"tr/week-3-git/ce103-week-3-git/#configuration-of-git-extension-windows-1","title":"Configuration of GIT Extension (Windows) (1)","text":""},{"location":"tr/week-3-git/ce103-week-3-git/#configuration-of-git-extension-windows-2","title":"Configuration of GIT Extension (Windows) (2)","text":"<p>If you install git everything should be green and this configuration is stored on  .gitconfig on your home <code>C:/Windows/Users/&lt;user&gt;/.gitconfig</code></p>"},{"location":"tr/week-3-git/ce103-week-3-git/#configuration-of-git-extension-windows-3","title":"Configuration of GIT Extension (Windows) (3)","text":"<pre><code>[core]\n    editor = \\\"C:/Program Files (x86)/GitExtensions/GitExtensions.exe\\\" fileeditor\n    autocrlf = true\n    quotePath = false\n    commitGraph = true\n    longpaths = true\n[user]\n    email = xxxxxxx@gmail.com\n    name = xxxx xxxxxx\n[filter \"lfs\"]\n    clean = git-lfs clean -- %f\n    smudge = git-lfs smudge -- %f\n    process = git-lfs filter-process\n    required = true\n[pull]\n    rebase = false\n[fetch]\n    prune = false\n[rebase]\n    autoStash = false\n[credential]\n    helper = manager\n[diff]\n    guitool = kdiff3\n[difftool \"kdiff3\"]\n    path = C:/Program Files/KDiff3/kdiff3.exe\n    cmd = \\\"C:/Program Files/KDiff3/kdiff3.exe\\\" \\\"$LOCAL\\\" \\\"$REMOTE\\\"\n[merge]\n    guitool = tortoisemerge\n[mergetool \"tortoisemerge\"]\n    path = C:/Program Files/TortoiseGit/bin/TortoiseGitMerge.exe\n    cmd = \\\"C:/Program Files/TortoiseGit/bin/TortoiseGitMerge.exe\\\" -base:\\\"$BASE\\\" -mine:\\\"$LOCAL\\\" -theirs:\\\"$REMOTE\\\" -merged:\\\"$MERGED\\\"\n[receive]\n    advertisePushOptions = true\n[gc]\n    writeCommitGraph = true\n</code></pre>"},{"location":"tr/week-3-git/ce103-week-3-git/#configuration-of-git-extension-windows-4","title":"Configuration of GIT Extension (Windows) (4)","text":"<p>Also in extension you can see similar settings</p> <p></p>"},{"location":"tr/week-3-git/ce103-week-3-git/#configuration-of-git-extension-windows-5","title":"Configuration of GIT Extension (Windows) (5)","text":"<p>Samples</p> <p>MergeTool </p> <pre><code>tortoisemerge\n</code></pre> <p>Path to mergetool</p> <pre><code>C:/Program Files/TortoiseGit/bin/TortoiseGitMerge.exe\n</code></pre> <p>Mergetool command</p> <pre><code>\"C:/Program Files/TortoiseGit/bin/TortoiseGitMerge.exe\" -base:\"$BASE\" -mine:\"$LOCAL\" -theirs:\"$REMOTE\" -merged:\"$MERGED\"\n</code></pre>"},{"location":"tr/week-3-git/ce103-week-3-git/#configuration-of-git-extension-windows-7","title":"Configuration of GIT Extension (Windows) (7)","text":"<p>If you see something as merge and diff tool is not configured, follow the similar settings above on your computer. If you installed kdiff3, tortoisegit and extension you will have same diff and merge tools</p> <p>This topic also help you </p> <p>Git: How can I configure KDiff3 as a merge tool and diff tool? - Stack Overflow</p>"},{"location":"tr/week-3-git/ce103-week-3-git/#configuration-of-git-extension-windows-8","title":"Configuration of GIT Extension (Windows) (8)","text":""},{"location":"tr/week-3-git/ce103-week-3-git/#configuration-of-git-extension-windows-9","title":"Configuration of GIT Extension (Windows) (9)","text":"<p>Open Git-&gt;Config, in your settings you will see path to mergetool and difftool will be empty fill settings like that below find executables in your computer and copy paths to here.</p>"},{"location":"tr/week-3-git/ce103-week-3-git/#configuration-of-git-extension-windows-11","title":"Configuration of GIT Extension (Windows) (11)","text":"<p>Also if we want to change and use different diff and merge tool then we can do this with gitbash console as below</p> <pre><code>C:\\Program Files\\TortoiseGit\\bin\n</code></pre> <p>Find TortoiseGitIDiff.exe and TortoiseGitMerge.exe</p> <p></p>"},{"location":"tr/week-3-git/ce103-week-3-git/#configuration-of-git-extension-windows-12","title":"Configuration of GIT Extension (Windows) (12)","text":"<p>Copy path of this applications</p> <pre><code>C:\\Program Files\\TortoiseGit\\bin\\TortoiseGitMerge.exe\nC:\\Program Files\\TortoiseGit\\bin\\TortoiseGitIDiff.exe\n</code></pre>"},{"location":"tr/week-3-git/ce103-week-3-git/#configuration-of-git-extension-windows-13","title":"Configuration of GIT Extension (Windows) (13)","text":"<p>open a gitbash console and run following commands </p> <pre><code>git config --global merge.tool TortoiseGitMerge\ngit config --global mergetool.TortoiseGitMerge.path \"C:/Program Files/TortoiseGit/bin/TortoiseGitMerge.exe\"\ngit config --global mergetool.TortoiseGitMerge.trustExitCode false\n\ngit config --global diff.guitool TortoiseGitIDiff\ngit config --global difftool.TortoiseGitIDiff.path \"C:/Program Files/TortoiseGit/bin/TortoiseGitIDiff.exe\"\ngit config --global difftool.TortoiseGitIDiff.trustExitCode false\n</code></pre> <p>This updates will be stored on .gitconfig</p>"},{"location":"tr/week-3-git/ce103-week-3-git/#installation-of-gig-git-ignore-creator-1","title":"Installation of gig (git ignore creator) (1)","text":"<p>Requirements</p> <ul> <li> <p>Python &gt;= 3.6</p> </li> <li> <p>Internet connection</p> </li> </ul> <p>https://github.com/sloria/gig </p> <pre><code>pip install -U gig\n</code></pre>"},{"location":"tr/week-3-git/ce103-week-3-git/#usage-of-gig-2","title":"Usage of gig (2)","text":"<p>Sample gitignore for C Java and Visual Studio </p> <pre><code>gig C Java VisualStudio &gt; .gitignore\n</code></pre>"},{"location":"tr/week-3-git/ce103-week-3-git/#adding-initiated-repo-remote-upstream-repo-link-with-github-repo-1","title":"Adding Initiated Repo Remote Upstream Repo (Link with Github Repo) (1)","text":"<p>If you enter following command in the git folder you will see nothing</p> <pre><code>git remote -v\n</code></pre> <p>That mean this repository do not have a remote upstream repository such as a github or bitbucket repo. </p>"},{"location":"tr/week-3-git/ce103-week-3-git/#adding-initiated-repo-remote-upstream-repo-link-with-github-repo-2","title":"Adding Initiated Repo Remote Upstream Repo (Link with Github Repo) (2)","text":"<p>Open the github and bitbucket repository and copy project path from </p> <p></p>"},{"location":"tr/week-3-git/ce103-week-3-git/#adding-initiated-repo-remote-upstream-repo-link-with-github-repo-4","title":"Adding Initiated Repo Remote Upstream Repo (Link with Github Repo) (4)","text":"<p>copy link and use with following command</p> <pre><code>git remote add origin https://github.com/ucoruh/ce103-sample-text.git\n</code></pre>"},{"location":"tr/week-3-git/ce103-week-3-git/#adding-initiated-repo-remote-upstream-repo-link-with-github-repo-5","title":"Adding Initiated Repo Remote Upstream Repo (Link with Github Repo) (5)","text":"<p>then you can check your remote setting with</p> <pre><code>$ git remote -v\norigin  https://github.com/ucoruh/ce103-sample-text.git (fetch)\norigin  https://github.com/ucoruh/ce103-sample-text.git (push)\n</code></pre>"},{"location":"tr/week-3-git/ce103-week-3-git/#adding-initiated-repo-remote-upstream-repo-link-with-github-repo-6","title":"Adding Initiated Repo Remote Upstream Repo (Link with Github Repo) (6)","text":"<p>you can check the following sample </p> <p>How to Add a New Remote to your Git Repo | Assembla Help Center</p>"},{"location":"tr/week-3-git/ce103-week-3-git/#git-commit","title":"git commit","text":"<p>\u2022It refers to recording snapshots of the repository at a given time. Committed snapshots will never change unless done explicitly. </p>"},{"location":"tr/week-3-git/ce103-week-3-git/#git-commit_1","title":"git commit","text":"<p>Let me explain how commit works with the diagram below</p> <p></p> <p>Here, C1 is the initial commit, i.e. the snapshot of the first change from which another snapshot is created with changes named C2. Note that the master points to the latest commit. Now, when I commit again, another snapshot C3 is created and now the master points to C3 instead of C2.</p>"},{"location":"tr/week-3-git/ce103-week-3-git/#git-commit_2","title":"git commit","text":"<p>Commands:</p> <pre><code>git commit -m \"&lt;message&gt;\"\n</code></pre> <p></p> <p>Now, if you want to commit a snapshot of all the changes in the working directory at once, you can use the command below</p>"},{"location":"tr/week-3-git/ce103-week-3-git/#git-commit_3","title":"git commit","text":"<p>Please check writing good commit messages article below</p> <p>How to write a good commit message - DEV Community</p>"},{"location":"tr/week-3-git/ce103-week-3-git/#writing-good-commit-messages-7","title":"Writing Good Commit Messages (7)","text":"<pre><code>git commit -a\n</code></pre>"},{"location":"tr/week-3-git/ce103-week-3-git/#add-files-to-index-4","title":"Add Files to Index (4)","text":"<p>This command will commit a snapshot of all changes in the working directory but only includes modifications to tracked files i.e. the files that have been added with git add at some point in their history. Hence, edureka6.txt was not committed because it was not added to the index yet. But changes in all previous files present in the repository were committed, i.e. edureka1.txt, edureka2.txt, edureka3.txt, edureka4.txt and edureka5.txt.   Now I have made my desired commits in my local repository</p>"},{"location":"tr/week-3-git/ce103-week-3-git/#git-push_2","title":"git push","text":"<ul> <li>The use of git push is to publish your local changes to a central repository. After you\u2019ve accumulated several local commits and are ready to share them with the rest of the team, </li> </ul>"},{"location":"tr/week-3-git/ce103-week-3-git/#git-push_3","title":"git push","text":"<p>you can then push them to the central repository by using the following command</p> <pre><code>git push &lt;remote&gt; \n</code></pre>"},{"location":"tr/week-3-git/ce103-week-3-git/#git-push_11","title":"git push","text":"<p>To prevent overwriting, Git does not allow push when it results in a non-fast forward merge in the  destination repository.</p>"},{"location":"tr/week-3-git/ce103-week-3-git/#git-branch_1","title":"git branch","text":"<p>There are basically two types of branches viz. </p> <ul> <li> <p>local branches</p> </li> <li> <p>remote tracking branches.</p> </li> </ul>"},{"location":"tr/week-3-git/ce103-week-3-git/#change-branch","title":"Change Branch","text":"<pre><code>git checkout &lt;branch-name&gt;\n\ngit checkout master\n</code></pre>"},{"location":"tr/week-3-git/ce103-week-3-git/#no-fast-foward-no-ff_3","title":"No-fast-foward (<code>--no-ff</code>)","text":"<p>No big deal, a perfect merge!  The <code>master</code> branch now contains all the changes that we've made on the <code>dev</code> branch.</p>"},{"location":"tr/week-3-git/ce103-week-3-git/#merge-conflicts","title":"Merge Conflicts","text":"<p>Although Git is good at deciding how to merge branches and add changes to files, it cannot always make this decision all by itself  This can happen when the two branches we're trying to merge have changes on the same line in the same file, or if one branch deleted a file that another branch modified, and so on.</p>"},{"location":"tr/week-3-git/ce103-week-3-git/#sample-conflict-1","title":"Sample Conflict -1","text":"<p>participants.txt</p> <p>(I added a hyphen before each name)</p> <pre><code>Finance team\n Charles\n Lisa\n John\n Stacy\n Alexander\n</code></pre> <pre><code>git init\ngit add .\ngit commit \u2013m 'Initial list for finance team'\n</code></pre>"},{"location":"tr/week-3-git/ce103-week-3-git/#sample-conflict-1_2","title":"Sample Conflict -1","text":"<p>Now open the <code>participants.txt</code> file and start entering the names for the marketing department below the finance team list, as follows: (I added a hyphen before each name)</p> <pre><code>Marketing team\n Collins\n Linda\n Patricia\n Morgan\n</code></pre> <pre><code>git add .\ngit commit \u2013m 'Unfinished list of marketing team'\ngit checkout master\n</code></pre>"},{"location":"tr/week-3-git/ce103-week-3-git/#sample-conflict-1_3","title":"Sample Conflict -1","text":"<p>Open the file and delete the names Alexander and Stacy, save, close, add the changes, and commit with the commit message Final list from Finance team</p> <pre><code>git add .\ngit commit \u2013m \"Final list from Finance team\"\ngit checkout marketing\n</code></pre>"},{"location":"tr/week-3-git/ce103-week-3-git/#sample-conflict-1_4","title":"Sample Conflict -1","text":"<p>Open the file and add the fifth name, Amanda, for the marketing team, save, add, and commit</p> <pre><code>git add .\ngit commit \u2013m \"Initial list of marketing team\"\n</code></pre> <p>names entered for marketing have been confirmed; now we need to merge these two lists, which can be done by the following command</p> <pre><code>git merge master\n</code></pre>"},{"location":"tr/week-3-git/ce103-week-3-git/#sample-conflict-1_7","title":"Sample Conflict -1","text":"<pre><code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;\nChanges made on the branch that is being merged into. In most cases,\nthis is the branch that I have currently checked out (i.e. HEAD).\n|||||||\nThe common ancestor version.\n=======\nChanges made on the branch that is being merged in. This is often a \nfeature/topic branch.\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n</code></pre>"},{"location":"tr/week-3-git/ce103-week-3-git/#sample-conflict-1_9","title":"Sample Conflict -1","text":"<p>If we want to save all to our version</p> <pre><code>git checkout --ours .  # checkout our local version of all files\ngit add -u             # mark all conflicted files as merged\ngit commit             # commit the merge\n</code></pre>"},{"location":"tr/week-3-git/ce103-week-3-git/#sample-conflict-1_10","title":"Sample Conflict -1","text":"<p>If we want to discard all our revision</p> <pre><code>git checkout --theirs .  # checkout remote version of all files\ngit add -u             # mark all conflicted files as merged\ngit commit             # commit the merge\n</code></pre>"},{"location":"tr/week-3-git/ce103-week-3-git/#sample-conflict-2","title":"Sample Conflict -2","text":"<p>You're going to pull some changes, but oops, you're not up to date:</p> <pre><code>git fetch origin\ngit pull origin master\n\nFrom ssh://gitosis@example.com:22/projectname\n * branch            master     -&gt; FETCH_HEAD\nUpdating a030c3a..ee25213\nerror: Entry 'filename.c' not uptodate. Cannot merge.\n</code></pre>"},{"location":"tr/week-3-git/ce103-week-3-git/#sample-conflict-2_1","title":"Sample Conflict -2","text":"<p>So you get up-to-date and try again, but have a conflict:</p> <pre><code>git add filename.c\ngit commit -m \"made some wild and crazy changes\"\ngit pull origin master\n\nFrom ssh://gitosis@example.com:22/projectname\n * branch            master     -&gt; FETCH_HEAD\nAuto-merging filename.c\nCONFLICT (content): Merge conflict in filename.c\nAutomatic merge failed; fix conflicts and then commit the result.\n</code></pre>"},{"location":"tr/week-3-git/ce103-week-3-git/#sample-conflict-2_2","title":"Sample Conflict -2","text":"<p>So you decide to take a look at the changes:</p> <pre><code>git mergetool\n</code></pre> <p>Oh my, oh my, upstream changed some things, but just to use my changes...no...their changes...</p> <pre><code>git checkout --ours filename.c\ngit checkout --theirs filename.c\ngit add filename.c\ngit commit -m \"using theirs\"\n</code></pre>"},{"location":"tr/week-3-git/ce103-week-3-git/#sample-conflict-2_3","title":"Sample Conflict -2","text":"<p>And then we try a final time</p> <pre><code>git pull origin master\n\nFrom ssh://gitosis@example.com:22/projectname\n * branch            master     -&gt; FETCH_HEAD\nAlready up-to-date.\n</code></pre>"},{"location":"tr/week-3-git/ce103-week-3-git/#log-4","title":"Log (4)","text":"<p>See only which files have changed: </p> <pre><code>git log --name-status\n</code></pre>"},{"location":"tr/week-3-git/ce103-week-3-git/#log-5","title":"Log (5)","text":"<p>These are just a few of the possible parameters you can use. For more, see </p> <pre><code>git log --help\n</code></pre>"},{"location":"tr/week-3-git/ce103-week-3-git/#replace-local-changes-3","title":"Replace Local Changes (3)","text":"<p>If you instead want to drop all your local changes and commits, fetch the latest history from the server and point your local master branch at it like this</p> <pre><code>git fetch origin\n\ngit reset --hard origin/master\n</code></pre>"},{"location":"tr/week-3-git/ce103-week-3-git/#resetting-1","title":"Resetting (1)","text":"<p>It can happen that we committed changes that we didn't want later on. Maybe it's a <code>WIP</code> commit, or maybe a commit that introduced bugs!  In that case, we can perform a <code>git reset</code>.</p>"},{"location":"tr/week-3-git/ce103-week-3-git/#reverting-2","title":"Reverting (2)","text":"<p>Let's say that <code>ec5be</code> added an <code>index.js</code> file. Later on, we actually realize we didn't want this change introduced by this commit anymore! Let's revert the <code>ec5be</code> commit.</p> <p></p> <p>Perfect! Commit <code>9e78i</code> reverted the changes that were introduced by the <code>ec5be</code> commit. </p>"},{"location":"tr/week-3-git/ce103-week-3-git/#reverting-3","title":"Reverting (3)","text":"<p>Performing a  <code>git revert</code> is very useful in order to undo a certain commit, without modifying the history of the branch.</p>"},{"location":"tr/week-3-git/ce103-week-3-git/#interactive-rebase-1","title":"Interactive Rebase (1)","text":"<p>Before rebasing the commits, we can modify them!  We can do so with an interactive rebase. An interactive rebase can also be useful on the branch you're currently working on, and want to modify some commits.</p>"},{"location":"tr/week-3-git/ce103-week-3-git/#interactive-rebase-4","title":"Interactive Rebase (4)","text":"<p>Or if we want to squash multiple commits together to get a cleaner history, no problem!</p> <p></p> <p>Interactive rebasing gives you a lot of control over the commits you're trying to rebase, even on the current active branch</p>"},{"location":"tr/week-3-git/ce103-week-3-git/#hotfix","title":"Hotfix","text":"<p>OneFlow \u2013 a Git branching model and workflow | End of Line Blog</p> <p>a simple git branching model \u00b7 GitHub</p>"},{"location":"tr/week-3-git/ce103-week-3-git/#git-decision-tree","title":"GIT Decision Tree","text":"<p>http://justinhileman.info/article/git-pretty/git-pretty.png</p> <p></p>"},{"location":"tr/week-3-git/ce103-week-3-git/#references-5","title":"References (5)","text":"<p>https://education.github.com/git-cheat-sheet-education.pdf</p> <p>NDP Software :: Git Cheatsheet;</p> <p>Learn Git Branching</p> <p>https://guides.github.com/introduction/git-handbook/</p>"},{"location":"tr/week-4-test/ce103-week-4-test/#introduction-to-code-reusability-and-automated-testing","title":"Introduction to Code Reusability and Automated Testing","text":"<p>During this course we will use entry level of shared library development and their tests and test automations. Also we will see TDD(Test Driven Development) approach.</p> <p>During this course we will use Windows OS, Eclipse and Visual Studio Commuity Edition environments for examples.</p> <p>Each example will include two function </p> <p>\"Hello \" printing function with name sayHelloTo(name) and</p> <p>sum of two variable function for basic, sum = sum(a,b). </p> <p>This sum function will add a to b and return result to sum variable. </p> <p>We will locate them in library and use them from a console application, also we will create unit tests for testing their functionalities and return variables</p>"},{"location":"tr/week-4-test/ce103-week-4-test/#visual-studio-community-edition","title":"Visual Studio Community Edition","text":"<p>In this sample we will create c-lib-sample project that contains library, executable, unit tests and unit test runners.</p> <p>First of all you install Visual Studio Community Edition from website</p> <p>Visual Studio 2019 Community Edition - Son \u00dccretsiz S\u00fcr\u00fcm\u00fc \u0130ndir</p> <p>Open visual studio community edition and select create a new project</p> <p></p> <p></p> <p>Select create a new project</p> <p></p> <p>Select C++ static library from project list</p> <p></p> <p>Name static library project</p> <p></p> <p>Default configuration come with C++ project types and setting</p> <p></p> <p>In the c-sample-lib.cpp you will sample function</p> <pre><code>void fncsamplelib()\n{\n}\n</code></pre> <p>Delete pch.h and pch.c files. Also disable use precompiled header settings from configurations and change to \"Not Using Precomplied Headers\", also you can delete precomplied Header File. </p> <p></p> <p>Customize library header name and update \"framework.h\" to \"samplelib.h\"</p> <p>Insert your functions inside the c-sample-lib.c and update header files also.</p> <pre><code>// c-sample-lib.cpp : Defines the functions for the static library.\n//\n#include \"samplelib.h\"\n#include \"stdio.h\"\n/// &lt;summary&gt;\n/// \n/// &lt;/summary&gt;\n/// &lt;param name=\"name\"&gt;&lt;/param&gt;\nvoid sayHelloTo(char* name){\nif (name != NULL){\nprintf(\"Hello %s \\n\",name);\n}\nelse {\nprintf(\"Hello There\\n\");\n}\n}\n/// &lt;summary&gt;\n/// \n/// &lt;/summary&gt;\n/// &lt;param name=\"a\"&gt;&lt;/param&gt;\n/// &lt;param name=\"b\"&gt;&lt;/param&gt;\n/// &lt;returns&gt;&lt;/returns&gt;\nint sum(int a, int b){\nint c = 0;\nc = a + b;\nreturn c;\n}\n</code></pre> <p>also update samplelib.h</p> <pre><code>#pragma once\n#define WIN32_LEAN_AND_MEAN             // Exclude rarely-used stuff from Windows headers\nvoid sayHelloTo(char* name);\nint sum(int a, int b);\n</code></pre> <p>If you check configuration you will see that for C complier we are using Microsoft Environment and Toolkits</p> <p></p> <p>Now we can compile our library</p> <p></p> <p>You can follow operation from output window</p> <p></p> <p>in debug folder we will see our output</p> <p></p> <p>now we will add a console application c-sample-app and use our library</p> <p></p> <p>select C++ Windows Console Application from list</p> <p></p> <p>C++ Console Application Selection will generate a C++ console project we can change extension to C to compile our application as C application. </p> <p>we will convert c-sample-app.c to following code</p> <pre><code>#include &lt;stdio.h&gt;\n/// &lt;summary&gt;\n/// \n/// &lt;/summary&gt;\n/// &lt;returns&gt;&lt;/returns&gt;\nint main()\n{\nprintf(\"Hello World!\\n\");\n}\n</code></pre> <p>after conversion set c-sample-app as startup project and build it</p> <p></p> <p>this will create c-sample-app.exe in the same folder with c-sample-lib.lib library</p> <p></p> <p>if we run application we will see only \u00a0\u00a0\"Hello World\"</p> <p>now we will see two options to add library as references in our application and use its functions.</p> <p>First option </p> <p>right click references for c-sample-app and add current library as reference</p> <p></p> <p>Select Add Reference</p> <p></p> <p>Browse for solution and select c-sample-lib</p> <p></p> <p>You can check added reference from references section</p> <p></p> <p>now we can include required headers from c-sample-lib folder and use it.</p> <p>we can include required header with relative path as follow or with configuration</p> <pre><code>#include &lt;stdio.h&gt;\n#include \"..\\c-sample-lib\\samplelib.h\"\n/// &lt;summary&gt;\n/// \n/// &lt;/summary&gt;\n/// &lt;returns&gt;&lt;/returns&gt;\nint main()\n{\nprintf(\"Hello World!\\n\");\n}\n</code></pre> <p>we can build our c-sample-app</p> <p></p> <p>also we can only write header name </p> <pre><code>#include &lt;samplelib.h&gt;\n</code></pre> <p>for this we need to configure include directories</p> <p></p> <p>select c-sample-lib header file location</p> <p></p> <p>browse for folder</p> <p></p> <p>your full path will be added to your configuration</p> <p></p> <p>if you add header file paths to your configuration you can use header files by name in your source code</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;samplelib.h&gt;\n/// &lt;summary&gt;\n/// \n/// &lt;/summary&gt;\n/// &lt;returns&gt;&lt;/returns&gt;\nint main()\n{\nprintf(\"Hello World!\\n\");\n}\n</code></pre> <p>we can compile the following we don't have problems but here we need to configure relative paths for configuration open include library settings and update with relative path</p> <pre><code>..\\c-sample-lib\n</code></pre> <p></p> <p>now we have portable source code configuration. we can call our functions and then we can update header and library folder configurations. </p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;samplelib.h&gt;\n/// &lt;summary&gt;\n/// \n/// &lt;/summary&gt;\n/// &lt;returns&gt;&lt;/returns&gt;\nint main()\n{\nint result = 0;\n//printf(\"Hello World!\\n\");\nresult = sum(5, 4);\nsayHelloTo(\"Computer\");\nprintf(\"Result is %d \\n\",result);\nprintf(\"Press any key to continue...\\n\");\ngetchar();\nreturn 0;\n}\n</code></pre> <p>when you run you will see the following outputs, that mean we called library functions. </p> <p></p> <p>static library is a code sharing approach if you want to share your source code with your customers then you can share static libraries and header files together. Another case you can use a precompiled static library with you or this library can be part of any installation then if there is a installed app and static libraries are placed on system folder or any different location then you can use configuration files to set library path and included header paths</p> <p>Now we can remove project from c-sample-app references but we will set library file in configuration</p> <p>Before this copy static library and header files to a folder like that </p> <pre><code>DebugStaticLibDeployment\n</code></pre> <ul> <li>Set C/C++ -&gt; General -&gt; Additional Include Directories</li> </ul> <p>There is a bug in configurations and relative path not finding headers so for this reason we will set full path but this is not a good practice for team working</p> <p>Not Working</p> <pre><code>..\\c-sample-lib\\DebugStaticLibDeployment\n</code></pre> <p></p> <p>Working</p> <pre><code>E:\\...\\c-lib-sample\\c-sample-lib\\DebugStaticLibDeployment\n</code></pre> <p></p> <p>Now we will set library folder that our static library placed</p> <p>we will set VC++ Directories -&gt; Library Directories</p> <p>Here is the same issue if we use relative path it doesn't work we need to set full path for library folder</p> <p>Working</p> <pre><code>E:\\...\\c-lib-sample\\c-sample-lib\\DebugStaticLibDeployment\n</code></pre> <p></p> <p></p> <p>Not Working</p> <pre><code>..\\c-sample-lib\\DebugStaticLibDeployment\n</code></pre> <p></p> <p></p> <p></p> <p>If we set full path for both libraries and headers then we need to set library name for project</p> <p>Linker-&gt;Input-&gt;Additional Dependencies</p> <p></p> <p>In this case we will compile c-sample-app and we do not need to compile c-sample-lib because we copied output files to different location and they are ready to use.</p> <p>current source code will be like that nothing changed</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;samplelib.h&gt;\n/// &lt;summary&gt;\n/// \n/// &lt;/summary&gt;\n/// &lt;returns&gt;&lt;/returns&gt;\nint main()\n{\nint result = 0;\n//printf(\"Hello World!\\n\");\nresult = sum(5, 4);\nsayHelloTo(\"Computer\");\nprintf(\"Result is %d \\n\",result);\nprintf(\"Press any key to continue...\\n\");\ngetchar();\nreturn 0;\n}\n</code></pre> <p>and output </p> <p></p> <p>There is a option about portability that we can set for team works</p> <p>We will remove all library related settings from configurations and we will write them in source code</p> <p>Clear linker-&gt;general-&gt;additional library directories</p> <p></p> <p>Clear C/C++ -&gt; General -&gt; Additional Include Directories</p> <p></p> <p>Clear Linker-&gt;Input-&gt;Additional Dependencies</p> <p></p> <p>Now we can set this configurations in source code as follow</p> <pre><code>#pragma comment(lib, \"..\\\\DebugStaticLibDeployment\\\\c-sample-lib.lib\")\n#include \"..\\DebugStaticLibDeployment\\samplelib.h\"\n#include &lt;stdio.h&gt;\n/// &lt;summary&gt;\n/// \n/// &lt;/summary&gt;\n/// &lt;returns&gt;&lt;/returns&gt;\nint main()\n{\nint result = 0;\n//printf(\"Hello World!\\n\");\nresult = sum(5, 4);\nsayHelloTo(\"Computer\");\nprintf(\"Result is %d \\n\",result);\nprintf(\"Press any key to continue...\\n\");\ngetchar();\nreturn 0;\n}\n</code></pre> <p>with this configuration if your friends download this code then they can run them with their environment without setting a path.</p>"},{"location":"tr/week-4-test/ce103-week-4-test/#visual-studio-community-edition_1","title":"Visual Studio Community Edition","text":"<p>All steps are similar with C programming above, but you do not need to delete pch.h </p> <p>You should take care about compiled source codes</p> <p>for example if your code is compiled for x86 then your application also should use the x86 configuration else x64 then library should be x64 complied version.</p> <p>Source will look like the following </p> <pre><code>// cpp-sample-app.cpp : This file contains the 'main' function. Program execution begins and ends there.\n//\n#pragma comment(lib, \"..\\\\DebugStaticLibDeployment\\\\cpp-sample-lib.lib\")\n#include \"..\\DebugStaticLibDeployment\\samplelib.h\"\n#include &lt;iostream&gt;\nint main()\n{\nstd::cout &lt;&lt; \"Hello World!\\n\";\nint result = 0;\n//printf(\"Hello World!\\n\");\nresult = sum(5, 4);\nsayHelloTo(\"Computer\");\nprintf(\"Result is %d \\n\", result);\nprintf(\"Press any key to continue...\\n\");\ngetchar();\nreturn 0;\n}\n</code></pre>"},{"location":"tr/week-4-test/ce103-week-4-test/#cc-wsl-option","title":"C/C++ WSL Option","text":"<p>Install WSL</p> <p>GitHub - ucoruh/ns3-wsl-win10-setup: ns3 windows 10 WSL2 setup and usage</p> <p>Create a Linux project</p> <p></p> <p>Configure Platform Toolset to WSL</p> <p></p> <p>Select GCC for Windows Subsystem for Linux</p> <p></p> <p>Put a breakpoint and run debugger</p> <p></p> <p>In the debugger for WSL you can use local WSL installation but if you want to run it on Release setting it require a SSH connection.</p> <p></p> <p>Configure SSH parameters</p> <p></p> <p>so you have to complete the following steps. </p>"},{"location":"tr/week-4-test/ce103-week-4-test/#cc-remote-linux-option-over-ssh","title":"C/C++ Remote Linux Option over SSH","text":"<p>Enable SSH </p> <p>SSH on Windows Subsystem for Linux (WSL) | Illuminia Studios</p> <p>Connect to Remote WSL Environment</p> <p>Ba\u011flan hedef Linux sisteminize Visual Studio | Microsoft Docs</p>"},{"location":"tr/week-4-test/ce103-week-4-test/#visual-studio-community-edition_2","title":"Visual Studio Community Edition","text":"<p>In C# project we will create class library we have several options</p> <p>for this sample we will select .NET core that we can build cross platform library</p> <p></p> <p>There is no static library option</p> <p></p> <p>We will select .Net Core 3.1</p> <p></p> <p>You will have default empty class library file</p> <p></p> <p>In the project you can see .NETcore reference</p> <p></p> <p>We can build empty class library that generate dll for our application</p> <p></p> <p>Now we will add Console Application but this will also use .NETCore</p> <p>Select New Project </p> <p></p> <p>Name the project</p> <p></p> <p>Select .NETCore framework</p> <p></p> <p>You will have the following sample main.cs file</p> <pre><code>using System;\nnamespace csharp_sample_app\n{\nclass Program\n{\nstatic void Main(string[] args)\n{\nConsole.WriteLine(\"Hello World!\");\n}\n}\n}\n</code></pre> <p>Now we can link projects with adding references open reference section</p> <p></p> <p>browse for class library project output folder and select output dll file for console application</p> <p></p> <p>now we can update our library code and use it in console application</p> <p>copy following sample to sampleLibClass file in the library</p> <pre><code>using System;\nnamespace csharp_sample_lib\n{\npublic class sampleLibClass\n{\npublic static void sayHelloTo(string name)\n{\nif (!String.IsNullOrEmpty(name))\n{\nConsole.WriteLine(\"Hello \" + name);\n}\nelse\n{\nConsole.WriteLine(\"Hello There\");\n}\n}\npublic static int sum(int a, int b)\n{\nint c = 0;\nc = a + b;\nreturn c;\n}\n}\n}\n</code></pre> <p>after this operation copy following sample to console application and build app then you can run</p> <pre><code>using csharp_sample_lib;\nusing System;\nnamespace csharp_sample_app\n{\nclass Program\n{\nstatic void Main(string[] args)\n{\nConsole.WriteLine(\"Hello World!\");\nsampleLibClass.sayHelloTo(\"Computer\");\nint result = sampleLibClass.sum(5, 4);\nConsole.WriteLine(\"Results is\" + result);\nConsole.WriteLine(\"Results is {0}\", result);\nConsole.Read();\n}\n}\n}\n</code></pre> <p>You will see following output that mean we called DLL functions</p> <p></p> <p>Also we can publish this console application with dll for linux environment or others </p> <p>for linux environment we should install .NETCore</p> <p>follow the link below or commands that I shared with you as below for deployment</p> <p>How to Install Dotnet Core on Ubuntu 20.04 \u2013 TecAdmin</p> <p>Step 1 \u2013 Enable Microsoft PPA</p> <pre><code> wget https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb \nsudo dpkg -i packages-microsoft-prod.deb\n</code></pre> <p>Step 2 \u2013 Installing Dotnet Core SDK</p> <pre><code>sudo apt update \nsudo apt install apt-transport-https \nsudo apt install dotnet-sdk-3.1 \n</code></pre> <p>Step 3 \u2013 Install Dotnet Core Runtime Only</p> <p>To install .NET Core Runtime on Ubuntu 20.04 LTS system, execute the commands:</p> <pre><code>sudo apt update \n</code></pre> <p>To install the previous version of .Net core runtime 2.1, type:</p> <pre><code>sudo apt install dotnet-runtime-2.1\n</code></pre> <p>Press \u201cy\u201d for any input prompted by the installer.</p> <p>Step 4 \u2013 (Optional) Check .NET Core Version</p> <p>You can use dotnet command line utility to check installed version of .NET Core on your system. To check dotnet version, type:</p> <pre><code>dotnet --version\n</code></pre> <p></p> <p>Now we will publish our application as single executable</p> <p>Open publish menu</p> <p></p> <p>Select netcoreapp3.1 and Release for linux-x64</p> <p></p> <p>Select produce single file</p> <p></p> <p>After succesfull publish you will have linux binary that you can run with WSL</p> <p></p> <p>Open WSL and enter the path where this folder located</p> <p>and run application as follow</p> <p></p> <p>check dotnet --version and then run application</p> <p></p> <p>you will see similar output</p> <p></p> <p>In this sample we created single application from settings lets try with shared library located option uncheck the \"produce single file\" option and publish again. </p> <p>Then you will have the following outputs</p> <p></p> <p>If you run csharp-sample-app</p> <p>you will have the same output</p> <p></p>"},{"location":"tr/week-4-test/ce103-week-4-test/#eclipse-ide","title":"Eclipse IDE","text":"<p>You should download and install eclipse installer and then you should select Eclipse IDE for Java Developers</p> <p>Eclipse Installer 2021-09 R | Eclipse Packages</p> <p></p> <p></p> <p></p> <p></p> <p>select create a project</p> <p></p> <p></p> <p>select java project </p> <p></p> <p>give project name</p> <p></p> <p>select finish</p> <p></p> <p>first we need to add a default package to keep everything organized</p> <p></p> <p>then we can create our class that includes our functions</p> <p></p> <p>give class a name</p> <p></p> <p>you will have following class with main</p> <p></p> <p>We will create sample java library with static functions as below.</p> <pre><code>package ce103;\nimport java.io.IOException;\npublic class JavaSampleLib {\npublic static void sayHelloTo(String name) {\nif(name.isBlank() || name.isEmpty())\n{\nSystem.out.println(\"Hello \"+name);\n}else {\nSystem.out.println(\"Hello There\");\n}\n}\npublic static int sum(int a,int b)\n{\nint c = 0;\nc = a+b;\nreturn c;\n}\npublic static void main(String[] args) {\n// TODO Auto-generated method stub\nSystem.out.println(\"Hello World!\");\nJavaSampleLib.sayHelloTo(\"Computer\");\nint result = JavaSampleLib.sum(5, 4);\nSystem.out.println(\"Results is\" + result);\nSystem.out.printf(\"Results is %d \\n\", result);\ntry {\nSystem.in.read();\n} catch (IOException e) {\n// TODO Auto-generated catch block\ne.printStackTrace();\n}\n}\n}\n</code></pre> <p>also we can add main method to run our library functions. If we run this file its process main function</p> <p></p> <p>we can see output from console as below </p> <p></p> <p>There is no exe files java runtime environment run class files but we can export this as an executable.</p> <p></p> <p>Select Java-&gt;Runnable JAR File</p> <p></p> <p>click next and set output path for jar file</p> <p></p> <p>If our project has several external dependecy then we can extract this required files (jar, so, dll) in seperated folder or we can combine them and generate a single executable jar</p> <p>Lets pack everthing together, Select launch configuration that has main function</p> <p></p> <p>end of this operation we will have the following jar that we can by click </p> <p></p> <p>When you click application if cannot run then try command line to see problem</p> <p>enter jar folder and run the following command</p> <pre><code>java -jar JavaSampleLibExecutable.jar\n</code></pre> <p></p> <p>In my case eclipse build JDK is newer than that I installed and set for my OS</p> <p>If we check version we can see problem Java version 1.8.0_231</p> <p></p> <p>We can found installed and builded JDK for our application from Eclipse setting</p> <p></p> <p>select environments </p> <p></p> <p>select installed JRE or JDK</p> <p></p> <p>you can see installed JRE or JDK home </p> <pre><code>C:\\Program Files\\Java\\jdk-16.0.1\n</code></pre> <p></p> <p>Open system environment to fix this problem</p> <p></p> <p></p> <p>Check user settings first</p> <p></p> <p></p> <p>Check system settings</p> <p></p> <p></p> <p>we will move up the JDK 16 configuration then command line will run first java </p> <p></p> <p>Also in system setting check JAVA_HOME</p> <p></p> <p>After this settings close current command line and open new one</p> <p>write </p> <pre><code>java --version\n</code></pre> <p>if you see java version updated and 16.0.1 then settings are correct</p> <p></p> <p>and now if we enter and run application as follow we will see output</p> <p></p> <p>But when you click this jar its not running as you see so we have options to provide a clickable application there</p> <p>Launch4j is an option here</p> <p>Launch4j - Cross-platform Java executable wrapper</p> <p></p> <p>you can watch this tutorial also</p> <p>How to convert jar to exe using Launch4J Full explanation - YouTube</p> <p>Download and install launch4j and open application</p> <p></p> <p>configure your application settings similar to below select jar file and exe output path</p> <p></p> <p>we can customize main class if have multiple main class</p> <p></p> <p>select console from setting for this application</p> <p></p> <p>we can provide a single running application, this setting avoid to run multiple instances</p> <p></p> <p>we need to set runtime environment versions </p> <p></p> <p>you can set system parameters before running application</p> <p></p> <p>with splash screen you can show a splash screen image for your application</p> <p></p> <p>File attributes such as version product information is configured from version info tab</p> <p></p> <p>if your application runtime condition has an error then you can show this customized messages also</p> <p></p> <p>with this options save configuration file xml</p> <p></p> <p>and compile settings</p> <p></p> <p>you will see generated output file in log screen</p> <pre><code>Compiling resources\nLinking\nWrapping\nWARNING: Sign the executable to minimize antivirus false positives or use launching instead of wrapping.\nSuccessfully created C:\\Users\\ugur.coruh\\Desktop\\java-export-sample\\JavaSampleLibExecutable.exe\n</code></pre> <p>now we can run exe by click</p> <p></p> <p></p> <p>another option here adding a bat file to run current jar file</p> <p>JavaSampleLibExecutable.bat</p> <pre><code>java -jar JavaSampleLibExecutable.jar\n</code></pre> <p></p> <p>if we click bat file then we will automate command line task for current jar file</p> <p></p> <p>Now return back to our java library and create another console application that use library functions</p> <p></p> <p></p> <p></p> <p>you can set libraries in this step from but our library should exported for our solution</p> <p></p> <p>Select Add External JARs...</p> <p></p> <p>Open Exported jar folder and select</p> <p></p> <p>Or we can select by Add jar from current workspace</p> <p></p> <p></p> <p>but in this step I won't add anything I'll add references later</p> <p></p> <p>we will have the following project</p> <p></p> <p>lets create a package</p> <p></p> <p></p> <p>and lets create a main class for our application</p> <p></p> <p>check create main function</p> <p></p> <p></p> <p>right click to project and add reference</p> <p></p> <p>you can enter same configurations from project properties</p> <p></p> <p>Lets export our library as a JAR file and then add to our classpath</p> <p></p> <p>Select JAR file</p> <p></p> <p>we configured output as </p> <pre><code>C:\\Users\\ugur.coruh\\Desktop\\java-export-sample\\JavaSampleLib.jar\n</code></pre> <p></p> <p></p> <p></p> <p>In the same export folder now we have JavaSampleLib.jar</p> <p></p> <p>return back to java-sample-app and then add this jar file to our project</p> <p>Build Path-&gt;Add External Archives</p> <p></p> <p>you will see its added to reference libraries</p> <p></p> <p>in our JavaSampleApp.java we can use the following source codes</p> <pre><code>package ce103;\nimport java.io.IOException;\npublic class JavaSampleApp {\npublic static void main(String[] args) {\n// TODO Auto-generated method stub\nSystem.out.println(\"Hello World!\");\nJavaSampleLib.sayHelloTo(\"Computer\");\nint result = JavaSampleLib.sum(5, 4);\nSystem.out.println(\"Results is\" + result);\nSystem.out.printf(\"Results is %d \\n\", result);\ntry {\nSystem.in.read();\n} catch (IOException e) {\n// TODO Auto-generated catch block\ne.printStackTrace();\n}\n}\n}\n</code></pre> <p>When we run application we will see similar output</p> <p></p> <p>Lets export this application with its dependent library</p> <p></p> <p>Select runnable jar</p> <p></p> <p>Set Launch configuration and Export destination</p> <pre><code>C:\\Users\\ugur.coruh\\Desktop\\java-export-sample\\JavaSampleAppSingle.jar\n</code></pre> <p></p> <p>In this option we will have single jar file</p> <p>In the export folder we do not see reference libraries</p> <p></p> <p>and we can run with command line</p> <p></p> <p>only change copy required libraries setting and then give a new name for new jar file and export </p> <pre><code>C:\\Users\\ugur.coruh\\Desktop\\java-export-sample\\JavaSampleAppMultiple.jar\n</code></pre> <p></p> <p>now we have a folder that contains our libraries referenced</p> <p></p> <p>in this file we can find our library</p> <p></p> <p>if we test our application we will see it will work</p> <p></p> <p>if we delete JavaSampleLib.jar and then try running application we will get error</p> <p></p>"},{"location":"tr/week-4-test/ce103-week-4-test/#program-testing","title":"Program Testing","text":""},{"location":"tr/week-4-test/ce103-week-4-test/#unit-test-development","title":"Unit Test Development","text":""},{"location":"tr/week-4-test/ce103-week-4-test/#visual-studio-community-edition_4","title":"Visual Studio Community Edition","text":"<p>C/C++ i\u00e7in birim testleri yazma - Visual Studio (Windows) | Microsoft Docs</p> <p>Use cpp-sample-lib project and add </p> <p></p> <p>select Native Unit Test</p> <p></p> <p>set project path and name</p> <p></p> <p>you will have cpp-sample-test project</p> <p></p> <p>add library project from references</p> <p></p> <p>Add cpp-sample-lib to cpp-sample-test project</p> <p></p> <p>cpp-sample-test.cpp</p> <pre><code>#include \"pch.h\"\n#include \"CppUnitTest.h\"\n#include \"..\\cpp-sample-lib\\samplelib.h\"\nusing namespace Microsoft::VisualStudio::CppUnitTestFramework;\nnamespace cppsampletest\n{\nTEST_CLASS(cppsampletest)\n{\npublic:\nTEST_METHOD(TestSumCorrect)\n{\nAssert::AreEqual(9, sum(4, 5));\n}\nTEST_METHOD(TestSumInCorrect)\n{\nAssert::AreEqual(10, sum(4, 5));\n}\n};\n}\n</code></pre> <p></p> <p></p>"},{"location":"tr/week-4-test/ce103-week-4-test/#c-unit-tests_2","title":"C# Unit Tests","text":""},{"location":"tr/week-4-test/ce103-week-4-test/#visual-studio-community-edition-mstestv2net","title":"Visual Studio Community Edition (MSTestV2+.Net)","text":"<p>Install extension fine code coverage</p> <p>https://marketplace.visualstudio.com/items?itemName=FortuneNgwenya.FineCodeCoverage</p> <p>Create a .Net Framework Library</p> <p></p> <p>set project framework and path</p> <p></p> <p>Create library functions</p> <p></p> <pre><code>using System;\nusing System.Collections.Generic;\nusing System.Text;\nnamespace cs_lib_sample\n{\npublic class SampleLibClass\n{\npublic static string sayHelloTo(string name)\n{\nstring result = String.Empty;\nif (!String.IsNullOrEmpty(name))\n{\nresult = \"Hello \" + name;\n}\nelse\n{\nresult = \"Hello There\";\n}\nConsole.WriteLine(result);\nreturn result;\n}\npublic static int sum(int a, int b)\n{\nint c = 0;\nc = a + b;\nreturn c;\n}\npublic int multiply(int a, int b)\n{\nreturn a * b;\n}\n}\n}\n</code></pre> <p>right click and then create unit test project</p> <p></p> <p>press OK</p> <p></p> <p>enter test code</p> <pre><code>using Microsoft.VisualStudio.TestTools.UnitTesting;\nusing cs_lib_sample;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nnamespace cs_lib_sample.Tests\n{\n[TestClass()]\npublic class SampleLibClassTests\n{\n[TestMethod()]\npublic void testSayHelloTo()\n{\nAssert.AreEqual(\"Hello Computer\", SampleLibClass.sayHelloTo(\"Computer\"), \"Regular say hello should work\");\n}\n[TestMethod()]\npublic void testSayHelloToWrong()\n{\nAssert.AreEqual(\"Hello All\", SampleLibClass.sayHelloTo(\"Computer\"), \"Regular say hello won't work\");\n}\n[TestMethod()]\npublic void testSumCorrect()\n{\nAssert.AreEqual(9, SampleLibClass.sum(4, 5), \"Regular sum should work\");\n}\n[TestMethod()]\npublic void testSumWrong()\n{\nAssert.AreEqual(10, SampleLibClass.sum(4, 5), \"Regular sum shouldn't work\");\n}\n[TestMethod()]\npublic void testMultiply()\n{\nSampleLibClass sampleLib = new SampleLibClass();\nAssert.AreEqual(20, sampleLib.multiply(4, 5), \"Regular multiplication should work\");\n}\n}\n}\n</code></pre> <p>Run tests</p> <p></p> <p>you will code coverage and entered or passed branches</p> <p></p>"},{"location":"tr/week-4-test/ce103-week-4-test/#visual-studio-community-edition-nunitnetcore","title":"Visual Studio Community Edition (NUnit+.NETCore)","text":"<p>use cshar-sample-lib for this example</p> <p>create and add a unit test project to solution</p> <p></p> <p></p> <p></p> <p></p> <p>Add project reference</p> <p></p> <p></p> <p>SampleLibraryTestClasss in NUnit Project</p> <pre><code>using csharp_sample_lib;\nusing NUnit.Framework;\nnamespace csharp_sample_lib_test\n{\npublic class SampleLibraryTestClass\n{\nsampleLibClass sampleLib;\n[SetUp]\npublic void Setup()\n{\nsampleLib = new sampleLibClass();\n}\n[Test]\npublic void testSayHelloTo()\n{\nAssert.AreEqual(\"Hello Computer\", sampleLibClass.sayHelloTo(\"Computer\"), \"Regular say hello should work\");\n}\n[Test]\npublic void testSayHelloToWrong()\n{\nAssert.AreEqual(\"Hello All\", sampleLibClass.sayHelloTo(\"Computer\"), \"Regular say hello won't work\");\n}\n[Test]\npublic void testSumCorrect()\n{\nAssert.AreEqual(9, sampleLibClass.sum(4, 5), \"Regular sum should work\");\n}\n[Test]\npublic void testSumWrong()\n{\nAssert.AreEqual(10, sampleLibClass.sum(4, 5), \"Regular sum shouldn't work\");\n}\n[Test]\npublic void testMultiply()\n{\nAssert.AreEqual(20, sampleLib.multiply(4, 5), \"Regular multiplication should work\");\n}\n}\n}\n</code></pre> <p>sample class library </p> <pre><code>using System;\nnamespace csharp_sample_lib\n{\npublic class sampleLibClass\n{\npublic static string sayHelloTo(string name)\n{\nstring result = String.Empty;\nif (!String.IsNullOrEmpty(name))\n{\nresult = \"Hello \" + name;\n}\nelse\n{\nresult = \"Hello There\";\n}\nConsole.WriteLine(result);\nreturn result;\n}\npublic static int sum(int a, int b)\n{\nint c = 0;\nc = a + b;\nreturn c;\n}\npublic int multiply(int a, int b)\n{\nreturn a * b;\n}\n}\n}\n</code></pre> <p>Open test explorer and run tests </p> <p></p> <p>or you can run from project</p> <p></p> <p>Also we can create unit test from library class,</p> <p>right click the sampleLibClass and select create unit tests but this option do not provide nunit tests.</p> <p></p> <p></p> <p></p> <p></p> <pre><code>using Microsoft.VisualStudio.TestTools.UnitTesting;\nusing csharp_sample_lib;\nusing System;\nusing System.Collections.Generic;\nusing System.Text;\nnamespace csharp_sample_lib.Tests\n{\n[TestClass()]\npublic class sampleLibClassTests\n{\n[TestMethod()]\npublic void sayHelloToTest()\n{\nAssert.Fail();\n}\n[TestMethod()]\npublic void sumTest()\n{\nAssert.Fail();\n}\n[TestMethod()]\npublic void multiplyTest()\n{\nAssert.Fail();\n}\n}\n}\n</code></pre> <p>we will not commit this changes and continue from nunit test project, the fine code </p> <p>coverage also work for nunit test but not provide inline highlighting</p> <p>if we run tests we will have the following outputs</p> <p></p> <p></p> <p>Inline code highlight is part of enterprise visual studio edition</p> <p>Analyzing code coverage in Visual Studio - DEV Community</p>"},{"location":"tr/week-4-test/ce103-week-4-test/#tldr","title":"TL;DR","text":"<p>Additional information you can use OpenCover + Nunit Runner + Report Generator together to setup a code coverage report but it has complex batch running process. After a few try I decided to use fine code coverage but here is the usage not tested well.</p> <p>First unit test runner tool doesn't support .Net Core</p> <p>c# - The NUnit 3 driver encountered an error while executing reflected code (NUnit.Engine.NUnitEngineException) - Stack Overflow</p> <p>Follow the instructions on the link</p> <p>CMD OpenCover \u00b7 sukhoi1/Useful-Notes Wiki \u00b7 GitHub</p> <p>Install OpenCover, ReportGenerator, Nunit,Runners packages then use the package installation folder to get tools that you need</p> <p>Here is a sample for open cover, select package and copy path</p> <p></p> <p>Goto path and tools</p> <pre><code>C:\\Users\\ugur.coruh\\.nuget\\packages\\opencover\\4.7.1221\n</code></pre> <p>You need to setup some batch similar with following</p> <p>run-test-coverage.bat</p> <pre><code>set pathA=C:\\Users\\ugur.coruh\\.nuget\\packages\\opencover\\4.7.1221\\tools\nset pathB=C:\\Users\\ugur.coruh\\.nuget\\packages\\nunit.consolerunner\\3.12.0\\tools\nset pathC=C:\\Users\\ugur.coruh\\.nuget\\packages\\reportgenerator\\4.8.13\\tools\\netcoreapp3.0\nset dllpath=C:\\Users\\ugur.coruh\\Desktop\\csharp-sample-lib\\csharp-sample-lib-test\\bin\\Debug\\netcoreapp3.1\n\n\"%pathA%\\OpenCover.Console.exe\" ^\n-targetargs:\"%dllpath%\\csharp-sample-lib-test.dll\" ^\n-filter:\"+[csharp-sample-lib*]* -[*test]*\" ^\n-target:\"%pathB%\\nunit3-console.exe\" ^\n-output:\"%dllpath%\\coverReport.xml\" ^\n-skipautoprops -register:user &amp;&amp; \"%pathC%\\ReportGenerator.exe\" -reports:\"%dllpath%\\coverReport.xml\" -targetdir:\"\"%dllpath%\\coverage\"\npause\n</code></pre> <p>but nunit3-console.exe gives error </p> <p></p> <p></p> <p>for this compatibility issues I prefer to use fine code coverage extension. </p> <p>OpenCover related studies</p> <p>Code coverage of manual or automated tests with OpenCover for .NET applications \u2013 Automation Rhapsody</p> <p>Code coverage of .NET Core unit tests with OpenCover \u2013 Automation Rhapsody</p> <p>Sample OpenCover report</p> <p>Summary - Coverage Report</p>"},{"location":"tr/week-4-test/ce103-week-4-test/#download-and-setup-opencover-nunit-console-report-generator-without-package-manager","title":"Download and Setup OpenCover, NUnit Console, Report Generator without Package Manager","text":"<p>You can also download the tools from github project pages and install on your operating system, </p>"},{"location":"tr/week-4-test/ce103-week-4-test/#opencover","title":"OpenCover","text":"<p>Releases \u00b7 OpenCover/opencover \u00b7 GitHub</p> <p></p> <p></p> <p>Select advanced and then install for all users</p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p>"},{"location":"tr/week-4-test/ce103-week-4-test/#reportgenerator","title":"ReportGenerator","text":"<p>Release ReportGenerator_4.8.13 \u00b7 danielpalme/ReportGenerator \u00b7 GitHub</p> <p></p> <p></p>"},{"location":"tr/week-4-test/ce103-week-4-test/#nunit-console","title":"NUnit Console","text":"<p>Downloads</p> <p></p> <p></p> <p></p> <p></p> <p></p>"},{"location":"tr/week-4-test/ce103-week-4-test/#nunit-mstest-batch-report-generation-not-tested","title":"NUnit + MSTest Batch Report Generation (Not Tested)","text":"<p>OpenCover and ReportGenerator Unit Test Coverage in Visual Studio 2013 and 2015 \u2013 CodeHelper.Net</p> <p>OpenCover and ReportGenerator Unit Test Coverage in Visual Studio 2013 and 2015 - CodeProject</p>"},{"location":"tr/week-4-test/ce103-week-4-test/#eclipse-ide-junit4-junit5","title":"Eclipse IDE (JUnit4 , JUnit5)","text":"<p>In this sample we will create two example for similar library</p> <p>Please check the following links </p> <p>JUnit 5 tutorial - Learn how to write unit tests</p> <p>JUnit 5</p> <p>JUnit 5 User Guide</p> <p>https://www.eclemma.org/</p> <p>JUnit Hello World Example - Examples Java Code Geeks - 2021</p> <p>https://yasinmemic.medium.com/java-ile-unit-test-yazmak-birim-test-ca15cf0d024b</p>"},{"location":"tr/week-4-test/ce103-week-4-test/#java-application-junit","title":"Java Application + JUnit","text":"<p>In normal java application we can right click the project java-sample-lib and add Junit case </p> <p></p> <p></p> <p></p> <p></p> <p></p> <p>and you will have the following test class</p> <p></p> <p>Now we will create tests that check our function flowchart and return values</p> <p>We need to cover all code branches that we coded</p> <p>I have updated JavaSampleLib.java as follow to check outputs</p> <p>JavaSampleLib.java</p> <pre><code>package ce103;\npublic class JavaSampleLib {\npublic static String sayHelloTo(String name) {\nString output = \"\";\nif(!name.isBlank() &amp;&amp; !name.isEmpty()){\noutput = \"Hello \"+name;\n}else {\noutput = \"Hello There\";\n}\nSystem.out.println(output);\nreturn output;\n}\npublic static int sum(int a,int b)\n{\nint c = 0;\nc = a+b;\nreturn c;\n}\npublic int multiply(int a, int b) {\nreturn a * b;\n}\n//    public static void main(String[] args) {\n//        // TODO Auto-generated method stub\n//        System.out.println(\"Hello World!\");\n//\n//        JavaSampleLib.sayHelloTo(\"Computer\");\n//        int result = JavaSampleLib.sum(5, 4);\n//        System.out.println(\"Results is\" + result);\n//        System.out.printf(\"Results is %d \\n\", result);\n//        \n//        \n//        try {\n//            System.in.read();\n//        } catch (IOException e) {\n//            // TODO Auto-generated catch block\n//            e.printStackTrace();\n//        }\n//\n//    }\n}\n</code></pre> <p>and JavaSampleLibTest.java</p> <pre><code>package ce103;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.AfterAll;\nimport org.junit.jupiter.api.AfterEach;\nimport org.junit.jupiter.api.BeforeAll;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.RepeatedTest;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.MethodSource;\nclass JavaSampleLibTest {\nJavaSampleLib sampleLib;\n@BeforeAll\nstatic void setUpBeforeClass() throws Exception {\n}\n@AfterAll\nstatic void tearDownAfterClass() throws Exception {\n}\n@BeforeEach\nvoid setUp() throws Exception {\nsampleLib = new JavaSampleLib();\n}\n@AfterEach\nvoid tearDown() throws Exception {\n}\n@Test\n@DisplayName(\"Simple Say Hello should work\")\nvoid testSayHelloTo() {\nassertEquals(\"Hello Computer\", JavaSampleLib.sayHelloTo(\"Computer\"), \"Regular say hello should work\");\n}\n@Test\n@DisplayName(\"Simple Say Hello shouldn' work\")\nvoid testSayHelloToWrong() {\nassertEquals(\"Hello All\", JavaSampleLib.sayHelloTo(\"Computer\"), \"Regular say hello won't work\");\n}\n@Test\n@DisplayName(\"Simple sum should work\")\nvoid testSumCorrect() {\nassertEquals(9, JavaSampleLib.sum(4, 5), \"Regular sum should work\");\n}\n@Test\n@DisplayName(\"Simple sum shouldn't work\")\nvoid testSumWrong() {\nassertEquals(10, JavaSampleLib.sum(4, 5), \"Regular sum shouldn't work\");\n}\n@Test\n@DisplayName(\"Simple multiplication should work\")\nvoid testMultiply() {\nassertEquals(20, sampleLib.multiply(4, 5), \"Regular multiplication should work\");\n}\n@RepeatedTest(5)\n@DisplayName(\"Ensure correct handling of zero\")\nvoid testMultiplyWithZero() {\nassertEquals(0, sampleLib.multiply(0, 5), \"Multiple with zero should be zero\");\nassertEquals(0, sampleLib.multiply(5, 0), \"Multiple with zero should be zero\");\n}\npublic static int[][] data() {\nreturn new int[][] { { 1, 2, 2 }, { 5, 3, 15 }, { 121, 4, 484 },{ 2, 2, 2 } };\n}\n@ParameterizedTest\n@MethodSource(value = \"data\")\nvoid testWithStringParameter(int[] data) {\nJavaSampleLib tester = new JavaSampleLib();\nint m1 = data[0];\nint m2 = data[1];\nint expected = data[2];\nassertEquals(expected, tester.multiply(m1, m2));\n}\n}\n</code></pre> <p>if we run tests</p> <p></p> <p>we will see all results there</p> <p></p> <p>also we can see the code coverage of tests</p> <p></p> <p>when we open our source code (just close and open again another case highlighting will not work) you will see tested part of your codes</p> <p></p>"},{"location":"tr/week-4-test/ce103-week-4-test/#maven-java-application-junit","title":"Maven Java Application + JUnit","text":"<p>Lets create Maven project with tests</p> <p>Create a maven project</p> <p>File -&gt; New -&gt; Maven Project</p> <p></p> <p></p> <p>Lets convert our sample java-sample-lib directories to standard folder structure for test and app division</p> <p>Maven \u2013 Introduction to the Standard Directory Layout</p> <p>Also for intro you can use this</p> <p>JUnit Hello World Example - Examples Java Code Geeks - 2021</p> <p>Eclipse Maven Java JUnit 4.12 (pulled by Maven automatically)</p> <p>Lets give new sample java-sample-lib-mvnbut in this time we will create a maven project</p> <p></p> <p></p> <p>pom.xml file</p> <pre><code>&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n&lt;groupId&gt;com.ce103&lt;/groupId&gt;\n&lt;artifactId&gt;java-sample-lib-ext&lt;/artifactId&gt;\n&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;\n&lt;name&gt;Java Sample Lib&lt;/name&gt;\n&lt;description&gt;Java Sample with Unit Test&lt;/description&gt;\n&lt;/project&gt;\n</code></pre> <p>we will add JUnit 5 for our project </p> <pre><code>&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\nxsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n&lt;groupId&gt;com.ce103&lt;/groupId&gt;\n&lt;artifactId&gt;java-sample-lib-ext&lt;/artifactId&gt;\n&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;\n&lt;name&gt;Java Sample Lib&lt;/name&gt;\n&lt;description&gt;Java Sample with Unit Test&lt;/description&gt;\n&lt;dependencies&gt;\n&lt;dependency&gt;\n&lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;\n&lt;artifactId&gt;junit-jupiter-params&lt;/artifactId&gt;\n&lt;version&gt;5.7.1&lt;/version&gt;\n&lt;scope&gt;test&lt;/scope&gt;\n&lt;/dependency&gt;\n&lt;/dependencies&gt;\n&lt;/project&gt;\n</code></pre> <p>it will automatically download libraries </p> <p></p> <p></p> <p>Create java sample library in ce103 package, first create java package</p> <p></p> <p>In this package create library class</p> <p></p> <p></p> <p>copy content from other library</p> <pre><code>package ce103;\npublic class JavaSampleLib {\npublic static String sayHelloTo(String name) {\nString output = \"\";\nif(!name.isBlank() &amp;&amp; !name.isEmpty()){\noutput = \"Hello \"+name;\n}else {\noutput = \"Hello There\";\n}\nSystem.out.println(output);\nreturn output;\n}\npublic static int sum(int a,int b)\n{\nint c = 0;\nc = a+b;\nreturn c;\n}\npublic int multiply(int a, int b) {\nreturn a * b;\n}\n}\n</code></pre> <p>Now lets create tests inf src/test/java</p> <p></p> <p></p> <p>create a JUnit Case </p> <p></p> <p></p> <p></p> <p></p> <p>you will simple template</p> <pre><code>package ce103;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.AfterAll;\nimport org.junit.jupiter.api.AfterEach;\nimport org.junit.jupiter.api.BeforeAll;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nclass JavaSampleLibTest {\n@BeforeAll\nstatic void setUpBeforeClass() throws Exception {\n}\n@AfterAll\nstatic void tearDownAfterClass() throws Exception {\n}\n@BeforeEach\nvoid setUp() throws Exception {\n}\n@AfterEach\nvoid tearDown() throws Exception {\n}\n@Test\nvoid testSayHelloTo() {\nfail(\"Not yet implemented\");\n}\n@Test\nvoid testSum() {\nfail(\"Not yet implemented\");\n}\n@Test\nvoid testMultiply() {\nfail(\"Not yet implemented\");\n}\n}\n</code></pre> <p>now lets copy tests from other projects</p> <pre><code>\n</code></pre> <p></p> <p></p> <p></p> <p>That's a part of java unit testing...</p>"},{"location":"tr/week-4-test/ce103-week-4-test/#tdd-test-driven-development","title":"TDD (Test Driven Development)","text":""},{"location":"tr/week-4-test/ce103-week-4-test/#travis-ci-c","title":"Travis-CI + C","text":""},{"location":"tr/week-4-test/ce103-week-4-test/#travis-ci-cpp","title":"Travis-CI + Cpp","text":""},{"location":"tr/week-4-test/ce103-week-4-test/#travis-ci-c_1","title":"Travis-CI + C","text":""},{"location":"tr/week-4-test/ce103-week-4-test/#travis-ci-java","title":"Travis-CI + Java","text":""},{"location":"tr/week-4-test/ce103-week-4-test/#references","title":"References","text":"<p>GitHub - MicrosoftDocs/cpp-docs: C++ Documentation</p>"},{"location":"tr/week-5-c/ce103-week-5-c/#c-functional-console-programming_1","title":"C Functional Console Programming","text":"<p>We will use the following course notes and examples.</p> <p>Learn C Programming</p> <p></p> <p>C Tutorials - Introduction to C Programming Language</p> <p></p> <p>The C and C++ programming tutorials, hands-on approach with program examples, code samples and tons of output images using Visual C++, C++ Builder, Linux gcc and g++ compilers and IDE</p> <p></p> <p>CS50x 2021</p> <p></p> <p>C Programming For Dummies</p> <p></p> <p>C reference - cppreference.com</p> <p></p> <p>https://c.happycodings.com/</p> <p></p>"},{"location":"tr/week-5-c/ce103-week-5-c/#preprocessing","title":"preprocessing","text":"<p>get included file declarations</p> <pre><code>#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\nint main(void)\n{\nstring name = get_string(\"What's your name? \");\nprintf(\"hello, %s\\n\", name);\n}\n</code></pre> <p>to this</p> <pre><code>string get_string(string prompt);\nint printf(string format, ...);\nint main(void)\n{\nstring name = get_string(\"What's your name? \");\nprintf(\"hello, %s\\n\", name);\n}\n</code></pre>"},{"location":"tr/week-5-c/ce103-week-5-c/#compiling","title":"compiling","text":"<p>convert source code to assembler code</p> <pre><code>...\nmain:                                   # @main\n    .cfi_startproc\n# BB#0:\n    pushq    %rbp\n.Ltmp0:\n    .cfi_def_cfa_offset 16\n.Ltmp1:\n    .cfi_offset %rbp, -16\n    movq    %rsp, %rbp\n.Ltmp2:\n    .cfi_def_cfa_register %rbp\n    subq    $16, %rsp\n    xorl    %eax, %eax\n    movl    %eax, %edi\n    movabsq    $.L.str, %rsi\n    movb    $0, %al\n    callq    get_string\n    movabsq    $.L.str.1, %rdi\n    movq    %rax, -8(%rbp)\n    movq    -8(%rbp), %rsi\n    movb    $0, %al\n    callq    printf\n    ...\n</code></pre>"},{"location":"tr/week-5-c/ce103-week-5-c/#assembling","title":"assembling","text":"<p>convert assembler to opcodes</p> <pre><code>...\nmain:                                   # @main\n    .cfi_startproc\n# BB#0:\n    pushq    %rbp\n.Ltmp0:\n    .cfi_def_cfa_offset 16\n.Ltmp1:\n    .cfi_offset %rbp, -16\n    movq    %rsp, %rbp\n.Ltmp2:\n    .cfi_def_cfa_register %rbp\n    subq    $16, %rsp\n    xorl    %eax, %eax\n    movl    %eax, %edi\n    movabsq    $.L.str, %rsi\n    movb    $0, %al\n    callq    get_string\n    movabsq    $.L.str.1, %rdi\n    movq    %rax, -8(%rbp)\n    movq    -8(%rbp), %rsi\n    movb    $0, %al\n    callq    printf\n    ...\n</code></pre> <p>to this</p> <pre><code>01111111010001010100110001000110\n00000010000000010000000100000000\n00000000000000000000000000000000\n00000000000000000000000000000000\n00000001000000000011111000000000\n00000001000000000000000000000000\n00000000000000000000000000000000\n00000000000000000000000000000000\n00000000000000000000000000000000\n00000000000000000000000000000000\n10100000000000100000000000000000\n00000000000000000000000000000000\n00000000000000000000000000000000\n01000000000000000000000000000000\n00000000000000000100000000000000\n00001010000000000000000100000000\n01010101010010001000100111100101\n01001000100000111110110000010000\n00110001110000001000100111000111\n01001000101111100000000000000000\n00000000000000000000000000000000\n00000000000000001011000000000000\n11101000000000000000000000000000\n00000000010010001011111100000000\n00000000000000000000000000000000\n00000000000000000000000001001000\n...\n</code></pre>"},{"location":"tr/week-5-c/ce103-week-5-c/#linking","title":"linking","text":"hello.c cs50.c stdio.cp>combine binary codes to generate exe</p> <pre><code>011111110100010101001100010001100000001000000001000000010000000000000000000000000000000000000000000000\n000000000000000000000000000000000100000000001111100000000000000001000000000000000000000000000000000000\n000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n000000000000001010000000000010000000000000000000000000000000000000000000000000000000000000000000000000\n000000000100000000000000000000000000000000000000000000000100000000000000000010100000000000000001000000\n000101010101001000100010011110010101001000100000111110110000010000001100011100000010001001110001110100\n100010111110000000000000000000000000000000000000000000000000000000000000000010110000000000001110100000\n000000000000000000000000000000010010001011111100000000000000000000000000000000000000000000000000000000\n0000000001001000...01111111010001010100110001000110000000100000000100000001000000000000000000000000000\n000000000000000000000000000000000000000000000000000110000000000111110000000000000000100000000000000000\n000000011000000000011110000000000000000000000000000000000000000000000000100000000000000000000000000000\n000000000000000000000000000000000001010000011001000000000000000000000000000000000000000000000000000000\n000000000000000000000000000010000000000000000111000000000000000011100000000010000000000000000011100000\n000000001100100000000000000010000000000000000000000000000010100000000000000000000000000000000000000000\n000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n000000000000000000000000000000000000000000000000000000000000000000000000001011100001001010000000000000\n00000000000000000000000000000000000...0010111101101100011010010110001001100011001011100111001101101111\n001011100011011000100000001011110111010101110011011100100010111101101100011010010110001000101111011110\n000011100000110110010111110011011000110100001011010110110001101001011011100111010101111000001011010110\n011101101110011101010010111101101100011010010110001001100011010111110110111001101111011011100111001101\n101000011000010111001001100101011001000010111001100001001000000010000001000001010100110101111101001110\n010001010100010101000100010001010100010000100000001010000010000000101111011011000110100101100010001011\n110111100000111000001101100101111100110110001101000010110101101100011010010110111001110101011110000010\n110101100111011011100111010100101111011011000110010000101101011011000110100101101110011101010111100000\n101101011110000011100000110110001011010011011000110100...\n</code></pre>"},{"location":"tr/week-5-c/ce103-week-5-c/#how-if-statement-works","title":"How if statement works?","text":"<p>The test expression inside the parentheses is evaluated by the if statement ().</p> <p>If the test expression is true, the statements within the if body are performed. If the test expression is interpreted as false, the statements within the if body are not performed.</p> <p></p> <p>Check relational and logical operators to understand more about when a test expression is evaluated to true (non-zero value) and false (0).</p>"},{"location":"tr/week-5-c/ce103-week-5-c/#how-ifelse-statement-works","title":"How if...else statement works?","text":"<p>If the test expression is found to be true,</p> <p>Statements within the if body are performed. Statements within the body of else are not executed. If the test expression is found to be false,</p> <p>Phrases inside the body of else are performed; statements within the body of if are skipped.</p> <p></p>"},{"location":"tr/week-5-c/ce103-week-5-c/#how-for-loop-works","title":"How for loop works?","text":"<p>The initialization statement is only used once. The test expression is then evaluated. The for loop is ended if the test statement is interpreted as false. If the test expression is true, the statements inside the for loop's body are performed, and the update expression is updated. The test expression is examined once more. This procedure is repeated until the test expression is false. The loop is terminated when the test expression is false.</p> <p></p>"},{"location":"tr/week-5-c/ce103-week-5-c/#how-while-loop-works","title":"How while loop works?","text":"<ul> <li>The <code>while</code> loop evaluates the <code>testExpression</code> inside the parentheses <code>()</code>.</li> <li>If <code>testExpression</code> is true, statements inside the body of <code>while</code> loop are executed. Then, <code>testExpression</code> is evaluated again.</li> <li>The process goes on until <code>testExpression</code> is evaluated to false.</li> <li>If <code>testExpression</code> is false, the loop terminates (ends).</li> </ul>"},{"location":"tr/week-5-c/ce103-week-5-c/#how-dowhile-loop-works","title":"How do...while loop works?","text":"<ul> <li>The body of <code>do...while</code> loop is executed once. Only then, the <code>testExpression</code> is evaluated.</li> <li>If <code>testExpression</code> is true, the body of the loop is executed again and <code>testExpression</code> is evaluated once more.</li> <li>This process goes on until <code>testExpression</code> becomes false.</li> <li>If <code>testExpression</code> is false, the loop ends.</li> </ul>"},{"location":"tr/week-5-c/ce103-week-5-c/#flowchart-of-dowhile-loop","title":"Flowchart of do...while Loop","text":""},{"location":"tr/week-5-c/ce103-week-5-c/#c-break","title":"C break","text":"<p>The break statement ends the loop immediately when it is encountered. Its syntax is:</p> <pre><code>break;\n</code></pre> <p>The break statement is almost always used with <code>if...else</code> statement inside the loop.</p> <p></p>"},{"location":"tr/week-5-c/ce103-week-5-c/#c-continue","title":"C continue","text":"<p>The <code>continue</code> statement skips the current iteration of the loop and continues with the next iteration. Its syntax is:</p> <pre><code>continue;\n</code></pre> <p>The <code>continue</code> statement is almost always used with the <code>if...else</code> statement.</p>"},{"location":"tr/week-5-c/ce103-week-5-c/#how-continue-statement-works","title":"How continue statement works?","text":""},{"location":"tr/week-5-c/ce103-week-5-c/#syntax-of-switchcase","title":"Syntax of switch...case","text":"<pre><code>switch (expression)\n{\ncase constant1:\n// statements\nbreak;\ncase constant2:\n// statements\nbreak;\n.\n.\n.\ndefault:\n// default statements\n}\n</code></pre> <p>How does the switch statement work?</p> <p>The expression is evaluated once and compared with the values of each case label.</p> <ul> <li>If there is a match, the corresponding statements after the matching label are executed. For example, if the value of the expression is equal to constant2, statements after <code>case constant2:</code> are executed until <code>break</code> is encountered.</li> <li>If there is no match, the default statements are executed.</li> </ul> <p>If we do not use <code>break</code>, all statements after the matching label are executed.</p> <p>By the way, the <code>default</code> clause inside the <code>switch</code> statement is optional.</p> <p></p>"},{"location":"tr/week-5-c/ce103-week-5-c/#syntax-of-goto-statement","title":"Syntax of goto Statement","text":"<pre><code>goto label;\n... .. ...\n... .. ...\nlabel: statement;\n</code></pre> <p>The label is an identifier. When the <code>goto</code> statement is encountered, the control of the program jumps to <code>label:</code> and starts executing the code.</p> <p></p>"},{"location":"tr/week-5-c/ce103-week-5-c/#should-you-use-goto","title":"Should you use goto?","text":"<p>If you think the use of <code>goto</code> statement simplifies your program, you can use it. That being said, <code>goto</code> is rarely useful and you can create any C program without using <code>goto</code> altogether.</p> <p>Here's a quote from Bjarne Stroustrup, creator of C++, \"The fact that 'goto' can do anything is exactly why we don't use it.\"</p> <p>C Functions</p> <p>C User-defined functions</p> <p>Types of User-defined Functions in C Programming</p> <p>C Recursion (Recursive function)</p> <p>C Storage Class</p> <p>C Function Examples</p> <p>C Arrays (With Examples)</p> <p>C Multidimensional Arrays (2d and 3d Array)</p> <p>Pass arrays to a function in C</p> <p>for Pointers check CS50 visuals in PDF</p> <p>C Pointers (With Examples)</p> <p>Relationship Between Arrays and Pointers in C Programming (With Examples)</p> <p>C Pass Addresses and Pointers to Functions</p> <p>C Dynamic Memory Allocation Using malloc(), calloc(), free() &amp; realloc()</p> <p>C Array and Pointer Examples</p> <p>Strings in C (With Examples)</p> <p>String Manipulations In C Programming Using Library Functions</p> <p>String Examples in C Programming</p> <p>c. C Functions</p> <p>i. C Programming Functions</p> <p>ii. C User-defined Functions</p> <p>iii. C Function Types</p> <p>iv. C Recursion</p> <p>v. C Storage Class</p> <p>vi. C Function Examples</p> <p>d. C Programming Arrays</p> <p>i. C Programming Arrays</p> <p>ii. C Multi-dimensional Arrays</p> <p>iii. C Arrays &amp; Functions</p> <p>e. C Programming Pointers</p> <p>i. C Programming Pointers</p> <p>ii. C Pointers &amp; Arrays</p> <p>iii. C Pointers and Functions</p> <p>iv. C Memory Allocation</p> <p>v. Array &amp; Pointer Examples</p> <p>f. C Programming Strings</p> <p>i. C Programming Strings</p> <p>ii. C String Functions</p> <p>iii. C String Examples</p> <p>g. C Structure and Union</p> <p>i. C Structure</p> <p>ii. C Struct &amp; Pointers</p> <p>iii. C Struct &amp; Functions</p> <p>iv. C Unions</p> <p>v. C Struct Examples</p> <p>h. C Programming Files</p> <p>i. C Files Input/Output</p> <p>ii. C Files Examples</p> <p>i. Additional Topics</p> <p>i. C Enumeration</p> <p>ii. C Preprocessors</p> <p>iii. C Standard Library</p> <p>C Programming Examples</p> <p>https://cdnvideo.eba.gov.tr/fatihkalem/fatihkalem_portable.zip</p> <p>https://cdnvideo.eba.gov.tr/fatihkalem/fatihkalem_setup.exe</p>"},{"location":"tr/week-5-c/ce103-week-5-c/#extras","title":"Extras","text":""},{"location":"tr/week-6-cpp/ce103-week-6-cpp/#c-functional-console-programming_1","title":"C++ Functional Console Programming","text":"<p>We will follow the following topics</p> <ul> <li> <p>Learn C++ Programming</p> </li> <li> <p>Introduction to C++ | C Plus Plus Programming Language Tutorials</p> </li> <li> <p>The C and C++ programming tutorials, hands-on approach with program examples, code samples and tons of output images using Visual C++, C++ Builder, Linux gcc and g++ compilers and IDE</p> </li> <li> <p>Cpp Programming</p> </li> </ul> <p>a. C++ Introduction</p> <p>i. C++ Variables and Literals</p> <p>ii. C++ Data Types</p> <p>iii. C++ Basic I/O</p> <p>iv. C++ Type Conversion</p> <ol> <li> <p>C++ String to Int and    Vice-Versa</p> </li> <li> <p>C++ String to Float, Double and    Vice-Versa</p> </li> </ol> <p>v. C++ Operators</p> <p>vi. C++ Comments</p> <p>b. C++ Flow Control</p> <p>i. C++ if..else</p> <p>ii. C++ for loop</p> <p>iii. C++ do..while loop</p> <p>iv. C++ break statement</p> <p>v. C++ continue statement</p> <p>vi. C++ switch statement</p> <p>vii. C++ goto statement</p> <p>c. C++ Functions</p> <p>i. C++ Functions</p> <p>ii. C++ Function Types</p> <p>iii. C++ Function Overloading</p> <p>iv. C++ Default Argument</p> <p>v. C++ Storage Class</p> <p>vi. C++ Recursion</p> <p>vii. C++ Return Reference</p> <p>d. C++ Arrays &amp; String</p> <p>i. C++ Arrays</p> <p>ii. Multidimensional Arrays</p> <p>iii. C++ Function and Array</p> <p>iv. C++ String</p> <p>e. C++ Structures</p> <p>i. C++ Structures</p> <p>ii. Structure and Function</p> <p>iii. C++ Pointers to Structure</p> <p>iv. C++ Enumeration</p> <p>f. C++ Object &amp; Class</p> <p>i. C++ Objects and Class</p> <p>ii. C++ Constructors</p> <p>iii. C++ Objects &amp; Function</p> <p>iv. C++ Operator Overloading</p> <p>g. C++ Pointers</p> <p>i. C++ Pointer</p> <p>ii. C++ Pointers and Arrays</p> <p>iii. C++ Pointers and Functions</p> <p>iv. C++ Memory Management</p> <p>h. C++ Inheritance</p> <p>i. C++ Inheritance</p> <p>ii. Inheritance Access Control</p> <p>iii. C++ Function Overriding</p> <p>iv. Multiple &amp; Multilevel Inheritance</p> <p>v. C++ Friend Function</p> <p>vi. C++ Virtual Function</p> <p>C++ Templates</p>"},{"location":"tr/week-7-csharp/ce103-week-7-csharp/#c-functional-console-programming","title":"C# Functional Console Programming","text":"<p>We will follow the following topics</p> <ul> <li>Learn C# Programming</li> </ul> <p>Books</p> <p>Free C# Programming Book</p> <p>free-programming-books/free-programming-books-langs.md at master \u00b7 EbookFoundation/free-programming-books \u00b7 GitHub</p>"},{"location":"tr/week-7-csharp/ce103-week-7-csharp/#extras","title":"Extras","text":"<p>Creating a Simple Dynamic-Link Library - Win32 apps | Microsoft Docs</p> <p>Dynamic-Link Library Creation - Win32 apps | Microsoft Docs</p> <p>Exporting from a DLL | Microsoft Docs</p> <p>Exporting from a DLL Using DEF Files | Microsoft Docs</p> <p>How to create a DLL library in C and then use it with C# - CodeProject</p> <p>DLL - How to Write</p> <p>DLL - Dynamic Link Library in C - Steps to Create and Use</p> <p>https://www.codementor.io/@a_hathon/building-and-using-dlls-in-c-d7rrd4caz</p> <p>DLL Injection - free code corner</p> <p>GitHub - dennisbabkin/InjectAll: Tutorial that demonstrates how to code a Windows driver to inject a custom DLL into all running processes. I coded it from start to finish using C++ and x86/x64 Assembly language in Microsoft Visual Studio. The solution includes a kernel driver project, a DLL project and a C++ test console project.</p> <p>Coding Windows Kernel Driver - InjectAll - Making the Visual Studio solution for DLL injection into all running processes.</p>"},{"location":"tr/week-7-csharp/ce103-week-7-csharp/#others","title":"Others","text":"<p>std::dec, std::hex, std::oct - cppreference.com</p> <p>std::setbase - cppreference.com</p> <p>C++ Tutorial: Multi-Threaded Programming - Thread for Win32 - 2020</p> <ol> <li>Csharp Programming</li> </ol> <p>a. Introduction</p> <p>i. C# Hello World</p> <p>ii. C# Keywords &amp; Identifiers</p> <p>iii. C# Variables</p> <p>iv. C# Operators</p> <p>v. C# Basic I/O</p> <p>vi. C# Expressions &amp; Statements</p> <p>vii. C# Comments</p> <p>b. Flow Control</p> <p>i. C# if..else</p> <p>ii. C# for loop</p> <p>iii. C# while loop</p> <p>iv. C# foreach loop</p> <p>v. C# switch statement</p> <p>vi. C# ternary operator</p> <p>c. Exception Handling</p> <p>d. Other Topics</p> <p>i. C# Bitwise Operators</p> <p>ii. C# Preprocessor Directives</p> <p>iii. C# Namespaces</p> <p>iv. C# Partial Class &amp; Method</p>"}]}